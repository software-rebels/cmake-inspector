,owner,name,isFork,isArchived,isDisabled,isLocked,isMirror,mentionableUsers,primaryLanguage,pushedAt,createdAt,stars,commits,cmake_content,cmake_version,cmake_major_version
41,znc,znc,False,False,False,False,False,140,C++,2020-05-17 15:15:50+00:00,2010-01-09 23:44:05+00:00,1694,5250,"#
# Copyright (C) 2004-2020 ZNC, see the NOTICE file for details.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cmake_minimum_required(VERSION 3.1)
project(ZNC VERSION 1.9.0 LANGUAGES CXX)
set(ZNC_VERSION 1.9.x)
set(append_git_version true)
set(alpha_version """") # e.g. ""-rc1""
set(VERSION_EXTRA """" CACHE STRING
	""Additional string appended to version, e.g. to mark distribution"")

set(PROJECT_VERSION ""${ZNC_VERSION}"")

# https://cmake.org/pipermail/cmake/2010-September/039388.html
set(_all_targets """" CACHE INTERNAL """")
function(znc_add_library name)
	add_library(""${name}"" ${ARGN})
	set(_all_targets ""${_all_targets};${name}"" CACHE INTERNAL """")
endfunction()
function(znc_add_executable name)
	add_executable(""${name}"" ${ARGN})
	set(_all_targets ""${_all_targets};${name}"" CACHE INTERNAL """")
endfunction()
function(znc_add_custom_target name)
	add_custom_target(""${name}"" ${ARGN})
	set(_all_targets ""${_all_targets};${name}"" CACHE INTERNAL """")
endfunction()

list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")

include(TestCXX11)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED true)
if(NOT CYGWIN)
	# We don't want to use -std=gnu++11 instead of -std=c++11, but among other
	# things, -std=c++11 on cygwin defines __STRICT_ANSI__ which makes cygwin
	# not to compile: undefined references to strerror_r, to fdopen, to
	# strcasecmp, etc (their declarations in system headers are between ifdef)
	set(CMAKE_CXX_EXTENSIONS false)
endif()

include(CMakeFindFrameworks_fixed)
include(use_homebrew)
include(GNUInstallDirs)
include(CheckCXXSymbolExists)
include(copy_csocket)

set(CMAKE_THREAD_PREFER_PTHREAD true)
set(THREADS_PREFER_PTHREAD_FLAG true)
find_package(Threads REQUIRED)
if(NOT CMAKE_USE_PTHREADS_INIT)
	message(FATAL_ERROR ""This compiler/OS doesn't seem to support pthreads."")
endif()

include(TestLargeFiles)
test_large_files(HAVE_LARGE_FILES_UNUSED_VAR)
find_package(PkgConfig)

macro(tristate_option opt help)
	set(WANT_${opt} AUTO CACHE STRING ${help})
	set_property(CACHE WANT_${opt} PROPERTY STRINGS AUTO YES NO)
	if(WANT_${opt} STREQUAL ""AUTO"")
		set(TRISTATE_${opt}_REQUIRED)
	else()
		set(TRISTATE_${opt}_REQUIRED REQUIRED)
	endif()
endmacro()

tristate_option(OPENSSL ""Support SSL"")
if(WANT_OPENSSL)
	find_package(OpenSSL ${TRISTATE_OPENSSL_REQUIRED})
endif()
set(HAVE_LIBSSL ""${OPENSSL_FOUND}"")

set(WANT_IPV6 true CACHE BOOL ""Support IPv6"")
set(HAVE_IPV6 ""${WANT_IPV6}"")

tristate_option(ZLIB ""Compress HTTP traffic with Zlib"")
if(WANT_ZLIB)
	find_package(ZLIB ${TRISTATE_ZLIB_REQUIRED})
endif()
set(HAVE_ZLIB ""${ZLIB_FOUND}"")

tristate_option(CYRUS ""Support authentication with Cyrus"")
if(WANT_CYRUS)
	pkg_check_modules(CYRUS libsasl2)
	if(NOT CYRUS_FOUND)
		# libsasl2.pc is missing on 2.1.25 which is on ubuntu 14.04
		# next ubuntu version has 2.1.26 which has libsasl2.pc
		#
		# osx (as of El Capitan) doesn't have it either...
		set(_old_cmake_required_libraries ""${CMAKE_REQUIRED_LIBRARIES}"")
		set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} -lsasl2)
		# sys/types.h here is workaround for sasl 2.1.26:
		# https://github.com/znc/znc/issues/1243
		# https://lists.andrew.cmu.edu/pipermail/cyrus-sasl/2012-December/002572.html
		# https://cgit.cyrus.foundation/cyrus-sasl/commit/include/sasl.h?id=2f740223fa1820dd71e6ab0e50d4964760789209
		check_cxx_symbol_exists(sasl_server_init ""sys/types.h;sasl/sasl.h""
			CYRUS_HARDCODED)
		set(CMAKE_REQUIRED_LIBRARIES ""${_old_cmake_required_libraries}"")
		if(CYRUS_HARDCODED)
			set(CYRUS_LDFLAGS -lsasl2)
			set(CYRUS_FOUND true)
		endif()
	endif()
	if(TRISTATE_CYRUS_REQUIRED AND NOT CYRUS_FOUND)
		message(FATAL_ERROR ""Can't find Cyrus SASL 2"")
	endif()
endif()

tristate_option(ICU ""Support character encodings"")
if(WANT_ICU)
	pkg_check_modules(ICU ${TRISTATE_ICU_REQUIRED} icu-uc)
endif()
set(HAVE_ICU ""${ICU_FOUND}"")

set(WANT_PERL false CACHE BOOL ""Support Perl modules"")
set(WANT_PYTHON false CACHE BOOL ""Support Python modules"")
set(WANT_PYTHON_VERSION ""python3"" CACHE STRING
	""Python version to use, e.g. python-3.5, this name is passed to pkg-config"")
if(WANT_PYTHON AND NOT ICU_FOUND)
	message(FATAL_ERROR ""Modpython requires ZNC to be compiled with charset ""
	""support, but ICU library not found"")
endif()
tristate_option(SWIG ""Use SWIG to generate modperl and modpython"")
set(search_swig false)
if(WANT_SWIG AND TRISTATE_SWIG_REQUIRED)
	set(search_swig true)
endif()
if(WANT_PERL AND NOT EXISTS
		""${PROJECT_SOURCE_DIR}/modules/modperl/generated.tar.gz"")
	if(WANT_SWIG)
		set(search_swig true)
	else()
		message(FATAL_ERROR ""Pregenerated modperl files are not available. ""
			""SWIG is required. Alternatively, build ZNC from tarball."")
	endif()
endif()
if(WANT_PYTHON AND NOT EXISTS
		""${PROJECT_SOURCE_DIR}/modules/modpython/generated.tar.gz"")
	if(WANT_SWIG)
		set(search_swig true)
	else()
		message(FATAL_ERROR ""Pregenerated modpython files are not available. ""
			""SWIG is required. Alternatively, build ZNC from tarball."")
	endif()
endif()
if(search_swig)
	find_package(SWIG 3.0.0)
	if(NOT SWIG_FOUND)
		message(FATAL_ERROR
			""Can't find SWIG, therefore Perl and Python aren't supported. ""
			""Alternatively, build ZNC from tarball."")
	endif()
endif()

if(WANT_PERL)
	find_package(PerlLibs 5.10 REQUIRED)
endif()
if (WANT_PYTHON)
	find_package(Perl 5.10 REQUIRED)
	# VERSION_GREATER_EQUAL is available only since 3.7
	if (CMAKE_VERSION VERSION_LESS 3.12)
	else()
		# Even if FindPython3 is available (since CMake 3.12) we still use
		# pkg-config, because FindPython has a hardcoded list of python
		# versions, which may become outdated when new pythons are released,
		# but when cmake in the distro is old.
		#
		# Why FindPython3 is useful at all? Because sometimes there is no
		# python3.pc, but only python-3.5.pc and python-3.6.pc; which would
		# force user to provide the version explicitly via
		# WANT_PYTHON_VERSION. This is the case on Gentoo when NOT building
		# via emerge.
		if (WANT_PYTHON_VERSION STREQUAL ""python3"")
			find_package(Python3 COMPONENTS Development)
		else()
			# We used to pass value like ""python-3.5"" to the variable.
			if (WANT_PYTHON_VERSION MATCHES ""^(python-)?(.*)$"")
				find_package(Python3 COMPONENTS Development
					EXACT ""${CMAKE_MATCH_2}"")
			else()
				message(FATAL_ERROR ""Invalid value of WANT_PYTHON_VERSION"")
			endif()
		endif()
		if (Python3_FOUND AND Python3_VERSION VERSION_LESS 3.3)
			message(STATUS ""Python too old, need at least 3.3"")
			set(Python3_FOUND OFF)
		else()
			# Compatibility with pkg-config variables
			set(Python3_LDFLAGS ""${Python3_LIBRARIES}"")
		endif()
	endif()
	if (NOT Python3_FOUND AND WANT_PYTHON_VERSION MATCHES ""^python"")
		# Since python 3.8, -embed is required for embedding.
		pkg_check_modules(Python3 ""${WANT_PYTHON_VERSION}-embed >= 3.3"")
		if (NOT Python3_FOUND)
			pkg_check_modules(Python3 ""${WANT_PYTHON_VERSION} >= 3.3"")
		endif()
	endif()
	if (NOT Python3_FOUND)
		message(FATAL_ERROR ""Python 3 is not found. Try disabling it."")
	endif()
endif()

set(WANT_TCL false CACHE BOOL ""Support Tcl modules"")
if(WANT_TCL)
	find_package(TCL QUIET)
	if(NOT TCL_FOUND)
		message(FATAL_ERROR ""Can't find Tcl"")
	endif()
endif()

tristate_option(I18N ""Native language support (i18n)"")
if(WANT_I18N)
	find_package(Boost ${TRISTATE_I18N_REQUIRED} COMPONENTS locale)
	find_package(Gettext ${TRISTATE_I18N_REQUIRED})
endif()
if(Boost_LOCALE_FOUND AND GETTEXT_MSGFMT_EXECUTABLE)
	set(HAVE_I18N true)
else()
	set(HAVE_I18N false)
	message(STATUS ""Boost.Locale or gettext (msgfmt) is not found, disabling i18n support"")
endif()

if(HAVE_I18N AND GETTEXT_MSGMERGE_EXECUTABLE)
	find_program(XGETTEXT_EXECUTABLE xgettext)
	if(XGETTEXT_EXECUTABLE)
		add_custom_target(translation)
	endif()
endif()

# poll() is broken on Mac OS, it fails with POLLNVAL for pipe()s.
if(APPLE)
	set(CSOCK_USE_POLL false)
else()
	set(CSOCK_USE_POLL true)
endif()

check_cxx_symbol_exists(getopt_long ""getopt.h"" HAVE_GETOPT_LONG)
check_cxx_symbol_exists(lstat ""sys/types.h;sys/stat.h;unistd.h"" HAVE_LSTAT)
check_cxx_symbol_exists(getpassphrase ""stdlib.h"" HAVE_GETPASSPHRASE)
check_cxx_symbol_exists(tcsetattr ""termios.h;unistd.h"" HAVE_TCSETATTR)
check_cxx_symbol_exists(clock_gettime ""time.h"" HAVE_CLOCK_GETTIME)

# Note that old broken systems, such as OpenBSD, NetBSD, which don't support
# AI_ADDRCONFIG, also have thread-unsafe getaddrinfo(). Gladly, they fixed
# thread-safety before support of AI_ADDRCONFIG, so this can be abused to
# detect the thread-safe getaddrinfo().
#
# TODO: drop support of blocking DNS at some point. OpenBSD supports
# AI_ADDRCONFIG since Nov 2014, and their getaddrinfo() is thread-safe since
# Nov 2013. NetBSD's one is thread-safe since ages ago.
check_cxx_symbol_exists(AI_ADDRCONFIG ""sys/types.h;sys/socket.h;netdb.h""
	HAVE_THREADED_DNS)

if(CMAKE_BUILD_TYPE STREQUAL ""Debug"" AND NOT CYGWIN)
	# These enable some debug options in g++'s STL, e.g. invalid use of
	# iterators, but they cause crashes on cygwin while loading modules
	set(_GLIBCXX_DEBUG true)
	set(_GLIBCXX_DEBUG_PEDANTIC true)
endif()

if(append_git_version)
	find_package(Git)
endif()



file(GLOB csocket_files LIST_DIRECTORIES FALSE
	""${PROJECT_SOURCE_DIR}/third_party/Csocket/Csocket.*"")
if(csocket_files STREQUAL """")
	execute_process(COMMAND git status
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		RESULT_VARIABLE git_status_var
		OUTPUT_QUIET
		ERROR_QUIET)
	if(git_status_var)
		message(FATAL_ERROR
			"" It looks like git submodules are not initialized.\n""
			"" Either this is not a git clone, or you don't have git installed.\n""
			"" Fetch the tarball from the website: https://znc.in/releases/ "")
	else()
		message(FATAL_ERROR
			"" It looks like git submodules are not initialized.\n""
			"" Run: git submodule update --init --recursive"")
	endif()
endif()

install(DIRECTORY webskins
	DESTINATION ""${CMAKE_INSTALL_DATADIR}/znc"")
install(DIRECTORY translations
	DESTINATION ""${CMAKE_INSTALL_DATADIR}/znc"")
install(DIRECTORY man/
	DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
	FILES_MATCHING PATTERN ""znc*"")

set(WANT_SYSTEMD false CACHE BOOL ""Install znc.service to systemd"")
if(WANT_SYSTEMD)
	configure_file(""znc.service.in"" ""znc.service"")
	set(SYSTEMD_DIR """" CACHE PATH ""Path to systemd units"")
	if(SYSTEMD_DIR STREQUAL """" AND PKG_CONFIG_EXECUTABLE)
		execute_process(COMMAND ""${PKG_CONFIG_EXECUTABLE}""
			--variable=systemdsystemunitdir systemd
			OUTPUT_VARIABLE SYSTEMD_DIR)
	endif()
	if(SYSTEMD_DIR STREQUAL """")
		message(FATAL_ERROR ""Systemd is enabled, ""
			""but the unit dir can't be found."")
	endif()
	install(FILES ""${PROJECT_BINARY_DIR}/znc.service""
		DESTINATION ""${SYSTEMD_DIR}"")
endif()

# On cygwin, if to link modules against znc.exe directly, modperl can't call
# ZNC's functions very well. They do get called, but global variables have
# different addresses. That address actually is in modperl/ZNC.dll if to look
# at /proc/123/maps
# Example of such global variable is one returned by CZNC::Get()
# Modpython seems to work though with STATIC on cygwin... (I didn't test it
# too much though)
#
# Non-cygwin should link modules to /usr/bin/znc directly to prevent this:
# error while loading shared libraries: libznc.so: cannot open shared object file: No such file or directory
# Without need to touch LD_LIBRARY_PATH
if(CYGWIN)
	set(znc_link ""znclib"")
	set(lib_type ""SHARED"")
	set(install_lib ""znclib"")
	set(znclib_pc ""-L${CMAKE_INSTALL_FULL_LIBDIR} -lznc"")
else()
	set(znc_link ""znc"")
	set(lib_type ""STATIC"")
	set(install_lib)
	set(znclib_pc)
endif()

configure_file(""include/znc/zncconfig.h.cmake.in"" ""include/znc/zncconfig.h"")
add_subdirectory(include)
add_subdirectory(src)
add_subdirectory(modules)
add_subdirectory(test)
add_subdirectory(zz_msg)

add_custom_target(msg_after_all ALL
	COMMAND ""${CMAKE_COMMAND}"" -E echo
	COMMAND ""${CMAKE_COMMAND}"" -E echo "" ZNC was successfully compiled.""
	COMMAND ""${CMAKE_COMMAND}"" -E echo
	"" Use 'make install' to install ZNC to '${CMAKE_INSTALL_PREFIX}'.""
	COMMAND ""${CMAKE_COMMAND}"" -E echo
	VERBATIM)
add_dependencies(msg_after_all ${_all_targets})
#	@echo """"
#	@echo "" ZNC was successfully compiled.""
#	@echo "" Use '$(MAKE) install' to install ZNC to '$(prefix)'.""


configure_file(""ZNCConfig.cmake.in"" ""ZNCConfig.cmake"" @ONLY)
include(CMakePackageConfigHelpers)
write_basic_package_version_file(""ZNCConfigVersion.cmake""
	COMPATIBILITY AnyNewerVersion)
install(FILES
	""${PROJECT_BINARY_DIR}/ZNCConfig.cmake""
	""${PROJECT_BINARY_DIR}/ZNCConfigVersion.cmake""
	DESTINATION ""${CMAKE_INSTALL_DATADIR}/znc/cmake"")
configure_file(""znc-buildmod.cmake.in"" ""znc-buildmod"" @ONLY)
install(PROGRAMS ""${PROJECT_BINARY_DIR}/znc-buildmod""
	DESTINATION ""${CMAKE_INSTALL_BINDIR}"")

configure_file(""znc.pc.cmake.in"" ""znc.pc"" @ONLY)
install(FILES ""${PROJECT_BINARY_DIR}/znc.pc""
	DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"")

macro(summary_line text var)
	if(${var})
		list(APPEND summary_lines ""${text} : yes"")
	else()
		list(APPEND summary_lines ""${text} : no"")
	endif()
endmacro()
set(summary_lines
	""ZNC ${ZNC_VERSION}${VERSION_EXTRA}${alpha_version} configured""
	"" ""
	""Prefix    : ${CMAKE_INSTALL_PREFIX}"")
summary_line(""SSL      "" ""${OPENSSL_FOUND}"")
summary_line(""IPv6     "" ""${WANT_IPV6}"")
summary_line(""Async DNS"" ""${HAVE_THREADED_DNS}"")
summary_line(""Perl     "" ""${PERLLIBS_FOUND}"")
summary_line(""Python   "" ""${Python3_FOUND}"")
summary_line(""Tcl      "" ""${TCL_FOUND}"")
summary_line(""Cyrus    "" ""${CYRUS_FOUND}"")
summary_line(""Charset  "" ""${ICU_FOUND}"")
summary_line(""Zlib     "" ""${ZLIB_FOUND}"")
summary_line(""i18n     "" ""${HAVE_I18N}"")

include(render_framed_multiline)
render_framed_multiline(""${summary_lines}"")

message("""")
message(""Now you can run 'make' to compile ZNC"")
message("""")

# TODO
# ====
#
# remove old configure.ac and Makefile.in
",3.1,3.1
45,steinwurf,petro,False,False,False,False,False,9,C++,2020-02-13 23:14:46+00:00,2015-11-18 12:12:04+00:00,2,235,"cmake_minimum_required(VERSION 3.10)
project(petro)

if(NOT DEFINED STEINWURF_RESOLVE)
    message(STATUS ""Resolving dependencies..."")
    execute_process(
        COMMAND python waf resolve
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    set(STEINWURF_RESOLVE ""${CMAKE_CURRENT_SOURCE_DIR}/resolve_symlinks"")
endif()

file(GLOB_RECURSE petro_sources ./src/*.cpp)
add_library(petro STATIC ${petro_sources})
add_library(steinwurf::petro ALIAS petro)

if (NOT TARGET endian)
  add_subdirectory(""${STEINWURF_RESOLVE}/endian"" endian)
endif()

if(CMAKE_C_COMPILER_ID MATCHES ""MSVC"")
file(GLOB_RECURSE stream_cpp ./src/stream.cpp)
set_source_files_properties(${stream_cpp} PROPERTIES COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
endif()

target_link_libraries(petro
    PRIVATE steinwurf::endian)

target_compile_features(petro PUBLIC cxx_std_14)

target_include_directories(petro INTERFACE src)
",3.10,3.1
58,Colelyman,kleuren,False,False,False,False,False,4,C++,2019-03-26 15:59:39+00:00,2017-06-22 00:22:24+00:00,8,328,"cmake_minimum_required(VERSION 3.1)
include(ExternalProject)

PROJECT(kleuren)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_FLAGS ""-g -O0"")

set(THIRDPARTY ${CMAKE_SOURCE_DIR}/thirdparty)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# TARGETS
# kleuren target holds each of the object files
add_library(kleuren OBJECT """")

# the kleuren executable
add_executable(kleuren_bin $<TARGET_OBJECTS:kleuren>)
set_target_properties(kleuren_bin
  PROPERTIES OUTPUT_NAME kleuren)

# the kleuren library
add_library(kleuren_static STATIC $<TARGET_OBJECTS:kleuren>)

# the kleuren test suite executable
add_executable(kleuren_test """")
set_target_properties(kleuren_test
  PROPERTIES OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/test)

# Set the proper include directories
target_include_directories(kleuren PUBLIC
  ""${CMAKE_SOURCE_DIR}/inc""
  ""${THIRDPARTY}/args""
  ""${THIRDPARTY}/sparsepp""
)
target_include_directories(kleuren_test PUBLIC
  ""${CMAKE_SOURCE_DIR}/inc""
  ""${CMAKE_SOURCE_DIR}/test/thirdparty/catch""
)
target_link_libraries(kleuren_test kleuren_static)

# Add the source files from the subdirectories
include(src/CMakeLists.txt)
include(test/src/CMakeLists.txt)

# Set the proper installation directory
install(TARGETS kleuren_bin kleuren_static DESTINATION ${CMAKE_INSTALL_PREFIX})

# DEPENDENCIES
# BloomFilterTrie
ExternalProject_Add(project_bft
  GIT_REPOSITORY https://github.com/Colelyman/BloomFilterTrie
  GIT_TAG 0.9.0
  PREFIX ${THIRDPARTY}/BloomFilterTrie
  CMAKE_ARGS
  INSTALL_COMMAND """" # doesn't need to be installed system-wide, just locally
)
ExternalProject_Get_Property(project_bft install_dir)
add_library(bft STATIC IMPORTED)
set(BFT_PATH ${install_dir}/src/project_bft)
set_property(TARGET bft PROPERTY IMPORTED_LOCATION ${BFT_PATH}/bin/libbft_static.a)

# Judy array (a dependency of BloomFilterTrie)
set(JUDY_PATH ${BFT_PATH}/bin/judy-1.0.5)
set(JUDY_LIB ${JUDY_PATH}/lib/libJudy${CMAKE_SHARED_LIBRARY_SUFFIX})

# Jemalloc (a dependency of BloomFilterTrie)
set(JEMALLOC_PATH ${BFT_PATH}/bin/jemalloc-5.1.0)
set(JEMALLOC_LIB ${JEMALLOC_PATH}/lib/libjemalloc${CMAKE_SHARED_LIBRARY_SUFFIX})

include_directories(${BFT_PATH}/include 
  ${JUDY_PATH}/include
  ${JEMALLOC_PATH}/include)

add_dependencies(kleuren project_bft)
target_link_libraries(kleuren_bin bft ${JUDY_LIB} ${JEMALLOC_LIB})
target_link_libraries(kleuren_static bft ${JUDY_LIB} ${JEMALLOC_LIB})

",3.1,3.1
64,mryndzionek,esm,False,False,False,False,False,1,C,2020-05-04 17:06:41+00:00,2017-07-30 09:35:05+00:00,6,235,"cmake_minimum_required(VERSION 3.10)
project(esm)

set(VERSION_MAJOR 0)
set(VERSION_MINOR 0)
set(VERSION_PATCH 1)
set(VERSION_STRING ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")

set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra \
 -Werror -Wno-variadic-macros -Wno-missing-braces -Wno-unused-const-variable"")

configure_file (
    ""core/include/config.h.in""
    ""core/include/config.h""
  )

if(NOT ESM_PLATFORM)
  set(ESM_PLATFORM linux)
  set(ESM_BOARD native)
endif()

include(""${CMAKE_SOURCE_DIR}/Core.cmake"")
include(""${CMAKE_SOURCE_DIR}/platform/${ESM_PLATFORM}/CMakeLists.txt"")

add_subdirectory(apps/blink)
add_subdirectory(apps/dpp)
add_subdirectory(apps/smokers)
add_subdirectory(apps/pelican)
add_subdirectory(apps/prodcons)
add_subdirectory(apps/clock)
add_subdirectory(apps/keyboard)
",3.10,3.1
70,AeonGames,AeonEngine,False,False,False,False,False,3,C++,2020-05-06 21:47:31+00:00,2016-03-16 21:14:20+00:00,11,1021,"# Copyright (C) 2016-2019 Rodrigo Jose Hernandez Cordoba
#
# Licensed under the Apache License, Version 2.0 (the ""License""); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

cmake_minimum_required(VERSION 3.10.0)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
  cmake_policy(SET CMP0072 NEW)
  if(POLICY CMP0020)
    cmake_policy(SET CMP0020 NEW)
  endif(POLICY CMP0020)
  if(POLICY CMP0053)
    cmake_policy(SET CMP0053 NEW)
  endif(POLICY CMP0053)
endif(COMMAND cmake_policy)

project(AeonEngine)
enable_testing()
enable_language(CXX)
enable_language(C)

define_property(GLOBAL PROPERTY PLUGINS INHERITED
    BRIEF_DOCS ""Built Plugin List""
    FULL_DOCS ""Plugin Targets should add an entry to this list in order to be included into the configuration file."")

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
list(APPEND CMAKE_PREFIX_PATH ""${CMAKE_BINARY_DIR}"")

if(CMAKE_VERSION VERSION_LESS ""3.12.4"")
  add_definitions(-D_USE_MATH_DEFINES)
else()
  add_compile_definitions(_USE_MATH_DEFINES)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  set(CMAKE_CXX_FLAGS
      ""${CMAKE_CXX_FLAGS} /Zc:__cplusplus /DPROTOBUF_WARNINGS=\""4251 4996\"""")
else()
  list(APPEND CMAKE_PREFIX_PATH ""C:/msys64/mingw64"" ""C:/msys64/usr"")
endif()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Debug' as none was specified."")
  set(CMAKE_BUILD_TYPE ""Debug"" CACHE STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE
               PROPERTY STRINGS
                        ""Debug""
                        ""Release""
                        ""MinSizeRel""
                        ""RelWithDebInfo"")
endif()

set(PROXY """" CACHE STRING ""Proxy server string for downloads."")
if(PROXY)
  set(ENV{http_proxy} ""${PROXY}"")
  set(ENV{https_proxy} ""${PROXY}"")
  set(ENV{ftp_proxy} ""${PROXY}"")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb"")
  set(CMAKE_CXX_FLAGS_RELEASE
      ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -fomit-frame-pointer"")
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON
    CACHE INTERNAL ""Force compilation database"")

set(Portaudio_FIND_QUIETLY ON)

find_program(XXD_EXECUTABLE xxd
             HINTS ENV
                   MINGW_PREFIX
                   MSYS2_PATH
                   ChocolateyInstall)
find_program(BASH_EXECUTABLE bash HINTS ENV MINGW_PREFIX MSYS2_PATH)
find_program(GLOBAL_EXECUTABLE
             NAMES global global.exe
             HINTS ENV MINGW_PREFIX MSYS2_PATH)
find_program(CLANG_EXECUTABLE
             NAMES clang clang.exe
             HINTS ENV MINGW_PREFIX MSYS2_PATH)
find_program(CLANG_TIDY_EXECUTABLE
             NAMES clang-tidy clang-tidy.exe
             HINTS ENV MINGW_PREFIX MSYS2_PATH)

find_package(Git)

find_package(PkgConfig)
if(PKG_CONFIG_FOUND AND BASH_EXECUTABLE AND MSYS)
  # In order to properly use pkg-config in a msys2 environment we need to jump
  # through some hoops. CMake seems to call pkg-config without any of the bash
  # environment set up, so we need to set the proper pkg config path inside the
  # cmake process address space.
  execute_process(COMMAND ${BASH_EXECUTABLE} --login -c ""echo $PKG_CONFIG_PATH""
                  OUTPUT_VARIABLE PKG_CONFIG_PATH)
  set(ENV{PKG_CONFIG_PATH} ${PKG_CONFIG_PATH})
endif()

find_package(ZLIB)
find_package(Threads)
find_package(Vulkan)
find_package(OpenGL)
find_package(GLslang)
find_package(Protobuf)
find_package(Portaudio)
find_package(OggVorbis)
include(AeonEngineFunctions)
include(FindProtobufExp)
include(FindPythonModule)
include(CheckIncludeFile)
include(CheckIncludeFileCXX)
include(CheckIncludeFiles)
find_package (Python3 COMPONENTS Interpreter)
find_package(ImageMagick COMPONENTS convert)

get_filename_component(PYTHON_PATH ""${Python3_EXECUTABLE}"" DIRECTORY)
find_program(AUTOPEP8_EXECUTABLE autopep8
             HINTS ENV
                   MINGW_PREFIX
                   MSYS2_PATH
                   ""${PYTHON_PATH}/Scripts"")
find_program(CMAKE_FORMAT_EXECUTABLE cmake-format
             HINTS ENV MINGW_PREFIX MSYS2_PATH)

option(BUILD_OPENGL_RENDERER ""Build the OpenGL renderer"" ON)
option(BUILD_VULKAN_RENDERER ""Build the Vulkan renderer"" ON)
option(USE_AEONGUI ""Use the AeonGUI library for the user interface"" OFF)

if(CLANG_TIDY_EXECUTABLE)
  option(USE_CLANG_TIDY ""Use of clang-tidy (Requires CMake 3.6.0 or Higher)""
         OFF)
  set(CLANG_TIDY_CHECKS
      ""-warnings-as-errors=performance-*,modernize-*,-modernize-pass-by-value""
      ""-checks=performance-*,modernize-*,-modernize-pass-by-value"")
endif()

if(CMAKE_HOST_UNIX)
  set(PATH_SEPARATOR :)
elseif(CMAKE_HOST_WIN32)
  set(PATH_SEPARATOR $<SEMICOLON>)
endif()

find_program(SED_EXECUTABLE sed
             HINTS ENV
                   MINGW_PREFIX
                   MSYS2_PATH
                   ProgramFiles
             PATH_SUFFIXES bin usr/bin Git/usr/bin)
if(NOT SED_EXECUTABLE)
  message(FATAL_ERROR ""Unable to find sed executable."")
endif()
find_program(GREP_EXECUTABLE grep
             HINTS ENV
                   MINGW_PREFIX
                   MSYS2_PATH
                   ProgramFiles
             PATH_SUFFIXES usr/bin Git/usr/bin)
if(NOT GREP_EXECUTABLE)
  message(FATAL_ERROR ""Unable to find grep executable."")
endif()

find_program(DOXYGEN_EXECUTABLE doxygen
             HINTS ENV
                   MINGW_PREFIX
                   MSYS2_PATH
                   ProgramFiles
                   ChocolateyInstall
                   ProgramData
             PATH_SUFFIXES /usr/bin chocolatey/bin)
if(DOXYGEN_EXECUTABLE)
  find_program(DOT_EXECUTABLE dot
               HINTS ENV
                     MINGW_PREFIX
                     MSYS2_PATH
                     ProgramFiles
                     ChocolateyInstall
                     ProgramData
               PATH_SUFFIXES /usr/bin chocolatey/bin)
  if(DOT_EXECUTABLE)
    set(HAS_DOT ""YES"")
  else()
    set(HAS_DOT ""NO"")
  endif()
  if(GIT_FOUND)
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                    OUTPUT_VARIABLE GIT_HASH)
  else()
    set(GIT_HASH ""Unknown Build"")
  endif()
  file(RELATIVE_PATH BIN_TO_SRC ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR})
  configure_file(""${CMAKE_SOURCE_DIR}/cmake/Doxyfile.in"" ""Doxyfile"" @ONLY)
  add_custom_target(generate-documentation
                    COMMAND ${CMAKE_COMMAND} -E remove_directory
                            ${CMAKE_SOURCE_DIR}/docs/static/documentation
                    COMMAND ${DOXYGEN_EXECUTABLE}
                    COMMENT ""Generating Documentation"")
endif()

add_subdirectory(tools/aeontool)
add_subdirectory(engine)
add_subdirectory(application)
find_package(Qt5
             COMPONENTS LinguistTools
                        Core
                        Gui
                        Widgets)
if(WIN32)
  find_package(Qt5 COMPONENTS WinExtras)
elseif(UNIX)
  find_package(Qt5 COMPONENTS X11Extras)
endif()
if(Qt5_FOUND)
  add_subdirectory(tools/worldeditor)
endif()

find_path(GTEST_SOURCE_PATH googletest PATHS /usr/src/googletest)
if(GTEST_SOURCE_PATH)
  add_subdirectory(${GTEST_SOURCE_PATH} ${CMAKE_BINARY_DIR}/googletest)
  set(GTEST_LIBRARY gtest)
  set(GMOCK_LIBRARY gmock)
  add_subdirectory(tests)
else()
  find_package(GTest)
  if(GTest_FOUND)
    find_library(GMOCK_LIBRARY
                 NAMES gmock libgmock libgmock.a
                 PATHS ""${GTEST_DIR}""
                 PATH_SUFFIXES lib)
    find_library(GMOCK_LIBRARY_DEBUG
                 NAMES gmockd libgmockd libgmockd.a
                 PATHS ""${GTEST_DIR}""
                 PATH_SUFFIXES lib)
    add_subdirectory(tests)
  endif()
endif()

#
# Code Formating on pre-commit hook
#

if(WIN32)
  find_program(ASTYLE_EXECUTABLE astyle
               HINTS ENV ProgramData
               PATH_SUFFIXES /usr/bin chocolatey/bin)
  find_program(FIND_EXECUTABLE find
               HINTS ENV ProgramFiles
               PATH_SUFFIXES /usr/bin Git/usr/bin)
else()
  find_program(FIND_EXECUTABLE find)
  find_program(ASTYLE_EXECUTABLE astyle)
endif()

set(ASTYLE_OPTIONS ""--options=${CMAKE_SOURCE_DIR}/astylerc"")
configure_file(""${CMAKE_SOURCE_DIR}/cmake/pre-commit.in""
               ""${CMAKE_SOURCE_DIR}/.git/hooks/pre-commit"")

#
# Protobuf Python source generation target
#

add_custom_target(
  generate-python-protobuf-source
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/mesh.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/skeleton.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/animation.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/model.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/pipeline.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/material.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/property.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/sampler.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/vector2.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/vector3.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/vector4.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/quaternion.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/geometry.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/transform.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/scene.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/reference.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/framebuffer.proto
  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
          --python_out ${CMAKE_SOURCE_DIR}/tools/blender/modules
          --proto_path ${CMAKE_SOURCE_DIR}/proto
                       ${CMAKE_SOURCE_DIR}/proto/matrix4x4.proto
  SOURCES ${CMAKE_SOURCE_DIR}/proto/mesh.proto
          ${CMAKE_SOURCE_DIR}/proto/skeleton.proto
          ${CMAKE_SOURCE_DIR}/proto/animation.proto
          ${CMAKE_SOURCE_DIR}/proto/model.proto
          ${CMAKE_SOURCE_DIR}/proto/pipeline.proto
          ${CMAKE_SOURCE_DIR}/proto/material.proto
          ${CMAKE_SOURCE_DIR}/proto/property.proto
          ${CMAKE_SOURCE_DIR}/proto/sampler.proto
          ${CMAKE_SOURCE_DIR}/proto/vector2.proto
          ${CMAKE_SOURCE_DIR}/proto/vector3.proto
          ${CMAKE_SOURCE_DIR}/proto/vector4.proto
          ${CMAKE_SOURCE_DIR}/proto/quaternion.proto
          ${CMAKE_SOURCE_DIR}/proto/geometry.proto
          ${CMAKE_SOURCE_DIR}/proto/transform.proto
          ${CMAKE_SOURCE_DIR}/proto/scene.proto
          ${CMAKE_SOURCE_DIR}/proto/reference.proto
          ${CMAKE_SOURCE_DIR}/proto/framebuffer.proto
          ${CMAKE_SOURCE_DIR}/proto/matrix4x4.proto
  COMMENT ""Generating Protocol Buffers Python Code"")

#
# Binary asset generation target.
#
add_custom_target(
  binary-assets
  COMMAND
          $<TARGET_FILE:aeontool> convert -i
          ${CMAKE_SOURCE_DIR}/game/meshes/suzanne.txt -o
          ${CMAKE_SOURCE_DIR}/game/meshes/suzanne.msh
  COMMAND
          $<TARGET_FILE:aeontool> convert -i
          ${CMAKE_SOURCE_DIR}/game/meshes/cube.txt -o
          ${CMAKE_SOURCE_DIR}/game/meshes/cube.msh
  COMMAND
          $<TARGET_FILE:aeontool> convert -i
          ${CMAKE_SOURCE_DIR}/game/shaders/simple_phong.txt -o
          ${CMAKE_SOURCE_DIR}/game/shaders/simple_phong.prg
  COMMAND
          $<TARGET_FILE:aeontool> convert -i
          ${CMAKE_SOURCE_DIR}/game/shaders/fixed_phong.txt -o
          ${CMAKE_SOURCE_DIR}/game/shaders/fixed_phong.prg
  COMMAND
          $<TARGET_FILE:aeontool> convert -i
          ${CMAKE_SOURCE_DIR}/game/shaders/plain_red.txt -o
          ${CMAKE_SOURCE_DIR}/game/shaders/plain_red.prg
  COMMAND ${CMAKE_COMMAND} -DCMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} -P
          ${CMAKE_SOURCE_DIR}/cmake/GenerateDevelopmentTextures.cmake
  DEPENDS aeontool ProtoBufClasses
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  SOURCES ${CMAKE_SOURCE_DIR}/game/meshes/suzanne.txt
          ${CMAKE_SOURCE_DIR}/game/meshes/cube.txt
          ${CMAKE_SOURCE_DIR}/game/shaders/simple_phong.txt
          ${CMAKE_SOURCE_DIR}/game/shaders/fixed_phong.txt
          ${CMAKE_SOURCE_DIR}/game/shaders/plain_red.txt
          ${CMAKE_SOURCE_DIR}/game/images/development.svg
  COMMENT ""Generating binary game assets"")

#
# Blender Execution target
#
find_program(BLENDER_EXECUTABLE
             NAMES blender blender.exe
             HINTS ENV ProgramFiles
             PATH_SUFFIXES ""Blender Foundation/Blender"")
if(BLENDER_EXECUTABLE)
  get_filename_component(BLENDER_PATH ""${BLENDER_EXECUTABLE}"" DIRECTORY)
  execute_process(COMMAND ""${BLENDER_EXECUTABLE}"" --version
                  OUTPUT_VARIABLE BLENDER_VERSION)
  string(REGEX MATCH
               ""Blender [^ \\t]+""
               BLENDER_VERSION
               ""${BLENDER_VERSION}"")
  string(REGEX
         REPLACE ""Blender ([^ ]+)""
                 ""\\1""
                 BLENDER_VERSION
                 ""${BLENDER_VERSION}"")
  find_program(BLENDER_Python3_EXECUTABLE
               NAMES python python.exe
               PATHS ""${BLENDER_PATH}/${BLENDER_VERSION}/python/bin""
               NO_DEFAULT_PATH)

  # Right now this is just a shortcut to running Blender, it was supposed to set
  # everything up so exporters were registered and ready to run without making
  # changes to the Blender configuration, but that idea didn't work out in the
  # end. The target is still useful and I may expand on it later on, so it stays
  # for now.
  add_custom_target(
    run-blender
    COMMAND ""${BLENDER_EXECUTABLE}""
    DEPENDS generate-python-protobuf-source
    SOURCES ${CMAKE_SOURCE_DIR}/tools/blender/addons/io_mesh_msh/export.py
            ${CMAKE_SOURCE_DIR}/tools/blender/addons/io_skeleton_skl/export.py
            ${CMAKE_SOURCE_DIR}/tools/blender/addons/io_animation_anm/export.py
    COMMENT ""Running Blender"")
endif()

#
# Clean Build Directory Target
#
if(FIND_EXECUTABLE)
  add_custom_target(
    clean-build
    COMMAND ${FIND_EXECUTABLE} '${CMAKE_BINARY_DIR}' ! -name 'CMakeCache.txt' !
            -wholename '${CMAKE_BINARY_DIR}' -exec rm -rf {} +
    COMMENT ""Cleaning Build you will need to rerun cmake configure and generate""
    )
endif()

#
# Generate VS Code Environment
#
if(CMAKE_GENERATOR MATCHES ""(MSYS|Unix) Makefiles"")
  set(CODE_ZOOMLEVEL ""0"" CACHE STRING ""window.zoomLevel for VS Code."")
  # TODO SOURCE_DIRECTORIES could be set and used to call add_subdirectory
  # directly from this top level
  set(SOURCE_DIRECTORIES ${CMAKE_SOURCE_DIR} application
      # application/windows
      engine
      engine/images
      engine/images/png
      engine/renderers/opengl
      engine/renderers/vulkan
      engine/sound/oggvorbis
      engine/sound/portaudio
      tools/aeontool
      tools/worldeditor)

  set(INCLIST """")

  if(Qt5_FOUND)
    list(APPEND INCLIST ${Qt5Core_INCLUDE_DIRS})
    list(APPEND INCLIST ${Qt5Gui_INCLUDE_DIRS})
    list(APPEND INCLIST ${Qt5Widgets_INCLUDE_DIRS})
  endif(Qt5_FOUND)
  list(APPEND INCLIST ${GLSlang_INCLUDE_DIR})
  list(APPEND INCLIST ${VULKAN_INCLUDE_DIR})
  list(APPEND INCLIST ${Protobuf_INCLUDE_DIR})
  list(APPEND INCLIST ${CMAKE_BINARY_DIR}/engine)
  list(APPEND INCLIST ${CMAKE_BINARY_DIR}/engine/renderers/opengl)

  list(REMOVE_DUPLICATES INCLIST)
  set(INCLIST ""\""${INCLIST}\"""")
  string(REPLACE "";""
                 ""\"",\n\""""
                 INCLIST
                 ""${INCLIST}"")

  find_program(GDB_EXECUTABLE gdb HINTS ENV MINGW_PREFIX MSYS2_PATH)
  set(DEBUG_PATH ""${CMAKE_BINARY_DIR}/bin"")
  if(CMAKE_GENERATOR MATCHES ""MSYS Makefiles"")
    set(DEBUG_PATH ""${DEBUG_PATH};$ENV{MINGW_PREFIX}/bin"")
    set(USE_EXTERNAL_CONSOLE ""true"")
  else()
    set(DEBUG_PATH ""$ENV{PATH}:${DEBUG_PATH}"")
    set(USE_EXTERNAL_CONSOLE ""false"")
    set(QT_QPA_PLATFORM ""{\""name\"":\""QT_QPA_PLATFORM\"",\""value\"":\""xcb\""},"")
  endif()
  configure_file(""${CMAKE_SOURCE_DIR}/cmake/tasks.json.in""
                 ""${CMAKE_SOURCE_DIR}/.vscode/tasks.json"")
  configure_file(""${CMAKE_SOURCE_DIR}/cmake/settings.json.in""
                 ""${CMAKE_SOURCE_DIR}/.vscode/settings.json"")
  configure_file(""${CMAKE_SOURCE_DIR}/cmake/launch.json.in""
                 ""${CMAKE_SOURCE_DIR}/.vscode/launch.json"")
  configure_file(""${CMAKE_SOURCE_DIR}/cmake/c_cpp_properties.json.in""
                 ""${CMAKE_SOURCE_DIR}/.vscode/c_cpp_properties.json"" @ONLY)
  add_custom_target(fix-compile-commands
                    COMMAND ${SED_EXECUTABLE} -i 's/\\/C\\//C:\\//g'
                            ${CMAKE_BINARY_DIR}/compile_commands.json
                    DEPENDS ${CMAKE_BINARY_DIR}/compile_commands.json
                    COMMENT ""Fixing Compile Commands Database"")
endif()

set(COVER_BACKGROUND ""${CMAKE_BINARY_DIR}/wallpaper.png""
    CACHE FILEPATH ""Background for the create-cover target"")
set(COVER_POINTSIZE ""250""
    CACHE STRING ""Font pointsize for the create-cover target"")
add_custom_target(create-cover
                  COMMAND ""${ImageMagick_convert_EXECUTABLE}"" -size 1920x1080
                          xc:none -background transparent -font Ego -gravity
                          center -pointsize ${COVER_POINTSIZE} -fill none
                          -stroke SteelBlue4 -strokewidth 10 -draw \""text 0,0
                          \'`date \+\""%B %d %Y\""`\'\"" -blur 0x10 -pointsize
                          ${COVER_POINTSIZE} -fill white -stroke none
                          -strokewidth 0 -draw \""text 0,0 \'`date \+\""%B %d
                          %Y\""`\'\"" PNG32:overlay.png
                  COMMAND ""${ImageMagick_convert_EXECUTABLE}""
                          ""${COVER_BACKGROUND}"" -draw
                          'image over 0,0 1920,1080 overlay.png' cover.png
                  DEPENDS ""${COVER_BACKGROUND}""
                  COMMENT ""Creating Cover"")

get_property(PLUGIN_LIST GLOBAL PROPERTY PLUGINS)
foreach(PLUGIN ${PLUGIN_LIST})
  string(APPEND PLUGINS ""Plugin: \""${PLUGIN}\""\n"")
endforeach()
string(REGEX REPLACE ""\n$"" """" PLUGINS ""${PLUGINS}"")
configure_file(""${CMAKE_SOURCE_DIR}/cmake/config.in"" ""${CMAKE_SOURCE_DIR}/game/config"" @ONLY)
",3.10.0,3.1
236,afritz1,OpenTESArena,False,False,False,False,False,13,C++,2020-05-15 06:17:44+00:00,2016-01-29 02:07:08+00:00,427,1808,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

IF (COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
ENDIF (COMMAND cmake_policy)

PROJECT(OpenTESArena)

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/"")

# Set global C++ standard for all targets.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

# Configure for GNU Compiler (also affects MSYS2). Use ""MATCHES"" instead of ""STREQUAL""
# to cover both Clang and AppleClang.
IF (CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    # To use std::thread and friends, we must pass -lpthread and -pthread to the compiler and Linker for GCC
    IF (NOT WIN32 AND NOT APPLE)
        SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pthread"")
        SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"")
        SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -lpthread -pthread"")
    ENDIF ()

    # Optimizations.
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse4.1"")
ENDIF ()

# We want RelWithDebInfo to actually include debug stuff (define _DEBUG
# instead of NDEBUG)
FOREACH(flag_var  CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO)
    IF(${flag_var} MATCHES ""-DNDEBUG"")
        STRING(REGEX REPLACE ""-DNDEBUG"" ""-D_DEBUG"" ${flag_var} ""${${flag_var}}"")
    ENDIF()
ENDFOREACH()

IF (MSVC)
    # Add multi-processor compilation.
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")
ENDIF ()

ADD_SUBDIRECTORY(components)
ADD_SUBDIRECTORY(OpenTESArena)
",3.1.0,3.1
251,irtimmer,moonlight-embedded,False,False,False,False,False,30,C,2020-04-30 18:55:00+00:00,2014-01-07 00:51:19+00:00,1208,543,"cmake_minimum_required(VERSION 3.1)
project(moonlight-embedded VERSION 2.4.10 LANGUAGES C)
SET(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
SET(CMAKE_C_STANDARD 99)
include(${CMAKE_ROOT}/Modules/GNUInstallDirs.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/generate_version_header.cmake)

aux_source_directory(./src SRC_LIST)
list(APPEND SRC_LIST ./src/input/evdev.c ./src/input/mapping.c ./src/input/udev.c)

set(MOONLIGHT_DEFINITIONS)

find_package(ALSA)
find_package(Opus REQUIRED)
find_package(Broadcom)
find_package(Freescale)
find_package(Amlogic)
find_package(Rockchip)

find_package(PkgConfig REQUIRED)
pkg_check_modules(EVDEV REQUIRED libevdev)
pkg_check_modules(UDEV REQUIRED libudev)
pkg_check_modules(SDL sdl2>=2.0.4)
pkg_check_modules(AVCODEC libavcodec)
pkg_check_modules(AVUTIL libavutil)
pkg_check_modules(XLIB x11)
pkg_check_modules(VDPAU vdpau)
pkg_check_modules(LIBVA libva)
pkg_check_modules(LIBVA_X11 libva-x11)
pkg_check_modules(PULSE libpulse-simple)
pkg_check_modules(CEC libcec>=4)
pkg_check_modules(EGL egl)
pkg_check_modules(GLES glesv2)

set(VDPAU_ACCEL_FOUND FALSE)
set(VA_ACCEL_FOUND FALSE)
set(SOFTWARE_FOUND FALSE)

if(AVCODEC_FOUND AND AVUTIL_FOUND)
  if(EGL_FOUND AND GLES_FOUND AND XLIB_FOUND)
    set(X11_FOUND TRUE)
    if(VDPAU_FOUND)
      set(VDPAU_ACCEL_FOUND TRUE)
    endif()
    if (LIBVA_FOUND AND LIBVA_X11_FOUND)
      set(VA_ACCEL_FOUND TRUE)
    endif()
  endif()
  if(SDL_FOUND OR X11_FOUND)
    set(SOFTWARE_FOUND TRUE)
  endif()
endif()

SET(MOONLIGHT_COMMON_INCLUDE_DIR ./third_party/moonlight-common-c/src)
SET(GAMESTREAM_INCLUDE_DIR ./libgamestream)

include_directories(""${PROJECT_BINARY_DIR}"")

add_subdirectory(libgamestream)

add_executable(moonlight ${SRC_LIST})
target_link_libraries(moonlight gamestream)

if (CEC_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_LIBCEC)
  list(APPEND MOONLIGHT_OPTIONS CEC)
  target_sources(moonlight PRIVATE ./src/input/cec.c)
  target_include_directories(moonlight PRIVATE ./third_party/libcec ${CEC_INCLUDE_DIRS})
  target_link_libraries(moonlight ${CEC_LIBRARIES})
endif()

if(AMLOGIC_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_AML)
  list(APPEND MOONLIGHT_OPTIONS AML)
  add_library(moonlight-aml SHARED ./src/video/aml.c ${ILCLIENT_SRC_LIST})
  target_include_directories(moonlight-aml PRIVATE ${AMLOGIC_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-aml gamestream ${AMLOGIC_LIBRARIES})
  set_property(TARGET moonlight-aml PROPERTY COMPILE_DEFINITIONS ${AMLOGIC_DEFINITIONS})
  install(TARGETS moonlight-aml DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(BROADCOM_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_PI)
  list(APPEND MOONLIGHT_OPTIONS PI)
  aux_source_directory(./third_party/ilclient ILCLIENT_SRC_LIST)
  add_library(moonlight-pi SHARED ./src/video/pi.c ./src/audio/omx.c ${ILCLIENT_SRC_LIST})
  target_include_directories(moonlight-pi PRIVATE ./third_party/ilclient ${BROADCOM_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR} ${OPUS_INCLUDE_DIRS})
  target_link_libraries(moonlight-pi gamestream ${BROADCOM_OMX_LIBRARIES} ${OPUS_LIBRARY})
  set_property(TARGET moonlight-pi PROPERTY COMPILE_DEFINITIONS ${BROADCOM_OMX_DEFINITIONS})
  install(TARGETS moonlight-pi DESTINATION ${CMAKE_INSTALL_LIBDIR})

  list(APPEND MOONLIGHT_DEFINITIONS HAVE_MMAL)
  list(APPEND MOONLIGHT_OPTIONS MMAL)
  add_library(moonlight-mmal SHARED ./src/video/mmal.c)
  target_include_directories(moonlight-mmal PRIVATE ${BROADCOM_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-mmal gamestream ${BROADCOM_MMAL_LIBRARIES})
  install(TARGETS moonlight-mmal DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(FREESCALE_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_IMX)
  list(APPEND MOONLIGHT_OPTIONS IMX)
  add_library(moonlight-imx SHARED ./src/video/imx.c ./src/video/imx_vpu.c)
  target_include_directories(moonlight-imx PRIVATE ${FREESCALE_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-imx gamestream ${FREESCALE_LIBRARIES})
  install(TARGETS moonlight-imx DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(ROCKCHIP_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_ROCKCHIP)
  list(APPEND MOONLIGHT_OPTIONS ROCKCHIP)
  add_library(moonlight-rk SHARED ./src/video/rk.c)
  target_include_directories(moonlight-rk PRIVATE ${ROCKCHIP_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-rk gamestream ${ROCKCHIP_LIBRARIES})
  set_property(TARGET moonlight-rk PROPERTY COMPILE_DEFINITIONS ${ROCKCHIP_DEFINITIONS})
  install(TARGETS moonlight-rk DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if (SOFTWARE_FOUND)
  target_sources(moonlight PRIVATE ./src/video/ffmpeg.c)
  target_include_directories(moonlight PRIVATE ${AVCODEC_INCLUDE_DIRS} ${AVUTIL_INCLUDE_DIRS})
  target_link_libraries(moonlight ${AVCODEC_LIBRARIES} ${AVUTIL_LIBRARIES})
  if(SDL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_SDL)
    list(APPEND MOONLIGHT_OPTIONS SDL)
    target_sources(moonlight PRIVATE ./src/video/sdl.c ./src/audio/sdl.c ./src/input/sdl.c)
    target_include_directories(moonlight PRIVATE ${SDL_INCLUDE_DIRS})
    target_link_libraries(moonlight ${SDL_LIBRARIES})
  endif()
  if(X11_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_X11)
    list(APPEND MOONLIGHT_OPTIONS X11)
    target_sources(moonlight PRIVATE ./src/video/x11.c ./src/video/egl.c ./src/input/x11.c)
    target_include_directories(moonlight PRIVATE ${XLIB_INCLUDE_DIRS} ${EGL_INCLUDE_DIRS} ${GLES_INCLUDE_DIRS})
    target_link_libraries(moonlight ${XLIB_LIBRARIES} ${EGL_LIBRARIES} ${GLES_LIBRARIES})
  endif()
  if(VDPAU_ACCEL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_VDPAU)
    list(APPEND MOONLIGHT_OPTIONS VDPAU)
    target_include_directories(moonlight PRIVATE ${VDPAU_INCLUDE_DIRS})
    target_link_libraries(moonlight ${VDPAU_LIBRARIES})
  endif()
  if(VA_ACCEL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_VAAPI)
    list(APPEND MOONLIGHT_OPTIONS VAAPI)
    target_sources(moonlight PRIVATE ./src/video/ffmpeg_vaapi.c)
    target_include_directories(moonlight PRIVATE ${LIBVA_INCLUDE_DIRS} ${LIBVA_X11_INCLUDE_DIRS})
    target_link_libraries(moonlight ${LIBVA_LIBRARIES} ${LIBVA_X11_LIBRARIES})
  endif()
endif()

if (ALSA_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_ALSA)
  list(APPEND MOONLIGHT_OPTIONS ALSA)
  target_sources(moonlight PRIVATE ./src/audio/alsa.c)
  target_include_directories(moonlight PRIVATE ${ALSA_INCLUDE_DIR})
  target_link_libraries(moonlight ${ALSA_LIBRARY})
endif()

if (PULSE_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_PULSE)
  list(APPEND MOONLIGHT_OPTIONS PULSE)
  target_sources(moonlight PRIVATE ./src/audio/pulse.c)
  target_include_directories(moonlight PRIVATE ${PULSE_INCLUDE_DIRS})
  target_link_libraries(moonlight ${PULSE_LIBRARIES})
endif()

if (AMLOGIC_FOUND OR BROADCOM_FOUND OR FREESCALE_FOUND OR ROCKCHIP_FOUND OR X11_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_EMBEDDED)
  list(APPEND MOONLIGHT_OPTIONS EMBEDDED)
endif()

if(NOT AMLOGIC_FOUND AND NOT BROADCOM_FOUND AND NOT FREESCALE_FOUND AND NOT ROCKCHIP_FOUND AND NOT SOFTWARE_FOUND)
  message(FATAL_ERROR ""No video output available"")
endif()

configure_file(""./src/configuration.h.in"" ""${PROJECT_BINARY_DIR}/configuration.h"")

set_property(TARGET moonlight PROPERTY COMPILE_DEFINITIONS ${MOONLIGHT_DEFINITIONS})
target_include_directories(moonlight PRIVATE ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR} ${OPUS_INCLUDE_DIRS} ${EVDEV_INCLUDE_DIRS} ${UDEV_INCLUDE_DIRS})
target_link_libraries(moonlight ${EVDEV_LIBRARIES} ${OPUS_LIBRARY} ${UDEV_LIBRARIES} ${CMAKE_DL_LIBS})

add_subdirectory(docs)

install(TARGETS moonlight DESTINATION ${CMAKE_INSTALL_BINDIR})
install(FILES gamecontrollerdb.txt DESTINATION ${CMAKE_INSTALL_DATADIR}/moonlight)
install(FILES moonlight.conf DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})
",3.1,3.1
278,fredrik-johansson,arb,False,False,False,False,False,23,C,2020-05-16 19:12:48+00:00,2012-04-05 13:48:30+00:00,216,2292,"cmake_minimum_required(VERSION 3.1)

project(arb C)

file(READ ""${CMAKE_CURRENT_SOURCE_DIR}/configure"" CONFIGURE_CONTENTS)
string(REGEX MATCH ""ARB_MAJOR=([0-9]*)"" _ ${CONFIGURE_CONTENTS})
set(ARB_MAJOR ${CMAKE_MATCH_1})
string(REGEX MATCH ""ARB_MINOR=([0-9]*)"" _ ${CONFIGURE_CONTENTS})
set(ARB_MINOR ${CMAKE_MATCH_1})
string(REGEX MATCH ""ARB_PATCH=([0-9]*)"" _ ${CONFIGURE_CONTENTS})
set(ARB_PATCH ${CMAKE_MATCH_1})

set(ARB_VERSION ""${ARB_MAJOR}.${ARB_MINOR}.${ARB_PATCH}"")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Build type (Debug, Release)"" FORCE)
endif ()

set (BUILD_SHARED_LIBS yes CACHE BOOL ""Build shared library or not"")
set (BUILD_TESTS no CACHE BOOL ""Build tests or not"")

if (NOT (CMAKE_BUILD_TYPE STREQUAL ""Debug"" OR
        CMAKE_BUILD_TYPE STREQUAL ""Release""))
    message(""${CMAKE_BUILD_TYPE}"")
    message(FATAL_ERROR ""CMAKE_BUILD_TYPE must be one of: Debug, Release (current value: '${CMAKE_BUILD_TYPE}')"")
endif ()

if (""${CMAKE_SIZEOF_VOID_P}"" STREQUAL ""8"")
    set (PLATFORM ""x64"")
else ()
    set (PLATFORM ""Win32"")
endif()

if (BUILD_SHARED_LIBS)
    set (LIBRARY_TYPE dll)
else ()
    set (LIBRARY_TYPE lib)
endif()

set (MSVC_USE_MT yes CACHE BOOL ""Use MT flags when compiling in MSVC"")
set (MSVC_WARNING_LEVEL 1 CACHE STRING ""MSVC warning level"")

if (MSVC)
    if (MSVC_USE_MT)
        foreach(CompilerFlag CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE)
          string(REPLACE ""/MD"" ""/MT"" ${CompilerFlag} ""${${CompilerFlag}}"")
        endforeach()
    endif()
    foreach(CompilerFlag CMAKE_C_FLAGS)
      set(${CompilerFlag} ""${${CompilerFlag}} /W${MSVC_WARNING_LEVEL} /DHAVE_TLS=1 /DFLINT_REENTRANT=0"")
    endforeach()

    foreach(CompilerFlag CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE)
        if (BUILD_SHARED_LIBS)
            set(${CompilerFlag} ""${${CompilerFlag}} /DMSC_USE_DLL"")
        else ()
            set(${CompilerFlag} ""${${CompilerFlag}} /DPTW32_STATIC_LIB"")
        endif()
    endforeach()

    if (""${LIBRARY_TYPE}"" STREQUAL ""dll"")
        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS yes)
    endif()
endif()

set (DEPS mpir mpfr flint2)

set (mpir_lib gmp mpir)
set (mpfr_lib mpfr)
set (pthreads_lib pthreads pthread)
set (flint2_lib ${LIBRARY_TYPE}_flint flint)

set (mpir_header gmp.h)
set (mpfr_header mpfr.h)
set (pthreads_header pthread.h)
set (flint2_header flint/flint.h)

if(MSVC)
    set(DEPS ${DEPS} pthreads)
else()
    option(CMAKE_THREAD_PREFER_PTHREAD ""Prefer pthreads"" yes)
    option(THREADS_PREFER_PTHREAD_FLAG ""Prefer -pthread flag"" yes)
    find_package(Threads REQUIRED)
    set(PTHREADS_LIBRARIES Threads::Threads)
endif()

foreach (LIB ${DEPS})
    string (TOUPPER ${LIB} LIB_UPPER)
    find_library(${LIB_UPPER}_LIBRARY NAMES ${${LIB}_lib} HINTS ../${LIB}
                 PATH_SUFFIXES ${LIBRARY_TYPE}/${PLATFORM}/${CMAKE_BUILD_TYPE})
    if (NOT ${LIB_UPPER}_LIBRARY)
        message(FATAL_ERROR ""${LIB} library not found."")
    endif()
    add_library(${LIB} UNKNOWN IMPORTED)
    set_property(TARGET ${LIB} PROPERTY IMPORTED_LOCATION ${${LIB_UPPER}_LIBRARY})
    message(""${LIB} found in ${${LIB_UPPER}_LIBRARY}"")
endforeach ()

foreach (LIB ${DEPS})
    string(TOUPPER ${LIB} HEADER_PKG)
    set (HEADER ${${LIB}_header})
    find_path(${HEADER_PKG}_INCLUDE_DIR NAMES ${HEADER} HINTS ../${LIB}
             PATH_SUFFIXES ${LIBRARY_TYPE}/${PLATFORM}/${CMAKE_BUILD_TYPE})
    if (NOT ${HEADER_PKG}_INCLUDE_DIR)
        message(FATAL_ERROR ""${HEADER} header not found."")
    endif()
    message(""${HEADER} found in ${${HEADER_PKG}_INCLUDE_DIR}"")
    set (DEP_INCLUDE_DIRS ${DEP_INCLUDE_DIRS} ${${HEADER_PKG}_INCLUDE_DIR})
endforeach ()

file(GLOB TEMP ""*.h"")

foreach (TEMP_H ${TEMP})
    get_filename_component(FOLDER ${TEMP_H} NAME_WE)
    set(FOLDERS ${FOLDERS} ${FOLDER})
endforeach()

foreach (FOLDER ${FOLDERS})
    file(GLOB TEMP ""${FOLDER}/*.c"")
    set(SRC ${SRC} ${TEMP})
endforeach ()

include_directories(BEFORE ${arb_SOURCE_DIR})
include_directories(BEFORE ${DEP_INCLUDE_DIRS})

add_library(arb ${SRC})
target_link_libraries(arb ${DEPS} ${PTHREADS_LIBRARIES})
target_compile_definitions(arb PRIVATE ""ARB_BUILD_DLL"")

set_target_properties(arb PROPERTIES VERSION ${ARB_VERSION} SOVERSION ${ARB_MAJOR})
if(WIN32)
    set_target_properties(arb PROPERTIES RUNTIME_OUTPUT_NAME ""arb-${LIBMAJOR}"")
endif()

if(NOT MSVC)
    target_link_libraries(arb m)
endif()

install(TARGETS arb
            RUNTIME DESTINATION bin
            ARCHIVE DESTINATION lib
            LIBRARY DESTINATION lib
        )

foreach (FOLDER ${FOLDERS})
    set(HEADERS ${HEADERS} ${FOLDER}.h)
endforeach ()

install(FILES ${HEADERS} DESTINATION include)

if (BUILD_TESTS)
    enable_testing()
    foreach (FOLDER ${FOLDERS})
        file(GLOB TEMP ""${FOLDER}/test/*.c"")
        foreach (TEST_SOURCE ${TEMP})
            get_filename_component(TEST_NAME ${TEST_SOURCE} NAME_WE)
            add_executable(${FOLDER}-${TEST_NAME} ${TEST_SOURCE})
            target_link_libraries(${FOLDER}-${TEST_NAME} arb ${PTHREADS_LIBRARIES})
            add_test(${FOLDER}-${TEST_NAME} ${FOLDER}-${TEST_NAME})
        endforeach ()
    endforeach ()
endif ()

",3.1,3.1
322,etlegacy,etlegacy,False,False,False,False,False,21,C,2020-05-16 22:32:39+00:00,2020-03-05 13:34:01+00:00,74,9270,"#------------------------------------------------------------------------
# ET: Legacy, http://www.etlegacy.com
# - Wolfenstein: Enemy Territory 2.60b compatible client/server
# - based on raedwulf-et: https://bitbucket.org/tcmreastwood/raedwulf-et
#
# Please use TABs to indent! (x4)
#------------------------------------------------------------------------
cmake_minimum_required(VERSION 3.10.3)

project(ETLEGACY C CXX)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake"")
include(GetGitRevisionDescription)
include(CMakeDependentOption)

# We need to add the macros & Functions before any other includes
include(cmake/ETLFunctions.cmake)

#-----------------------------------------------------------------
# General
#-----------------------------------------------------------------

set(MODNAME ""legacy"" CACHE STRING ""Default mod name"")
set(MODURL ""www.etlegacy.com"" CACHE STRING ""Default mod URL"")

#-----------------------------------------------------------------
# Options
#-----------------------------------------------------------------

option(BUILD_SERVER		""Build the dedicated server executable""							ON)
option(BUILD_CLIENT		""Build the client executable""									ON)
option(BUILD_MOD		""Build the mod libraries""										ON)

option(BUILD_MOD_PK3	""Pack the mod libraries and game scripts into mod pk3""			ON)

option(BUNDLED_LIBS		""Use all available bundled libraries instead of system libs""	ON)

LEG_BUNDLE(SDL SDL)
LEG_BUNDLE(ZLIB Zlib)
LEG_BUNDLE(MINIZIP Minizip)
LEG_BUNDLE(JPEG JPEG)
LEG_BUNDLE(PNG libpng)
LEG_BUNDLE(CURL Curl ""NOT APPLE"")
LEG_BUNDLE(OPENSSL OpenSSL ""OFF"")
LEG_BUNDLE(LUA Lua)
LEG_BUNDLE(OGG_VORBIS OGG)
LEG_BUNDLE(THEORA Theora)
LEG_BUNDLE(OPENAL OpenAL ""NOT APPLE"")
LEG_BUNDLE(OPENAL_INCLUDE OpenAL-OSX ""APPLE"")
LEG_BUNDLE(GLEW Glew)
LEG_BUNDLE(FREETYPE Freetype2)
LEG_BUNDLE(SQLITE3 SQlite3)

# no support for 32 bit binaries on OpenBSD/amd64
cmake_dependent_option(CROSS_COMPILE32 ""Compile 32-bit version of ET:L (64bit is incompatible with 2.60b)"" ON ""NOT CMAKE_SYSTEM MATCHES OpenBSD*"" OFF)

# Optional features
option(FEATURE_CURL				""Enable auto-download support using cURL (client)""		ON)
option(FEATURE_OPENSSL			""Build openssl for curl and authentication""				OFF)
option(FEATURE_OGG_VORBIS		""Enable OGG Vorbis support (client)""					ON)
option(FEATURE_THEORA			""Enable Theora video support (client)""					ON)
option(FEATURE_OPENAL			""Enable OpenAL sound backend (client)""					ON)
option(FEATURE_FREETYPE			""Enable Freetype font library support (client)""			ON)
option(FEATURE_PNG				""Enable PNG screenshot support (client)""				ON)
option(FEATURE_LUA				""Enable Lua support (mod)""								ON)
option(FEATURE_MULTIVIEW		""Enable multiview support (mod)""						ON)
option(FEATURE_EDV				""Enable extended demo viewer support (mod)""				ON)
option(FEATURE_ANTICHEAT		""Enable server side anti-wallhack code (server)""		ON)
option(FEATURE_AUTOUPDATE		""Enable updater which downloads latest ET:L files""		ON)
option(FEATURE_RENDERER2		""Build and use the new renderer""						ON)
option(FEATURE_RENDERER_GLES	""Build and use OpenGL ES renderer""						OFF)
option(FEATURE_IPV6				""Enable IPv6 networking code""							ON)
option(FEATURE_IRC_CLIENT		""Enable IRC client client side""							ON)
option(FEATURE_IRC_SERVER		""Enable IRC client server side""							ON)
option(RENDERER_DYNAMIC			""Build renderer into a dynamic library""					ON)
option(FEATURE_WINDOWS_CONSOLE	""Build win32 executables with Windows console""			ON)
option(FEATURE_GETTEXT			""Enable localization using tinygettext""					ON)
option(FEATURE_SERVERMDX		""Enable MDX support on server side (mod)""				ON)
option(FEATURE_DBMS				""Enable dbms support (sqlite3)""							ON)
option(FEATURE_PAKISOLATION		""Enable custom pak isolation""							ON)
option(FORCE_DEBUG				""Force enable legacy debug macros""						OFF)

cmake_dependent_option(FEATURE_LUASQL	""Enable LuaSQL sqlite3 backend (mod)""			ON ""FEATURE_LUA"" OFF)
cmake_dependent_option(FEATURE_RATING	""Enable skill rating support (mod)""				ON ""FEATURE_DBMS"" OFF)
cmake_dependent_option(FEATURE_PRESTIGE	""Enable prestige support (mod)""					ON ""FEATURE_DBMS"" OFF)
cmake_dependent_option(FEATURE_OMNIBOT	""Enable Omni-bot support (mod)""					ON ""WIN32 OR APPLE OR CMAKE_SYSTEM_NAME MATCHES Linux"" OFF)

option(INSTALL_EXTRA			""Install extra add-ons (omni-bot, geoip, wolfadmin).""	ON)

cmake_dependent_option(INSTALL_OMNIBOT		""Install Omni-bot""							ON ""INSTALL_EXTRA"" OFF)
cmake_dependent_option(INSTALL_GEOIP		""Install GeoLite geolocation database""		ON ""INSTALL_EXTRA"" OFF)
cmake_dependent_option(INSTALL_WOLFADMIN	""Install WolfAdmin enhancement suite""		ON ""INSTALL_EXTRA"" OFF)

option(ARM						""Build ARM version""										OFF)

set(ET_FS_BASEPATH """" CACHE STRING ""Copy required genuine ET files from ET_FS_BASEPATH"")
cmake_dependent_option(ET_KEY	""Copy existing etkey file from ET_FS_BASEPATH)""			ON ""ET_FS_BASEPATH"" OFF)

#-----------------------------------------------------------------
# Setup
#-----------------------------------------------------------------

# Group the VisualStudio projects
set(CMAKE_TARGETS_FOLDER CMake)
set(BUNDLED_TARGETS_FOLDER Bundled)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER ${CMAKE_TARGETS_FOLDER})

# Find and setup programs the build needs
include(cmake/ETLPrograms.cmake)

# Setup some basic helper variables
include(cmake/ETLCommon.cmake)

# Platform specific compiler settings
include(cmake/ETLPlatform.cmake)

# Source globs
include(cmake/ETLSources.cmake)

# Git version header generation
include(cmake/ETLVersion.cmake)

# Use bundled libraries
if(BUNDLED_LIBS)
	include(cmake/ETLBundledLibs.cmake)
endif(BUNDLED_LIBS)

# Set up includes and libraries based on feature options
include(cmake/ETLSetupFeatures.cmake)

# Group the sources (only msvc and xcode now)
include(cmake/ETLSourceGroup.cmake)

#-----------------------------------------------------------------
# Build
#-----------------------------------------------------------------

if(BUILD_CLIENT)
	include(cmake/ETLBuildRenderer.cmake)
	include(cmake/ETLBuildClient.cmake)

	#Since CMake 3.6 you are able to set the Visual Studio startup project
	if(NOT ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 3.6)
		set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT etl)
	endif()
endif(BUILD_CLIENT)

if(BUILD_SERVER)
	include(cmake/ETLBuildServer.cmake)
endif(BUILD_SERVER)

if(BUILD_MOD)
	include(cmake/ETLBuildMod.cmake)
endif(BUILD_MOD)

#-----------------------------------------------------------------
# Post build
#-----------------------------------------------------------------

# Install third-party add-ons
if(BUILD_MOD AND INSTALL_EXTRA)
	if(INSTALL_OMNIBOT)
		include(cmake/ETLInstallOmniBot.cmake)
	endif(INSTALL_OMNIBOT)
	if(INSTALL_GEOIP)
		include(cmake/ETLInstallGeoIP.cmake)
	endif(INSTALL_GEOIP)
	if(INSTALL_WOLFADMIN)
		include(cmake/ETLInstallWolfAdmin.cmake)
	endif(INSTALL_WOLFADMIN)
endif(BUILD_MOD AND INSTALL_EXTRA)

# Generate install and uninstall packs
include(cmake/ETLInstall.cmake)

# Packaging support
include(cmake/ETLCPack.cmake)

set_target_properties(uninstall PROPERTIES FOLDER ${CMAKE_TARGETS_FOLDER})
",3.10.3,3.1
486,ppwwyyxx,panorama,False,False,False,False,False,4,C++,2019-03-27 19:34:33+00:00,2013-04-24 03:56:02+00:00,1144,439,"cmake_minimum_required (VERSION 3.1)
project (OpenPano LANGUAGES CXX)

# set a default build type if none was provided
# this has to be done before the project() instruction!
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build (Debug or Release)"" FORCE)
endif()

if (MSVC)
	if(MSVC_VERSION LESS 1800) # 1700 = VS 2013
		message(FATAL_ERROR ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
	endif()
	set(OBJ_EXT obj)
else()
	include(CheckCXXCompilerFlag)
	CHECK_CXX_COMPILER_FLAG(""-std=c++11"" COMPILER_SUPPORTS_CXX11)
	CHECK_CXX_COMPILER_FLAG(""-std=c++0x"" COMPILER_SUPPORTS_CXX0X)
	if(COMPILER_SUPPORTS_CXX11)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
	elseif(COMPILER_SUPPORTS_CXX0X)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
	else()
		message(FATAL_ERROR ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
	endif()
	set(OBJ_EXT o)
endif()
if (WIN32)
	add_definitions( -DUNICODE -D_UNICODE)
endif()


# compiler options:
if(MSVC)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN -DMSVC)
	# /Zo makes debug symbol in pdb in release mode in VS2015
	add_definitions(/fp:fast /GR- /Os /Zo /arch:AVX /openmp)
else()
	add_definitions(-O3 -march=native -Wall -Wextra)
endif()
add_definitions(-DDEBUG)


add_subdirectory(src)
",3.1,3.1
494,rncbc,qmidictl,False,False,False,False,False,3,C++,2020-03-27 16:59:13+00:00,2015-09-22 14:38:57+00:00,7,272,"project(QMIDICTL)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""QmidiCtl"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qmidictl"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable Network IPv6 support option.
option (CONFIG_IPV6 ""Enable Network IPv6 support (EXPERIMENTAL) (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Network)

if (CONFIG_IPV6)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


add_subdirectory (src)

configure_file (qmidictl.spec.in qmidictl.spec IMMEDIATE @ONLY)

install (FILES qmidictl.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qmidictl.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qmidictl.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  Network IPv6 support (EXPERIMENTAL)  . . . . . . ."" CONFIG_IPV6)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
525,ICRAR,libprofit,False,False,False,False,False,13,C++,2019-09-05 08:23:22+00:00,2016-08-31 05:40:29+00:00,10,877,"# CMakeLists.txt
#
# ICRAR - International Centre for Radio Astronomy Research
# (c) UWA - The University of Western Australia, 2016
# Copyright by UWA (in the framework of the ICRAR)
# All rights reserved
#
# Contributed by Rodrigo Tobar
#
# This file is part of libprofit.
#
# libprofit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# libprofit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with libprofit.  If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.1)

# Extract version information from VERSION file
file(STRINGS ${CMAKE_SOURCE_DIR}/VERSION PROFIT_VERSION)
message(""-- Building libproft version ${PROFIT_VERSION}"")
string(REPLACE ""."" "";"" VERSION_LIST ${PROFIT_VERSION})
string(REPLACE ""-"" "";"" VERSION_LIST ""${VERSION_LIST}"")

list(LENGTH VERSION_LIST PROFIT_VERSION_N_ITEMS)
list(GET VERSION_LIST 0 PROFIT_VERSION_MAJOR)
list(GET VERSION_LIST 1 PROFIT_VERSION_MINOR)
list(GET VERSION_LIST 2 PROFIT_VERSION_PATCH)
if (${PROFIT_VERSION_N_ITEMS} GREATER 3)
	list(GET VERSION_LIST 3 PROFIT_VERSION_SUFFIX)
else ()
	set(PROFIT_VERSION_SUFFIX """")
endif()

# We have only C++ sources, but until cmake 3.4 the check_symbol_exists
# macro didn't work properly if only defining C++ as the project language
if( ${CMAKE_MAJOR_VERSION} EQUAL 3 AND ${CMAKE_MINOR_VERSION} LESS 4 )
	set(PROFIT_LANGS C CXX)
else()
	set(PROFIT_LANGS CXX)
endif()

# Our project...
project(libprofit VERSION ""${PROFIT_VERSION_MAJOR}.${PROFIT_VERSION_MINOR}.${PROFIT_VERSION_PATCH}"" LANGUAGES ${PROFIT_LANGS})
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)

# Compile in release mode by default
if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE ""Release"")
endif()

# Options users can give on the command line
option(LIBPROFIT_USE_R     ""Try to compile libprofit first against R/Rmath, and then with GSL"" OFF)
option(LIBPROFIT_TEST      ""Include test compilation in the build"" OFF)
option(LIBPROFIT_DEBUG     ""Include some debugging code in libprofit"" OFF)
option(LIBPROFIT_NO_OPENCL ""Don't attempt to include OpenCL support in libprofit"" OFF)
option(LIBPROFIT_NO_OPENMP ""Don't attempt to include OpenMP support in libprofit"" OFF)
option(LIBPROFIT_NO_FFTW   ""Don't attempt to include FFTW support in libprofit"" OFF)
option(LIBPROFIT_NO_SIMD   ""Don't attempt to use SIMD (SSE2/AVX) extensions in libprofit"" OFF)

#
# Macros to check for the presence of:
#  * GSL
#  * R/Rmath
#  * OpenCL
#  * OpenMP
#  * FFTW
#
# From those, only GSL or R/Rmath are required (one of the two), the rest is
# optional.
#
macro(find_gsl)

	# Try with FindGSL.cmake first, if found
	# Otherwise try with pkg-config
	find_package(GSL)
	if( NOT GSL_FOUND )
		find_package(PkgConfig)
		if( PKG_CONFIG_FOUND )
			pkg_check_modules(GSL gsl)
		endif()
	endif()

	if( GSL_FOUND )
		set(PROFIT_USES_GSL ON)
		include_directories(${GSL_INCLUDE_DIRS})
		set(profit_LIBS ${GSL_LIBRARIES})
	endif()
endmacro()

macro(find_r_and_rmath)
	find_package(PkgConfig)
	if( PKG_CONFIG_FOUND )
		pkg_check_modules(R libR)
		pkg_check_modules(RMATH libRmath)
		if( R_FOUND AND RMATH_FOUND )
			set(PROFIT_USES_R ON)
			add_definitions(-DMATHLIB_STANDALONE)
			include_directories(${R_INCLUDE_DIRS} ${RMATH_INCLUDE_DIRS})
			set(profit_LIBS ${R_LIBRARIES} ${RMATH_LIBRARIES})
			link_directories(${R_LIBRARY_DIRS} ${RMATH_LIBRARY_DIRS})
		endif( R_FOUND AND RMATH_FOUND )
	endif( PKG_CONFIG_FOUND )
endmacro()

macro(find_opencl)
	find_package(OpenCL)
	if( OpenCL_FOUND )
		if (""${OpenCL_VERSION_STRING}"" STREQUAL """")
			message(""-- OpenCL found but no version reported. Compiling without OpenCL support"")
		else ()
			include_directories(${OpenCL_INCLUDE_DIRS})
			set(PROFIT_OPENCL ON)
			set(PROFIT_OPENCL_MAJOR ${OpenCL_VERSION_MAJOR})
			set(PROFIT_OPENCL_MINOR ${OpenCL_VERSION_MINOR})

			# We usually set our target version to be OpenCL 1.1,
			# but in some platforms we know we can aim higher
			# (and save use lots of warnings)
			set(PROFIT_OPENCL_TARGET_VERSION 110)
			if (APPLE)
				string(REGEX REPLACE ""^([0-9]+)\\.([0-9]+).*$"" ""\\1""  DARWIN_VERSION_MAJOR ""${CMAKE_SYSTEM_VERSION}"")
				if (""${DARWIN_VERSION_MAJOR}"" GREATER 11)
					set(PROFIT_OPENCL_TARGET_VERSION 120)
				endif()
			endif()

			# Some platforms (Ubuntu 18.04, for instance) are already
			# shipping with OpenCL versions above 2.0, which is the
			# maximum version our bundled cl2.hpp header supports
			# (and there doesn't seem to be many updates upstream).
			# In such cases, the header will complain about the
			# version not having a supported value, and will default
			# to using 2.0. This is fine (we use up to 1.2 features),
			# but it's nicer to *not* get a warning because of that.
			if (${PROFIT_OPENCL_MAJOR} EQUAL 2 AND NOT ${PROFIT_OPENCL_MINOR} EQUAL 0)
				set(PROFIT_OPENCL_MINOR 0)
			endif()
			set(profit_LIBS ${profit_LIBS} ${OpenCL_LIBRARIES})
		endif()
	endif()
endmacro()

macro(find_openmp)
	find_package(OpenMP)
	if( OPENMP_FOUND )

		# We require at least OpenMP 3.0, so let's check for that
		set(OPENMP_VERSION_CHECK_SOURCE ""
#include <stdio.h>

int main(int argc, char *argv[]) {
#if _OPENMP >= 200203
	return 0;
#else
	fail to compile please
#endif
}"")
		set(WORK_DIR ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/OpenMPVersionCheck)
		set(SRC_FILE ${WORK_DIR}/ompver.cpp)
		file(WRITE ${SRC_FILE} ""${OPENMP_VERSION_CHECK_SOURCE}"")
		try_compile(COMPILE_RESULT ${CMAKE_BINARY_DIR} ${SRC_FILE}
		            COMPILE_DEFINITIONS ${OpenMP_CXX_FLAGS})

		if (COMPILE_RESULT)
			set(PROFIT_OPENMP ON)
		else()
			message(""-- OpenMP found, but is not >= 2.0. Compiling without OpenMP support"")
		endif()
	endif()

	if (PROFIT_OPENMP)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
	endif()
endmacro()

macro(find_fftw)
	find_package(FFTW)
	if( FFTW_FOUND )
		set(PROFIT_FFTW ON)
		if( FFTW_OPENMP_FOUND )
			set(PROFIT_FFTW_OPENMP ON)
		endif()
		include_directories(${FFTW_INCLUDE_DIR})
		set(profit_LIBS ${profit_LIBS} ${FFTW_LIBRARIES})
	endif()
endmacro(find_fftw)

macro(find_simd_extensions)
	set(_SSE2 ""SSE2;emmintrin.h;__m128d;_mm_setzero_pd;_mm_add_pd"")
	set(_AVX ""AVX;immintrin.h;__m256d;_mm256_setzero_pd;_mm256_add_pd"")
	set(WORK_DIR ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/IntrinsicsCheck)
	foreach(_instruction_details ""${_SSE2}"" ""${_AVX}"")
		list(GET _instruction_details 0 _name)
		list(GET _instruction_details 1 _include)
		list(GET _instruction_details 2 _type)
		list(GET _instruction_details 3 _zero)
		list(GET _instruction_details 4 _add)

		set(_src ""
#include <${_include}>
int main(int argc, char *argv[]) {
	volatile ${_type} x = ${_zero}();
	volatile ${_type} y = ${_add}(x, x);
}"")
		set(SRC_FILE ${WORK_DIR}/${_name}.cpp)
		file(WRITE ${SRC_FILE} ""${_src}"")
		try_compile(PROFIT_HAS_${_name} ${CMAKE_BINARY_DIR} ${SRC_FILE})

		if (PROFIT_HAS_${_name})
			message(STATUS ""Found ${_name} support"")
		else()
			message(STATUS ""No ${_name} support found"")
		endif()
	endforeach()
endmacro()

#
# Depending on the user's preference we check GSL or R/Rmath first
# We default to use GSL
#
if( LIBPROFIT_USE_R )
	find_r_and_rmath()
	if( NOT R_FOUND OR NOT RMATH_FOUND)
		find_gsl()
	endif()
else()
	find_gsl()
	if( NOT GSL_FOUND )
		find_r_and_rmath()
	endif()
endif()

#
# None found, what an ill luck
if( NOT GSL_FOUND )
	if( NOT R_FOUND OR NOT RMATH_FOUND )
		message(FATAL_ERROR ""Neither GSL nor R/Rmath were found, cannot continue"")
	endif()
endif()

#
# Check if there's OpenCL (users might opt out)
#
if( NOT LIBPROFIT_NO_OPENCL )
	find_opencl()
endif()

#
# Check if there's OpenMP support (users might opt out)
#
if( NOT LIBPROFIT_NO_OPENMP )
	find_openmp()
endif()

#
# Check if there's FFTW support (users might opt out)
#
if( NOT LIBPROFIT_NO_FFTW )
	find_fftw()
endif()

#
# Include debugging stuff? (off by default)
#
if( LIBPROFIT_DEBUG )
	set(PROFIT_DEBUG ON)
endif()

#
# Check whether we can use CPU extensions
#
if (NOT LIBPROFIT_NO_SIMD)
	find_simd_extensions()
endif()

#
# Create the final configuration file that records
# the compile-time options used for this libprofit build
#
configure_file(include/profit/config.h.in profit/config.h @ONLY)

#
# Common definitions for the shared lib and the binary
#
include_directories(${CMAKE_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR})

#
# MSVC builds need the 3rdparty/getopt submodule to be checked out,
# and added to the list of include directories (so getopt.h is found)
#
if (MSVC)
	set(PROFIT_GETOPT_DIR ""${CMAKE_SOURCE_DIR}/3rdparty/getopt"")
	if (NOT EXISTS ""${PROFIT_GETOPT_DIR}"")
		message(FATAL_ERROR
		        ""git submodule '3rdparty/getopt' is not checked out but is needed for Windows builds"")
	endif()
	include_directories(""${PROFIT_GETOPT_DIR}"")
endif()

# Compiler-specific tweaks
if (MSVC)
	# Do not warn about unsecure standard library calls
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

#
# Generate header files with the OpenCL kernel sources out of each individual
# .cl file
#
if (PROFIT_OPENCL)
set(OPENCL_KERNEL_HEADERS """")
	foreach(_cl_kernel brokenexponential common convolve coresersic ferrer king moffat sersic)
		foreach(_type float double)
			set(KRN_NAME ""${_cl_kernel}-${_type}"")
			set(KRN_VNAME ""${_cl_kernel}_${_type}"")
			set(KRN_FNAME ""src/cl/${KRN_NAME}.cl"")
			set(KRN_FULL_FNAME ""${CMAKE_CURRENT_SOURCE_DIR}/src/cl/${KRN_NAME}.cl"")
			set(KRN_HEADER_FNAME ""${CMAKE_CURRENT_BINARY_DIR}/profit/cl/${KRN_NAME}.h"")
			add_custom_command(OUTPUT ${KRN_HEADER_FNAME}
				COMMAND ${CMAKE_COMMAND}
				ARGS -DKRN_NAME=${KRN_NAME} -DKRN_VNAME=${KRN_VNAME} -DKRN_FNAME=${KRN_FNAME}
			         -DKRN_FULL_FNAME=${KRN_FULL_FNAME} -DKRN_HEADER_FNAME=${KRN_HEADER_FNAME}
			         -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/GenerateOpenCLHeader.cmake
			    DEPENDS ${KRN_FULL_FNAME}
			)
			list(APPEND OPENCL_KERNEL_HEADERS ${KRN_HEADER_FNAME})
		endforeach()
	endforeach()
endif()

#
# The shared library sources
#
set(PROFIT_SRC
   src/brokenexponential.cpp
   src/convolve.cpp
   src/coresersic.cpp
   src/crc.cpp
   src/exceptions.cpp
   src/ferrer.cpp
   src/fft.cpp
   src/image.cpp
   src/library.cpp
   src/king.cpp
   src/model.cpp
   src/moffat.cpp
   src/opencl.cpp
   src/profile.cpp
   src/psf.cpp
   src/radial.cpp
   src/sersic.cpp
   src/sky.cpp
   src/utils.cpp
)
set(LIB_TYPE SHARED)
if (MSVC)
	set(LIB_TYPE STATIC)
endif()
add_library(profit ${LIB_TYPE} ${PROFIT_SRC} ${OPENCL_KERNEL_HEADERS})
target_link_libraries(profit ${profit_LIBS})
set(PROFIT_TARGETS profit)

#
# The executable
#
add_executable(profit-cli src/fits_utils.cpp src/profit-cli.cpp)
target_link_libraries(profit-cli profit)
set(PROFIT_TARGETS ${PROFIT_TARGETS} profit-cli)

#
# Installing lib + binary + headers
#
install(TARGETS ${PROFIT_TARGETS}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
install(FILES
       ${CMAKE_CURRENT_BINARY_DIR}/profit/config.h
        include/profit/common.h
        include/profit/convolve.h
        include/profit/exceptions.h
        include/profit/fft.h
        include/profit/image.h
        include/profit/library.h
        include/profit/model.h
        include/profit/opencl.h
        include/profit/profile.h
        include/profit/profit.h
        include/profit/utils.h
        DESTINATION include/profit)

#
# Unit tests
#
if( LIBPROFIT_TEST )
	find_package(CxxTest)

	# In cmake < 3.7 the cxxtestgen executable is always executed through an
	# interpreter, and doesn't honour the shebang line that could be present.
	# We try to rectify this situation here with a solution similar to what
	# is found in cmake >= 3.7
	if (${CMAKE_MAJOR_VERSION} EQUAL 3 AND ${CMAKE_MINOR_VERSION} LESS 7 AND
	    NOT ""${CXXTEST_PYTHON_TESTGEN_EXECUTABLE}"" STREQUAL """")
		execute_process(COMMAND ${CXXTEST_PYTHON_TESTGEN_EXECUTABLE} --version
		                OUTPUT_VARIABLE _CXXTEST_OUT ERROR_VARIABLE _CXXTEST_OUT
		                RESULT_VARIABLE _CXXTEST_RESULT)
		if (_CXXTEST_RESULT EQUAL 0)
			set(CXXTEST_TESTGEN_INTERPRETER """")
		endif()
	endif()


	if( CXXTEST_FOUND )
		include(CTest)
		enable_testing()
		add_subdirectory(tests)

		add_test(""cli-version"" profit-cli -V)
		add_test(""cli-help"" profit-cli -h)
		add_test(""cli-null-profile"" profit-cli -p null)
		add_test(""cli-many-profiles"" profit-cli -p 100,null -p 5,sky)
		add_test(""cli-unknown-parameter"" profit-cli -p null:unknown=1)
		add_test(""cli-text-output"" profit-cli -p null -t)
		add_test(""cli-fits-output"" profit-cli -p null -f image)
		add_test(""cli-convolution-with-cmdline"" profit-cli -p null:convolve=1 -P 2:2:1,1,2,2)
		add_test(""cli-complex-usage"" profit-cli -p null -w 100 -H 50 -S 2 -F -m 1 -i 2 -u -T brute -e 1 -r)
		# Needs 'cli-fits-output' to be run first
		add_test(""cli-convolution-with-file"" profit-cli -p null:convolve=1 -P image.fits)
		if (PROFIT_OPENCL)
			add_test(""cli-opencl-list"" profit-cli -c)
		endif()
	endif()
endif()
",3.1,3.1
545,Matroska-Org,libebml,False,False,False,False,False,11,C++,2020-05-17 03:09:40+00:00,2013-01-02 12:55:31+00:00,70,292,"cmake_minimum_required(VERSION 3.1.2)

project(ebml VERSION 1.3.10)

option(DISABLE_PKGCONFIG ""Disable PkgConfig module generation"" OFF)
option(DISABLE_CMAKE_CONFIG ""Disable CMake package config module generation"" OFF)
option(ENABLE_WIN32_IO ""Build the Windows I/O helper class"" OFF)

include(GNUInstallDirs)

set(libebml_SOURCES
  src/Debug.cpp
  src/EbmlBinary.cpp
  src/EbmlContexts.cpp
  src/EbmlCrc32.cpp
  src/EbmlDate.cpp
  src/EbmlDummy.cpp
  src/EbmlElement.cpp
  src/EbmlFloat.cpp
  src/EbmlHead.cpp
  src/EbmlMaster.cpp
  src/EbmlSInteger.cpp
  src/EbmlStream.cpp
  src/EbmlString.cpp
  src/EbmlSubHead.cpp
  src/EbmlUInteger.cpp
  src/EbmlUnicodeString.cpp
  src/EbmlVersion.cpp
  src/EbmlVoid.cpp
  src/IOCallback.cpp
  src/MemIOCallback.cpp
  src/MemReadIOCallback.cpp
  src/SafeReadIOCallback.cpp
  src/StdIOCallback.cpp)

if(WIN32 AND ENABLE_WIN32_IO)
   list(APPEND libebml_SOURCES
     src/platform/win32/WinIOCallback.cpp)
endif()

set(libebml_PUBLIC_HEADERS
  ebml/Debug.h
  ebml/EbmlBinary.h
  ebml/EbmlConfig.h
  ebml/EbmlContexts.h
  ebml/EbmlCrc32.h
  ebml/EbmlDate.h
  ebml/EbmlDummy.h
  ebml/EbmlElement.h
  ebml/EbmlEndian.h
  ebml/EbmlFloat.h
  ebml/EbmlHead.h
  ebml/EbmlId.h
  ebml/EbmlMaster.h
  ebml/EbmlSInteger.h
  ebml/EbmlStream.h
  ebml/EbmlString.h
  ebml/EbmlSubHead.h
  ebml/EbmlTypes.h
  ebml/EbmlUInteger.h
  ebml/EbmlUnicodeString.h
  ebml/EbmlVersion.h
  ebml/EbmlVoid.h
  ebml/IOCallback.h
  ebml/MemIOCallback.h
  ebml/MemReadIOCallback.h
  ebml/SafeReadIOCallback.h
  ebml/StdIOCallback.h)

set(libebml_C_PUBLIC_HEADERS ebml/c/libebml_t.h)

add_library(ebml ${libebml_SOURCES} ${libebml_PUBLIC_HEADERS} ${libebml_C_PUBLIC_HEADERS})
if(WIN32)
  include(CheckIncludeFile)
  check_include_file(winapifamily.h HAVE_WINAPIFAMILY_H)
  if(HAVE_WINAPIFAMILY_H)
    target_compile_definitions(ebml PUBLIC HAVE_WINAPIFAMILY_H)
  endif()
endif()
set_target_properties(ebml PROPERTIES
  VERSION 4.0.0
  SOVERSION 4)
target_include_directories(ebml
  PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
if(MSVC)
  target_compile_definitions(ebml PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

include(GenerateExportHeader)
generate_export_header(ebml EXPORT_MACRO_NAME EBML_DLL_API)
target_sources(ebml
  PRIVATE
    ${CMAKE_CURRENT_BINARY_DIR}/ebml_export.h
)

if(NOT BUILD_SHARED_LIBS)
  target_compile_definitions(ebml PUBLIC EBML_STATIC_DEFINE)
endif()

install(TARGETS ebml
  EXPORT EBMLTargets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

install(FILES ${libebml_PUBLIC_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ebml)
install(FILES ${libebml_C_PUBLIC_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ebml/c)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ebml_export.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ebml)

if(NOT DISABLE_PKGCONFIG)
  set(prefix ${CMAKE_INSTALL_PREFIX})
  set(exec_prefix ""\$\{prefix\}"")
  set(libdir ""\$\{prefix\}/${CMAKE_INSTALL_LIBDIR}"")
  set(includedir ""\$\{prefix\}/${CMAKE_INSTALL_INCLUDEDIR}"")
  set(PACKAGE_VERSION ${PROJECT_VERSION})
  configure_file(libebml.pc.in libebml.pc @ONLY)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libebml.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()

if(NOT DISABLE_CMAKE_CONFIG)
  set(CMAKE_INSTALL_PACKAGEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/EBML)
  include(CMakePackageConfigHelpers)
  configure_package_config_file(EBMLConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/EBMLConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
  write_basic_package_version_file(EBMLConfigVersion.cmake COMPATIBILITY SameMajorVersion)
  install(EXPORT EBMLTargets NAMESPACE EBML:: DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/EBMLConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/EBMLConfigVersion.cmake
      DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
endif()
",3.1.2,3.1
603,ThomasMonkman,Seer,False,False,False,False,False,1,C++,2019-11-06 21:57:02+00:00,2016-12-07 22:26:01+00:00,4,221,"cmake_minimum_required(VERSION 3.1)

# Project name
project( Seer VERSION 0.0.1 LANGUAGES C CXX)

option(BuildTests ""Build the unit tests"" ON)
enable_testing()

# Enable c++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED on)

# Add debug flags
if(MSVC)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /Zi /MP"")
else()
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g"")
endif()

# dial up the warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
    string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
  #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /permissive"")
  else()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic"")
endif()

# create and configure the unit test target
if(BuildTests)
    add_subdirectory(tests)
endif()

# benchmarks
add_subdirectory(benchmarks)",3.1,3.1
618,equeim,unplayer,False,False,False,False,False,20,C++,2020-05-15 20:15:34+00:00,2015-11-20 21:47:54+00:00,21,738,"cmake_minimum_required(VERSION 3.1.0)
cmake_policy(SET CMP0071 NEW)

project(harbour-unplayer VERSION 2.0.4 LANGUAGES CXX)

include(GNUInstallDirs)

option(HARBOUR ""Build for Harbour"" ON)
option(QTMPRIS_STATIC ""Link with qtmpris statically"" OFF)
option(TAGLIB_STATIC ""Link with taglib statically"" OFF)

add_subdirectory(""src"")
add_subdirectory(""translations"")

install(DIRECTORY ""icons/hicolor"" DESTINATION ""${CMAKE_INSTALL_DATADIR}/icons"")

set(qml_dir ""${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/qml"")
install(FILES ""qml/main.qml"" DESTINATION ""${qml_dir}"")
install(DIRECTORY ""qml/components"" DESTINATION ""${qml_dir}"")
if (HARBOUR)
    set(media_keys ""qml/MediaKeysEmpty.qml"")
else()
    set(media_keys ""qml/MediaKeysPrivate.qml"")
endif()
install(FILES ""${media_keys}""
        DESTINATION ""${qml_dir}/components""
        RENAME ""MediaKeys.qml"")

install(FILES ""${PROJECT_NAME}.desktop"" DESTINATION ""${CMAKE_INSTALL_DATADIR}/applications"")
",3.1.0,3.1
959,Deltafire,MilkyTracker,False,False,False,False,False,34,C++,2020-05-08 19:09:22+00:00,2013-10-20 10:16:11+00:00,834,654,"#
#  CMakeLists.txt
#
#  Copyright 2016 Dale Whinham
#
#  This file is part of MilkyTracker.
#
#  MilkyTracker is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  MilkyTracker is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with MilkyTracker.  If not, see <http://www.gnu.org/licenses/>.
#

cmake_minimum_required(VERSION 3.10)
project(MilkyTracker)

# Set C++ standard to C++98
set(CMAKE_CXX_STANDARD 98)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable IDE solution folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Enable tracker-specific functions in MilkyPlay
add_definitions(-DMILKYTRACKER)

# Adhere to GNU filesystem layout conventions
include(GNUInstallDirs)

# Force SDL if requested
option(FORCESDL ""Force SDL instead of native"" OFF)
if(FORCESDL)
    unset(APPLE)
    unset(WIN32)
    add_definitions(-D__FORCE_SDL_AUDIO__)
endif()

# Lowercase project name for binaries and packaging
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
string(TOLOWER ${CMAKE_SYSTEM_NAME} SYSTEM_NAME_LOWER)

# Additional CMake modules
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

# Version number in format X.YY.ZZ
set(VER_X  1)
set(VER_YY 02)
set(VER_ZZ 00)
set(VER_FULL ""${VER_X}.${VER_YY}.${VER_ZZ}"")

# Final build filename, for example ""milkytracker-1.02.00-win32.zip""
set(BUILD_FILENAME ""milkytracker-${VER_FULL}-${SYSTEM_NAME_LOWER}"")

# Generate version header from the above
configure_file(
    ${PROJECT_SOURCE_DIR}/src/tracker/version.h.in
    ${PROJECT_BINARY_DIR}/src/tracker/version.h
)

# Packaging
if(APPLE)
    set(CPACK_GENERATOR DragNDrop)
    set(CPACK_DMG_VOLUME_NAME ""${PROJECT_NAME} ${VER_FULL}"")
    set(
        CPACK_DMG_DS_STORE_SETUP_SCRIPT
        ${PROJECT_SOURCE_DIR}/resources/packaging/osx/DMGSetup.scpt
    )
    set(
        CPACK_DMG_BACKGROUND_IMAGE
        ${PROJECT_SOURCE_DIR}/resources/packaging/osx/DMGBackground.tif
    )
elseif(WIN32)
    set(CPACK_GENERATOR ZIP)
else()
    set(CPACK_GENERATOR TGZ)
endif()
set(CPACK_PACKAGE_NAME ${PROJECT_NAME_LOWER})
set(CPACK_PACKAGE_VENDOR ""MilkyTracker Team"")
set(CPACK_PACKAGE_CONTACT ""support@milkytracker.org"")
set(CPACK_PACKAGE_FILE_NAME ${BUILD_FILENAME})
set(CPACK_PACKAGE_VERSION_MAJOR ${VER_X})
set(CPACK_PACKAGE_VERSION_MINOR ${VER_YY})
set(CPACK_PACKAGE_VERSION_PATCH ${VER_ZZ})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""FastTracker II compatible music tracker"")
include(CPack)

if(APPLE)
    # Warn if deployment target isn't set to Lion
    if(NOT CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.7"")
        message(WARNING
            ""Your deployment target is either unset or not set to \""10.7\"", ""
            ""which means that the binaries produced may not run on earlier ""
            ""versions of macOS.\n""
            ""Please re-run CMake with '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.7' ""
            ""or change the variable in the CMake GUI to target Lion and newer.""
        )
    endif()

	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")

    # Set variables for generating the Info.plist file
    set(MACOSX_BUNDLE_BUNDLE_VERSION ""${VER_FULL}"")
    set(MACOSX_BUNDLE_EXECUTABLE ${PROJECT_NAME})
    set(MACOSX_BUNDLE_GUI_IDENTIFIER ""com.Titan.MilkyTracker"")
    set(MACOSX_BUNDLE_NSMAIN_NIB_FILE ""Application"")
    set(MACOSX_BUNDLE_ICON_FILE ""carton"")
    set(MACOSX_BUNDLE_NAME ${PROJECT_NAME})
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ""${VER_FULL}"")

    # Carbon only required for HIToolbox/Events.h (virtual keycodes)
    find_library(CARBON_LIBRARY Carbon)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(CORE_AUDIO_LIBRARY CoreAudio)
    find_library(CORE_FOUNDATION_LIBRARY CoreFoundation)
    find_library(CORE_MIDI_LIBRARY CoreMIDI)
    find_library(CORE_VIDEO_LIBRARY CoreVideo)
    find_library(OPENGL_LIBRARY OpenGL)

    # OS X MIDI support requires no external libraries
    message(STATUS ""Enabled MIDI support (Core MIDI)"")
    add_subdirectory(src/midi)
elseif(WIN32)
    # Visual C++ Compiler options
    if(MSVC)
        # Warn if platform toolset may not be targetting Windows XP upwards
        if(NOT CMAKE_VS_PLATFORM_TOOLSET MATCHES ""xp"")
            message(WARNING
                ""Your currently-selected platform toolset may generate ""
                ""executables which are incompatible with Windows XP.\n""
                ""Please set your toolset to be one of v110_xp, v120_xp or ""
                ""v140_xp for VS2012, VS2013, and VS2015 respectively.\n""
                ""You can do so with the '-T' argument to CMake, or by entering ""
                ""it in the CMake GUI.""
            )
        endif()

        # Suppress secure string function warnings
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)

        # Enable parallel compilation
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /MP"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")

        # Enable static linkage of the Microsoft Visual C/C++ Runtime
        set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} /MTd"")
        set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /MT"")
        set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} /MTd"")
        set(CMAKE_C_FLAGS_MINSIZEREL ""${CMAKE_C_FLAGS_MINSIZEREL} /MT"")
        set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")
        set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
        set(
            CMAKE_CXX_FLAGS_RELWITHDEBINFO
            ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MTd""
        )
        set(CMAKE_CXX_FLAGS_MINSIZEREL ""${CMAKE_CXX_FLAGS_MINSIZEREL} /MT"")
    endif()

    # Prevent Windows.h from clashing with the Standard Template Library so we
    # can use std::min/std::max (see https://support.microsoft.com/kb/143208)
    add_definitions(-DNOMINMAX)

    # Windows MIDI support requires no external libraries
    message(STATUS ""Enabled MIDI support (WinMM)"")
    add_subdirectory(src/midi)
else()
    # Workaround for SDL bug #3295, which occurs in SDL2 <2.0.5
    # https://bugzilla.libsdl.org/show_bug.cgi?id=3295
    cmake_policy(SET CMP0004 OLD)

    find_package(SDL2 REQUIRED)
endif()

# Prefer static linkage under OS X for libraries located with find_package()
if(APPLE)
    set(SUFFIXES_ORIG ${CMAKE_FIND_LIBRARY_SUFFIXES})
    set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

# Under macOS and Windows we use Git Submodules to locate the decompression libs
if(UNIX)
    # zlib is provided by Linux and macOS
    find_package(ZLIB)

    # We can't use Brew for these due to OSX target version mismatch
    # (we're targeting an older version of OSX to increase compatibility)
    if(NOT APPLE)
      find_package(LHASA)
      find_package(ZZIPLIB)
    endif()

    if(${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
        find_package(ALSA)
        find_package(JACK)

        # Linux MIDI support requires ALSA and RtMidi
        if(ALSA_FOUND)
            find_package(RTMIDI 2.1.0)
            if(RTMIDI_FOUND)
                message(STATUS ""Enabled MIDI support (ALSA/RtMidi)"")
                add_subdirectory(src/midi)
            else()
                message(""MIDI support disabled (RtMidi unavailable)"")
            endif()
        else()
            message(""MIDI support disabled (ALSA unavailable)"")
        endif()
    endif()
endif()

# Restore library suffixes
if(APPLE)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${SUFFIXES_ORIG})
endif()

add_subdirectory(docs)
add_subdirectory(resources/music)
add_subdirectory(src/compression)
add_subdirectory(src/fx)
add_subdirectory(src/milkyplay)
add_subdirectory(src/ppui)
add_subdirectory(src/tracker)

# Set MilkyTracker target as startup project in Visual Studio
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT tracker)
",3.10,3.1
1131,Buschtrommel,Skaffari,False,False,False,False,False,1,C++,2020-05-14 12:36:06+00:00,2017-04-13 11:36:35+00:00,5,814,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
cmake_policy(SET CMP0048 NEW)

project(skaffari VERSION 1.0.0)

find_package(Qt5 5.6.0 REQUIRED COMPONENTS Core Network Sql Xml)
find_package(Cutelyst2Qt5 2.10.0 REQUIRED)
find_package(Cutelee5 5.2.0 REQUIRED)
find_package(PkgConfig REQUIRED)

# Auto generate moc files
set(CMAKE_AUTOMOC ON)

# As moc files are generated in the binary dir, tell CMake
# to always look for includes there:
set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX ""/usr/local"" CACHE PATH ""Skaffari default install prefix"" FORCE)
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

set(CMAKE_INSTALL_BINDIR ""${CMAKE_INSTALL_PREFIX}/bin"" CACHE PATH ""Directory to install skaffarictl"")
set(CMAKE_INSTALL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share"" CACHE PATH ""Data install directory"")
set(CMAKE_INSTALL_LIBDIR ""${CMAKE_INSTALL_PREFIX}/lib"" CACHE PATH ""Library install directory"")
set(SKAFFARI_APP_FILE ""${CMAKE_INSTALL_LIBDIR}/cutelyst${Cutelyst2Qt5_VERSION_MAJOR}-apps/libskaffari.so"")
set(APPDIR ""${CMAKE_INSTALL_DATADIR}/skaffari"")
set(CMAKE_INSTALL_LOCALEDIR ""${APPDIR}/l10n"" CACHE PATH ""Directory to install core translations"")
set(TEMPLATES_INSTALL_DIR ""${APPDIR}/templates"" CACHE PATH ""Directory to install templates"")
set(SKAFFARI_STATIC_INSTALL_DIR ""${APPDIR}/static"" CACHE PATH ""Directory to install general static template files"")
set(CMAKE_INSTALL_SYSCONFDIR ""/etc"" CACHE PATH ""Directory to install configuration files"")
set(SKAFFARI_INI_FILE ""${CMAKE_INSTALL_SYSCONFDIR}/skaffari.ini"")
set(SQL_INSTALL_DIR ""${APPDIR}/sql"" CACHE PATH ""Directory to install SQL files"")
set(CMAKE_INSTALL_DOCDIR ""${CMAKE_INSTALL_DATADIR}/doc/skaffari"" CACHE PATH ""Directory to install documentation"")
set(CMAKE_INSTALL_MANDIR ""${CMAKE_INSTALL_DATADIR}/man"" CACHE PATH ""Directory to install man pages"")
set(SKAFFARI_RUNTIME_DIR ""/run/skaffari"" CACHE PATH ""Directory for runtime files (pid and socket)"")
set(SKAFFARI_SOCKET_FILE ""${SKAFFARI_RUNTIME_DIR}/skaffari.sock"")
set(SKAFFARI_PID_FILE ""${SKAFFARI_RUNTIME_DIR}/skaffari.pid"")
set(SKAFFARI_USER ""skaffari"" CACHE STRING ""System user for Skaffari"")
set(SKAFFARI_GROUP ""skaffari"" CACHE STRING ""System group for Skaffari"")
set(SKAFFARI_SOCKET_USER ""${SKAFFARI_USER}"" CACHE STRING ""User for the Skaffari FastCGI socket file"")
set(SKAFFARI_SOCKET_GROUP ""www"" CACHE STRING ""Group for the Skaffari FastCGI Socket file"")
set(SKAFFARI_CMD_PATH ""${CMAKE_INSTALL_BINDIR}/skaffaricmd"")
set(CUTELYST_WSGI_EXECUTABLE ""${CMAKE_INSTALL_BINDIR}/cutelyst-wsgi2"" CACHE FILEPATH ""Path to the cutelyst-wsgi2 executable"")
set(SYSTEMD_UNIT_DIR ""${CMAKE_INSTALL_PREFIX}/lib/systemd/system"" CACHE PATH ""Systemd unit directory"")
set(APACHE_VHOSTS_DIR ""${CMAKE_INSTALL_SYSCONFDIR}/apache2/vhosts.d"" CACHE PATH ""Apache virtual hosts config directory"")

option(INSTALL_SUPPLEMENTARY_FILES ""Install systemd service and timer files as well as apache example config"" OFF)

option(ENABLE_WKD ""Enable support for Web Key Directory"" OFF)
if (ENABLE_WKD)
    find_package(Qca-qt5 CONFIG REQUIRED)
endif (ENABLE_WKD)

option(BUILD_TESTS ""Build the Skaffari tests"" OFF)
if (BUILD_TESTS)
    enable_testing()
endif (BUILD_TESTS)

# set default configuration values
set(DEFVAL_ACC_PWMETHOD 1 CACHE INTERNAL ""Default accounts password method"")
set(DEFVAL_ACC_PWALGORITHM 0 CACHE INTERNAL ""Default accounts password algorithm"")
set(DEFVAL_ACC_PWROUNDS 32000 CACHE INTERNAL ""Default accounts password iteration count"")
set(DEFVAL_ACC_PWMINLENGTH 8 CACHE INTERNAL ""Default accounts password minimum length"")
set(DEFVAL_ACC_PWTHRESHOLD 30 CACHE INTERNAL ""Default accounts password quality threshold"")
set(DEFVAL_ADM_PWALGORITHM 4 CACHE INTERNAL ""Default admin password algorithm"")
set(DEFVAL_ADM_PWROUNDS 32000 CACHE INTERNAL ""Default admin password iteration count"")
set(DEFVAL_ADM_PWMINLENGTH 8 CACHE INTERNAL ""Default admin password minimum length"")
set(DEFVAL_ADM_PWTHRESHOLD 50 CACHE INTERNAL ""Default admin password quality threshold"")
set(DEFVAL_DEF_DOMAINQUOTA 0 CACHE INTERNAL ""Default domain quota for new domains in KiB"")
set(DEFVAL_DEF_LANGUAGE ""en_US"" CACHE INTERNAL ""Default language"")
set(DEFVAL_DEF_MAXACCOUNTS 1000 CACHE INTERNAL ""Default maximum accounts for new domains"")
set(DEFVAL_DEF_QUOTA 102400 CACHE INTERNAL ""Default quota for new accounts in KiB"")
set(DEFVAL_DEF_TIMEZONE ""UTC"" CACHE INTERNAL ""Default timezone"")
set(DEFVAL_DEF_WARNLEVEL 90 CACHE INTERNAL ""Default warn level for domain quota in percent"")
set(DEFVAL_DEF_MAXDISPLAY 25 CACHE INTERNAL ""Default value for displaying list entries"")
set(DEFVAL_IMAP_PROTOCOL 2 CACHE INTERNAL ""Default protocol for the IMAP connection"")
set(DEFVAL_IMAP_ENCRYPTION 1 CACHE INTERNAL ""Encryption layer for the IMAP connection"")
set(DEFVAL_IMAP_CREATEMAILBOX 3 CACHE INTERNAL ""Strategy to create new mailboxes on the IMAP server"")
set(DEFVAL_IMAP_UNIXHIERARCHYSEP false CACHE INTERNAL ""Default value for unix hierarchy separator"")
set(DEFVAL_IMAP_DOMAINASPREFIX false CACHE INTERNAL ""Default value for domain as prefix"")
set(DEFVAL_IMAP_FQUN false CACHE INTERNAL ""Default value for fqun"")
set(DEFVAL_IMAP_AUTHMECH 0 CACHE INTERNAL ""Default value for authmech"")
set(DEFVAL_TMPL_ASYNCACCOUNTLIST false CACHE INTERNAL ""Default value for async account list"")

configure_file(common/config.h.in ${CMAKE_BINARY_DIR}/common/config.h)

find_program(LRELEASE_CMD_PATH NAMES lrelease-qt5 lrelease)
set(LRELEASE_CMD ${LRELEASE_CMD_PATH})
if(LRELEASE_CMD)
    message(STATUS ""Found lrelease at ${LRELEASE_CMD}"")
    message(STATUS ""Translations are enabled"")

    set(LANGS de)

else(LRELEASE_CMD)
    message(WARNING ""lrelease executable cannot be found"")
    message(WARNING ""Translations are disabled"")
endif(LRELEASE_CMD)

install(FILES contribute.json DESTINATION ${APPDIR}/static)

add_subdirectory(src)
add_subdirectory(sql)
add_subdirectory(cmd)
add_subdirectory(templates)
add_subdirectory(doc)
add_subdirectory(l10n)
add_subdirectory(supplementary)

if (BUILD_TESTS)
    add_subdirectory(tests)
endif (BUILD_TESTS)
",3.1.0,3.1
1207,JoshDreamland,JustDefineIt,False,False,False,False,False,3,C++,2020-03-12 23:45:04+00:00,2011-12-25 06:14:50+00:00,4,205,"project(""JustDefineIt"")

cmake_minimum_required(VERSION 3.10)

set(JDI_HDRS
  src/API/AST_forward.h
  src/API/AST_operator.h
  src/API/compile_settings.h
  src/API/AST.h
  src/API/error_reporting.h
  src/API/parse_config.h
  src/API/error_context.h
  src/API/user_tokens.h
  src/API/context.h
  src/Parser/is_potential_constructor.h
  src/Parser/context_parser.h
  src/Parser/handlers/handle_function_impl.h
  src/Parser/cclass_base.h
  src/Storage/definition_forward.h
  src/Storage/definition.h
  src/Storage/full_type.h
  src/Storage/value_funcs.h
  src/Storage/arg_key.h
  src/Storage/references.h
  src/Storage/value.h
  src/User/token_types.h
  src/User/token_cases.h
  src/General/quickreference.h
  src/General/quickvector.h
  src/General/parse_basics.h
  src/General/strings.h
  src/General/llreader.h
  src/General/debug_macros.h
  src/General/svg_simple.h
  src/General/quickstack.h
  src/System/lex_cpp.h
  src/System/builtins.h
  src/System/macros.h
  src/System/symbols.h
  src/System/token.h
  src/System/type_usage_flags.h
)

set(JDI_SRCS
  src/API/user_tokens.cpp
  src/API/AST_operator.cpp
  src/API/AST.cpp
  src/API/AST_Export.cpp
  src/API/context.cpp
  src/API/error_reporting.cpp
  src/Parser/base.cpp
  src/Parser/readers/read_template_parameters.cpp
  src/Parser/readers/read_qualified_definition.cpp
  src/Parser/readers/read_expression.cpp
  src/Parser/readers/read_next_token.cpp
  src/Parser/readers/read_operatorkw_name.cpp
  src/Parser/readers/read_type.cpp
  src/Parser/context_parser.cpp
  src/Parser/handlers/handle_namespace.cpp
  src/Parser/handlers/handle_enum.cpp
  src/Parser/handlers/handle_friend.cpp
  src/Parser/handlers/handle_operatorkw_cast.cpp
  src/Parser/handlers/handle_scope.cpp
  src/Parser/handlers/handle_function_impl.cpp
  src/Parser/handlers/handle_declarators.cpp
  src/Parser/handlers/handle_union.cpp
  src/Parser/handlers/handle_hypothetical.cpp
  src/Parser/handlers/handle_class.cpp
  src/Parser/handlers/handle_templates.cpp
  src/Storage/definition_duplicate.cpp
  src/Storage/value.cpp
  src/Storage/value_funcs.cpp
  src/Storage/full_type.cpp
  src/Storage/arg_key.cpp
  src/Storage/definition.cpp
  src/Storage/references.cpp
  src/General/svg_simple.cpp
  src/General/parse_basics.cpp
  src/General/llreader.cpp
  src/General/debug_macros.cpp
  src/System/macros.cpp
  src/System/lex_cpp.cpp
  src/System/builtins.cpp
  src/System/symbols.cpp
  src/System/token.cpp
)

# Global include dirs
include_directories(""src/"")

# Global cxx flags
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(WARNING_FLAGS
  ""-Wshadow \
  -Winit-self \
  -Wredundant-decls \
  -Wcast-align \
  -Wundef \
  -Wfloat-equal \
  -Wunreachable-code \
  -Wmissing-declarations \
  -Wmissing-include-dirs \
  -Wswitch-enum \
  -Wswitch-default \
  -Wmain \
  -pedantic-errors \
  -pedantic \
  -Wextra \
  -Wall \
  -Werror""
)

# Debug
add_executable(""Debug"" ${JDI_HDRS} ${JDI_SRCS} ""test/MAIN.cc"")
set_target_properties(""Debug"" PROPERTIES OUTPUT_NAME ""JustDefineIt"")
set_target_properties(""Debug"" PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin/Debug"")
set_target_properties(""Debug"" PROPERTIES COMPILE_FLAGS ""${WARNING_FLAGS} -g -D_GLIBCXX_DEBUG -DDEBUG_MODE"")

# Debug Render
add_executable(""Debug-Render"" ${JDI_HDRS} ${JDI_SRCS} ""test/MAIN.cc"")
set_target_properties(""Debug-Render"" PROPERTIES OUTPUT_NAME ""JustDefineIt"")
set_target_properties(""Debug-Render"" PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin/Debug-Render"")
set_target_properties(""Debug-Render"" PROPERTIES COMPILE_FLAGS ""${WARNING_FLAGS} -g -D_GLIBCXX_DEBUG -DDEBUG_MODE -DRENDER_ASTS"")

# Release
add_executable(""Release"" ${JDI_HDRS} ${JDI_SRCS} ""test/MAIN.cc"")
set_target_properties(""Release"" PROPERTIES OUTPUT_NAME ""JustDefineIt"")
set_target_properties(""Release"" PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin/Release"")
set_target_properties(""Release"" PROPERTIES COMPILE_FLAGS ""${WARNING_FLAGS} -fomit-frame-pointer -fexpensive-optimizations -O3"")
set_target_properties(""Release"" PROPERTIES LINK_FLAGS ""-s"")

# Profile
add_executable(""Profile"" ${JDI_HDRS} ${JDI_SRCS} ""test/MAIN.cc"")
set_target_properties(""Profile"" PROPERTIES OUTPUT_NAME ""JustDefineIt"")
set_target_properties(""Profile"" PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin/Profile"")
set_target_properties(""Profile"" PROPERTIES COMPILE_FLAGS ""${WARNING_FLAGS} -pg -g"")
set_target_properties(""Profile"" PROPERTIES LINK_FLAGS ""-pg"")

# Test
set(TESTING_SRCS 
  ""test/Testing/error_handler.h"" 
  ""test/Testing/matchers.h""
  ""test/Lexer/lexer_test.cc""
  ""test/General/error_handler_test.cc""
)

find_package(GTest REQUIRED)

add_executable(""Test"" ${JDI_HDRS} ${JDI_SRCS} ${TESTING_SRCS})
target_include_directories(""Test"" PRIVATE ""test/"")
set_target_properties(""Test"" PROPERTIES OUTPUT_NAME ""JustDefineIt"")
set_target_properties(""Test"" PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin/Test"")
set_target_properties(""Test"" PROPERTIES COMPILE_FLAGS ""${WARNING_FLAGS} -g -D_GLIBCXX_DEBUG -DDEBUG_MODE"")
target_link_libraries(""Test"" GTest::GTest GTest::Main)
",3.10,3.1
1254,fixstars-jp,libSGM,False,False,False,False,False,10,Cuda,2019-10-16 09:15:30+00:00,2016-02-12 07:43:44+00:00,269,457,"cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CUDA_ARCH ""-arch=sm_50"" CACHE STRING ""Value of the NVCC -arch option."")
if(${CMAKE_VERSION} VERSION_EQUAL 3.7 OR ${CMAKE_VERSION} VERSION_GREATER 3.7)
  option(AUTO_DETECT_ARCH ""Detect local GPU compute arch automatically"" ON)
endif()

option(ENABLE_ZED_DEMO      ""Build a Demo using ZED Camera"" OFF)
option(ENABLE_SAMPLES       ""Build samples"" OFF)
option(ENABLE_TESTS         ""Test library"" OFF)
option(LIBSGM_SHARED        ""Build a shared library"" OFF)
option(BUILD_OPENCV_WRAPPER ""Make library compatible with cv::Mat and cv::cuda::GpuMat of OpenCV"" OFF)

if(WIN32)
  set(ZED_SDK_LIB ""C:\\Program Files (x86)\\ZED SDK\\lib\\sl_zed64.lib"" CACHE STRING ""ZED SDK library(sl_zed**.llb) path."")
  set(ZED_SDK_INCLUDE_DIR ""C:\\Program Files (x86)\\ZED SDK\\include"" CACHE STRING ""ZED SDK include path."")
else()
  set(ZED_SDK_LIB ""/usr/local/zed/lib/libsl_zed.so"" CACHE STRING ""ZED SDK library(sl_zed**.llb) path."")
  set(ZED_SDK_INCLUDE_DIR ""/usr/local/zed/include"" CACHE STRING ""ZED SDK include path."")
endif()

project(libSGM VERSION 2.7.0)

if(BUILD_OPENCV_WRAPPER)
	find_package(OpenCV REQUIRED core)
	include_directories(${OpenCV_INCLUDE_DIRS})
endif()

configure_file(${PROJECT_SOURCE_DIR}/include/libsgm_config.h.in
               ${PROJECT_SOURCE_DIR}/include/libsgm_config.h
)

add_subdirectory(src)

if(ENABLE_SAMPLES)
    add_subdirectory(sample/image)
    add_subdirectory(sample/movie)
    add_subdirectory(sample/reprojection)
    add_subdirectory(sample/benchmark)
    if(BUILD_OPENCV_WRAPPER)
        add_subdirectory(sample/image_cv_gpumat)
    endif()
endif()

if(ENABLE_TESTS)
	add_subdirectory(test)
endif()

if(ENABLE_ZED_DEMO)
	add_subdirectory(sample/zed)
endif()
",3.1,3.1
1546,Himalaya-Library,Himalaya,False,False,False,False,False,3,C++,2020-03-25 14:01:49+00:00,2017-10-17 14:11:13+00:00,2,696,"cmake_minimum_required(VERSION 3.1)
project(Himalaya LANGUAGES CXX Fortran)

include(GNUInstallDirs)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# require an Eigen installation
find_package(Eigen3 3.0 REQUIRED)
find_package(Mathematica 8.0)

# if needed, set your Fortran and C++ compiler
#set (CMAKE_Fortran_COMPILER gfortran)
#set (CMAKE_CXX_COMPILER clang++)
#set (CMAKE_CXX_COMPILER icpc)

# set the build type to release. If one needs debugging symbols, compile
# with ""CMAKE_BUILD_TYPE Debug""
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# set the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# enable all warnings in Debug mode
if(CMAKE_BUILD_TYPE STREQUAL Debug)
  if(CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_ID MATCHES ""Clang""))
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic"")
  endif()
endif()

# set paths
set(SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/source)
set(PUBLIC_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include)

# private headers
set(PRIVATE_HEADERS
  ${SOURCE_PATH}/include/hierarchies
  ${SOURCE_PATH}/include/mh2_eft
  ${SOURCE_PATH}/include/mh2_fo
  ${SOURCE_PATH}/include/mh2l
  ${SOURCE_PATH}/include/misc)

# Himalaya library sources
set(HIM_LIBSOURCES
  # interface
  ${SOURCE_PATH}/HierarchyCalculator.cpp
  ${SOURCE_PATH}/HierarchyObject.cpp
  ${SOURCE_PATH}/Himalaya_interface.cpp
  # hierarchies
  ${SOURCE_PATH}/hierarchies/H32q2g.cpp
  ${SOURCE_PATH}/hierarchies/H3.cpp
  ${SOURCE_PATH}/hierarchies/H3q22g.cpp
  ${SOURCE_PATH}/hierarchies/H4.cpp
  ${SOURCE_PATH}/hierarchies/H5.cpp
  ${SOURCE_PATH}/hierarchies/H5g1.cpp
  ${SOURCE_PATH}/hierarchies/H6b2qg2.cpp
  ${SOURCE_PATH}/hierarchies/H6b.cpp
  ${SOURCE_PATH}/hierarchies/H6bq22g.cpp
  ${SOURCE_PATH}/hierarchies/H6bq2g2.cpp
  ${SOURCE_PATH}/hierarchies/H6.cpp
  ${SOURCE_PATH}/hierarchies/H6g2.cpp
  ${SOURCE_PATH}/hierarchies/H9.cpp
  ${SOURCE_PATH}/hierarchies/H9q2.cpp
  # EFT calculation
  ${SOURCE_PATH}/mh2_eft/Mh2EFTCalculator.cpp
  ${SOURCE_PATH}/mh2_eft/ThresholdCalculator.cpp
  ${SOURCE_PATH}/mh2_eft/threshold_loop_functions.cpp
  # fixed-order calculation
  ${SOURCE_PATH}/mh2_fo/linalg2.cpp
  ${SOURCE_PATH}/mh2_fo/MSSM_mass_eigenstates.cpp
  ${SOURCE_PATH}/mh2_fo/pv.cpp
  # helpers
  ${SOURCE_PATH}/misc/dilog.cpp)

# DSZ library sources
set(DSZ_LIBSOURCES
  ${SOURCE_PATH}/mh2l/DSZHiggs.cpp
  ${SOURCE_PATH}/mh2l/DSZHiggs.f
  ${SOURCE_PATH}/mh2l/functs.f
  ${SOURCE_PATH}/mh2l/li2.cpp)

# DSZ static library
add_library(DSZ_static STATIC ${DSZ_LIBSOURCES})
set_target_properties(DSZ_static PROPERTIES OUTPUT_NAME DSZ)
target_include_directories(DSZ_static
  PUBLIC
    ${EIGEN3_INCLUDE_DIR}
  PRIVATE
    ${PRIVATE_HEADERS}
)
add_library(Himalaya::DSZ::static ALIAS DSZ_static)

# DSZ shared library
add_library(DSZ_shared SHARED ${DSZ_LIBSOURCES})
set_target_properties(DSZ_shared PROPERTIES OUTPUT_NAME DSZ)
target_include_directories(DSZ_shared
  PUBLIC
    ${EIGEN3_INCLUDE_DIR}
  PRIVATE
    ${PRIVATE_HEADERS}
)
add_library(Himalaya::DSZ::shared ALIAS DSZ_shared)

# Himalaya static library
add_library(Himalaya_static STATIC ${HIM_LIBSOURCES})
set_target_properties(Himalaya_static PROPERTIES OUTPUT_NAME Himalaya)
target_include_directories(Himalaya_static
  PUBLIC
    ${PUBLIC_HEADERS}
    ${EIGEN3_INCLUDE_DIR}
  PRIVATE
    ${PRIVATE_HEADERS}
)
add_library(Himalaya::Himalaya::static ALIAS Himalaya_static)

# Himalaya shared library
add_library(Himalaya_shared SHARED ${HIM_LIBSOURCES})
set_target_properties(Himalaya_shared PROPERTIES OUTPUT_NAME Himalaya)
target_link_libraries(Himalaya_shared PUBLIC DSZ_shared)
target_include_directories(Himalaya_shared
  PUBLIC
    ${PUBLIC_HEADERS}
    ${EIGEN3_INCLUDE_DIR}
  PRIVATE
    ${PRIVATE_HEADERS}
)
add_library(Himalaya::Himalaya::shared ALIAS Himalaya_shared)

# generic targets
add_library(Himalaya::Himalaya ALIAS Himalaya_static)
add_library(Himalaya::DSZ ALIAS DSZ_static)

# example executable
add_executable(example ${SOURCE_PATH}/example.cpp)
target_link_libraries(example Himalaya::Himalaya Himalaya::DSZ)

# create LibrayLink
if(Mathematica_FOUND)
  set(LL_SRC ${SOURCE_PATH}/LibraryLink/Himalaya_LibraryLink.cpp)
  set(LL_LIB Himalaya_LibraryLink)
  Mathematica_ADD_LIBRARY(${LL_LIB} ${LL_SRC})
  target_link_libraries(${LL_LIB} PRIVATE Himalaya_shared ${Mathematica_MathLink_LIBRARIES})
  target_include_directories(${LL_LIB}
    PRIVATE
      ${Mathematica_INCLUDE_DIR}
      ${Mathematica_MathLink_INCLUDE_DIR}
      $<TARGET_PROPERTY:Himalaya::Himalaya::static,INCLUDE_DIRECTORIES>
    )
  set_target_properties(${LL_LIB} PROPERTIES LINK_FLAGS ""${Mathematica_MathLink_LINKER_FLAGS}"")

  Mathematica_ABSOLUTIZE_LIBRARY_DEPENDENCIES(${LL_LIB})
endif()

# generate himalaya.pc file for pkg-config
configure_file (
  ""${PROJECT_SOURCE_DIR}/cmake/himalaya.pc.in""
  ""${PROJECT_BINARY_DIR}/himalaya.pc""
  @ONLY)

# install libraries
install(
  TARGETS Himalaya_static Himalaya_shared DSZ_static DSZ_shared
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# install public headers
install(
  DIRECTORY ""${PUBLIC_HEADERS}/himalaya""
  DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""
)

# install himalaya.pc file
install(
  FILES ""${PROJECT_BINARY_DIR}/himalaya.pc""
  DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig"")

# adding documentation
add_subdirectory(doc)

# test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/test)
  enable_testing()
  add_subdirectory(test)
endif()
",3.1,3.1
1693,zyantific,zyan-disassembler-engine,False,False,False,False,False,13,C,2020-05-14 08:18:09+00:00,2014-10-24 21:05:43+00:00,1518,809,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
include(GenerateExportHeader)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

project(Zydis VERSION 3.1.0.0 LANGUAGES C CXX)

# =============================================================================================== #
# Overridable options                                                                             #
# =============================================================================================== #

# Features
option(ZYDIS_MINIMAL_MODE
    ""Enable minimal mode (forces ZYDIS_DECODER_MODE_MINIMAL runtime option)""
    OFF)
option(ZYDIS_FEATURE_DECODER
    ""Enable instruction decoding functionality""
    ON)
option(ZYDIS_FEATURE_FORMATTER
    ""Enable instruction formatting functionality""
    ON)
option(ZYDIS_FEATURE_AVX512
    ""Enable support for AVX-512 instructions""
    ON)
option(ZYDIS_FEATURE_KNC
    ""Enable support for KNC instructions""
    ON)

# Build configuration
option(ZYDIS_BUILD_SHARED_LIB
    ""Build shared library""
    OFF)
option(ZYDIS_BUILD_EXAMPLES
    ""Build examples""
    ON)
option(ZYDIS_BUILD_TOOLS
    ""Build tools""
    ON)
option(ZYDIS_FUZZ_AFL_FAST
    ""Enables AFL persistent mode and reduces prints in ZydisFuzzIn""
    OFF)
option(ZYDIS_LIBFUZZER
    ""Enables LLVM libfuzzer mode and reduces prints in ZydisFuzzIn""
    OFF)
set(ZYDIS_ZYCORE_PATH
    ""${CMAKE_CURRENT_LIST_DIR}/dependencies/zycore""
    CACHE
    PATH
    ""The path to look for Zycore"")

# =============================================================================================== #
# Dependencies                                                                                    #
# =============================================================================================== #

if (NOT EXISTS ""${ZYDIS_ZYCORE_PATH}/CMakeLists.txt"")
    message(
        FATAL_ERROR
        ""Can't find zycore submodule. Please make sure to clone the repo recursively.\n""
        ""You can fix this by running\n""
        ""    git submodule update --init\n""
        ""or by cloning using\n""
        ""    git clone --recursive <url>\n""
        ""Alternatively, you can manually clone zycore to some path and set ZYDIS_ZYCORE_PATH.""
    )
endif ()

add_subdirectory(${ZYDIS_ZYCORE_PATH} ""zycore"" EXCLUDE_FROM_ALL)

# =============================================================================================== #
# Library configuration                                                                           #
# =============================================================================================== #

if (ZYDIS_BUILD_SHARED_LIB)
    add_library(""Zydis"" SHARED)
else ()
    add_library(""Zydis"" STATIC)
endif ()

target_link_libraries(""Zydis"" PUBLIC ""Zycore"")
target_include_directories(""Zydis""
    PUBLIC ""include"" ${PROJECT_BINARY_DIR}
    PRIVATE ""src"")
target_compile_definitions(""Zydis"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"" ""ZYDIS_EXPORTS"")
zyan_set_common_flags(""Zydis"")
zyan_maybe_enable_wpo_for_lib(""Zydis"")
generate_export_header(""Zydis"" BASE_NAME ""ZYDIS"" EXPORT_FILE_NAME ""ZydisExportConfig.h"")

if (ZYDIS_FEATURE_FORMATTER AND NOT ZYDIS_FEATURE_DECODER)
    message(
        FATAL_ERROR
        ""\nZYDIS_FEATURE_FORMATTER requires ZYDIS_FEATURE_DECODER to be enabled""
    )
endif ()

if (ZYDIS_MINIMAL_MODE)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_MINIMAL_MODE"")
endif ()
if (NOT ZYDIS_FEATURE_DECODER)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_DECODER"")
endif ()
if (NOT ZYDIS_FEATURE_FORMATTER)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_FORMATTER"")
endif ()
if (NOT ZYDIS_FEATURE_AVX512)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_AVX512"")
endif ()
if (NOT ZYDIS_FEATURE_KNC)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_KNC"")
endif ()

target_sources(""Zydis""
    PRIVATE
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/MetaInfo.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Mnemonic.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Register.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/SharedTypes.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/ShortString.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Status.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Utils.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Zydis.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/SharedData.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/String.h""
        ""src/MetaInfo.c""
        ""src/Mnemonic.c""
        ""src/Register.c""
        ""src/SharedData.c""
        ""src/String.c""
        ""src/Utils.c""
        ""src/Zydis.c"")

if (ZYDIS_FEATURE_DECODER)
    target_sources(""Zydis""
        PRIVATE
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Decoder.h""
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/DecoderTypes.h""
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/DecoderData.h""
            ""src/Decoder.c""
            ""src/DecoderData.c"")
    if (ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        target_sources(""Zydis""
            PRIVATE
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Formatter.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/FormatterBuffer.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterATT.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterBase.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterIntel.h""
                ""src/Formatter.c""
                ""src/FormatterBuffer.c""
                ""src/FormatterATT.c""
                ""src/FormatterBase.c""
                ""src/FormatterIntel.c"")
    endif ()
endif ()

if (ZYDIS_BUILD_SHARED_LIB AND WIN32)
    target_sources(""Zydis"" PRIVATE ""resources/VersionInfo.rc"")
endif ()

zyan_set_source_group(""Zydis"")

configure_package_config_file(cmake/zydis-config.cmake.in
    ""${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_PREFIX}/cmake""
)
install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake""
    DESTINATION ""${CMAKE_INSTALL_PREFIX}/cmake""
)

install(TARGETS ""Zydis""
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install(FILES
    ""${PROJECT_BINARY_DIR}/ZydisExportConfig.h""
    DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}"")
install(DIRECTORY ""include/"" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

function (_maybe_set_emscripten_cfg target)
    if (EMSCRIPTEN)
        # Yep, that madness below is how Emscripten likes its quotes.
        set_target_properties(""${target}""
            PROPERTIES COMPILE_FLAGS
            ""-s \""EXPORT_NAME='${target}'\"" -s MODULARIZE=1"")
        set_target_properties(""${target}""
            PROPERTIES LINK_FLAGS_RELEASE
            ""-s \""EXPORT_NAME='${target}'\"" -s MODULARIZE=1"")
    endif ()
endfunction ()

# =============================================================================================== #
# Examples                                                                                        #
# =============================================================================================== #

if (ZYDIS_BUILD_EXAMPLES AND NOT ZYAN_NO_LIBC)
    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        add_executable(""Formatter01"" ""examples/Formatter01.c"")
        target_link_libraries(""Formatter01"" ""Zydis"")
        set_target_properties(""Formatter01"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter01"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter01"")
        zyan_maybe_enable_wpo(""Formatter01"")
        _maybe_set_emscripten_cfg(""Formatter01"")

        add_executable(""Formatter02"" ""examples/Formatter02.c"")
        target_link_libraries(""Formatter02"" ""Zydis"")
        set_target_properties(""Formatter02"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter02"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter02"")
        zyan_maybe_enable_wpo(""Formatter02"")
        _maybe_set_emscripten_cfg(""Formatter02"")

        add_executable(""Formatter03"" ""examples/Formatter03.c"")
        target_link_libraries(""Formatter03"" ""Zydis"")
        set_target_properties(""Formatter03"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter03"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter03"")
        zyan_maybe_enable_wpo(""Formatter03"")
        _maybe_set_emscripten_cfg(""Formatter03"")

        add_executable(""ZydisPerfTest"" ""examples/ZydisPerfTest.c"")
        target_link_libraries(""ZydisPerfTest"" ""Zydis"")
        set_target_properties(""ZydisPerfTest"" PROPERTIES FOLDER ""Examples"")
        target_compile_definitions(""ZydisPerfTest"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisPerfTest"")
        zyan_maybe_enable_wpo(""ZydisPerfTest"")
        _maybe_set_emscripten_cfg(""ZydisPerfTest"")
        if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux""
                OR ${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
            target_compile_definitions(""ZydisPerfTest"" PRIVATE ""_GNU_SOURCE"")
            find_package(Threads REQUIRED)
            target_link_libraries(""ZydisPerfTest"" Threads::Threads)
        endif ()
    endif ()
endif ()

# =============================================================================================== #
# Tools                                                                                           #
# =============================================================================================== #

if (ZYDIS_BUILD_TOOLS AND NOT ZYAN_NO_LIBC)
    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        add_executable(""ZydisDisasm"" ""tools/ZydisDisasm.c"")
        target_link_libraries(""ZydisDisasm"" ""Zydis"")
        set_target_properties (""ZydisDisasm"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisDisasm"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisDisasm"")
        zyan_maybe_enable_wpo(""ZydisDisasm"")
        _maybe_set_emscripten_cfg(""ZydisDisasm"")
        install(TARGETS ""ZydisDisasm"" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

        add_executable(""ZydisFuzzIn"" ""tools/ZydisFuzzIn.c"")
        target_link_libraries(""ZydisFuzzIn"" ""Zydis"")
        set_target_properties(""ZydisFuzzIn"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisFuzzIn"")
        zyan_maybe_enable_wpo(""ZydisFuzzIn"")
        _maybe_set_emscripten_cfg(""ZydisFuzzIn"")
        if (ZYDIS_FUZZ_AFL_FAST)
            target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""ZYDIS_FUZZ_AFL_FAST"")
        endif ()
        if (ZYDIS_LIBFUZZER)
            target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""ZYDIS_LIBFUZZER"")
        endif ()

        add_executable(""ZydisInfo"" ""tools/ZydisInfo.c"")
        target_link_libraries(""ZydisInfo"" ""Zydis"")
        set_target_properties (""ZydisInfo"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisInfo"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisInfo"")
        zyan_maybe_enable_wpo(""ZydisInfo"")
        _maybe_set_emscripten_cfg(""ZydisInfo"")
        install(TARGETS ""ZydisInfo"" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

        #add_executable(""ZydisPE"" ""tools/ZydisPE.c"")
        #target_link_libraries(""ZydisPE"" ""Zydis"")
        #set_target_properties (""ZydisPE"" PROPERTIES FOLDER ""Tools"")
        #target_compile_definitions(""ZydisPE"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        #zyan_set_common_flags(""ZydisPE"")
        #zyan_maybe_enable_wpo(""ZydisPE"")
        #_maybe_set_emscripten_cfg(""ZydisPE"")
    endif ()
endif ()
",3.1,3.1
1787,queueRAM,sm64tools,False,False,False,False,False,2,C,2020-03-29 10:37:23+00:00,2015-02-22 08:11:11+00:00,115,528,"cmake_minimum_required(VERSION 3.1)

project(sm64tools C)

if (MSVC)
   # Always static linking on windows
   add_definitions(/MT)
else ()
   add_definitions(-Wextra)
endif ()

set(CMAKE_C_FLAGS ""${GCC_EXTRA_CFLAGS}"")
set(CMAKE_EXE_LINKER_FLAGS ""${GCC_EXTRA_LDFLAGS}"")

include_directories(${CMAKE_SOURCE_DIR}/ext)
include_directories(""${PROJECT_SOURCE_DIR}/external/include"")
link_directories(""${PROJECT_SOURCE_DIR}/external/lib"")

add_library(sm64 STATIC libmio0.c libsm64.c utils.c)

add_executable(sm64extend sm64extend.c)
target_link_libraries(sm64extend sm64)

add_executable(sm64compress sm64compress.c)
target_link_libraries(sm64compress sm64)

add_executable(sm64walk sm64walk.c)
target_link_libraries(sm64walk sm64)

add_executable(f3d f3d.c utils.c)

add_executable(f3d2obj blast.c f3d2obj.c n64graphics.c utils.c)
target_link_libraries(f3d2obj png z)

add_executable(sm64geo sm64geo.c utils.c)

add_executable(mio0 libmio0.c)
set_target_properties(mio0 PROPERTIES COMPILE_DEFINITIONS ""MIO0_STANDALONE"")

add_executable(mipsdisasm mipsdisasm.c utils.c yamlconfig.c)
set_target_properties(mipsdisasm PROPERTIES COMPILE_DEFINITIONS ""MIPSDISASM_STANDALONE"")
target_link_libraries(mipsdisasm capstone yaml)

add_executable(n64cksum n64cksum.c)
target_link_libraries(n64cksum sm64)

add_executable(n64graphics n64graphics.c utils.c)
set_target_properties(n64graphics PROPERTIES COMPILE_DEFINITIONS ""N64GRAPHICS_STANDALONE"")
target_link_libraries(n64graphics png z)

add_executable(n64split blast.c libsfx.c mipsdisasm.c n64split.c n64graphics.c strutils.c yamlconfig.c)
target_link_libraries(n64split sm64 capstone yaml z)

",3.1,3.1
1801,ekg,freebayes,False,False,False,False,False,28,C++,2020-05-08 10:28:43+00:00,2010-10-13 21:34:33+00:00,466,1033,"# Specify the minimum version for CMake

cmake_minimum_required(VERSION 3.1)

# Project's name
project(freebayes)
# We build using c++14
set(CMAKE_CXX_STANDARD 14)

# Use all standard-compliant optimizations
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -O3 -g"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -g"")

# Set the output folder where your program will be created
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# The following folder will be included
include_directories(""${PROJECT_SOURCE_DIR}"")

# Add external projects
include(ExternalProject)

# Find our dependencies
include(FindZLIB)
include(FindBZip2)
include(FindLibLZMA)
include(FindThreads)

ExternalProject_Add(vcflib
  SOURCE_DIR ""${CMAKE_SOURCE_DIR}/vcflib""
  CMAKE_ARGS ""${CMAKE_ARGS};-DBUILD_ONLY_LIB=1;-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>"")
ExternalProject_Get_property(vcflib INSTALL_DIR)
set(vcflib_INCLUDE ""${INSTALL_DIR}/include"")
set(vcflib_LIB ""${INSTALL_DIR}/lib"")

ExternalProject_Add(seqlib
  SOURCE_DIR ${CMAKE_SOURCE_DIR}/SeqLib
  BUILD_IN_SOURCE 1 # why do we have to build in source?
  CONFIGURE_COMMAND ./configure
  BUILD_COMMAND $(MAKE) CXXFLAGS='-std=c++14'
  INSTALL_COMMAND $(MAKE) install)
ExternalProject_Get_property(seqlib SOURCE_DIR)
set(seqlib_INCLUDE ""${SOURCE_DIR}"")
set(seqlib_LIB ""${SOURCE_DIR}/lib"")

#set(CMAKE_BUILD_TYPE Release)
#set(CMAKE_BUILD_TYPE Debug)

# set up our target executable and specify its dependencies and includes
add_library(freebayes_OBJS OBJECT
  ${CMAKE_SOURCE_DIR}/src/Contamination.cpp
  ${CMAKE_SOURCE_DIR}/src/Marginals.cpp
  ${CMAKE_SOURCE_DIR}/src/DataLikelihood.cpp
  ${CMAKE_SOURCE_DIR}/src/NonCall.cpp
  ${CMAKE_SOURCE_DIR}/src/Genotype.cpp
  ${CMAKE_SOURCE_DIR}/src/Utility.cpp
  ${CMAKE_SOURCE_DIR}/src/AlleleParser.cpp
  ${CMAKE_SOURCE_DIR}/src/Dirichlet.cpp
  ${CMAKE_SOURCE_DIR}/src/split.cpp
  ${CMAKE_SOURCE_DIR}/src/Sample.cpp
  ${CMAKE_SOURCE_DIR}/src/SegfaultHandler.cpp
  ${CMAKE_SOURCE_DIR}/src/BedReader.cpp
  ${CMAKE_SOURCE_DIR}/src/Multinomial.cpp
  ${CMAKE_SOURCE_DIR}/src/LeftAlign.cpp
  ${CMAKE_SOURCE_DIR}/src/CNV.cpp
  ${CMAKE_SOURCE_DIR}/src/ResultData.cpp
  ${CMAKE_SOURCE_DIR}/src/Bias.cpp
  ${CMAKE_SOURCE_DIR}/src/Result.cpp
  ${CMAKE_SOURCE_DIR}/src/Allele.cpp
  ${CMAKE_SOURCE_DIR}/src/IndelAllele.cpp
  ${CMAKE_SOURCE_DIR}/src/Fasta.cpp
  ${CMAKE_SOURCE_DIR}/src/Ewens.cpp
  ${CMAKE_SOURCE_DIR}/src/Parameters.cpp
  ${CMAKE_SOURCE_DIR}/src/BGZF.cpp)

set(freebayes_DEPS 
  vcflib
  seqlib)

add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/version_git.txt
  COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/scripts/update_version.sh ${CMAKE_CURRENT_SOURCE_DIR})
add_custom_target(SetVersion ALL
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/version_git.txt)

add_dependencies(freebayes_OBJS ${freebayes_DEPS} SetVersion)

set(freebayes_INCLUDES
  ""${CMAKE_SOURCE_DIR}/src""
  ""${CMAKE_SOURCE_DIR}/ttmath""
  ""${vcflib_INCLUDE}""
  ""${seqlib_INCLUDE}""
  ""${seqlib_INCLUDE}/htslib"")

set(freebayes_LIBS
  ""${vcflib_LIB}/libvcflib.a""
  ""${seqlib_LIB}/libseqlib.a""
  ""${seqlib_LIB}/libhts.a""
  ${CMAKE_THREAD_LIBS_INIT}
  ${ZLIB_LIBRARIES}
  ${LIBLZMA_LIBRARIES}
  ${BZIP2_LIBRARIES})

target_include_directories(freebayes_OBJS PUBLIC ${freebayes_INCLUDES})
set_target_properties(freebayes_OBJS PROPERTIES POSITION_INDEPENDENT_CODE TRUE)

add_executable(freebayes
  $<TARGET_OBJECTS:freebayes_OBJS>
  ${CMAKE_SOURCE_DIR}/src/freebayes.cpp)
target_include_directories(freebayes PUBLIC ${freebayes_INCLUDES})
target_link_libraries(freebayes ${freebayes_LIBS})
set_target_properties(freebayes PROPERTIES OUTPUT_NAME ""freebayes"")

add_executable(bamleftalign
  $<TARGET_OBJECTS:freebayes_OBJS>
  ${CMAKE_SOURCE_DIR}/src/bamleftalign.cpp)
target_include_directories(bamleftalign PUBLIC ${freebayes_INCLUDES})
target_link_libraries(bamleftalign ${freebayes_LIBS})
set_target_properties(bamleftalign PROPERTIES OUTPUT_NAME ""bamleftalign"")

install(TARGETS freebayes DESTINATION bin)
install(TARGETS bamleftalign DESTINATION bin)

if (APPLE)
elseif (TRUE)
  if (BUILD_STATIC)
    set(CMAKE_EXE_LINKER_FLAGS ""-static"")
  endif()
endif()
",3.1,3.1
2010,KDE,kronometer,False,False,False,False,False,10,C++,2020-03-16 09:17:47+00:00,2015-09-18 14:20:30+00:00,9,683,"project(kronometer)

cmake_minimum_required(VERSION 3.1)
set(QT_MIN_VERSION 5.9.0)
set(KF5_MIN_VERSION 5.26.0)

set(PROJECT_VERSION 2.2.70)

set(CMAKE_CXX_STANDARD 14)
set(CXX_STANDARD_REQUIRED ON)

find_package(ECM ${KF5_MIN_VERSION} REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(ECMInstallIcons)
include(ECMSetupVersion)
include(FeatureSummary)

# ecm >= 5.31 disables alternative operators, but we use them.
string(REPLACE ""-fno-operator-names"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")

find_package(Qt5 ${QT_MIN_VERSION} REQUIRED
    COMPONENTS
    Core
    Gui
    Widgets)

find_package(KF5 ${KF5_MIN_VERSION} REQUIRED
    COMPONENTS
    Config
    Crash
    DocTools
    I18n
    WidgetsAddons
    XmlGui)

ecm_setup_version(${PROJECT_VERSION}
    VARIABLE_PREFIX KRONOMETER
    VERSION_HEADER version.h)

add_definitions(
    -DQT_NO_CAST_FROM_ASCII
    -DQT_NO_CAST_TO_ASCII
    -DQT_USE_QSTRINGBUILDER)

add_subdirectory(desktop)
add_subdirectory(doc)
add_subdirectory(src)
add_subdirectory(icons)
add_subdirectory(autotests)

feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1,3.1
2038,eudaq,eudaq,False,False,False,False,False,38,C++,2020-04-14 14:21:25+00:00,2013-11-05 15:19:46+00:00,15,3621,"project(EUDAQ)
set(${PROJECT_NAME}_VERSION_MAJOR 2 )
set(${PROJECT_NAME}_VERSION_MINOR 4 )
set(${PROJECT_NAME}_VERSION_PATCH 0 )

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
include(CMakeDependentOption)


if(COMMAND CMAKE_POLICY)
  if(${CMAKE_VERSION} VERSION_GREATER ""3.13"")
    cmake_policy(SET CMP0079 NEW) # Allow lookup of linking libraries in other directories
  endif()
endif(COMMAND CMAKE_POLICY)

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(CMakeCompatibility)
include(Platform)

set(CMAKE_SHARED_LIBRARY_PREFIX libeudaq_)
set(CMAKE_SHARED_MODULE_PREFIX  libeudaq_)
set(EUDAQ_CORE_LIBRARY core)
# set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)

include_directories(main/lib/core/include)
include_directories(extern/include)

set(EUDAQ_LIB_VERSION ${EUDAQ_VERSION_MAJOR}.${EUDAQ_VERSION_MINOR}.${EUDAQ_VERSION_PATCH})
set(EUDAQ_LIB_VERSION_BASE ${EUDAQ_VERSION_MAJOR}.${EUDAQ_VERSION_MINOR}.${EUDAQ_VERSION_PATCH})
find_package(Git QUIET)
if(GIT_FOUND AND (IS_DIRECTORY ${PROJECT_SOURCE_DIR}/.git))
  execute_process(COMMAND ${GIT_EXECUTABLE} --work-tree=${PROJECT_SOURCE_DIR} describe --tags HEAD OUTPUT_VARIABLE EUDAQ_GIT_VERSION ERROR_VARIABLE EUDAQ_GIT_ERROR_DESCRIBE)
  execute_process(COMMAND ${GIT_EXECUTABLE} --work-tree=${PROJECT_SOURCE_DIR} status --porcelain ${PROJECT_SOURCE_DIR}/main OUTPUT_VARIABLE EUDAQ_GIT_MAIN_STATUS ERROR_VARIABLE EUDAQ_GIT_ERROR_STATUS)
  if(EUDAQ_GIT_ERROR_DESCRIBE OR EUDAQ_GIT_ERROR_STATUS)
    message(WARNING ""Could not determine EUDAQ version from git -- git execution resulted in error: ${EUDAQ_GIT_ERROR_DESCRIBE} : ${EUDAQ_GIT_ERROR_STATUS}"")
  else()
    string(REGEX REPLACE ""([v0-9.]+[-a-zA-Z0-9]+)-([0-9]+)-([A-Za-z0-9]+)"" ""\\1+\\2~\\3"" EUDAQ_GIT_LIB_VERSION ${EUDAQ_GIT_VERSION})
    string(REGEX REPLACE ""\n"" """" EUDAQ_GIT_VERSION ${EUDAQ_GIT_VERSION}) # remove potential line breaks
    string(REGEX REPLACE ""v([v0-9.]+)(.*)"" ""\\1"" EUDAQ_GIT_VERSION_BASE ${EUDAQ_GIT_VERSION})
    if(""${EUDAQ_GIT_VERSION_BASE}"" VERSION_LESS ""${EUDAQ_LIB_VERSION_BASE}"")
      message(WARNING ""Your do not seem to have fetched the latest tags in your git repository -- please consider running 'git fetch upstream'"")
      message(""EUDAQ_GIT_VERSION_BASE=${EUDAQ_GIT_VERSION_BASE} EUDAQ_LIB_VERSION_BASE=${EUDAQ_LIB_VERSION_BASE}"")
    endif()
    if(NOT (EUDAQ_GIT_MAIN_STATUS STREQUAL """"))
      message(""the directory ${PROJECT_SOURCE_DIR}/main is dirty (uncommitted changes present). ${EUDAQ_GIT_MAIN_STATUS}"")
    endif()
    set(EUDAQ_LIB_VERSION ${EUDAQ_GIT_VERSION})
  endif()
endif()
message(STATUS ""Determined EUDAQ version ${EUDAQ_LIB_VERSION}"")

# Define the project with the simple version
string(REGEX MATCH ""([0-9.]+)+"" SIMPLE_VERSION ""${EUDAQ_LIB_VERSION}"")
project(eudaq VERSION ${SIMPLE_VERSION} LANGUAGES CXX)

configure_file(""${PROJECT_SOURCE_DIR}/cmake/Config.cmake.hh"" ""${CMAKE_CURRENT_BINARY_DIR}/include/eudaq/Config.hh"" @ONLY)
include_directories(""${CMAKE_CURRENT_BINARY_DIR}/include"")
file(GLOB INC_FILES ""${CMAKE_CURRENT_BINARY_DIR}/include/eudaq/*.hh"")
install(FILES ${INC_FILES} DESTINATION include/eudaq)

# set the path to which we will install later: default project home, can be changed using
set(EUDAQ_INSTALL_PREFIX ""${PROJECT_SOURCE_DIR}"" CACHE PATH ""Prefix prepended to install directories"")
set(CMAKE_INSTALL_PREFIX ""${EUDAQ_INSTALL_PREFIX}"" CACHE INTERNAL ""Prefix prepended to install directories"" FORCE)
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX}/extern)

# Set the correct build type and allow command line options:
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'RelWithDebInfo' as none was specified."")
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build."" FORCE)
endif()

# find necessary threading libraries (using C++11 threading)
find_package(Threads REQUIRED)
set(EUDAQ_THREADS_LIB ${CMAKE_THREAD_LIBS_INIT})

# see http://www.cmake.org/Wiki/CMake_RPATH_handling
if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
  set(EUDAQ_INSTALL_RPATH ""@loader_path/../lib;@loader_path/../extern/lib"")
else()
  set(EUDAQ_INSTALL_RPATH ""\$ORIGIN/../lib:\$ORIGIN/../extern/lib"")
endif()
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH ${EUDAQ_INSTALL_RPATH})
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

add_subdirectory(main)
add_subdirectory(extra)
add_subdirectory(doc)
add_subdirectory(gui)
add_subdirectory(monitors)
add_subdirectory(user)

# Uninstall Target #
if(NOT TARGET uninstall)
  configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)
  add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif()


# Python-based regression tests (http://www.cmake.org/Wiki/CMake/Testing_With_CTest).
# enable_testing()
# include(CTest)
# find_package(PythonInterp)
# if(PYTHONINTERP_FOUND AND BUILD_python)
#   execute_process(COMMAND ${PYTHON_EXECUTABLE} -c ""import numpy"" OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE NUMPYRC)
#   if(NUMPYRC EQUAL 1)
#     message(WARNING ""Python interpreter found but 'numpy' package not available -- cannot use either Python wrapper nor regression tests."")
#   else()
#     message(STATUS ""Found Python with installed numpy package -- making regression tests available through CTest"")
#     include(etc/tests/testing.cmake)
#   endif()
# endif()

include(PrintSystemInformation)

# eudaqConfig.cmake

export(PACKAGE eudaq)


if(DEFINED EUDAQ_CORE_LIBRARY)
  list(APPEND CONF_EUDAQ_LIBRARIES eudaq_${EUDAQ_CORE_LIBRARY})
endif()

if(DEFINED EUDAQ_LCIO_LIBRARY)
  list(APPEND CONF_EUDAQ_LIBRARIES eudaq_${EUDAQ_LCIO_LIBRARY})
endif()

if(DEFINED EUDAQ_ROOT_MONITOR_LIBRARY)
  list(APPEND CONF_EUDAQ_LIBRARIES eudaq_${EUDAQ_ROOT_MONITOR_LIBRARY})
endif()

if(DEFINED EUDAQ_TTREE_LIBRARY)
  list(APPEND CONF_EUDAQ_LIBRARIES eudaq_${EUDAQ_TTREE_LIBRARY})
endif()

set(CONF_INCLUDE_DIRS ""\${EUDAQ_INSTALL_DIR}/include"")
set(EUDAQ_INCLUDE_DIRS ""include"")
set(EUDAQ_LIBRARIES_DIRS ""lib"")
set(EUDAQ_CMAKE_DIR ""cmake"")

include(CMakePackageConfigHelpers)
configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/eudaqConfig.cmake.in
                              ${CMAKE_CURRENT_BINARY_DIR}/eudaqConfig.cmake
                              INSTALL_DESTINATION ${EUDAQ_CMAKE_DIR}
                              PATH_VARS EUDAQ_INCLUDE_DIRS EUDAQ_LIBRARIES_DIRS)

write_basic_package_version_file(eudaqConfigVersion.cmake
                                 VERSION ${PROJECT_VERSION}
                                 COMPATIBILITY AnyNewerVersion)

# Install the export set for use with the install-tree
install(EXPORT eudaqTargets
  NAMESPACE eudaq::
  DESTINATION ${PROJECT_BINARY_DIR}
  COMPONENT dev)

file(GLOB TARGET_FILES ""${PROJECT_BINARY_DIR}/eudaqTarget*.cmake"")

install(FILES
  ""${PROJECT_BINARY_DIR}/eudaqConfig.cmake""
  ""${PROJECT_BINARY_DIR}/eudaqConfigVersion.cmake""
  ${TARGET_FILES}
  DESTINATION ${EUDAQ_CMAKE_DIR}
  COMPONENT dev)

message(STATUS ""Check your configuration/flags with: cmake -L"")
",3.1,3.1
2130,mongodb,mongo-c-driver,False,False,False,False,False,287,C,2020-05-17 13:39:30+00:00,2013-04-28 19:34:36+00:00,605,6324,"cmake_minimum_required (VERSION 3.1)

# Used in MaintainerFlags.cmake to silence errors while testing configs.
set (MESSAGES_ENABLED 1)

function (message)
   list (GET ARGV 0 MessageType)
   if (MESSAGES_ENABLED)
      list (REMOVE_AT ARGV 0)
      _message (${MessageType} ""${ARGV}"")
   endif ()
endfunction ()

set (ENABLE_SSL AUTO CACHE STRING
   ""Enable TLS connections and SCRAM-SHA-1 authentication. Options are
   \""DARWIN\"" to use Apple's Secure Transport, \""WINDOWS\"" to use Windows
   Secure Channel, \""OPENSSL\"", \""LIBRESSL\"", \""AUTO\"",\ or \""OFF\"". These options are
   case-sensitive. The default is \""AUTO\"". Note\ that SCRAM-SHA-1 is
   required for authenticating to MongoDB 3.0 and later."")

set_property(CACHE ENABLE_SSL PROPERTY STRINGS ""DARWIN;WINDOWS;OPENSSL;LIBRESSL;AUTO;OFF"")

set (ENABLE_SASL AUTO CACHE STRING
   ""Enable SASL authentication (Kerberos). Options are \""CYRUS\"" to use Cyrus
   SASL, \""SSPI\"" to use Windows Native SSPI, \""AUTO\"",\ or \""OFF\"". These options are case-sensitive."")

set_property(CACHE ENABLE_SASL PROPERTY STRINGS ""CYRUS|SSPI|AUTO|OFF"")

set (ENABLE_STATIC AUTO CACHE STRING ""Build and install static libbson/libmongoc. Set to ON/AUTO/OFF/BUILD_ONLY/DONT_INSTALL, default AUTO."")
option (ENABLE_TESTS ""Build MongoDB C Driver tests."" ON)
option (ENABLE_EXAMPLES ""Build MongoDB C Driver examples."" ON)
set (ENABLE_SRV AUTO CACHE STRING ""Support mongodb+srv URIs. Set to ON/AUTO/OFF, default AUTO."")
option (ENABLE_MAINTAINER_FLAGS ""Use strict compiler checks"" OFF)
option (ENABLE_AUTOMATIC_INIT_AND_CLEANUP ""Enable automatic init and cleanup (GCC only)"" ON)
option (ENABLE_CRYPTO_SYSTEM_PROFILE ""Use system crypto profile (OpenSSL only)"" OFF)
option (ENABLE_TRACING ""Turn on verbose debug output"" OFF)
option (ENABLE_COVERAGE ""Turn on compile options for lcov"" OFF)
set (ENABLE_SHM_COUNTERS AUTO CACHE STRING ""Enable memory performance counters that use shared memory on Linux. Set to ON/AUTO/OFF, default AUTO."")
set (ENABLE_MONGOC ON CACHE STRING ""Whether to build libmongoc. Set to ON/OFF, default ON."")
set (ENABLE_BSON AUTO CACHE STRING ""Whether to build libbson. Set to ON/AUTO/SYSTEM, default AUTO."")
set (ENABLE_SNAPPY AUTO CACHE STRING ""Enable snappy support. Set to ON/AUTO/OFF, default AUTO."")
set (ENABLE_ZLIB AUTO CACHE STRING ""Enable zlib support"")
set (ENABLE_ZSTD AUTO CACHE STRING ""Enable zstd support. Set to ON/AUTO/OFF, default AUTO."")
option (ENABLE_MAN_PAGES ""Build MongoDB C Driver manual pages."" OFF)
option (ENABLE_HTML_DOCS ""Build MongoDB C Driver HTML documentation."" OFF)
option (ENABLE_EXTRA_ALIGNMENT
   ""Turn on extra alignment of libbson types. Set to ON/OFF, default ON.\
 Required for the 1.0 ABI but better disabled.""
   ON
)
option (ENABLE_RDTSCP
   ""Fast performance counters on Intel using the RDTSCP instruction""
   OFF
)
option (ENABLE_APPLE_FRAMEWORK ""Build libraries as frameworks on darwin platforms"" OFF) 
set (ENABLE_ICU AUTO CACHE STRING ""Enable ICU support, necessary to use non-ASCII usernames or passwords, default AUTO."")
option (ENABLE_UNINSTALL ""Enable creation of uninstall script and associated uninstall build target."" ON)
set (ENABLE_CLIENT_SIDE_ENCRYPTION AUTO CACHE STRING ""Enable Client-Side Field Level Encryption support. Requires libmongocrypt. Set to ON/AUTO/OFF, default AUTO."")
set (ENABLE_MONGODB_AWS_AUTH AUTO CACHE STRING ""Enable support for MONGODB-AWS authentication mechanism. Set to ON/AUTO/OFF, default AUTO. (also requires ENABLE_SSL not set to OFF)"")
option (ENABLE_PIC 
   ""Enables building of position independent code for static library components.""
   ON
)

project (mongo-c-driver C)

if (NOT CMAKE_BUILD_TYPE)
   set (CMAKE_BUILD_TYPE ""RelWithDebInfo"")
   message (
      STATUS ""No CMAKE_BUILD_TYPE selected, defaulting to ${CMAKE_BUILD_TYPE}""
   )
endif ()

set (CMAKE_MODULE_PATH
   ${CMAKE_MODULE_PATH}
   ${PROJECT_SOURCE_DIR}/build/cmake
   ${PROJECT_SOURCE_DIR}/build/cmake/make_dist
)

include (InstallRequiredSystemLibraries)
include (GNUInstallDirs)

set (BUILD_VERSION ""0.0.0"" CACHE STRING ""Library version (for both libbson and libmongoc)"")

include (ParseVersion)

# Set MONGOC_MAJOR_VERSION, MONGOC_MINOR_VERSION, etc.
if (BUILD_VERSION STREQUAL ""0.0.0"")
   if (EXISTS ${PROJECT_SOURCE_DIR}/VERSION_CURRENT)
      file (STRINGS ${PROJECT_SOURCE_DIR}/VERSION_CURRENT BUILD_VERSION)
      message (""file VERSION_CURRENT contained BUILD_VERSION ${BUILD_VERSION}"")
   else ()
      find_package (PythonInterp)
      if (PYTHONINTERP_FOUND)
         execute_process (
            COMMAND ${PYTHON_EXECUTABLE} build/calc_release_version.py
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            OUTPUT_VARIABLE CALC_RELEASE_VERSION
            RESULT_VARIABLE CALC_RELEASE_VERSION_RESULT
            OUTPUT_STRIP_TRAILING_WHITESPACE
         )
         if (NOT CALC_RELEASE_VERSION_RESULT STREQUAL 0)
            # If python failed above, stderr would tell the user about it
            message (FATAL_ERROR
               ""BUILD_VERSION not specified and could not be calculated\
 (script invocation failed); specify in CMake command, -DBUILD_VERSION=<version>""
            )
         else ()
            set (BUILD_VERSION ${CALC_RELEASE_VERSION})
            message (""calculated BUILD_VERSION ${BUILD_VERSION}"")
         endif ()
      else ()
         message (FATAL_ERROR
            ""BUILD_VERSION not specified and could not be calculated\
 (Python was not found on the system); specify in CMake command, -DBUILD_VERSION=<version>""
         )
      endif ()
      message (""storing BUILD_VERSION ${BUILD_VERSION} in file VERSION_CURRENT for later use"")
      file (WRITE ${PROJECT_SOURCE_DIR}/VERSION_CURRENT ${BUILD_VERSION})
   endif ()
else ()
   message (""storing BUILD_VERSION ${BUILD_VERSION} in file VERSION_CURRENT for later use"")
   file (WRITE ${PROJECT_SOURCE_DIR}/VERSION_CURRENT ${BUILD_VERSION})
endif ()

include (LoadVersion)
LoadVersion (${PROJECT_SOURCE_DIR}/VERSION_CURRENT MONGOC)

include (MaintainerFlags)

if ( (ENABLE_BUILD_DEPENDECIES STREQUAL OFF) AND (NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR) )
   set (ENABLE_BUILD_DEPENDECIES ON)
endif ()

if (ENABLE_EXTRA_ALIGNMENT STREQUAL ON)
   set (BSON_EXTRA_ALIGN 1)
else ()
   set (BSON_EXTRA_ALIGN 0)
endif ()

if (ENABLE_RDTSCP)
   set (MONGOC_ENABLE_RDTSCP 1)
else ()
   set (MONGOC_ENABLE_RDTSCP 0)
endif ()

if (NOT ENABLE_MONGOC MATCHES ""ON|OFF"")
   message (FATAL_ERROR ""ENABLE_MONGOC option must be ON or OFF"")
endif ()

if (NOT ENABLE_BSON MATCHES ""ON|AUTO|SYSTEM"")
   message (FATAL_ERROR ""ENABLE_BSON option must be ON, AUTO, or SYSTEM"")
endif ()

if (NOT ENABLE_STATIC MATCHES ""^(ON|OFF|AUTO|BUILD_ONLY|DONT_INSTALL)$"")
   message (FATAL_ERROR
      ""ENABLE_STATIC option must be ON, OFF, AUTO, BUILD_ONLY, or DONT_INSTALL""
   )
endif ()

set (MONGOC_ENABLE_STATIC_BUILD 0)
set (MONGOC_ENABLE_STATIC_INSTALL 0)

if (ENABLE_STATIC MATCHES ""^(ON|AUTO)$"")
   message (STATUS ""Build and install static libraries"")
   set (MONGOC_ENABLE_STATIC_BUILD 1)
   set (MONGOC_ENABLE_STATIC_INSTALL 1)
elseif (ENABLE_STATIC MATCHES ""^(BUILD_ONLY|DONT_INSTALL)$"")
   message (STATUS ""Build only static libraries"")
   set (MONGOC_ENABLE_STATIC_BUILD 1)
else ()
   message (STATUS ""Don't build static libraries"")
endif()

if (ENABLE_BSON STREQUAL SYSTEM)
   # The input variable BSON_ROOT_DIR is respected for backwards compatibility,
   # but you should use the standard CMAKE_PREFIX_PATH instead.
   message (STATUS ""Searching for libbson CMake packages"")
   find_package (bson-1.0
      ""${MONGOC_MAJOR_VERSION}.${MONGOC_MINOR_VERSION}.${MONGOC_MICRO_VERSION}""
      HINTS
      ${BSON_ROOT_DIR})

   if (NOT bson-1.0_FOUND)
      message (FATAL_ERROR ""System libbson not found"")
   endif ()

   message (""--   libbson found version \""${bson-1.0_VERSION}\"""")
   message (""--   disabling test-libmongoc since using system libbson"")
   SET (ENABLE_TESTS OFF)

   set (USING_SYSTEM_BSON TRUE)
   if (NOT TARGET mongo::bson_shared)
           message (FATAL_ERROR ""System libbson built without shared library target"")
   endif ()
   set (BSON_LIBRARIES mongo::bson_shared)
   if (NOT TARGET mongo::bson_static)
           message (FATAL_ERROR ""System libbson built without static library target"")
   endif ()
   set (BSON_STATIC_LIBRARIES mongo::bson_static)
endif ()

unset (dist_generated CACHE)
unset (dist_generated_depends CACHE)

set (BUILD_SOURCE_DIR ${CMAKE_BINARY_DIR})

include (MakeDistFiles)

# Ensure the default behavior: don't ignore RPATH settings.
set (CMAKE_SKIP_BUILD_RPATH OFF)

# Ensure the default behavior: don't use the final install destination as the
# temporary RPATH for executables (ensure we can run tests and programs from
# the build directory).
set (CMAKE_BUILD_WITH_INSTALL_RPATH OFF)

# Include any custom library paths in the final RPATH.
set (CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)

# Install libs with names like @rpath/libmongoc-1.0.0.dylib, not bare names.
set (CMAKE_MACOSX_RPATH ON)

# https://cmake.org/cmake/help/v3.11/policy/CMP0042.html
# Enable a CMake 3.0+ policy that sets CMAKE_MACOSX_RPATH by default, and
# silence a CMake 3.11 warning that the old behavior is deprecated.
cmake_policy (SET CMP0042 NEW)

if (NOT USING_SYSTEM_BSON)
   message (""  -- Using bundled libbson"")

   add_subdirectory (src/libbson)
   # Defined in src/libbson/CMakeLists.txt
   set (BSON_STATIC_LIBRARIES bson_static)
   set (BSON_LIBRARIES bson_shared)
   set (BSON_STATIC_INCLUDE_DIRS ""${PROJECT_SOURCE_DIR}/src/libbson/src"" ""${PROJECT_BINARY_DIR}/src/libbson/src"")
   set (BSON_INCLUDE_DIRS ""${PROJECT_SOURCE_DIR}/src/libbson/src"" ""${PROJECT_BINARY_DIR}/src/libbson/src"")
   set (BSON_STATIC_PUBLIC_DEFINITIONS ""BSON_STATIC"")
endif ()

if (MSVC)
   add_definitions (-D_CRT_SECURE_NO_WARNINGS)
endif ()

add_definitions (-D_GNU_SOURCE)
add_definitions (-D_BSD_SOURCE)
add_definitions (-D_DEFAULT_SOURCE)

if (ENABLE_MONGOC)

   if (ENABLE_TESTS AND NOT MONGOC_ENABLE_STATIC_BUILD)
      message (FATAL_ERROR ""ENABLE_TESTS requires ENABLE_STATIC or ENABLE_STATIC_BUILD"")
   endif ()

   if (NOT ENABLE_SSL MATCHES ""DARWIN|WINDOWS|OPENSSL|LIBRESSL|AUTO|OFF"")
      message (FATAL_ERROR
               ""ENABLE_SSL option must be DARWIN, WINDOWS, OPENSSL, LIBRESSL, AUTO, or OFF"")
   endif ()

   set (SOURCE_DIR ""${PROJECT_SOURCE_DIR}/"")

   set (ZLIB_SOURCES
      ${SOURCE_DIR}/src/zlib-1.2.11/adler32.c
      ${SOURCE_DIR}/src/zlib-1.2.11/crc32.c
      ${SOURCE_DIR}/src/zlib-1.2.11/deflate.c
      ${SOURCE_DIR}/src/zlib-1.2.11/infback.c
      ${SOURCE_DIR}/src/zlib-1.2.11/inffast.c
      ${SOURCE_DIR}/src/zlib-1.2.11/inflate.c
      ${SOURCE_DIR}/src/zlib-1.2.11/inftrees.c
      ${SOURCE_DIR}/src/zlib-1.2.11/trees.c
      ${SOURCE_DIR}/src/zlib-1.2.11/zutil.c
      ${SOURCE_DIR}/src/zlib-1.2.11/compress.c
      ${SOURCE_DIR}/src/zlib-1.2.11/uncompr.c
      ${SOURCE_DIR}/src/zlib-1.2.11/gzclose.c
      ${SOURCE_DIR}/src/zlib-1.2.11/gzlib.c
      ${SOURCE_DIR}/src/zlib-1.2.11/gzread.c
      ${SOURCE_DIR}/src/zlib-1.2.11/gzwrite.c
   )

   set (MONGOC_ENABLE_ICU 0)

   set (CPACK_RESOURCE_FILE_LICENSE ""${SOURCE_DIR}/COPYING"")

   include (CPack)

   # Ensure the default behavior: don't ignore RPATH settings.
   set (CMAKE_SKIP_BUILD_RPATH OFF)

   if (APPLE)
      # Until CDRIVER-520.
      add_definitions (-Wno-deprecated-declarations)
   endif ()

   set (KMS_MSG_SOURCES
      ${SOURCE_DIR}/src/kms-message/src/hexlify.c
      ${SOURCE_DIR}/src/kms-message/src/kms_b64.c
      ${SOURCE_DIR}/src/kms-message/src/kms_caller_identity_request.c
      ${SOURCE_DIR}/src/kms-message/src/kms_crypto_apple.c
      ${SOURCE_DIR}/src/kms-message/src/kms_crypto_libcrypto.c
      ${SOURCE_DIR}/src/kms-message/src/kms_crypto_none.c
      ${SOURCE_DIR}/src/kms-message/src/kms_crypto_windows.c
      ${SOURCE_DIR}/src/kms-message/src/kms_decrypt_request.c
      ${SOURCE_DIR}/src/kms-message/src/kms_encrypt_request.c
      ${SOURCE_DIR}/src/kms-message/src/kms_kv_list.c
      ${SOURCE_DIR}/src/kms-message/src/kms_message.c
      ${SOURCE_DIR}/src/kms-message/src/kms_port.c
      ${SOURCE_DIR}/src/kms-message/src/kms_request.c
      ${SOURCE_DIR}/src/kms-message/src/kms_request_opt.c
      ${SOURCE_DIR}/src/kms-message/src/kms_request_str.c
      ${SOURCE_DIR}/src/kms-message/src/kms_response.c
      ${SOURCE_DIR}/src/kms-message/src/kms_response_parser.c
      ${SOURCE_DIR}/src/kms-message/src/sort.c
   )

   if (NOT ENABLE_MONGODB_AWS_AUTH MATCHES ""ON|OFF|AUTO"")
      message (FATAL_ERROR ""ENABLE_MONGODB_AWS_AUTH option must be ON, AUTO, or OFF"")
   endif ()
   set (MONGOC_ENABLE_MONGODB_AWS_AUTH 0)
   if (ENABLE_MONGODB_AWS_AUTH STREQUAL ON)
      if (MSVC AND MSVC_VERSION LESS 1900)
         message (FATAL_ERROR ""Use Visual Studio 2015 or higher for ENABLE_MONGODB_AWS_AUTH"")
      endif ()
      if (ENABLE_SSL STREQUAL OFF)
         message (FATAL_ERROR
            ""Option ENABLE_MONGODB_AWS_AUTH requires ENABLE_SSL not set to OFF""
         )
      endif ()
      set (MONGOC_ENABLE_MONGODB_AWS_AUTH 1)
   elseif (ENABLE_MONGODB_AWS_AUTH STREQUAL AUTO)
      if (MSVC AND MSVC_VERSION LESS 1900)
         message (WARNING ""MS Visual Studio too old for ENABLE_MONGODB_AWS_AUTH"")
      elseif (ENABLE_SSL STREQUAL OFF)
              message (WARNING
            ""Option ENABLE_MONGODB_AWS_AUTH requires ENABLE_SSL not set to OFF""
         )
      else ()
         set (MONGOC_ENABLE_MONGODB_AWS_AUTH 1)
      endif ()
   endif ()

   add_subdirectory (src/libmongoc)

   if (MONGOC_ENABLE_MONGODB_AWS_AUTH)
      message (STATUS ""Building with MONGODB-AWS auth support"")
   endif ()

   if (ENABLE_MAN_PAGES STREQUAL ON OR ENABLE_HTML_DOCS STREQUAL ON)
      find_package (Sphinx REQUIRED)
      add_custom_target (doc
         ALL
         DEPENDS
            $<$<STREQUAL:""${ENABLE_BSON}"",""ON"">:bson-doc>
            $<$<STREQUAL:""${ENABLE_MONGOC}"",""ON"">:mongoc-doc>
      )
   endif ()

   # Implement 'dist' and 'distcheck' targets
   #
   # CMake does not implement anything like 'dist' and 'distcheck' from autotools.
   # This implementation is based on the one in GnuCash.

   add_subdirectory (build)
   # sub-directory 'doc' was already included above
   add_subdirectory (orchestration_configs)
   add_subdirectory (src)
   # 'src/libbson' was already included, so 'src' will not include it directly
   # 'src/kms-message' was already included if appropriate
   # 'src/libmongoc' was already included, so 'src' will not include it directly

   set (PACKAGE_PREFIX ""mongo-c-driver-${MONGOC_DIST_VERSION}"")
   set (DIST_FILE ""${PACKAGE_PREFIX}.tar.gz"")

   set (top_DIST_local
      CMakeLists.txt
      CONTRIBUTING.md
      COPYING
      NEWS
      README.rst
      THIRD_PARTY_NOTICES
      VERSION_CURRENT
      # This sub-directory is added later, so manually include here
      generate_uninstall/CMakeLists.txt
   )

   set_local_dist (top_DIST ${top_DIST_local})

   set (ALL_DIST
      ${top_DIST}
      ${build_DIST}
      ${orchestration_configs_DIST}
      ${src_DIST}
      ${src_libbson_DIST}
      ${src_libmongoc_DIST}
   )

   # Write a dist manifest
   string (REPLACE "";"" ""\n"" ALL_DIST_LINES ""${ALL_DIST}"")
   file (WRITE ${CMAKE_BINARY_DIR}/dist_manifest.txt ${ALL_DIST_LINES})

   # This is the command that produces the distribution tarball
   add_custom_command (OUTPUT ${DIST_FILE}
      COMMAND ${CMAKE_COMMAND}
         -D CMAKE_MODULE_PATH=${PROJECT_SOURCE_DIR}/build/cmake/make_dist
         -D PACKAGE_PREFIX=${PACKAGE_PREFIX}
         -D MONGOC_SOURCE_DIR=${CMAKE_SOURCE_DIR}
         -D BUILD_SOURCE_DIR=${BUILD_SOURCE_DIR}
         -D SHELL=${SHELL}
         ""-Ddist_generated=\""${dist_generated}\""""
         -P ${PROJECT_SOURCE_DIR}/build/cmake/make_dist/MakeDist.cmake

      DEPENDS
         ${ALL_DIST} ${dist_generated_depends}
   )

   if (ENABLE_BSON MATCHES ""ON|AUTO"" AND ENABLE_MAN_PAGES STREQUAL ON AND ENABLE_HTML_DOCS STREQUAL ON)
      # Since our 'dist' implementation does not add top-level targets for every
      # file to be included, we declare a dependency on the 'mongo-doc' target so
      # that documentation is built before the distribution tarball is generated.
      add_custom_target (dist DEPENDS doc ${DIST_FILE})

      add_custom_target (distcheck DEPENDS dist
         COMMAND ${CMAKE_COMMAND}
            -D CMAKE_MODULE_PATH=${PROJECT_SOURCE_DIR}/build/cmake/make_dist
            -D CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
            -D PACKAGE_PREFIX=${PACKAGE_PREFIX}
            -D CMAKE_C_FLAGS=${CMAKE_C_FLAGS}
            -D CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
            -P ${PROJECT_SOURCE_DIR}/build/cmake/make_dist/MakeDistCheck.cmake
      )
   else ()
      string (CONCAT DISTERRMSG
         ""The dist and distcheck targets are disabled. Set ENABLE_BSON=ON, ""
         ""ENABLE_MAN_PAGES=ON, ENABLE_HTML_DOCS=ON, and generate VERSION_CURRENT ""
         ""to enable.""
      )

      add_custom_target (dist
         COMMAND ${CMAKE_COMMAND} -E echo ""${DISTERRMSG}""
      )

      add_custom_target (distcheck
         COMMAND ${CMAKE_COMMAND} -E echo ""${DISTERRMSG}""
      )
   endif ()

endif ()

install (FILES COPYING NEWS README.rst THIRD_PARTY_NOTICES
   DESTINATION ${CMAKE_INSTALL_DATADIR}/mongo-c-driver
)

if (ENABLE_UNINSTALL)
   if (WIN32)
      if (ENABLE_MONGOC)
         set (UNINSTALL_PROG ""uninstall.cmd"")
      else ()
         set (UNINSTALL_PROG ""uninstall-bson.cmd"")
      endif ()
   else ()
      if (ENABLE_MONGOC)
         set (UNINSTALL_PROG ""uninstall.sh"")
      else ()
         set (UNINSTALL_PROG ""uninstall-bson.sh"")
      endif ()
   endif ()
   set (UNINSTALL_PROG_DIR ""${CMAKE_INSTALL_DATADIR}/mongo-c-driver"")

   # Create uninstall program and associated uninstall target
   #
   # This needs to be last (after all other add_subdirectory calls) to ensure that
   # the generated uninstall program is complete and correct
   add_subdirectory (generate_uninstall)
endif ()
",3.1,3.1
2139,GuLinux,PlanetaryImager,False,False,False,False,False,3,C++,2020-02-14 13:09:20+00:00,2015-08-03 06:42:11+00:00,32,981,"cmake_minimum_required(VERSION 3.1)
enable_testing()
project(PlanetaryImager)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(MAJOR_VERSION 0)
set(MINOR_VERSION 7)
set(PATCH_VERSION 70)
set(FULL_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${PACKAGE_VERSION_SUFFIX})

set(CMAKE_INCLUDE_CURRENT_DIR ON)

include(cmake/find_dependencies.cmake)
include(cmake/options.cmake)
include(cmake/utils.cmake)
include(cmake/functions.cmake)

external_project_download(cmake/GuLinux-Commons.cmake.in GuLinux-Commons)

configure_file(${CMAKE_SOURCE_DIR}/scripts/version.sh.in ${CMAKE_BINARY_DIR}/scripts/version.sh)

if(NOT OSX_BUNDLE)
    install(FILES README.md Changelog.md DESTINATION share/doc/PlanetaryImager)
endif()



add_subdirectory(${CMAKE_BINARY_DIR}/GuLinux-Commons/Qt ${CMAKE_BINARY_DIR}/GuLinux-Commons-build/Qt)
add_subdirectory(${CMAKE_BINARY_DIR}/GuLinux-Commons/c++ ${CMAKE_BINARY_DIR}/GuLinux-Commons-build/c++)
include_directories(
    ${CMAKE_BINARY_DIR}/GuLinux-Commons/Qt
    ${CMAKE_BINARY_DIR}/GuLinux-Commons/c++
    ${CMAKE_BINARY_DIR}/GuLinux-Commons
)

add_subdirectory(src)
if(ENABLE_PLANETARYIMAGER_TESTING)
  add_subdirectory(tests)
endif()

add_subdirectory(files)
add_subdirectory(support)

include(packaging.cmake)


message(""Done configuring PlanetaryImager-${FULL_VERSION}-${PlanetaryImager_ARCH} for ${CMAKE_SYSTEM_NAME}"")
",3.1,3.1
2207,KitwareMedical,MorphologicalContourInterpolation,False,False,False,False,False,20,C++,2020-02-20 17:47:57+00:00,2015-04-24 18:24:27+00:00,10,244,"cmake_minimum_required(VERSION 3.10.2)
project(MorphologicalContourInterpolation)

if(NOT ITK_SOURCE_DIR)
  find_package(ITK 4.9 REQUIRED)
  list(APPEND CMAKE_MODULE_PATH ${ITK_CMAKE_DIR})
  include(ITKModuleExternal)
else()
  itk_module_impl()
endif()

itk_module_examples()
",3.10.2,3.1
2385,DGtal-team,DGtalTools,False,False,False,False,False,22,C++,2020-05-15 19:40:59+00:00,2012-04-07 16:28:49+00:00,35,1600,"#David Coeurjolly <david.coeurjolly@liris.cnrs.fr>
# -----------------------------------------------------------------------------
# Project definition
# -----------------------------------------------------------------------------
PROJECT(DGtalTools)

cmake_minimum_required (VERSION 3.1)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake"")


# -----------------------------------------------------------------------------
# DGtal dependencies
# -----------------------------------------------------------------------------
message(STATUS ""-------------------------------------------------------------------------------"")
message(STATUS ""Checking if DGtal is installed:"")
FIND_PACKAGE(DGtal 1.0 REQUIRED)
INCLUDE_DIRECTORIES(${DGTAL_INCLUDE_DIRS})
LINK_DIRECTORIES(${DGTAL_LIBRARY_DIRS})
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
message(STATUS ""DGtal found."")



 # -----------------------------------------------------------------------------
 # CPP11 
 # -----------------------------------------------------------------------------
 set (CMAKE_CXX_STANDARD 11)
 set (CMAKE_CXX_STANDARD_REQUIRED TRUE)



# -------------------------------------------------------------------------
# This test is for instance used for ITK v3.x. ITK forces a limited
# template depth. We remove this option.
# --------------------------------------------------------------------------
if (CMAKE_CXX_FLAGS MATCHES ""-ftemplate-depth-[0-9]*"")
    message( ""Warning: some package has enabled a limited template depth for the C++ compiler."" )
    message( ""         Disabling option -ftemplate-depth-xx in CMAKE_CXX_FLAGS."" )
    set( CMAKE_CXX_FLAGS_TMP ${CMAKE_CXX_FLAGS} )
    STRING( REGEX REPLACE ""-ftemplate-depth-[0-9]*"" """"
    CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS_TMP}"" )
     message (""         CMAKE_CXX_FLAGS="" ${CMAKE_CXX_FLAGS} )
endif (CMAKE_CXX_FLAGS MATCHES ""-ftemplate-depth-[0-9]*"")




# -----------------------------------------------------------------------------
# Define variables and cmake parameters, and display some information
# -----------------------------------------------------------------------------
SET(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
SET(DGtalTools_VERSION_MAJOR 1)
SET(DGtalTools_VERSION_MINOR 0)
SET(DGtalTools_VERSION_PATCH 0)
SET(DGTALTOOLS_VERSION ""${DGtalTools_VERSION_MAJOR}.${DGtalTools_VERSION_MINOR}.${DGtalTools_VERSION_PATCH}"")
SET(PROJECT_VERSION ""${DGtalTools_VERSION_MAJOR}.${DGtalTools_VERSION_MINOR}.${DGtalTools_VERSION_PATCH}"")
SET(VERSION ${DGtalTools_VERSION_MAJOR}.${DGtalTools_VERSION_MINOR}.${DGtalTools_VERSION_PATCH})

OPTION(Boost_USE_STATIC_LIBS ""Use boost static lib"" ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)
SET(Boost_FOUND FALSE)
FIND_PACKAGE(Boost 1.46.0 REQUIRED COMPONENTS program_options)
if ( Boost_FOUND )
  message(STATUS ""Boost and boost_program_options found."")
  ADD_DEFINITIONS(${BOOST_DEFINITIONS} -DBOOST_ALL_NO_LIB)    
  include_directories( ${Boost_INCLUDE_DIRS} )
  SET(DGtalToolsLibDependencies ${DGtalToolsLibDependencies}
     ${Boost_LIBRAIRIES}
     ${Boost_PROGRAM_OPTIONS_LIBRARY} Boost::program_options)
   SET(DGtalLibInc ${Boost_INCLUDE_DIRS})
   ## Used to avoid ld warnings (to be removed when using CLI11 instead program_options)
   if(APPLE)
      set (CMAKE_CXX_FLAGS ""-fvisibility=hidden"")
   endif(APPLE)
endif( Boost_FOUND )



# -----------------------------------------------------------------------------
# Documentation
# -----------------------------------------------------------------------------
message(STATUS ""-------------------------------------------------------------------------------"")
message(STATUS ""Checking if doxygen/dot is installed:"")
set(INSTALL_DOC_PATH ${CMAKE_INSTALL_PREFIX}/share/DGtalTools CACHE PATH ""Installation directory for DGtal documentation files."")
INCLUDE(doxygen)
INCLUDE(TargetDoxygenDoc OPTIONAL)
message(STATUS ""-------------------------------------------------------------------------------"")

#------Tools subdirectories ------
add_subdirectory(volumetric)
add_subdirectory(generators)
add_subdirectory(estimators)
add_subdirectory(converters)
add_subdirectory(visualisation)
add_subdirectory(geometricTransform)
add_subdirectory(imageProcessing)
",3.1,3.1
2394,BelledonneCommunications,belcard,False,False,False,False,False,10,C++,2020-05-14 16:51:51+00:00,2016-01-26 08:19:31+00:00,1,220,"
############################################################################
# CMakeLists.txt
# Copyright (C) 2010-2019 Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)
project(BELCARD VERSION 4.4.0 LANGUAGES C CXX)

set(BELCARD_SO_VERSION ""1"")

option(ENABLE_SHARED ""Build shared library."" ON)
option(ENABLE_STATIC ""Build static library."" ON)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_TOOLS ""Enable compilation of tools."" YES)
option(ENABLE_UNIT_TESTS ""Enable compilation of unit tests."" YES)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

if(NOT CPACK_GENERATOR AND NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

include(GNUInstallDirs)
include(CheckSymbolExists)
include(CMakePushCheckState)

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

find_package(belr REQUIRED CONFIG)

find_package(bctoolbox 0.0.3 REQUIRED OPTIONAL_COMPONENTS tester)

if(UNIX AND NOT APPLE)
	include(CheckIncludeFiles)
	check_include_files(libudev.h HAVE_LIBUDEV_H)
endif()

include_directories(
	include/
	src/
	${CMAKE_CURRENT_BINARY_DIR}
)
if(MSVC)
	include_directories(${MSVC_INCLUDE_DIR})
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/config.h PROPERTIES GENERATED ON)
add_definitions(""-DHAVE_CONFIG_H"")

set(BELCARD_CPPFLAGS ${BCTOOLBOX_CPPFLAGS} ${BELR_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND BELCARD_CPPFLAGS ""-DBELCARD_STATIC"")
endif()
if(BELCARD_CPPFLAGS)
	list(REMOVE_DUPLICATES BELCARD_CPPFLAGS)
	add_definitions(${BELCARD_CPPFLAGS})
endif()
add_definitions(""-DBELCARD_EXPORTS"")

set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
set(STRICT_OPTIONS_CXX )
set(STRICT_OPTIONS_OBJC )
if(MSVC)
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""/WX"")
	endif()
else()
	list(APPEND STRICT_OPTIONS_CXX ""-std=c++11"")
	list(APPEND STRICT_OPTIONS_CPP ""-Wall"" ""-Wuninitialized"" ""-Wno-error=deprecated-declarations"")
	list(APPEND STRICT_OPTIONS_C ""-Wdeclaration-after-statement"" ""-Wstrict-prototypes"" ""-Wno-error=strict-prototypes"")
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Qunused-arguments"" ""-Wno-array-bounds"")
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-fno-strict-aliasing"")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()

set(EXPORT_TARGETS_NAME ""belcard"")

add_subdirectory(include)
add_subdirectory(src)

if(ENABLE_UNIT_TESTS)
	add_subdirectory(tester)
endif()

if(ENABLE_TOOLS)
	add_subdirectory(tools)
endif()

include(CMakePackageConfigHelpers)
set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/cmake"")
set(INCLUDE_INSTALL_DIR ""include"")

export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Targets.cmake""
)

configure_package_config_file(cmake/BelcardConfig.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Config.cmake""
  	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
	NO_SET_AND_CHECK_MACRO
)
set(ConfigPackageLocation ""share/${EXPORT_TARGETS_NAME}/cmake"")
install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ${EXPORT_TARGETS_NAME}Targets.cmake
	DESTINATION ${ConfigPackageLocation}
)
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Config.cmake""
	DESTINATION ${ConfigPackageLocation}
)

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()
",3.1,3.1
2527,plexinc,plex-media-player,False,False,False,False,False,128,C++,2020-05-12 17:20:33+00:00,2015-10-13 08:36:34+00:00,891,1349,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# use a toolchain file if any for Embedded
if (EXISTS ""${CMAKE_SOURCE_DIR}/toolchain.cmake"")
  set(CMAKE_TOOLCHAIN_FILE ""${CMAKE_SOURCE_DIR}/toolchain.cmake"")
endif()

project(PlexMediaPlayer CXX C)

# we want this to be able to run clang-tidy
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL """" FORCE)

option(OPENELEC ""Make an OpenELEC build"" OFF)
option(LINUX_X11POWER ""Enable non D-Bus screensaver management"" OFF)

if((NOT LINUX_X11POWER) AND (UNIX AND (NOT APPLE)))
  set(LINUX_DBUS ON)
endif()

if(OPENELEC)
  add_definitions(-DKONVERGO_OPENELEC=1)
  Message(STATUS ""Making an OpenELEC build"")
endif(OPENELEC)

if(BUILD_TARGET STREQUAL ""RPI"")
  add_definitions(-DTARGET_RPI=1)
  set(RPI_LIBS bcm_host)
  Message(STATUS ""Build for Raspberry PI target"")
endif(BUILD_TARGET STREQUAL ""RPI"")

option(ENABLE_HELPER ""Enable PMP Helper"" ON)
if (ENABLE_HELPER)
  add_definitions(-DENABLE_HELPER=1)
endif(ENABLE_HELPER)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/CMakeModules/"")
set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME Core)

macro(set_policy _POLICY _VALUE)
  if(POLICY ${_POLICY})
    cmake_policy(SET ${_POLICY} ${_VALUE})
  endif()
endmacro()

set_policy(CMP0020 NEW)
set_policy(CMP0017 NEW)
set_policy(CMP0058 NEW)
set_policy(CMP0026 OLD)

include(utils)
include(CompilerFlags)
include(WebClient)
include(DependencyConfiguration)
include(QtConfiguration)
include(VersionConfiguration)
include(NameConfiguration)
include(PlayerConfiguration)
include(InputConfiguration)
include(FindBreakpad)
include(BreakpadSymbols)
include(ClangTidy)

add_definitions(-DQS_LOG_LINE_NUMBERS -DQS_LOG_SEPARATE_THREAD)

if(APPLE)
  include(AppleConfiguration)
elseif(WIN32)
  include(Win32Configuration)
elseif(UNIX AND (NOT APPLE))
  include(LinuxConfiguration)
endif(APPLE)

if (Qt5_POSITION_INDEPENDENT_CODE)
  SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif(Qt5_POSITION_INDEPENDENT_CODE)

add_subdirectory(external)
add_subdirectory(src)

include(CPackConfiguration)

add_custom_target(install_app_bundle COMMAND ${CMAKE_COMMAND} -P cmake_install.cmake DEPENDS PlexMediaPlayer PMPHelper)
",3.1.0,3.1
2589,egpbos,xtensor-fftw,False,False,False,False,False,14,Jupyter Notebook,2020-01-02 19:45:37+00:00,2017-07-21 12:05:13+00:00,34,236,"#
# xtensor-fftw
# Copyright (c) 2017, Patrick Bos
#
# Distributed under the terms of the BSD 3-Clause License.
#
# The full license is in the file LICENSE, distributed with this software.
#
# Modifications:
# - Copyright 2017 Johan Mabille (rpath fix)
#

cmake_minimum_required(VERSION 3.1.3)  # 3.1.3 for set(CMAKE_CXX_STANDARD 14)

project(xtensor-fftw)

set(XTENSOR_FFTW_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

#--------------------------------------- versioning

file(STRINGS ""${XTENSOR_FFTW_INCLUDE_DIR}/xtensor-fftw/xtensor-fftw_config.hpp"" xtensor-fftw_version_defines
        REGEX ""#define XTENSOR_FFTW_VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${xtensor-fftw_version_defines})
    if(ver MATCHES ""#define XTENSOR_FFTW_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(XTENSOR_FFTW_VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(${PROJECT_NAME}_VERSION
        ${XTENSOR_FFTW_VERSION_MAJOR}.${XTENSOR_FFTW_VERSION_MINOR}.${XTENSOR_FFTW_VERSION_PATCH})
message(STATUS ""Building xtensor-fftw v${${PROJECT_NAME}_VERSION}"")

#--------------------------------------- cmake modules

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/findFFTW/"")

#--------------------------------------- user options
set(FFTW_ROOT """" CACHE STRING ""The FFTW prefix, i.e. the base directory under which FFTW is installed (see README.md)."")
option(COMPILE_WARNINGS ""Activate an list of compiler warnings. Currently for gcc and clang only."" OFF)
OPTION(BUILD_TESTS ""Build xtensor-fftw test suite"" OFF)
OPTION(DOWNLOAD_GTEST ""Build gtest from downloaded sources"" OFF)
OPTION(BUILD_BENCHMARK ""Build xtensor-fftw benchmarks"" OFF)
OPTION(DOWNLOAD_GBENCH ""Build Google Benchmark from downloaded sources"" OFF)
OPTION(BENCHMARK_ENABLE_TESTING ""Build tests for Google Benchmark"" OFF)
OPTION(FIX_RPATH ""Correctly set rpath for the linker"" OFF)
OPTION(DEFAULT_COLUMN_MAJOR ""Set xtensor default layout to column major. This is currently not supported, since FFTW demands row major layout."" OFF)
OPTION(COVERAGE ""Enable coverage compile flags (gcc only!)"" OFF)
OPTION(DISABLE_EXCEPTIONS ""Disable C++ exceptions"" OFF)

if (COVERAGE)
    if(NOT CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" AND NOT CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
        message(FATAL_ERROR ""Coverage can only be used with GNU and Clang compilers!"")
    endif()
endif()

#--------------------------------------- build parameters for all targets
# c++ standard build options
# N.B.: these have to be set before defining targets!
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

# includes

# .. our own
include_directories(${XTENSOR_FFTW_INCLUDE_DIR})

# .. xtensor
set(xtensor_REQUIRED_VERSION 0.20.9)
find_package(xtensor ${xtensor_REQUIRED_VERSION} REQUIRED)
message(STATUS ""Found xtensor: ${xtensor_INCLUDE_DIRS}/xtensor"")
include_directories(${xtensor_INCLUDE_DIRS})

# .. xtl
set(xtl_REQUIRED_VERSION 0.6.9)
find_package(xtl ${xtl_REQUIRED_VERSION} REQUIRED)
message(STATUS ""Found xtl: ${xtl_INCLUDE_DIRS}/xtl"")
include_directories(${xtl_INCLUDE_DIRS})

# .. fftw
if(MSVC)
    # no long double component, since in the Windows conda-forge build it is not available
    # and the ""official"" prebuilt long double library can only be used from MinGW
    find_package(FFTW REQUIRED
            COMPONENTS FLOAT_LIB DOUBLE_LIB)
    add_definitions(-DFFTW_NO_LONGDOUBLE)
else()
    find_package(FFTW REQUIRED
            COMPONENTS FLOAT_LIB DOUBLE_LIB LONGDOUBLE_LIB)
endif(MSVC)
include_directories(${FFTW_INCLUDE_DIRS})

# warnings (gcc and clang)
if (COMPILE_WARNINGS)
    add_compile_options(-Wundef -Wshadow -Wwrite-strings -Wredundant-decls -Woverloaded-virtual -Wcast-qual -Wcast-align -Wpointer-arith -Wconversion -Wold-style-cast -Wall -Wextra)
endif(COMPILE_WARNINGS)

#--------------------------------------- correctly set rpath for linking
if (FIX_RPATH)
    include(GNUInstallDirs)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
    set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
    if(""${isSystemDir}"" STREQUAL ""-1"")
        set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
    endif(""${isSystemDir}"" STREQUAL ""-1"")
endif(FIX_RPATH)

#--------------------------------------- library contents

set(XTENSOR_FFTW_HEADERS
        ${XTENSOR_FFTW_INCLUDE_DIR}/xtensor-fftw/basic.hpp
        ${XTENSOR_FFTW_INCLUDE_DIR}/xtensor-fftw/helper.hpp
        ${XTENSOR_FFTW_INCLUDE_DIR}/xtensor-fftw/xtensor-fftw_config.hpp
)

#--------------------------------------- tests
if(DEFAULT_COLUMN_MAJOR)
    add_definitions(-DDEFAULT_LAYOUT=layout_type::column_major)
endif()

if(DOWNLOAD_GTEST OR GTEST_SRC_DIR)
    set(BUILD_TESTS ON)
endif()

if(BUILD_TESTS)
    add_subdirectory(test)
endif()

if(BUILD_BENCHMARK)
    add_subdirectory(bench)
endif()


#--------------------------------------- installation

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

install(FILES ${XTENSOR_FFTW_HEADERS}
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xtensor-fftw)

set(XTENSOR_FFTW_CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE
        STRING ""install path for xtensor-fftwConfig.cmake"")

configure_package_config_file(${PROJECT_NAME}Config.cmake.in
        ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
        INSTALL_DESTINATION ${XTENSOR_FFTW_CMAKECONFIG_INSTALL_DIR})

# xtensor-fftw is header-only and does not depend on the architecture.
# Remove CMAKE_SIZEOF_VOID_P from xtensor-fftwConfigVersion.cmake so that an xtensor-fftwConfig.cmake
# generated for a 64 bit target can be used for 32 bit targets and vice versa.
set(_XTENSOR_FFTW_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
unset(CMAKE_SIZEOF_VOID_P)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        VERSION ${${PROJECT_NAME}_VERSION}
        COMPATIBILITY AnyNewerVersion)
set(CMAKE_SIZEOF_VOID_P ${_XTENSOR_FFTW_CMAKE_SIZEOF_VOID_P})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${XTENSOR_FFTW_CMAKECONFIG_INSTALL_DIR})

configure_file(${PROJECT_NAME}.pc.in
        ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
        @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
        DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig/"")
",3.1.3,3.1
2593,Kitware,VeloView,False,False,False,False,False,23,C++,2019-08-23 21:54:02+00:00,2015-01-15 19:36:37+00:00,222,1653,"# Copyright 2013 Velodyne Acoustics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
include(""SoftwareInformation/branding.cmake"")
project(VeloView)

set (CMAKE_CXX_STANDARD 11)

if (MSVC)
    # warning level all
    add_compile_options(/Wall)
else()
    # warning level all and extra
    add_compile_options(-Wall -Wextra)
endif()

# Disallow in-source build
if (""${VeloView_SOURCE_DIR}""  STREQUAL ""${VeloView_BINARY_DIR}"")
  message(FATAL_ERROR
    ""${SOFTWARE_NAME} requires an out of source Build. ""
    ""Please create a separate binary directory and run CMake there."")
endif()

#------------------------------------------------------------------------------
# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'RelWithDebInfo' as none was specified."")
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

#-------------------------------------------------------------------------------
# Doxygen Documentation option
option(BUILD_DOC ""Build documentation"" OFF)

if(BUILD_DOC)
  # check if Doxygen is installed
  find_package(Doxygen)
  if (DOXYGEN_FOUND)
      # set input and output files
      set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Documentation/Doxyfile.in)
      set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Documentation/Doxyfile)

      # request to configure the file
      configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
      message(""Doxygen build started"")

      # note the option ALL which allows to build the docs together with the application
      add_custom_target( doc_doxygen ALL
          COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
          COMMENT ""Generating API documentation with Doxygen""
          VERBATIM )
  else (DOXYGEN_FOUND)
    message(""Doxygen need to be installed to generate the doxygen documentation"")
  endif (DOXYGEN_FOUND)
endif()

#-------------------------------------------------------------------------------
set (VeloView_CMAKE_DIR ""${VeloView_SOURCE_DIR}/CMake"")
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${VeloView_CMAKE_DIR})

include(Git)
include(ParaViewDetermineVersion)
# Sets VV_VERSION_{MAJOR,MINOR,PATCH} using PARAVIEW determine_version
file(STRINGS version.txt version_txt)
extract_version_components(""${version_txt}"" ""VV"")
determine_version(${VeloView_SOURCE_DIR} ${GIT_EXECUTABLE} ""VV"")

# Is this a 32 bit or 64bit build. Display this in about dialog.
if (""${CMAKE_SIZEOF_VOID_P}"" EQUAL 8)
  set(VV_BUILD_ARCHITECTURE ""64"")
else()
  set(VV_BUILD_ARCHITECTURE ""32"")
endif()

include(CTest)

find_package(ParaView REQUIRED)
find_package(PythonInterp 2 REQUIRED)
find_package(PythonLibs 2 REQUIRED)
include(${PARAVIEW_USE_FILE})
option(BUILD_SHARED_LIBS ""Build shared libs"" ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
if(UNIX)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
else()
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
endif()
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")

# Setting this ensures that ""make install"" will leave rpaths to external
# libraries (not part of the build-tree e.g. Qt, ffmpeg, etc.) intact on
# ""make install"". This ensures that one can install a version of ParaView on the
# build machine without any issues. If this not desired, simply comment the
# following line and ""make install"" will strip all rpaths, which is default
# behavior.
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


#------------------------------------------------------------------------------
# Setup install directories (we use names with VTK_ prefix, since ParaView now
# is built as a custom ""VTK"" library.
set(VV_INSTALL_RUNTIME_DIR bin)
if (WIN32)
  set(VV_INSTALL_LIBRARY_DIR bin)
else()
  set(VV_INSTALL_LIBRARY_DIR
    lib/veloview-${VV_VERSION_MAJOR}.${VV_VERSION_MINOR})
endif()
set(VV_INSTALL_ARCHIVE_DIR
    lib/veloview-${VV_VERSION_MAJOR}.${VV_VERSION_MINOR})

# Find and include PythonQt
find_package(PythonQt REQUIRED)

# Find the PythonQt plugin library in ParaView lib directory
get_target_property(paraview_lib_location pqCore LOCATION)
get_filename_component(paraview_lib_location ${paraview_lib_location} PATH)
find_library(PYTHONQTPLUGIN_LIBRARY PythonQtPlugin HINTS ${paraview_lib_location}  DOC ""ParaView PythonQt plugin library"")
mark_as_advanced(PYTHONQTPLUGIN_LIBRARY)

if(WIN32 AND MSVC)
  if(MSVC_VERSION GREATER 1699)
    add_definitions(/D_ALLOW_KEYWORD_MACROS)
  endif()
  add_definitions(/Dinline=__inline)
endif()

set (source_files
  vvMainWindow.cxx
  vvColorToolbar.cxx
  vvToggleSpreadSheetReaction.cxx
  vvLoadDataReaction.cxx
  vvPlayerControlsToolbar.cxx
  vvPlayerControlsController.cxx
  )

qt5_wrap_cpp(moc_source_files
  vvColorToolbar.h
  vvMainWindow.h
  vvToggleSpreadSheetReaction.h
  vvLoadDataReaction.h
  vvPlayerControlsToolbar.h
  vvPlayerControlsController.h
  )

qt5_wrap_ui(ui_source_files
  vvColorToolbar.ui
  vvMainWindow.ui
  vvAboutDialog.ui
  vvPlayerControlsToolbar.ui
  )

qt5_add_resources(rcs_source_files
  vvResources.qrc)

include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR})


if (APPLE)
  set(CMAKE_INSTALL_NAME_DIR ""@executable_path/../Libraries"")

  # ensure that we don't build forwarding executables on apple.
  set(VTK_BUILD_FORWARDING_EXECUTABLES FALSE)
endif()

# Add the reader plugin and any other plugins.
set(VV_PLUGIN_LIBRARY VelodyneHDLPlugin) # veloview plugin
set(VV_NONE_PLUGIN_LIBRARY VelodyneHDLPythonQT) # code needed by veloview but that is not part of the plugin
add_subdirectory(VelodyneHDL)
include_directories(VelodyneHDL)


# Install data files
set (VV_SHARED_FILES VLP-16.xml HDL-32.xml VLP-32c.xml ""Puck Hi-Res.xml"" ""Puck LITE.xml"")
if(NOT APPLE)
  set(vv_configurefile_dest ""${CMAKE_CURRENT_BINARY_DIR}/share/"")
  set(vv_installfile_dest share)
else()
  set(vv_configurefile_dest ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${SOFTWARE_NAME}.app/Contents/Resources/"")
  set(vv_installfile_dest ""${VV_INSTALL_RUNTIME_DIR}/${SOFTWARE_NAME}.app/Contents/Resources"")
endif()
set(vv_installed_xml_files """")
foreach(vv_xml_file ${VV_SHARED_FILES})
  configure_file(""share/${vv_xml_file}"" ""${vv_configurefile_dest}${vv_xml_file}"" COPYONLY)
  list(APPEND vv_installed_xml_files ""share/${vv_xml_file}"")
endforeach()
install(FILES ${vv_installed_xml_files} DESTINATION ${vv_installfile_dest})
unset(VV_SHARED_FILES)
unset(vv_installed_xml_files)
unset(vv_configurefile_dest)
unset(vv_installfile_dest)


# TODO: once we use Qt built from source on Windows, remove this manual installation
# currently: PythonQt fails to build against our own build of Qt
if (WIN32)
  foreach (qt5_opengl_lib IN ITEMS opengl32sw libEGL libGLESv2 libEGLd
      Qt5Core Qt5Gui Qt5Widgets Qt5Help Qt5Network Qt5PrintSupport Qt5Sql)
    install(
       FILES
      ""${Qt5_DIR}/../../../bin/${qt5_opengl_lib}.dll""
      DESTINATION
      ""bin"")
  endforeach ()
  install(DIRECTORY ""${Qt5_DIR}/../../../plugins/platforms""
    DESTINATION ""bin""
  )
endif ()


# This ensure that build_paraview_client() adds an ""forwarding path"" to locate
# paraview from installed location.
set (PARAVIEW_INSTALL_LIB_DIR ""lib/paraview-${PARAVIEW_VERSION_MAJOR}.${PARAVIEW_VERSION_MINOR}"")

build_paraview_client(${SOFTWARE_NAME}
  TITLE ""${SOFTWARE_NAME} ${VV_VERSION_FULL} ${VV_BUILD_ARCHITECTURE}-bit""
  ORGANIZATION ""${VENDOR}""
  VERSION_MAJOR ${VV_VERSION_MAJOR}
  VERSION_MINOR ${VV_VERSION_MINOR}
  VERSION_PATCH ${VV_VERSION_PATCH}
  PVMAIN_WINDOW vvMainWindow
  PVMAIN_WINDOW_INCLUDE vvMainWindow.h
  SPLASH_IMAGE ""${CMAKE_CURRENT_SOURCE_DIR}/SoftwareInformation/${PARAVIEW_SPLASH_IMAGE}""
  # right now the bundle's logo.icns file must be at the root of VeloView sources
  # this problem is due to paraview/src/CMake/ParaViewBranding.cmake,
  # on line: GET_FILENAME_COMPONENT(bundle_icon_file ""${BPC_BUNDLE_ICON}"" NAME)
  BUNDLE_ICON ""${CMAKE_CURRENT_SOURCE_DIR}/${PARAVIEW_BUNDLE_ICON}""
  APPLICATION_ICON ""${CMAKE_CURRENT_SOURCE_DIR}/SoftwareInformation/${PARAVIEW_APPLICATION_ICON}""
  SOURCES
    ${source_files}
    ${moc_source_files}
    ${ui_source_files}
    ${rcs_source_files}
  GUI_CONFIGURATION_XMLS
    ${CMAKE_CURRENT_SOURCE_DIR}/vvSources.xml
    ${CMAKE_CURRENT_SOURCE_DIR}/vvFilters.xml
  INSTALL_BIN_DIR ${VV_INSTALL_RUNTIME_DIR}
  INSTALL_LIB_DIR ${VV_INSTALL_LIBRARY_DIR}
)

# We directly link against the plugin and import them statically.
target_link_libraries(${SOFTWARE_NAME} LINK_PUBLIC ${VV_PLUGIN_LIBRARY} ${VV_NONE_PLUGIN_LIBRARY} ${PYTHONQTPLUGIN_LIBRARY} ${PYTHONQT_LIBRARIES})
",3.1,3.1
2613,nullifiedcat,cathook,False,False,False,False,False,35,C++,2020-05-17 15:40:45+00:00,2017-02-24 07:47:00+00:00,190,3676,"cmake_minimum_required(VERSION 3.10)

set(EnablePrecompiledHeaders 1 CACHE BOOL ""Enable Precompiled Headers to reduce compile time"")
if(${CMAKE_VERSION} VERSION_LESS ""3.16.0"")
    set(EnableCotire 1 CACHE BOOL ""Enable CoTiRe (Compile Time Reducer)"")
    unset(NativePrecompiledHeaders)
else()
    set(NativePrecompiledHeaders 1)
    unset(EnableCotire CACHE)
endif()

# Ensure that only 32 bit libraries are used.
set(CMAKE_TOOLCHAIN_FILE ""${CMAKE_SOURCE_DIR}/Toolchain-cross-m32.cmake"")

if (EnableCotire)
    # Don't enable cotire when running in QtCreator
    execute_process(COMMAND ""printenv"" OUTPUT_VARIABLE contents)
    STRING(REGEX REPLACE "";"" ""\\\\;"" contents ""${contents}"")
    STRING(REGEX REPLACE ""\n"" "";"" contents ""${contents}"")
    foreach(text ${contents})
        if (""${text}""  STREQUAL ""CC="")
            message(""qtcreator running"")
            set(EnableCotire 0)
        endif()
    endforeach()
endif()

if (EnableCotire)
    set (CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/external/cotire/CMake"")
    include(cotire)
    file(GLOB_RECURSE ignore_files *.cpp)
    set(ignore_files ${ignore_files} CACHE INTERNAL """")
endif()

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"")
endif()
set(CMAKE_BUILD_TYPE_VALUES ""Debug;Release"" CACHE INTERNAL ""List of supported build"")
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_BUILD_TYPE_VALUES})

project(cathook VERSION 0.0.1)

set(CMAKE_CXX_STANDARD 17)
add_library(cathook SHARED """")

set(GameSpecific 1 CACHE BOOL ""Build for specific target game (As opposed to universal, but slower, lib)"")
set(Game ""tf2"" CACHE STRING ""Target game"")
set(GameValues ""tf2;hl2dm;dab;tf2c;css;dynamic"" CACHE INTERNAL ""List of supported game types"")
set_property(CACHE Game PROPERTY STRINGS ${GameValues})

set(Visuals_DrawType ""IMGUI"" CACHE STRING ""Target drawing api"")
set(DrawTypes ""Textmode;No Visuals;Glez;Engine;IMGUI;IMGUI Streamproof"" CACHE INTERNAL ""Select the drawing api that cathook should use"")
set_property(CACHE Visuals_DrawType PROPERTY STRINGS ${DrawTypes})
set(Visuals_EnforceStreamSafety 1 CACHE BOOL ""If a streamsafe drawing method is used, this will remove features that are not streamsafe."")

set(EnableVisuals 1)
set(EnableGlezDrawing 0)
set(EnableEngineDrawing 0)
set(EnableImGuiDrawing 0)
set(ExternalDrawing 0)
set(Textmode 0)

if(Visuals_DrawType STREQUAL ""Textmode"")
    set(EnableVisuals 0)
    set(Textmode 1)
elseif(Visuals_DrawType STREQUAL ""No Visuals"")
    set(EnableVisuals 0)
elseif(Visuals_DrawType STREQUAL ""Glez"")
    set(EnableGlezDrawing 1)
elseif(Visuals_DrawType STREQUAL ""Engine"")
    set(EnableEngineDrawing 1)
elseif(Visuals_DrawType STREQUAL ""IMGUI"")
    set(EnableImGuiDrawing 1)
elseif(Visuals_DrawType STREQUAL ""IMGUI Streamproof"")
    set(EnableImGuiDrawing 1)
    set(ExternalDrawing 1)
endif()
if (NOT ExternalDrawing)
    set(Visuals_EnforceStreamSafety 0)
endif()

set(EnableProfiler 0 CACHE BOOL ""Enable Profiler"")
set(EnableGUI 1 CACHE BOOL ""Enable GUI"")
set(EnableIPC 1 CACHE BOOL ""Enable IPC"")
set(DataPath ""/opt/cathook/data"" CACHE FILEPATH ""Data location"")
set(VACBypass 0 CACHE BOOL ""Textmode VAC bypass"")
set(EnableTextmodeStdin 0 CACHE BOOL ""Textmode Stdin -> Console bridge (EXPERIMENTAL)"")
set(EnableWarnings 0 CACHE BOOL ""Enable compile warnings"")
set(EnableNullNexus 1 CACHE BOOL ""Enable NullNexus chat and other features"")
set(EnableLogging 1 CACHE BOOL ""Enable logging to /tmp/"")
set(EnableClip 1 CACHE BOOL ""Enable anti electron/chromium freezing"")
set(Unity_ZeroKernel 1 CACHE BOOL ""Use a unity build for zerokernel files"")

if(NOT EnableVisuals)
    set(EnableGUI 0)
endif()

if (EnableVisuals)
    set(OpenGL_GL_PREFERENCE ""LEGACY"")
    if (EnableImGuiDrawing)
        find_package(Freetype REQUIRED)
        target_include_directories(cathook PRIVATE ""${FREETYPE_INCLUDE_DIRS}"")
        target_link_libraries(cathook ${FREETYPE_LIBRARIES})
    endif()
endif()

find_package(Git REQUIRED)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/external"")
find_package(SDL2 REQUIRED)
find_package(Boost 1.70.0)
if (NOT ${Boost_FOUND})
    set(BOOST_LIBS_OPTIONAL """" CACHE STRING ""Boost libs to be compiled"")
    add_subdirectory(external/boost-cmake)
    SET (BOOST_ROOT ${CMAKE_BINARY_DIR}/_deps/boost-src)
    find_package(Boost 1.70 REQUIRED)
    include_directories(${Boost_INCLUDE_DIRS})
endif()

execute_process(COMMAND
        ""${GIT_EXECUTABLE}"" log -1 --pretty=\""%h\""
        WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
        OUTPUT_VARIABLE GIT_COMMIT_HASH
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

execute_process(COMMAND
        ""${GIT_EXECUTABLE}"" log -1 --pretty=\""%ai\""
        WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
        OUTPUT_VARIABLE GIT_COMMITTER_DATE
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

set( CMAKE_SKIP_RPATH true )
find_library(ValveLibraryVStdLib NAMES vstdlib PATHS ""${PROJECT_SOURCE_DIR}/lib"" NO_DEFAULT_PATH)

if(EnableIPC)
    add_subdirectory(external/simple-ipc)
    target_link_libraries(cathook SimpleIPC)
endif()

if(EnableNullNexus)
    add_subdirectory(external/libnullnexus)
    target_link_libraries(cathook libnullnexus)
endif()

if(EnableVisuals)
    if (EnableGlezDrawing)
        add_subdirectory(external/libglez)
    endif()
    target_include_directories(cathook PRIVATE include/visual)
    find_package(SDL2 REQUIRED)
    if(ExternalDrawing)
        add_subdirectory(external/libxoverlay)
        target_link_libraries(cathook xoverlay)
        target_include_directories(cathook PRIVATE external/libxoverlay/include)
    endif()
    target_include_directories(cathook PRIVATE ""${SDL2_INCLUDE_DIR}"")
    if (EnableGlezDrawing)
        target_link_libraries(cathook glez)
    endif()
    if (EnableGlezDrawing)
        find_package(GLEW REQUIRED)
        target_link_libraries(cathook ${GLEW_LIBRARIES})
    endif()
endif()

configure_file(include/config.h.in ${CMAKE_SOURCE_DIR}/include/config.h @ONLY)
configure_file(include/version.h.in ${CMAKE_SOURCE_DIR}/include/version.h @ONLY)

set(CMAKE_CXX_FLAGS ""-m32 -march=native -fexceptions -fno-gnu-unique -DNDEBUG"")
set(CMAKE_CXX_FLAGS_DEBUG ""-rdynamic -ggdb -Og"")
if (symbolize)
    set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -ggdb -fvisibility=hidden -fvisibility-inlines-hidden"")
else()
    set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -s -fvisibility=hidden -fvisibility-inlines-hidden"")
endif()

target_compile_definitions(cathook PRIVATE
        _GLIBCXX_USE_CXX11_ABI=0
        _POSIX=1
        FREETYPE_GL_USE_VAO=1
        RAD_TELEMETRY_DISABLED=1
        LINUX=1
        USE_SDL=1
        _LINUX=1
        POSIX=1
        GNUC=1
        NO_MALLOC_OVERRIDE=1)

target_include_directories(cathook SYSTEM PRIVATE
        ""external/source-sdk-2013-headers/mp/src/mathlib""
        ""external/source-sdk-2013-headers/mp/src/public""
        ""external/source-sdk-2013-headers/mp/src/common""
        ""external/source-sdk-2013-headers/mp/src/public/tier0""
        ""external/source-sdk-2013-headers/mp/src/public/tier1""
        ""external/source-sdk-2013-headers/mp/src/tier1""
        ""external/source-sdk-2013-headers/mp/src"")

if(EnableWarnings)
    target_compile_options(cathook PRIVATE -Wall -Wextra)
else()
    target_compile_options(cathook PRIVATE -w)
endif()


target_include_directories(cathook PRIVATE include include/hooks)

add_custom_target(data
        bash ./install-data ""${DataPath}""
        WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
        VERBATIM)

# SDL included because of https://github.com/nullworks/cathook/issues/689
target_link_libraries(cathook ${ValveLibraryVStdLib} ${SDL2_LIBRARY})
set_target_properties(cathook PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_subdirectory(src)
add_subdirectory(include)
add_subdirectory(external)
add_subdirectory(modules)

if (EnableCotire)
    if (EnablePrecompiledHeaders)
        set_target_properties(cathook PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT ""${CMAKE_SOURCE_DIR}/include/common.hpp"")
    else()
        set_target_properties(cathook PROPERTIES COTIRE_ENABLE_PRECOMPILED_HEADER FALSE)
    endif()
    set_target_properties(cathook PROPERTIES COTIRE_ADD_UNITY_BUILD true)
    set_target_properties(cathook PROPERTIES COTIRE_UNITY_SOURCE_MAXIMUM_NUMBER_OF_INCLUDES 30)
    set_source_files_properties(${ignore_files} PROPERTIES COTIRE_EXCLUDED true)
    cotire(cathook)
elseif(EnablePrecompiledHeaders AND NativePrecompiledHeaders)
    target_precompile_headers(cathook PRIVATE ""${CMAKE_SOURCE_DIR}/include/common.hpp"")
endif()

if (NOT symbolize)
    add_custom_command(TARGET cathook POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:cathook> ""${CMAKE_SOURCE_DIR}/bin/$<TARGET_FILE_NAME:cathook>"")
else()
    message(""Symbolized build"")
    unset(symbolize CACHE)
endif()
if (EnableCotire)
    add_custom_command(TARGET cathook_unity POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:cathook_unity> ""${CMAKE_SOURCE_DIR}/bin/$<TARGET_FILE_NAME:cathook_unity>"")
endif()
",3.10,3.1
2675,rncbc,qxgedit,False,False,False,False,False,2,C++,2020-03-31 10:58:42+00:00,2015-09-22 14:37:58+00:00,6,410,"project(QXGEDIT)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""QXGEdit"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qxgedit"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable unique/single instance.
option (CONFIG_XUNIQUE ""Enable unique/single instance (default=yes)"" 1)

# Enable debugger stack-trace option (assumes --enable-debug).
option (CONFIG_STACKTRACE ""Enable debugger stack-trace (default=no)"" 0)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets)

if (CONFIG_XUNIQUE)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for ALSA libraries.
pkg_check_modules (ALSA REQUIRED alsa)
if (ALSA_FOUND)
  set (CONFIG_ALSA_SEQ 1)
  include_directories (${ALSA_INCLUDE_DIRS})
  link_directories (${ALSA_LIBRARY_DIRS})
  link_libraries (${ALSA_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** ALSA library not found."")
  set (CONFIG_ALSA_SEQ 0)
endif ()


add_subdirectory (skulpture)
add_subdirectory (src)

configure_file (qxgedit.spec.in qxgedit.spec IMMEDIATE @ONLY)

install (FILES qxgedit.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qxgedit.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qxgedit.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  ALSA MIDI Sequencer support  . . . . . . . . . . ."" CONFIG_ALSA_SEQ)
message     ("""")
show_option (""  Unique/Single instance support . . . . . . . . . ."" CONFIG_XUNIQUE)
show_option (""  Debugger stack-trace (gdb) . . . . . . . . . . . ."" CONFIG_STACKTRACE)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
2688,ddemidov,amgcl,False,False,False,False,False,10,C++,2020-05-16 07:10:03+00:00,2012-12-03 18:36:36+00:00,288,1445,"cmake_minimum_required(VERSION 3.1)
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""Build type"")
    message(STATUS ""No build type selected, default to ${CMAKE_BUILD_TYPE}"")
endif()

project(AMGCL)

if (NOT (CMAKE_VERSION LESS 3.3))
    cmake_policy(SET CMP0058 OLD)
endif()

set(AMGCL_MASTER_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    set(AMGCL_MASTER_PROJECT ON)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
if (CMAKE_VERSION VERSION_LESS ""3.1.0"")
    set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/opencl)
endif()

#----------------------------------------------------------------------------
# Find Boost
#----------------------------------------------------------------------------
option(Boost_USE_STATIC_LIBS ""Use static versions of Boost libraries"" OFF)
if (WIN32)
    set(Boost_USE_STATIC_LIBS ON)
endif ()

find_package(Boost REQUIRED COMPONENTS
    program_options
    serialization
    unit_test_framework
    )

#----------------------------------------------------------------------------
# Builtin backend
#----------------------------------------------------------------------------
add_library(amgcl INTERFACE)
add_library(amgcl::amgcl ALIAS amgcl)

target_compile_features(amgcl INTERFACE
    cxx_auto_type
    cxx_range_for
    cxx_rvalue_references
    cxx_right_angle_brackets
    cxx_static_assert
)

target_include_directories(amgcl SYSTEM INTERFACE
    ${Boost_INCLUDE_DIRS}
    )

target_include_directories(amgcl INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:include>
    )

find_package(OpenMP)
if (OPENMP_FOUND)
    target_compile_options(amgcl INTERFACE ${OpenMP_CXX_FLAGS})
    target_link_libraries(amgcl INTERFACE
        $<$<CXX_COMPILER_ID:GNU>:${OpenMP_CXX_FLAGS}>
        $<$<CXX_COMPILER_ID:Clang>:${OpenMP_CXX_FLAGS}>
        $<$<CXX_COMPILER_ID:Intel>:${OpenMP_CXX_FLAGS}>
        )
endif ()

#----------------------------------------------------------------------------
# Common compile options and definitions
#----------------------------------------------------------------------------
target_compile_options(amgcl INTERFACE
    # Compiler is GNU (g++):
    $<$<CXX_COMPILER_ID:GNU>:$<BUILD_INTERFACE:-Wall;-Wextra;-Wpedantic>>
    # Compiler is Clang:
    $<$<CXX_COMPILER_ID:Clang>:$<BUILD_INTERFACE:-Wall;-Wextra;-Wpedantic;-Wno-c99-extensions>>
    # Compiler is MSVC:
    $<$<CXX_COMPILER_ID:MSVC>:/bigobj>
    $<$<CXX_COMPILER_ID:MSVC>:/wd4715>
    )

target_compile_definitions(amgcl INTERFACE
    # Compiler is MSVC:
    $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX>
    $<$<CXX_COMPILER_ID:MSVC>:_USE_MATH_DEFINES>
    $<$<CXX_COMPILER_ID:MSVC>:_VARIADIC_MAX=10>
    $<$<CXX_COMPILER_ID:MSVC>:_SCL_SECURE_NO_WARNINGS>
    )

#----------------------------------------------------------------------------
# Eigen backend
#----------------------------------------------------------------------------
find_path(EIGEN_INCLUDE Eigen/SparseCore PATH_SUFFIXES eigen3)
if (EIGEN_INCLUDE)
    add_library(eigen_target INTERFACE)
    target_include_directories(eigen_target INTERFACE ${EIGEN_INCLUDE})
    target_compile_options(eigen_target INTERFACE
        $<$<CXX_COMPILER_ID:GNU>:-Wno-int-in-bool-context>
        $<$<CXX_COMPILER_ID:GNU>:-Wno-maybe-uninitialized>
        $<$<CXX_COMPILER_ID:GNU>:-Wno-deprecated-copy>
        $<$<CXX_COMPILER_ID:Clang>:-Wno-c++11-long-long>
        )
    target_compile_definitions(eigen_target INTERFACE AMGCL_HAVE_EIGEN)
endif()

#----------------------------------------------------------------------------
# Find Blaze
#----------------------------------------------------------------------------
find_package(blaze QUIET)
if (blaze_FOUND)
    add_library(blaze_target INTERFACE)
    target_link_libraries(blaze_target INTERFACE blaze::blaze)
endif()

#----------------------------------------------------------------------------
# Find VexCL
#----------------------------------------------------------------------------
find_package(VexCL QUIET)

#----------------------------------------------------------------------------
# Find ViennaCL
#----------------------------------------------------------------------------
find_path(VIENNACL_INCLUDE viennacl/forwards.h)
if (VIENNACL_INCLUDE)
    add_library(viennacl_target INTERFACE)
    target_link_libraries(viennacl_target INTERFACE amgcl)
    target_include_directories(viennacl_target INTERFACE ${VIENNACL_INCLUDE})
    target_compile_definitions(viennacl_target INTERFACE SOLVER_BACKEND_VIENNACL)

    find_package(OpenCL)
    if (OpenCL_FOUND)
        target_include_directories(viennacl_target INTERFACE ${OpenCL_INCLUDE_DIRS})
        target_link_libraries(viennacl_target INTERFACE ${OpenCL_LIBRARY})
        target_compile_definitions(viennacl_target INTERFACE VIENNACL_WITH_OPENCL)
        target_compile_options(viennacl_target INTERFACE
            $<$<CXX_COMPILER_ID:GNU>:-Wno-ignored-attributes>
            $<$<CXX_COMPILER_ID:GNU>:-Wno-deprecated-declarations>
            $<$<CXX_COMPILER_ID:GNU>:-Wno-deprecated-copy>
            $<$<CXX_COMPILER_ID:Clang>:-Wno-ignored-attributes>
            $<$<CXX_COMPILER_ID:Clang>:-Wno-deprecated-declarations>
            )
    else()
        target_compile_definitions(viennacl_target INTERFACE VIENNACL_WITH_OPENMP)
    endif()
endif()

#----------------------------------------------------------------------------
# Find CUDA
#----------------------------------------------------------------------------
if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
    find_package(CUDA)
    if (CUDA_FOUND)
        set(CUDA_TARGET_ARCH ""Kepler Maxwell Pascal"" CACHE STRING ""Target architecture(s) for CUDA"")
        cuda_select_nvcc_arch_flags(CUDA_ARCH_FLAGS ${CUDA_TARGET_ARCH})

        if (OPENMP_FOUND)
            list(APPEND CUDA_NVCC_FLAGS -Xcompiler ${OpenMP_CXX_FLAGS})
        endif()

        if (CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
	    list(APPEND CUDA_NVCC_FLAGS
                ${CUDA_ARCH_FLAGS} -std=c++11 -Wno-deprecated-gpu-targets)

            list(APPEND CUDA_NVCC_FLAGS -Xcompiler -std=c++11 -Xcompiler -fPIC -Xcompiler -Wno-vla)
        endif()

        add_library(cuda_target INTERFACE)
        target_link_libraries(cuda_target INTERFACE ${CUDA_cusparse_LIBRARY})
    endif()
endif()

#----------------------------------------------------------------------------
# Find MPI
#----------------------------------------------------------------------------
find_package(MPI)
if (MPI_CXX_FOUND)
    # Need this to comply with CMP004 policy:
    string(STRIP ""${MPI_CXX_LINK_FLAGS}"" MPI_CXX_LINK_FLAGS)
    string(STRIP ""${MPI_CXX_LIBRARIES}"" MPI_CXX_LIBRARIES)

    add_library(mpi_target INTERFACE)
    target_link_libraries(mpi_target INTERFACE amgcl ${MPI_CXX_LIBRARIES})
    target_include_directories(mpi_target INTERFACE ${MPI_CXX_INCLUDE_PATH})
    target_compile_options(mpi_target INTERFACE
        $<$<CXX_COMPILER_ID:GNU>:-Wno-long-long>
        $<$<CXX_COMPILER_ID:GNU>:-Wno-literal-suffix>
        $<$<CXX_COMPILER_ID:Clang>:-Wno-long-long>
        )
endif()

#----------------------------------------------------------------------------
# Find Pastix
#----------------------------------------------------------------------------
find_package(Metis  QUIET)
find_package(Scotch QUIET)
find_package(Pastix QUIET)
find_package(BLAS   QUIET)
find_library(PTHREAD_LIBRARY pthread)
find_library(BZ2_LIBRARY bz2)
find_library(HWLOC_LIBRARY hwloc)

if (Scotch_INCLUDES)
    add_library(scotch_target INTERFACE)
    target_include_directories(scotch_target INTERFACE ${Scotch_INCLUDES})
    target_link_libraries(scotch_target INTERFACE ${Scotch_LIBRARIES})
    target_compile_definitions(scotch_target INTERFACE AMGCL_HAVE_SCOTCH)
endif()

if (Pastix_INCLUDES AND Scotch_INCLUDES AND BLAS_FOUND AND PTHREAD_LIBRARY AND BZ2_LIBRARY)
    add_library(pastix_target INTERFACE)
    target_include_directories(pastix_target INTERFACE
        ${Pastix_INCLUDES}
        ${Scotch_INCLUDES}
        )
    target_link_libraries(pastix_target INTERFACE
        ${Pastix_LIBRARIES}
        ${Scotch_LIBRARIES}
        ${BLAS_LIBRARIES}
        ${PTHREAD_LIBRARY}
        ${BZ2_LIBRARY}
        ${HWLOC_LIBRARY}
        )
    target_compile_definitions(pastix_target INTERFACE AMGCL_HAVE_PASTIX)
endif()

if (AMGCL_MASTER_PROJECT)
    option(AMGCL_BUILD_TESTS    OFF)
    option(AMGCL_BUILD_EXAMPLES OFF)
    option(AMGCL_DISABLE_RARE_COMPONENTS OFF)

    if(AMGCL_DISABLE_RARE_COMPONENTS)
        add_definitions(
            -DAMGCL_RUNTIME_DISABLE_MULTICOLOR_GS
            -DAMGCL_RUNTIME_DISABLE_SPAI1
            -DAMGCL_RUNTIME_DISABLE_CHEBYSHEV
            )
    endif()

    add_subdirectory(docs)

    if (AMGCL_BUILD_TESTS)
        enable_testing()
        add_subdirectory(tests)
    endif()

    if (AMGCL_BUILD_EXAMPLES)
        add_subdirectory(lib)
        add_subdirectory(examples)

        #----------------------------------------------------------------------------
        # Build Fortran example
        #----------------------------------------------------------------------------
        option(AMGCL_HAVE_FORTRAN ""Build Fortran example"" OFF)
        if (AMGCL_HAVE_FORTRAN)
            add_subdirectory(fortran)
        endif()

        #----------------------------------------------------------------------------
        # Build Python example
        #----------------------------------------------------------------------------
        option(AMGCL_HAVE_PYTHON ""Build Python example"" OFF)
        if (AMGCL_HAVE_PYTHON)
            add_subdirectory(pyamgcl)
        endif()
    endif()
    
    install(DIRECTORY amgcl DESTINATION include)

    install(TARGETS amgcl EXPORT amgclTargets)

    if(TARGET eigen)
        install(TARGETS eigen EXPORT amgclTargets)
    endif()

    if(TARGET blaze)
        install(TARGETS blaze EXPORT amgclTargets)
    endif()

    if(TARGET viennacl)
        install(TARGETS viennacl EXPORT amgclTargets)
    endif()

    if(TARGET mpi)
        install(TARGETS mpi EXPORT amgclTargets)
    endif()

    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/amgcl-config.cmake.in""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/amgcl-config.cmake""
        COPYONLY
        )

    export(EXPORT amgclTargets
        FILE ""${CMAKE_CURRENT_BINARY_DIR}/cmake/amgcl-targets.cmake""
        NAMESPACE amgcl::
        )

    export(PACKAGE amgcl)

    install(EXPORT amgclTargets
        FILE amgcl-targets.cmake
        NAMESPACE amgcl::
        DESTINATION share/amgcl/cmake
        )

    install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/amgcl-config.cmake
        DESTINATION share/amgcl/cmake
        )
endif()
",3.1,3.1
2704,sahaRatul,sela,False,False,False,False,False,4,C++,2020-04-11 17:35:26+00:00,2015-07-08 18:33:00+00:00,194,386,"cmake_minimum_required(VERSION 3.10)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

project(sela VERSION 2.0.2)
INCLUDE(CheckIncludeFiles)
include(generate_product_version)

# Verbose toggle
set(CMAKE_VERBOSE_MAKEFILE OFF)
# Use C++11
set(CMAKE_CXX_STANDARD 11)
# Require (at least) it
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Don't use e.g. GNU extension (like -std=gnu++11) for portability
set(CMAKE_CXX_EXTENSIONS OFF)
# Add support for threading library
find_package(Threads REQUIRED)
# Check if ao/ao.h is available or not
CHECK_INCLUDE_FILES(ao/ao.h HAVE_AO_H)
if(NOT HAVE_AO_H)
    CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
    CHECK_INCLUDE_FILES(sys/audio.h HAVE_SYS_AUDIO_H)
endif()

# Enable CTest
include(CTest)
enable_testing()
add_test(NAME tests COMMAND selatests)

# CPack config
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

# Build libao from source if not found in headers
if(NOT HAVE_AO_H)
    set(
        LIBAO_SOURCES
        external/libao/src/ao_aixs.c
        external/libao/src/ao_au.c
        external/libao/src/ao_null.c
        external/libao/src/ao_raw.c
        external/libao/src/ao_wav.c
        external/libao/src/audio_out.c
        external/libao/src/config.c
    )

    if (WIN32)
        list(APPEND LIBAO_SOURCES external/libao/src/ao_wmm.c)
    endif ()

    if(HAVE_ALSA_ASOUNDLIB_H)
        list(APPEND LIBAO_SOURCES external/libao/src/plugins/alsa/ao_alsa.c)
    endif()

    add_library(ao ${LIBAO_SOURCES})
    target_include_directories(ao PUBLIC external/libao/include)
    target_include_directories(ao PRIVATE external/libao/include/ao)
    target_compile_definitions(ao PRIVATE AO_BUILDING_LIBAO)

    if (WIN32)
        target_compile_definitions(ao PRIVATE HAVE_WMM)
        target_link_libraries(ao PRIVATE Winmm.lib ksuser)
    endif ()

    if (HAVE_SYS_AUDIO_H)
        target_compile_definitions(ao PRIVATE HAVE_SYS_AUDIO_H)
    endif ()
endif()
#---------------------------------------------------

# Make sela executable -----------------
set(SELA_INCLUDE_DIR src/include)
set(SOURCES 
    src/main.cpp
    src/lpc/linear_predictor.cpp
    src/lpc/residue_generator.cpp
    src/lpc/sample_generator.cpp
    src/rice/rice_encoder.cpp
    src/rice/rice_decoder.cpp
    src/frame/frame_encoder.cpp
    src/frame/frame_decoder.cpp
    src/file/sela_file.cpp
    src/file/wav_file.cpp
    src/sela/encoder.cpp
    src/sela/decoder.cpp
    src/sela/player.cpp
)

generate_product_version(
   VersionFilesOutputVariable
   NAME ""SimplE Lossless Audio - SELA""
   VERSION_MAJOR 2
   VERSION_MINOR 0
   VERSION_PATCH 2
   VERSION_REVISION ${BUILD_REVISION}
)

add_executable(sela ${SOURCES} ${VersionFilesOutputVariable})
target_include_directories(sela PUBLIC ${SELA_INCLUDE_DIR})
if(NOT HAVE_AO_H)
    target_include_directories(sela PRIVATE external/libao/include)
endif()

#Generate static build on Mingw and Windows
if(WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
    target_compile_options(sela INTERFACE -static-libgcc -static-libstdc++ -lwsock32 -lws2_32 ${CMAKE_CXX_STANDARD_LIBRARIES})
    target_link_libraries(sela ${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive ao)
else()
    target_link_libraries(sela Threads::Threads ao)
endif()

# Enable Warnings for MSVC/GCC/Clang on Debug Mode
if(CMAKE_BUILD_TYPE MATCHES ""Debug"")
    if(MSVC)
        target_compile_options(sela PUBLIC /W4 /WX)
    else()
        target_compile_options(sela PUBLIC -Wall -Wextra -pedantic -Werror)
    endif()
endif()
# --------------------------------------------


# Prepare ""Catch"" library for other executables
set(CATCH_INCLUDE_DIR external/catch2/include)
add_library(Catch INTERFACE)
#--------------------------------------------

# Make test executable------------------------
set(TEST_SOURCES
    src/frame/frame_decoder.cpp
    src/frame/frame_encoder.cpp
    test/frametests.cpp
    src/lpc/linear_predictor.cpp
    src/lpc/residue_generator.cpp
    src/lpc/sample_generator.cpp
    test/lpctests.cpp
    src/rice/rice_encoder.cpp
    src/rice/rice_decoder.cpp
    test/ricetests.cpp
    test/main.cpp
)

add_executable(selatests ${TEST_SOURCES} ${VersionFilesOutputVariable})
target_include_directories(selatests PRIVATE ${CATCH_INCLUDE_DIR})
option(CODE_COVERAGE ""Enable coverage reporting"" OFF)
if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang"")
    # Add required flags (GCC & LLVM/Clang)
    target_compile_options(selatests PUBLIC
        -O0        # no optimization
        --coverage # sets all required flags
    )
    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
        target_link_options(selatests PUBLIC --coverage)
    else()
        target_link_libraries(selatests PUBLIC --coverage)
    endif()
endif()
#---------------------------------------------------------------",3.10,3.1
2804,lxde,lximage-qt,False,False,False,False,False,114,C++,2020-05-17 15:24:20+00:00,2013-07-18 19:10:40+00:00,36,562,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lximage-qt)

include(GNUInstallDirs)

set(MAJOR_VERSION 0)
set(MINOR_VERSION 15)
set(PATCH_VERSION 0)
set(LXIMAGE_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})

set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(LIBFMQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")


set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Network ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5PrintSupport ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Svg ${QT_MINIMUM_VERSION} REQUIRED)
find_package(fm-qt ${LIBFMQT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)
find_package(Exif REQUIRED)
message(STATUS ""Building with Qt ${Qt5Core_VERSION}"")

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# TODO: make the X11 stuff optional.
# for screenshot support
find_package(X11 REQUIRED)

find_package(PkgConfig REQUIRED)
# Xfixes is needed to capture the mouse cursor image
pkg_check_modules(XFIXES REQUIRED xfixes)

# add src subdirectory
add_subdirectory(src)

# install an icon for the application
install(
    FILES data/lximage-qt.png
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/icons/hicolor/48x48/apps""
)

",3.1.0,3.1
2822,SuperTux,supertux,False,False,False,False,False,85,C++,2020-05-16 18:22:58+00:00,2013-11-23 21:40:12+00:00,960,11249,"#
# SuperTux - root build script
# Copyright (C) 2006 Christoph Sommer <christoph.sommer@2006.expires.deltadevelopment.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


#
# INSTRUCTIONS:
# -------------
#
# Create a directory build/ and change to it. Run
#
#   cmake ..
#
# This creates a set of Makefiles to build the project. Run
#
#   make
#


## Project name to use as command prefix.

project(SUPERTUX)


### CMake configuration

cmake_minimum_required(VERSION 3.1)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
  cmake_policy(SET CMP0008 NEW)
  cmake_policy(SET CMP0023 NEW)
endif(COMMAND cmake_policy)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/mk/cmake)
include(ConfigureFiles)
include(ExternalProject)

## For autopackage
set(APPDATADIR ""${CMAKE_INSTALL_PREFIX}/share/games/supertux2"")

set(BUILD_DATA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/data"")
set(BUILD_CONFIG_DATA_DIR ""${CMAKE_BINARY_DIR}/data"")
## Check endianess

include(TestBigEndian)
test_big_endian(WORDS_BIGENDIAN)

## Add definitions
if(CMAKE_BUILD_TYPE MATCHES ""Release|RelWithDebInfo"")
  add_definitions(-DRELEASE)
elseif(CMAKE_BUILD_TYPE MATCHES Debug)
  add_definitions(-DDEBUG)
endif()

set(SUPERTUX_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
set(VCPKG_BUILD OFF CACHE BOOL ""Use dependencies installed via vcpkg (not dependency package)"")
set(VCPKG_APPLOCAL_DEPS ${VCPKG_BUILD} BOOL)
## These variables enable MSVC to find libraries located in ""dependencies{32|64}""
if(WIN32)
  if(NOT VCPKG_BUILD)
    ## Store path of dependecy folder
    set(DEPENDENCY_FOLDER ""${PROJECT_SOURCE_DIR}/dependencies"")
  endif()

  ## To test if the host (not the build) is x64:
  ## ""$ENV{PROCESSOR_ARCHITEW6432}"" STREQUAL ""AMD64""
  if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    set(WIN64 ON)
    if(NOT VCPKG_BUILD)
      set(DEPENDENCY_FOLDER ""${DEPENDENCY_FOLDER}64"")
    endif()
  else(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    set(WIN64 OFF)
    if(NOT VCPKG_BUILD)
      set(DEPENDENCY_FOLDER ""${DEPENDENCY_FOLDER}32"")
    endif()
  endif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)

  if(WIN64)
    set(SUPERTUX_SYSTEM_NAME win64)
  else(WIN64)
    set(SUPERTUX_SYSTEM_NAME win32)
  endif(WIN64)

  if(NOT VCPKG_BUILD)
    set(ENV{PATH} ""$ENV{PATH};${DEPENDENCY_FOLDER}/include"")
    set(ENV{LIB} ""${DEPENDENCY_FOLDER}/lib"")
    set(ENV{OPENALDIR} ""${DEPENDENCY_FOLDER}"")
  endif()

  ## Enable multi-processor compilation (faster)
  if(MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")
  endif(MSVC)

  ## And shut up about unsafe stuff
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  ## Add an icon
  configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/mk/msvc/icon_rc.template"" ""${PROJECT_BINARY_DIR}/tmp/icon.rc"")

  ## Find all used libraries
  if(NOT VCPKG_BUILD)
    file(GLOB DLLS ""${DEPENDENCY_FOLDER}/dll/*"")
  endif()
endif(WIN32)

## Add lots of dependencies to compiler switches

set(Boost_ADDITIONAL_VERSIONS ""1.41"" ""1.41.0"")
if(WIN32)
  option(ENABLE_BOOST_STATIC_LIBS ""Use boost static libraries"" ON)
else(WIN32)
  option(ENABLE_BOOST_STATIC_LIBS ""Use boost static libraries"" OFF)
endif(WIN32)
if(ENABLE_BOOST_STATIC_LIBS)
  set(Boost_USE_STATIC_LIBS TRUE)
else(ENABLE_BOOST_STATIC_LIBS)
  set(Boost_USE_STATIC_LIBS FALSE)
endif(ENABLE_BOOST_STATIC_LIBS)
find_package(Boost REQUIRED COMPONENTS filesystem system date_time locale)
include_directories(SYSTEM ${Boost_INCLUDE_DIR})
link_directories(${Boost_LIBRARY_DIRS})

find_package(PNG REQUIRED)

if(WIN32)
  if(VCPKG_BUILD)
    find_package(SDL2 CONFIG REQUIRED)
    find_path(SDL2_INCLUDE_DIRS SDL2/SDL.h)
    find_path(SDL2IMAGE_INCLUDE_DIRS SDL2/SDL_image.h)
    set(SDL2_INCLUDE_DIRS ${SDL2_INCLUDE_DIRS}/SDL2)
    set(SDL2IMAGE_INCLUDE_DIRS ${SDL2IMAGE_INCLUDE_DIRS}/SDL2)
    find_library(SDL2_LIBRARIES SDL2)
    find_library(SDL2IMAGE_LIBRARIES SDL2_image)
    find_library(SDL2MAIN_LIBRARIES SDL2main)
    message(STATUS ""SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIRS}"")
  else(VCPKG_BUILD)
    find_path(SDL2_INCLUDE_DIRS NAMES SDL.h PATHS ""${DEPENDENCY_FOLDER}/include/SDL2"")
    find_path(SDL2IMAGE_INCLUDE_DIRS NAMES SDL_image.h PATHS ""${DEPENDENCY_FOLDER}/include/SDL2_image"")
    find_library(SDL2_LIBRARIES NAMES SDL2 PATHS ""${DEPENDENCY_FOLDER}/lib"")
    find_library(SDL2IMAGE_LIBRARIES NAMES SDL2_image PATHS ""${DEPENDENCY_FOLDER}/lib"")
    find_library(SDL2MAIN_LIBRARIES NAMES SDL2main PATHS ""${DEPENDENCY_FOLDER}/lib"")
    find_path(PHYSFS_INCLUDE_DIR NAMES physfs.h PATHS ""${DEPENDENCY_FOLDER}/include/physfs"")
  endif(VCPKG_BUILD)

else(WIN32)
  include(FindPkgConfig)
  pkg_search_module(SDL2 REQUIRED sdl2>=2.0.1)
  pkg_search_module(SDL2IMAGE REQUIRED SDL2_image>=2.0.0)
endif(WIN32)
set(HAVE_SDL TRUE)

option(IS_SUPERTUX_RELEASE ""Build as official SuperTux release"" OFF)
option(BUILD_TESTS ""Build test cases"" OFF)
option(ENABLE_OPENGL ""Enable OpenGL support"" ON)
option(ENABLE_OPENGLES2 ""Enable OpenGLES2 support"" OFF)
option(GLBINDING_ENABLED ""Use glbinding instead of GLEW"" OFF)
option(GLBINDING_DEBUG_OUTPUT ""Enable glbinding debug output for each called OpenGL function"" OFF)
if(ENABLE_OPENGL)
  if(ENABLE_OPENGLES2)
    pkg_check_modules(GLESV2 REQUIRED glesv2)
    set(HAVE_OPENGL TRUE)
    set(OPENGL_INCLUDE_DIR  ${GLESV2_INCLUDE_DIRS})
    set(OPENGL_LIBRARY ${GLESV2_LIBRARIES})
    add_definitions(-DUSE_OPENGLES2)
  else()
    set(OpenGL_GL_PREFERENCE ""LEGACY"")
    find_package(OpenGL)
    if(OPENGL_FOUND)
      include_directories(SYSTEM ${OPENGL_INCLUDE_DIR})
      set(HAVE_OPENGL TRUE)
    endif(OPENGL_FOUND)

    if(GLBINDING_ENABLED)
      find_package(GLBINDING REQUIRED)
      if(GLBINDING_FOUND)
        include_directories(SYSTEM ${GLBINDING_INCLUDES})
        add_definitions(-DUSE_GLBINDING)
        IF (GLBINDING_DEBUG_OUTPUT)
          add_definitions(-DUSE_GLBINDING_DEBUG_OUTPUT)
        endif()
      endif()
    else()
      find_package(GLEW REQUIRED)
      if(GLEW_FOUND)
        include_directories(SYSTEM ${GLEW_INCLUDE_DIR})
      endif(GLEW_FOUND)
    endif()
  endif()
endif(ENABLE_OPENGL)

if(VCPKG_BUILD)
  find_package(OpenAL CONFIG REQUIRED)
else()
  find_package(OpenAL REQUIRED)
endif()
include_directories(SYSTEM ${OPENAL_INCLUDE_DIR})

find_package(OggVorbis REQUIRED)
include_directories(SYSTEM ${VORBIS_INCLUDE_DIR})

include(CheckSymbolExists)

find_package(PhysFS)
if(PHYSFS_LIBRARY)
  set(CMAKE_REQUIRED_LIBRARIES ${PHYSFS_LIBRARY})
  check_symbol_exists(""PHYSFS_getPrefDir"" ""${PHYSFS_INCLUDE_DIR}/physfs.h"" HAVE_PHYSFS_GETPREFDIR)
endif()
if(HAVE_PHYSFS_GETPREFDIR)
  set(USE_SYSTEM_PHYSFS ON CACHE BOOL ""Use preinstalled physfs (must support getPrefDir)"")
else(HAVE_PHYSFS_GETPREFDIR)
  set(USE_SYSTEM_PHYSFS OFF CACHE BOOL ""Use preinstalled physfs (must support getPrefDir)"")
endif(HAVE_PHYSFS_GETPREFDIR)

if(NOT USE_SYSTEM_PHYSFS)
  if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/external/physfs/CMakeLists.txt)
    message(FATAL_ERROR ""physfs submodule is not checked out or ${CMAKE_CURRENT_SOURCE_DIR}/external/physfs/CMakeLists.txt is missing"")
  endif()

  if(WIN32)
    set(PHYSFS_BUILD_SHARED TRUE)
    set(PHYSFS_BUILD_STATIC FALSE)
  else(WIN32)
    set(PHYSFS_BUILD_SHARED FALSE)
    set(PHYSFS_BUILD_STATIC TRUE)
  endif()

  set(PHYSFS_PREFIX ${CMAKE_BINARY_DIR}/physfs/)
  ExternalProject_Add(physfs
    SOURCE_DIR ""${CMAKE_SOURCE_DIR}/external/physfs/""
    CMAKE_ARGS
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
    -DCMAKE_INSTALL_PREFIX=${PHYSFS_PREFIX}
    -DLIB_SUFFIX=${LIB_SUFFIX}
    -DPHYSFS_BUILD_SHARED=${PHYSFS_BUILD_SHARED}
    -DPHYSFS_BUILD_STATIC=${PHYSFS_BUILD_STATIC}
    -DPHYSFS_BUILD_TEST=FALSE)

  if(WIN32)
    add_library(physfs_lib SHARED IMPORTED)
    set_target_properties(physfs_lib PROPERTIES IMPORTED_LOCATION ""${PHYSFS_PREFIX}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}physfs${CMAKE_SHARED_LIBRARY_SUFFIX}"")
    set_target_properties(physfs_lib PROPERTIES IMPORTED_IMPLIB ""${PHYSFS_PREFIX}/lib${LIB_SUFFIX}/physfs${CMAKE_LINK_LIBRARY_SUFFIX}"")
  else()
    add_library(physfs_lib STATIC IMPORTED)
    set_target_properties(physfs_lib PROPERTIES IMPORTED_LOCATION ""${PHYSFS_PREFIX}/lib${LIB_SUFFIX}/${CMAKE_STATIC_LIBRARY_PREFIX}physfs${CMAKE_STATIC_LIBRARY_SUFFIX}"")
  endif()
  set(PHYSFS_INCLUDE_DIR ""${PHYSFS_PREFIX}/include/"")
endif()

include_directories(BEFORE SYSTEM ${PHYSFS_INCLUDE_DIR})


## The curl headers are in the standard include path in dependencies
## so it's not required to add them here
find_package(CURL REQUIRED)
if(WIN32 AND VCPKG_BUILD)
  list(LENGTH CURL_LIBRARY CURL_LIBRARY_LENGTH)
  if (CURL_LIBRARY_LENGTH EQUAL 1)
    set(CURL_LIBRARY_DEBUG_LIB   ${CURL_LIBRARY})
      set(CURL_LIBRARY_RELEASE_LIB ${CURL_LIBRARY_DEBUG_LIB}/../../../lib/libcurl.lib)
      get_filename_component(CURL_LIBRARY_RELEASE_LIB ${CURL_LIBRARY_RELEASE_LIB} REALPATH)
      unset(CURL_LIBRARY CACHE)
      unset(CURL_LIBRARY)
      unset(CURL_LIBRARIES  CACHE)
      unset(CURL_LIBRARIES)
      set(CURL_LIBRARY ""debug;${CURL_LIBRARY_DEBUG_LIB};optimized;${CURL_LIBRARY_RELEASE_LIB}"")
      set(CURL_LIBRARIES ${CURL_LIBRARY})
  endif()
endif()
if(CURL_FOUND)
  include_directories(SYSTEM ${CURL_INCLUDE_DIR})
  set(HAVE_LIBCURL TRUE)
endif(CURL_FOUND)

#find_package(ICONV REQUIRED)
#include_directories(SYSTEM ${ICONV_INCLUDE_DIR})
#link_libraries(${ICONV_LIBRARY})

if(EXISTS ""${CMAKE_SOURCE_DIR}/.git"")
  ## Find revision of WC
  mark_as_advanced(GIT_EXECUTABLE)
  find_program(GIT_EXECUTABLE git)
  if(NOT GIT_EXECUTABLE EQUAL ""GIT_EXECUTABLE-NOTFOUND"")
    include(GetGitRevisionDescription)
    git_describe(VERSION_STRING_GIT ""--tags"" ""--match"" ""?[0-9]*.[0-9]*.[0-9]*"")
    string(REPLACE ""v"" """" VERSION_LIST ${VERSION_STRING_GIT})
    string(REGEX REPLACE ""(-|_|\\.)"" "";"" VERSION_LIST "";${VERSION_LIST}"")
  endif()
endif(EXISTS ""${CMAKE_SOURCE_DIR}/.git"")

get_filename_component(BASEDIR ${CMAKE_SOURCE_DIR} NAME)
if(""${VERSION_LIST}"" STREQUAL """")
  if(${BASEDIR} MATCHES ""supertux2-[0-9\\.]*"")
    string(REGEX REPLACE ""(\\.|_|-)"" "";"" VERSION_LIST ${BASEDIR})
  endif()
endif()

file(GLOB ORIG_TGZ ../*.orig.tar.gz)
if(""${VERSION_LIST}"" STREQUAL """" AND (NOT ""${ORIG_TGZ}"" STREQUAL """"))
  get_filename_component(BASEDIR ${ORIG_TGZ} NAME)
  string(REGEX REPLACE ""(\\.|_|-)"" "";"" VERSION_LIST ${BASEDIR})
endif()

list(LENGTH VERSION_LIST VERSION_LIST_SIZE)

if(${VERSION_LIST_SIZE} GREATER 0)
  list(GET VERSION_LIST 1 MAJOR_VERSION_GIT)
  list(GET VERSION_LIST 2 MINOR_VERSION_GIT)
  list(GET VERSION_LIST 3 PATCH_VERSION_GIT)

  if(""${VERSION_STRING_GIT}"" STREQUAL """")
    set(VERSION_STRING_GIT ""${MAJOR_VERSION_GIT}.${MINOR_VERSION_GIT}.${PATCH_VERSION_GIT}"")
  endif()

  configure_file(""${CMAKE_SOURCE_DIR}/version.cmake.in"" ""${CMAKE_SOURCE_DIR}/version.cmake"")
endif()
if(NOT EXISTS ""${CMAKE_SOURCE_DIR}/version.cmake"")
  message( SEND_ERROR ""Cound not find GIT or valid version.cmake. Version information will be invalid."" )
endif(NOT EXISTS ""${CMAKE_SOURCE_DIR}/version.cmake"")
include(""${CMAKE_SOURCE_DIR}/version.cmake"")


set(SUPERTUX_VERSION ${SUPERTUX_VERSION_STRING})

configure_file(version.h.in ${CMAKE_BINARY_DIR}/version.h )

set_source_files_properties(${CMAKE_BINARY_DIR}/version.h
  PROPERTIES GENERATED true)
set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/src/supertux/main.cpp
  PROPERTIES OBJECT_DEPENDS ""${CMAKE_BINARY_DIR}/version.h"")
set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/src/supertux/title_screen.cpp
  PROPERTIES OBJECT_DEPENDS ""${CMAKE_BINARY_DIR}/version.h"")
set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/src/addon/addon_manager.cpp
  PROPERTIES OBJECT_DEPENDS ""${CMAKE_BINARY_DIR}/version.h"")

## Configure doxygen
# Adapted from https://tty1.net/blog/2014/cmake-doxygen_en.html
# add a target to generate API documentation with Doxygen
find_package(Doxygen)
option(BUILD_DOCUMENTATION ""Build API documentation using Doxygen"" ${DOXYGEN_FOUND})

if(BUILD_DOCUMENTATION)
  if(NOT DOXYGEN_FOUND)
    message(FATAL_ERROR ""Doxygen is needed to build the documentation."")
  endif()

  set(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
  set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile)

  configure_file(${doxyfile_in} ${doxyfile} @ONLY)

  add_custom_target(doc
    COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating API documentation with Doxygen""
    VERBATIM)
endif()

## Check platform-dependent build options

include(ConfigureChecks)

# Include altivec wrapper on ppc
if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^ppc.*"")
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/ppc)
endif()


## Also build external/squirrel

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/external/squirrel/CMakeLists.txt)
  message(FATAL_ERROR ""squirrel submodule is not checked out or ${CMAKE_CURRENT_SOURCE_DIR}/external/squirrel/CMakeLists.txt is missing"")
endif()

set(SQUIRREL_PREFIX ${CMAKE_BINARY_DIR}/squirrel/ex)
ExternalProject_Add(squirrel
  SOURCE_DIR ""${CMAKE_SOURCE_DIR}/external/squirrel/""
  CMAKE_ARGS
  -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
  -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
  -DCMAKE_INSTALL_PREFIX=${SQUIRREL_PREFIX}
  -DINSTALL_INC_DIR=include)

if(WIN32)
  add_library(squirrel_lib SHARED IMPORTED)
  set_target_properties(squirrel_lib PROPERTIES IMPORTED_LOCATION ""${SQUIRREL_PREFIX}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}squirrel${CMAKE_SHARED_LIBRARY_SUFFIX}"")
  set_target_properties(squirrel_lib PROPERTIES IMPORTED_IMPLIB ""${SQUIRREL_PREFIX}/lib/squirrel${CMAKE_LINK_LIBRARY_SUFFIX}"")
  add_library(sqstdlib_lib SHARED IMPORTED)
  set_target_properties(sqstdlib_lib PROPERTIES IMPORTED_LOCATION ""${SQUIRREL_PREFIX}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}sqstdlib${CMAKE_SHARED_LIBRARY_SUFFIX}"")
  set_target_properties(sqstdlib_lib PROPERTIES IMPORTED_IMPLIB ""${SQUIRREL_PREFIX}/lib/sqstdlib${CMAKE_LINK_LIBRARY_SUFFIX}"")

  #For debug run purposes
  configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/mk/msvc/run_supertux.bat.in"" ""${PROJECT_BINARY_DIR}/run_supertux.bat"")
else()
  add_library(squirrel_lib STATIC IMPORTED)
  set_target_properties(squirrel_lib PROPERTIES IMPORTED_LOCATION ""${SQUIRREL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}squirrel_static${CMAKE_STATIC_LIBRARY_SUFFIX}"")
  add_library(sqstdlib_lib STATIC IMPORTED)
  set_target_properties(sqstdlib_lib PROPERTIES IMPORTED_LOCATION ""${SQUIRREL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}sqstdlib_static${CMAKE_STATIC_LIBRARY_SUFFIX}"")
endif()

include_directories(SYSTEM ${SQUIRREL_PREFIX}/include)

## Also build external/tinygettext

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/external/tinygettext/CMakeLists.txt)
  message(FATAL_ERROR ""tinygettext submodule is not checked out or ${CMAKE_CURRENT_SOURCE_DIR}/external/tinygettext/CMakeLists.txt is missing"")
endif()

# Include altivec wrapper on ppc
if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^ppc.*"")
  set(TINYGETTEXT_CXX_FLAGS ""-isystem ${CMAKE_CURRENT_SOURCE_DIR}/src/ppc ${CMAKE_CXX_FLAGS}"")
else()
  set(TINYGETTEXT_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
endif()

set(TINYGETTEXT_PREFIX ${CMAKE_BINARY_DIR}/tinygettext/)
ExternalProject_Add(tinygettext
  SOURCE_DIR ""${CMAKE_SOURCE_DIR}/external/tinygettext/""
  CMAKE_ARGS
  -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
  -DCMAKE_CXX_FLAGS=${TINYGETTEXT_CXX_FLAGS}
  -DBUILD_SHARED_LIBS=OFF
  -DHAVE_SDL=ON
  -DVCPKG_BUILD=${VCPKG_BUILD}
  -DCMAKE_INSTALL_PREFIX=${TINYGETTEXT_PREFIX}
  -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
  -DSDL2_LIBRARIES=${SDL2_LIBRARIES}
  -DSDL2_INCLUDE_DIRS=${SDL2_INCLUDE_DIRS}
  -DLIB_SUFFIX=${LIB_SUFFIX})

add_library(tinygettext_lib STATIC IMPORTED)
set_target_properties(tinygettext_lib PROPERTIES IMPORTED_LOCATION ""${TINYGETTEXT_PREFIX}/lib${LIB_SUFFIX}/${CMAKE_STATIC_LIBRARY_PREFIX}tinygettext${CMAKE_STATIC_LIBRARY_SUFFIX}"")

include_directories(SYSTEM ${TINYGETTEXT_PREFIX}/include)


## external/SDL_ttf with patches
find_package(Freetype REQUIRED)
find_package(RAQM)
set(SDL_TTF_PREFIX ${CMAKE_BINARY_DIR}/SDL_ttf/)
ExternalProject_Add(SDL_ttf
  SOURCE_DIR ""${CMAKE_SOURCE_DIR}/external/SDL_ttf/""
  CMAKE_ARGS
  -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
  -DCMAKE_INSTALL_PREFIX=${SDL_TTF_PREFIX}
  -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
  -DWITH_RAQM=${RAQM_FOUND}
  -DRAQM_LIBRARIES=${RAQM_LIBRARY}
  -DRAQM_INCLUDE_DIR=${RAQM_INCLUDE_DIR}
  -DBUILD_SHARED_LIBS=OFF)
add_library(SDL_ttf_lib STATIC IMPORTED)
set_target_properties(SDL_ttf_lib PROPERTIES IMPORTED_LOCATION ""${SDL_TTF_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}SDL2_ttf${CMAKE_STATIC_LIBRARY_SUFFIX}"")
link_directories(${SDL_TTF_PREFIX}/lib)
include_directories(SYSTEM ${SDL_TTF_PREFIX}/include/SDL2)
if(RAQM_FOUND)
  find_package(Fribidi REQUIRED)
  find_package(Harfbuzz REQUIRED)
  set_target_properties(SDL_ttf_lib PROPERTIES INTERFACE_LINK_LIBRARIES ""${RAQM_LIBRARIES}"")
endif()

## Some additional include paths

include_directories(${CMAKE_BINARY_DIR}/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/findlocale/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/obstack/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/sexp-cpp/include/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/SDL_SavePNG/)

if(WIN32)
  add_definitions(-D_USE_MATH_DEFINES -DNOMINMAX)
  add_definitions(-DWIN32)
endif(WIN32)

## Lint

if(CMAKE_VERSION VERSION_GREATER 3.6)
  if (USE_CLANG_TIDY)
    find_program(
      CLANG_TIDY_EXE
      NAMES ""clang-tidy""
      DOC ""Path to clang-tidy executable""
      )

    if(NOT CLANG_TIDY_EXE)
      message(FATAL_ERROR ""clang-tidy not found."")
    else()
      message(STATUS ""clang-tidy found: ${CLANG_TIDY_EXE}"")
      set(CMAKE_CXX_CLANG_TIDY ""${CLANG_TIDY_EXE}"")
    endif()
  endif()
endif()

## Build list of sources for supertux binary

file(GLOB SUPERTUX_SOURCES_C RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} external/obstack/*.c external/findlocale/findlocale.c)

file(GLOB SUPERTUX_SOURCES_CXX RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} src/*/*.cpp src/supertux/menu/*.cpp src/video/sdl/*.cpp src/video/null/*.cpp)
file(GLOB SUPERTUX_RESOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ""${PROJECT_BINARY_DIR}/tmp/*.rc"")

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/external/sexp-cpp/CMakeLists.txt)
  message(FATAL_ERROR ""sexp-cpp submodule is not checked out or ${CMAKE_CURRENT_SOURCE_DIR}/external/sexp-cpp/CMakeLists.txt is missing"")
endif()
file(GLOB SEXP_SOURCES_CXX RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} external/sexp-cpp/src/*.cpp)
add_library(sexp STATIC ${SEXP_SOURCES_CXX})
target_compile_definitions(sexp PRIVATE -DSEXP_USE_LOCALE)

file(GLOB SAVEPNG_SOURCES_CXX RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} external/SDL_SavePNG/savepng.c)
add_library(savepng STATIC ${SAVEPNG_SOURCES_CXX})
target_include_directories(savepng SYSTEM PUBLIC ${SDL2_INCLUDE_DIRS} ${PNG_INCLUDE_DIRS})
target_link_libraries(savepng PUBLIC ${PNG_LIBRARIES})

if(HAVE_OPENGL)
  file(GLOB SUPERTUX_OPENGL_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} src/video/gl/*.cpp)
  set(SUPERTUX_SOURCES_CXX ${SUPERTUX_SOURCES_CXX} ${SUPERTUX_OPENGL_SOURCES})
endif(HAVE_OPENGL)

## Sort source lists to have deterministic linking order
list(SORT SUPERTUX_SOURCES_C)
list(SORT SUPERTUX_SOURCES_CXX)
list(SORT SUPERTUX_RESOURCES)

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.cpp)
  set(SUPERTUX_SOURCES_CXX ${SUPERTUX_SOURCES_CXX} ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.cpp)
endif(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.cpp)

## Compile everything at once (roughly equivalent to cat *.cpp | gcc)

option(COMPILE_AMALGATION ""Compile all the files together at once (experimental)"" OFF)
if(COMPILE_AMALGATION)
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp ""// Includes all source files of the project\n"")
  foreach(ST_FILE ${SUPERTUX_SOURCES_CXX})
    file(RELATIVE_PATH CXX_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src ""${CMAKE_CURRENT_SOURCE_DIR}/${ST_FILE}"")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp ""#include \""${CXX_FILE}\""\n"")
  endforeach(ST_FILE)
  ## Build instead of CXX sources
  set(SUPERTUX_SOURCES_CXX ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp)
else(COMPILE_AMALGATION)
  if(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp)
    file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp)
  endif(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/amalgation.cpp)
endif(COMPILE_AMALGATION)

## Debug options

option(WERROR ""Stop on first compiler warning"" OFF)
option(WARNINGS ""Enable long list of warnings for compiler to check"" OFF)
option(USE_CLANG_TIDY ""Run clang-tidy"" OFF)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_CXX_FLAGS_DEBUG ""-O0 -g"" CACHE STRING ""Debug flags"")
  set(CMAKE_C_FLAGS_DEBUG ""-O0 -g"" CACHE STRING ""Debug flags"")
  set(CMAKE_CXX_FLAGS_PROFILE ""-pg"" CACHE STRING ""Profile flags"")
  set(CMAKE_C_FLAGS_PROFILE ""-pg"" CACHE STRING ""Profile flags"")
  set(CMAKE_LD_FLAGS_PROFILE ""-lgmon"" CACHE STRING ""Profile flags"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter -funit-at-a-time"")
  if(WERROR)
    add_definitions(-Werror)
  else(WERROR)
    remove_definitions(-Werror)
  endif(WERROR)
  if(WARNINGS)
    # temporarily disabled:
    #   -Wsign-conversion -Wfloat-equal -Wundef -Wswitch-default
    #   -Wswitch-enum -Wsign-promo -Wcast-qual -Woverloaded-virtual -Wmissing-format-attribute
    #   -Wpadded -Wabi -Winline -Wunsafe-loop-optimizations -Wstrict-overflow=5
    # fails on MinGW:
    #   -ansi
    if(CMAKE_COMPILER_IS_GNUCXX)
      string(CONCAT SUPERTUX2_EXTRA_WARNING_FLAGS
        ""-fdiagnostics-show-option ""
        ""-pedantic ""
        ""-Wno-long-long ""
        ""-Wcast-align ""
        ""-Wdisabled-optimization ""
        ""-Winit-self -Winvalid-pch ""
        ""-Wmissing-include-dirs ""
        ""-Wmissing-noreturn ""
        ""-Wpacked -Wredundant-decls ""
        ""-Wformat=2 ""
        ""-Weffc++ ""
        ""-Wctor-dtor-privacy ""
        ""-Wno-unused-parameter ""
        ""-Wshadow ""
        ""-Wnon-virtual-dtor ""
        ""-Wcast-qual ""
        ""-Wold-style-cast ""
        ""-Wzero-as-null-pointer-constant ""
        ""-Wconversion ""
        ""-Wlogical-op ""
        ""-Wstrict-null-sentinel ""
        ""-Wsuggest-override ""
        )
      if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 8)
        string(CONCAT SUPERTUX2_EXTRA_WARNING_FLAGS
          ""${SUPERTUX2_EXTRA_WARNING_FLAGS} ""
          ""-Wint-in-bool-context ""
          )
      endif()
      if(Boost_VERSION LESS 106500)
        string(CONCAT SUPERTUX2_EXTRA_WARNING_FLAGS
          ""${SUPERTUX2_EXTRA_WARNING_FLAGS} ""
          ""-Wno-implicit-fallthrough "")
      endif()
    elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
      string(CONCAT SUPERTUX2_EXTRA_WARNING_FLAGS
        ""${SUPERTUX2_EXTRA_WARNING_FLAGS} ""
        ""-Weverything ""

        # flags that we deliberately ignore
        ""-Wno-c++98-compat ""
        ""-Wno-c++98-compat-pedantic ""
        ""-Wno-float-equal ""
        ""-Wno-padded ""
        ""-Wno-weak-vtables ""
        ""-Wno-disabled-macro-expansion ""
        ""-Wno-documentation ""
        ""-Wno-reserved-id-macro ""
        ""-Wno-sign-conversion ""

        # warnings that should probably be fixed in code
        ""-Wno-documentation-unknown-command ""
        ""-Wno-inconsistent-missing-destructor-override ""
        ""-Wno-deprecated-dynamic-exception-spec ""
        ""-Wno-deprecated ""
        ""-Wno-switch-enum ""
        ""-Wno-covered-switch-default ""
        ""-Wno-exit-time-destructors ""
        ""-Wno-global-constructors ""
        ""-Wno-duplicate-enum ""
        ""-Wno-unreachable-code ""
      )
    endif()
  endif(WARNINGS)
endif()

## If xgettext is available, generate messages.pot for sources

option(GENERATE_MESSAGESPOT ""Generate messages.pot files"" OFF)
if(GENERATE_MESSAGESPOT)
  mark_as_advanced(
    XGETTEXT_EXECUTABLE
    )
  find_program(XGETTEXT_EXECUTABLE xgettext)
  if(NOT XGETTEXT_EXECUTABLE)
    message(STATUS ""Warning: xgettext not found - will not update messages.pot"")
  else(NOT XGETTEXT_EXECUTABLE)
    message(STATUS ""Found xgettext: ${XGETTEXT_EXECUTABLE}"")

    set(MESSAGES_POT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/data/locale/messages.pot)
    add_custom_command(
      OUTPUT ${MESSAGES_POT_FILE}
      COMMAND ${XGETTEXT_EXECUTABLE}
      ARGS --keyword=_ --language=C++ --output=${MESSAGES_POT_FILE} ${SUPERTUX_SOURCES_CXX}
      DEPENDS ${SUPERTUX_SOURCES_CXX}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      COMMENT ""Generating POT file ${MESSAGES_POT_FILE}""
      )
    list(APPEND MESSAGES_POT_FILES ${MESSAGES_POT_FILE})

    file(GLOB SUPERTUX_LEVEL_DIRS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} data/levels/*)
    foreach(SUPERTUX_LEVEL_DIR ${SUPERTUX_LEVEL_DIRS})
      file(GLOB SUPERTUX_LEVELS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${SUPERTUX_LEVEL_DIR}/*.stl ${SUPERTUX_LEVEL_DIR}/*.stwm ${SUPERTUX_LEVEL_DIR}/*.txt)

      ## Do not add target if SUPERTUX_LEVELS is empty. This is needed for cmake <=2.4
      if(SUPERTUX_LEVELS)
        set(MESSAGES_POT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${SUPERTUX_LEVEL_DIR}/messages.pot)
        add_custom_command(
          OUTPUT ${MESSAGES_POT_FILE}
          COMMAND ${XGETTEXT_EXECUTABLE}
          ARGS --keyword=""_:1"" --language=Lisp --force-po --sort-by-file ""--output=${MESSAGES_POT_FILE}"" ${SUPERTUX_LEVELS}
          DEPENDS ${SUPERTUX_LEVELS}
          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
          COMMENT ""Generating POT file ${MESSAGES_POT_FILE}""
          )
        list(APPEND MESSAGES_POT_FILES ${MESSAGES_POT_FILE})
      endif(SUPERTUX_LEVELS)

    endforeach(SUPERTUX_LEVEL_DIR)

    add_custom_target(
      supertux2-messages ALL
      DEPENDS ${MESSAGES_POT_FILES}
      )

  endif(NOT XGETTEXT_EXECUTABLE)
endif(GENERATE_MESSAGESPOT)

## Some additional compiler switches
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing"")
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
  add_definitions(-DMACOSX)
endif(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")


## On Windows, add an icon

if(WIN32)
  #  set(SUPERTUX_SOURCES_C ${SUPERTUX_SOURCES_C} ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.rc)
  if(MINGW)
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/supertux_rc.o
      COMMAND ${CMAKE_RC_COMPILER} -I${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons -i${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.rc -o ${CMAKE_CURRENT_BINARY_DIR}/supertux_rc.o)
    set(SUPERTUX_SOURCES_C ${SUPERTUX_SOURCES_C} ${CMAKE_CURRENT_BINARY_DIR}/supertux_rc.o)
  endif(MINGW)
endif(WIN32)

## Build miniswig and generate miniswig wrapper

option(GENERATE_WRAPPER ""Build miniswig and generate the wrapper"" OFF)
if(GENERATE_WRAPPER)
  add_subdirectory(tools/miniswig)
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.hpp
    COMMAND cd ${CMAKE_CURRENT_SOURCE_DIR} && ${CMAKE_CXX_COMPILER}
    ARGS -x ""c++"" -E -CC -DSCRIPTING_API src/scripting/wrapper.interface.hpp -o ${CMAKE_CURRENT_BINARY_DIR}/miniswig.tmp -I${CMAKE_CURRENT_SOURCE_DIR}/src
    COMMAND tools/miniswig/miniswig
    ARGS --input miniswig.tmp --output-cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.cpp --output-hpp ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.hpp --module supertux --select-namespace scripting
    DEPENDS tools/miniswig/miniswig
    IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/src/scripting/wrapper.interface.hpp
    )
  if(USE_CLANG_TIDY)
    set_target_properties(miniswig PROPERTIES CXX_CLANG_TIDY """")
  endif()
endif(GENERATE_WRAPPER)

## Generate supertux executable in the right place

#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

## Add target for supertux binary

add_library(supertux2_c OBJECT ${SUPERTUX_SOURCES_C})
add_library(supertux2_lib STATIC ${CMAKE_BINARY_DIR}/version.h ${SUPERTUX_SOURCES_CXX} ${SUPERTUX_RESOURCES} $<TARGET_OBJECTS:supertux2_c>)
if(WIN32)
  add_executable(supertux2 WIN32 src/main.cpp ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.rc)
  target_link_libraries(supertux2 ${SDL2MAIN_LIBRARIES})
else()
  add_executable(supertux2 src/main.cpp)
endif(WIN32)
target_link_libraries(supertux2 supertux2_lib Boost::filesystem Boost::locale)
set_target_properties(supertux2_lib PROPERTIES OUTPUT_NAME supertux2_lib)
set_target_properties(supertux2_lib PROPERTIES COMPILE_FLAGS ""${SUPERTUX2_EXTRA_WARNING_FLAGS}"")

if(WIN32 AND NOT VCPKG_BUILD)
  ## Copy dlls on windows
  add_custom_command(TARGET supertux2_lib POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ""${DEPENDENCY_FOLDER}/dll""
    $<TARGET_FILE_DIR:supertux2_lib>)
endif(WIN32 AND NOT VCPKG_BUILD)

## Link supertux binary with squirrel and other libraries

add_dependencies(supertux2_lib tinygettext)
add_dependencies(supertux2_lib squirrel)
add_dependencies(supertux2_lib SDL_ttf)

if(VCPKG_BUILD)
  target_include_directories(supertux2_lib PUBLIC ${CURL_INCLUDE_DIRS})
endif()

target_include_directories(supertux2_lib SYSTEM PUBLIC ${SDL2_INCLUDE_DIRS})
target_include_directories(supertux2_lib SYSTEM PUBLIC ${SDL2IMAGE_INCLUDE_DIRS})
target_include_directories(supertux2_lib SYSTEM PUBLIC ${SDL_TTF_PREFIX}/include/SDL2)
if(VCPKG_BUILD)
  target_link_libraries(supertux2_lib PRIVATE SDL2::SDL2main SDL2::SDL2 SDL2_image)
else()
  target_link_libraries(supertux2_lib PUBLIC ${SDL2_LIBRARIES})
  target_link_libraries(supertux2_lib PUBLIC ${SDL2IMAGE_LIBRARIES})
endif()
target_link_libraries(supertux2_lib PUBLIC SDL_ttf_lib)
target_link_libraries(supertux2_lib PUBLIC ${FREETYPE_LIBRARIES})

if(RAQM_FOUND)
  target_link_libraries(supertux2_lib PUBLIC ${HARFBUZZ_LIBRARY} ${FRIBIDI_LIBRARY} ${RAQM_LIBRARY})
endif()

target_link_libraries(supertux2_lib PUBLIC squirrel_lib)
target_link_libraries(supertux2_lib PUBLIC sqstdlib_lib)
target_link_libraries(supertux2_lib PUBLIC tinygettext_lib)
target_link_libraries(supertux2_lib PUBLIC sexp)
target_link_libraries(supertux2_lib PUBLIC savepng)
if(VCPKG_BUILD)
  target_link_libraries(supertux2_lib PUBLIC OpenAL::OpenAL)
else()
  target_link_libraries(supertux2_lib PUBLIC ${OPENAL_LIBRARY})
endif()
target_link_libraries(supertux2_lib PUBLIC ${OGGVORBIS_LIBRARIES})
target_link_libraries(supertux2_lib PUBLIC ${Boost_LIBRARIES})
if(USE_SYSTEM_PHYSFS)
  target_link_libraries(supertux2_lib PUBLIC ${PHYSFS_LIBRARY})
else()
  add_dependencies(supertux2_lib physfs)
  target_link_libraries(supertux2_lib PUBLIC physfs_lib)
  if(APPLE)
    target_link_libraries(supertux2_lib PUBLIC ""-framework CoreFoundation"")
    target_link_libraries(supertux2_lib PUBLIC ""-framework Foundation"")
    target_link_libraries(supertux2_lib PUBLIC ""-framework IOKit"")
  endif()
endif()

if(HAVE_OPENGL)
  target_link_libraries(supertux2_lib PUBLIC ${OPENGL_LIBRARY})
  if(NOT ENABLE_OPENGLES2)
    if(GLBINDING_FOUND)
      target_link_libraries(supertux2_lib PUBLIC ${GLBINDING_LIBRARIES})
    else()
      target_link_libraries(supertux2_lib PUBLIC GLEW::GLEW)
    endif()
  endif()
endif(HAVE_OPENGL)

if(HAVE_LIBCURL)
  if(VCPKG_BUILD)
    target_link_libraries(supertux2_lib PUBLIC ${CURL_LIBRARIES})
  else()
    target_link_libraries(supertux2_lib PUBLIC ${CURL_LIBRARY})
  endif()
endif(HAVE_LIBCURL)

if(BUILD_TESTS)
  find_package(Threads REQUIRED)

  # build gtest
  # ${CMAKE_CURRENT_SOURCE_DIR} in include_directories is needed to generate -isystem instead of -I flags
  add_library(gtest_main STATIC ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest/googletest/src/gtest_main.cc)
  target_include_directories(gtest_main SYSTEM PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest/googletest/include/)
  add_library(gtest STATIC ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest/googletest/src/gtest-all.cc)
  target_include_directories(gtest SYSTEM PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest/googletest/)
  target_include_directories(gtest SYSTEM PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest/googletest/include/)

  # build SuperTux tests
  file(GLOB TEST_SUPERTUX_SOURCES tests/*.cpp)
  add_executable(test_supertux2 ${TEST_SUPERTUX_SOURCES})
  target_compile_options(test_supertux2 PRIVATE ${WARNINGS_CXX_FLAGS})
  target_link_libraries(test_supertux2
    gtest gtest_main
    supertux2_lib
    ${CMAKE_THREAD_LIBS_INIT})

  # add 'make test' target, use 'make test ARGS=""-V""' or 'ctest -V' for verbose
  enable_testing()
  add_test(NAME test_supertux2
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND test_supertux2)
endif()

## Install stuff

option(DISABLE_CPACK_BUNDLING ""Build an .app bundle without CPack"" OFF)
if(WIN32 AND NOT UNIX)

  set(INSTALL_SUBDIR_BIN ""bin"" CACHE STRING ""Installation subdir for binaries"")
  set(INSTALL_SUBDIR_SHARE ""data"" CACHE STRING ""Installation subdir for data"")
  set(INSTALL_SUBDIR_DOC ""doc"" CACHE STRING ""Installation subdir for docs"")

  if(VCPKG_BUILD)
    install(DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}/"" DESTINATION ${INSTALL_SUBDIR_BIN} FILES_MATCHING PATTERN ""*.dll"")
  else()
    install(FILES ${DLLS} DESTINATION ${INSTALL_SUBDIR_BIN})
  endif()

  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.png ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.ico DESTINATION ""."")

  option(PACKAGE_VCREDIST ""Package the VCREDIST libraries with the program"" OFF)

  if(PACKAGE_VCREDIST)
    set(CMAKE_INSTALL_UCRT_LIBRARIES true)
    include(InstallRequiredSystemLibraries)
  endif()

else(WIN32 AND NOT UNIX)
  if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND DISABLE_CPACK_BUNDLING)

    set(INFOPLIST_CFBUNDLEEXECUTABLE ""supertux2"")

    set(INSTALL_SUBDIR_BIN ""SuperTux.app/Contents/MacOS"" CACHE STRING ""Installation subdir for binaries"")
    set(INSTALL_SUBDIR_SHARE ""SuperTux.app/Contents/Resources/data"" CACHE STRING ""Installation subdir for data"")
    set(INSTALL_SUBDIR_DOC ""SuperTux.app/Contents/Resources"" CACHE STRING ""Installation subdir for docs"")

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/info.plist.in ${CMAKE_BINARY_DIR}/tools/darwin/info.plist)
    install(FILES ${CMAKE_BINARY_DIR}/tools/darwin/info.plist DESTINATION ""SuperTux.app/Contents/"")
    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/receipt DESTINATION ""SuperTux.app/Contents/_MASReceipt/"")

    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.png ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.icns DESTINATION ""SuperTux.app/Contents/Resources/"")

  else(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND DISABLE_CPACK_BUNDLING)

    set(INSTALL_SUBDIR_BIN ""games"" CACHE STRING ""Installation subdir for binaries"")
    set(INSTALL_SUBDIR_SHARE ""share/games/supertux2"" CACHE STRING ""Installation subdir for data"")
    set(INSTALL_SUBDIR_DOC ""share/doc/supertux2"" CACHE STRING ""Installation subdir for docs"")

    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/supertux2.desktop DESTINATION ""share/applications"")

    set(APPS ""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${INSTALL_SUBDIR_BIN}/supertux2"")

    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.png ${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.xpm DESTINATION ""share/pixmaps/"")
    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/supertux2.svg DESTINATION ""share/icons/hicolor/scalable/apps"")

  endif(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND DISABLE_CPACK_BUNDLING)
endif(WIN32 AND NOT UNIX)

install(TARGETS supertux2 DESTINATION ${INSTALL_SUBDIR_BIN})

if(WIN32)
  get_property(SQUIRREL_LIB_PATH TARGET squirrel_lib PROPERTY IMPORTED_LOCATION)
  get_property(SQSTDLIB_LIB_PATH TARGET sqstdlib_lib PROPERTY IMPORTED_LOCATION)
  get_property(PHYSFS_LIB_PATH TARGET physfs_lib PROPERTY IMPORTED_LOCATION)
  install(FILES ${SQUIRREL_LIB_PATH} ${SQSTDLIB_LIB_PATH} ${PHYSFS_LIB_PATH} DESTINATION ${INSTALL_SUBDIR_BIN})
endif()

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/INSTALL.md ${CMAKE_CURRENT_SOURCE_DIR}/README.md ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt ${CMAKE_CURRENT_SOURCE_DIR}/NEWS.md DESTINATION ${INSTALL_SUBDIR_DOC})

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/credits.stxt DESTINATION ${INSTALL_SUBDIR_SHARE})

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/supertux2.appdata.xml DESTINATION ""share/metainfo"" )

install(DIRECTORY
  ${CMAKE_CURRENT_SOURCE_DIR}/data/images
  ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts
  ${CMAKE_CURRENT_SOURCE_DIR}/data/music
  ${CMAKE_CURRENT_SOURCE_DIR}/data/scripts
  ${CMAKE_CURRENT_SOURCE_DIR}/data/shader
  ${CMAKE_CURRENT_SOURCE_DIR}/data/speech
  ${CMAKE_CURRENT_SOURCE_DIR}/data/sounds
  ${CMAKE_CURRENT_SOURCE_DIR}/data/locale
  DESTINATION ${INSTALL_SUBDIR_SHARE})

if(CMAKE_BUILD_TYPE MATCHES ""Release|RelWithDebInfo"")
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/levels
    DESTINATION ${INSTALL_SUBDIR_SHARE}
    PATTERN ""data/levels/test"" EXCLUDE
    PATTERN ""data/levels/test_old"" EXCLUDE
    PATTERN ""data/levels/incubator"" EXCLUDE
    PATTERN ""data/levels/misc/menu.stl.in"" EXCLUDE)
else()
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/levels
    DESTINATION ${INSTALL_SUBDIR_SHARE}
    PATTERN ""data/levels/misc/menu.stl.in"" EXCLUDE)
endif()

install(FILES ""${CMAKE_BINARY_DIR}/data/levels/misc/menu.stl"" DESTINATION ""${INSTALL_SUBDIR_SHARE}/levels/misc"")

## Create config.h now that INSTALL_SUBDIR_* have been set.

configure_file(config.h.cmake ${CMAKE_BINARY_DIR}/config.h )

## Configure main menu logo
if((""${SUPERTUX_VERSION_STRING}"" MATCHES ""^v[0-9]+\\.[0-9]+\\.[0-9]+$"") OR IS_SUPERTUX_RELEASE)
  set(LOGO_FILE ""logo_final.sprite"")
else()
  set(LOGO_FILE ""logo.sprite"")
endif()
configure_file(data/levels/misc/menu.stl.in ${CMAKE_BINARY_DIR}/data/levels/misc/menu.stl )


## CPack/Installation-specific stuff

include(InstallRequiredSystemLibraries)
set(DIRS ${Boost_LIBRARY_DIRS} ${CMAKE_CURRENT_BINARY_DIR}/external/squirrel ${CMAKE_CURRENT_BINARY_DIR}/external/tinygettext)

if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND NOT DISABLE_CPACK_BUNDLING)
  set(INFOPLIST_CFBUNDLEEXECUTABLE ""SuperTux"")

  find_package(png)
  foreach (_file ${PNG_LIBRARIES})
    get_filename_component(_resolvedFile ""${_file}"" REALPATH)
    get_filename_component(_name ""${_file}"" NAME)
    install(FILES ${_resolvedFile} DESTINATION ""MacOS"" RENAME ${_name})
  endforeach()
  find_package(jpeg)
  foreach (_file ${JPEG_LIBRARIES})
    get_filename_component(_resolvedFile ""${_file}"" REALPATH)
    get_filename_component(_name ""${_file}"" NAME)
    install(FILES ${_resolvedFile} DESTINATION ""MacOS"" RENAME ${_name})
  endforeach()

  install(CODE ""
       if(\""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/\"" MATCHES \"".*\\\\.app.*\"")
       include(BundleUtilities)
       fixup_bundle(\""${APPS}\""   \""\""   \""${DIRS}\"")
       endif()
       "")

  configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/info.plist.in"" ""${CMAKE_BINARY_DIR}/tools/darwin/info.plist"")

  set(CPACK_BUNDLE_NAME ""SuperTux"")
  set(CPACK_BUNDLE_PLIST ""${CMAKE_BINARY_DIR}/tools/darwin/info.plist"")
  set(CPACK_BUNDLE_ICON ""${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.icns"")
  set(CPACK_BUNDLE_STARTUP_COMMAND ""${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/startup.sh"")
  set(CPACK_DMG_VOLUME_NAME ""SuperTux ${SUPERTUX_VERSION_STRING}"")
  set(CPACK_DMG_DS_STORE_SETUP_SCRIPT ""${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/dsstore_setup.scpt"")
  set(CPACK_DMG_BACKGROUND_IMAGE ""${CMAKE_CURRENT_SOURCE_DIR}/tools/darwin/background.png"")
endif()


set(CPACK_PACKAGE_NAME ""SuperTux"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Jump'n'Run Game featuring Tux"")
set(CPACK_PACKAGE_VENDOR ""SuperTux Devel Team"")
set(CPACK_PACKAGE_CONTACT ""SuperTux Devel Team <supertux-devel@lists.lethargik.org>"")
set(CPACK_SOURCE_IGNORE_FILES ""/\\\\.git/;${CMAKE_BINARY_DIR};/\\\\..*"")
set(CPACK_DEBIAN_PACKAGE_NAME ""supertux2"")
set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libc6 (>= 2.5), libgcc1 (>= 1:4.1), libgl1-mesa-glx | libgl1, libogg0 (>= 1.1.3), libopenal0a, libphysfs-1.0-0, libsdl-image1.2 (>= 1.2.5), libsdl1.2debian (>= 1.2.10-1), libstdc++6 (>= 4.1.2), libvorbis0a (>= 1.1.2), libvorbisfile3 (>= 1.1.2), libcurl3 (>= 7.16)"")
set(CPACK_DEBIAN_PACKAGE_DESCRIPTION ""Classic 2D jump 'n run sidescroller with Tux\n SuperTux is a classic 2D jump 'n run sidescroller game in a similar\n style like the original SuperMario games. This release of SuperTux\n features 9 enemies, 26 playable levels, software and OpenGL rendering\n modes, configurable joystick and keyboard input, new music and\n completely redone graphics.\n .\n This is a development snapshot of SuperTux. It may suffer from\n critical bugs and has not been fully tested. \n .\n Homepage: http://supertux.lethargik.org/"")
set(CPACK_DEBIAN_PACKAGE_SECTION ""games"")
set(CPACK_RPM_PACKAGE_NAME ""supertux2"")
set(CPACK_RPM_PACKAGE_DESCRIPTION ""Classic 2D jump 'n run sidescroller with Tux\n SuperTux is a classic 2D jump 'n run sidescroller game in a similar\n style like the original SuperMario games. This release of SuperTux\n features 9 enemies, 26 playable levels, software and OpenGL rendering\n modes, configurable joystick and keyboard input, new music and\n completely redone graphics.\n .\n This is a development snapshot of SuperTux. It may suffer from\n critical bugs and has not been fully tested. \n .\n Homepage: http://supertux.lethargik.org/"")
set(CPACK_RPM_PACKAGE_LICENSE ""GNU General Public License (GPL)"")
set(CPACK_RPM_PACKAGE_GROUP ""Amusements/Games/Action/Arcade"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt"")
set(CPACK_PACKAGE_VERSION_MAJOR ${SUPERTUX_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${SUPERTUX_VERSION_MINOR})

if(SUPERTUX_VERSION_TWEAK)
  set(CPACK_PACKAGE_VERSION_PATCH ""${SUPERTUX_VERSION_PATCH}.${SUPERTUX_VERSION_TWEAK}"")
else()
  set(CPACK_PACKAGE_VERSION_PATCH ${SUPERTUX_VERSION_PATCH})
endif(SUPERTUX_VERSION_TWEAK)
set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}-${SUPERTUX_VERSION_STRING}-${SUPERTUX_SYSTEM_NAME}"")
set(CPACK_SOURCE_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}-${SUPERTUX_VERSION_STRING}-Source"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""SuperTux"")
set(CPACK_PACKAGE_EXECUTABLES ""supertux2"" ""SuperTux"")
if(WIN32 AND NOT UNIX)
  set(CPACK_NSIS_INSTALLED_ICON_NAME ""supertux2"")
  set(CPACK_NSIS_DISPLAY_NAME ""SuperTux"")
  set(CPACK_NSIS_COMPRESSOR ""/SOLID lzma"")
  set(CPACK_WIX_PROGRAM_MENU_FOLDER """")
  set(CPACK_WIX_UPGRADE_GUID ""93E16F4E-0A68-422A-8ADC-47BE5B9433B2"")
  set(CPACK_WIX_PRODUCT_ICON ""${CMAKE_CURRENT_SOURCE_DIR}/data/images/engine/icons/supertux.ico"")

  set(CPACK_WIX_UI_BANNER ""${CMAKE_CURRENT_SOURCE_DIR}/mk/wix/banner.png"")
  set(CPACK_WIX_UI_DIALOG ""${CMAKE_CURRENT_SOURCE_DIR}/mk/wix/dialog.png"")
  set(CPACK_GENERATOR WIX)
else(WIN32 AND NOT UNIX)
endif(WIN32 AND NOT UNIX)
include(CPack)

# move some config clutter to the advanced section
mark_as_advanced(
  INSTALL_SUBDIR_BIN
  INSTALL_SUBDIR_SHARE
  INSTALL_SUBDIR_DOC
  )

mark_as_advanced(
  CMAKE_BACKWARDS_COMPATIBILITY
  CMAKE_BUILD_TYPE
  CMAKE_INSTALL_PREFIX
  EXECUTABLE_OUTPUT_PATH
  LIBRARY_OUTPUT_PATH
  CMAKE_OSX_ARCHITECTURES
  CMAKE_OSX_SYSROOT
  )

mark_as_advanced(
  APPDATADIR
  )

mark_as_advanced(
  Boost_INCLUDE_DIR
  Boost_LIBRARIES
  )

mark_as_advanced(
  GLEW_INCLUDE_DIR
  GLEW_LIBRARY
  )

mark_as_advanced(
  SDL2_INCLUDE_DIRS
  SDL2_LIBRARIES
  )

mark_as_advanced(
  SDL2IMAGE_INCLUDE_DIRS
  SDL2IMAGE_LIBRARIES
  )

mark_as_advanced(
  OPENAL_INCLUDE_DIR
  OPENAL_LIBRARY
)

mark_as_advanced(
  SDL2TTF_INCLUDE_DIRS
  SDL2TTF_LIBRARIES
  )

mark_as_advanced(
  OGG_LIBRARY
  VORBISENC_LIBRARY
  VORBISFILE_LIBRARY
  VORBIS_INCLUDE_DIR
  VORBIS_LIBRARY
  )

mark_as_advanced(
  PHYSFS_INCLUDE_DIR
  PHYSFS_LIBRARY
  )
",3.1,3.1
2855,cxong,cdogs-sdl,False,False,False,False,False,23,C,2020-05-09 09:05:20+00:00,2013-01-12 05:08:52+00:00,344,3372,"cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0054 NEW)
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.6)
project(cdogs-sdl C)

SET(VERSION_MAJOR ""0"")
SET(VERSION_MINOR ""7"")
SET(VERSION_PATCH ""3"")
SET(VERSION ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")

# Optionally configure CI files since they are excluded in source archives
if(EXISTS ${CMAKE_SOURCE_DIR}/.travis.yml.cmake)
	CONFIGURE_FILE(
		${CMAKE_SOURCE_DIR}/.travis.yml.cmake
		${CMAKE_SOURCE_DIR}/.travis.yml
	)
endif()
if(EXISTS ${CMAKE_SOURCE_DIR}/appveyor.yml.cmake)
	CONFIGURE_FILE(
		${CMAKE_SOURCE_DIR}/appveyor.yml.cmake
		${CMAKE_SOURCE_DIR}/appveyor.yml
	)
endif()

# this must be 4 numbers
SET(VERSION_RC ""${VERSION_MAJOR},${VERSION_MINOR},${VERSION_PATCH},0"")
SET(WEBSITE ""http://cxong.github.io/cdogs-sdl/"")

option(DEBUG ""Enable debug build"" OFF)
option(DEBUG_PROFILE ""Enable debug profile build"" OFF)
option(USE_SHARED_ENET ""Use system installed copy of enet"" OFF)

# check for crosscompiling (defined when using a toolchain file)
if(CMAKE_CROSSCOMPILING)
	# check for gcw0
	if(CMAKE_C_COMPILER MATCHES "".*gcw0-linux.*"")
		set(GCW0 1)
	endif()
endif()

if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
	set(CLANG 1)
endif()

if(WIN32)
	set(CMAKE_RC_COMPILER_INIT windres)
	enable_language(RC)
	SET(CMAKE_RC_COMPILE_OBJECT
		""<CMAKE_RC_COMPILER> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>"")
endif()
SET(LINKDIR /usr/games)

if(DEBUG)
	set(CMAKE_BUILD_TYPE ""Debug"")
else()
	add_definitions(-DNDEBUG)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/build/cmake"")

if(NOT ""${GCW0}"")
	find_package(PkgConfig)
	pkg_search_module(SDL2 sdl2)
	pkg_search_module(SDL2_IMAGE SDL2_image)
	pkg_search_module(SDL2_MIXER SDL2_mixer)
endif()
if(NOT ""${SDL2_FOUND}"")
	message(""looking for SDL2"")
	find_package(SDL2 REQUIRED)
endif()
if(NOT ""${SDL2_IMAGE_FOUND}"")
	find_package(SDL2_image REQUIRED)
endif()
if(NOT ""${SDL2_MIXER_FOUND}"")
	find_package(SDL2_mixer REQUIRED)
endif()
if(NOT ""${GCW0}"")
	find_package(OpenGL REQUIRED)
endif()
if(NOT ""${CCACHE_FOUND}"")
	find_package(CCache)
endif()
link_directories(${SDL2_LIBRARY_DIRS} ${SDL2_IMAGE_LIBRARY_DIRS} ${SDL2_MIXER_LIBRARY_DIRS})

if(CCACHE_FOUND AND CLANG)
	add_definitions(-Qunused-arguments -fcolor-diagnostics)
endif()

SET(ENet_LIBRARY enet)
IF(WIN32)
    SET(WINDOWS_ENET_DEPENDENCIES ""ws2_32;winmm"")
    SET(ENet_LIBRARIES ${ENet_LIBRARY} ${WINDOWS_ENET_DEPENDENCIES})
ELSE()
    SET(ENet_LIBRARIES ${ENet_LIBRARY})
ENDIF()

IF(NOT USE_SHARED_ENET)
    INCLUDE_DIRECTORIES(src/cdogs/enet/include)
ENDIF()

add_definitions(-DPB_FIELD_16BIT)	# Allow larger field numbers in nanopb
include_directories(src/cdogs/proto/nanopb)
if(MSVC)
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -MP -W4 -WX -wd\""4996\"" -wd\""4204\"""")
else()
	add_definitions(
		-fsigned-char
		-Wall -W
		-Wstrict-prototypes -Wpointer-arith -Wcast-qual)
	if(DEBUG)
		ADD_DEFINITIONS(-g)
		if(DEBUG_PROFILE AND CMAKE_COMPILER_IS_GNUCC)
			ADD_DEFINITIONS(-p)
		endif()
	else()
		ADD_DEFINITIONS(-O2)
	endif()
	if(GCW0)
		add_definitions(-D__GCWZERO__)
	endif()
    if(CLANG)
		add_definitions(-std=gnu99)
    else()
        # Probably GCC...
        add_definitions(-freg-struct-return -std=gnu99)
		if(NOT APPLE AND NOT BEOS AND NOT HAIKU)
			add_definitions(-Wshadow)
		endif()
		if (CMAKE_C_COMPILER_VERSION VERSION_GREATER 7)
			add_definitions(
				-Wimplicit-fallthrough=0 # TODO: is everything caught by implicit-fallthrough intended?
				-Wno-error=format-overflow # TODO: should probably just make sure buffer sizes are appropriate
			)
		endif()
	endif()
	if(NOT BEOS AND NOT HAIKU)
		add_definitions(-Winline -Werror)
		set(EXTRA_LIBRARIES ""m"")
	endif()
endif()

set(CMAKE_MACOSX_RPATH 1)

if(NOT DEFINED CDOGS_DATA_DIR)
	if(GCW0)
		set(CDOGS_DATA_DIR ""./"")
	else()
		set(CDOGS_DATA_DIR ""../"")
	endif()
endif()
message(""Data dir is ${CDOGS_DATA_DIR}"")
if(NOT DEFINED DATA_INSTALL_DIR)
  set(DATA_INSTALL_DIR ""${CDOGS_DATA_DIR}"")
endif()
if(WIN32)
	set(CDOGS_CFG_DIR ""C-Dogs SDL/"")
else()
	set(CDOGS_CFG_DIR "".config/cdogs-sdl/"")
ENDIF()
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""."")
IF(UNIX AND NOT APPLE)
	CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/build/linux/cdogs-sdl.cmake ${CMAKE_SOURCE_DIR}/build/linux/cdogs-sdl)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_SOURCE_DIR}/build/linux/cdogs-sdl PROPERTIES GENERATED TRUE)
ENDIF()
IF(WIN32)
	CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/build/windows/cdogs.rc.cmake ${CMAKE_SOURCE_DIR}/build/windows/cdogs.rc)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_SOURCE_DIR}/build/windows/cdogs.rc PROPERTIES GENERATED TRUE)
ENDIF()
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/src/cdogs/sys_config.h.cmake ${CMAKE_SOURCE_DIR}/src/cdogs/sys_config.h)
SET_SOURCE_FILES_PROPERTIES(${CMAKE_SOURCE_DIR}/src/cdogs/sys_config.h PROPERTIES GENERATED TRUE)
include_directories(src src/cdogs)

#Tests
enable_testing()

add_subdirectory(src)

# Build the shared library next to cdogs-sdl
set_target_properties(cdogs-sdl PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/src
	RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/src
)
if(NOT ""${GCW0}"")
	set_target_properties(cdogs-sdl-editor PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/src
		RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/src
	)
endif()

################
# Installation #
################

# Executables
set(INSTALL_PREFIX ""."")
set(EXE_EXTENSION """")
if(WIN32)
	set(EXE_EXTENSION "".exe"")
	set(LIB_EXTENSION "".dll"")
  set(DATA_INSTALL_DIR ""."")
elseif(APPLE)
	set(LIB_EXTENSION "".dylib"")
  set(DATA_INSTALL_DIR ""cdogs-sdl"")
	set(INSTALL_PREFIX ""cdogs-sdl"")
else()
	set(LIB_EXTENSION "".so"")
endif()

# Since Debian wants games binaries in /usr/games
if(NOT DEFINED CDOGS_BIN_DIR)
	set(CDOGS_BIN_DIR ""${INSTALL_PREFIX}/bin"")
endif()

install(
  PROGRAMS
    ${CMAKE_CURRENT_BINARY_DIR}/src/cdogs-sdl${EXE_EXTENSION}
    DESTINATION ${CDOGS_BIN_DIR})
if(NOT ""${GCW0}"")
	install(
	  PROGRAMS
	    ${CMAKE_CURRENT_BINARY_DIR}/src/cdogs-sdl-editor${EXE_EXTENSION}
	    DESTINATION ${CDOGS_BIN_DIR})
endif()

INSTALL(DIRECTORY
	${CMAKE_SOURCE_DIR}/data
	${CMAKE_SOURCE_DIR}/missions
	${CMAKE_SOURCE_DIR}/dogfights
	${CMAKE_SOURCE_DIR}/graphics
	${CMAKE_SOURCE_DIR}/music
	${CMAKE_SOURCE_DIR}/sounds
	DESTINATION ${DATA_INSTALL_DIR})

if(NOT DEFINED CDOGS_DOC_DIR)
	set(CDOGS_DOC_DIR ""${DATA_INSTALL_DIR}/doc"")
endif()
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/doc/
	DESTINATION ${CDOGS_DOC_DIR}
	)

INSTALL(FILES
	${CMAKE_SOURCE_DIR}/README.md
	DESTINATION ${DATA_INSTALL_DIR})
IF(UNIX AND NOT APPLE AND NOT BEOS AND NOT HAIKU)
	INSTALL(FILES ${CMAKE_SOURCE_DIR}/build/linux/io.github.cxong.cdogs-sdl.desktop DESTINATION ${INSTALL_PREFIX}/share/applications)
	INSTALL(FILES ${CMAKE_SOURCE_DIR}/build/linux/io.github.cxong.cdogs-sdl.appdata.xml DESTINATION ${INSTALL_PREFIX}/share/appdata)
	foreach(RES 16 22 32 48 128)
		INSTALL(FILES ${CMAKE_SOURCE_DIR}/build/linux/cdogs-icon.${RES}.png
			DESTINATION ${INSTALL_PREFIX}/share/icons/hicolor/${RES}x${RES}/apps
			RENAME io.github.cxong.cdogs-sdl.png)
	endforeach(RES)
elseif(WIN32)
	# Package for Windows
	FILE(GLOB DLLS ""${CMAKE_SOURCE_DIR}/dll/*.dll"")
	FOREACH(DLL ${DLLS})
		INSTALL(FILES ""${DLL}"" DESTINATION ${INSTALL_PREFIX}/bin)
	ENDFOREACH()
	install(DIRECTORY ${CMAKE_SOURCE_DIR}/build/licenses DESTINATION ${INSTALL_PREFIX})
elseif(APPLE)
	set(CMAKE_INSTALL_PREFIX ""/Applications/cdogs-sdl"")
endif()

# Packaging
SET(CPACK_PACKAGE_NAME ""C-Dogs SDL"")
SET(CPACK_PACKAGE_VENDOR ""C-Dogs SDL Team"")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""C-Dogs SDL: Action/Arcade Game"")
SET(CPACK_PACKAGE_VERSION ${VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})
SET(CPACK_PACKAGE_EXECUTABLES ""cdogs-sdl;C-Dogs SDL;cdogs-sdl-editor;Campaign Editor"")
if(WIN32)
	SET(CPACK_GENERATOR NSIS ZIP)
	SET(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
	SET(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/doc/COPYING.GPL)
	set(CPACK_PACKAGE_INSTALL_DIRECTORY ""C-Dogs SDL"")
	SET(CPACK_NSIS_MUI_ICON ${CMAKE_SOURCE_DIR}/build/windows/cdogs-icon.ico)
	set(CPACK_NSIS_CREATE_ICONS ""SetOutPath '\$INSTDIR\\\\bin'
	CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\C-Dogs SDL.lnk' '\$INSTDIR\\\\bin\\\\cdogs-sdl.exe'
	CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\Campaign Editor.lnk' '\$INSTDIR\\\\bin\\\\cdogs-sdl-editor.exe'"")
	SET(CPACK_NSIS_MUI_FINISHPAGE_RUN cdogs-sdl.exe)
	SET(CPACK_NSIS_URL_INFO_ABOUT ${WEBSITE})
elseif(APPLE)
	set(CPACK_GENERATOR ""DragNDrop"")
	set(CPACK_DMG_FORMAT ""UDBZ"")
	set(CPACK_DMG_VOLUME_NAME ""C-Dogs SDL"")
	set(CPACK_SYSTEM_NAME ""OSX"")
	set(CPACK_PACKAGE_ICON
		""${CMAKE_SOURCE_DIR}/build/macosx/cdogs-icon.icns"")
	set(CPACK_DMG_BACKGROUND_IMAGE
		""${CMAKE_SOURCE_DIR}/build/macosx/dmg_bg.png"")
	set(CPACK_DMG_DS_STORE
		""${CMAKE_SOURCE_DIR}/build/macosx/DS_Store"")

	# copy SDL frameworks
	set(APPS cdogs-sdl cdogs-sdl-editor)
	set(LIBS SDL2 SDL2_image SDL2_mixer)
	foreach(APP ${APPS})
		foreach(LIB ${LIBS})
			install(DIRECTORY /Library/Frameworks/${LIB}.framework
				DESTINATION ${INSTALL_PREFIX}/Frameworks)
		endforeach()
	endforeach()
elseif(BEOS OR HAIKU)
	set(CPACK_GENERATOR TGZ)
	install(
		FILES ${CMAKE_SOURCE_DIR}/build/haiku/cdogs-sdl.sh
		DESTINATION ${INSTALL_PREFIX}
		PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
else()
	# probably linux

	# Pack only tar.gz since deb and rpm packages may differ in distros
	set(CPACK_GENERATOR TGZ)

	# debian specific
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""C-Dogs SDL Team"")
	set(CPACK_DEBIAN_PACKAGE_SECTION Games)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libc6, libsdl2-image, libsdl2-mixer"")

	# fedora/suse specific
	set(CPACK_RPM_PACKAGE_LICENSE ""GPL2"")
	set(CPACK_RPM_PACKAGE_GROUP ""Amusements/Games/Action/Arcade"")
	set(CPACK_RPM_PACKAGE_REQUIRES ""sdl_image >= 2, sdl_mixer >= 2"")

endif()
include(CPack)
",3.1,3.1
2915,KDE,kpmcore,False,False,False,False,False,20,C++,2020-05-15 16:52:34+00:00,2015-09-18 11:25:14+00:00,10,1066,"# Copyright (C) 2008 by Volker Lanz <vl@fidra.de>
# Copyright (C) 2014-2019 by Andrius Štikonas <andrius@stikonas.eu>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

project(kpmcore)

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

set(CMAKE_USE_RELATIVE_PATHS OFF)
set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)

# Dependencies
set(QT_MIN_VERSION ""5.10.0"")
set(KF5_MIN_VERSION ""5.56"")
set(BLKID_MIN_VERSION ""2.33.2"")
# Qca-qt5 (tested with botan and ossl backends)

# Runtime
# smartmontools 7.0
# Qca plugin (botan or ossl)

set(VERSION_MAJOR ""4"")
set(VERSION_MINOR ""1"")
set(VERSION_RELEASE ""0"")
set(VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_RELEASE})
set(SOVERSION ""10"")
add_definitions(-D'VERSION=""${VERSION}""') #""

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(ECM ${KF5_MIN_VERSION} REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/"")

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(FeatureSummary)
include(GenerateExportHeader)
include(ECMSetupVersion)

ecm_setup_version(${VERSION} VARIABLE_PREFIX KPMCORE
                        VERSION_HEADER ""${CMAKE_CURRENT_BINARY_DIR}/kpmcore_version.h""
                        PACKAGE_VERSION_FILE ""${CMAKE_CURRENT_BINARY_DIR}/KPMcoreConfigVersion.cmake""
                        SOVERSION ${SOVERSION})

find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
  Core
  DBus
  Gui
  Widgets
)

# Load the frameworks we need
find_package(KF5 ${KF5_MIN_VERSION} REQUIRED
  Auth
  CoreAddons
  I18n
  WidgetsAddons
)

find_package(Qca-qt5 REQUIRED)

# use sane compile flags
add_definitions(
  -DQT_USE_QSTRINGBUILDER
  -DQT_NO_CAST_TO_ASCII
  -DQT_NO_CAST_FROM_ASCII
  -DQT_STRICT_ITERATORS
  -DQT_NO_URL_CAST_FROM_STRING
  -DQT_NO_CAST_FROM_BYTEARRAY
  -DQT_NO_CAST_TO_BYTEARRAY
  -DQT_NO_SIGNALS_SLOTS_KEYWORDS
  -DQT_USE_FAST_OPERATOR_PLUS
)
kde_enable_exceptions()

if(${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(BLKID REQUIRED blkid>=${BLKID_MIN_VERSION})
endif()

include_directories(${Qt5Core_INCLUDE_DIRS} ${UUID_INCLUDE_DIRS} ${BLKID_INCLUDE_DIRS} lib/ src/)

add_subdirectory(src)

# create a Config.cmake and a ConfigVersion.cmake file and install them
set(INCLUDE_INSTALL_DIR ""include/kpmcore/"")
set(CMAKECONFIG_INSTALL_DIR ""${CMAKECONFIG_INSTALL_PREFIX}/KPMcore"")

configure_package_config_file(""${CMAKE_CURRENT_SOURCE_DIR}/KPMcoreConfig.cmake.in""
                              ""${CMAKE_CURRENT_BINARY_DIR}/KPMcoreConfig.cmake""
                              INSTALL_DESTINATION  ${CMAKECONFIG_INSTALL_DIR}
                              PATH_VARS INCLUDE_INSTALL_DIR
                              )

install(FILES  ""${CMAKE_CURRENT_BINARY_DIR}/KPMcoreConfig.cmake""
               ""${CMAKE_CURRENT_BINARY_DIR}/KPMcoreConfigVersion.cmake""
        DESTINATION ""${CMAKECONFIG_INSTALL_DIR}""
        COMPONENT Devel )

install(EXPORT KPMcoreTargets DESTINATION ""${CMAKECONFIG_INSTALL_DIR}"" FILE KPMcoreTargets.cmake )

ki18n_install(po)

set_target_properties( kpmcore
  PROPERTIES VERSION ${VERSION} SOVERSION ${SOVERSION}
)

message(STATUS ""kpmcore ${VERSION} will be built for install into ${CMAKE_INSTALL_PREFIX}"")

feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)

enable_testing()
add_subdirectory(test)
",3.1,3.1
3029,dirkhh,subsurface,False,False,False,False,False,142,C++,2020-05-17 16:29:09+00:00,2011-09-03 15:27:51+00:00,1715,17640,"# cmake based build of Subsurface

# Uncomment his to see all commands cmake actually executes
# set(CMAKE_VERBOSE_MAKEFILE ON)

cmake_minimum_required(VERSION 3.1)
project(Subsurface)

# don't process generated files - this is new in 3.10
if (POLICY CMP0071)
	cmake_policy(SET CMP0071 OLD)
endif()

# support Packagename_ROOT environment variable
if (POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW) # CMake 3.12
endif ()

# global settings

set(CMAKE_MODULE_PATH
	${${PROJECT_NAME}_SOURCE_DIR}/cmake/Modules
	${CMAKE_MODULE_PATH}
)

set(CMAKE_AUTOMOC ON)
include(MacroOutOfSourceBuild)
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
    ""We don't support building in source, please create a build folder elsewhere and remember to run git clean -xdf to remove temporary files created by CMake.""
)

#Option for profiling
option(SUBSURFACE_PROFILING_BUILD ""enable profiling of Subsurface binary"" OFF)

#Options regarding usage of pkgconfig
option(LIBGIT2_FROM_PKGCONFIG ""use pkg-config to retrieve libgit2"" OFF)
option(LIBDC_FROM_PKGCONFIG ""use pkg-config to retrieve libdivecomputer"" OFF)
option(LIBGRANTLEE_FROM_PKGCONFIG ""use pkg-config to retrieve grantlee"" OFF)

#Library Handling
option(FORCE_LIBSSH ""force linking with libssh to workaround libgit2 bug"" ON)
option(LIBGIT2_DYNAMIC ""search for libgit2.so before libgit2.a"" OFF)

#Options regarding disabling parts of subsurface.
option(NO_DOCS ""disable the docs"" OFF)
option(NO_PRINTING ""disable the printing support"" OFF)
option(NO_USERMANUAL ""don't include a viewer for the user manual"" OFF)

#Options regarding enabling parts of subsurface
option(BTSUPPORT ""enable support for QtBluetooth (requires Qt5.4 or newer)"" ON)
option(FTDISUPPORT ""enable support for libftdi based serial"" OFF)

# Options regarding What should we build on subsurface
option(MAKE_TESTS ""Make the tests"" ON)

SET(SUBSURFACE_TARGET_EXECUTABLE ""DesktopExecutable"" CACHE STRING ""The type of application, DesktopExecutable or MobileExecutable"")
LIST(APPEND SUBSURFACE_ACCEPTED_EXECUTABLES  ""DesktopExecutable"" ""MobileExecutable"")
SET_PROPERTY(CACHE SUBSURFACE_TARGET_EXECUTABLE PROPERTY STRINGS ${SUBSURFACE_ACCEPTED_EXECUTABLES})

#verify if Platform is correct and warn on wxit with example.
list (FIND SUBSURFACE_ACCEPTED_EXECUTABLES ${SUBSURFACE_TARGET_EXECUTABLE}  _index)
if (_index EQUAL -1)
  message(FATAL_ERROR ""Requested platform not supported, please use one of the following:
    ${SUBSURFACE_ACCEPTED_EXECUTABLES}

    inputted value was: ${SUBSURFACE_TARGET_EXECUTABLE}

    Example: -DSUBSURFACE_TARGET_EXECUTABLE=DesktopExecutable"")
endif()

# SUBSURFACE_SOURCE may be used in subdirectories (tests)
set(SUBSURFACE_SOURCE ${CMAKE_SOURCE_DIR})
add_definitions(-DSUBSURFACE_SOURCE=""${SUBSURFACE_SOURCE}"")

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

#
# TODO: This Compilation part should go on the Target specific CMake.
#
if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override"")
	if ((CMAKE_SYSTEM_NAME MATCHES ""Darwin"") AND
	   ((CMAKE_SYSTEM_VERSION MATCHES ""11.4."") OR
	    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.7"") OR
	    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.8"")))
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
	endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override"")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
	# Warn about possible float conversion errors
	# Use NOT VERSION_LESS since VERSION_GREATER_EQUAL is not available
	# in currently used cmake version.
	if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.9.0"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wfloat-conversion"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wfloat-conversion"")
	endif()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"")
  # using Visual Studio C++
endif()

# set up profiling
if (SUBSURFACE_PROFILING_BUILD)
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pg"")
	SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pg"")
	SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -pg"")
endif()

# every compiler understands -Wall
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")

# by detault optimize with -O2 even for debug builds
set (GCC_OPTIMIZATION_FLAGS ""-O2"" CACHE STRING ""GCC optimization flags"")
message (STATUS ""GCC optimization flags: "" ${GCC_OPTIMIZATION_FLAGS})
set (CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}"")
set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}"")

# pkgconfig for required libraries
find_package(PkgConfig)
include(pkgconfig_helper)

# The 'HandleFindXXX' are special libraries that subsurface needs
# to find and configure in a few different ways because of a few
# developers that prefer pkg-config over CMake, so we try to make
# everyone happy. It also sets some variables for each library, so
# if you think a module miss anything, take a look on the specific
# module file.
include(HandleFindGit2)
include(HandleFindLibDiveComputer)
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
        include(HandleFindGrantlee)
	include(HandleUserManual)
endif()
include(HandleFtdiSupport)
include(HandleVersionGeneration)
include(RunOnBuildDir)
include(cmake_variables_helper)

if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
	include_directories(${CMAKE_OSX_SYSROOT}/usr/include/libxml2)
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lxml2 -lxslt -lsqlite3)
else()
	pkg_config_library(LIBXML libxml-2.0 REQUIRED)
	pkg_config_library(LIBSQLITE3 sqlite3 REQUIRED)
	pkg_config_library(LIBXSLT libxslt REQUIRED)
endif()
pkg_config_library(LIBZIP libzip REQUIRED)

if(NOT ANDROID)
	pkg_config_library(LIBUSB libusb-1.0 QUIET)
endif()

include_directories(.
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_BINARY_DIR}
	${CMAKE_BINARY_DIR}/desktop-widgets
)

# Project Target specific configuration should go here,
# if the configuration is too big or would disrupt the normal code flux,
# move it somewhere else (another file) and include it.
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
		set(SUBSURFACE_TARGET Subsurface)
	else()
		set(SUBSURFACE_TARGET subsurface)
	endif()
	list(APPEND QT_EXTRA_COMPONENTS QuickWidgets)
	remove_definitions(-DSUBSURFACE_MOBILE)
elseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
	if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
		set(SUBSURFACE_TARGET Subsurface-mobile)
	else()
		set(SUBSURFACE_TARGET subsurface-mobile)
	endif()
	list(APPEND QT_EXTRA_COMPONENTS QuickControls2)
	add_definitions(-DSUBSURFACE_MOBILE)

	# add definition to seperate mobile for devices and for desktop
	add_definitions(-DSUBSURFACE_MOBILE_DESKTOP)

	message(STATUS ""Building Subsurface-mobile requires BT support"")
	set(BTSUPPORT ON)
endif()

if(ANDROID)
	set(NO_PRINTING ON)
	set(NO_USERMANUAL ON)
	set(MAKE_TESTS OFF)
	list(APPEND QT_EXTRA_COMPONENTS AndroidExtras)
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -llog)
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
        # add pthread to the end of the library list on Linux
        # this is only needed on Ubuntu
        # but shouldn't hurt on other Linux versions
        # in some builds we appear to be missing libz for some strange reason...
	# Add ssh2 at the end for openSUSE builds (for recent cmake?)
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lssh2 -lz -lpthread)

        # Test for ARM processor (Raspberry Pi) and add libGLESv2 if found
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL ""armv7l"" OR CMAKE_SYSTEM_PROCESSOR STREQUAL ""armv6l"")
                message (STATUS ""Found ARM processor. Adding libGLESv2"")
                set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lGLESv2)
                set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
        endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
        execute_process(
                COMMAND sh scripts/get-version linux
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                OUTPUT_VARIABLE SSRF_VERSION_STRING
                OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        find_library(APP_SERVICES_LIBRARY ApplicationServices)
        find_library(HID_LIB HidApi)
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} ${HID_LIB})
        set(EXTRA_LIBS ${APP_SERVICES_LIBRARY})
        set(ICON_FILE ${CMAKE_SOURCE_DIR}/packaging/macosx/Subsurface.icns)
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
		set(MACOSX_BUNDLE_INFO_STRING ""Subsurface-mobile"")
		set(MACOSX_BUNDLE_BUNDLE_NAME ""Subsurface-mobile"")
	else()
		set(MACOSX_BUNDLE_INFO_STRING ""Subsurface"")
		set(MACOSX_BUNDLE_BUNDLE_NAME ""Subsurface"")
	endif()
	set(MACOSX_BUNDLE_ICON_FILE Subsurface.icns)
	set(MACOSX_BUNDLE_GUI_IDENTIFIER ""org.subsurface-divelog"")
        set(MACOSX_BUNDLE_BUNDLE_VERSION ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_SHORT_VERSION_STRING ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_LONG_VERSION_STRING ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_COPYRIGHT ""Linus Torvalds, Dirk Hohndel, Tomaz Canabrava, Berthold Stoeger and others"")
        set_source_files_properties(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources"")
        set(SUBSURFACE_PKG MACOSX_BUNDLE ${ICON_FILE})
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lwsock32 -lws2_32)
        remove_definitions(-DUNICODE)
        add_definitions(-mwindows -D_WIN32)
endif()

if(BTSUPPORT)
	set(BLESUPPORT ON)
	list(APPEND QT_EXTRA_COMPONENTS Bluetooth)
	add_definitions(-DBT_SUPPORT)
	add_definitions(-DBLE_SUPPORT)
endif()

if(ANDROID)
	# when building for Android, the toolchain file requires all cmake modules
	# to be inside the CMAKE_FIND_ROOT_PATH - which prevents cmake from finding
	# our Qt installation. This is ugly, but it works.
	set(CMAKE_FIND_ROOT_PATH ""/;${CMAKE_FIND_ROOT_PATH}"")
endif()
set(QT_FIND_COMPONENTS Core Concurrent Widgets Network Svg Positioning Quick Location ${QT_EXTRA_COMPONENTS})
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	find_package(Qt5 5.9.1 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)
else()
	# Kirigami 5.62 and newer require at least Qt 5.12
	if(ANDROID)
		find_package(Qt5 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools)
	else()
		find_package(Qt5 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)
	endif()
endif()
foreach(_QT_COMPONENT ${QT_FIND_COMPONENTS})
	list(APPEND QT_LIBRARIES Qt5::${_QT_COMPONENT})
endforeach()
if(NOT ANDROID)
	set(QT_TEST_LIBRARIES ${QT_LIBRARIES} Qt5::Test Qt5::QuickTest)
endif()

#set up the subsurface_link_libraries variable
set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} ${LIBDIVECOMPUTER_LIBRARIES} ${LIBGIT2_LIBRARIES} ${LIBUSB_LIBRARIES})
qt5_add_resources(SUBSURFACE_RESOURCES subsurface.qrc map-widget/qml/map-widget.qrc)

# hack to build successfully on LGTM
if(DEFINED ENV{LGTM_SRC})
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lgssapi_krb5 -lhttp_parser)
endif()

# include translations
add_subdirectory(translations)
add_subdirectory(core)
add_subdirectory(qt-models)
add_subdirectory(commands)
add_subdirectory(profile-widget)
add_subdirectory(map-widget)
add_subdirectory(mobile-widgets)
add_subdirectory(backend-shared)

if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	add_subdirectory(desktop-widgets)
endif()

# create the executables
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
	set(MOBILE_SRC
		subsurface-mobile-main.cpp
		subsurface-helper.cpp
	)
	include_directories(${CMAKE_SOURCE_DIR}/mobile-widgets/qml/kirigami/src/libkirigami)
	add_definitions(-DKIRIGAMI_BUILD_TYPE_STATIC)
	qt5_add_resources(MOBILE_RESOURCES mobile-widgets/qml/mobile-resources.qrc)
	qt5_add_resources(MOBILE_RESOURCES mobile-widgets/qml/kirigami/kirigami.qrc)
	# When building the mobile application in Android, link it and Qt will do the rest, when doing the mobile application on Desktop, create an executable.
	if(ANDROID)
		qt5_add_resources(MOBILE_RESOURCES android-mobile/font.qrc)
		add_library(${SUBSURFACE_TARGET} SHARED ${SUBSURFACE_PKG} ${MOBILE_SRC} ${SUBSURFACE_RESOURCES} ${MOBILE_RESOURCES})
	else()
		# the following is split across two commands since in cmake 3.12 this would result
		# in a non-sensical ""no sources given to target"" error if done all as one set of
		# arguments to the add_executable() call
		add_executable(${SUBSURFACE_TARGET} ${SUBSURFACE_PKG} ${SUBSURFACE_RESOURCES})
		target_sources(${SUBSURFACE_TARGET} PUBLIC ${MOBILE_SRC} ${MOBILE_RESOURCES})
	endif()
	target_link_libraries(
		${SUBSURFACE_TARGET}
		subsurface_mobile
		subsurface_profile
		subsurface_mapwidget
		subsurface_backend_shared
		subsurface_models_mobile
		subsurface_commands
		subsurface_corelib
		${SUBSURFACE_LINK_LIBRARIES}
	)
elseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	set(SUBSURFACE_APP
		subsurface-desktop-main.cpp
		subsurface-helper.cpp
	)
	source_group(""Subsurface App"" FILES ${SUBSURFACE_APP})
        if(ANDROID)
                add_library(${SUBSURFACE_TARGET} SHARED ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})
        else()
                add_executable(${SUBSURFACE_TARGET} MACOSX_BUNDLE WIN32 ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})
        endif()

	target_link_libraries(
		${SUBSURFACE_TARGET}
		subsurface_generated_ui
		subsurface_interface
		subsurface_profile
		subsurface_statistics
		subsurface_mapwidget
		subsurface_backend_shared
		subsurface_models_desktop
		subsurface_commands
		subsurface_corelib
		${SUBSURFACE_LINK_LIBRARIES}
	)
	add_dependencies(subsurface_desktop_preferences subsurface_generated_ui)
	add_dependencies(subsurface_statistics subsurface_generated_ui)
	add_dependencies(subsurface_interface subsurface_generated_ui)
	add_dependencies(subsurface_profile subsurface_generated_ui)
	add_dependencies(subsurface_models_desktop subsurface_generated_ui)
	add_dependencies(subsurface_generated_ui version)
endif()

add_dependencies(subsurface_corelib version)

# add platform specific actions
if(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
	file(WRITE ${CMAKE_BINARY_DIR}/qt.conf ""[Paths]
Prefix=.
"")
endif()

# build an automated html exporter
add_executable(export-html EXCLUDE_FROM_ALL export-html.cpp ${SUBSURFACE_RESOURCES})
target_link_libraries(export-html subsurface_corelib ${SUBSURFACE_LINK_LIBRARIES})

# install Subsurface
# first some variables with files that need installing
set(DOCFILES
	README.md
	ReleaseNotes/ReleaseNotes.txt
	SupportedDivecomputers.txt
	${CMAKE_BINARY_DIR}/Documentation/user-manual.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_es.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_fr.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_ru.html
)

# add all the translations that we may need
FILE(STRINGS ""subsurface_enabled_translations"" QTTRANSLATIONS_BASE)

if(NOT DEFINED QT_TRANSLATION_DIR OR QT_TRANSLATION_DIR STREQUAL """")
	set(QT_TRANSLATION_DIR ${Qt5Core_DIR}/../../../translations)
endif()
set(QTTRANSLATIONS """")
foreach(QTTRANSLATION ${QTTRANSLATIONS_BASE})
	if (QTTRANSLATION AND EXISTS ${QT_TRANSLATION_DIR}/${QTTRANSLATION})
		set(QTTRANSLATIONS ${QTTRANSLATIONS} ${QT_TRANSLATION_DIR}/${QTTRANSLATION})
	endif()
endforeach()

# now for each platform the install instructions
if(ANDROID)
	# Android template directory
	include(${QT_ANDROID_CMAKE})
	if((DEFINED ENV{KEYSTORE}) AND (DEFINED ENV{KEYSTORE_PASSWORD}))
		add_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}
			PACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}
			KEYSTORE $ENV{KEYSTORE} Subsurface-mobile KEYSTORE_PASSWORD $ENV{KEYSTORE_PASSWORD}
		)
		message(STATUS ""KEYSTORE=$ENV{KEYSTORE} KEYSTORE_PASSWORD=$ENV{KEYSTORE_PASSWORD}"")
	else()
		add_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}
			PACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}
		)
		message(STATUS ""no KEYSTORE"")
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
	set(APP_BUNDLE_DIR ""${SUBSURFACE_TARGET}.app"")
	set(EXTRA_MACDEPLOY_ARGS ""-qmldir=${APP_BUNDLE_DIR}/Contents/Resources/qml "")
	set(MACDEPLOY_ARGS ""${EXTRA_MACDEPLOY_ARGS}-executable=${APP_BUNDLE_DIR}/Contents/MacOS/${SUBSURFACE_TARGET} -always-overwrite -libpath=${CMAKE_SOURCE_DIR}/../install-root/lib"")
	set(RESOURCEDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources)
	set(PLUGINDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/PlugIns)
	install(DIRECTORY Documentation/images DESTINATION ${RESOURCEDIR}/share/Documentation)
	install(FILES ${DOCFILES} DESTINATION ${RESOURCEDIR}/share/Documentation)
	install(DIRECTORY theme DESTINATION ${RESOURCEDIR})
	install(DIRECTORY printing_templates DESTINATION ${RESOURCEDIR})
	install(FILES ${TRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)
	install(FILES ${QTTRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)
	install(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt DESTINATION ${RESOURCEDIR})
	install(CODE ""execute_process(COMMAND mkdir -p ${RESOURCEDIR}/qml)"")
	# this is a HACK
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"" AND NOT NO_PRINTING)
		install(DIRECTORY ${Grantlee5_DIR}/../../grantlee DESTINATION ${PLUGINDIR})
	endif()
	install(CODE ""execute_process(COMMAND mkdir -p ${PLUGINDIR}/geoservices)"")
	install(CODE ""execute_process(COMMAND cp ${_qt5Core_install_prefix}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)"")
	install(CODE ""execute_process(COMMAND cp ${CMAKE_SOURCE_DIR}/../install-root/${_qt5Core_install_prefix}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)"")
	# this is a hack - but I don't know how else to find the macdeployqt program if it's not in the PATH
	string(REPLACE moc macdeployqt MACDEPLOYQT ${QT_MOC_EXECUTABLE})
	install(CODE ""execute_process(COMMAND ${MACDEPLOYQT} ${APP_BUNDLE_DIR} -no-strip ${MACDEPLOY_ARGS})"")
	# and another hack to get the QML Components in the right place
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQuick.2 ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtLocation ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	if(NOT Qt5Core_VERSION VERSION_LESS 5.11.0)
		# and with Qt 5.11 we need another library that isn't copied by macdeployqt
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/lib/QtPositioningQuick.framework ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks)"")
	endif()
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQuick ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtGraphicalEffects ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQml ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
	if (CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"")
		if(NOT DEFINED OBJCOPY)
			set(OBJCOPY i686-w64-mingw32.shared-objcopy)
		endif()
		find_program(OBJCOPY_FOUND ${OBJCOPY})
		if (OBJCOPY_FOUND)
			message(STATUS ""Build type is 'RelWithDebInfo'. Creating debug symbols in a separate file."")
			add_custom_command(TARGET ${SUBSURFACE_TARGET} POST_BUILD
				COMMAND ${OBJCOPY} --only-keep-debug ${SUBSURFACE_TARGET}.exe ${SUBSURFACE_TARGET}.exe.debug
				COMMAND ${OBJCOPY} --strip-debug --strip-unneeded ${SUBSURFACE_TARGET}.exe
				COMMAND ${OBJCOPY} --add-gnu-debuglink=${SUBSURFACE_TARGET}.exe.debug ${SUBSURFACE_TARGET}.exe
			)
		endif()
	endif()

	# Windows bundling rules
	# We don't have a helpful tool like macdeployqt for Windows, so we hardcode
	# which libs we need.
	# ""make install"", copies everything into a staging area
	# ""make installer"", uses makensis to create an installer executable
	set(WINDOWSSTAGING ${CMAKE_BINARY_DIR}/staging)
	install(DIRECTORY Documentation/images DESTINATION ${WINDOWSSTAGING}/Documentation)
	install(FILES ${DOCFILES} DESTINATION ${WINDOWSSTAGING}/Documentation)
	install(DIRECTORY theme DESTINATION ${WINDOWSSTAGING})
	install(DIRECTORY printing_templates DESTINATION ${WINDOWSSTAGING})
	install(FILES ${TRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)
	install(FILES ${QTTRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)
	install(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt ${CMAKE_SOURCE_DIR}/packaging/windows/subsurface.ico DESTINATION ${WINDOWSSTAGING})
	install(TARGETS ${SUBSURFACE_TARGET} DESTINATION ${WINDOWSSTAGING})
	install(FILES ${CMAKE_BINARY_DIR}/qt.conf DESTINATION ${WINDOWSSTAGING})
	install(DIRECTORY ${CMAKE_INSTALL_PREFIX}/lib/grantlee DESTINATION ${WINDOWSSTAGING})

	if(NOT Qt5Core_VERSION VERSION_LESS 5.11.0)
		# hack to work around the fact that we don't process the dependencies of plugins
		# as of Qt 5.11 this additional DLL is needed and it's only referenced in the qml DLLs
		install(FILES ${_qt5Core_install_prefix}/bin/Qt5PositioningQuick.dll DESTINATION ${WINDOWSSTAGING})
	endif()

	if(NOT DEFINED MAKENSIS)
		set(MAKENSIS makensis)
	endif()

	# the script we created above is now added as a command to run at
	# install time - so this ensures that subsurface.exe has been
	# built before this is run
	install(CODE ""execute_process(COMMAND ${CMAKE_COMMAND} -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DSUBSURFACE_TARGET=${SUBSURFACE_TARGET} -DSUBSURFACE_SOURCE=${SUBSURFACE_SOURCE} -DSTAGING=${WINDOWSSTAGING} -P ${CMAKE_SOURCE_DIR}/cmake/Modules/dlllist.cmake)"")

	# create the subsurface-x.y.z.exe installer - this needs to depend
	# on the install target but cmake doesn't allow that, so we depend
	# on the fake target instead
	add_custom_target(
		fake_install
		COMMAND ""${CMAKE_COMMAND}"" --build . --target install
		DEPENDS ${SUBSURFACE_TARGET}
	)

	add_custom_target(
		installer
		COMMAND ${MAKENSIS} ${WINDOWSSTAGING}/subsurface.nsi
		DEPENDS fake_install
	)
elseif (CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
	# the syntax is odd, but this searches for libqtgeoservices_googlemaps.so
	# in the filesystem below our install-root
	# different Linux flavors put the plugin in different directories
	file(GLOB_RECURSE GOOGLEMAPS ${CMAKE_SOURCE_DIR}/../install-root/libqtgeoservices_googlemaps.so)
	if (NOT GOOGLEMAPS)
		message(STATUS ""Cannot find libqtgeoservices_googlemaps.so"")
	else()
		add_custom_target(link_googlemaps_plugin ALL COMMAND
			rm -rf ${CMAKE_BINARY_DIR}/geoservices &&
			mkdir -p ${CMAKE_BINARY_DIR}/geoservices &&
			ln -sf ${GOOGLEMAPS} ${CMAKE_BINARY_DIR}/geoservices)
	endif()
	install(FILES subsurface.debug DESTINATION bin)
	install(FILES subsurface.desktop DESTINATION share/applications)
	install(CODE ""execute_process(COMMAND sh ${CMAKE_SOURCE_DIR}/scripts/add-version-to-appdata.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})"")
	install(FILES appdata/subsurface.appdata.xml DESTINATION share/metainfo)
	install(FILES icons/subsurface-icon.svg DESTINATION share/icons/hicolor/scalable/apps)
	install(DIRECTORY Documentation/images DESTINATION share/subsurface/Documentation)
	install(FILES ${DOCFILES} DESTINATION share/subsurface/Documentation)
	install(DIRECTORY theme DESTINATION share/subsurface)
	install(DIRECTORY printing_templates DESTINATION share/subsurface)
	install(FILES ${TRANSLATIONS} DESTINATION share/subsurface/translations)
        install(TARGETS ${SUBSURFACE_TARGET} DESTINATION bin)
endif()

if (MAKE_TESTS)
	enable_testing()
	add_subdirectory(tests)
endif()

# useful for debugging CMake issues
# print_all_variables()
",3.1,3.1
3075,Cockatrice,Cockatrice,False,False,False,False,False,75,C++,2020-05-17 13:53:12+00:00,2011-12-03 20:58:09+00:00,923,4178,"# Cockatrice's main CMakeLists.txt
#
# This is basically a wrapper to enable/disable the compilation
# of the different projects: servatrice, cockatrice, test
# This file sets all the variables shared between the projects
# like the installation path, compilation flags etc..

# Cmake 3.1 is required to enable C++11 support correctly
cmake_minimum_required(VERSION 3.1)

if(POLICY CMP0064)
    cmake_policy(SET CMP0064 NEW)
endif()

if(POLICY CMP0071)
    cmake_policy(SET CMP0071 NEW)
endif()

# Default to ""Release"" build type
# User-provided value for CMAKE_BUILD_TYPE must be checked before the PROJECT() call
IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING ""Type of build"")
ELSE()
   SET(CMAKE_BUILD_TYPE Release CACHE STRING ""Type of build"")
ENDIF()

# Early detect ccache
OPTION(USE_CCACHE ""Cache the build results with ccache"" ON)
if(USE_CCACHE)
    find_program(CCACHE_PROGRAM ccache)
    if(CCACHE_PROGRAM)
        # Support Unix Makefiles and Ninja
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}"")
        MESSAGE(STATUS ""Found CCache ${CCACHE_PROGRAM}"")
    endif()
endif()

# A project name is needed for CPack
# Version can be overriden by git tags, see cmake/getversion.cmake
PROJECT(""Cockatrice"" VERSION 2.7.4)

# Use c++11 for all targets
set(CMAKE_CXX_STANDARD 11 CACHE STRING ""C++ ISO Standard"")
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Set conventional loops
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

# Search path for cmake modules
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

# Retrieve git version hash
include(getversion)

# Create a header and a cpp file containing the version hash
include(createversionfile)

# Define a proper install path
if(UNIX)
    if(APPLE)
        # macOS
        # Due to the special bundle structure ignore
        # the prefix eventually set by the user.
        set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/release)

        # Force ccache usage if available
        get_property(RULE_LAUNCH_COMPILE GLOBAL PROPERTY RULE_LAUNCH_COMPILE)
        if(RULE_LAUNCH_COMPILE)
            MESSAGE(STATUS ""Force enabling CCache usage under macOS"")
            # Set up wrapper scripts
            configure_file(${CMAKE_MODULE_PATH}/launch-c.in   launch-c)
            configure_file(${CMAKE_MODULE_PATH}/launch-cxx.in launch-cxx)
            execute_process(COMMAND chmod a+rx
                ""${CMAKE_BINARY_DIR}/launch-c""
                ""${CMAKE_BINARY_DIR}/launch-cxx"")

            # Set Xcode project attributes to route compilation through our scripts
            set(CMAKE_XCODE_ATTRIBUTE_CC         ""${CMAKE_BINARY_DIR}/launch-c"")
            set(CMAKE_XCODE_ATTRIBUTE_CXX        ""${CMAKE_BINARY_DIR}/launch-cxx"")
            set(CMAKE_XCODE_ATTRIBUTE_LD         ""${CMAKE_BINARY_DIR}/launch-c"")
            set(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS ""${CMAKE_BINARY_DIR}/launch-cxx"")
        endif()
    else()
        # Linux / BSD
        if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
            #fix package build
            if(PREFIX)
                set(CMAKE_INSTALL_PREFIX ${PREFIX})
            else()
                set(CMAKE_INSTALL_PREFIX /usr/local)
            endif()
        endif()
    endif()
elseif(WIN32)
    set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/release)
endif()

# Treat warnings as errors (Debug builds only)
option(WARNING_AS_ERROR ""Treat warnings as errors in debug builds"" ON)

# Define proper compilation flags
IF(MSVC)
    # Visual Studio:
    # Maximum optimization
    # Disable warning C4251
    set(CMAKE_CXX_FLAGS_RELEASE ""/Ox /MD /wd4251"")
    # Generate complete debugging information
    #set(CMAKE_CXX_FLAGS_DEBUG ""/Zi"")
ELSEIF (CMAKE_COMPILER_IS_GNUCXX)
    # linux/gcc, bsd/gcc, windows/mingw
    include(CheckCXXCompilerFlag)

    set(CMAKE_CXX_FLAGS_RELEASE ""-s -O2"")
    if(WARNING_AS_ERROR)
        set(CMAKE_CXX_FLAGS_DEBUG ""-ggdb -O0 -Wall -Wextra -Werror"")
    else()
        set(CMAKE_CXX_FLAGS_DEBUG ""-ggdb -O0 -Wall -Wextra"")
    endif()

    set(ADDITIONAL_DEBUG_FLAGS -Wcast-align -Wmissing-declarations -Wno-long-long -Wno-error=extra -Wno-error=delete-non-virtual-dtor -Wno-error=sign-compare -Wno-error=missing-declarations)

    FOREACH(FLAG ${ADDITIONAL_DEBUG_FLAGS})
        CHECK_CXX_COMPILER_FLAG(""${FLAG}"" CXX_HAS_WARNING_${FLAG})
        IF(CXX_HAS_WARNING_${FLAG})
            SET(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} ${FLAG}"")
        ENDIF()
    ENDFOREACH()
ELSE()
    # other: osx/llvm, bsd/llvm
    set(CMAKE_CXX_FLAGS_RELEASE ""-O2"")
    set(CMAKE_CXX_FLAGS_DEBUG ""-g -O0"")
ENDIF()

# GNU systems need to define the Mersenne exponent for the RNG to compile w/o warning
IF(CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang"")
    ADD_DEFINITIONS(""-DSFMT_MEXP=19937"")
ENDIF()

# Find Qt5
OPTION(UPDATE_TRANSLATIONS ""Update translations on compile"" OFF)
MESSAGE(STATUS ""UPDATE TRANSLATIONS: ${UPDATE_TRANSLATIONS}"")

FIND_PACKAGE(Qt5Core 5.5.0 REQUIRED)

IF(Qt5Core_FOUND)
    MESSAGE(STATUS ""Found Qt ${Qt5Core_VERSION_STRING}"")

    # FIX: Qt was built with -reduce-relocations
    if (Qt5_POSITION_INDEPENDENT_CODE)
        SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
    endif()

    # guess plugins and libraries directory
    set(QT_PLUGINS_DIR ""${Qt5Core_DIR}/../../../plugins"")
    get_target_property(QT_LIBRARY_DIR Qt5::Core LOCATION)
    get_filename_component(QT_LIBRARY_DIR ${QT_LIBRARY_DIR} PATH)

ELSE()
    MESSAGE(FATAL_ERROR ""No Qt5 found!"")
ENDIF()

set(CMAKE_AUTOMOC TRUE)

# Find other needed libraries
FIND_PACKAGE(Protobuf REQUIRED)
IF(NOT EXISTS ""${Protobuf_PROTOC_EXECUTABLE}"")
  MESSAGE(FATAL_ERROR ""No protoc command found!"")
ENDIF()

#Find OpenSSL
IF(WIN32)
    FIND_PACKAGE(Win32SslRuntime)
ENDIF()

#Find VCredist
IF(MSVC)
    FIND_PACKAGE(VCredistRuntime)
ENDIF()

# Package builder
set(CPACK_PACKAGE_CONTACT ""Zach Halpern <zahalpern+github@gmail.com>"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_NAME})
set(CPACK_PACKAGE_VENDOR ""Cockatrice Development Team"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${PROJECT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${PROJECT_SOURCE_DIR}/LICENSE"")
set(CPACK_PACKAGE_VERSION_MAJOR ""${PROJECT_VERSION_MAJOR}"")
set(CPACK_PACKAGE_VERSION_MINOR ""${PROJECT_VERSION_MINOR}"")
set(CPACK_PACKAGE_VERSION_PATCH ""${PROJECT_VERSION_PATCH}"")
set(CPACK_PACKAGE_FILE_NAME ""${PROJECT_VERSION_FILENAME}"")

if(UNIX)
    if(APPLE)
        set(CPACK_GENERATOR DragNDrop ${CPACK_GENERATOR})
        set(CPACK_GENERATOR ""DragNDrop"")
        set(CPACK_DMG_FORMAT ""UDBZ"")
        set(CPACK_DMG_VOLUME_NAME ""${PROJECT_NAME}"")
        set(CPACK_SYSTEM_NAME ""OSX"")
        set(CPACK_PACKAGE_ICON ""${CMAKE_CURRENT_SOURCE_DIR}/cockatrice/resources/appicon.icns"")
    else()
        # linux
        IF(CPACK_GENERATOR STREQUAL ""RPM"")
            set(CPACK_RPM_PACKAGE_LICENSE ""GPLv2"")
            set(CPACK_RPM_PACKAGE_REQUIRES ""protobuf, qt5-qttools, qt5-qtsvg, qt5-qtmultimedia"")
            set(CPACK_RPM_PACKAGE_GROUP ""Amusements/Games"")
            set(CPACK_RPM_PACKAGE_URL ""http://github.com/Cockatrice/Cockatrice"")
        ELSE()
            set(CPACK_GENERATOR DEB)
            set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
            set(CPACK_DEBIAN_PACKAGE_SECTION ""games"")
            set(CPACK_DEBIAN_PACKAGE_HOMEPAGE ""http://github.com/Cockatrice/Cockatrice"")
            set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5multimedia5-plugins, libqt5svg5"")
        ENDIF()
    endif()
elseif(WIN32)
    set(CPACK_GENERATOR NSIS ${CPACK_GENERATOR})
    if(""${CMAKE_GENERATOR}"" MATCHES ""(Win64|IA64)"")
        set(TRICE_IS_64_BIT 1)
    else()
        set(TRICE_IS_64_BIT 0)
    endif()

    # Configure file with custom definitions for NSIS.
    configure_file(
        ${CMAKE_MODULE_PATH}/NSIS.definitions.nsh.in
        ${PROJECT_BINARY_DIR}/NSIS.definitions.nsh
    )

    # include vcredist into the package; NSIS will take care of running it
    if(VCREDISTRUNTIME_FOUND)
        INSTALL(FILES ""${VCREDISTRUNTIME_FILE}"" DESTINATION ./)
    endif()
endif()

include(CPack)

# Compile servatrice (default off)
option(WITH_SERVER ""build servatrice"" OFF)
add_subdirectory(common)
if(WITH_SERVER)
    add_subdirectory(servatrice)
    SET(CPACK_INSTALL_CMAKE_PROJECTS ""Servatrice;Servatrice;ALL;/"" ${CPACK_INSTALL_CMAKE_PROJECTS})
endif()

# Compile cockatrice (default on)
option(WITH_CLIENT ""build cockatrice"" ON)
if(WITH_CLIENT)
    add_subdirectory(cockatrice)
    SET(CPACK_INSTALL_CMAKE_PROJECTS ""Cockatrice;Cockatrice;ALL;/"" ${CPACK_INSTALL_CMAKE_PROJECTS})
endif()

# Compile oracle (default on)
option(WITH_ORACLE ""build oracle"" ON)
if(WITH_ORACLE)
    add_subdirectory(oracle)
    SET(CPACK_INSTALL_CMAKE_PROJECTS ""Oracle;Oracle;ALL;/"" ${CPACK_INSTALL_CMAKE_PROJECTS})
endif()

# Compile dbconverter (default on)
option(WITH_DBCONVERTER ""build oracle"" ON)
if(WITH_DBCONVERTER)
    add_subdirectory(dbconverter)
    SET(CPACK_INSTALL_CMAKE_PROJECTS ""Dbconverter;Dbconverter;ALL;/"" ${CPACK_INSTALL_CMAKE_PROJECTS})
endif()

# Compile tests (default off)
option(TEST ""build tests"" OFF)
if(TEST)
    include(CTest)
    add_subdirectory(tests)
endif()
",3.1,3.1
3215,stnava,ANTs,False,False,False,False,False,53,C++,2020-05-12 03:04:56+00:00,2013-01-23 15:43:41+00:00,555,4527,"cmake_minimum_required(VERSION 3.10.2...3.14.2)
cmake_policy(VERSION 3.10.2...3.14.2)

if(CMAKE_CXX_STANDARD EQUAL ""98"" )
   message(FATAL_ERROR ""CMAKE_CXX_STANDARD:STRING=98 is not supported in ITK version 5 and greater."")
endif()

#####
##  Set the default target properties for ITK
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 11) # Supported values are ``11``, ``14``, and ``17``.
endif()
if(NOT CMAKE_CXX_STANDARD_REQUIRED)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()
if(NOT CMAKE_CXX_EXTENSIONS)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

foreach(p
    ## Only policies introduced after the cmake_minimum_required
    ## version need to explicitly be set to NEW.
    CMP0070 #3.10.0 Define ``file(GENERATE)`` behavior for relative paths.
    CMP0071 #3.10.0 Let ``AUTOMOC`` and ``AUTOUIC`` process ``GENERATED`` files.
    CMP0074 #3.12.0 `find_package()`` uses ``<PackageName>_ROOT`` variables.
    )
  if(POLICY ${p})
    cmake_policy(SET ${p} NEW)
  endif()
endforeach()

set(LOCAL_PROJECT_NAME ANTS)
include(InstallRequiredSystemLibraries)
## NOTE THERE SHOULD BE NO PROJECT STATEMENT HERE!
## This file acts as a simple switch to initiate
## two completely independant CMake build environments.

#-----------------------------------------------------------------------------
# Superbuild Option - Enabled by default
#                   Phase I:  ${LOCAL_PROJECT_NAME}_SUPERBUILD is set to ON, and the
#                             supporting packages defined in ""SuperBuild.cmake""
#                             are built.  The last package in ""SuperBuild.cmake""
#                             to be built is a recursive call to this
#                             file with ${LOCAL_PROJECT_NAME}_SUPERBUILD explicitly
#                             set to ""OFF"" to initiate Phase II
#
#                   Phase II: Build the ${LOCAL_PROJECT_NAME}, referencing the support
#                             packages built in Phase I.
#-----------------------------------------------------------------------------
option(${LOCAL_PROJECT_NAME}_SUPERBUILD ""Build ${LOCAL_PROJECT_NAME} and the projects it depends on via SuperBuild.cmake."" ON)
mark_as_advanced(${LOCAL_PROJECT_NAME}_SUPERBUILD)

option(${LOCAL_PROJECT_NAME}_USE_QT ""Find and use Qt with VTK to build GUI Tools"" OFF)
mark_as_advanced(${LOCAL_PROJECT_NAME}_USE_QT)

option(${LOCAL_PROJECT_NAME}_INSTALL_DEVELOPMENT ""Install development support include and libraries for external packages."" OFF)
mark_as_advanced(${LOCAL_PROJECT_NAME}_INSTALL_DEVELOPMENT)

#-----------------------------------------------------------------------------
# Superbuild script
#-----------------------------------------------------------------------------
SET(CMAKE_INSTALL_PREFIX /opt/ANTs CACHE PATH ""Default ANTs install path"")
SET(SUPERBUILD_STAGING_PREFIX ${CMAKE_BINARY_DIR}/external)

if(${LOCAL_PROJECT_NAME}_SUPERBUILD)
  project(SuperBuild_${LOCAL_PROJECT_NAME})
  include(""${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild.cmake"")
  include(CPack)   # This must always be last!
  return()
else()
  project(${LOCAL_PROJECT_NAME}
    DESCRIPTION ""Advanced Normalization Tools (ANTs)""
    LANGUAGES CXX C)
  include(""${CMAKE_CURRENT_SOURCE_DIR}/${LOCAL_PROJECT_NAME}.cmake"")
  include(CPack)   # This must always be last!
  return()
endif()

message(FATAL_ERROR ""You should never reach this point !"")
",3.10.2...3.14.2,3.1
3720,lxde,compton-conf,False,False,False,False,False,67,C++,2020-05-06 18:52:38+00:00,2013-11-08 09:44:30+00:00,133,319,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(compton-conf)

set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)

set(COMPTONCONF_MAJOR_VERSION 0)
set(COMPTONCONF_MINOR_VERSION 15)
set(COMPTONCONF_PATCH_VERSION 0)
set(COMPTONCONF_VERSION ${COMPTONCONF_MAJOR_VERSION}.${COMPTONCONF_MINOR_VERSION}.${COMPTONCONF_PATCH_VERSION})
add_definitions(
    ""-DCOMPTONCONF_VERSION=\""${COMPTONCONF_VERSION}\""""
)

include(LXQtPreventInSourceBuilds)
include(LXQtConfigVars)
include(LXQtTranslateTs)
include(LXQtTranslateDesktop)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_AUTOMOC ON)

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION_STRING}"")

# libconfig using pkg-config
find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBCONFIG REQUIRED
  libconfig
)

include(GNUInstallDirs REQUIRED)
include(LXQtCompilerSettings NO_POLICY_SCOPE) # must be after cmake_minimum_required()

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DQT_NO_KEYWORDS"")

set(QTX_INCLUDE_DIRS """")
set(QTX_LIBRARIES Qt5::Widgets Qt5::DBus)

include_directories(
  ${QTX_INCLUDE_DIRS}
  ${LIBCONFIG_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR}
)

set(compton-conf_HS
    compton-conf.h
    maindialog.h
)

set(compton-conf_SRCS
  maindialog.cpp
  compton-conf.cpp
)

set(compton-conf_UIS
  maindialog.ui
)

set(compton-conf_DESKTOP_FILES_IN
    compton-conf.desktop.in
)

lxqt_translate_ts(compton-conf_QM_FILES
    UPDATE_TRANSLATIONS
        ${UPDATE_TRANSLATIONS}
    SOURCES
        ${compton-conf_HS}
        ${compton-conf_SRCS}
        ${compton-conf_UIS}
    INSTALL_DIR
        ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/translations
)

lxqt_translate_desktop(compton-conf_DESKTOP_FILES SOURCES ${compton-conf_DESKTOP_FILES_IN})

qt5_wrap_ui(compton-conf_UI_H ${compton-conf_UIS})

set_property(SOURCE ${compton-conf_UI_H} PROPERTY SKIP_AUTOMOC ON)

add_definitions(
  -DCOMPTON_CONF_DATA_DIR=""${CMAKE_INSTALL_FULL_DATADIR}/compton-conf""
)

add_executable(compton-conf
  ${compton-conf_SRCS}
  ${compton-conf_UI_H}
  ${compton-conf_QM_FILES}
  ${compton-conf_QM_LOADER}
  ${compton-conf_DESKTOP_FILES}
)

target_link_libraries(compton-conf
  ${QTX_LIBRARIES}
  ${LIBCONFIG_LDFLAGS}
)

install(TARGETS compton-conf RUNTIME DESTINATION bin)
install(FILES compton.conf.example DESTINATION ${CMAKE_INSTALL_DATADIR}/compton-conf)
install(FILES ${compton-conf_DESKTOP_FILES} DESTINATION ${CMAKE_INSTALL_DATADIR}/applications/)

# merged from lxqt-common
add_subdirectory(autostart)

",3.1.0,3.1
3834,zyantific,zydis,False,False,False,False,False,13,C,2020-05-14 08:18:09+00:00,2014-10-24 21:05:43+00:00,1518,809,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
include(GenerateExportHeader)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

project(Zydis VERSION 3.1.0.0 LANGUAGES C CXX)

# =============================================================================================== #
# Overridable options                                                                             #
# =============================================================================================== #

# Features
option(ZYDIS_MINIMAL_MODE
    ""Enable minimal mode (forces ZYDIS_DECODER_MODE_MINIMAL runtime option)""
    OFF)
option(ZYDIS_FEATURE_DECODER
    ""Enable instruction decoding functionality""
    ON)
option(ZYDIS_FEATURE_FORMATTER
    ""Enable instruction formatting functionality""
    ON)
option(ZYDIS_FEATURE_AVX512
    ""Enable support for AVX-512 instructions""
    ON)
option(ZYDIS_FEATURE_KNC
    ""Enable support for KNC instructions""
    ON)

# Build configuration
option(ZYDIS_BUILD_SHARED_LIB
    ""Build shared library""
    OFF)
option(ZYDIS_BUILD_EXAMPLES
    ""Build examples""
    ON)
option(ZYDIS_BUILD_TOOLS
    ""Build tools""
    ON)
option(ZYDIS_FUZZ_AFL_FAST
    ""Enables AFL persistent mode and reduces prints in ZydisFuzzIn""
    OFF)
option(ZYDIS_LIBFUZZER
    ""Enables LLVM libfuzzer mode and reduces prints in ZydisFuzzIn""
    OFF)
set(ZYDIS_ZYCORE_PATH
    ""${CMAKE_CURRENT_LIST_DIR}/dependencies/zycore""
    CACHE
    PATH
    ""The path to look for Zycore"")

# =============================================================================================== #
# Dependencies                                                                                    #
# =============================================================================================== #

if (NOT EXISTS ""${ZYDIS_ZYCORE_PATH}/CMakeLists.txt"")
    message(
        FATAL_ERROR
        ""Can't find zycore submodule. Please make sure to clone the repo recursively.\n""
        ""You can fix this by running\n""
        ""    git submodule update --init\n""
        ""or by cloning using\n""
        ""    git clone --recursive <url>\n""
        ""Alternatively, you can manually clone zycore to some path and set ZYDIS_ZYCORE_PATH.""
    )
endif ()

add_subdirectory(${ZYDIS_ZYCORE_PATH} ""zycore"" EXCLUDE_FROM_ALL)

# =============================================================================================== #
# Library configuration                                                                           #
# =============================================================================================== #

if (ZYDIS_BUILD_SHARED_LIB)
    add_library(""Zydis"" SHARED)
else ()
    add_library(""Zydis"" STATIC)
endif ()

target_link_libraries(""Zydis"" PUBLIC ""Zycore"")
target_include_directories(""Zydis""
    PUBLIC ""include"" ${PROJECT_BINARY_DIR}
    PRIVATE ""src"")
target_compile_definitions(""Zydis"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"" ""ZYDIS_EXPORTS"")
zyan_set_common_flags(""Zydis"")
zyan_maybe_enable_wpo_for_lib(""Zydis"")
generate_export_header(""Zydis"" BASE_NAME ""ZYDIS"" EXPORT_FILE_NAME ""ZydisExportConfig.h"")

if (ZYDIS_FEATURE_FORMATTER AND NOT ZYDIS_FEATURE_DECODER)
    message(
        FATAL_ERROR
        ""\nZYDIS_FEATURE_FORMATTER requires ZYDIS_FEATURE_DECODER to be enabled""
    )
endif ()

if (ZYDIS_MINIMAL_MODE)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_MINIMAL_MODE"")
endif ()
if (NOT ZYDIS_FEATURE_DECODER)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_DECODER"")
endif ()
if (NOT ZYDIS_FEATURE_FORMATTER)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_FORMATTER"")
endif ()
if (NOT ZYDIS_FEATURE_AVX512)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_AVX512"")
endif ()
if (NOT ZYDIS_FEATURE_KNC)
    target_compile_definitions(""Zydis"" PUBLIC ""ZYDIS_DISABLE_KNC"")
endif ()

target_sources(""Zydis""
    PRIVATE
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/MetaInfo.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Mnemonic.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Register.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/SharedTypes.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/ShortString.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Status.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Utils.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Zydis.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/SharedData.h""
        ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/String.h""
        ""src/MetaInfo.c""
        ""src/Mnemonic.c""
        ""src/Register.c""
        ""src/SharedData.c""
        ""src/String.c""
        ""src/Utils.c""
        ""src/Zydis.c"")

if (ZYDIS_FEATURE_DECODER)
    target_sources(""Zydis""
        PRIVATE
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Decoder.h""
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/DecoderTypes.h""
            ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/DecoderData.h""
            ""src/Decoder.c""
            ""src/DecoderData.c"")
    if (ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        target_sources(""Zydis""
            PRIVATE
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Formatter.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/FormatterBuffer.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterATT.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterBase.h""
                ""${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterIntel.h""
                ""src/Formatter.c""
                ""src/FormatterBuffer.c""
                ""src/FormatterATT.c""
                ""src/FormatterBase.c""
                ""src/FormatterIntel.c"")
    endif ()
endif ()

if (ZYDIS_BUILD_SHARED_LIB AND WIN32)
    target_sources(""Zydis"" PRIVATE ""resources/VersionInfo.rc"")
endif ()

zyan_set_source_group(""Zydis"")

configure_package_config_file(cmake/zydis-config.cmake.in
    ""${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_PREFIX}/cmake""
)
install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake""
    DESTINATION ""${CMAKE_INSTALL_PREFIX}/cmake""
)

install(TARGETS ""Zydis""
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install(FILES
    ""${PROJECT_BINARY_DIR}/ZydisExportConfig.h""
    DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}"")
install(DIRECTORY ""include/"" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

function (_maybe_set_emscripten_cfg target)
    if (EMSCRIPTEN)
        # Yep, that madness below is how Emscripten likes its quotes.
        set_target_properties(""${target}""
            PROPERTIES COMPILE_FLAGS
            ""-s \""EXPORT_NAME='${target}'\"" -s MODULARIZE=1"")
        set_target_properties(""${target}""
            PROPERTIES LINK_FLAGS_RELEASE
            ""-s \""EXPORT_NAME='${target}'\"" -s MODULARIZE=1"")
    endif ()
endfunction ()

# =============================================================================================== #
# Examples                                                                                        #
# =============================================================================================== #

if (ZYDIS_BUILD_EXAMPLES AND NOT ZYAN_NO_LIBC)
    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        add_executable(""Formatter01"" ""examples/Formatter01.c"")
        target_link_libraries(""Formatter01"" ""Zydis"")
        set_target_properties(""Formatter01"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter01"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter01"")
        zyan_maybe_enable_wpo(""Formatter01"")
        _maybe_set_emscripten_cfg(""Formatter01"")

        add_executable(""Formatter02"" ""examples/Formatter02.c"")
        target_link_libraries(""Formatter02"" ""Zydis"")
        set_target_properties(""Formatter02"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter02"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter02"")
        zyan_maybe_enable_wpo(""Formatter02"")
        _maybe_set_emscripten_cfg(""Formatter02"")

        add_executable(""Formatter03"" ""examples/Formatter03.c"")
        target_link_libraries(""Formatter03"" ""Zydis"")
        set_target_properties(""Formatter03"" PROPERTIES FOLDER ""Examples/Formatter"")
        target_compile_definitions(""Formatter03"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""Formatter03"")
        zyan_maybe_enable_wpo(""Formatter03"")
        _maybe_set_emscripten_cfg(""Formatter03"")

        add_executable(""ZydisPerfTest"" ""examples/ZydisPerfTest.c"")
        target_link_libraries(""ZydisPerfTest"" ""Zydis"")
        set_target_properties(""ZydisPerfTest"" PROPERTIES FOLDER ""Examples"")
        target_compile_definitions(""ZydisPerfTest"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisPerfTest"")
        zyan_maybe_enable_wpo(""ZydisPerfTest"")
        _maybe_set_emscripten_cfg(""ZydisPerfTest"")
        if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux""
                OR ${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
            target_compile_definitions(""ZydisPerfTest"" PRIVATE ""_GNU_SOURCE"")
            find_package(Threads REQUIRED)
            target_link_libraries(""ZydisPerfTest"" Threads::Threads)
        endif ()
    endif ()
endif ()

# =============================================================================================== #
# Tools                                                                                           #
# =============================================================================================== #

if (ZYDIS_BUILD_TOOLS AND NOT ZYAN_NO_LIBC)
    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))
        add_executable(""ZydisDisasm"" ""tools/ZydisDisasm.c"")
        target_link_libraries(""ZydisDisasm"" ""Zydis"")
        set_target_properties (""ZydisDisasm"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisDisasm"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisDisasm"")
        zyan_maybe_enable_wpo(""ZydisDisasm"")
        _maybe_set_emscripten_cfg(""ZydisDisasm"")
        install(TARGETS ""ZydisDisasm"" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

        add_executable(""ZydisFuzzIn"" ""tools/ZydisFuzzIn.c"")
        target_link_libraries(""ZydisFuzzIn"" ""Zydis"")
        set_target_properties(""ZydisFuzzIn"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisFuzzIn"")
        zyan_maybe_enable_wpo(""ZydisFuzzIn"")
        _maybe_set_emscripten_cfg(""ZydisFuzzIn"")
        if (ZYDIS_FUZZ_AFL_FAST)
            target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""ZYDIS_FUZZ_AFL_FAST"")
        endif ()
        if (ZYDIS_LIBFUZZER)
            target_compile_definitions(""ZydisFuzzIn"" PRIVATE ""ZYDIS_LIBFUZZER"")
        endif ()

        add_executable(""ZydisInfo"" ""tools/ZydisInfo.c"")
        target_link_libraries(""ZydisInfo"" ""Zydis"")
        set_target_properties (""ZydisInfo"" PROPERTIES FOLDER ""Tools"")
        target_compile_definitions(""ZydisInfo"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        zyan_set_common_flags(""ZydisInfo"")
        zyan_maybe_enable_wpo(""ZydisInfo"")
        _maybe_set_emscripten_cfg(""ZydisInfo"")
        install(TARGETS ""ZydisInfo"" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

        #add_executable(""ZydisPE"" ""tools/ZydisPE.c"")
        #target_link_libraries(""ZydisPE"" ""Zydis"")
        #set_target_properties (""ZydisPE"" PROPERTIES FOLDER ""Tools"")
        #target_compile_definitions(""ZydisPE"" PRIVATE ""_CRT_SECURE_NO_WARNINGS"")
        #zyan_set_common_flags(""ZydisPE"")
        #zyan_maybe_enable_wpo(""ZydisPE"")
        #_maybe_set_emscripten_cfg(""ZydisPE"")
    endif ()
endif ()
",3.1,3.1
3891,Martchus,syncthingtray,False,False,False,False,False,5,C++,2020-05-06 16:00:15+00:00,2016-08-24 22:46:19+00:00,157,913,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# define metadata
set(META_PROJECT_NAME syncthingtray)
set(META_PROJECT_TYPE application)
set(META_APP_AUTHOR ""Martchus"")
set(META_APP_AUTHOR_MAIL ""martchus@gmx.net"")
set(META_APP_URL ""https://github.com/${META_APP_AUTHOR}/${META_PROJECT_NAME}"")
set(META_APP_DESCRIPTION ""Tray application for Syncthing"")
set(META_APP_CATEGORIES ""Network;FileTransfer"")
set(META_GUI_OPTIONAL false)
set(META_VERSION_MAJOR 0)
set(META_VERSION_MINOR 10)
set(META_VERSION_PATCH 9)
set(META_VERSION_EXACT_SONAME ON)
set(META_ADD_DEFAULT_CPP_UNIT_TEST_APPLICATION ON)

project(${META_PROJECT_NAME})

# disable KDE integration under Android, Windows and MacOS by default
if(ANDROID OR WIN32 OR APPLE)
    set(FILE_ITEM_ACTION_PLUGIN_DISABLED_BY_DEFAULT ON)
    set(PLASMOID_DISABLED_BY_DEFAULT ON)
else()
    set(FILE_ITEM_ACTION_PLUGIN_DISABLED_BY_DEFAULT OFF)
    set(PLASMOID_DISABLED_BY_DEFAULT OFF)
endif()

# add options for partial build
option(NO_LIBSYNCTHING ""whether building Syncthing itself as a library should be skipped"" ON)
option(NO_CLI ""whether building CLI should be skipped"" OFF)
option(NO_TRAY ""whether building the tray should be skipped"" OFF)
option(NO_FILE_ITEM_ACTION_PLUGIN ""whether building the file item action plugin should be skipped"" ""${FILE_ITEM_ACTION_PLUGIN_DISABLED_BY_DEFAULT}"")
option(NO_MODEL ""whether building models should be skipped, implies NO_TRAY"" OFF)
option(NO_WIDGETS ""whether building widgets should be skipped, implies NO_TRAY"" OFF)
option(NO_PLASMOID ""whether building the Plasma 5 plasmoid should be skipped"" ""${PLASMOID_DISABLED_BY_DEFAULT}"")

# allow using non-default configuration
set(CONFIGURATION_PACKAGE_SUFFIX """" CACHE STRING ""sets the suffix for find_package() calls to packages configured via c++utilities"")

# add subdirectories
enable_testing()
add_subdirectory(connector)
add_subdirectory(testhelper)
if (NOT NO_LIBSYNCTHING)
    add_subdirectory(libsyncthing)
endif()
link_directories(${LIB_SYNCTHING_CONNECTOR_BINARY_DIR})
if(NOT NO_CLI)
    add_subdirectory(cli)
endif()
if(NOT NO_MODEL)
    add_subdirectory(model)
    link_directories(${LIB_SYNCTHING_MODEL_BINARY_DIR})
    if(NOT NO_WIDGETS)
        add_subdirectory(widgets)
        if(NOT NO_TRAY)
            add_subdirectory(tray)
        endif()
        if(NOT NO_PLASMOID)
            add_subdirectory(plasmoid)
        endif()
    endif()
endif()
if(NOT NO_FILE_ITEM_ACTION_PLUGIN)
    add_subdirectory(fileitemactionplugin)
endif()
",3.1.0,3.1
3932,shogun-toolbox,shogun,False,False,False,False,False,176,C++,2020-05-17 13:24:08+00:00,2011-04-01 10:44:32+00:00,2668,17519,"# Instructions:
# $ mkdir build
# $ cd build
# $ cmake ..
# $ make

### Policies need to be set *BEFORE* calling 'project()' !!!
# Needed for hardening-flags in Fedora.  This policy will pass
# all compiler-flags to stuff like 'FIND_PACKAGE()'.  Introduced
# with CMake 3.2.0.  See documentation:
# http://www.cmake.org/cmake/help/v3.3/policy/CMP0056.html
IF(POLICY CMP0056)
	CMAKE_POLICY(SET CMP0056 NEW)
	SET(CMAKE_POLICY_DEFAULT_CMP0056 NEW)
ENDIF(POLICY CMP0056)

IF(POLICY CMP0042)
	CMAKE_POLICY(SET CMP0042 NEW)
	SET(CMAKE_POLICY_DEFAULT_CMP0042 NEW)
ENDIF(POLICY CMP0042)

IF(POLICY CMP0054)
	CMAKE_POLICY(SET CMP0054 NEW)
	SET(CMAKE_POLICY_DEFAULT_CMP0054 NEW)
ENDIF(POLICY CMP0054)

project(shogun)
cmake_minimum_required(VERSION 3.1)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake"")
include(ShogunUtils)

SET(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON)

#### set required C++ standard level of the compiler
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
if (MSVC)
	if (MSVC_VERSION VERSION_LESS 1900)
		message(FATAL_ERROR ""C++11 is required to use Shogun, but the version of Visual Studio you are using is too old and doesn't support C++11. You need Visual Studio 2015 or newer. "")
	else()
		include(CheckCXXCompilerFlag)
		CHECK_CXX_COMPILER_FLAG(""/std:c++14"" _cpp_latest_flag_supported)
		if (_cpp_latest_flag_supported)
			add_compile_options(""/std:c++14"")
		endif()
	endif()
endif()

### FIXME: remove these flags when the codebase
# is cleared up
set(HAVE_CXX11 ON)

############# minimum library versions ###################
SET(EIGEN_VERSION_MINIMUM 3.1.2)
SET(VIENNACL_VERSION_MINIMUM 1.5.0)

# Store system's or distribution's C[XX]FLAGS.
SET(SYSTEM_C_FLAGS ""${CMAKE_C_FLAGS}"")
SET(SYSTEM_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
STRING(TOUPPER ""${CMAKE_BUILD_TYPE}"" BUILD_TYPE_UC)
IF(NOT (""${BUILD_TYPE_UC}"" STREQUAL ""DISTRIBUTION""))
	SET(CMAKE_C_FLAGS """")
	SET(CMAKE_CXX_FLAGS """")
ENDIF(NOT (""${BUILD_TYPE_UC}"" STREQUAL ""DISTRIBUTION""))

# CCACHE
OPTION(ENABLE_CCACHE ""Enable ccache for compilation"" ON)
FIND_PACKAGE(CCache)
if(CCACHE_FOUND AND ENABLE_CCACHE)
	SET(CCACHE ""ccache"" CACHE STRING ""ccache"")
	SET(CMAKE_C_COMPILER_ARG1 ${CMAKE_C_COMPILER})
	SET(CMAKE_C_COMPILER ${CCACHE})
	SET(CMAKE_CXX_COMPILER_ARG1 ${CMAKE_CXX_COMPILER})
	SET(CMAKE_CXX_COMPILER ${CCACHE})
	SET(CMAKE_C_FLAGS ""${CCACHE_FLAGS} ${CMAKE_C_FLAGS}"")
	SET(CMAKE_CXX_FLAGS ""${CCACHE_FLAGS} ${CMAKE_CXX_FLAGS}"")
endif()

################# VARIABLES #####################
SET(INCLUDES """")

SET(EXT_SRC_HEADER ""h"")
SET(EXT_SRC_C ""c"")
SET(EXT_SRC_CPP ""cpp"")
SET(EXT_SRC_SWIG ""_wrap.cxx"")
SET(EXT_SRC_TEST ""_unittest.cc"")
SET(EXT_INP_SWIG ""i"")
SET(EXT_IF_SWIG ""py"")
SET(EXT_CPP_TMP ""${EXT_SRC_CPP}.templ"")
SET(EXT_CPP_SH ""${EXT_SRC_CPP}.sh"")
SET(EXT_CPP_PY ""${EXT_SRC_CPP}.py"")
SET(EXT_SRC_TEST_TMP ""${EXT_SRC_TEST}.jinja2"")

SET(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR}/third_party)
SET(LIBSHOGUN_SRC_DIR ${CMAKE_SOURCE_DIR}/src/shogun)
SET(COMMON_INTERFACE_SRC_DIR ${CMAKE_SOURCE_DIR}/src/interfaces/swig/)

SET(AVAILABLE_INTERFACES
    INTERFACE_PYTHON;INTERFACE_OCTAVE;INTERFACE_JAVA;INTERFACE_PERL;INTERFACE_RUBY;INTERFACE_CSHARP;INTERFACE_R;INTERFACE_LUA;INTERFACE_SCALA)
SET(INTERFACE_PYTHON_DESCRIPTION ""Python"")
SET(INTERFACE_OCTAVE_DESCRIPTION ""Octave"")
SET(INTERFACE_JAVA_DESCRIPTION ""Java"")
SET(INTERFACE_PERL_DESCRIPTION ""Perl"")
SET(INTERFACE_RUBY_DESCRIPTION ""Ruby"")
SET(INTERFACE_CSHARP_DESCRIPTION ""C#"")
SET(INTERFACE_R_DESCRIPTION ""R"")
SET(INTERFACE_LUA_DESCRIPTION ""Lua"")
SET(INTERFACE_SCALA_DESCRIPTION ""Scala"")
SET(LIBSHOGUN ON CACHE BOOL ""Compile shogun library"")

IsAnyTrue(""${AVAILABLE_INTERFACES}"" ANY_INTERFACE_ENABLED)
IF (${ANY_INTERFACE_ENABLED})
	# SWIG3 is the minimum requirement because of C++11 support
	SET(SWIG_VERSION_MINIMUM 3.0.0)

	IF(INTERFACE_CSHARP)
		# We require SWIG 3.0.7 to support functions with a few SGVector or
		# SGMatrix arguments. The required SWIG feature is called
		# ""Support for special variable expansion in typemap attributes.""
		# and was introduced just in 3.0.7.
		SET(SWIG_VERSION_MINIMUM 3.0.7)

		# SWIG >= 3.0.0 has some new handling with C# (Mono) and breaks
		# typemapping created for earlier versions of SWIG.
		# see: http://www.swig.org/Doc3.0/CSharp.html#CSharp_introduction_swig2_compatibility
		LIST(APPEND CMAKE_SWIG_FLAGS ""-DSWIG2_CSHARP"")
	ELSEIF(INTERFACE_PYTHON)
		# SWIG was broken for combining -builtin and -modernargs
		# from v3.0.0 and until 3.0.4.  This bug was fixed in
		# v3.0.5.  Make CMake emit an error and fail to configure.
		SET(SWIG_VERSION_MINIMUM 3.0.5)
	ENDIF()

	FIND_PACKAGE(SWIG ${SWIG_VERSION_MINIMUM} REQUIRED)
	# use our own UseSWIG.cmake in order to be able to enable ccache-swig
	SET(SWIG_USE_FILE ${CMAKE_SOURCE_DIR}/cmake/UseSWIG.cmake)
	IF(ENABLE_CCACHE AND CCACHE_SWIG)
		SET(CCACHE_SWIG_EXECUTABLE ${CCACHE_SWIG})
	ENDIF()
	SET(COMPILE_INTERFACE 1)
ENDIF()

# Detect OS
DetectSystemName()

# Get processor type, sets MACHINE macro
SET(MACHINE ${CMAKE_SYSTEM_PROCESSOR})

SET(EXT_LIB_SWIG_RUBY "".so"")
if(DARWIN)
	SET(EXT_LIB_SWIG_RUBY "".bundle"")
ENDIF()

################ COMPILER #######################
# g++ version needs to be => 4.3
IF(CMAKE_COMPILER_IS_GNUCXX)
	IF(""${CMAKE_CXX_COMPILER_VERSION}"" VERSION_LESS ""4.3.0"")
		MESSAGE(FATAL_ERROR ""g++ version is too old"")
	ENDIF()
ENDIF()

#Build type
if( NOT CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE Release CACHE STRING
       ""Choose the type of build, options are: Debug Release Distribution.""
       FORCE )
endif()

# set the flags for the build types
IF(NOT MSVC)
	SET(COMPILER_WARNINGS ""-Wall -Wno-unused-parameter -Wformat -Wformat-security -Wparentheses -Wshadow -Wno-unknown-pragmas -Wno-deprecated"")
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
	SET(RELEASE_COMPILER_FLAGS ""-fexpensive-optimizations -frerun-cse-after-loop -fcse-follow-jumps -finline-functions -fschedule-insns2 -fthread-jumps -fforce-addr -fstrength-reduce -funroll-loops"")
	IF (${MACHINE} MATCHES ""x86_64"" OR ${MACHINE} MATCHES ""i686"")
		SET(RELEASE_COMPILER_FLAGS ""${RELEASE_COMPILER_FLAGS} -mfpmath=sse"")
	ENDIF()
ELSEIF(${CMAKE_CXX_COMPILER_ID} STREQUAL ""Clang"")
	SET(RELEASE_COMPILER_FLAGS ""-funroll-loops"")
ENDIF()
SET(SWIG_CXX_COMPILER_FLAGS ""-O0 -g"")
SET(CMAKE_C_FLAGS ""${COMPILER_WARNINGS} ${CMAKE_C_FLAGS}"")
SET(CMAKE_CXX_FLAGS ""${COMPILER_WARNINGS} ${CMAKE_CXX_FLAGS}"")
IF(MSVC)
	SET(CMAKE_C_FLAGS_RELEASE ""/O2 ${RELEASE_COMPILER_FLAGS}"")
	SET(CMAKE_CXX_FLAGS_RELEASE ""/O2 ${RELEASE_COMPILER_FLAGS}"")
	SET(CMAKE_C_FLAGS_DISTRIBUTION ""/Ot"")
	SET(CMAKE_CXX_FLAGS_DISTRIBUTION ""/Ot"")
	SET(CMAKE_C_FLAGS_DEBUG ""/DEBUG /Od /Zi"")
	SET(CMAKE_CXX_FLAGS_DEBUG ""/DEBUG /Od /Zi"")
	add_compile_options(""/bigobj"")
ELSE()
	SET(CMAKE_C_FLAGS_RELEASE ""-O3 ${RELEASE_COMPILER_FLAGS}"")
	SET(CMAKE_CXX_FLAGS_RELEASE ""-O3 ${RELEASE_COMPILER_FLAGS}"")
	SET(CMAKE_C_FLAGS_DISTRIBUTION ""-O2"")
	SET(CMAKE_CXX_FLAGS_DISTRIBUTION ""-O2"")
	SET(CMAKE_C_FLAGS_DEBUG ""-g"")
	SET(CMAKE_CXX_FLAGS_DEBUG ""-g"")
ENDIF()

OPTION(ENABLE_COVERAGE ""Enable code coverage"" OFF)
IF(ENABLE_COVERAGE)
	IF(NOT CMAKE_COMPILER_IS_GNUCXX)
		MESSAGE(FATAL_ERROR ""Compiler is not GNU gcc! Aborting..."")
	ENDIF()
	IF (NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
		MESSAGE(WARNING ""Code coverage results with an optimised (non-Debug) build may be misleading"")
	ENDIF()
	SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} --coverage"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage"")
	SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} --coverage"")
	SET(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} --coverage"")
ENDIF()

IF(ENABLE_TSAN)
	IF (NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
		MESSAGE(WARNING ""Thread-sanitizer results with an optimised (non-Debug) build may be misleading"")
	ENDIF()
	SET(SANITIZER_FLAGS ""-fsanitize=thread -fPIE"")
	SET(SANITIZER_LIBRARY -pie)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		LIST(APPEND SANITIZER_LIBRARY -ltsan)
	ELSEIF(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
		LIST(APPEND SANITIZER_LIBRARY -fsanitize=thread)
	ENDIF()
ENDIF()

IF(ENABLE_ASAN)
	IF (NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
		MESSAGE(WARNING ""Address-sanitizer results with an optimised (non-Debug) build may be misleading"")
	ENDIF()
	SET(SANITIZER_FLAGS ""-fsanitize=address -fno-omit-frame-pointer"")
	SET(SANITIZER_LIBRARY -fsanitize=address)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		LIST(APPEND SANITIZER_LIBRARY -lasan)
	ENDIF()
ENDIF()

IF(ENABLE_MSAN)
	IF (NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
		MESSAGE(WARNING ""Memory-sanitizer results with an optimised (non-Debug) build may be misleading"")
	ENDIF()
	SET(SANITIZER_FLAGS ""-fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer"")
	SET(SANITIZER_LIBRARY)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		LIST(APPEND SANITIZER_LIBRARY -lmsan)
	ELSEIF(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
		LIST(APPEND SANITIZER_LIBRARY -fsanitize=memory)
	ENDIF()
ENDIF()

IF(ENABLE_UBSAN)
	IF (NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
		MESSAGE(WARNING ""Memory-sanitizer results with an optimised (non-Debug) build may be misleading"")
	ENDIF()
	SET(SANITIZER_FLAGS ""-fsanitize=undefined"")
	SET(SANITIZER_LIBRARY)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		LIST(APPEND SANITIZER_LIBRARY -lubsan)
	ELSEIF(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
		LIST(APPEND SANITIZER_LIBRARY -fsanitize=undefined)
	ENDIF()
ENDIF()

# Fix build on Mac OSX 10.10 Yosemite when using mp-gcc-4X.
# See: https://github.com/shogun-toolbox/shogun/issues/2635
IF(DARWIN AND (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang""))
	SET(CMAKE_CXX_FLAGS ""-mno-avx -flax-vector-conversions -D'__has_extension(x)=0' -DvImage_Utilities_h -DvImage_CVUtilities_h ${CMAKE_CXX_FLAGS}"")
	SET(SWIG_CXX_COMPILER_FLAGS ""-mno-avx -flax-vector-conversions -D'__has_extension(x)=0' -DvImage_Utilities_h -DvImage_CVUtilities_h ${SWIG_CXX_COMPILER_FLAGS}"")
ENDIF(DARWIN AND (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang""))

###### MALLOC LIBRARY ###########
SET(EXTERNAL_MALLOC_CFLAGS ""-fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free"")
if (MALLOC_REPLACEMENT MATCHES ""Jemalloc"")
	include(external/Jemalloc)

	SET(USE_JEMALLOC 1)
	LIST(INSERT INCLUDES 0 ${Jemalloc_INCLUDE_DIR})
	SET(CMAKE_CXX_FLAGS ""${EXTERNAL_MALLOC_CFLAGS} ${CMAKE_CXX_FLAGS}"")
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${Jemalloc_LIBRARIES})
elseif(MALLOC_REPLACEMENT MATCHES ""TCMalloc"")
	include(external/TCMalloc)

	SET(USE_TCMALLOC 1)
	LIST(INSERT INCLUDES 0 ${TCMalloc_INCLUDE_DIR})
	SET(CMAKE_CXX_FLAGS ""${EXTERNAL_MALLOC_CFLAGS} ${CMAKE_CXX_FLAGS}"")
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${TCMalloc_LIBRARIES})
elseif(MALLOC_REPLACEMENT MATCHES ""Hoard"")
	find_package(Hoard)
	if (Hoard_FOUND)
		SET(USE_HOARD 1)
		SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${Hoard_LIBRARIES})
	else ()
	message(FATAL_ERROR ""Unable to use hoard malloc: library not found"")
	endif ()
else()
	message(STATUS ""Using system's malloc"")
endif()

############### VERSION #####################
FILE(STRINGS ""${CMAKE_SOURCE_DIR}/NEWS"" NEWS LIMIT_COUNT 5)
STRING(REGEX REPLACE "".*SHOGUN Release version ([0-9.]*).*"" ""\\1"" VERSION ""${NEWS}"")
STRING(REGEX REPLACE "".*SHOGUN Release version.*\\(libshogun ([0-9.]*).*"" ""\\1"" LIBSHOGUNVER ""${NEWS}"")
STRING(REGEX REPLACE "".*SHOGUN Release version.*\\(libshogun ([0-9]*).*"" ""\\1"" LIBSHOGUNSO ""${NEWS}"")
STRING(REGEX REPLACE "".*SHOGUN Release version.*data ([0-9.]*).*"" ""\\1"" DATAVER ""${NEWS}"")
STRING(REGEX REPLACE ""([0-9]*).[0-9]*.[0-9]*"" ""\\1"" SHOGUN_VERSION_MAJOR ""${VERSION}"")
STRING(REGEX REPLACE ""[0-9]*.([0-9]*).[0-9]*"" ""\\1"" SHOGUN_VERSION_MINOR ""${VERSION}"")
STRING(REGEX REPLACE ""[0-9]*.[0-9]*.([0-9]*)"" ""\\1"" SHOGUN_VERSION_PATCH ""${VERSION}"")

################# EXAMPLES ##################
OPTION(BUILD_EXAMPLES ""Build Examples"" ON)
OPTION(BUILD_META_EXAMPLES ""Generate API examples from meta-examples"" ON)
# note the examples dir is added below after tests have been defined

################# DATATYPES #################
IF(COMPILE_INTERFACE)
	OPTION(USE_CHAR ""Support for char datatype"" ON)
	OPTION(USE_BOOL ""Support for bool datatype"" ON)
	OPTION(USE_UINT8 ""Support for uint8_t datatype"" ON)
	OPTION(USE_UINT16 ""Support for uint16_t datatype"" ON)
	OPTION(USE_UINT32 ""Support for uint32_t datatype"" OFF)
	OPTION(USE_UINT64 ""Support for uint64_t datatype"" ON)
	OPTION(USE_INT8 ""Support for int8_t datatype"" OFF)
	OPTION(USE_INT16 ""Support for int16_t datatype"" OFF)
	OPTION(USE_INT32 ""Support for int32_t datatype"" ON)
	OPTION(USE_INT64 ""Support for int64_t datatype"" ON)
	OPTION(USE_FLOAT32 ""Support for float32_t datatype"" ON)
	OPTION(USE_FLOAT64 ""Support for float64_t datatype"" ON)
	OPTION(USE_COMPLEX128 ""Support for complex128_t datatype"" ON)
	OPTION(USE_FLOATMAX ""Support for floatmax_t datatype"" OFF)
ENDIF(COMPILE_INTERFACE)

# detect word size
IF(CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (DARWIN OR WIN32))
	SET(SWIGWORDSIZE64 TRUE)
ENDIF()

#interfaces
ForEach(Interface ${AVAILABLE_INTERFACES})
    OPTION(${Interface} ${Interface}Description OFF)
EndForEach(Interface)

# Debugging Python-interface with CTest
OPTION(ENABLE_PYTHON_DEBUG ""Enable Python-interface-debugging with CTest"" OFF)

SET(SVMLightWarning ""\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"")
SET(SVMLightWarning ""${SVMLightWarning}\nWARNING: SHOGUN is built using SVMlight which was written"")
SET(SVMLightWarning ""${SVMLightWarning}\nby Thorsten Joachims and uses a different non GPL compatible license."")
SET(SVMLightWarning ""${SVMLightWarning}\nTo build a fully GPL'd SHOGUN use"")
SET(SVMLightWarning ""${SVMLightWarning}\nThe SVMlight license can be found in LICENSE.SVMlight.  In case"")
SET(SVMLightWarning ""${SVMLightWarning}\nyou do not know or cannot agree to the licensing terms expressed in"")
SET(SVMLightWarning ""${SVMLightWarning}\nLICENSE.SVMlight press ctrl+c to abort configure now."")
SET(SVMLightWarning ""${SVMLightWarning}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"")

#Trace memory allocs
OPTION(TRACE_MEMORY_ALLOCS ""Memory allocation tracing"" OFF)

# HMM
OPTION(USE_HMMDEBUG ""HMM cache"" OFF)

OPTION(USE_HMMCACHE ""HMM cache"" ON)

OPTION(USE_HMMPARALLEL ""Parallel structures in hmm training"" OFF)
IF(USE_HMMPARALLEL)
	SET(USE_HMMPARALLEL_STRUCTURES 1)
ENDIF()

# Viterbi path debug
OPTION(USE_PATHDEBUG ""Viterbi path debugging"" OFF)

# big states
OPTION(USE_BIGSTATES ""Big (16bit) state"" ON)

#kernelcache to use 4-byte-floating-point values instead of 8-byte-doubles
OPTION(USE_SHORTREAL_KERNELCACHE ""Kernelcache to use 4-byte-floating-point values instead of 8-byte-doubles"" ON)

# PRNG settings
SET(MEXP ""19937"" CACHE STRING ""PRNG Mersenne exponent"")
SET(SFMT_MEXP ${MEXP})
SET(DSFMT_MEXP ${MEXP})

OPTION(USE_LOGCACHE ""Use (1+exp(x)) log cache (is much faster but less accurate)"" OFF)

OPTION(USE_LOGSUMARRAY ""Use sum array, supposed to be a bit more accurate"" OFF)

######################### LIBRARIES #########################

FIND_PACKAGE(GDB)
IF (GDB_FOUND)
	SET(GDB_DEFAULT_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/src/.gdb)
ENDIF()

FIND_PACKAGE(Doxygen 1.8.6)
IF(DOXYGEN_FOUND)
	SET(HAVE_DOXYGEN 1)
ENDIF()

# detect PYTHON
FIND_PACKAGE(PythonInterp REQUIRED)

# save configuration options
IF (LIBSHOGUN)
	MergeCFLAGS()
	add_subdirectory(${CMAKE_SOURCE_DIR}/src/shogun)
	add_library(shogun::shogun ALIAS shogun)
	if(LIBSHOGUN_BUILD_STATIC)
		add_library(shogun::shogun-static ALIAS shogun-static)
	endif()
	set(shogun_INCLUDE_DIR ${CMAKE_BINARY_DIR}/src)
ELSE()
	find_package(Shogun ${VERSION} CONFIG REQUIRED)
ENDIF()

#SWIG Interfaces
ForEach(SwigFlag ""-w473"" ""-w454"" ""-w312"" ""-w325"" ""-fvirtual"")
    LIST(APPEND CMAKE_SWIG_FLAGS ${SwigFlag})
EndForEach()

OPTION(SWIG_SINGLE_THREADED ""Build interfaces single-threaded to reduce memory usage"" OFF)

OPTION(USE_SWIG_DIRECTORS ""Enable SWIG director classes"" ON)

# Respect system's or distribution's C[XX]FLAGS.
OPTION(SWIG_WITH_SYSTEM_CFLAGS ""Enable system's C[XX]FLAGS for compilation of swig-binaries"" ON)

IF(NOT (""${BUILD_TYPE_UC}"" STREQUAL ""DISTRIBUTION""))
	SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${SYSTEM_C_FLAGS}"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${SYSTEM_CXX_FLAGS}"")
ENDIF(NOT (""${BUILD_TYPE_UC}"" STREQUAL ""DISTRIBUTION""))

IF(SWIG_WITH_SYSTEM_CFLAGS)
	SET(SWIG_CXX_COMPILER_FLAGS ""${SWIG_CXX_COMPILER_FLAGS} ${SYSTEM_CXX_FLAGS}"")
ENDIF(SWIG_WITH_SYSTEM_CFLAGS)

OPTION(REDUCE_SWIG_DEBUG ""Reduce debuginfo when compiling interfaces"" OFF)
IF(REDUCE_SWIG_DEBUG)
	SET(SWIG_CXX_COMPILER_FLAGS ""${SWIG_CXX_COMPILER_FLAGS} -g1"")
ENDIF(REDUCE_SWIG_DEBUG)

# python
IF (INTERFACE_PYTHON)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/python)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/python)
	ENDIF()
ENDIF()

# lua
IF (INTERFACE_LUA)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/lua)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/lua)
	ENDIF()
ENDIF()

# scala
IF (INTERFACE_SCALA)
	# Java needed because Scala extends Java Classes and uses the executable generated from Java example for Integration testing
	set(INTERFACE_JAVA ""ON"")
	FIND_PACKAGE(Scala REQUIRED)
	IF(NOT INTERFACE_JAVA)
		IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/java)
			add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/java)
		ENDIF()
	ENDIF()
ENDIF()

# java
IF (INTERFACE_JAVA)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/java)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/java)
	ENDIF()
ENDIF()

# ruby
IF (INTERFACE_RUBY)
	add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/ruby)
ENDIF()

# octave
IF (INTERFACE_OCTAVE)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/octave)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/octave)
	ENDIF()
ENDIF()

# csharp
IF (INTERFACE_CSHARP)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/csharp)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/csharp)
	ENDIF()
ENDIF()

# R
IF (INTERFACE_R)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/r)
		add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/r)
	ENDIF()
ENDIF()

# perl
IF (INTERFACE_PERL)
	FIND_PACKAGE(FindPerlLibs REQUIRED)
	UNSET(TARGET_SWIGFLAGS)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/src/interfaces/perl)
		#add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/perl)
	ENDIF()
ENDIF()

IF (SVMLight)
	MESSAGE(STATUS ${SVMLightWarning})
ENDIF()

################# TESTING ###################
#TODO: finish!!!
OPTION(BUILD_DASHBOARD_REPORTS ""Set to ON to activate reporting of Shogun builds"" OFF)
IF(BUILD_DASHBOARD_REPORTS)
	file(TO_CMAKE_PATH ""${CMAKE_SOURCE_DIR}/configs/valgrind.supp"" VALGRIND_SUPPRESSION_FILE)
	SET(MEMORYCHECK_SUPPRESSIONS_FILE ${VALGRIND_SUPPRESSION_FILE} CACHE FILEPATH ""File that contains suppressions for the memory checker"")
	SET(MEMORYCHECK_COMMAND_OPTIONS ""-q --tool=memcheck --leak-check=full --track-origins=yes --num-callers=50 --error-exitcode=1"")
	include(CTest)
ENDIF()

OPTION(ENABLE_TESTING ""Enable testing"" OFF)
OPTION(TRAVIS_DISABLE_UNIT_TESTS ""Disable unit testing to speed up jobs on travis-ci"" OFF)
OPTION(TRAVIS_DISABLE_LIBSHOGUN_TESTS ""Disable libshogun tests to speed up jobs on travis-ci"" OFF)
OPTION(TRAVIS_DISABLE_META_CPP ""Disable cpp meta examples and integration testing to speed up jobs on travis-ci"" OFF)
OPTION(DISABLE_META_INTEGRATION_TESTS ""Disable meta integration testing to speed up build"" OFF)


IF(ENABLE_TESTING)
	IF (NOT LIBSHOGUN)
		MESSAGE(FATAL_ERROR ""Cannot compile tests without libshogun!"")
	ENDIF()

	IF(EXISTS ${CMAKE_SOURCE_DIR}/tests)
		IF(NOT BUILD_DASHBOARD_REPORTS)
			enable_testing()
		ENDIF()

		IF (NOT TRAVIS_DISABLE_UNIT_TESTS AND EXISTS ${CMAKE_SOURCE_DIR}/tests/unit)
			add_subdirectory(${CMAKE_SOURCE_DIR}/tests/unit)
		ENDIF()

		IF(BUILD_META_EXAMPLES AND NOT DISABLE_META_INTEGRATION_TESTS AND EXISTS ${CMAKE_SOURCE_DIR}/tests/meta)
            add_subdirectory(${CMAKE_SOURCE_DIR}/tests/meta)
        ENDIF()
	ENDIF()
ENDIF()

IF(EXISTS ${CMAKE_SOURCE_DIR}/examples)
	IF(ENABLE_TESTING AND NOT BUILD_EXAMPLES)
	    message(STATUS ""Tests require (disabled) examples, enabling."")
	ENDIF()
    IF(ENABLE_TESTING OR BUILD_EXAMPLES)
	    add_subdirectory(${CMAKE_SOURCE_DIR}/examples)
	ENDIF()

    # always build minimal example(s)
    IF(EXISTS ${CMAKE_SOURCE_DIR}/examples/minimal)
        add_subdirectory(${CMAKE_SOURCE_DIR}/examples/minimal)
    ENDIF()

	IF(BUILD_META_EXAMPLES)
        # allow meta examples without adding examples dir itself
        add_subdirectory(${CMAKE_SOURCE_DIR}/examples/meta)
    ENDIF()
ENDIF()

IF(EXISTS ${CMAKE_SOURCE_DIR}/doc)
	add_subdirectory(${CMAKE_SOURCE_DIR}/doc)
ENDIF()

include(ShogunPackaging)

PrintLine()
PrintStatus(""Summary of Configuration Variables"")
include(FeatureSummary)
feature_summary(WHAT ALL)

PrintLine()
PrintStatus(""Integrations"")

PrintInterfaceStatus(""OpenCV Integration"" OpenCV)

PrintLine()
PrintStatus(""Interfaces"")

ForEach(Interface ${AVAILABLE_INTERFACES})
    PrintInterfaceStatus(""${${Interface}_DESCRIPTION}"" ${Interface})
EndForEach(Interface)

PrintLine()
PrintStatus(""To compile shogun type"")
PrintStatus(""  make"")
PrintStatus("""")
PrintStatus(""To install shogun to ${CMAKE_INSTALL_PREFIX} type"")
PrintStatus(""  make install"")
PrintStatus("""")
PrintStatus(""or to install to a custom directory"")
PrintStatus(""  make install DESTDIR=/my/special/path"")
PrintStatus(""  (or rerun cmake with -DCMAKE_INSTALL_PREFIX=/my/special/path) to just change the prefix"")
PrintLine()
",3.1,3.1
4325,rantala,string-sorting,False,False,False,False,False,1,C++,2020-02-13 08:19:27+00:00,2011-03-01 13:04:07+00:00,34,261,"cmake_minimum_required(VERSION 3.1)
set(CMAKE_CXX_STANDARD 11)

project(sortstring)
include_directories(src src/util)

link_libraries(rt)

set(INTERNAL_SRCS
	src/msd_a.cpp
	src/msd_a2.cpp
	src/msd_lsd.cpp
	src/msd_ce.cpp
	src/msd_ci.cpp
	src/msd_dyn_block.cpp
	src/msd_dyn_vector.cpp
	src/burstsort.cpp
	src/burstsort2.cpp
	src/burstsort_mkq.cpp
	src/multikey_simd.cpp
	src/multikey_dynamic.cpp
	src/multikey_block.cpp
	src/multikey_multipivot.cpp
	src/multikey_cache.cpp
	src/mergesort.cpp
	src/mergesort_unstable.cpp
	src/mergesort_losertree.cpp
	src/mergesort_lcp.cpp
	src/funnelsort.cpp
	src/routines.c
	src/sortstring.c
	src/util/timing.c
	src/util/cpus_allowed.c
	src/util/vmainfo.c)

set(EXTERNAL_SRCS
	external/lcp-quicksort.cpp
	external/mbmradix.c
	external/quicksort.c
	external/mkqsort.c
	external/forward8.c
	external/cradix.c
	external/cradix-improved.c
	external/msd.c
	external/multikey.c
	external/burstsortL.c
	external/utils.c
	external/adaptive.c
	external/burstsortA.c
	external/forward16.c
	external/parallel_string_radix_sort.cpp)

add_executable(sortstring
	${INTERNAL_SRCS}
	${EXTERNAL_SRCS})

add_definitions(-msse2)
add_definitions(-Drestrict=__restrict__)
set(CMAKE_CXX_FLAGS_RELEASE        ""-fopenmp -g -DNDEBUG -march=native ${CMAKE_CXX_FLAGS_RELEASE}"")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""-fopenmp -g -DNDEBUG -march=native ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
set(CMAKE_C_FLAGS_RELEASE          ""-fopenmp -g -DNDEBUG -march=native ${CMAKE_C_FLAGS_RELEASE}"")
set(CMAKE_C_FLAGS_RELWITHDEBINFO   ""-fopenmp -g -DNDEBUG -march=native ${CMAKE_C_FLAGS_RELWITHDEBINFO}"")
set(CMAKE_CXX_FLAGS                ""-Wall -Wextra ${CMAKE_CXX_FLAGS}"")
set(CMAKE_C_FLAGS                  ""-Wall -Wextra -std=c99 ${CMAKE_C_FLAGS}"")

set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O1 -g -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2"")
set(CMAKE_C_FLAGS_DEBUG   ""${CMAKE_C_FLAGS_DEBUG}   -O1 -g -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2"")
",3.1,3.1
4329,darlinghq,darling,False,False,False,False,False,45,C,2020-05-16 06:56:46+00:00,2012-12-09 10:31:44+00:00,5442,3096,"SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR ""x86-64"")

# This allows setting the compiler with -DCMAKE_C_COMPILER when configuring.
if (NOT DEFINED CMAKE_C_COMPILER)
	find_program(CMAKE_C_COMPILER NAMES
		""clang""
		""clang-4.0""
		""clang-6.0""
		""clang-7""
		""clang-9""
		""clang-10""
)
endif(NOT DEFINED CMAKE_C_COMPILER)

if (NOT DEFINED CMAKE_CXX_COMPILER)
	find_program(CMAKE_CXX_COMPILER NAMES
		""clang++""
		""clang++-4.0""
		""clang++-6.0""
		""clang++-7""
		""clang++-9""
		""clang++-10""
)
endif(NOT DEFINED CMAKE_CXX_COMPILER)

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}"")
endif()

SET(CMAKE_SKIP_RPATH TRUE)

project(darling)

cmake_minimum_required(VERSION 3.10)
enable_language(ASM)

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")
include(InstallSymlink)
include(MacroEnsureOutOfSourceBuild)
include(dsym)
include(xcproj)

MACRO_ENSURE_OUT_OF_SOURCE_BUILD()

set(DARLING_TOP_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}"")
set(DARLING_NO_EXECUTABLES OFF)
set(CMAKE_C_IMPLICIT_LINK_LIBRARIES """")
set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES """")

if (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES ""i686|i386"")
	message(FATAL_ERROR ""This software can only be built on x86-64 systems"")
endif (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES ""i686|i386"")

SET(IGNORED_WARNINGS ""-Wno-nullability-completeness -Wno-deprecated-declarations"")

if (${CMAKE_C_COMPILER_ID} STREQUAL ""Clang"" AND NOT ${CMAKE_C_COMPILER_VERSION} VERSION_LESS ""3.9"")
	SET(IGNORED_WARNINGS ""${IGNORED_WARNINGS} -Wno-expansion-to-defined"")
endif (${CMAKE_C_COMPILER_ID} STREQUAL ""Clang"" AND NOT ${CMAKE_C_COMPILER_VERSION} VERSION_LESS ""3.9"")

SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${IGNORED_WARNINGS}"")
SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${IGNORED_WARNINGS}"")
SET(CMAKE_C_FLAGS_DEBUG ""-O0 -ggdb"")
SET(CMAKE_CXX_FLAGS_DEBUG ""-O0 -ggdb"")

if(CMAKE_POSITION_INDEPENDENT_CODE)
	SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fPIC"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fPIC"")
	SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pie"")
endif(CMAKE_POSITION_INDEPENDENT_CODE)

enable_language(ASM-ATT)

option(FULL_BUILD ""Include large items in the build"" ON)
option(TARGET_i386 ""Enable i386 slices"" ON)
option(TARGET_x86_64 ""Enable x86_64 slices"" ON)
option(DEBIAN_PACKAGING ""Packaging for Debian"" OFF)
option(ENABLE_TESTS ""Install in-prefix unit tests"" OFF)

FindDsymutil()
find_package(Setcap REQUIRED)

# Missing CMakeLists.txt must trigger an error
cmake_policy(SET CMP0014 NEW)

add_subdirectory(src)

install(DIRECTORY DESTINATION libexec/darling/private)
install(DIRECTORY DESTINATION libexec/darling/private/etc)
install(DIRECTORY DESTINATION libexec/darling/private/var)
install(DIRECTORY DESTINATION libexec/darling/private/tmp)
InstallSymlink(private/etc ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc)
InstallSymlink(private/var ${CMAKE_INSTALL_PREFIX}/libexec/darling/var)

install(FILES etc/resolv.conf
	DESTINATION libexec/darling/etc)
InstallSymlink(/Volumes/SystemRoot/etc/machine-id ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/machine-id)
InstallSymlink(/Volumes/SystemRoot/etc/nsswitch.conf ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/nsswitch.conf)

install(DIRECTORY DESTINATION libexec/darling/Volumes)
install(DIRECTORY DESTINATION libexec/darling/Volumes/SystemRoot)
InstallSymlink(/ ${CMAKE_INSTALL_PREFIX}/libexec/darling/Volumes/DarlingEmulatedDrive)

install(DIRECTORY DESTINATION libexec/darling/proc)

install(DIRECTORY DESTINATION libexec/darling/var/root)
install(DIRECTORY DESTINATION libexec/darling/var/run)
InstallSymlink(/dev/log ${CMAKE_INSTALL_PREFIX}/libexec/darling/var/run/syslog)

install(DIRECTORY DESTINATION libexec/darling/usr)
install(DIRECTORY DESTINATION libexec/darling/usr/local)
install(DIRECTORY DESTINATION libexec/darling/usr/local/share)

InstallSymlink(/Volumes/SystemRoot/dev ${CMAKE_INSTALL_PREFIX}/libexec/darling/dev)
InstallSymlink(private/tmp ${CMAKE_INSTALL_PREFIX}/libexec/darling/tmp)

InstallSymlink(/proc/self/mounts ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/mtab)
InstallSymlink(/Volumes/SystemRoot/etc/passwd ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/passwd)
InstallSymlink(/Volumes/SystemRoot/etc/group ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/group)
InstallSymlink(/Volumes/SystemRoot/etc/localtime ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/localtime)

InstallSymlink(/Volumes/SystemRoot/usr/share/zoneinfo ${CMAKE_INSTALL_PREFIX}/libexec/darling/usr/share/zoneinfo)

if(NOT DEBIAN_PACKAGING)
	install(CODE ""execute_process(COMMAND bash ${DARLING_TOP_DIRECTORY}/tools/shutdown-user.sh)"")
endif(NOT DEBIAN_PACKAGING)

add_custom_target(uninstall
	COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/tools/uninstall
	COMMENT ""Uninstall Darling and kernel module"")
",3.10,3.1
4339,tobimensch,aqemu,False,False,False,False,False,10,C++,2020-05-03 11:19:42+00:00,2016-04-20 10:42:03+00:00,204,323,"# AQEMU CMake Project

# Authors:
# Andrey Rijov (AQEMU developer)
# Timothy Redaelli (Fix for build in a different folder)
# Tobias Gläßer (Qt5 port)

PROJECT( AQEMU CXX )
CMAKE_MINIMUM_REQUIRED( VERSION 3.1.0 FATAL_ERROR )

# Available options
OPTION( DEBUG ""Build with debug information"" )
OPTION( WITHOUT_EMBEDDED_DISPLAY ""Build without support Embedded VNC Display"" )
OPTION( UPDATE_TRANSLATIONS ""Update source translation files (WARNING: make clean will delete the source .ts files!)"" )
OPTION( INSTALL_MAN ""Install MAN page file"" ""ON"" )

# Debug mode
IF( DEBUG )
	# Verbose compiler output
	SET( CMAKE_VERBOSE_MAKEFILE ON )
	
	# GCC
	ADD_DEFINITIONS( -Wall -g )
ENDIF( DEBUG )

# For finding VNC libs
SET( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/resources/cmake/modules )

# Files
SET( aqemu_headers
    src/No_Boot_Device.h
    src/Highlighted_Label.h
    src/Service.h
    src/Run_Guard.h
    src/QEMU_Docopt.h
    src/IP_Edit.h
    src/Dialog_Button_Box.h
	src/docopt/docopt.h
    	src/Settings_Widget.h
    	src/QDom.h
    	src/tinyxml2.h
	src/About_Window.h
	src/Add_New_Device_Window.h
	src/Add_Port_Window.h
	src/Add_USB_Port_Window.h
	src/Advanced_Settings_Window.h
	src/Boot_Device_Window.h
	src/Convert_HDD_Image_Window.h
	src/Copy_VM_Window.h
	src/Create_HDD_Image_Window.h
	src/Create_Template_Window.h
	src/Delete_VM_Files_Window.h
	src/Device_Manager_Widget.h
	src/Edit_Emulator_Version_Window.h
	src/Emulator_Control_Window.h
	src/Error_Log_Window.h
	src/First_Start_Wizard.h
	src/Folder_Sharing_Widget.h
	src/HDD_Image_Info.h
	src/Main_Window.h
	src/Monitor_Window.h
	src/Network_Widget.h
	src/Old_Network_Widget.h
	src/Ports_Tab_Widget.h
	src/Properties_Window.h
	src/Emulator_Options_Window.h
	src/Select_Icon_Window.h
	src/SMP_Settings_Window.h
	src/Snapshot_Properties_Window.h
	src/Snapshots_Window.h
	src/SPICE_Settings_Widget.h
	src/System_Info.h
	src/Utils.h
	src/VM.h
	src/VM_Devices.h
	src/VM_Wizard_Window.h
	src/VNC_Password_Window.h
)

SET( aqemu_sources
    src/No_Boot_Device.cpp
    src/Highlighted_Label.cpp
    src/Service.cpp
    src/Run_Guard.cpp
    src/QEMU_Docopt.cpp
    src/IP_Edit.cpp
    src/Dialog_Button_Box.cpp
	src/docopt/docopt.cpp
	src/Settings_Widget.cpp
    	src/QDom.cpp
    	src/tinyxml2.cpp
	src/About_Window.cpp
	src/Add_New_Device_Window.cpp
	src/Add_Port_Window.cpp
	src/Add_USB_Port_Window.cpp
	src/Advanced_Settings_Window.cpp
	src/Boot_Device_Window.cpp
	src/Convert_HDD_Image_Window.cpp
	src/Copy_VM_Window.cpp
	src/Create_HDD_Image_Window.cpp
	src/Create_Template_Window.cpp
	src/Delete_VM_Files_Window.cpp
	src/Device_Manager_Widget.cpp
	src/Edit_Emulator_Version_Window.cpp
	src/Emulator_Control_Window.cpp
	src/Error_Log_Window.cpp
	src/First_Start_Wizard.cpp
	src/Folder_Sharing_Widget.cpp
	src/HDD_Image_Info.cpp
	src/main.cpp
	src/Main_Window.cpp
	src/Monitor_Window.cpp
	src/Network_Widget.cpp
	src/Old_Network_Widget.cpp
	src/Ports_Tab_Widget.cpp
	src/Properties_Window.cpp
	src/Emulator_Options_Window.cpp
	src/Select_Icon_Window.cpp
	src/SMP_Settings_Window.cpp
	src/Snapshot_Properties_Window.cpp
	src/Snapshots_Window.cpp
	src/SPICE_Settings_Widget.cpp
	src/System_Info.cpp
	src/Utils.cpp
	src/VM.cpp
	src/VM_Devices.cpp
	src/VM_Wizard_Window.cpp
	src/VNC_Password_Window.cpp
)

SET( aqemu_ui
    src/No_Boot_Device.ui
	src/About_Window.ui
	src/Add_New_Device_Window.ui
	src/Add_Port_Window.ui
	src/Add_USB_Port_Window.ui
	src/Advanced_Settings_Window.ui
	src/Boot_Device_Window.ui
	src/Convert_HDD_Image_Window.ui
	src/Copy_VM_Window.ui
	src/Create_HDD_Image_Window.ui
	src/Create_Template_Window.ui
	src/Delete_VM_Files_Window.ui
	src/Device_Manager_Widget.ui
	src/Edit_Emulator_Version_Window.ui
	src/Emulator_Control_Window.ui
	src/Error_Log_Window.ui
	src/First_Start_Wizard.ui
	src/Folder_Sharing_Widget.ui
	src/Main_Window.ui
	src/Monitor_Window.ui
	src/Network_Widget.ui
	src/Old_Network_Widget.ui
	src/Ports_Tab_Widget.ui
	src/Properties_Window.ui
	src/Emulator_Options_Window.ui
	src/Select_Icon_Window.ui
	src/Settings_Window.ui
	src/SMP_Settings_Window.ui
	src/Snapshot_Properties_Window.ui
	src/Snapshots_Window.ui
	src/SPICE_Settings_Widget.ui
	src/VM_Wizard_Window.ui
	src/VNC_Password_Window.ui
)

SET( aqemu_qrc 
    resources/shared_images.qrc
    resources/icons.qrc
)

SET( aqemu_man_page
    resources/docs/aqemu.1 )

SET( translations 
     translations/German.ts
     transtations/Russian.ts
     translations/Ukrainian.ts
     translations/French.ts
     translations/English.ts )

SET( files_to_translate ${files_to_translate} ${aqemu_headers} ${aqemu_sources} ${aqemu_ui} )

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)
# Instruct CMake to run uic automatically when needed.
SET(CMAKE_AUTOUIC ON)
# Instruct CMake to run rcc automatically when needed.
SET(CMAKE_AUTORCC ON)

# Check Qt
FIND_PACKAGE( Qt5Core )
FIND_PACKAGE( Qt5Widgets )
FIND_PACKAGE( Qt5Network )
FIND_PACKAGE( Qt5Test )
FIND_PACKAGE( Qt5PrintSupport )
FIND_PACKAGE( Qt5DBus )

# Embedded VNC display
IF( NOT WITHOUT_EMBEDDED_DISPLAY )
	FIND_PACKAGE( LibVNCServer REQUIRED )
	
	SET( aqemu_headers ${aqemu_headers} src/Embedded_Display/Machine_View.h src/Embedded_Display/remoteview.h
										src/Embedded_Display/vncclientthread.h src/Embedded_Display/vncview.h )
	
	SET( aqemu_sources ${aqemu_sources} src/Embedded_Display/Machine_View.cpp src/Embedded_Display/remoteview.cpp
										src/Embedded_Display/vncclientthread.cpp src/Embedded_Display/vncview.cpp )
	
	ADD_DEFINITIONS( -DVNC_DISPLAY -DQTONLY )
ENDIF( NOT WITHOUT_EMBEDDED_DISPLAY )

# TODO: port from Qt4 to Qt5
# For translation
#IF( UPDATE_TRANSLATIONS )
#	QT5_CREATE_TRANSLATION( qm_files ${CMAKE_CURRENT_SOURCE_DIR} ${files_to_translate} ${translations} )
#ELSE( UPDATE_TRANSLATIONS )
#	QT5_ADD_TRANSLATION( qm_files ${translations} )
#ENDIF( UPDATE_TRANSLATIONS )

ADD_CUSTOM_TARGET( translations_target DEPENDS ${qm_files} )

IF( COMMAND CMAKE_POLICY )
	CMAKE_POLICY( SET CMP0003 NEW )
ENDIF( COMMAND CMAKE_POLICY )

ADD_EXECUTABLE( aqemu
	${aqemu_sources}
	${ui_headers}
	${moc_srcs}
	${qm_files}
    ${aqemu_qrc}
)

target_include_directories(aqemu PUBLIC src/ )

# Require C++-11 standard
SET_PROPERTY(TARGET aqemu PROPERTY CXX_STANDARD 11)
SET_PROPERTY(TARGET aqemu PROPERTY CXX_STANDARD_REQUIRED ON)

TARGET_LINK_LIBRARIES( aqemu
	Qt5::Widgets
    Qt5::Network
    Qt5::Test
    Qt5::PrintSupport
    Qt5::DBus
)

# Embedded VNC display
IF( NOT WITHOUT_EMBEDDED_DISPLAY )
	TARGET_LINK_LIBRARIES( aqemu ${LIBVNCCLIENT_LIBRARIES} )
ENDIF( NOT WITHOUT_EMBEDDED_DISPLAY )

# Install files
INSTALL( TARGETS aqemu DESTINATION bin )

INSTALL( FILES ${qm_files} DESTINATION share/aqemu )

FILE( GLOB os_icons ""${CMAKE_CURRENT_SOURCE_DIR}/resources/os_icons/*.*"" )
INSTALL( FILES ${os_icons} DESTINATION share/aqemu/os_icons )

FILE( GLOB os_templates ""${CMAKE_CURRENT_SOURCE_DIR}/resources/os_templates/*.*"")
INSTALL( FILES ${os_templates} DESTINATION share/aqemu/os_templates )

FILE( GLOB links ""${CMAKE_CURRENT_SOURCE_DIR}/resources/docs/links.html"" )
INSTALL( FILES ${links} DESTINATION share/aqemu/docs )

FILE( GLOB pixmaps ""${CMAKE_CURRENT_SOURCE_DIR}/resources/menu_data/*.png"" )
INSTALL( FILES ${pixmaps} DESTINATION share/pixmaps )

FILE( GLOB app_menu ""${CMAKE_CURRENT_SOURCE_DIR}/resources/menu_data/aqemu.desktop"" )
INSTALL( FILES ${app_menu} DESTINATION share/applications )

FILE( GLOB app_menu ""${CMAKE_CURRENT_SOURCE_DIR}/resources/menu_data/aqemu.appdata.xml"" )
INSTALL( FILES ${app_menu} DESTINATION share/appdata )

# Create docs .bz2 files
MACRO( create_docs _sources )
	FOREACH( curFile ${ARGN} )
		GET_FILENAME_COMPONENT( _in ${curFile} ABSOLUTE )
		GET_FILENAME_COMPONENT( _basename ${curFile} NAME_WE )
		
		SET( _out ${CMAKE_CURRENT_SOURCE_DIR}/${_basename}.bz2 )
		
		ADD_CUSTOM_COMMAND( OUTPUT ${_out} COMMAND bzip2 ARGS -zkf9 ${_in} DEPENDS ${_in} )
		
		SET( ${_sources} ${${_sources}} ${_out} )
	ENDFOREACH( curFile )
ENDMACRO( create_docs )

CREATE_DOCS( docs_bz2 AUTHORS CHANGELOG README TODO )
ADD_CUSTOM_TARGET( docs ALL DEPENDS ${docs_bz2} )
INSTALL( FILES ${docs_bz2} DESTINATION share/doc/aqemu )

# Compress and install MAN page file
IF( NOT MAN_PAGE_COMPRESSOR )
	MESSAGE( STATUS ""MAN page will be installed is not packed."" )
ELSEIF( MAN_PAGE_COMPRESSOR STREQUAL ""gzip"" )
	SET( COMPRESSOR_SUFFIX gz )
ELSEIF( MAN_PAGE_COMPRESSOR STREQUAL ""bzip2"" )
	SET( COMPRESSOR_SUFFIX bz2 )
ELSEIF( MAN_PAGE_COMPRESSOR STREQUAL ""lzma"" )
	SET( COMPRESSOR_SUFFIX lzma )
ELSE( NOT MAN_PAGE_COMPRESSOR )
	MESSAGE( STATUS ""${MAN_PAGE_COMPRESSOR} not supported!"" )
	MESSAGE( FATAL_ERROR ""Correct values: gzip, bzip2, lzma"" )
ENDIF( NOT MAN_PAGE_COMPRESSOR )

# Compress MAN file?
IF( INSTALL_MAN )
	IF( COMPRESSOR_SUFFIX )
		# Find gzip, bzip or lzma
		FIND_PROGRAM( COMPRESSOR_BIN NAMES ${MAN_PAGE_COMPRESSOR} )
		
		IF( ${COMPRESSOR_BIN} MATCHES COMPRESSOR_BIN-NOTFOUND )
			MESSAGE( STATUS ""${MAN_PAGE_COMPRESSOR} - NOT FOUND!"" )
			MESSAGE( FATAL_ERROR ""Please install ${MAN_PAGE_COMPRESSOR} package!"" )
		ENDIF( ${COMPRESSOR_BIN} MATCHES COMPRESSOR_BIN-NOTFOUND )
		
		# Compress
		EXECUTE_PROCESS( OUTPUT_FILE ${aqemu_man_page}.${COMPRESSOR_SUFFIX}
						COMMAND ""${COMPRESSOR_BIN}"" -9
						INPUT_FILE ${aqemu_man_page}
						WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
		
		# Install MAN
		INSTALL( FILES ${CMAKE_SOURCE_DIR}/${aqemu_man_page}.${COMPRESSOR_SUFFIX} DESTINATION share/man/man1 )
	ELSE( COMPRESSOR_SUFFIX )
		MESSAGE( STATUS ""MAN_PAGE_COMPRESSOR flag not set. Available values: gzip, bzip2, lzma"" )
		MESSAGE( STATUS ""Will be installed not compressed MAN pages"" )
		
		INSTALL( FILES ${CMAKE_SOURCE_DIR}/${aqemu_man_page} DESTINATION share/man/man1 )
	ENDIF( COMPRESSOR_SUFFIX )
ENDIF( INSTALL_MAN )
",3.1.0,3.1
4347,ToruNiina,toml11,False,False,False,False,False,11,C++,2020-05-11 04:36:25+00:00,2017-04-19 11:16:11+00:00,242,994,"cmake_minimum_required(VERSION 3.1)
enable_testing()

project(toml11 VERSION 3.4.0)

option(toml11_BUILD_TEST ""Build toml tests"" ON)
option(toml11_TEST_WITH_ASAN  ""use LLVM address sanitizer"" OFF)
option(toml11_TEST_WITH_UBSAN ""use LLVM undefined behavior sanitizer"" OFF)

include(CheckCXXCompilerFlag)
if(""${CMAKE_VERSION}"" VERSION_GREATER 3.1)
    set(CMAKE_CXX_STANDARD 11 CACHE STRING ""The C++ standard whose features are requested to build all targets."")
    set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL ""Boolean describing whether the value of CXX_STANDARD is a requirement."")
    set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL ""Boolean specifying whether compiler specific extensions are requested."")
else()
    # Manually check for C++11 compiler flag.
    CHECK_CXX_COMPILER_FLAG(""-std=c++11"" COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG(""-std=c++0x"" COMPILER_SUPPORTS_CXX0X)
    CHECK_CXX_COMPILER_FLAG(""-std=gnu++11"" COMPILER_SUPPORTS_GNU11)
    CHECK_CXX_COMPILER_FLAG(""-std=gnu++0x"" COMPILER_SUPPORTS_GNU0X)
    if(COMPILER_SUPPORTS_CXX11)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
    elseif(COMPILER_SUPPORTS_CXXOX)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
    elseif(COMPILER_SUPPORTS_GNU11)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")
    elseif(COMPILER_SUPPORTS_GNU0X)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++0x"")
    else()
        if(MSVC)
            if(MSVC_VERSION LESS 1900)
                message(SEND_ERROR ""MSVC < 14.0 is not supported. Please update your compiler or use mingw"")
            endif()
        else()
            message(SEND_ERROR ""The ${CMAKE_CXX_COMPILER} compiler lacks C++11 support. Use another compiler."")
        endif()
    endif()
endif()

# Set some common directories
include(GNUInstallDirs)
set(toml11_install_cmake_dir         ${CMAKE_INSTALL_LIBDIR}/cmake/toml11)
set(toml11_install_include_dir       ${CMAKE_INSTALL_INCLUDEDIR})
set(toml11_config_dir                ${CMAKE_CURRENT_BINARY_DIR}/cmake/)
set(toml11_config                    ${toml11_config_dir}/toml11Config.cmake)
set(toml11_config_version            ${toml11_config_dir}/toml11ConfigVersion.cmake)

add_library(toml11 INTERFACE)
target_include_directories(toml11 INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${toml11_install_include_dir}>
)
add_library(toml11::toml11 ALIAS toml11)

# Write config and version config files
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${toml11_config_version}
    VERSION ${toml11_VERSION}
    COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
    cmake/toml11Config.cmake.in
    ${toml11_config}
    INSTALL_DESTINATION ${toml11_install_cmake_dir}
    PATH_VARS toml11_install_cmake_dir
)

# Install config files
install(FILES ${toml11_config} ${toml11_config_version}
    DESTINATION ${toml11_install_cmake_dir}
)

# Install header files
install(
    FILES toml.hpp
    DESTINATION ""${toml11_install_include_dir}""
)
install(
    DIRECTORY ""toml""
    DESTINATION ""${toml11_install_include_dir}""
    FILES_MATCHING PATTERN ""*.hpp""
)

# Export targets and install them
install(TARGETS toml11
    EXPORT toml11Targets
)
install(EXPORT toml11Targets
    FILE toml11Targets.cmake
    DESTINATION ${toml11_install_cmake_dir}
    NAMESPACE toml11::
)

if (toml11_BUILD_TEST)
    add_subdirectory(tests)
endif ()
",3.1,3.1
4445,fabianishere,brainfuck,False,False,False,False,False,10,C,2020-01-14 10:40:25+00:00,2011-11-02 19:44:53+00:00,224,227,"﻿cmake_minimum_required(VERSION 3.1)

project(brainfuck
    LANGUAGES C
    VERSION 2.7.3
)

include(CTest)

option(ENABLE_CLI ""Enable the command line interface."" ON)
option(ENABLE_EDITLINE ""Enable GNU readline functionality provided by the editline library."" ON)
option(ENABLE_EXTENSION_DEBUG ""Enable the debug extension for brainfuck."")
option(INSTALL_EXAMPLES ""Installs the examples."")

if(MSVC)
    # Force to always compile with W4
    if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
        string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    else()
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic"")
endif()

# getopt shim for windows
add_library(getopt INTERFACE)
if (MSVC)
    target_include_directories(getopt INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/deps/getopt)
endif()

add_library(brainfuck include/brainfuck.h src/brainfuck.c)
set_target_properties(brainfuck PROPERTIES
    PUBLIC_HEADER ""include/brainfuck.h""
    C_STANDARD 90
)
target_include_directories(brainfuck PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>
    $<INSTALL_INTERFACE:include/brainfuck/>
)
target_compile_definitions(brainfuck PUBLIC
    ""-DBRAINFUCK_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}""
    ""-DBRAINFUCK_VERSION_MINOR=${PROJECT_VERSION_MINOR}""
    ""-DBRAINFUCK_VERSION_PATCH=${PROJECT_VERSION_PATCH}""
)
install(TARGETS brainfuck
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PUBLIC_HEADER DESTINATION include/brainfuck
)

if(ENABLE_CLI)
    add_executable(brainfuck-cli src/main.c)
    set_target_properties(brainfuck-cli PROPERTIES
        OUTPUT_NAME ""brainfuck""
        C_STANDARD 90
    )
    target_link_libraries(brainfuck-cli brainfuck getopt)
    install(TARGETS brainfuck-cli RUNTIME DESTINATION bin)
    install(FILES man/brainfuck.1 DESTINATION ""share/man/man1"")

    if(ENABLE_EDITLINE)
        target_compile_definitions(brainfuck-cli PRIVATE ""-DBRAINFUCK_EDITLINE_LIB"")
        target_link_libraries(brainfuck-cli -ledit)
    endif()
endif()

if(ENABLE_EXTENSION_DEBUG)
    add_definitions(""-DBRAINFUCK_EXTENSION_DEBUG"")
endif()

if(INSTALL_EXAMPLES)
    set(EXAMPLES_DIR ""share/brainfuck"")
    file(MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/${EXAMPLES_DIR})
    install(DIRECTORY examples DESTINATION ${EXAMPLES_DIR})
endif()

if(BUILD_TESTING)
    add_subdirectory(tests)
endif()
",3.1,3.1
4661,serge-rgb,milton,False,False,False,False,False,21,C++,2020-05-17 08:48:59+00:00,2015-03-26 05:24:12+00:00,802,1260,"cmake_minimum_required(VERSION 3.1)
project(Milton)

if(WIN32)
  set(DIRECTX 0)
endif()


add_executable(shadergen
  src/shadergen.cc
)

set(SDL2DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/SDL2-2.0.8)

FILE (GLOB ShaderSources src/*.glsl third_party/*.glsl)

add_executable(Milton WIN32 MACOSX_BUNDLE
  src/unity.cc
  src/shaders.gen.h
)

target_include_directories(Milton PRIVATE
  src
  third_party
  third_party/imgui
)

# Handle various switches, build types etc.

## Default build type to Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

if(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
  add_definitions(-DMILTON_DEBUG=1)
elseif(CMAKE_BUILD_TYPE STREQUAL ""Release"")
  add_definitions(-DMILTON_DEBUG=0)
else()
  message(FATAL_ERROR ""Unknown build type: ${CMAKE_BUILD_TYPE}. Supported build types: Release, Debug."")
endif()

set(CMAKE_CXX_FLAGS_DEBUG ""-g"")
set(CMAKE_CXX_FLAGS_RELEASE ""-O3"")

message(STATUS ""Building ${CMAKE_BUILD_TYPE}"")

if(UNIX)
  set(UnixCFlags
    -std=c++11
    -Wno-missing-braces
    -Wno-unused-function
    -Wno-unused-variable
    -Wno-unused-result
    -Wno-write-strings
    -Wno-c++11-compat-deprecated-writable-strings
    -Wno-null-dereference
    -Wno-format
    -fno-strict-aliasing
    -fno-omit-frame-pointer
    -Wno-extern-c-compat
    #-Werror
    )
  if (APPLE)
      set(UnixCFlags ""${UnixCFlags}"" -ObjC++)
  endif()

  target_compile_options(shadergen PRIVATE
    ${UnixCFlags})
  target_compile_options(Milton PRIVATE
    ${UnixCFlags})
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")

  find_package(OpenGL REQUIRED)
  find_package(GTK2 2.6 REQUIRED gtk)
  find_package(X11 REQUIRED)
  find_library(XINPUT_LIBRARY libXi.so)
  find_package(Threads REQUIRED)

  if(XINPUT_LIBRARY STREQUAL ""XINPUT_LIBRARY-NOTFOUND"")
      message(FATAL_ERROR ""Could not find libXi.so"")
  endif()

  if(NOT OPENGL_FOUND)
      message(FATAL_ERROR ""Could not find OpenGl libraries"")
  endif()

  if(NOT GTK2_FOUND)
    message(FATAL_ERROR ""Could not find GTK2.8 libraries"")
  endif()

  if(NOT X11_FOUND)
    message(FATAL_ERROR ""Could not find X11 libraries"")
  endif()

  target_include_directories(Milton PRIVATE
    ${GTK2_INCLUDE_DIRS}
    ${X11_INCLUDE_DIR}
    ${SDL2DIR}/build/linux64/include/SDL2
    ${OPENGL_INCLUDE_DIR}
  )

  target_link_libraries(Milton
    ${GTK2_LIBRARIES}
    ${X11_LIBRARIES}
    ${OPENGL_LIBRARIES}
    ${XINPUT_LIBRARY}
    ${SDL2DIR}/build/linux64/lib/libSDL2maind.a
    ${SDL2DIR}/build/linux64/lib/libSDL2d.a
    ${CMAKE_THREAD_LIBS_INIT}
    ${CMAKE_DL_LIBS}
    )

else()
  add_subdirectory(${SDL2DIR})
  target_link_libraries(Milton SDL2-static)
endif()

if(APPLE)
  target_link_libraries(Milton
    ""-framework OpenGL""
  )
endif()


if(WIN32 OR APPLE)
  target_include_directories(Milton PRIVATE
    ${SDL2DIR}/include
  )
endif()

add_custom_command(TARGET Milton POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
    ${CMAKE_CURRENT_LIST_DIR}/milton_icon.ico
    ${CMAKE_CURRENT_LIST_DIR}/third_party/Carlito.ttf
    ${CMAKE_CURRENT_LIST_DIR}/third_party/Carlito.LICENSE
    $<TARGET_FILE_DIR:Milton>
)

add_dependencies(Milton shadergen)


add_custom_command(
  COMMAND $<TARGET_FILE:shadergen>
  WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  DEPENDS ${ShaderSources}
  OUTPUT src/shaders.gen.h
)
",3.1,3.1
4686,s0vereign,SchroedingerSolver,False,False,False,False,False,4,C++,2019-01-15 01:41:39+00:00,2016-03-15 08:40:43+00:00,4,213,"cmake_minimum_required(VERSION 3.10)
project(QonGPU)

set(CMAKE_CXX_STANDARD 14)

include_directories(src/QonGPU/include)
include_directories(src/QonGPU/include/dynamic)
include_directories(src/QonGPU/include/output)
include_directories(src/QonGPU/include/params)
include_directories(src/QonGPU/include/potentials)
include_directories(src/QonGPU/include/static)

add_executable(QonGPU
        src/QonGPU/include/dynamic/CNKernels.h
        src/QonGPU/include/dynamic/ComplexOperators.h
        src/QonGPU/include/dynamic/CrankNicolson1D.cpp
        src/QonGPU/include/dynamic/CrankNicolson1D.hpp
        src/QonGPU/include/dynamic/cusparse_ops.hxx
        src/QonGPU/include/dynamic/MatrixGeneration.h
        src/QonGPU/include/dynamic/MemFunctors.h
        src/QonGPU/include/dynamic/spike_kernel.hxx
        src/QonGPU/include/dynamic/ThomasSerial.h
        src/QonGPU/include/dynamic/TimeOperator.hpp
        src/QonGPU/include/dynamic/TimeOperator1D.hpp
        src/QonGPU/include/dynamic/TimeOperator2D.hpp
        src/QonGPU/include/dynamic/TimeOperator3D.hpp
        src/QonGPU/include/dynamic/TridiagMult.h
        src/QonGPU/include/output/IOHandle.hpp
        src/QonGPU/include/output/IOHandle1D.cpp
        src/QonGPU/include/output/IOHandle1D.h
        src/QonGPU/include/params/Params.hpp
        src/QonGPU/include/params/Params1D.hpp
        src/QonGPU/include/params/Params2D.hpp
        src/QonGPU/include/params/Params3D.hpp
        src/QonGPU/include/potentials/Core1D.hpp
        src/QonGPU/include/potentials/Potential.hpp
        src/QonGPU/include/potentials/Potential1D.hpp
        src/QonGPU/include/potentials/Potential2D.hpp
        src/QonGPU/include/potentials/Potential3D.hpp
        src/QonGPU/include/static/Numerov.cpp
        src/QonGPU/include/static/Numerov.hpp
        src/QonGPU/include/static/Numerov1D.hpp
        src/QonGPU/include/static/StaticSolver.hpp
        src/QonGPU/include/static/StaticSolver1D.hpp
        src/QonGPU/include/static/StaticSolver2D.hpp
        src/QonGPU/include/static/StaticSolver3D.hpp
        src/QonGPU/include/AllHeader.hpp
        src/QonGPU/include/Domain.hpp
        src/QonGPU/include/SimDef.hpp
        CMakeLists.txt)
",3.10,3.1
4687,Dllieu,experimental,False,False,False,False,False,1,C++,2019-11-29 14:02:18+00:00,2016-02-09 16:46:33+00:00,0,243,"cmake_minimum_required(VERSION 3.10)

project(experimental CXX)

include(cmake/compilation_flag.cmake)
include(cmake/external.cmake)
include(cmake/tools.cmake)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(PATH_LIB_EXPERIMENTAL ${CMAKE_CURRENT_SOURCE_DIR}/experimental/experimental)

enable_testing()
add_subdirectory(experimental/experimental)
add_subdirectory(experimental/tests)
add_subdirectory(experimental/benchmarks)
",3.10,3.1
4887,OFTNAI,Spike,False,False,False,False,False,6,C++,2020-03-09 14:26:27+00:00,2016-01-21 21:30:29+00:00,30,1166,"# Project setup
###############

cmake_minimum_required(VERSION 3.1 FATAL_ERROR) # only need 2.8.8, except for CMAKE_CXX_STANDARD
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)


project(Spike)

# set (CMAKE_CXX_STANDARD 14)
# set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_FLAGS ""-std=c++11 -DVERBOSE=1"")

set(VERSION_MAJOR 0)
set(VERSION_MINOR 1)
set(VERSION_PATCH 0)
set(VERSION ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")

#SET(CMAKE_VERBOSE_MAKEFILE ON)   #uncomment this line to increase CMake verbosity

#SET(BOOSTPATH ""C:/Program\ Files\ (x86)/boost/boost_1_42"")    #Boost path for other systems - customize as needed

list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")

# User options
##############

option(BUILD_WITH_CUDA
  ""Enable CUDA backend""
  ON)

option(BUILD_EXAMPLES
  ""Build examples""
  ON)

#option(BUILD_DOXYGEN_DOCS
#  ""Build the Doxygen-generated API docs""
#  OFF)

#cmake_dependent_option(ENABLE_DIST ""Enable the the distribution tarball target"" ON ""BUILD_DOXYGEN_DOCS"" OFF)
#mark_as_advanced(BUILD_DOXYGEN_DOCS ENABLE_DIST)

# Find prerequisites
####################

#if(BUILD_DOXYGEN_DOCS)
#  find_package(Doxygen REQUIRED)
#endif()

if(BUILD_WITH_CUDA)
  find_package(CUDA REQUIRED)
  #list(APPEND CUDA_NVCC_FLAGS ""-DVERBOSE=1"")
  add_definitions("" -DSPIKE_DEFAULT_BACKEND=\""\\\""CUDA\\\""\"" "")
  include_directories(BEFORE SYSTEM ""${CUDA_INCLUDE_DIRS}"")
endif()


# Compile options
#################

include_directories(BEFORE ""${PROJECT_SOURCE_DIR}"")


# Subdirectories
################

add_subdirectory(Spike)

if(BUILD_EXAMPLES)
  add_subdirectory(Examples)
endif()

# add_subdirectory(Doc)

# add_subdirectory(libspike)

# Install
#########

# install(DIRECTORY viennacl ""${CMAKE_CURRENT_BINARY_DIR}/viennacl""
#    DESTINATION ""${INSTALL_INCLUDE_DIR}"" COMPONENT dev
#    FILES_MATCHING PATTERN ""*.h"" PATTERN ""*.hpp"")
",3.1,3.1
5006,Larpon,qak,False,False,False,False,False,1,QML,2020-02-12 15:36:42+00:00,2016-11-03 21:05:33+00:00,17,408,"cmake_minimum_required(VERSION 3.1)

if (QAK_INTRINSIC)
    message(STATUS ""Qak: Intrinsic mode ${QAK_INTRINSIC}"")
else()
    set( QAK_lib_type static)
    if (QAK_SHARED)
        set( QAK_lib_type shared)
    endif()
    message(STATUS ""Qak: Builing as ${QAK_lib_type} library"")
endif()

project(qak VERSION 1.4.1 DESCRIPTION ""QML Aid Kit"")

# Get the current working branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE QAK_GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the latest abbreviated commit hash of the working branch
execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE QAK_GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

set( QAK_DEFINITIONS
    ""-DQAK_VERSION=\""${QAK_GIT_COMMIT_HASH}\""""
    ""-DQAK_GIT_VERSION=\""${QAK_GIT_BRANCH}\""""
    -DQAK_AUTO_REGISTER
    -DQAK_NO_WARNINGS
    #PARENT_SCOPE
    CACHE STRING ""QAK Definitions""
)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed
set(CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
#set(CMAKE_AUTOUIC ON)

include_directories(${QtQml_INCLUDE_DIRS})
add_definitions(
    ${QtQml_DEFINITIONS}
    ${Qt5Quick_DEFINITIONS}
    ${Qt5Widgets_DEFINITIONS}
)

add_definitions(${QAK_DEFINITIONS})

set( QAK_PACKAGES
    Core Multimedia Qml Widgets Gui Quick QuickControls2
    CACHE STRING ""QAK Packages""
)

find_package(Qt5 COMPONENTS ${QAK_PACKAGES} REQUIRED)

#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++11 -fstrict-aliasing -pedantic-errors -pedantic -Wno-deprecated-declarations -Wno-unused-variable"")

set( QAK_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/aid_p.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/maskedmousearea.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/resource.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/store.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/propertytoggle.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/mouserotate_p.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/itemanimation_p.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/shutdowncheck.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/env_p.cpp
    CACHE STRING ""QAK Sources""
)
include_directories(src)

include_directories(.)
list(APPEND QAK_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}/qak.cpp"")

set( QAK_RESOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/qak.qrc
    CACHE STRING ""QAK Recources""
)
qt5_add_resources( QT_RESOURCES ${QAK_RESOURCES} )

set( QAK_LIBS
    Qt5::Core
    Qt5::Multimedia
    Qt5::Quick
    Qt5::Gui
    Qt5::Widgets
    Qt5::QuickControls2
    CACHE STRING ""QAK Libs""
)
#MESSAGE(${QT_INCLUDES})
#if (NOT QAK_INTRINSIC)
if (QAK_SHARED)
    add_library(qak SHARED ${QAK_SOURCES} ${QT_RESOURCES} ${QT_INCLUDES} )
else()
    add_library(qak STATIC ${QAK_SOURCES} ${QT_RESOURCES} ${QT_INCLUDES} )
endif()

target_link_libraries(qak ${QAK_LIBS} )
set_target_properties(qak PROPERTIES PUBLIC_HEADER qak.h)
target_include_directories(qak PRIVATE src)

target_compile_options(qak PRIVATE -Wall -Werror -std=c++11 -fstrict-aliasing -pedantic-errors -pedantic -Wno-deprecated-declarations -Wno-unused-variable)
target_compile_features(qak PRIVATE cxx_std_11)


include(GNUInstallDirs)
install(
    TARGETS qak
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
",3.1,3.1
5016,KhronosGroup,OpenCL-CTS,False,False,False,False,False,54,C++,2020-05-17 11:41:30+00:00,2017-05-15 13:06:40+00:00,76,542,"cmake_minimum_required(VERSION 3.1)

set( CONFORMANCE_SUFFIX """" )
set(CLConform_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

project(CLConform${CONFORMANCE_SUFFIX})

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_BUILD_TYPE STREQUAL ""release"")
    set (BUILD_FLAVOR ""release"")
else(CMAKE_BUILD_TYPE STREQUAL ""release"")
    set (BUILD_FLAVOR ""debug"")
endif(CMAKE_BUILD_TYPE STREQUAL ""release"")

add_definitions(-DCL_TARGET_OPENCL_VERSION=300)
add_definitions(-DCL_USE_DEPRECATED_OPENCL_2_1_APIS=1)
add_definitions(-DCL_USE_DEPRECATED_OPENCL_2_0_APIS=1)
add_definitions(-DCL_USE_DEPRECATED_OPENCL_1_2_APIS=1)
add_definitions(-DCL_USE_DEPRECATED_OPENCL_1_1_APIS=1)
add_definitions(-DCL_USE_DEPRECATED_OPENCL_1_0_APIS=1)

option(USE_CL_EXPERIMENTAL ""Use Experimental definitions"" OFF)
if(USE_CL_EXPERIMENTAL)
  add_definitions(-DCL_EXPERIMENTAL)
endif(USE_CL_EXPERIMENTAL)

# Support both VS2008 and VS2012.
set(BUILD_DIR ""$ENV{ADRENO_DRIVER}/build"")
if(MSVC90)
  set(VS_BUILD_DIR ""${BUILD_DIR}/vs2008"")
else(MSVC110)
  set(VS_BUILD_DIR ""${BUILD_DIR}/vs2012"")
endif(MSVC90)

#-----------------------------------------------------------
# Default Configurable Test Set
#-----------------------------------------------------------
option(D3D10_IS_SUPPORTED ""Run DirectX 10 interop tests"" OFF)
option(D3D11_IS_SUPPORTED ""Run DirectX 11 interop tests"" OFF)
option(GL_IS_SUPPORTED ""Run OpenGL interop tests"" OFF)
option(GLES_IS_SUPPORTED ""Run OpenGL ES interop tests"" OFF)


#-----------------------------------------------------------
# Tests prefix and suffix
#-----------------------------------------------------------
# Set the prefix and suffix for the generated executables
# For example, if you want the api executable to be test_conformance_api_12
# Set prefix to ""test_conformance_"" and suffix to ""_12""
set(CONFORMANCE_PREFIX ""test_"" )
set(CONFORMANCE_SUFFIX """" )

#-----------------------------------------------------------
# Vendor Customization
#-----------------------------------------------------------
#Vendor Customization File can be included here to provide a way to automatically
#build driver as a dependency of the conformance tests, or other such CMake customization
option(USE_VENDOR_CUSTOM_FILE ""Use Vendor Customization File"" OFF)
if(USE_VENDOR_CUSTOM_FILE)
    include(CMakeVendor.txt OPTIONAL)
endif(USE_VENDOR_CUSTOM_FILE)

#-----------------------------------------------------------
# Development options for OpenCL C++ tests
#-----------------------------------------------------------
# Use OpenCL C kernels instead of OpenCL C++ kernels
option(CLPP_DEVELOPMENT_USE_OPENCLC_KERNELS ""Use OpenCL C kernels in OpenCL C++ tests"" OFF)
if(CLPP_DEVELOPMENT_USE_OPENCLC_KERNELS)
  set(CLPP_DEVELOPMENT_OPTIONS ${CLPP_DEVELOPMENT_OPTIONS} -DCLPP_DEVELOPMENT_USE_OPENCLC_KERNELS)
endif(CLPP_DEVELOPMENT_USE_OPENCLC_KERNELS)
# Only check if OpenCL C++ kernels compile to SPIR-V
option(CLPP_DEVELOPMENT_ONLY_SPIRV_COMPILATION ""Only check if OpenCL C++ kernels compile to SPIR-V"" OFF)
if(CLPP_DEVELOPMENT_ONLY_SPIRV_COMPILATION)
  if(CLPP_DEVELOPMENT_USE_OPENCLC_KERNELS)
    message(FATAL_ERROR ""Can't use OpenCL C kernels and compile to SPIR-V."")
  endif(CLPP_DEVELOPMENT_USE_OPENCLC_KERNELS)
  set(CLPP_DEVELOPMENT_OPTIONS ${CLPP_DEVELOPMENT_OPTIONS} -DCLPP_DEVELOPMENT_ONLY_SPIRV_COMPILATION)
endif(CLPP_DEVELOPMENT_ONLY_SPIRV_COMPILATION)
#
if(CLPP_DEVELOPMENT_OPTIONS)
  add_definitions(-DCLPP_DEVELOPMENT_OPTIONS)
  add_definitions(${CLPP_DEVELOPMENT_OPTIONS})
endif(CLPP_DEVELOPMENT_OPTIONS)

# Offline OpenCL C/C++ compiler provided by Khronos is the only supported
# offline compiler.
#
# Path to offline OpenCL C/C++ compiler provided by Khronos.
# See https://github.com/KhronosGroup/SPIR/ (spirv-1.1 branch or newer SPIR-V-ready
# branch should be used).
if(KHRONOS_OFFLINE_COMPILER)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -DKHRONOS_OFFLINE_COMPILER=${KHRONOS_OFFLINE_COMPILER}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DKHRONOS_OFFLINE_COMPILER=${KHRONOS_OFFLINE_COMPILER}"")
    # Additional OpenCL C/C++ compiler option.
    if(KHRONOS_OFFLINE_COMPILER_OPTIONS)
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -DKHRONOS_OFFLINE_COMPILER_OPTIONS=${KHRONOS_OFFLINE_COMPILER_OPTIONS}"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DKHRONOS_OFFLINE_COMPILER_OPTIONS=${KHRONOS_OFFLINE_COMPILER_OPTIONS}"")
    endif(KHRONOS_OFFLINE_COMPILER_OPTIONS)
else(KHRONOS_OFFLINE_COMPILER)
    message(WARNING ""KHRONOS_OFFLINE_COMPILER is not defined!"")
    message(WARNING ""Running CL C++ tests will not be possible."")
endif(KHRONOS_OFFLINE_COMPILER)

# CL_LIBCLCXX_DIR - path to dir with OpenCL C++ STL (libclcxx)
# CL_INCLUDE_DIR - path to dir with OpenCL headers
# CL_LIBCLCXX_DIR - path to dir with OpenCL library
if(CL_INCLUDE_DIR AND CL_LIB_DIR AND CL_LIBCLCXX_DIR)
    link_directories(${CL_LIB_DIR})
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -DCL_LIBCLCXX_DIR=${CL_LIBCLCXX_DIR}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DCL_LIBCLCXX_DIR=${CL_LIBCLCXX_DIR}"")
else(CL_INCLUDE_DIR AND CL_LIB_DIR AND CL_LIBCLCXX_DIR)
    message(STATUS ""OpenCL hasn't been found!"")
    message(FATAL_ERROR ""Either install OpenCL or pass -DCL_INCLUDE_DIR, -DCL_LIB_DIR and -DCL_LIBCLCXX_DIR"")
endif(CL_INCLUDE_DIR AND CL_LIB_DIR AND CL_LIBCLCXX_DIR)

# CLConform_GL_LIBRARIES_DIR - path to OpenGL libraries
if(GL_IS_SUPPORTED AND CLConform_GL_LIBRARIES_DIR)
    link_directories(${CLConform_GL_LIBRARIES_DIR})
endif (GL_IS_SUPPORTED AND CLConform_GL_LIBRARIES_DIR)

include(CheckFunctionExists)
include(CheckIncludeFiles)

if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(arm.*|ARM.*)"")
    set(CLConform_TARGET_ARCH ARM)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)"")
    set(CLConform_TARGET_ARCH ARM64)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64.*|x86_64.*|AMD64.*"")
    set(CLConform_TARGET_ARCH x86_64)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""i686.*|i386.*|x86.*"")
    set(CLConform_TARGET_ARCH x86)
endif()

if(NOT DEFINED CLConform_TARGET_ARCH)
    message (FATAL_ERROR ""Target architecture not recognised. Exiting."")
endif()

if(CMAKE_COMPILER_IS_GNUCC OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""(Apple)?Clang"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-narrowing"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-narrowing"")
    # -msse -mfpmath=sse to force gcc to use sse for float math,
    # avoiding excess precision problems that cause tests like int2float
    # to falsely fail. -ffloat-store also works, but WG suggested
    # that sse would be better.
    if(${CLConform_TARGET_ARCH} STREQUAL ""x86_64"" OR ${CLConform_TARGET_ARCH}
            STREQUAL ""x86"")
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -msse -msse2 -mfpmath=sse"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse -msse2 -mfpmath=sse"")
    endif()
else()
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /D__SSE__"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /D__SSE__"")
endif()

if( WIN32 AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Intel"" )
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Qlong-double -Qpc80 /DWIN32 /D_WINDOWS /W3 /GR /EHsc -nologo -Od -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS -EHsc -Wall -Qdiag-disable:68,111,177,186,161,869,1028,2259,2553,181,239,265,1188 -fp:strict -fp:source"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Qlong-double -Qpc80 /DWIN32 /D_WINDOWS /W3 /GR /EHsc -nologo -Od -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS -EHsc -Wall -Qdiag-disable:68,111,177,186,161,869,1028,2259,2553,181,239,265,1188 -fp:strict -fp:source"")
endif()

list(APPEND CLConform_LIBRARIES ${OPENCL_LIBRARIES})
if(ANDROID)
    list(APPEND CLConform_LIBRARIES m)
elseif(NOT WIN32)
    list(APPEND CLConform_LIBRARIES pthread)
endif(ANDROID)

if(APPLE)
    find_library(corefoundation CoreFoundation)
    find_library(iokit IOKit)
    list(APPEND CLConform_LIBRARIES ${corefoundation})
    list(APPEND CLConform_LIBRARIES ${iokit})
endif(APPLE)

include_directories(SYSTEM ${CL_INCLUDE_DIR})
include_directories(${CLConform_SOURCE_DIR}/test_common/harness
                    ${CLConform_SOURCE_DIR}/test_common/gles
                    ${CLConform_SOURCE_DIR}/test_common/gl
                    ${CLConform_SOURCE_DIR}/test_common)

if(CMAKE_BUILD_TYPE STREQUAL ""release"")
    set (BUILD_FLAVOR ""release"")
elseif (CMAKE_BUILD_TYPE STREQUAL ""debug"")
    set (BUILD_FLAVOR ""debug"")
endif(CMAKE_BUILD_TYPE STREQUAL ""release"")


add_subdirectory(test_common)
add_subdirectory(test_conformance)
add_subdirectory(test_extensions)

# Support both VS2008 and VS2012.
set (DLL_FILES ""${VS_BUILD_DIR}/Debug/*.dll"")
set (DST_DIR   ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/"")

if (WIN32)
    set (COPY ""echo"")
    add_custom_target(COPY_DLL${CONFORMANCE_SUFFIX} ALL
                      COMMAND ${COPY} ""${DLL_FILES}"" ""${DST_DIR}""
                      COMMENT ""Copying dll files.. "")
else (WIN32)
    set (COPY cp)
    add_custom_target(COPY_DLL${CONFORMANCE_SUFFIX})
endif(WIN32)

set_property(TARGET COPY_DLL${CONFORMANCE_SUFFIX} PROPERTY FOLDER ""CONFORMANCE${CONFORMANCE_SUFFIX}"")

if(WIN32)
  add_custom_target( COPY_FILES${CONFORMANCE_SUFFIX} ALL
                     COMMAND ${COPY} ${DLL_FILES} ${DST_DIR}
                     COMMENT ""Copying other files to output folder..."" )
else(WIN32)
  add_custom_target( COPY_FILES${CONFORMANCE_SUFFIX} )
endif(WIN32)

# Copy required CL include directories into the build directory
# as required for the compiler testing.

# ... For running the compiler test on the command line.
file(COPY ""${CLConform_SOURCE_DIR}/test_conformance/compiler/includeTestDirectory"" DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_conformance/compiler)
file(COPY ""${CLConform_SOURCE_DIR}/test_conformance/compiler/secondIncludeTestDirectory"" DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_conformance/compiler)

# ... For running the compiler test with VisualStudio.
if(MSVC)
  file(COPY ""${CLConform_SOURCE_DIR}/test_conformance/compiler/includeTestDirectory"" DESTINATION ""${CLConform_SOURCE_DIR}/build/test_conformance/compiler"")
  file(COPY ""${CLConform_SOURCE_DIR}/test_conformance/compiler/secondIncludeTestDirectory"" DESTINATION ""${CLConform_SOURCE_DIR}/build/test_conformance/compiler"")
endif(MSVC)

set_property(TARGET COPY_FILES${CONFORMANCE_SUFFIX} PROPERTY FOLDER ""CONFORMANCE${CONFORMANCE_SUFFIX}"")
",3.1,3.1
5111,devernay,openfx-misc,False,False,False,False,False,8,C++,2020-05-14 04:15:58+00:00,2013-10-15 19:02:21+00:00,168,3275,"# ***** BEGIN LICENSE BLOCK *****
# This file is part of openfx-misc <https://github.com/NatronGitHub/openfx-misc>,
# Copyright (C) 2013-2018 INRIA
#
# openfx-misc is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# openfx-misc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openfx-misc.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>
# ***** END LICENSE BLOCK *****

########################################################################
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
MESSAGE(FATAL_ERROR ""Prevented in-tree built. This is bad practice."")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

########################################################################
# Project setup
########################################################################
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(OpenFXMisc CXX)
ENABLE_TESTING()

# ========================== build platform ==========================

MESSAGE (STATUS ""  Platform:"")
MESSAGE (STATUS ""    Host:""             ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_VERSION} ${CMAKE_HOST_SYSTEM_PROCESSOR})
if(CMAKE_CROSSCOMPILING)
  MESSAGE (STATUS ""    Target:""         ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION} ${CMAKE_SYSTEM_PROCESSOR})
endif()
MESSAGE (STATUS ""    CMake:""            ${CMAKE_VERSION})
MESSAGE (STATUS ""    CMake generator:""  ${CMAKE_GENERATOR})
MESSAGE (STATUS ""    CMake build tool:"" ${CMAKE_BUILD_TOOL})
if(MSVC)
  MESSAGE (STATUS ""    MSVC:""           ${MSVC_VERSION})
endif()
if(CMAKE_GENERATOR MATCHES Xcode)
  MESSAGE (STATUS ""    Xcode:""          ${XCODE_VERSION})
endif()
if(NOT CMAKE_GENERATOR MATCHES ""Xcode|Visual Studio"")
  MESSAGE (STATUS ""    Configuration:""  ${CMAKE_BUILD_TYPE})
endif()

include(FindOpenGL REQUIRED)

set (CMAKE_CXX_STANDARD 11)

# Use -Ofast when applicable (implies -ffast-math)
if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
    set (CMAKE_CXX_FLAGS_RELEASE ""-Wall -Wextra -Ofast -DNDEBUG"")
    set (CMAKE_C_FLAGS_RELEASE   ""-Wall -Wextra -Ofast -DNDEBUG"")
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Intel"")
    set (CMAKE_CXX_FLAGS_RELEASE ""-Wall -Ofast -DNDEBUG"")
    set (CMAKE_C_FLAGS_RELEASE   ""-Wall -Ofast -DNDEBUG"")
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    set (CMAKE_CXX_FLAGS_RELEASE ""-Wall -Wextra -Ofast -DNDEBUG"")
    set (CMAKE_C_FLAGS_RELEASE   ""-Wall -Wextra -Ofast -DNDEBUG"")
endif()
SET(OPENFX_PATH ${CMAKE_CURRENT_SOURCE_DIR}/openfx)

# Check that submodule have been initialized and updated
if(NOT EXISTS ${PROJECT_SOURCE_DIR}/openfx/include)
  message(FATAL_ERROR
    ""\n submodule(s) are missing, please update your repository:\n""
    ""  > git submodule update -i\n"")
endif()

# C++ Include directories
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/SupportExt)
INCLUDE_DIRECTORIES(${OPENFX_PATH}/include)
INCLUDE_DIRECTORIES(${OPENFX_PATH}/Support/include)
INCLUDE_DIRECTORIES(${OPENFX_PATH}/Support/Plugins/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/CImg)

# Define ""DEBUG"" on debug builds
SET(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG"")

# /MP on MSVC
ADD_COMPILE_OPTIONS($<$<CXX_COMPILER_ID:MSVC>:/MP>)

SET(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG"")

set(OFX_SUPPORT_HEADER_DIR ""${OPENFX_PATH}/Support/include"")
set(OFX_SUPPORT_LIBRARY_DIR ""${OPENFX_PATH}/Support/Library"")

FILE(GLOB SUPPORT_SOURCES
    ""${OFX_SUPPORT_HEADER_DIR}/*.h""

    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsCore.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsImageEffect.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsInteract.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsLog.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsMultiThread.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsParams.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsProperty.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/ofxsPropertyValidation.cpp""
    ""${OFX_SUPPORT_LIBRARY_DIR}/*.h""
)

#ADD_LIBRARY(Support STATIC )
#TARGET_COMPILE_DEFINITIONS(Support PRIVATE OFX_SUPPORTS_OPENGLRENDER OFX_EXTENSIONS_TUTTLE OFX_EXTENSIONS_NUKE OFX_EXTENSIONS_NATRON OFX_EXTENSIONS_VEGAS NOMINMAX)

FILE(GLOB MISC_SOURCES
  ""Add/*.cpp""
  ""AdjustRoD/*.cpp""
  ""Anaglyph/*.cpp""
  ""AppendClip/*.cpp""
  ""Card3D/*.cpp""
  ""CheckerBoard/*.cpp""
  ""ChromaKeyer/*.cpp""
  ""Clamp/*.cpp""
  ""ClipTest/*.cpp""
  ""ColorBars/*.cpp""
  ""ColorCorrect/*.cpp""
  ""ColorLookup/*.cpp""
  ""ColorMatrix/*.cpp""
  ""ColorSuppress/*.cpp""
  ""ColorTransform/*.cpp""
  ""ColorWheel/*.cpp""
  ""Constant/*.cpp""
  ""ContactSheet/*.cpp""
  ""CopyRectangle/*.cpp""
  ""CornerPin/*.cpp""
  ""Crop/*.cpp""
  ""Deinterlace/*.cpp""
  ""DenoiseSharpen/*.cpp""
  ""Despill/*.cpp""
  ""Difference/*.cpp""
  ""Dissolve/*.cpp""
  ""Distortion/*.cpp""
  ""FrameBlend/*.cpp""
  ""FrameHold/*.cpp""
  ""FrameRange/*.cpp""
  ""Gamma/*.cpp""
  ""GodRays/*.cpp""
  ""Grade/*.cpp""
  ""HSVTool/*.cpp""
  ""HueCorrect/*.cpp""
  ""ImageStatistics/*.cpp""
  ""Invert/*.cpp""
  ""JoinViews/*.cpp""
  ""KeyMix/*.cpp""
  ""Keyer/*.cpp""
  ""LayerContactSheet/*.cpp""
  ""Log2Lin/*.cpp""
  ""MatteMonitor/*.cpp""
  ""Merge/*.cpp""
  ""Mirror/*.cpp""
  ""MixViews/*.cpp""
  ""Multiply/*.cpp""
  ""NoOp/*.cpp""
  ""OneView/*.cpp""
  ""PIK/*.cpp""
  ""PLogLin/*.cpp""
  ""Position/*.cpp""
  ""Premult/*.cpp""
  ""Quantize/*.cpp""
  ""Radial/*.cpp""
  ""Ramp/*.cpp""
  ""Rand/*.cpp""
  ""ReConverge/*.cpp""
  ""Rectangle/*.cpp""
  ""Reformat/*.cpp""
  ""Retime/*.cpp""
  ""Roto/*.cpp""
  ""Saturation/*.cpp""
  ""Shadertoy/*.cpp""
  ""Shadertoy/*.h""
  ""Shuffle/*.cpp""
  ""SideBySide/*.cpp""
  ""SlitScan/*.cpp""
  ""SpriteSheet/*.cpp""
  ""Switch/*.cpp""
  ""Threshold/*.cpp""
  ""TimeBlur/*.cpp""
  ""TimeBuffer/*.cpp""
  ""TimeDissolve/*.cpp""
  ""TimeOffset/*.cpp""
  ""TrackerPM/*.cpp""
  ""Transform/*.cpp""
  ""VectorToColor/*.cpp""
  ""SupportExt/tinythread.cpp""
  ""SupportExt/ofxsThreadSuite.cpp""
  ""SupportExt/ofxsFileOpen.cpp""
  ""SupportExt/ofxsGenerator.cpp""
  ""SupportExt/ofxsLut.cpp""
  ""SupportExt/ofxsMultiPlane.cpp""
  ""SupportExt/ofxsOGLTextRenderer.cpp""
  ""SupportExt/ofxsOGLFontData.cpp""
  ""SupportExt/ofxsRamp.cpp""
  ""SupportExt/ofxsShutter.cpp""
  ""SupportExt/ofxsTracking.cpp""
  ""SupportExt/ofxsTransform3x3.cpp""
  ""SupportExt/ofxsTransformInteract.cpp""
  ""SupportExt/ofxsRectangleInteract.cpp""
  ""SupportExt/*.h""
)

FILE(GLOB MISC_RESOURCES
  ""Add/net.sf.openfx.AddPlugin.png""
  ""AdjustRoD/net.sf.openfx.AdjustRoDPlugin.png""
  ""AdjustRoD/net.sf.openfx.AdjustRoDPlugin.svg""
  ""Anaglyph/net.sf.openfx.anaglyphPlugin.png""
  ""Anaglyph/net.sf.openfx.anaglyphPlugin.svg""
  ""CheckerBoard/net.sf.openfx.CheckerBoardPlugin.png""
  ""CheckerBoard/net.sf.openfx.CheckerBoardPlugin.svg""
  ""ChromaKeyer/net.sf.openfx.ChromaKeyerPlugin.png""
  ""ChromaKeyer/net.sf.openfx.ChromaKeyerPlugin.svg""
  ""Clamp/net.sf.openfx.Clamp.png""
  ""Clamp/net.sf.openfx.Clamp.svg""
  ""ClipTest/net.sf.openfx.ClipTestPlugin.png""
  ""ClipTest/net.sf.openfx.ClipTestPlugin.svg""
  ""ColorBars/net.sf.openfx.ColorBars.png""
  ""ColorBars/net.sf.openfx.ColorBars.svg""
  ""ColorCorrect/net.sf.openfx.ColorCorrectPlugin.png""
  ""ColorCorrect/net.sf.openfx.ColorCorrectPlugin.svg""
  ""ColorLookup/net.sf.openfx.ColorLookupPlugin.png""
  ""ColorLookup/net.sf.openfx.ColorLookupPlugin.svg""
  ""ColorMatrix/net.sf.openfx.ColorMatrixPlugin.png""
  ""ColorMatrix/net.sf.openfx.ColorMatrixPlugin.svg""
  ""ColorWheel/net.sf.openfx.ColorWheel.png""
  ""ColorWheel/net.sf.openfx.ColorWheel.svg""
  ""ColorTransform/net.sf.openfx.HSVToRGB.png""
  ""ColorTransform/net.sf.openfx.HSVToRGB.svg""
  ""ColorTransform/net.sf.openfx.LabToRGB709.png""
  ""ColorTransform/net.sf.openfx.RGBToHSV.png""
  ""ColorTransform/net.sf.openfx.RGBToHSV.svg""
  ""ColorTransform/net.sf.openfx.RGB709ToLab.png""
  ""ColorTransform/net.sf.openfx.RGB709ToXYZ.png""
  ""ColorTransform/net.sf.openfx.XYZToRGB709.png""
  ""Constant/net.sf.openfx.ConstantPlugin.png""
  ""Constant/net.sf.openfx.ConstantPlugin.svg""
  ""CornerPin/net.sf.openfx.CornerPinMaskedPlugin.png""
  ""CornerPin/net.sf.openfx.CornerPinMaskedPlugin.svg""
  ""CornerPin/net.sf.openfx.CornerPinPlugin.png""
  ""CornerPin/net.sf.openfx.CornerPinPlugin.svg""
  ""Crop/net.sf.openfx.CropPlugin.png""
  ""Crop/net.sf.openfx.CropPlugin.svg""
  ""Deinterlace/net.sf.openfx.Deinterlace.png""
  ""Deinterlace/net.sf.openfx.Deinterlace.svg""
  ""Despill/net.sf.openfx.Despill.png""
  ""Despill/net.sf.openfx.Despill.svg""
  ""Difference/net.sf.openfx.DifferencePlugin.png""
  ""Difference/net.sf.openfx.DifferencePlugin.svg""
  ""Dissolve/net.sf.openfx.DissolvePlugin.png""
  ""Dissolve/net.sf.openfx.DissolvePlugin.svg""
  ""Distortion/net.sf.openfx.IDistort.png""
  ""Distortion/net.sf.openfx.IDistort.svg""
  ""Distortion/net.sf.openfx.STMap.png""
  ""Distortion/net.sf.openfx.STMap.svg""
  ""Distortion/net.sf.openfx.LensDistortion.png""
  ""Distortion/net.sf.openfx.LensDistortion.svg""
  ""FrameBlend/net.sf.openfx.FrameBlend.png""
  ""FrameBlend/net.sf.openfx.FrameBlend.svg""
  ""FrameHold/net.sf.openfx.FrameHold.png""
  ""FrameHold/net.sf.openfx.FrameHold.svg""
  ""FrameRange/net.sf.openfx.FrameRange.png""
  ""FrameRange/net.sf.openfx.FrameRange.svg""
  ""Gamma/net.sf.openfx.GammaPlugin.png""
  ""GodRays/net.sf.openfx.GodRays.png""
  ""GodRays/net.sf.openfx.GodRays.svg""
  ""Grade/net.sf.openfx.GradePlugin.png""
  ""Grade/net.sf.openfx.GradePlugin.svg""
  ""HueCorrect/net.sf.openfx.HueCorrect.png""
  ""HueCorrect/net.sf.openfx.HueCorrect.svg""
  ""HueCorrect/net.sf.openfx.HueKeyer.png""
  ""HueCorrect/net.sf.openfx.HueKeyer.svg""
  ""HSVTool/net.sf.openfx.HSVToolPlugin.png""
  ""HSVTool/net.sf.openfx.HSVToolPlugin.svg""
  ""ImageStatistics/net.sf.openfx.ImageStatistics.png""
  ""ImageStatistics/net.sf.openfx.ImageStatistics.svg""
  ""Invert/net.sf.openfx.Invert.png""
  ""Invert/net.sf.openfx.Invert.svg""
  ""JoinViews/net.sf.openfx.joinViewsPlugin.png""
  ""JoinViews/net.sf.openfx.joinViewsPlugin.svg""
  ""Keyer/net.sf.openfx.KeyerPlugin.png""
  ""Keyer/net.sf.openfx.KeyerPlugin.svg""
  ""Merge/net.sf.openfx.MergePlugin.png""
  ""Merge/net.sf.openfx.MergePlugin.svg""
  ""Merge/net.sf.openfx.MergeDifference.png""
  ""Merge/net.sf.openfx.MergeIn.png""
  ""Merge/net.sf.openfx.MergeMax.png""
  ""Merge/net.sf.openfx.MergeMin.png""
  ""Merge/net.sf.openfx.MergeMultiply.png""
  ""Merge/net.sf.openfx.MergeOut.png""
  ""Merge/net.sf.openfx.MergePlus.png""
  ""Merge/net.sf.openfx.MergeScreen.png""
  ""Mirror/net.sf.openfx.Mirror.png""
  ""Mirror/net.sf.openfx.Mirror.svg""
  ""MixViews/net.sf.openfx.mixViewsPlugin.png""
  ""MixViews/net.sf.openfx.mixViewsPlugin.svg""
  ""Multiply/net.sf.openfx.MultiplyPlugin.png""
  ""NoOp/net.sf.openfx.NoOpPlugin.png""
  ""NoOp/net.sf.openfx.NoOpPlugin.svg""
  ""Rand/net.sf.openfx.Noise.png""
  ""Rand/net.sf.openfx.Noise.svg""
  ""OneView/net.sf.openfx.oneViewPlugin.png""
  ""OneView/net.sf.openfx.oneViewPlugin.svg""
  ""PIK/net.sf.openfx.PIK.png""
  ""PIK/net.sf.openfx.PIK.svg""
  ""PIK/fr.inria.PIKColor.png""
  ""PIK/fr.inria.PIKColor.svg""
  ""PIK/PIKColor.gizmo""
  ""PIK/PIKColor.py""
  ""Position/net.sf.openfx.Position.png""
  ""Position/net.sf.openfx.Position.svg""
  ""Premult/net.sf.openfx.Premult.png""
  ""Premult/net.sf.openfx.Premult.svg""
  ""Premult/net.sf.openfx.Unpremult.png""
  ""Premult/net.sf.openfx.Unpremult.svg""
  ""Radial/net.sf.openfx.Radial.png""
  ""Radial/net.sf.openfx.Radial.svg""
  ""Ramp/net.sf.openfx.Ramp.png""
  ""Ramp/net.sf.openfx.Ramp.svg""
  ""Rectangle/net.sf.openfx.Rectangle.png""
  ""Rectangle/net.sf.openfx.Rectangle.svg""
  ""Reformat/net.sf.openfx.Reformat.png""
  ""Reformat/net.sf.openfx.Reformat.svg""
  ""Retime/net.sf.openfx.Retime.png""
  ""Retime/net.sf.openfx.Retime.svg""
  ""Roto/net.sf.openfx.RotoPlugin.png""
  ""Roto/net.sf.openfx.RotoPlugin.svg""
  ""Saturation/net.sf.openfx.SaturationPlugin.png""
  ""Saturation/net.sf.openfx.SaturationPlugin.svg""
  ""Shuffle/net.sf.openfx.ShufflePlugin.png""
  ""Shuffle/net.sf.openfx.ShufflePlugin.svg""
  ""SideBySide/net.sf.openfx.sideBySidePlugin.png""
  ""SideBySide/net.sf.openfx.sideBySidePlugin.svg""
  ""SlitScan/net.sf.openfx.SlitScan.png""
  ""SlitScan/net.sf.openfx.SlitScan.svg""
  ""Switch/net.sf.openfx.switchPlugin.png""
  ""Switch/net.sf.openfx.switchPlugin.svg""
  ""TimeOffset/net.sf.openfx.timeOffset.png""
  ""TimeOffset/net.sf.openfx.timeOffset.svg""
  ""TrackerPM/net.sf.openfx.TrackerPM.png""
  ""TrackerPM/net.sf.openfx.TrackerPM.svg""
  ""Transform/net.sf.openfx.DirBlur.png""
  ""Transform/net.sf.openfx.DirBlur.svg""
  ""Transform/net.sf.openfx.TransformMaskedPlugin.png""
  ""Transform/net.sf.openfx.TransformMaskedPlugin.svg""
  ""Transform/net.sf.openfx.TransformPlugin.png""
  ""Transform/net.sf.openfx.TransformPlugin.svg""
  ""VectorToColor/net.sf.openfx.VectorToColorPlugin.png""
  ""VectorToColor/net.sf.openfx.VectorToColorPlugin.svg""
)

ADD_LIBRARY(Misc SHARED ${MISC_SOURCES} ${SUPPORT_SOURCES})
SET_TARGET_PROPERTIES(Misc PROPERTIES PREFIX """")
SET_TARGET_PROPERTIES(Misc PROPERTIES SUFFIX "".ofx"")

# Add extra flags to the link step of the plugin
if(APPLE)
    set_target_properties(Misc PROPERTIES LINK_FLAGS ""-fvisibility=hidden -exported_symbols_list,${OFX_SUPPORT_HEADER_DIR}/osxSymbols"")
    set_target_properties(Misc PROPERTIES INSTALL_RPATH ""@loader_path/../Frameworks;@loader_path/../Libraries"")
elseif(MINGW)
    set_target_properties(Misc PROPERTIES LINK_FLAGS ""-shared -fvisibility=hidden -Xlinker --version-script=${OFX_SUPPORT_HEADER_DIR}/linuxSymbols"")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"" OR ${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
# Linux & FreeBSD
    set_target_properties(Misc PROPERTIES LINK_FLAGS ""-Wl,-fvisibility=hidden,--version-script=${OFX_SUPPORT_HEADER_DIR}/linuxSymbols"")
    set_target_properties(Misc PROPERTIES INSTALL_RPATH ""$ORIGIN/../../Libraries"")
endif()

TARGET_COMPILE_DEFINITIONS(Misc PRIVATE OFX_EXTENSIONS_VEGAS OFX_EXTENSIONS_NUKE OFX_EXTENSIONS_NATRON OFX_EXTENSIONS_TUTTLE OFX_SUPPORTS_OPENGLRENDER NOMINMAX)
#TARGET_LINK_LIBRARIES(Misc Support ${OPENGL_gl_LIBRARY})
TARGET_LINK_LIBRARIES(Misc ${OPENGL_gl_LIBRARY})

FILE(GLOB CIMG_SOURCES
  ""CImg/CImg.h""
  ""CImg/CImgFilter.cpp""
  ""CImg/CImgFilter.h""
  ""CImg/CImgOperator.cpp""
  ""CImg/CImgOperator.h""
  ""CImg/Bilateral/CImgBilateral.cpp""
  ""CImg/Blur/CImgBlur.cpp""
  ""CImg/Blur/blurmaple.map""
  ""CImg/Denoise/CImgDenoise.cpp""
  ""CImg/Distance/CImgDistance.cpp""
  ""CImg/Equalize/CImgEqualize.cpp""
  ""CImg/Erode/CImgDilate.cpp""
  ""CImg/Erode/CImgErode.cpp""
  ""CImg/ErodeSmooth/CImgErodeSmooth.cpp""
  ""CImg/Expression/CImgExpression.cpp""
  ""CImg/Guided/CImgGuided.cpp""
  ""CImg/HistEQ/CImgHistEQ.cpp""
  ""CImg/Inpaint/CImgInpaint-gpl.cpp""
  ""CImg/Inpaint/inpaint.h""
  ""CImg/Matrix/CImgMatrix.cpp""
  ""CImg/Median/CImgMedian.cpp""
  ""CImg/Noise/CImgNoise.cpp""
  ""CImg/Plasma/CImgPlasma.cpp""
  ""CImg/RollingGuidance/CImgRollingGuidance.cpp""
  ""CImg/SharpenInvDiff/CImgSharpenInvDiff.cpp""
  ""CImg/SharpenShock/CImgSharpenShock.cpp""
  ""CImg/Smooth/CImgSmooth.cpp""
  ""SupportExt/tinythread.cpp""
  ""SupportExt/ofxsThreadSuite.cpp""
#  ""SupportExt/ofxsFileOpen.cpp""
#  ""SupportExt/ofxsGenerator.cpp""
  ""SupportExt/ofxsLut.cpp""
#  ""SupportExt/ofxsMultiPlane.cpp""
#  ""SupportExt/ofxsOGLTextRenderer.cpp""
#  ""SupportExt/ofxsOGLFontData.cpp""
#  ""SupportExt/ofxsRamp.cpp""
#  ""SupportExt/ofxsShutter.cpp""
#  ""SupportExt/ofxsTracking.cpp""
#  ""SupportExt/ofxsTransform3x3.cpp""
#  ""SupportExt/ofxsTransformInteract.cpp""
#  ""SupportExt/ofxsRectangleInteract.cpp""
  ""SupportExt/*.h""
)

FILE(GLOB CIMG_RESOURCES
  ""CImg/Bilateral/net.sf.cimg.CImgBilateral.png""
  ""CImg/Bilateral/net.sf.cimg.CImgBilateral.svg""
  ""CImg/Blur/net.sf.cimg.CImgBlur.png""
  ""CImg/Blur/net.sf.cimg.CImgBlur.svg""
  ""CImg/Blur/net.sf.cimg.CImgChromaBlur.png""
  ""CImg/Blur/net.sf.cimg.CImgChromaBlur.svg""
  ""CImg/Blur/net.sf.cimg.CImgBloom.png""
  ""CImg/Blur/net.sf.cimg.CImgBloom.svg""
  ""CImg/Blur/eu.cimg.EdgeDetect.png""
  ""CImg/Blur/eu.cimg.EdgeDetect.svg""
  ""CImg/Blur/eu.cimg.EdgeExtend.png""
  ""CImg/Blur/eu.cimg.EdgeExtend.svg""
  ""CImg/Blur/fr.inria.EdgeBlur.png""
  ""CImg/Blur/fr.inria.EdgeBlur.svg""
  ""CImg/Blur/net.sf.cimg.CImgLaplacian.png""
  ""CImg/Blur/net.sf.cimg.CImgLaplacian.svg""
  ""CImg/Blur/net.sf.cimg.CImgSharpen.png""
  ""CImg/Blur/net.sf.cimg.CImgSharpen.svg""
  ""CImg/Denoise/net.sf.cimg.CImgDenoise.png""
  ""CImg/Denoise/net.sf.cimg.CImgDenoise.svg""
  ""CImg/Equalize/net.sf.cimg.CImgEqualize.png""
  ""CImg/Equalize/net.sf.cimg.CImgEqualize.svg""
  ""CImg/Erode/net.sf.cimg.CImgDilate.png""
  ""CImg/Erode/net.sf.cimg.CImgDilate.svg""
  ""CImg/Erode/net.sf.cimg.CImgErode.png""
  ""CImg/Erode/net.sf.cimg.CImgErode.svg""
  ""CImg/ErodeSmooth/net.sf.cimg.CImgErodeSmooth.png""
  ""CImg/ErodeSmooth/net.sf.cimg.CImgErodeSmooth.svg""
  ""CImg/Expression/net.sf.cimg.CImgExpression.png""
  ""CImg/Expression/net.sf.cimg.CImgExpression.svg""
  ""CImg/Guided/net.sf.cimg.CImgGuided.png""
  ""CImg/Guided/net.sf.cimg.CImgGuided.svg""
  ""CImg/HistEQ/net.sf.cimg.CImgHistEQ.png""
  ""CImg/HistEQ/net.sf.cimg.CImgHistEQ.svg""
  ""CImg/Inpaint/eu.cimg.Inpaint.png""
  ""CImg/Inpaint/eu.cimg.Inpaint.svg""
  ""CImg/Noise/net.sf.cimg.CImgNoise.png""
  ""CImg/Noise/net.sf.cimg.CImgNoise.svg""
  ""CImg/Plasma/net.sf.cimg.CImgPlasma.png""
  ""CImg/Plasma/net.sf.cimg.CImgPlasma.svg""
  ""CImg/RollingGuidance/net.sf.cimg.CImgRollingGuidance.png""
  ""CImg/RollingGuidance/net.sf.cimg.CImgRollingGuidance.svg""
  ""CImg/SharpenInvDiff/net.sf.cimg.CImgSharpenInvDiff.png""
  ""CImg/SharpenInvDiff/net.sf.cimg.CImgSharpenInvDiff.svg""
  ""CImg/SharpenShock/net.sf.cimg.CImgSharpenShock.png""
  ""CImg/Smooth/net.sf.cimg.CImgSmooth.png""
  ""CImg/Smooth/net.sf.cimg.CImgSmooth.svg""
)


ADD_LIBRARY(CImg SHARED ${CIMG_SOURCES} ${SUPPORT_SOURCES})
SET_TARGET_PROPERTIES(CImg PROPERTIES PREFIX """")
SET_TARGET_PROPERTIES(CImg PROPERTIES SUFFIX "".ofx"")

# Add extra flags to the link step of the plugin
if(APPLE)
    set_target_properties(CImg PROPERTIES LINK_FLAGS ""-bundle -fvisibility=hidden -exported_symbols_list,${OFX_SUPPORT_HEADER_DIR}/osxSymbols"")
    set_target_properties(CImg PROPERTIES INSTALL_RPATH ""@loader_path/../Frameworks;@loader_path/../Libraries"")
elseif(WIN32)
    set_target_properties(CImg PROPERTIES LINK_FLAGS ""-fvisibility=hidden,--version-script=${OFX_SUPPORT_HEADER_DIR}/linuxSymbols"")
else()
# Linux & FreeBSD
    set_target_properties(CImg PROPERTIES LINK_FLAGS ""-Wl,-fvisibility=hidden,--version-script=${OFX_SUPPORT_HEADER_DIR}/linuxSymbols"")
    set_target_properties(CImg PROPERTIES INSTALL_RPATH ""$ORIGIN/../../Libraries"")
endif()

TARGET_COMPILE_DEFINITIONS(CImg PRIVATE OFX_EXTENSIONS_VEGAS OFX_EXTENSIONS_NUKE OFX_EXTENSIONS_NATRON OFX_EXTENSIONS_TUTTLE OFX_SUPPORTS_OPENGLRENDER NOMINMAX)
#TARGET_LINK_LIBRARIES(CImg Support)
TARGET_LINK_LIBRARIES(CImg)

# Find OpenMP
# To compile on homebrew:
# env CXX=/usr/local/opt/llvm/bin/clang++ CC=/usr/local/opt/llvm/bin/clang LDFLAGS=-L/usr/local/opt/llvm/lib cmake ..
find_package(OpenMP)
# MSVC is OpenMP 2.0 and has issues, see https://github.com/dtschump/CImg/issues/208 and https://msdn.microsoft.com/fr-fr/library/ff520162.aspx
if (OPENMP_FOUND AND NOT MSVC)
#if (OPENMP_FOUND)
    #include_directories(""${OPENMP_INCLUDES}"")
    #link_directories(""${OPENMP_LIBRARIES}"")
    # set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    # set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    # set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${OpenMP_SHARED_LINKER_FLAGS}"")
    # set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
    SET_TARGET_PROPERTIES(CImg PROPERTIES COMPILE_FLAGS ""${OpenMP_CXX_FLAGS}"")
    SET_TARGET_PROPERTIES(CImg PROPERTIES LINK_FLAGS ""${OpenMP_EXE_LINKER_FLAGS}"")
    TARGET_LINK_LIBRARIES(CImg ${OpenMP_CXX_LIB_NAMES})
endif(OPENMP_FOUND AND NOT MSVC)

IF (MSVC)
  # Some files require this option. This breaks compatibility with older linkers.
  SET_TARGET_PROPERTIES(Misc PROPERTIES COMPILE_FLAGS ""/bigobj"")
  # If the build system is at least Windows Vista (6.0),
  # compile for Windows Vista, to get interruptible CImg plugins (see CImgFilter.h)
  IF (NOT ${CMAKE_SYSTEM_VERSION} VERSION_LESS 6.0) # Windows Vista
    ADD_DEFINITIONS(-D_WIN32_WINNT=0x0600 -DWINVER=0x0600)
    MESSAGE(STATUS ""CImg plugins should be interruptible"")
  ELSE ()
    MESSAGE(STATUS ""CImg plugins may not be interruptible"")
  ENDIF ()
ENDIF ()

# Find and set the arch name.
# http://openeffects.org/documentation/reference/ch02s02.html
SET(OFX_ARCH UNKNOWN)
# Win
if(MINGW)
    set(OFX_ARCH ""Win32"")
    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""x86_64"")
        set(OFX_ARCH ""Win64"")
    endif()
# Visual Studio    
elseif(MSVC)
    set(OFX_ARCH ""Win32"")
    if((${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""IA64"") OR (${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""AMD64""))
        set(OFX_ARCH ""Win64"")
    endif()
# FreeBSD
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
    set(OFX_ARCH ""FreeBSD-x86"")
    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""x86_64"")
        set(OFX_ARCH ""FreeBSD-x86-64"")
    endif()
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES ""arm"")
        if(""${CMAKE_SIZEOF_VOID_P}"" EQUAL ""8"")
            set(OFX_ARCH FreeBSD-arm-64)
        else()
            set(OFX_ARCH FreeBSD-arm)
        endif()
    endif()
# MacOS
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Darwin"")
    set(OFX_ARCH ""MacOS"")
# Linux
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
    set(OFX_ARCH ""Linux-x86"")
    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""x86_64"")
        set(OFX_ARCH ""Linux-x86-64"")
    endif()
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES ""arm"")
        if(""${CMAKE_SIZEOF_VOID_P}"" EQUAL ""8"")
            set(OFX_ARCH Linux-arm-64)
        else()
            set(OFX_ARCH Linux-arm)
        endif()
    endif()
endif()

SET(OFX_ARCH_NAME ${OFX_ARCH} CACHE STRING ""OpenFX target OS and architecture"")
IF(""${OFX_ARCH_NAME}"" EQUAL ""UNKNOWN"")
  MESSAGE(SEND_ERROR ""OFX_ARCH_NAME was not detected. Install targets will be unavailable. See http://openeffects.org/documentation/reference/ch02s02.html to pick an arch name."")
ELSE()
  INSTALL(TARGETS Misc
    RUNTIME DESTINATION Misc.ofx.bundle/Contents/${OFX_ARCH_NAME}
    LIBRARY DESTINATION Misc.ofx.bundle/Contents/${OFX_ARCH_NAME}
  )

  INSTALL(DIRECTORY ""Shadertoy/presets""
    DESTINATION Misc.ofx.bundle/Contents/Resources
  )

  INSTALL(FILES ${MISC_RESOURCES}
    DESTINATION Misc.ofx.bundle/Contents/Resources
  )

  INSTALL(FILES Info.plist
    DESTINATION Misc.ofx.bundle/Contents
  )
  INSTALL(TARGETS CImg
    RUNTIME DESTINATION CImg.ofx.bundle/Contents/${OFX_ARCH_NAME}
    LIBRARY DESTINATION CImg.ofx.bundle/Contents/${OFX_ARCH_NAME}
  )

  INSTALL(FILES ${CIMG_RESOURCES}
    DESTINATION CImg.ofx.bundle/Contents/Resources
  )

  INSTALL(FILES CImg/Info.plist
    DESTINATION CImg.ofx.bundle/Contents
  )
ENDIF()
",3.1,3.1
5252,ORNL-CEES,Cap,False,False,False,False,False,5,C++,2019-07-24 21:38:00+00:00,2016-01-27 14:56:58+00:00,11,1310,"cmake_minimum_required(VERSION 3.1)

project(Cap LANGUAGES CXX VERSION ${Cap_VERSION})

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
include(SetupTPLs)
include(SetupCap)
if(ENABLE_COVERAGE)
    include(CodeCoverage)
endif()
if(ENABLE_FORMAT)
    include(CodeFormat)
endif()
if(ENABLE_COMPLETION)
    include(CodeCompletion)
endif()

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

enable_testing()
include(CTest)

add_subdirectory(cpp)

if(ENABLE_PYTHON)
    add_subdirectory(python)
endif()

if(ENABLE_DOCUMENTATION)
    add_subdirectory(docs)
endif()
",3.1,3.1
5373,heavywatal,cxxwtils,False,False,False,False,False,1,C++,2019-12-02 07:04:20+00:00,2014-11-07 09:33:44+00:00,0,372,"cmake_minimum_required(VERSION 3.1)
project(wtl
  VERSION 0.8.5
  LANGUAGES CXX)

include(GNUInstallDirs)
set(CMAKE_VERBOSE_MAKEFILE ON)

add_library(${PROJECT_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
target_include_directories(${PROJECT_NAME} INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}-config
)
install(EXPORT ${PROJECT_NAME}-config
  DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}
  NAMESPACE ${PROJECT_NAME}::
)

set(VERSION_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake)
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  ${VERSION_CONFIG} COMPATIBILITY AnyNewerVersion
)
install(FILES ${VERSION_CONFIG}
  DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}
)

include(CTest)
if(BUILD_TESTING AND ${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
  add_subdirectory(test)
endif()
",3.1,3.1
5537,HobbyOSs,opennask,False,False,False,False,False,2,C,2019-01-16 14:31:42+00:00,2016-05-10 21:40:24+00:00,13,458,"message(STATUS ""Entering directory ."")
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
enable_testing()
project(root CXX)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake"")
project(root)

set(WINE ""/usr/bin/wine"" CACHE INTERNAL """")
set(WINE_NASK ""~/.wine/drive_c/MinGW/msys/1.0/bin/nask.exe"" CACHE INTERNAL """")
set(OD ""od"" CACHE INTERNAL """")
set(QEMU ""qemu-system-i386"" CACHE INTERNAL """")
set(QEMUOPT ""-m"" ""32"" ""-localtime"" ""-vga"" ""std"" ""-fda"" CACHE INTERNAL """")
set(QEMU_DEBUG_OPT ""-redir"" ""tcp:5555:127.0.0.1:1234"" ""&"" CACHE INTERNAL """")
set(BINOPT ""-fleading-underscore"" ""-m32"" ""-nostdlib"" ""-fno-pie"" ""-Wl,--oformat=binary"" CACHE INTERNAL """")

add_subdirectory(parasol)
add_subdirectory(objconv)
add_subdirectory(src)
add_subdirectory(golibc)
add_subdirectory(projects)

#-----------------------------------------------------------------------
# Checks for CppUTest
#
OPTION(USE_CPPUTEST ""Enable feature to test with cpputest (Dev)"" ON)
if (USE_CPPUTEST)
  add_definitions(-DUSE_CPPUTEST)
  add_subdirectory(test)
  add_subdirectory(data)
endif(USE_CPPUTEST)
",3.1.0,3.1
5688,krrishnarraj,clpeak,False,False,False,False,False,16,C++,2020-04-16 02:23:33+00:00,2013-08-25 14:38:18+00:00,146,250,"cmake_minimum_required(VERSION 3.1)
project(clpeak)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/common.cmake)

if (NOT CMAKE_BUILD_TYPE)
  message(STATUS ""Setting build type to Release"")
  set(CMAKE_BUILD_TYPE ""Release"")
endif()

find_package(OpenCL)
if(NOT OpenCL_FOUND)
  list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
  include(BuildIcd)
  find_package(OpenCL REQUIRED)
endif()

# extra libs for static library
if(UNIX AND ${OpenCL_LIBRARIES} MATCHES ""libOpenCL.a"")
  set(OpenCL_LIBRARIES ${OpenCL_LIBRARIES} pthread dl)
elseif(WIN32 AND ${OpenCL_LIBRARIES} MATCHES ""OpenCL.lib"")
  set(OpenCL_LIBRARIES ${OpenCL_LIBRARIES} cfgmgr32.lib)
endif()

FIND_PATH(HPP_FOUND CL/cl.hpp PATHS ${OpenCL_INCLUDE_DIRS})
if(NOT HPP_FOUND)
  list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
  include(BuildCLHpp)
  set(OpenCL_INCLUDE_DIRS ${OpenCL_INCLUDE_DIRS} ""${CLHPP_ROOT}/include"")
endif()

if(NOT OpenCL_FOUND)
  message(FATAL_ERROR ""Could not find OpenCL include/libs. Set OCL_ROOT to your OpenCL SDK"")
else()
  message(STATUS ""Selected OpenCL includes from ${OpenCL_INCLUDE_DIRS}"")
  message(STATUS ""Selected OpenCL lib ${OpenCL_LIBRARIES}"")
endif()

set(CMAKE_CXX_STANDARD ""11"")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CLPEAK_SOURCE_FILES
    src/common.cpp
    src/clpeak.cpp
    src/options.cpp
    src/logger.cpp
    src/global_bandwidth.cpp
    src/compute_sp.cpp
    src/compute_hp.cpp
    src/compute_dp.cpp
    src/compute_integer.cpp
    src/transfer_bandwidth.cpp
    src/kernel_latency.cpp
    src/entry.cpp
)

add_executable(clpeak ${CLPEAK_SOURCE_FILES})
target_link_libraries(clpeak ${OpenCL_LIBRARIES})
target_include_directories(clpeak PRIVATE ${OpenCL_INCLUDE_DIRS} ""include"" ""src/kernels"")
target_compile_definitions(clpeak PRIVATE CL_TARGET_OPENCL_VERSION=120)

if(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR
   CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""   OR
   CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"")
  target_compile_options(clpeak PRIVATE -fPIC -Wall -Wextra -Wconversion -Wno-deprecated-declarations -Wno-unused-parameter -Wno-ignored-attributes)
elseif(MSVC)
  target_compile_options(clpeak PRIVATE /wd4996)
endif()

install(TARGETS clpeak RUNTIME DESTINATION bin)
install(FILES LICENSE DESTINATION share/clpeak)

enable_testing()
add_test(clpeak_test_run clpeak)

set(CPACK_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}-${VERSION_STR}"")
set(CPACK_GENERATOR ""ZIP"")
include (CPack)
",3.1,3.1
5881,Koromix,tytools,False,False,False,False,False,3,C,2020-03-01 17:15:11+00:00,2014-08-29 18:14:34+00:00,97,1387,"# TyTools - public domain
# Niels Martignène <niels.martignene@protonmail.com>
# https://koromix.dev/tytools

# This software is in the public domain. Where that dedication is not
# recognized, you are granted a perpetual, irrevocable license to copy,
# distribute, and modify this file as you see fit.

# See the LICENSE file for more details.

set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.10"" CACHE STRING """")
cmake_minimum_required(VERSION 3.1)
project(TyTools C CXX)

if(CONFIG_VARIANT)
    if(IS_ABSOLUTE ${CONFIG_VARIANT})
        set(CONFIG_VARIANT_PATH ${CONFIG_VARIANT})
    else()
        set(CONFIG_VARIANT_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/variants/${CONFIG_VARIANT}"")
    endif()
    if(EXISTS ""${CONFIG_VARIANT_PATH}/variant.cmake"")
        include(""${CONFIG_VARIANT_PATH}/variant.cmake"")
    endif()

    set(USE_UNITY_BUILDS OFF CACHE BOOL """")
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH})
include(""cmake/Utility.cmake"")

set(VERSION_DEFAULT ""0.9.0"" CACHE STRING ""Default version number"")
set(VERSION_WITH_GIT ON CACHE BOOL ""Compute version using git tags (fallback)"")

set(CONFIG_TYCMD_BUILD ON CACHE BOOL ""Build tycmd (Teensy command-line manager)"")
set(CONFIG_TYCMD_EXECUTABLE ""tycmd"" CACHE STRING ""Rename tycmd executable"")
set(CONFIG_TYCMD_NAME ""tycmd"" CACHE STRING ""Rename tycmd application"")

set(CONFIG_TYCOMMANDER_BUILD ON CACHE BOOL ""Build TyCommander (Teensy GUI manager)"")
if(WIN32 OR APPLE)
    set(CONFIG_TYCOMMANDER_EXECUTABLE ""TyCommander"" CACHE STRING ""Rename TyCommander executable"")
else()
    set(CONFIG_TYCOMMANDER_EXECUTABLE ""tycommander"" CACHE STRING ""Rename TyCommander executable"")
endif()
set(CONFIG_TYCOMMANDER_NAME ""TyCommander"" CACHE STRING ""Rename TyCommander application"")

set(CONFIG_TYUPDATER_BUILD ON CACHE BOOL ""Build TyUpdater (Teensy GUI updater)"")
if(WIN32 OR APPLE)
    set(CONFIG_TYUPDATER_EXECUTABLE ""TyUpdater"" CACHE STRING ""Rename TyUpdater executable"")
else()
    set(CONFIG_TYUPDATER_EXECUTABLE ""tyupdater"" CACHE STRING ""Rename TyUpdater executable"")
endif()
set(CONFIG_TYUPDATER_NAME ""TyUpdater"" CACHE STRING ""Rename TyUpdater application"")

set(CONFIG_URL_WEBSITE ""https://github.com/Koromix/tytools"" CACHE STRING ""Project website"")
set(CONFIG_URL_BUGS ""https://github.com/Koromix/tytools/issues"" CACHE STRING ""Project bug report page"")

set(CONFIG_PACKAGE_NAME ""TyTools"" CACHE STRING ""Package / installer name"")
set(CONFIG_PACKAGE_FILENAME ""TyTools"" CACHE STRING ""Package / installer filename"")

if(MSVC)
    set(USE_SHARED_MSVCRT OFF CACHE BOOL ""Build with shared version of MS CRT (/MD)"")
endif()
set(BUILD_EXAMPLES ON CACHE BOOL ""Build library examples"")

if(MSVC)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS)
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO"")

    if(NOT USE_SHARED_MSVCRT)
        foreach(lang C CXX)
            foreach(mode DEBUG RELEASE RELWITHDEBINFO MINSIZEREL)
                string(REPLACE ""/MD"" ""/MT"" CMAKE_${lang}_FLAGS_${mode} ""${CMAKE_${lang}_FLAGS_${mode}}"")
            endforeach()
        endforeach()
    endif()

    include_directories(contrib/msvc)
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -fvisibility=hidden -D_FILE_OFFSET_BITS=64 -Wall -Wextra -Wno-missing-field-initializers -Wno-missing-braces -Wshadow -Wconversion -Wformat=2"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11 -fvisibility=hidden -D_FILE_OFFSET_BITS=64 -Wall -Wextra -Wno-missing-field-initializers -Wold-style-cast -Wformat=2"")

    foreach(lang C CXX)
        foreach(mode RELEASE RELWITHDEBINFO MINSIZEREL)
            set(CMAKE_${lang}_FLAGS_${mode} ""${CMAKE_${lang}_FLAGS_${mode}} -D_FORTIFY_SOURCE=2"")
        endforeach()
    endforeach()

    if(MINGW)
        add_definitions(-D__USE_MINGW_ANSI_STDIO=1)
        # Latest approach to force MinGW to statically link libwinpthread, until a new
        # version breaks this one too.
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -Wl,-Bstatic"")
        set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++ -Wl,-Bstatic"")
        set(CMAKE_CXX_STANDARD_LIBRARIES ""${CMAKE_CXX_STANDARD_LIBRARIES} -lstdc++ -lwinpthread"")
    endif()
endif()

if(WIN32)
    add_definitions(-DWINVER=0x0602 -D_WIN32_WINNT=0x0602)
elseif(APPLE)
    if(POLICY CMP0042)
        cmake_policy(SET CMP0042 NEW)
    endif()

    # https://stackoverflow.com/questions/4929255/building-static-libraries-on-mac-using-cmake-and-gcc
    set(CMAKE_C_ARCHIVE_CREATE ""<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_ARCHIVE_CREATE ""<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_C_ARCHIVE_FINISH ""<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>"")
    set(CMAKE_CXX_ARCHIVE_FINISH ""<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>"")

    set(CMAKE_INSTALL_NAME_DIR ""@rpath"")
    set(CMAKE_INSTALL_RPATH ""@executable_path;@executable_path/../lib;@executable_path/../Frameworks"")
endif()

set(VERSION ${VERSION_DEFAULT})
if(VERSION_WITH_GIT AND EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/.git"")
    find_package(Git)
    if(GIT_FOUND)
        # Recompute the version string after each commit, does not work for tags though
        if(EXISTS ""${CMAKE_SOURCE_DIR}/.git/logs/HEAD"")
            configure_file(""${CMAKE_SOURCE_DIR}/.git/logs/HEAD"" git_logs_HEAD COPYONLY)
        endif()
        execute_process(
            COMMAND ${GIT_EXECUTABLE} describe --tags
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
            OUTPUT_VARIABLE VERSION
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        string(SUBSTRING ${VERSION} 1 -1 VERSION)
    endif()
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")

add_subdirectory(src/libhs)
add_subdirectory(src/libty)
if(CONFIG_TYCMD_BUILD)
    add_subdirectory(src/tycmd)
endif()
if(CONFIG_TYCOMMANDER_BUILD)
    add_subdirectory(src/tycommander)
    list(APPEND CPACK_PACKAGE_EXECUTABLES tycommander ""${CONFIG_TYCOMMANDER_NAME}"")
endif()
if(CONFIG_TYUPDATER_BUILD)
    add_subdirectory(src/tyupdater)
    list(APPEND CPACK_PACKAGE_EXECUTABLES tyupdater ""${CONFIG_TYUPDATER_NAME}"")
endif()

set(BUILD_TESTS ON CACHE BOOL ""Build unit tests and enable CTest"")
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests/libty)
endif()

set(CPACK_PACKAGE_NAME ""${CONFIG_PACKAGE_NAME}"")
string(REGEX REPLACE ""\\-.*$"" """" CPACK_PACKAGE_VERSION ""${VERSION}"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""${CONFIG_PACKAGE_FILENAME}"")

if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-win64"")
    else()
        set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-win32"")
    endif()
    if(CONFIG_TYCOMMANDER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYCOMMANDER_ICON_FILE_PREFIX}.ico"")
    elseif(CONFIG_TYUPDATER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYUPDATER_ICON_FILE_PREFIX}.ico"")
    endif()
    if (NOT CONFIG_VARIANT AND NOT CMAKE_CROSSCOMPILING)
        set(CPACK_GENERATOR ZIP WIX)
    else()
        set(CPACK_GENERATOR ZIP)
    endif()

    set(CPACK_WIX_UPGRADE_GUID ""72663aca-47a7-4b9b-aa53-aa067b872b8a"")
    set(CPACK_WIX_PRODUCT_ICON ""${CPACK_PACKAGE_ICON}"")
    set(CPACK_WIX_UI_BANNER ""${CMAKE_SOURCE_DIR}/contrib/images/wix_banner.jpg"")
    set(CPACK_WIX_UI_DIALOG ""${CMAKE_SOURCE_DIR}/contrib/images/wix_dialog.jpg"")
    set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE.txt"")

    if(CONFIG_TYCOMMANDER_BUILD OR CONFIG_TYCMD_BUILD)
        # Someday, notepad will support LF newlines and this won't be necessary anymore
        file(WRITE ""${CMAKE_BINARY_DIR}/dos2unix.cmake"" ""configure_file(\${IN} \${OUT} NEWLINE_STYLE CRLF)"")
        add_custom_command(OUTPUT README_crlf.md COMMAND ${CMAKE_COMMAND}
            ARGS -DIN=""${CMAKE_SOURCE_DIR}/README.md"" -DOUT=""${CMAKE_BINARY_DIR}/README_crlf.md"" -P ""${CMAKE_BINARY_DIR}/dos2unix.cmake"")
        add_custom_command(OUTPUT LICENSE_crlf.txt COMMAND ${CMAKE_COMMAND}
            ARGS -DIN=""${CMAKE_SOURCE_DIR}/LICENSE.txt"" -DOUT=""${CMAKE_BINARY_DIR}/LICENSE_crlf.txt"" -P ""${CMAKE_BINARY_DIR}/dos2unix.cmake"")
        add_custom_target(crlf ALL DEPENDS README_crlf.md LICENSE_crlf.txt)

        install(FILES ""${CMAKE_BINARY_DIR}/README_crlf.md"" DESTINATION . RENAME README.txt)
        install(FILES ""${CMAKE_BINARY_DIR}/LICENSE_crlf.txt"" DESTINATION . RENAME LICENSE.txt)
    else()
        set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
    endif()
    if(MINGW)
        install(DIRECTORY contrib/mingw/ DESTINATION . FILES_MATCHING PATTERN *.txt)
    endif()

    include(CPack)
elseif(APPLE)
    set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-osx"")
    if(CONFIG_TYCOMMANDER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYCOMMANDER_ICON_FILE_PREFIX}.icns"")
    elseif(CONFIG_TYUPDATER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYUPDATER_ICON_FILE_PREFIX}.icns"")
    endif()
    set(CPACK_GENERATOR DragNDrop)

    if(CONFIG_TYCOMMANDER_BUILD OR CONFIG_TYCMD_BUILD)
        install(FILES README.md DESTINATION . RENAME README.txt)
        install(FILES LICENSE.txt DESTINATION .)
    endif()

    include(CPack)
endif()
",3.1,3.1
5975,Dovyski,cvui,False,False,False,False,False,9,C++,2020-05-11 23:40:46+00:00,2016-06-16 09:07:21+00:00,526,362,"cmake_minimum_required(VERSION 3.1)
project(cvui LANGUAGES CXX)

# Option to control if python things should be included or not.
option(ADD_PYTHON_EXAMPLES ""Add cvui.py (Python version of cvui) and Python examples to the build."" ON)

set(CMAKE_CXX_STANDARD 11)           # C++11
set(CMAKE_CXX_STANDARD_REQUIRED OFF)
set(CMAKE_CXX_EXTENSIONS OFF)        # without compiler extensions like gnu++11

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_subdirectory(example/src/button-shortcut)
add_subdirectory(example/src/canny)
add_subdirectory(example/src/complext-layout)
add_subdirectory(example/src/hello-world)
add_subdirectory(example/src/image-button)
add_subdirectory(example/src/interaction-area)
add_subdirectory(example/src/main-app)
add_subdirectory(example/src/mouse)
add_subdirectory(example/src/mouse-complex)
add_subdirectory(example/src/mouse-complex-buttons)
add_subdirectory(example/src/multiple-files)
add_subdirectory(example/src/multiple-windows)
add_subdirectory(example/src/multiple-windows-complex)
add_subdirectory(example/src/multiple-windows-complex-dynamic)
add_subdirectory(example/src/multiple-windows-complex-mouse)
add_subdirectory(example/src/nested-rows-columns)
add_subdirectory(example/src/on-image)
add_subdirectory(example/src/row-column)
add_subdirectory(example/src/sparkline)
add_subdirectory(example/src/trackbar)
add_subdirectory(example/src/trackbar-complex)
add_subdirectory(example/src/trackbar-sparkline)
add_subdirectory(example/src/ui-enhanced-canny)
add_subdirectory(example/src/ui-enhanced-window-component)

# Copy all data files
message(STATUS ""Copying data files"")
file(COPY ${CMAKE_SOURCE_DIR}/example/data/lena.jpg DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(COPY ${CMAKE_SOURCE_DIR}/example/data/lena-face.jpg DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(COPY ${CMAKE_SOURCE_DIR}/example/data/lena-face-gray.jpg DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(COPY ${CMAKE_SOURCE_DIR}/example/data/lena-face-red.jpg DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(COPY ${CMAKE_SOURCE_DIR}/example/data/fruits.jpg DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(COPY ${CMAKE_SOURCE_DIR}/example/data/sparkline.csv DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
message(STATUS ""Copying data files - done"")

# Copy python stuff if that was requested
if(ADD_PYTHON_EXAMPLES)
	message(STATUS ""Python examples will be added, e.g. cvui.py"")
	file(COPY ${CMAKE_SOURCE_DIR}/cvui.py DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
endif()",3.1,3.1
6109,DGtal-team,DGtalTools-contrib,False,False,False,False,False,7,C++,2020-04-23 14:09:24+00:00,2015-10-02 15:54:45+00:00,7,262,"#Bertrand Kerautret <bertrand.kerautret@loria.fr>
# -----------------------------------------------------------------------------
# Project definition
# -----------------------------------------------------------------------------
PROJECT(DGtalTools-contrib)

cmake_minimum_required (VERSION 3.1) 

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


 # -----------------------------------------------------------------------------
 # CPP11 
 # -----------------------------------------------------------------------------
 set (CMAKE_CXX_STANDARD 11)
 set (CMAKE_CXX_STANDARD_REQUIRED TRUE)



FIND_PACKAGE(DGtal 1.0.0 REQUIRED)
INCLUDE_DIRECTORIES(${DGTAL_INCLUDE_DIRS})
LINK_DIRECTORIES(${DGTAL_LIBRARY_DIRS})

 # -------------------------------------------------------------------------
 # This test is for instance used for ITK v3.x. ITK forces a limited
 # template depth. We remove this option.
 # --------------------------------------------------------------------------
 if (CMAKE_CXX_FLAGS MATCHES ""-ftemplate-depth-[0-9]*"")
    message( ""Warning: some package has enabled a limited template depth for the C++ compiler."" )
    message( ""         Disabling option -ftemplate-depth-xx in CMAKE_CXX_FLAGS."" )
    set( CMAKE_CXX_FLAGS_TMP ${CMAKE_CXX_FLAGS} )
    STRING( REGEX REPLACE ""-ftemplate-depth-[0-9]*"" """"
    CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS_TMP}"" )
     message (""         CMAKE_CXX_FLAGS="" ${CMAKE_CXX_FLAGS} )
  endif (CMAKE_CXX_FLAGS MATCHES ""-ftemplate-depth-[0-9]*"")


if(USE_OPENCV)
   find_package( OpenCV REQUIRED )
endif()

# -----------------------------------------------------------------------------
# Define variables and cmake parameters, and display some information
# -----------------------------------------------------------------------------
# SET(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
SET(DGtalToolsContrib_VERSION_MAJOR 1)
SET(DGtalToolsContrib_VERSION_MINOR 0)
SET(DGtalToolsContrib_VERSION_PATCH 0)
SET(DGTALTOOLSContrib_VERSION ""${DGtalToolsContrib_VERSION_MAJOR}.${DGtalToolsContrib_VERSION_MINOR}.${DGtalToolsContrib_VERSION_PATCH}"")
SET(PROJECT_VERSION ""${DGtalToolsContrib_VERSION_MAJOR}.${DGtalToolsContrib_VERSION_MINOR}.${DGtalToolsContrib_VERSION_PATCH}"")
SET(VERSION ${DGtalToolsContrib_VERSION_MAJOR}.${DGtalToolsContrib_VERSION_MINOR}.${DGtalToolsContrib_VERSION_PATCH})

OPTION(Boost_USE_STATIC_LIBS ""Use boost static lib"" ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)
SET(Boost_FOUND FALSE)
FIND_PACKAGE(Boost 1.46.0 REQUIRED COMPONENTS program_options)
if ( Boost_FOUND )
  ADD_DEFINITIONS(${BOOST_DEFINITIONS} -DBOOST_ALL_NO_LIB)
  message(STATUS ""Boost and boost_program_options found."")
  include_directories( ${Boost_INCLUDE_DIRS} )
  SET(DGtalToolsContribLibDependencies ${DGtalToolsContribLibDependencies} 
     ${Boost_LIBRAIRIES}  
     ${Boost_PROGRAM_OPTIONS_LIBRARY} Boost::program_options)
   SET(DGtalLibInc ${Boost_INCLUDE_DIRS})
endif( Boost_FOUND )

#------Tools subdirectories ------
add_subdirectory(geometry2d)
add_subdirectory(geometry3d)
add_subdirectory(visualisation)


",3.1,3.1
6240,Proj-Ascension,Client,False,False,False,False,False,21,C++,2019-02-24 17:13:59+00:00,2015-05-01 21:58:03+00:00,228,662,"if(WIN32)
    cmake_minimum_required(VERSION 3.1.0)
    set(CMAKE_CXX_STANDARD 11)
else()
    cmake_minimum_required(VERSION 2.8.12)
    add_compile_options(-std=c++11)
endif()

# --- BUILD CONFIGURATION ---

project(ProjectAscension)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

set(SOURCE
    Source/Main.cpp
    Source/TabLabel.cpp
    Source/Library.cpp
    Source/Browser.cpp
    Source/MainPanel.cpp
    Source/Database.cpp
)

set(HEADERS
    Source/TabLabel.h
    Source/Library.h
    Source/Browser.h
    Source/MainPanel.h
    Source/Database.h
    Source/Init.h
    Source/Libs/SteamVdfParse.hpp
)

set(FORMS
    Resource/UI/Library.ui
    Resource/UI/Browser.ui
)

set(RESOURCES
    Resource/Icons.qrc
    Resource/Fonts.qrc
    Resource/Styles.qrc
)

set(GUI_TYPE """")

if(WIN32)
    #Additional configuration for Windows systems.
    # TODO: Get working ""Release"" config for multi-configuration MSVC builds.

    # set(GUI_TYPE WIN32)

    set(SOURCE ${SOURCE}
        Source/BorderlessWindow.cpp
        Source/WinWindow.cpp
        Source/WinPanel.cpp
        BorderlessWindow/QWinHost.cpp
        BorderlessWindow/QWinWidget.cpp
    )

    set(HEADERS ${HEADERS}
        Source/BorderlessWindow.h
        Source/WinWindow.h
        Source/WinPanel.h
        BorderlessWindow/QWinHost.h
        BorderlessWindow/QWinWidget.h
    )
elseif(UNIX)
    # Additional configuration for Unix systems.
    # TODO: Get working icon / bundle for OSX systems without bricking the build.

    # if(APPLE)
    #     set(GUI_TYPE MACOSX_BUNDLE)
    # endif(APPLE)

    set(SOURCE ${SOURCE}
        Source/UnixWindow.cpp
        Source/UnixPanel.cpp
    )

    set(HEADERS ${HEADERS}
        Source/UnixWindow.h
        Source/UnixPanel.h
    )
else()
    # Suspend the configuration process if the target OS isn't recognized.
    MESSAGE(FATAL_ERROR ""Target OS not recognized or supported, aborting CMake process."")
endif()

find_package(Qt5Widgets REQUIRED)
find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5WebKit REQUIRED)
find_package(Qt5WebKitWidgets REQUIRED)
find_package(Qt5Sql REQUIRED)
find_package(Boost REQUIRED)

qt5_wrap_ui(FORMS_HEADERS ${FORMS})
qt5_add_resources(UI_RESOURCES ${RESOURCES})
include_directories(
    ${CMAKE_CURRENT_BINARY_DIR}
    ${Qt5Gui_INCLUDE_DIRS}
    ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
    ${Qt5Widgets_INCLUDE_DIRS}
    ${Qt5Core_INCLUDE_DIRS}
    ${Qt5Network_INCLUDE_DIRS}
    ${Qt5WebKit_INCLUDE_DIRS}
    ${Qt5WebKitWidgets_INCLUDE_DIRS}
    ${Qt5Sql_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}
    BorderlessWindow
    Source
)
add_executable(ProjectAscension
    ${GUI_TYPE}
    ${SOURCE}
    ${OS_SOURCE}
    ${FORMS_HEADERS}
    ${UI_RESOURCES}
)
target_link_libraries(ProjectAscension
    Qt5::Widgets
    Qt5::Core
    Qt5::Gui
    Qt5::Network
    Qt5::WebKit
    Qt5::WebKitWidgets
    Qt5::Sql
    ${Boost_LIBRARIES}
)

if(WIN32)
    target_link_libraries(ProjectAscension
        user32.lib
        gdi32.lib
        dwmapi.lib
    )
    
    if(MSVC)
        set(WIN_LINKFLAGS \""${CMAKE_CURRENT_SOURCE_DIR}/Resource/Launcher.res\"")
        set_target_properties(ProjectAscension PROPERTIES LINK_FLAGS ${WIN_LINKFLAGS})
        set_target_properties(ProjectAscension PROPERTIES COMPILE_FLAGS ""/EHsc"")
    endif(MSVC)
endif()

if(WITH_TESTS)
    enable_testing()
    add_executable(test_runner
        Source/Database.cpp
        tests/Test.cpp)
    target_link_libraries(test_runner
        Qt5::Sql)
    add_test(test_runner test_runner)
    foreach(FILE
            appinfo.vdf
            game)
    add_custom_command(TARGET ProjectAscension POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/tests/${FILE} $<TARGET_FILE_DIR:ProjectAscension>)
        endforeach()
endif(WITH_TESTS)

# --- RUNTIME DEPENDENCIES ---
# Only necessary on Windows.

if(WIN32)
    cmake_policy(SET CMP0026 OLD)

    get_target_property(BuildLocation ProjectAscension LOCATION)
    get_filename_component(TargetDirectory ${BuildLocation} PATH)

    if (EXISTS ${Qt5Core_DIR}/../../../bin/icuin53.dll)
        set(ICU_VER 53)
    else()
        set(ICU_VER 54)
    endif()

    foreach(DEPENDENCY
        Qt5Widgetsd.dll
        Qt5Guid.dll
        Qt5Cored.dll
        Qt5Networkd.dll
        Qt5WebKitd.dll
        Qt5WebKitWidgetsd.dll
        Qt5Sqld.dll
        Qt5Sensorsd.dll
        Qt5Positioningd.dll
        Qt5Quickd.dll
        Qt5Qmld.dll
        Qt5Multimediad.dll
        Qt5MultimediaWidgetsd.dll
        Qt5WebChanneld.dll
        Qt5OpenGLd.dll
        Qt5PrintSupportd.dll
        icuin${ICU_VER}.dll
        icuuc${ICU_VER}.dll
        icudt${ICU_VER}.dll
    )
        add_custom_command(TARGET ProjectAscension POST_BUILD
            # Copy the given dependency into the executable directory.
            COMMAND ${CMAKE_COMMAND} -E copy ${Qt5Core_DIR}/../../../bin/${DEPENDENCY} ${TargetDirectory}
            COMMENT ""Copying ${DEPENDENCY} into '${TargetDirectory}/'"" VERBATIM
        )
    endforeach()
endif()
",3.1.0,3.1
6304,SimpleITK,SimpleITK,False,False,False,False,False,41,SWIG,2020-05-16 02:57:03+00:00,2010-11-10 18:56:04+00:00,345,7299,"cmake_minimum_required ( VERSION 3.10 FATAL_ERROR )

# Explicitly add INCREMENTAL linking option to command lines.
# http://www.cmake.org/pipermail/cmake/2010-February/035174.html
SET(MSVC_INCREMENTAL_DEFAULT ON)

project ( SimpleITK )

cmake_policy( VERSION 3.10 )

foreach(p
    )
  if(POLICY ${p})
    cmake_policy(SET ${p} NEW)
  endif()
endforeach()

# Include extra CMake files
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_CURRENT_SOURCE_DIR}/CMake"")

#-----------------------------------------------------------------------------
# Version information
include(Version.cmake)

set(SimpleITK_VERSION ""${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
if(DEFINED SimpleITK_VERSION_PATCH)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.${SimpleITK_VERSION_PATCH}"")
  if(DEFINED SimpleITK_VERSION_TWEAK)
    set(SimpleITK_VERSION ""${SimpleITK_VERSION}.${SimpleITK_VERSION_TWEAK}"")
  endif()
endif()

if(DEFINED SimpleITK_VERSION_RC)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}${SimpleITK_VERSION_RC}"")
endif()
if(DEFINED SimpleITK_VERSION_POST)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.post${SimpleITK_VERSION_POST}"")
elseif(DEFINED SimpleITK_VERSION_DEV)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.dev${SimpleITK_VERSION_DEV}"")
endif()

option( SimpleITK_BUILD_DISTRIBUTE ""Remove '-g#####' from version. ( for official distribution only )"" OFF )
mark_as_advanced( SimpleITK_BUILD_DISTRIBUTE )
if( NOT SimpleITK_BUILD_DISTRIBUTE )
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}-g${SimpleITK_VERSION_HASH}"")
endif()

message(STATUS ""Building SimpleITK version \""${SimpleITK_VERSION}\"""")


#-----------------------------------------------------------
# Check and set required flags for compilation
# This must be done before any other try compiles based tests are
# done.
include(sitkCheckRequiredFlags)
include(sitkCompilerWarningsSettings)

include( sitkSITKLegacyNaming )
include( sitkForbidDownloadsOption )
include( sitkTargetUseITK )

find_package(ITK REQUIRED )
#we require certain packages be turned on in ITK
include(sitkCheckForITKModuleDependencies)

if(ITK_FOUND)

  # NOTE: We are purposely not calling UseITK yet. However, we must make
  # sure the requred compilation and linker flags are set. Since, we
  # are trying to encapsulate ITK, we need to very carefully control
  # in access to the headers and libraries, hence each SimpleITK
  # library will call UseITK.

  # Add compiler flags needed to use ITK.
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${ITK_REQUIRED_C_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS}"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")
  set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")

  link_directories( ""${ITK_LIBRARY_DIRS}"")


endif()


list(APPEND SimpleITK_PRIVATE_COMPILE_OPTIONS ${CXX_ADDITIONAL_WARNING_FLAGS})

#----------------------------------------------------------
# Place all options to go into sitkConfigure.h here
option(BUILD_SHARED_LIBS ""Build SimpleITK ITK with shared libraries. This does not effect wrapped languages."" OFF)
set(SITK_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})

set(SimpleITK_EXPLICIT_INSTATIATION_DEFAULT OFF)
if(MSCV)
  set(SimpleITK_EXPLICIT_INSTATIATION_DEFAULT ON)
endif()
option(SimpleITK_EXPLICIT_INSTANTIATION ""Enable an ITK static library of explicitly instantiated templates."" ${SimpleITK_EXPLICIT_INSTATIATION_DEFAULT})
sitk_legacy_naming(SimpleITK_EXPLICIT_INSTANTIATION)

if ( MSVC AND SITK_BUILD_SHARED_LIBS )
  set( SITK_SimpleITKExplit_STATIC 1 )
endif()

set( SimpleITK_INT64_PIXELIDS_DEFAULT ON )
if( MSVC )
  # See http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:MSVC_VERSION
  # and https://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Version_history
  #   1500 = VS  9.0 (Visual Studio 2008)
  #   1600 = VS 10.0 (Visual Studio 2010)
  #   1700 = VS 11.0 (Visual Studio 2012)
  if(MSVC_VERSION VERSION_LESS 1600)
    # with this option on the linker runs out of memory
    set( SimpleITK_INT64_PIXELIDS_DEFAULT OFF )
  endif()
endif()
option( SimpleITK_INT64_PIXELIDS ""Instantiate 64-bit integer pixels, including unsigned, vector and label maps.""
  ${SimpleITK_INT64_PIXELIDS_DEFAULT} )
sitk_legacy_naming(SimpleITK_INT64_PIXELIDS)

include(sitkMaxDimensionOption)

# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()

set ( SimpleITK_INCLUDE_DIRS
      ${CMAKE_SOURCE_DIR}/Code/Common/include
      ${CMAKE_SOURCE_DIR}/Code/Registration/include
      ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include
      ${CMAKE_SOURCE_DIR}/Code/IO/include
      ${CMAKE_BINARY_DIR}/Code/BasicFilters/include
      ${CMAKE_BINARY_DIR}/Code/Common/include
      )

set ( SimpleITK_LIBRARIES SimpleITKCommon SimpleITKIO SimpleITKRegistration )

if (SimpleITK_EXPLICIT_INSTANTIATION)
  list ( APPEND SimpleITK_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Code/Explicit/include )
  # This library is linked privately to SimpleITK libraries and is not
  # part of the public link interface
  #list ( APPEND SimpleITK_LIBRARIES  SimpleITKExplicit )
endif()

set( SimpleITK_LIBRARIES ${SimpleITK_LIBRARIES}  CACHE INTERNAL """" )

# Be sure to clear these each time
set ( GENERATED_TEST_LIST """" CACHE INTERNAL """" )
set ( GENERATED_FILTER_LIST """" CACHE INTERNAL """" )
set ( GENERATED_TEST_SOURCE_LIST """" CACHE INTERNAL """" )

# Create cached list of all template components
file( GLOB template_components
      ${SimpleITK_SOURCE_DIR}/ExpandTemplateGenerator/Components/[^.]*.h.in
      ${SimpleITK_SOURCE_DIR}/ExpandTemplateGenerator/Components/[^.]*.cxx.in
    )
set ( template_components ${template_components} CACHE INTERNAL """" )


#------------------------------------------------------------------------------
# Variables for use in install rules:

if(NOT SimpleITK_INSTALL_RUNTIME_DIR)
  set(SimpleITK_INSTALL_RUNTIME_DIR ""bin"")
endif()
if(NOT SimpleITK_INSTALL_LIBRARY_DIR)
  set(SimpleITK_INSTALL_LIBRARY_DIR ""lib"")
endif()
if(NOT SimpleITK_INSTALL_ARCHIVE_DIR)
  set(SimpleITK_INSTALL_ARCHIVE_DIR ""lib"")
endif()
if(NOT SimpleITK_INSTALL_INCLUDE_DIR)
  set(SimpleITK_INSTALL_INCLUDE_DIR ""include/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
endif()
if(NOT SimpleITK_INSTALL_DOC_DIR)
  set(SimpleITK_INSTALL_DOC_DIR share/doc/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
endif()
if(NOT SimpleITK_INSTALL_PACKAGE_DIR)
  set(SimpleITK_INSTALL_PACKAGE_DIR ""${SimpleITK_INSTALL_LIBRARY_DIR}/cmake/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
endif()

function(sitk_install_exported_target tgt)
  # Remove the build tree's SimpleITKTargets file if this is the first call:
  get_property(first_time GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET)
  if(NOT first_time)
    file(REMOVE ${CMAKE_BINARY_DIR}/SimpleITKTargets.cmake)
    set_property(GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET 1)
  endif()

  get_target_property( type ${tgt} TYPE )
  if (type STREQUAL ""STATIC_LIBRARY"" OR
      type STREQUAL ""MODULE_LIBRARY"" OR
      type STREQUAL ""SHARED_LIBRARY"")
    set_property(TARGET ${tgt} PROPERTY VERSION 1)
    set_property(TARGET ${tgt} PROPERTY SOVERSION 1)
    set_property(TARGET ${tgt} PROPERTY
      OUTPUT_NAME ${tgt}-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
  endif()

  export(TARGETS ${tgt}
    APPEND FILE ""${CMAKE_BINARY_DIR}/SimpleITKTargets.cmake""
    )

  install(TARGETS ${tgt}
    EXPORT SimpleITKTargets
    RUNTIME DESTINATION ${SimpleITK_INSTALL_RUNTIME_DIR} COMPONENT Runtime
    LIBRARY DESTINATION ${SimpleITK_INSTALL_LIBRARY_DIR} COMPONENT Runtime
    ARCHIVE DESTINATION ${SimpleITK_INSTALL_ARCHIVE_DIR} COMPONENT Development
    )
endfunction()

include(sitkStripOption)

#------------------------------------------------------------------------------
# These are some system specific compiler options needed to build SimpleITK

include(CheckCXXCompilerFlag)

if( NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE )
  set( CMAKE_POSITION_INDEPENDENT_CODE 1 )
endif()


if( NOT DEFINED CMAKE_C_VISIBILITY_PRESET )
  set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET )
  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_VISIBILITY_INLINES_HIDDEN )
  set( CMAKE_VISIBILITY_INLINES_HIDDEN 1 )
endif()


#-----------------------------------------------------------
# Place all checks and try compile variable for sitkConfigure.h here

include(CheckIncludeFileCXX)


# check for stdint
# This generates a configuration error if the compiler is not supported
check_include_file_cxx( stdint.h SITK_HAS_STDINT_H )
if(NOT SITK_HAS_STDINT_H)
  message(FATAL_ERROR ""Unable to find require \""stdint.h\"" header file."")
endif()

#------------------------------------------------------------------------------
# assemble a list of important documentation from Simple ITK and ITK

set ( SimpleITK_DOC_FILES
  ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE""
  ""${CMAKE_CURRENT_SOURCE_DIR}/NOTICE""
  ""${CMAKE_CURRENT_SOURCE_DIR}/Readme.md""
  )

# add important files from ITK

# if using from build tree then ITK_USE_FILE will be
# ITK_SOURCE_DIR/CMake/UseITK.cmake. The needed docs should be in the
# root of the source tree
get_filename_component( _itk_root ""${ITK_USE_FILE}"" PATH )
get_filename_component( _itk_root ""${_itk_root}"" PATH )

set(_itk_doc_search_paths ""${_itk_root}"")

get_filename_component( _itk_root ""${_itk_root}"" PATH )
get_filename_component( _itk_root ""${_itk_root}"" PATH )
list( APPEND _itk_doc_search_paths
   ""${_itk_root}/share/doc/ITK-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}""
   ""${_itk_root}/share/doc/ITK""
)


#
# Only append file if it exists
#
function(append_if_exists list_var file)
   if( EXISTS ${file} )
     list( APPEND ${list_var} ${file} )
     set( ${list_var} ${${list_var}} PARENT_SCOPE )
   endif()
endfunction()

foreach( _p IN LISTS _itk_doc_search_paths)
  if( EXISTS ""${_p}/NOTICE"" )
    append_if_exists(ITK_DOC_FILES ""${_p}/NOTICE"")
    append_if_exists(ITK_DOC_FILES ""${_p}/README.txt"")
    append_if_exists(ITK_DOC_FILES ""${_p}/README.md"")
    break()
  endif()
endforeach()

if( NOT ITK_DOC_FILES )
  message( WARNING ""Unable to file ITK's NOTICE File!\n This file will not be included in SimpleITK packaging!"" )
endif()


foreach(_f IN LISTS ITK_DOC_FILES)
  get_filename_component( _name ""${_f}"" NAME )
  set( _o ""${CMAKE_CURRENT_BINARY_DIR}/ITK-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}-${_name}"" )
  configure_file( ""${_f}""  ""${_o}"" )
  list( APPEND SimpleITK_DOC_FILES ""${_o}"" )
endforeach()


#------------------------------------------------------------------------------
# Set up Documentation
include(${SimpleITK_SOURCE_DIR}/Utilities/Doxygen/Doxygen.cmake)

#------------------------------------------------------------------------------
# Set up wrapping.
#
# Use CMake file which present options for wrapped languages, and finds languages as needed
#
include(sitkLanguageOptions)

#------------------------------------------------------------------------------
# Ensure that development strips have been setup
include(sitkCheckSourceTree)

#-----------------------------------------------------------------------------
if(NOT EXISTS ""${SimpleITK_SOURCE_DIR}/.ExternalData/README.rst"")
  # This file is always present in version-controlled source trees
  # so we must have been extracted from a source tarball with no
  # data objects needed for testing.  Turn off tests by default
  # since enabling them requires network access or manual data
  # store configuration.
  option(BUILD_TESTING ""Build the testing tree."" OFF)
endif()

#------------------------------------------------------------------------------
# set things up for testing, this configuration needs to occour before
# we enter the sub-directories
include(CTest)


#------------------------------------------------------------------------------
# Go to subdirectories
add_subdirectory ( Utilities )
add_subdirectory ( Code )
add_subdirectory ( Wrapping )

#------------------------------------------------------------------------------
# ITK uses KWStyle for checking the coding style
include(${SimpleITK_SOURCE_DIR}/Utilities/KWStyle/KWStyle.cmake)

#------------------------------------------------------------------------------
# set things up for testing, if enabled

if ( BUILD_TESTING )

  include( sitkAddTest )

  enable_testing()
  add_subdirectory ( Testing )

  set(BUILDNAME ""${BUILDNAME}"" CACHE STRING ""Name of build on the dashboard"")
  configure_file(CMake/CTestCustom.cmake.in CTestCustom.cmake)
endif()

# optional examples directory with testing
option(BUILD_EXAMPLES ""Build the Examples directory."" ON)

if(BUILD_EXAMPLES)
  add_subdirectory ( Examples )
endif()


#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the build tree.
set(SimpleITKConfig_TREE ""build"")
set(SimpleITKConfig_CODE """")
set(SimpleITKConfig_INCLUDE_DIRS ${SimpleITK_INCLUDE_DIRS})

configure_file(SimpleITKConfig.cmake.in
               SimpleITKConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the install tree.
set(SimpleITKConfig_TREE ""install"")

set(SimpleITKConfig_CODE ""set(SimpleITK_INSTALL_PREFIX \""\${_SimpleITKConfig_DIR}\"")"")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE ""/"" "";"" _count ""${SimpleITK_INSTALL_PACKAGE_DIR}"")
foreach(p ${_count})
  set(SimpleITKConfig_CODE ""${SimpleITKConfig_CODE}
get_filename_component(SimpleITK_INSTALL_PREFIX \""\${SimpleITK_INSTALL_PREFIX}\"" PATH)"")
endforeach(p)
set(SimpleITKConfig_CODE ""${SimpleITKConfig_CODE}\n"")

set(SimpleITKConfig_INCLUDE_DIRS
  ""\${SimpleITK_INSTALL_PREFIX}/${SimpleITK_INSTALL_INCLUDE_DIR}"")

configure_file(SimpleITKConfig.cmake.in
               CMakeFiles/SimpleITKConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Help other projects use SimpleITK
configure_file(UseSimpleITK.cmake.in
               UseSimpleITK.cmake COPYONLY IMMEDIATE)

configure_file(SimpleITKConfigVersion.cmake.in
               SimpleITKConfigVersion.cmake @ONLY IMMEDIATE)


#------------------------------------------------------------------------------
# INSTALLATION

install(FILES ${SimpleITK_BINARY_DIR}/CMakeFiles/SimpleITKConfig.cmake
              ${SimpleITK_BINARY_DIR}/SimpleITKConfigVersion.cmake
              ${SimpleITK_BINARY_DIR}/UseSimpleITK.cmake
  DESTINATION ${SimpleITK_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

install(EXPORT SimpleITKTargets
  DESTINATION ${SimpleITK_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

file( GLOB __files
  ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/Common/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/Common/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/IO/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/IO/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/Registration/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/Registration/include/[^.]*.hxx
  )

install(FILES ${__files}
  DESTINATION ${SimpleITK_INSTALL_INCLUDE_DIR}
  COMPONENT Development)

install(
  DIRECTORY
    ${CMAKE_SOURCE_DIR}/Code/Common/include/Ancillary
  DESTINATION
    ${SimpleITK_INSTALL_INCLUDE_DIR}/
  COMPONENT Development
  FILES_MATCHING PATTERN ""*.h""
)

install(FILES ${SimpleITK_DOC_FILES} DESTINATION ""${SimpleITK_INSTALL_DOC_DIR}"" COMPONENT Runtime)


#------------------------------------------------------------------------------
# CPack

set(CPACK_SOURCE_IGNORE_FILES  ""${ITK_MODULES_DISABLED_CPACK};/\\\\.git"")
set(CPACK_PACKAGE_VERSION_MAJOR ""${SimpleITK_VERSION_MAJOR}"")
set(CPACK_PACKAGE_VERSION_MINOR ""${SimpleITK_VERSION_MINOR}"")
set(CPACK_PACKAGE_VERSION_PATCH ""${SimpleITK_VERSION_PATCH}"")


include( CPack )

if(BUILD_TESTING)
  if(COMMAND ExternalData_Add_Target )
    ExternalData_Add_Target( SimpleITKData )
  endif()
endif()
",3.10,3.1
6428,scgmlz,BornAgain,False,False,False,False,False,15,C++,2020-05-15 18:19:12+00:00,2016-09-06 08:50:36+00:00,18,13900,"###########################################################################
# top-level CMakeLists.txt for building BornAgain
############################################################################

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)


set(CMAKE_MODULE_PATH
    ${CMAKE_SOURCE_DIR}/cmake/generic/modules
    ${CMAKE_SOURCE_DIR}/cmake/bornagain/modules)
set(TEMPLATE_DIR ${CMAKE_SOURCE_DIR}/cmake/bornagain/scripts)

include(PreventInSourceBuilds)

project(BornAgain)

include(CTest) # equivalent to ""enable_testing() ???
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} -LE Fullcheck) # => 'make check' is an alias for 'ctest'
add_custom_target(fullcheck COMMAND ${CMAKE_CTEST_COMMAND}) # => 'make check' is an alias for 'ctest'

include(VERSION.cmake)

# declare project-wide user flags, and set default values
option(BORNAGAIN_PYTHON ""Build with python support"" ON)
option(BORNAGAIN_USE_PYTHON3 ""Build against python 3.x instead of 2.7"" ON)
option(BORNAGAIN_GENERATE_BINDINGS ""Generate python bindings during build (requires swig)"" OFF)
option(BORNAGAIN_GENERATE_PYTHON_DOCS ""Generate python documentation from the doxygen comments"" OFF)
option(BORNAGAIN_GUI ""Build a graphical user interface"" ON)
option(BORNAGAIN_USERMANUAL ""Build the User Manual"" OFF)
option(BORNAGAIN_MANPAGE ""Build Unix man page"" OFF)
option(BUILD_DEBIAN ""Build a debian package"" OFF)
option(BORNAGAIN_APPLE_BUNDLE ""Create a Mac OS X bundle"" OFF)
option(BORNAGAIN_MPI ""Build with MPI support"" OFF)
option(BORNAGAIN_RELEASE ""Special option for making release"" OFF)
option(BORNAGAIN_TIFF_SUPPORT ""Tiff files read/write support"" ON)
option(AUTOGENERATE ""Regenerate directory auto (Py docs, Py wrappers, man page)"" OFF)
option(ZERO_TOLERANCE ""Terminate compilation on warnings"" OFF)
option(UNITTESTS ""Don't skip unit tests"" ON)
option(BORNAGAIN_COVERAGE ""Build with test coverage information"" OFF)
option(BORNAGAIN_DEBUG_OPTIMIZATION ""Build with debug optimization (gcc only)"" OFF)
option(BORNAGAIN_OPENGL ""Build additional modules for 3D in GUI"" ON)
option(BORNAGAIN_BUILDBOT_SERVER ""Special option for the buildbot server"" OFF)
option(BORNAGAIN_TIDY ""Invokes clang-tidy"" OFF)

if(AUTOGENERATE)
    set(BORNAGAIN_MANPAGE ON)
    set(BORNAGAIN_GENERATE_PYTHON_DOCS ON)
    set(BORNAGAIN_GENERATE_BINDINGS ON)
endif()

# include CMake macros and functions
include(GetFilenameComponent) # overwrite CMake command
include(SearchInstalledSoftware)
include(CheckCompiler)
if(ZERO_TOLERANCE)
    if(BORNAGAIN_USE_PYTHON3)
        message(FATAL_ERROR ""Python3 currently incompatible with ZERO_TOLERANCE"")
    endif()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Werror -Wfatal-errors"")
endif()
include(BornAgainConfiguration)
include(BornAgainPolicy)
include(GeneratePythonDocs)
include(PyExamplesLineLength)
include(CheckCode)

# debug optimization
if(BORNAGAIN_DEBUG_OPTIMIZATION)
  include(DebugOptimization)
endif()

# code coverage analysis
if(BORNAGAIN_COVERAGE)
  include(CheckCoverage)
  include(SetupCoverage)
endif()

# recurse into the given subdirectories
if(BORNAGAIN_USERMANUAL)
    add_subdirectory(Doc/UserManual)
endif()
if(BORNAGAIN_MANPAGE)
    add_subdirectory(Doc/man)
endif()

add_subdirectory(ThirdParty/common)
add_subdirectory(ThirdParty/Fit)
add_subdirectory(Fit)
add_subdirectory(Tests/UnitTests/Fit)

add_subdirectory(ThirdParty/Core)
add_subdirectory(Core)
add_subdirectory(Tests/UnitTests/Core)
add_subdirectory(Tests/UnitTests/Numeric)

if(BORNAGAIN_GUI)
    include(SearchQt)
    add_subdirectory(ThirdParty/GUI)
    add_subdirectory(GUI)
    add_subdirectory(Tests/UnitTests/GUI)
endif()

# functional tests (ctest)
add_subdirectory(Tests/Functional)

# after-install message
add_subdirectory(cmake/bornagain)

# make package targets
include(BornAgainCPack)
",3.1,3.1
6520,socketio,socket.io-client-cpp,False,False,False,False,False,19,C++,2020-04-23 20:25:13+00:00,2015-03-29 19:31:21+00:00,1486,203,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
PROJECT(sioclient)

option(BUILD_SHARED_LIBS ""Build the shared library"" OFF)
option(Boost_USE_STATIC_LIBS ""Use Boost static version"" ON)

set(MAJOR 1)
set(MINOR 6)
set(PATCH 0)

if(NOT CMAKE_BUILD_TYPE )
MESSAGE(STATUS ""not define build type, set to release"" )
set(CMAKE_BUILD_TYPE Release )
elseif(NOT (${CMAKE_BUILD_TYPE} STREQUAL ""Release"" OR ${CMAKE_BUILD_TYPE} STREQUAL ""Debug"" ))
MESSAGE(SEND_ERROR ""CMAKE_BUILD_TYPE must be either Release or Debug"")
return()
endif()

set(BOOST_VER ""1.55.0"" CACHE STRING ""boost version"" )

set(Boost_USE_MULTITHREADED ON) 
set(Boost_USE_STATIC_RUNTIME OFF) 
find_package(Boost ${BOOST_VER} REQUIRED COMPONENTS system date_time random) 

aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/src ALL_SRC)
aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/src/internal ALL_SRC)
file(GLOB ALL_HEADERS ${CMAKE_CURRENT_LIST_DIR}/src/*.h )
set(SIO_INCLUDEDIR ${CMAKE_CURRENT_LIST_DIR})

add_library(sioclient ${ALL_SRC})
target_include_directories(sioclient PRIVATE ${Boost_INCLUDE_DIRS} 
    ${CMAKE_CURRENT_LIST_DIR}/src 
    ${CMAKE_CURRENT_LIST_DIR}/lib/websocketpp 
    ${CMAKE_CURRENT_LIST_DIR}/lib/rapidjson/include
)

set_property(TARGET sioclient PROPERTY CXX_STANDARD 11)
set_property(TARGET sioclient PROPERTY CXX_STANDARD_REQUIRED ON)
target_link_libraries(sioclient PRIVATE ${Boost_LIBRARIES})
if(BUILD_SHARED_LIBS)
set_target_properties(sioclient
	PROPERTIES
		SOVERSION ${MAJOR}
		VERSION ${MAJOR}.${MINOR}.${PATCH}
	)
endif()
list(APPEND TARGET_LIBRARIES sioclient)

find_package(OpenSSL)
if(OPENSSL_FOUND)
add_library(sioclient_tls ${ALL_SRC})
target_include_directories(sioclient_tls PRIVATE ${Boost_INCLUDE_DIRS} 
    ${CMAKE_CURRENT_LIST_DIR}/src 
    ${CMAKE_CURRENT_LIST_DIR}/lib/websocketpp 
    ${CMAKE_CURRENT_LIST_DIR}/lib/rapidjson/include
    ${OPENSSL_INCLUDE_DIR}
)

set_property(TARGET sioclient_tls PROPERTY CXX_STANDARD 11)
set_property(TARGET sioclient_tls PROPERTY CXX_STANDARD_REQUIRED ON)
target_link_libraries(sioclient_tls PRIVATE ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
target_compile_definitions(sioclient_tls PRIVATE -DSIO_TLS)
if(BUILD_SHARED_LIBS)
set_target_properties(sioclient_tls
	PROPERTIES
		SOVERSION ${MAJOR}
		VERSION ${MAJOR}.${MINOR}.${PATCH}
	)
endif()
list(APPEND TARGET_LIBRARIES sioclient_tls)

endif()

install(FILES ${ALL_HEADERS} 
    DESTINATION ""${CMAKE_CURRENT_LIST_DIR}/build/include""
)

install(TARGETS ${TARGET_LIBRARIES}
    DESTINATION ""${CMAKE_CURRENT_LIST_DIR}/build/lib/${CMAKE_BUILD_TYPE}""
)

install(FILES ${Boost_LIBRARIES} 
    DESTINATION ""${CMAKE_CURRENT_LIST_DIR}/build/lib/${CMAKE_BUILD_TYPE}""
)
",3.1.0,3.1
6529,domschl,syncognite,False,False,False,False,False,1,C++,2019-12-20 16:21:49+00:00,2017-01-23 10:08:28+00:00,6,690,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# Build type needs to be set as parameter to CMAKE: -DCMAKE_BUILD_TYPE=xxxx
# set(CMAKE_BUILD_TYPE Release)
# If the user specifies -DCMAKE_BUILD_TYPE on the command line, take their definition
# and dump it in the cache along with proper documentation, otherwise set CMAKE_BUILD_TYPE
# to Debug prior to calling PROJECT()
IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING ""Choose the type of `build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
ELSE()
   SET(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
ENDIF()

set(CMAKE_CXX_FLAGS_DEBUG  ""-g"")
set(CMAKE_CXX_FLAGS_DEBUG  ""-ggdb"")

project(cpneural)

option(WITH_FLOAT ""Use float 32-bit precision (OFF=double)"" ON)
# option(WITH_OPENMP ""Use OpenMP libraries"" ON)
option(WITH_VIENNACL ""Use ViennaCL library"" OFF)
option(WITH_CUDA ""Use Nvidia CUDA libraries"" OFF)
option(WITH_OPENCL ""Use OpenCL libraries"" OFF)
option(USE_SYSTEM_EIGEN ""Use system version of Eigen3 instead of project's version"" OFF)

if (APPLE)
    include_directories(""/usr/local/include"")
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})

if (USE_SYSTEM_EIGEN)
    find_package(Eigen3 REQUIRED)
    include_directories(${EIGEN3_INCLUDE_DIR})
else()
    include_directories(""${PROJECT_SOURCE_DIR}/cpneural/eigen3"")
endif()

find_package(HDF5 COMPONENTS CXX C HL REQUIRED)
if (HDF5_FOUND)
  include_directories(${HDF5_INCLUDE_DIRS})
  link_directories(${HDF5_LIB_DIRS})
endif (HDF5_FOUND)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if (WITH_FLOAT)
    add_definitions(-DUSE_FLOAT)
else()
    add_definitions(-DUSE_DOUBLE)
endif()


set(gcc_like_compilers GNU Clang AppleClang Intel)
set(intel_archs x86_64 i386 i686)

# Setup some options to allow a user to enable SSE and AVX instruction use.
if (("";${gcc_like_compilers};"" MATCHES "";${CMAKE_CXX_COMPILER_ID};"") AND
    ("";${intel_archs};""        MATCHES "";${CMAKE_SYSTEM_PROCESSOR};""))
    option(USE_SSE2_INSTRUCTIONS ""Compile your program with SSE2 instructions"" ON)
    option(USE_SSE4_INSTRUCTIONS ""Compile your program with SSE4 instructions"" ON)
    option(USE_AVX_INSTRUCTIONS  ""Compile your program with AVX & AVX2 instructions""  ON)
    option(USE_FMA_INSTRUCTIONS  ""Compile your program with FMA instructions""  ON)
    option(USE_FAST_MATH  ""Compile your program with fast-math optimizations"" ON)
    if(USE_AVX_INSTRUCTIONS)
        add_definitions(-march=native)
        add_definitions(-mavx -mavx2)
        add_definitions(-DUSE_AVX)
        message(STATUS ""Enabling AVX & AVX2 instructions"")
    elseif (USE_SSE4_INSTRUCTIONS)
        add_definitions(-msse4)
        add_definitions(-DUSE_SSE4)
        message(STATUS ""Enabling SSE4 instructions"")
    elseif(USE_SSE2_INSTRUCTIONS)
        add_definitions(-msse2)
        add_definitions(-DUSE_SSE2)
        message(STATUS ""Enabling SSE2 instructions"")
    endif()
    if(USE_FMA_INSTRUCTIONS)
        add_definitions(-mfma)
        add_definitions(-DUSE_FMA)
        message(STATUS ""Enabling FMA (fused multiple add, Haswell onwards) instructions"")
    endif()
    if(USE_FAST_MATH)
        add_definitions(-ffast-math)
        add_definitions(-DUSE_FAST_MATH)
        message(STATUS ""Enabling fast-math optimizations"")
    endif()
endif()


# if (WITH_OPENMP)
#     find_package(OpenMP)
#     if (OPENMP_FOUND)
#         set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
#         set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
#         add_definitions(-DUSE_OPENMP)
#         message(STATUS ""Enabling OpenMP"")
#     endif()
# endif()

if (WITH_VIENNACL)
    find_package(ViennaCL)
    if (ViennaCL_FOUND)
        add_definitions(-DUSE_VIENNACL)
        message(STATUS ""Enabling ViennaCL"")
    endif()

    if (WITH_OPENCL)
        find_package(OpenCL)
        if (OpenCL_FOUND)
            include_directories(${OpenCL_INCLUDE_DIRS})
            link_directories(${OpenCL_LIBRARY})
            add_definitions(-DUSE_OPENCL)
            message(STATUS ""Enabling OpenCL"")
        endif()
    endif()
endif()

if (WITH_CUDA)
    set (CUDA_TOOLKIT_ROOT_DIR ""/opt/cuda"")
    find_package(CUDA REQUIRED)
    if (CUDA_FOUND)
        include_directories(${CUDA_INCLUDE_DIR})
        link_directories(${CUDA_LIBRARY})
        include_directories(""/opt/cuda/include"")
        add_definitions(-DUSE_CUDA)
        message(STATUS ""Enabling CUDA"")
    endif()
endif()

add_subdirectory (cpneural)
include_directories(""cpneural"")
add_subdirectory (cptest)
add_subdirectory (minitests)
add_subdirectory (cpmnist)
add_subdirectory (cpcifar10)
add_subdirectory (bench)
add_subdirectory (rnnreader)

set_property(TARGET cpneural PROPERTY CXX_STANDARD 11)
set_property(TARGET testneural PROPERTY CXX_STANDARD 11)
set_property(TARGET minitests PROPERTY CXX_STANDARD 11)
set_property(TARGET mnisttest PROPERTY CXX_STANDARD 11)
set_property(TARGET cifar10test PROPERTY CXX_STANDARD 11)
set_property(TARGET bench PROPERTY CXX_STANDARD 11)
set_property(TARGET rnnreader PROPERTY CXX_STANDARD 11)
",3.1.0,3.1
6549,dolphin-emu,dolphin,False,False,False,False,False,404,C++,2020-05-17 17:14:43+00:00,2013-07-22 09:07:57+00:00,6274,32451,"########################################
# General setup
#
cmake_minimum_required(VERSION 3.10)
set(CMAKE_OSX_ARCHITECTURES ""x86_64"")
# Minimum OS X version.
# This is inserted into the Info.plist as well.

# MacOS prior to 10.12 did not fully support C++17, which is used to
# handle configuration options
set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.12.0"" CACHE STRING """")

project(dolphin-emu)

# Name of the Dolphin distributor. If you redistribute Dolphin builds (forks,
# unofficial builds) please consider identifying your distribution with a
# unique name here.
set(DISTRIBUTOR ""None"" CACHE STRING ""Name of the distributor."")

if(UNIX AND NOT APPLE AND NOT ANDROID)
  option(ENABLE_X11 ""Enables X11 Support"" ON)
endif()
if(NOT WIN32 AND NOT APPLE)
  option(ENABLE_EGL ""Enables EGL OpenGL Interface"" ON)
endif()

option(USE_SHARED_ENET ""Use shared libenet if found rather than Dolphin's soon-to-compatibly-diverge version"" OFF)
option(USE_UPNP ""Enables UPnP port mapping support"" ON)
option(ENABLE_NOGUI ""Enable NoGUI frontend"" ON)
option(ENABLE_QT ""Enable Qt (Default)"" ON)
option(ENABLE_LTO ""Enables Link Time Optimization"" OFF)
option(ENABLE_GENERIC ""Enables generic build that should run on any little-endian host"" OFF)
option(ENABLE_HEADLESS ""Enables running Dolphin as a headless variant"" OFF)
option(ENABLE_ALSA ""Enables ALSA sound backend"" ON)
option(ENABLE_PULSEAUDIO ""Enables PulseAudio sound backend"" ON)
option(ENABLE_LLVM ""Enables LLVM support, for disassembly"" ON)
option(ENABLE_TESTS ""Enables building the unit tests"" ON)
option(USE_DISCORD_PRESENCE ""Enables Discord Rich Presence, show the current game on Discord"" ON)

# Maintainers: if you consider blanket disabling this for your users, please
# consider the following points:
#  * No data is being sent without explicit user approval (pop up box at first
#    launch).
#  * The Dolphin team relies on the data in order to understand the behavior
#    of our software in the wild.
option(ENABLE_ANALYTICS ""Enables opt-in Analytics collection"" ON)

option(ENCODE_FRAMEDUMPS ""Encode framedumps in AVI format"" ON)

option(ENABLE_GPROF ""Enable gprof profiling (must be using Debug build)"" OFF)
option(FASTLOG ""Enable all logs"" OFF)
option(GDBSTUB ""Enable gdb stub for remote debugging."" OFF)
option(OPROFILING ""Enable profiling"" OFF)

# TODO: Add DSPSpy
option(DSPTOOL ""Build dsptool"" OFF)

# Enable SDL for default on operating systems that aren't Android, Linux or Windows.
if(NOT ANDROID AND NOT CMAKE_SYSTEM_NAME STREQUAL ""Linux"" AND NOT MSVC)
  option(ENABLE_SDL ""Enables SDL as a generic controller backend"" ON)
else()
  option(ENABLE_SDL ""Enables SDL as a generic controller backend"" OFF)
endif()

if(APPLE)
  option(OSX_USE_DEFAULT_SEARCH_PATH ""Don't prioritize system library paths"" OFF)
  option(SKIP_POSTPROCESS_BUNDLE ""Skip postprocessing bundle for redistributability"" OFF)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
  option(ENABLE_VTUNE ""Enable Intel VTune integration for JIT code."" OFF)

  if(NOT ANDROID)
    option(ENABLE_EVDEV ""Enables the evdev controller backend"" ON)
  endif()
endif()

if(UNIX)
  # Builds a relocatable binary on Linux.
  # The Sys folder will need to be copied to the Binaries folder.
  option(LINUX_LOCAL_DEV ""Enable relocatable binary"" OFF)
endif()

list(APPEND CMAKE_MODULE_PATH
  ${CMAKE_SOURCE_DIR}/CMake
)

# Support functions
include(CheckAndAddFlag)
include(CheckCCompilerFlag)
include(CheckVendoringApproved)
include(DolphinCompileDefinitions)

# Enable folders for IDE
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Set up paths
set(bindir  ${CMAKE_INSTALL_PREFIX}/bin               CACHE PATH ""bindir"")
set(datadir ${CMAKE_INSTALL_PREFIX}/share/dolphin-emu CACHE PATH ""datadir"")
set(mandir  ${CMAKE_INSTALL_PREFIX}/share/man         CACHE PATH ""mandir"")
add_definitions(-DDATA_DIR=""${datadir}/"")

if(CMAKE_SYSROOT)
  # If we should use a sysroot, tell pkg-config to search for packages in there, not on the host
  set(ENV{PKG_CONFIG_LIBDIR} ""${CMAKE_SYSROOT}/usr/lib/pkgconfig:${CMAKE_SYSROOT}/usr/share/pkgconfig"")
  set(ENV{PKG_CONFIG_SYSROOT_DIR} ""${CMAKE_SYSROOT}"")
endif()

# Set where the binary files will be built.  The program will not execute from
# here.  You must run ""make install"" to install these to the proper location
# as defined above.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Binaries)

if (WIN32)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Binary)

	if (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"")
	  string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY /ARM64)
  endif()

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
endif()

# setup CCache
include(CCache)

# for revision info
find_package(Git)
if(GIT_FOUND)
  # make sure version information gets re-run when the current Git HEAD changes
  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} COMMAND ${GIT_EXECUTABLE} rev-parse --git-path HEAD
      OUTPUT_VARIABLE dolphin_git_head_filename
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ""${dolphin_git_head_filename}"")

  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} COMMAND ${GIT_EXECUTABLE} rev-parse --symbolic-full-name HEAD
      OUTPUT_VARIABLE dolphin_git_head_symbolic
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
      COMMAND ${GIT_EXECUTABLE} rev-parse --git-path ${dolphin_git_head_symbolic}
      OUTPUT_VARIABLE dolphin_git_head_symbolic_filename
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ""${dolphin_git_head_symbolic_filename}"")

  # defines DOLPHIN_WC_REVISION
  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
      OUTPUT_VARIABLE DOLPHIN_WC_REVISION
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  # defines DOLPHIN_WC_DESCRIBE
  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} COMMAND ${GIT_EXECUTABLE} describe --always --long --dirty
      OUTPUT_VARIABLE DOLPHIN_WC_DESCRIBE
      OUTPUT_STRIP_TRAILING_WHITESPACE)

  # remove hash (and trailing ""-0"" if needed) from description
  string(REGEX REPLACE ""(-0)?-[^-]+((-dirty)?)$"" ""\\2"" DOLPHIN_WC_DESCRIBE ""${DOLPHIN_WC_DESCRIBE}"")

  # defines DOLPHIN_WC_BRANCH
  execute_process(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
      OUTPUT_VARIABLE DOLPHIN_WC_BRANCH
      OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

# version number
set(DOLPHIN_VERSION_MAJOR ""5"")
set(DOLPHIN_VERSION_MINOR ""0"")
if(DOLPHIN_WC_BRANCH STREQUAL ""stable"")
  set(DOLPHIN_VERSION_PATCH ""0"")
else()
  set(DOLPHIN_VERSION_PATCH ${DOLPHIN_WC_REVISION})
endif()

# If Dolphin is not built from a Git repository, default the version info to
# reasonable values.
if(NOT DOLPHIN_WC_REVISION)
  set(DOLPHIN_WC_DESCRIBE ""${DOLPHIN_VERSION_MAJOR}.${DOLPHIN_VERSION_MINOR}"")
  set(DOLPHIN_WC_REVISION ""${DOLPHIN_WC_DESCRIBE} (no further info)"")
  set(DOLPHIN_WC_BRANCH ""master"")
endif()

# Architecture detection and arch specific settings
message(STATUS ""Detected architecture: ${CMAKE_SYSTEM_PROCESSOR}"")

# Detect 64bit or 32bit
# CMake doesn't provide a simple way to determine 32bit or 64bit
# If we ever support a architecture that is 64bit with 32bit pointers then this'll break
# Of course the chances of that are slim(x32?) so who cares
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(_ARCH_64 1)
  add_definitions(-D_ARCH_64=1)
else()
  set(_ARCH_32 1)
  add_definitions(-D_ARCH_32=1)
endif()

if(ENABLE_GENERIC)
  message(STATUS ""Warning! Building generic build!"")
  set(_M_GENERIC 1)
  add_definitions(-D_M_GENERIC=1)
elseif(_ARCH_64 AND CMAKE_SYSTEM_PROCESSOR MATCHES ""x86_64|amd64|AMD64"")
  set(_M_X86 1)
  set(_M_X86_64 1)
  add_definitions(-D_M_X86=1)
  add_definitions(-D_M_X86_64=1)
  check_and_add_flag(HAVE_SSE2 -msse2)
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"")
  set(_M_ARM_64 1)
  add_definitions(-D_M_ARM_64=1)
  # CRC instruction set is used in the CRC32 hash function
  check_and_add_flag(HAVE_ARCH_ARMV8 -march=armv8-a+crc)
else()
  message(FATAL_ERROR ""You're building on an unsupported platform: ""
      ""'${CMAKE_SYSTEM_PROCESSOR}' with ${CMAKE_SIZEOF_VOID_P}-byte pointers.""
      "" Enable generic build if you really want a JIT-less binary."")
endif()


# Enforce minimum GCC version
if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)
  message(FATAL_ERROR ""Dolphin requires at least GCC 7.0 (found ${CMAKE_CXX_COMPILER_VERSION})"")
endif()

if(CMAKE_GENERATOR MATCHES ""Ninja"")
  check_and_add_flag(DIAGNOSTICS_COLOR -fdiagnostics-color)
elseif(CMAKE_GENERATOR MATCHES ""Visual Studio"")
  # Only MSBuild needs this, other generators will compile one file at a time
  add_compile_options(""/MP"")
endif()

if(CMAKE_C_COMPILER_ID MATCHES ""MSVC"")
  check_and_add_flag(EXCEPTIONS /EHsc)
  dolphin_compile_definitions(_DEBUG DEBUG_ONLY)

  # Enforce C++ standard conforming conversion rules to catch possible bugs
  add_compile_options(/permissive-)
  # Remove unreferenced inline functions/data to reduce link time and catch bugs
  add_compile_options(/Zc:inline)
  # Assume `new` (w/o std::nothrow) throws to reduce binary size
  add_compile_options(/Zc:throwingNew)
  # Enforce strict volatile semantics as per ISO C++
  add_compile_options(/volatile:iso)

  string(APPEND CMAKE_EXE_LINKER_FLAGS "" /NXCOMPAT"")
else()
  add_definitions(-D_DEFAULT_SOURCE)
  check_and_add_flag(HAVE_WALL -Wall)
  # TODO: would like these but they produce overwhelming amounts of warnings
  #check_and_add_flag(EXTRA -Wextra)
  #check_and_add_flag(MISSING_FIELD_INITIALIZERS -Wmissing-field-initializers)
  #check_and_add_flag(SWITCH_DEFAULT -Wswitch-default)
  #check_and_add_flag(FLOAT_EQUAL -Wfloat-equal)
  #check_and_add_flag(CONVERSION -Wconversion)
  #check_and_add_flag(ZERO_AS_NULL_POINTER_CONSTANT -Wzero-as-null-pointer-constant)
  check_and_add_flag(TYPE_LIMITS -Wtype-limits)
  check_and_add_flag(SIGN_COMPARE -Wsign-compare)
  check_and_add_flag(IGNORED_QUALIFIERS -Wignored-qualifiers)
  check_and_add_flag(UNINITIALIZED -Wuninitialized)
  check_and_add_flag(LOGICAL_OP -Wlogical-op)
  check_and_add_flag(SHADOW -Wshadow)
  check_and_add_flag(INIT_SELF -Winit-self)
  check_and_add_flag(MISSING_DECLARATIONS -Wmissing-declarations)
  check_and_add_flag(MISSING_VARIABLE_DECLARATIONS -Wmissing-variable-declarations)

  # gcc uses some optimizations which might break stuff without this flag
  check_and_add_flag(NO_STRICT_ALIASING -fno-strict-aliasing)
  check_and_add_flag(NO_EXCEPTIONS -fno-exceptions)

  check_and_add_flag(VISIBILITY_INLINES_HIDDEN -fvisibility-inlines-hidden)
  check_and_add_flag(VISIBILITY_HIDDEN -fvisibility=hidden)

  check_and_add_flag(FOMIT_FRAME_POINTER -fomit-frame-pointer RELEASE_ONLY)

  dolphin_compile_definitions(_DEBUG DEBUG_ONLY)
  check_and_add_flag(GGDB -ggdb DEBUG_ONLY)

  if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
    # GNU ar: Create thin archive files.
    # Requires binutils-2.19 or later.
    set(CMAKE_C_ARCHIVE_CREATE   ""<CMAKE_AR> qcTP <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_C_ARCHIVE_APPEND   ""<CMAKE_AR> qTP  <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_ARCHIVE_CREATE ""<CMAKE_AR> qcTP <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_ARCHIVE_APPEND ""<CMAKE_AR> qTP  <TARGET> <LINK_FLAGS> <OBJECTS>"")
  endif()
endif()

if(CMAKE_SYSTEM_NAME MATCHES ""Darwin"")
  if(NOT OSX_USE_DEFAULT_SEARCH_PATH)
    # Hack up the path to prioritize the path to built-in OS libraries to
    # increase the chance of not depending on a bunch of copies of them
    # installed by MacPorts, Fink, Homebrew, etc, and ending up copying
    # them into the bundle.  Since we optionally depend on libraries which
    # are not part of OS X (ffmpeg, etc.), however, don't remove the default
    # path entirely as was done in a previous version of this file.  This is
    # still kinda evil, since it defeats the user's path settings...
    # See http://www.cmake.org/cmake/help/v3.0/command/find_program.html
    list(APPEND CMAKE_PREFIX_PATH ""/usr"")
  endif()

  # Specify target CPUs.
  check_and_add_flag(HAVE_MSSSE3 -mssse3)
  check_and_add_flag(HAVE_ARCH_CORE2 -march=core2)

  # Linker flags.
  # Drop unreachable code and data.
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip,-dead_strip_dylibs"")

  find_library(APPKIT_LIBRARY AppKit)
  find_library(APPSERV_LIBRARY ApplicationServices)
  find_library(CARBON_LIBRARY Carbon)
  find_library(COCOA_LIBRARY Cocoa)
  find_library(COREFOUNDATION_LIBRARY CoreFoundation)
  find_library(CORESERV_LIBRARY CoreServices)
  find_library(FORCEFEEDBACK_LIBRARY ForceFeedback)
  find_library(FOUNDATION_LIBRARY Foundation)
  find_library(IOB_LIBRARY IOBluetooth)
  find_library(IOK_LIBRARY IOKit)
  find_library(OPENGL_LIBRARY OpenGL)
endif()

if(ENABLE_LTO)
  check_and_add_flag(LTO -flto)
  if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
    set(CMAKE_AR gcc-ar)
    set(CMAKE_RANLIB gcc-ranlib)
  endif()
endif()

if(UNIX AND LINUX_LOCAL_DEV)
  add_definitions(-DLINUX_LOCAL_DEV)
endif()

# BSDs put packages in /usr/local instead of /usr, so we need to
# force CMake to look in those directories by default, too.
# All commands and submodule commands also need to see these
# changes, so just setting them in the project scope via
# include_directories and link_directories is not sufficient
if(CMAKE_SYSTEM_NAME MATCHES ""FreeBSD|NetBSD"")
  set(CMAKE_PREFIX_PATH ""${CMAKE_PREFIX_PATH};/usr/local"")
  set(CMAKE_REQUIRED_INCLUDES ""/usr/local/include"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib"")
endif()

# Dolphin requires threads.
find_package(Threads)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING
      ""Build type (Release/Debug/RelWithDebInfo/MinSizeRel)"" FORCE)
endif()

if(ENABLE_GPROF)
  check_and_add_flag(HAVE_PG -pg)
  if(NOT FLAG_C_HAVE_PG)
    message(FATAL_ERROR ""Compiler option -pg is not supported"")
  endif()
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pg"")
endif()

if(FASTLOG)
  add_definitions(-DDEBUGFAST)
endif()

if(GDBSTUB)
  add_definitions(-DUSE_GDBSTUB)
endif()

if(ENABLE_VTUNE)
  set(VTUNE_DIR ""/opt/intel/vtune_amplifier"")
  add_definitions(-DUSE_VTUNE)
  include_directories(""${VTUNE_DIR}/include"")
  set(VTUNE_LIBRARIES
      ""${VTUNE_DIR}/lib64/libjitprofiling.a""
      ""${VTUNE_DIR}/lib64/libittnotify.a""
  )
endif()

if(ANDROID)
  message(STATUS ""Building for Android"")
  if(NOT ENABLE_HEADLESS)
    add_definitions(-DANDROID)
    if(ENABLE_NOGUI)
      message(STATUS ""Building Android app, disabling NoGUI frontend."")
      set(ENABLE_NOGUI 0)
    endif()
  else()
    # Lie to cmake a bit. We are cross compiling to Android
    # but not as a shared library. We want an executable.
    set(ANDROID 0)
  endif()
  set(USE_UPNP 0)
  set(ENABLE_QT 0)
  set(USE_DISCORD_PRESENCE 0)

  # We are cross compiling, search only the toolchain for libraries and includes
  SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
  SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
endif()

if(ENABLE_HEADLESS)
  message(STATUS ""Enabling Headless! Disabling GUI."")
  set(ENABLE_QT 0)
  set(USE_DISCORD_PRESENCE 0)
endif()

# Set file offset size to 64 bits.
#
# On modern Unixes, this is typically already the case. The lone exception is
# glibc, which may default to 32 bits. glibc allows this to be configured
# by setting _FILE_OFFSET_BITS.
if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"")
  add_definitions(-D_FILE_OFFSET_BITS=64)
  add_definitions(-D_LARGEFILE_SOURCE)
endif()

########################################
# Dependency checking
#
# TODO: We should have options for dependencies included in the externals to
# override autodetection of system libraries and force the usage of the
# externals.
include(CheckLib)
include(CheckCXXSourceRuns)

set(OpenGL_GL_PREFERENCE GLVND CACHE STRING ""Linux-only: if GLVND, use the vendor-neutral GL libraries (default). If LEGACY, use the legacy ones (might be necessary to have optirun/primusrun work)"")
set_property(CACHE OpenGL_GL_PREFERENCE PROPERTY STRINGS GLVND LEGACY)
find_package(OpenGL)
if (OPENGL_GL)
  include_directories(${OPENGL_INCLUDE_DIR})
endif()

if(ENABLE_X11)
  find_package(X11)
  if(X11_FOUND)
    add_definitions(-DHAVE_X11=1)
    check_lib(XRANDR xrandr Xrandr)
    if(XRANDR_FOUND)
      add_definitions(-DHAVE_XRANDR=1)
    else()
      add_definitions(-DHAVE_XRANDR=0)
    endif()
    pkg_check_modules(X11_INPUT REQUIRED xi>=1.5.0)
    message(STATUS ""X11 support enabled"")
  else()
    message(WARNING ""X11 support enabled but not found. This build will not support X11."")
  endif()
endif()

if(ENABLE_EGL)
  find_package(EGL)
  if(EGL_FOUND)
    add_definitions(-DHAVE_EGL=1)
    message(STATUS ""EGL OpenGL interface enabled"")
  else()
    message(WARNING ""EGL support enabled but not found. This build will not support EGL."")
  endif()
endif()

if(ENCODE_FRAMEDUMPS)
  if(WIN32 AND _M_X86_64)
    set(FFMPEG_DIR Externals/ffmpeg)
  endif()
  find_package(FFmpeg COMPONENTS avcodec avformat avutil swscale)
  if(FFmpeg_FOUND)
    message(STATUS ""libav/ffmpeg found, enabling AVI frame dumps"")
    add_definitions(-DHAVE_FFMPEG)
  else()
    message(STATUS ""libav/ffmpeg not found, disabling AVI frame dumps"")
  endif()
endif()

if(OPROFILING)
  find_package(OProfile)
  if(OPROFILE_FOUND)
    message(STATUS ""OProfile found, enabling profiling support"")
    add_definitions(-DUSE_OPROFILE=1)
  else()
    message(FATAL_ERROR ""OProfile not found. Can't build profiling support."")
  endif()
endif()

if(ENABLE_EVDEV)
  find_package(Libudev REQUIRED)
  find_package(Libevdev REQUIRED)
  if(LIBUDEV_FOUND AND LIBEVDEV_FOUND)
    message(STATUS ""libevdev/libudev found, enabling evdev controller backend"")
    add_definitions(-DHAVE_LIBUDEV=1)
    add_definitions(-DHAVE_LIBEVDEV=1)
  else()
    message(FATAL_ERROR ""Couldn't find libevdev and/or libudev. Can't build evdev controller backend.\nDisable ENABLE_EVDEV if you wish to build without controller support"")
  endif()
endif()

if(UNIX)
  message(STATUS ""Using named pipes as controller inputs"")
  add_definitions(-DUSE_PIPES=1)
  message(STATUS ""Watching game memory for changes"")
  add_definitions(-DUSE_MEMORYWATCHER=1)
endif()

if(ENABLE_ANALYTICS)
  message(STATUS ""Enabling analytics collection (subject to end-user opt-in)"")
  add_definitions(-DUSE_ANALYTICS=1)
endif()

########################################
# Setup include directories (and make sure they are preferred over the Externals)
#
include_directories(Source/Core)
if(ANDROID)
  include_directories(Source/Android)
endif()

########################################
# Process externals and setup their include directories
#
# NOTES about adding Externals:
#   - If an external provides a target, or one can be introduced with find_package, consider using it.
#     - If a target doesn't exist, consider introducing a target for it with add_library and adding all necessary
#       includes, definitions, etc, to that target. This way, only libraries that need those attributes simply
#       need to link that target in, as opposed to them being provided to every library
#       (which is the case with the directory-based include_directories, add_definitions, etc)
#
#   - make sure to tell cmake to link them statically or dynamically (most
#     should be linked statically)
#   - place the CMakeLists.txt in the first-level subdirectory, e.g.
#     Externals/zlib/CMakeLists.txt (that is: NOT in some Src/ subdirectory)
#
if (_M_X86)
  add_subdirectory(Externals/Bochs_disasm)
endif()
add_subdirectory(Externals/cpp-optparse)
find_package(fmt 6.0)
if(fmt_FOUND)
  message(STATUS ""Using shared fmt ${fmt_VERSION}"")
else()
  check_vendoring_approved(fmt)
  message(STATUS ""Using static fmt from Externals"")
  add_subdirectory(Externals/fmt EXCLUDE_FROM_ALL)
endif()
add_subdirectory(Externals/glslang)
add_subdirectory(Externals/imgui)

find_package(pugixml)
if(NOT pugixml_FOUND)
  check_vendoring_approved(pugixml)
  message(STATUS ""Using static pugixml from Externals"")
  add_subdirectory(Externals/pugixml)
endif()

if(USE_SHARED_ENET)
  check_lib(ENET libenet enet enet/enet.h QUIET)
  include(CheckSymbolExists)
  if (ENET_FOUND)
    set(CMAKE_REQUIRED_INCLUDES ${ENET_INCLUDE_DIRS})
    # hack: LDFLAGS already contains -lenet but all flags but the first are
    # dropped; ugh, cmake
    set(CMAKE_REQUIRED_FLAGS ${ENET_LDFLAGS})
    set(CMAKE_REQUIRED_LIBRARIES ${ENET_LIBRARIES})
    check_symbol_exists(enet_socket_get_address enet/enet.h ENET_HAVE_SGA)
    set(CMAKE_REQUIRED_INCLUDES)
    set(CMAKE_REQUIRED_FLAGS)
    set(CMAKE_REQUIRED_LIBRARIES)
    if (NOT ENET_HAVE_SGA)
      # enet is too old
     set(ENET_FOUND FALSE)
    endif()
  endif()
endif()
if (ENET_FOUND)
  message(STATUS ""Using shared enet"")
else()
  check_vendoring_approved(enet)
  message(STATUS ""Using static enet from Externals"")
  include_directories(Externals/enet/include)
  add_subdirectory(Externals/enet)
endif()

if(NOT XXHASH_FOUND)
  message(STATUS ""Using static xxhash from Externals"")
  add_subdirectory(Externals/xxhash)
endif()

find_package(BZip2)
if(BZIP2_FOUND)
  message(STATUS ""Using shared bzip2"")
else()
  check_vendoring_approved(bzip2)
  message(STATUS ""Shared bzip2 not found, falling back to the static library"")
  add_subdirectory(Externals/bzip2)
endif()

# macOS ships with liblzma.dylib but no headers, so check for the headers too
find_package(LibLZMA)
check_include_file(lzma.h HAVE_LZMA_H)
if(LIBLZMA_FOUND AND HAVE_LZMA_H)
  message(STATUS ""Using shared lzma"")
else()
  check_vendoring_approved(lzma)
  if(LIBLZMA_FOUND AND NOT HAVE_LZMA_H)
    message(STATUS ""Shared lzma found but lacks headers, falling back to the static library"")
  else()
    message(STATUS ""Shared lzma not found, falling back to the static library"")
  endif()
  add_subdirectory(Externals/liblzma)
endif()

find_package(zstd)
if(ZSTD_FOUND)
  message(STATUS ""Using shared zstd"")
else()
  check_vendoring_approved(zstd)
  message(STATUS ""Shared zstd not found, falling back to the static library"")
  add_subdirectory(Externals/zstd)
endif()

find_package(ZLIB)
if(ZLIB_FOUND)
  message(STATUS ""Using shared zlib"")
else()
  check_vendoring_approved(zlib)
  message(STATUS ""Shared zlib not found, falling back to the static library"")
  add_subdirectory(Externals/zlib)
endif()

pkg_check_modules(MINIZIP minizip>=2.0.0)
if(MINIZIP_FOUND)
  message(STATUS ""Using shared minizip"")
else()
  check_vendoring_approved(minizip)
  message(STATUS ""Shared minizip not found, falling back to the static library"")
  add_subdirectory(Externals/minizip)
  include_directories(External/minizip)
endif()

if(NOT APPLE)
  check_lib(LZO ""(no .pc for lzo2)"" lzo2 lzo/lzo1x.h QUIET)
endif()
if(LZO_FOUND)
  message(STATUS ""Using shared lzo"")
else()
  check_vendoring_approved(lzo)
  message(STATUS ""Using static lzo from Externals"")
  add_subdirectory(Externals/LZO)
  set(LZO lzo2)
endif()

if(NOT APPLE)
  check_lib(PNG libpng png png.h QUIET)
endif()
if (PNG_FOUND)
  message(STATUS ""Using shared libpng"")
else()
  check_vendoring_approved(libpng)
  message(STATUS ""Using static libpng from Externals"")
  add_subdirectory(Externals/libpng)
  set(PNG png)
endif()

# Using static FreeSurround from Externals
# There is no system FreeSurround library.
message(STATUS ""Using static FreeSurround from Externals"")
add_subdirectory(Externals/FreeSurround)

if (APPLE OR WIN32)
  message(STATUS ""Using ed25519 from Externals"")
  add_subdirectory(Externals/ed25519)
  include_directories(Externals/ed25519)
endif()

# Using static soundtouch from Externals
# Unable to use system soundtouch library: We require shorts, not floats.
add_subdirectory(Externals/soundtouch)
include_directories(Externals/soundtouch)

find_package(Cubeb)
if(CUBEB_FOUND)
  message(STATUS ""Using the system cubeb"")
else()
  check_vendoring_approved(cubeb)
  message(STATUS ""Using static cubeb from Externals"")
  add_subdirectory(Externals/cubeb EXCLUDE_FROM_ALL)
endif()

if(NOT ANDROID)
  add_definitions(-D__LIBUSB__)
  if(NOT APPLE)
    find_package(LibUSB)
  endif()
  if(LIBUSB_FOUND AND NOT APPLE)
    message(STATUS ""Using shared LibUSB"")
    include_directories(${LIBUSB_INCLUDE_DIR})
  else()
    check_vendoring_approved(libusb)
    message(STATUS ""Using static LibUSB from Externals"")
    add_subdirectory(Externals/libusb)
    set(LIBUSB_LIBRARIES usb)
  endif()
  set(LIBUSB_FOUND true)
endif()

set(SFML_REQD_VERSION 2.1)
if(NOT APPLE)
  find_package(SFML ${SFML_REQD_VERSION} COMPONENTS network system)
endif()
if(SFML_FOUND)
  message(STATUS ""Using shared SFML"")
else()
  check_vendoring_approved(sfml)
  message(STATUS ""Using static SFML ${SFML_REQD_VERSION} from Externals"")
  add_definitions(-DSFML_STATIC)
  add_subdirectory(Externals/SFML)
  include_directories(BEFORE Externals/SFML/include)
endif()

if(USE_UPNP)
  if(NOT APPLE)
    find_package(Miniupnpc)
  endif()
  if(MINIUPNPC_FOUND AND MINIUPNPC_API_VERSION GREATER 8)
    message(STATUS ""Using shared miniupnpc"")
  else()
    check_vendoring_approved(miniupnpc)
    message(STATUS ""Using static miniupnpc from Externals"")
    add_subdirectory(Externals/miniupnpc)
  endif()
  add_definitions(-DUSE_UPNP)
endif()

if(NOT APPLE)
  find_package(MbedTLS)
endif()
if(MBEDTLS_FOUND)
  message(STATUS ""Using shared mbed TLS"")
  include_directories(${MBEDTLS_INCLUDE_DIRS})
else()
  check_vendoring_approved(mbedtls)
  message(STATUS ""Using static mbed TLS from Externals"")
  set(MBEDTLS_LIBRARIES mbedtls mbedcrypto mbedx509)
  add_subdirectory(Externals/mbedtls/ EXCLUDE_FROM_ALL)
  include_directories(Externals/mbedtls/include)
endif()

find_package(CURL)
if(CURL_FOUND)
  message(STATUS ""Using shared libcurl"")
  include_directories(${CURL_INCLUDE_DIRS})
else()
  check_vendoring_approved(curl)
  message(STATUS ""Using static libcurl from Externals"")
  add_subdirectory(Externals/curl)
  set(CURL_LIBRARIES curl)
  include_directories(BEFORE Externals/curl/include)
endif()

if (NOT ANDROID)
  find_library(ICONV_LIBRARIES NAMES iconv libiconv libiconv-2 c)
  find_path(ICONV_INCLUDE_DIR NAMES iconv.h)
endif()

if (NOT ANDROID AND ICONV_LIBRARIES AND ICONV_INCLUDE_DIR)
  mark_as_advanced(ICONV_INCLUDE_DIR ICONV_LIBRARIES)
else()
  check_vendoring_approved(iconv)
  message(STATUS ""Using static iconv from Externals"")
  include_directories(Externals/libiconv-1.14/include)
  add_subdirectory(Externals/libiconv-1.14)
  set(ICONV_LIBRARIES iconv)
endif()

if(NOT ANDROID)
  find_package(HIDAPI)
  if(NOT HIDAPI_FOUND)
    check_vendoring_approved(hidapi)
    message(STATUS ""Using static HIDAPI from Externals"")
    add_subdirectory(Externals/hidapi EXCLUDE_FROM_ALL)
  endif()
endif()

if(USE_DISCORD_PRESENCE)
  message(STATUS ""Using static DiscordRPC from Externals"")
  add_subdirectory(Externals/discord-rpc)
  include_directories(Externals/discord-rpc/include)
endif()

find_package(Libsystemd)
if(SYSTEMD_FOUND)
  message(STATUS ""libsystemd found, enabling traversal server watchdog support"")
  add_definitions(-DHAVE_LIBSYSTEMD)
else()
  message(STATUS ""libsystemd not found, disabling traversal server watchdog support"")
endif()

if (WIN32)
  include_directories(Externals/OpenAL/include)
endif()

include_directories(Externals/picojson)

########################################
# Pre-build events: Define configuration variables and write SCM info header
#
if(DOLPHIN_WC_BRANCH STREQUAL ""master"" OR DOLPHIN_WC_BRANCH STREQUAL ""stable"")
  set(DOLPHIN_WC_IS_STABLE ""1"")
else()
  set(DOLPHIN_WC_IS_STABLE ""0"")
endif()

configure_file(
  ""${PROJECT_SOURCE_DIR}/Source/Core/Common/scmrev.h.in""
  ""${PROJECT_BINARY_DIR}/Source/Core/Common/scmrev.h""
)
include_directories(""${PROJECT_BINARY_DIR}/Source/Core"")

########################################
# Unit testing.
#
if(ENABLE_TESTS)
  message(STATUS ""Using static gtest from Externals"")
  add_subdirectory(Externals/gtest EXCLUDE_FROM_ALL)
else()
  message(STATUS ""Unit tests are disabled"")
endif()

########################################
# Process Dolphin source now that all setup is complete
#
add_subdirectory(Source)

########################################
# Install shared data files
#
if(NOT CMAKE_SYSTEM_NAME MATCHES ""Darwin|Windows"")
  install(DIRECTORY Data/Sys/ DESTINATION ${datadir}/sys PATTERN)
endif()
if(NOT CMAKE_SYSTEM_NAME MATCHES ""Linux|FreeBSD|OpenBSD|Darwin"")
  install(FILES Data/license.txt DESTINATION ${datadir})
endif()
if(CMAKE_SYSTEM_NAME MATCHES ""Linux|FreeBSD|OpenBSD"")
  # Install the application icon and menu item
  install(FILES Data/dolphin-emu.svg
          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps)
  install(FILES Data/dolphin-emu.png
          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/256x256/apps)
  install(FILES Data/dolphin-emu.desktop
          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/applications)
  # Install manpages
  install(FILES Data/dolphin-emu.6
          DESTINATION ${mandir}/man6)
  install(FILES Data/dolphin-emu-nogui.6
          DESTINATION ${mandir}/man6)
endif()

# packaging information
set(CPACK_PACKAGE_NAME ""dolphin-emu"")
set(CPACK_PACKAGE_VENDOR ""Dolphin Team"")
set(CPACK_PACKAGE_VERSION_MAJOR ${DOLPHIN_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${DOLPHIN_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${DOLPHIN_VERSION_PATCH})
set(CPACK_PACKAGE_DESCRIPTION_FILE ${PROJECT_SOURCE_DIR}/Data/cpack_package_description.txt)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""A GameCube and Wii emulator"")

set(CPACK_RPM_PACKAGE_GROUP System/Emulators/Other)
set(CPACK_RPM_PACKAGE_LICENSE GPL-2.0)
# TODO: CPACK_RESOURCE_FILE_README
# TODO: CPACK_RESOURCE_FILE_WELCOME
# TODO: CPACK_PACKAGE_ICON
# TODO: CPACK_NSIS_*
# TODO: Use CPack components for DSPSpy, etc => cpack_add_component

set(CPACK_SET_DESTDIR ON)
set(CPACK_SOURCE_GENERATOR ""TGZ;TBZ2;ZIP"")
set(CPACK_SOURCE_IGNORE_FILES  ""\\\\.#;/#;.*~;\\\\.swp;/\\\\.git"")
list(APPEND CPACK_SOURCE_IGNORE_FILES ""${CMAKE_BINARY_DIR}"")

# CPack must be included after the CPACK_* variables are set in order for those
# variables to take effect.
Include(CPack)
",3.10,3.1
6657,mmatyas,openblok,False,False,False,False,False,1,C++,2020-01-08 17:37:23+00:00,2016-11-12 19:15:03+00:00,42,835,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(openblok C CXX)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
include(ProjectVersion)


# Build options

include(SetDefaultBuildType)

# Portable install
set(INSTALL_PORTABLE_DEFAULT OFF)
if(WIN32 OR CYGWIN)
    set(INSTALL_PORTABLE_DEFAULT ON)
endif()
option(INSTALL_PORTABLE ""The installation step should put the data directory next to the runtime"" ${INSTALL_PORTABLE_DEFAULT})

# Currently unit tests only work only in Debug
if(NOT ""${CMAKE_BUILD_TYPE}"" STREQUAL ""release"")
    option(BUILD_TESTS ""Build the unit tests"" ON)
    option(BUILD_TEST_COVERAGE ""Build the test coverage report"" OFF)
endif()

# Intallation locations
if(INSTALL_PORTABLE)
    set(EXEDIR ""."" CACHE STRING ""Install location of the runtime executable"")
    set(DATADIR ""./data"" CACHE STRING ""Install location of the data files"")
else()
    set(SHAREDIR ""${CMAKE_INSTALL_PREFIX}/share"" CACHE STRING ""Base directory of installed data files"")
    set(EXEDIR ""${CMAKE_INSTALL_PREFIX}/games"" CACHE STRING ""Install location of the runtime executable"")
    set(DATADIR ""${SHAREDIR}/openblok"" CACHE STRING ""Install location of the data files"")
    if(UNIX AND NOT APPLE AND NOT CYGWIN)
        option(INSTALL_DESKTOPICON ""Install desktop shortcut and icon"" ON)
        option(INSTALL_APPSTREAM ""Install AppStream metainfo"" ON)
        set(ICONDIR ""${SHAREDIR}/pixmaps"" CACHE STRING ""Install location of the icon file"")
        set(DESKTOPDIR ""${SHAREDIR}/applications"" CACHE STRING ""Install location of the desktop shortcut"")
        set(APPSTREAMDIR ""${SHAREDIR}/metainfo"" CACHE STRING ""Install location of the AppStream metainfo"")
    endif()
endif()


# Global compiler settings

# Build coverage report if requested
if(BUILD_TEST_COVERAGE)
    include(CodeCoverage)
    setup_target_for_coverage(openblok_coverage openblok_test coverage)
endif()


add_subdirectory(thirdparty)


# The main game source
include_directories(src)
add_subdirectory(src)
if(CMAKE_BUILD_TYPE STREQUAL ""debug"" AND BUILD_TESTS)
    add_subdirectory(tests)
endif()


# Install
install(DIRECTORY data/ DESTINATION ${DATADIR} PATTERN ""*.txt"" EXCLUDE)
if(INSTALL_DESKTOPICON)
    install(FILES etc/linux/openblok.desktop DESTINATION ${DESKTOPDIR})
    install(FILES data/icon.png DESTINATION ${ICONDIR} RENAME openblok.png)
endif()
if(INSTALL_APPSTREAM)
    install(FILES etc/linux/openblok.appdata.xml DESTINATION ${APPSTREAMDIR})
endif()


# Package
include(CPackConfig)
include(CPack)


# Display settings
set(MSG_BUILDTYPE ${CMAKE_BUILD_TYPE})
set(MSG_TESTS ""do not build"")
if(BUILD_TESTS)
    set(MSG_TESTS ""build, tests only"")
    if(BUILD_TEST_COVERAGE)
        set(MSG_TESTS ""build, with coverage"")
    endif()
endif()
set(MSG_INSTALL ""install to ${CMAKE_INSTALL_PREFIX}"")
if(INSTALL_PORTABLE)
    set(MSG_INSTALL ""portable, default ${MSG_INSTALL}"")
endif()
message(STATUS ""|"")
message(STATUS ""|  Build type:       ${MSG_BUILDTYPE}"")
message(STATUS ""|  Tests:            ${MSG_TESTS}"")
message(STATUS ""|  Install:          ${MSG_INSTALL}"")
message(STATUS ""|  - runtime dir:    ${EXEDIR}"")
message(STATUS ""|  - data dir:       ${DATADIR}"")
if(INSTALL_DESKTOPICON)
    message(STATUS ""|  - shortcut, icon: yes"")
endif()
if(INSTALL_APPSTREAM)
    message(STATUS ""|  - appstream:      yes"")
endif()
message(STATUS ""|"")
",3.1,3.1
6747,jorisv,RBDyn,False,False,False,False,False,16,C++,2020-05-12 11:08:05+00:00,2012-03-16 15:22:12+00:00,62,484,"#
# Copyright 2012-2019 CNRS-UM LIRMM, CNRS-AIST JRL
#

cmake_minimum_required(VERSION 3.1.3)
set(CMAKE_CXX_STANDARD 11)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(PROJECT_NAME RBDyn)
set(PROJECT_DESCRIPTION ""..."")
set(PROJECT_URL ""https://github.com/jrl-umi3218/RBDyn"")
set(PROJECT_DEBUG_POSTFIX ""_d"")
set(PROJECT_VERSION 1.2.1)
set(PROJECT_USE_CMAKE_EXPORT TRUE)

option(BUILD_RBDYN_PARSERS ""Build URDF and YAML parsers"" ON)

include(cmake/base.cmake)
include(cmake/cython/cython.cmake)
include(cmake/msvc-specific.cmake)

# Disable -Werror on Unix for now.
set(CXX_DISABLE_WERROR True)

project(RBDyn CXX)

option(BENCHMARKS ""Generate benchmarks."" OFF)

add_project_dependency(SpaceVecAlg REQUIRED)

# For MSVC, set local environment variable to enable finding the built dll
# of the main library when launching ctest with RUN_TESTS
if(MSVC)
  set(CMAKE_MSVCIDE_RUN_PATH ""\$(SolutionDir)/src/\$(Configuration)"")
endif()

add_subdirectory(src)

if(${BUILD_TESTING} OR ${BENCHMARKS})
  add_subdirectory(tests)
endif()

if(${PYTHON_BINDING})
  add_subdirectory(binding/python)
endif()
",3.1.3,3.1
6832,JPETTomography,j-pet-framework,False,False,False,False,False,19,C++,2020-05-06 17:40:06+00:00,2016-06-17 17:17:42+00:00,6,2707,"################################################################################
## J-PET Framework Library
##  Description:
##  Builds J-PET Framework using CMake build generator.
################################################################################

cmake_minimum_required(VERSION 3.1...3.14)

if(${CMAKE_VERSION} VERSION_LESS 3.14)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
    cmake_policy(VERSION 3.14)
endif()

## Set correct project version based on: https://semver.org/
# Given a version number MAJOR.MINOR.PATCH, increment the:
#
# MAJOR version when you make incompatible API changes,
# MINOR version when you add functionality in a backwards-compatible manner, and
# PATCH version when you make backwards-compatible bug fixes.
project(JPetFramework VERSION 8.0.0
                  LANGUAGES CXX)
set(PROJECT_DESCRIPTION ""JPetFramework module"")

message(STATUS """")
message(STATUS ""    == ${PROJECT_NAME} Project configuration =="")
message(STATUS """")

message(STATUS """")
message(STATUS ""Starting to configure libJPetFramework.."")
message(STATUS """")
set(default_build_type ""Release"")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to '${default_build_type}' as none was specified."")
  set(CMAKE_BUILD_TYPE ""${default_build_type}"" CACHE
      STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()

set(CMAKE_CXX_STANDARD 11) # maybe not best solution to set it globally? upgrate minimal cmake version to 3.8 or find another way to set it only for target with interface
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_PLATFORM_INDEPENDENT_CODE ON)

# Force out-of-source build
file(TO_CMAKE_PATH ""${PROJECT_BINARY_DIR}/CMakeLists.txt"" LOC_PATH)
if(EXISTS ""${LOC_PATH}"")
    message(FATAL_ERROR ""You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles."")
endif()

# Include cmake modules
set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH})
include(JPetFramework-Utilities)

# Helpful option enable build profiling to identify slowly compiling files
option(MEASURE_ALL ""When enabled all commands will be passed through time command"" OFF)
if(MEASURE_ALL)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""time"")
endif()

################################################################################
## Install format hook to git
## Automatically installs hook to .git/hooks/pre-commit to format code with clang-format
option(INSTALL_HOOK ""Install format hook to .git/hooks/pre-commit"" ON)
if(INSTALL_HOOK)
  message(STATUS ""Trying to install format hook.."")
  package_add_format_hook()
endif()

add_subdirectory(src)

#documentation
option(PACKAGE_DOC ""Build the documentation"" OFF)
if(PACKAGE_TESTS)
  add_subdirectory(doc)
endif()

#unit tests
option(PACKAGE_TESTS ""Build the tests"" ON)
if(PACKAGE_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Packaging support
set(CPACK_GENERATOR ""DEB"")
set(CPACK_PACKAGE_VENDOR ""JPetTomography"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Package contains JPetFramework module"")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""grey"")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_RESOURCE_FILE_README ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")

set(CPACK_SOURCE_GENERATOR ""TGZ;ZIP"")
set(CPACK_SOURCE_IGNORE_FILES
    /.git
    /*.dist*
    /.*build.*
    /\\\\.DS_Store
)

include(CPack)

################################################################################
# Wrap up of settings printed on build
message(STATUS """")
message(STATUS ""    == Final overview for ${PROJECT_NAME} =="")
message(STATUS ""Version:              ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"")
message(STATUS ""Install prefix:       ${CMAKE_INSTALL_PREFIX}"")
message(STATUS ""Compiler:             ${CMAKE_CXX_COMPILER}"")
message(STATUS ""CMAKE_BUILD_TYPE:     ${CMAKE_BUILD_TYPE}"")
message(STATUS ""  possible options: Debug Release RelWithDebInfo MinSizeRel"")
message(STATUS ""  set with ` cmake -DCMAKE_BUILD_TYPE=Debug .. `"")
message(STATUS """")
",3.1...3.14,3.1
6952,lenmus,lenmus,False,False,False,False,False,4,C++,2020-05-01 15:51:57+00:00,2016-02-04 10:36:40+00:00,42,988,"#---------------------------------------------------------------------------------------
#  This file is part of LenMus Phonascus program
#  Copyright (c) 2002-2020 LenMus project
#
#  This program is free software; you can redistribute it and/or modify it under the
#  terms of the GNU General Public License as published by the Free Software Foundation,
#  either version 3 of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#  PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with this
#  program. If not, see <http:#www.gnu.org/licenses/>.
#
#  For any comment, suggestion or feature request, please contact the manager of
#  the project at cecilios@users.sourceforge.net
#
#---------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
# This is a CMake configuration file for building makefiles and installfiles for
# the LenMus Phonascus program
#
# To use it you need CMake which can be downloaded from http://www.cmake.org/
#
# Usage
#   cmake [<options>] <source-tree>
#
# example:
#   cmake ../lenmus
#
# The default target (in Linux) is ""Unix Makefiles"". If you would like to generate
# a diferent makefile use option -G<desired-target>. For instance:
#   cmake -G ""Ninja"" ...
#
#
# Default configuration
# ~~~~~~~~~~~~~~~~~~~~~~~
# - Build type is 'Release'
#
# - Unix: only main package containing the binaries will be generated.
#   Windows: a boundle installer containing all will be generated.
#   See ""Packages to build (Only for Unix)"" section.
#
# - Unix: The FluidR3_GM soundfont *IS NOT* included in the package.
#   Windows: It *IS INCLUDED*.
#   See ""SoundFont for the internal synthesizer"" section.
#
# - The Barvura.otf music font *IS INCLUDED* in the package.
#   See ""Bravura music font required to render scores"" section.
#
#
# Installation folders
# ~~~~~~~~~~~~~~~~~~~~~
# The default installation prefix is ""/usr/local"" for Linux and
# ""C:/Program Files (x86)"" or ""C:/Program Files"" for Windows. 
# You can change the install location by running cmake like this:
#   cmake -DCMAKE_INSTALL_PREFIX=/new/install/prefix ...
#
# The default folder (in Linux) for installing man pages is
#   /usr/share/man
# You can specify other location by using option MAN_INSTALL_DIR:
#   cmake -DMAN_INSTALL_DIR=/new/install/location/for/manpages ...
#
#
# Packages to build (Only for Unix)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# In Linux, the installation is divided into several packages:
# - lenmus: (main package) binaries and related files
# - lenmus-common: common support files not bound to any particular
#       release, architecture or language, such as icons, samples and templates.
# - lenmus-i18n: the message catalogues for lenmus and related translated files
# - lenmus-ebooks: the eBooks (all translations).
# In addition, a boundle package containing all can be generated.
#
# If nothing specified in build options, only the main package (the package
# containing the binaries) is built. To build any other packages you must 
# enable the option for the desired package:
#   cmake -DBUILD_PKG_<pkg>:BOOL=ON ...
# Replace <pkg> by the desired package name:
#   pkg = { MAIN | COMMON | I18N | EBOOKS | BOUNDLE }
# For instance, to build lenmus-i18n and lenmus-ebooks packages:
#   cmake -DBUILD_PKG_I18N:BOOL=ON -DBUILD_PKG_EBOOKS:BOOL=ON ...
# Including the option to build the boundle package will force to ignore
# any other options to build other packages.
#
#
# Unit Tests
# ~~~~~~~~~~~~
# By default unit tests are also build. You can reduce executable size by
# disabling this option:
#   cmake -DLENMUS_ENABLE_UNIT_TESTS:BOOL=OFF ...
#
#
# SoundFont for the internal synthesizer
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The internal synthesizer needs the FluidR3_GM.sf2 soundfont. Therefore, it is
# a dependency to have it installed in the system. In Linux this
# is provided for specific packages such as the ""fluid-soundfont-gm"" package in
# Debian and derivatives.
#
# If you would like that this cmake script will download the FluidR3_GM.sf2
# sound font in case it is not found in the system, you can use the option:
#   cmake -DLENMUS_DOWNLOAD_SOUNDFONT:BOOL=ON ...
#
# By default, the FluidR3 soundfont must not be included in Linux packages and
# the required soundfont package must be set as an install dependency. But it is
# necessary to install it in Windows. Therefore, the default behaviour is
# to include it in Windows installer but not in Linux packages.
# You can control this behaviour with the option:
#   cmake -DLENMUS_INSTALL_SOUNDFONT:BOOL={OFF | ON} ...
#
#
# Bravura music font required to render scores
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# By default, this font must not be included in Linux packages and the required
# font package must be set as an install dependency.
# As it is necessary to install it in Windows, and as in some Linux distros
# there is no package to install this font, this cmake scripts includes this
# font in the installer. To prevent this, you can use the option:
#   cmake -DLENMUS_INSTALL_BRAVURA_FONT:BOOL=OFF ...
#
# When it is requested that Bravura font be included in the package, this
# cmake script will download the Bravura.otf font in case it is not found in
# the system. You can use the option:
#   cmake -DLENMUS_DOWNLOAD_BRAVURA_FONT:BOOL=OFF ...
# to force not to download it if not found in the system. But if the font is
# not found, it will not be installed in any case.
#
#
#
#
#-------------------------------------------------------------------------------------
# Modifying this script
# ==========================
#
# How to add a new language
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# To add a new translation:
#   Search for ADD_LANG and modify CMakeList.txt in these points
#   Check that the added language is supported by NSIS in NSIS/Contrib/Language files/
#
#-------------------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
message(STATUS ""Using cmake version ${CMAKE_VERSION}"")

# project name
project(lenmus)
set( LENMUS_APP_NAME     ""Lenmus Phonascus"" )
set( LENMUS_VENDOR_NAME  ""LenMus"" )
set( LENMUS_VENDOR_SITE  ""http://www.lenmus.org"" )

# Define possible builds
set(CMAKE_CONFIGURATION_TYPES Debug Release)


# display settings
message(""Initial settings:"")
message(""     Using CMake version ${CMAKE_VERSION}"")
message(""     CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}"")
message(""     CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}"")
message(""     CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}"")

# main directories 
set( LENMUS_ROOT_DIR  ${CMAKE_CURRENT_SOURCE_DIR} )
set( SRC_DIR  ${LENMUS_ROOT_DIR}/src )
set( RESOURCES_DIR  ${LENMUS_ROOT_DIR}/res )
set( PACKAGES_DIR ${LENMUS_ROOT_DIR}/packages )
set( OUTDIR ${CMAKE_CURRENT_BINARY_DIR}/bin )
set( EXECUTABLE_OUTPUT_PATH ${OUTDIR})
set( LOMSE_ROOT_DIR ${LENMUS_ROOT_DIR}/lomse/trunk )
set( LOMSE_SRC_DIR ${LOMSE_ROOT_DIR}/src )
set( LOMSE_PKG_DIR ${LOMSE_ROOT_DIR}/packages )

# check that compiler supports namespace sdt
include(TestForSTDNamespace)
if(CMAKE_NO_STD_NAMESPACE)
  message(FATAL_ERROR ""The compiler doesn't support namespace std."")
endif()

# force to use c++11
set(CMAKE_CXX_STANDARD 11)				#require c+11 or greater
set(CMAKE_CXX_STANDARD_REQUIRED ON) 	#prevent fallback to any previous standard

#check that the compiler supports c++11 and std::regex
if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
    # require at least gcc 4.9
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
        message(FATAL_ERROR ""GCC version must be at least 4.9!"")
    endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
    # require at least clang 3.4
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.4)
        message(FATAL_ERROR ""Clang version must be at least 3.4!"")
    endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"")
    # require at least clang 3.4
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 15)
        message(FATAL_ERROR ""MSVC version must be at least 15!"")
    endif()
else()
    message(WARNING ""** Warning **: You are using an untested compiler! (${CMAKE_CXX_COMPILER_ID}) LenMus has only been tested with GCC, Clang and MSVC"")
endif()


# directories to search for CMake modules
set( CMAKE_MODULE_PATH    ""${LENMUS_ROOT_DIR}/cmake-modules"" )

# some options for building
OPTION(LENMUS_USE_LOMSE_SOURCES
    ""Build LenMus using Lomse sources instead of using the library""
    ON)
OPTION(LENMUS_ENABLE_UNIT_TESTS
	""Include also unit tests in LenMus executable""
	ON)
OPTION(LENMUS_DOWNLOAD_SOUNDFONT
    ""Download FluidR3 soundfont if not present in source tree""
	OFF)
OPTION(LENMUS_DOWNLOAD_BRAVURA_FONT
    ""Download Bravura.otf font if not present in source tree""
	ON)
OPTION(LENMUS_INSTALL_BRAVURA_FONT
    ""Include Bravura music font in the package in the main and boundle packages""
	ON)
if(WIN32)
    OPTION(LENMUS_INSTALL_SOUNDFONT
        ""Include FluidR3 soundfont in the package in the main and boundle packages""
	    ON)
else()
    OPTION(LENMUS_INSTALL_SOUNDFONT
        ""Include FluidR3 soundfont in the package in the main and boundle packages""
	    OFF)
endif()
OPTION(BUILD_PKG_MAIN
    ""Build package 'lenmus-main': Binaries and related files""
    ""OFF"")
OPTION(BUILD_PKG_COMMON
    ""Build package 'lenmus-common': Common support files, such as icons""
    ""OFF"")
OPTION(BUILD_PKG_I18N
    ""Build package 'lenmus-i18n': Message catalogues and translated files (but not eBooks)""
    ""OFF"")
OPTION(BUILD_PKG_EBOOKS
    ""Build package 'lenmus-ebooks': eBooks (all translations)""
    ""OFF"")
OPTION(BUILD_PKG_BOUNDLE
    ""Build package 'lenmus-ebooks': eBooks (all translations)""
    ""OFF"")

set(MAN_INSTALL_DIR ""/usr/share/man"" 
    CACHE STRING ""Directory for installing man pages"")


# Set a default build type if none was specified
# https://stackoverflow.com/questions/24460486/cmake-build-type-is-not-being-used-in-cmakelists-txt
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Release' as none was specified."")
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release"")
endif()


#------------------------------------------------------
# macro STRING_UNQUOTE(var str)
#   Remove quote marks or double quote marks around a string.
#   If the string is not quoted, then content of str is copied to var
#   * Parameters:
#     + var: A variable that stores the result.
#     + str: A string.
MACRO(STRING_UNQUOTE var str)
	set(_ret ""${str}"")
	STRING(LENGTH ""${str}"" _strLen)

	# if _strLen > 1
	#   if lCh and rCh are both ""'""
	#      Remove _lCh and _rCh
	#   elseif lCh and rCh are both ""\""""
	#      Remove _lCh and _rCh
	# Otherwise don't touch
	IF(_strLen GREATER 1)
	    STRING(SUBSTRING ""${str}"" 0 1 _lCh)
	    MATH(EXPR _strLen_1 ${_strLen}-1)
	    MATH(EXPR _strLen_2 ${_strLen_1}-1)
	    STRING(SUBSTRING ""${str}"" ${_strLen_1} 1 _rCh)
	    #MESSAGE(""_lCh=${_lCh} _rCh=${_rCh} _ret=|${_ret}|"")
	    IF(""${_lCh}"" STREQUAL ""'"" AND ""${_rCh}"" STREQUAL ""'"")
		    STRING(SUBSTRING ""${_ret}"" 1 ${_strLen_2} _ret)
        ELSEIF (""${_lCh}"" STREQUAL ""\"""" AND ""${_rCh}"" STREQUAL ""\"""")
		    STRING(SUBSTRING ""${_ret}"" 1 ${_strLen_2} _ret)
	    ENDIF()
	ENDIF()
	set(${var} ""${_ret}"")
ENDMACRO()


# create lenmus_version.h with version information from Git
include( ${LENMUS_ROOT_DIR}/version-info.cmake )

add_custom_target (lenmus-version ALL
  COMMAND ${CMAKE_COMMAND} -D LENMUS_ROOT_DIR=${CMAKE_SOURCE_DIR} -P ${CMAKE_SOURCE_DIR}/version-info.cmake
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  COMMENT ""Setting LenMus version information ..."")


# set up configuration variables for lenmus_config.h
#------------------------------------------------------


# platform
if(WIN32)
    set( LENMUS_PLATFORM_WIN32 ""1"")
    set( LENMUS_PLATFORM_UNIX ""0"")
    set( LENMUS_PLATFORM_MAC ""0"")
elseif(UNIX)
    set( LENMUS_PLATFORM_WIN32 ""0"")
    set( LENMUS_PLATFORM_UNIX ""1"")
    set( LENMUS_PLATFORM_MAC ""0"")
endif()

# compiler
if(MSVC)
    set( LENMUS_COMPILER_MSVC ""1"")
    set( LENMUS_COMPILER_GCC ""0"")
elseif(CMAKE_COMPILER_IS_GNUCC)
    set( LENMUS_COMPILER_MSVC ""0"")
    set( LENMUS_COMPILER_GCC ""1"")
endif()

# build type
if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
    set( LENMUS_DEBUG_BUILD   1)
    set( LENMUS_RELEASE_INSTALL 0)
else ()
    set( LENMUS_DEBUG_BUILD   0)
    set( LENMUS_RELEASE_INSTALL 1)
endif ()

message(""LenMus configuration for building:"")
message(STATUS ""LENMUS_DEBUG_BUILD set to ${LENMUS_DEBUG_BUILD}"")

# path to scores for tests
set( LENMUS_TEST_SCORES_PATH     ""\""${LENMUS_ROOT_DIR}/scores/samples/test_set/\"""" )
set( LENMUS_SOURCE_ROOT          ""\""${LENMUS_ROOT_DIR}/\"""" )

# Audio driver and device to use
if(UNIX AND NOT APPLE)
    set(LENMUS_AUDIO_DRIVER ""alsa"")
    set(LENMUS_ALSA_DEVICE ""default"")
elseif(WIN32)
    set(LENMUS_AUDIO_DRIVER ""dsound"")
    set(LENMUS_DSOUND_DEVICE ""default"")
elseif(APPLE)
    set(LENMUS_AUDIO_DRIVER ""coreaudio"")
    set(LENMUS_COREAUDIO_DEVICE ""default"")
endif()
message(""LenMus audio driver: ${LENMUS_AUDIO_DRIVER}"")

# determine system arquitecture
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(SYSTEM_ARCHITECTURE ""x64"")
else()
    set(SYSTEM_ARCHITECTURE ""x86"")
endif()
message(STATUS ""SYSTEM_ARCHITECTURE = ${SYSTEM_ARCHITECTURE}"" )


# installation folders
# ------------------------------------------------------------------------------
set(LENMUS_USE_SOURCE_TREE 0)

#set install folder 
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT
    OR (${CMAKE_INSTALL_PREFIX} STREQUAL ""C:/Program Files/${CMAKE_PROJECT_NAME}"")
    OR (${CMAKE_INSTALL_PREFIX} STREQUAL ""C:/Program Files (x86)/${CMAKE_PROJECT_NAME}"")
  )
    message(STATUS ""    CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT = ${CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT}"")
    #Fix CMAKE_INSTALL_PREFIX for Windows.
    #Sometimes it points to 'Program Files (x86)' for x64 builds
    if(WIN32)
        message(STATUS ""    Win32. SYSTEM_ARCHITECTURE = ${SYSTEM_ARCHITECTURE}"")
        if(${SYSTEM_ARCHITECTURE} STREQUAL ""x64"")
            set(CMAKE_INSTALL_PREFIX ""C:/Program Files/${CMAKE_PROJECT_NAME}"")
        else()
            set(CMAKE_INSTALL_PREFIX ""C:/Program Files (x86)/${CMAKE_PROJECT_NAME}"")
        endif()
    endif()
endif()
message(STATUS ""CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}"" )
set(ROOT_INSTALL ${CMAKE_INSTALL_PREFIX} )
set(LENMUS_INSTALL_ROOT ""${ROOT_INSTALL}/"" )	#LENMUS_INSTALL_ROOT is needed for lenmus_config.h


#set shared folder
if( UNIX )
	set(SHARED_DIR ${ROOT_INSTALL}/share/${CMAKE_PROJECT_NAME}/${LENMUS_PACKAGE_VERSION} )
elseif( WIN32 )
    set(SHARED_DIR ${ROOT_INSTALL} )
endif()

message(STATUS ""SHARED_DIR = ${SHARED_DIR}"" )



# set up other variables
#--------------------------------------------------------

# add headers directories from source tree
include_directories(
    ${LENMUS_ROOT_DIR}/include
    ${LENMUS_ROOT_DIR}/packages/wxMidi/src
)


#determine packages to build
#------------------------------------------------------------------------
if( WIN32 )
    #only boundle package is possible
    set(BUILD_PKG_BOUNDLE 1)
elseif( UNIX )
    if((NOT BUILD_PKG_BOUNDLE)
        AND (NOT BUILD_PKG_MAIN)
        AND (NOT BUILD_PKG_COMMON)
        AND (NOT BUILD_PKG_I18N)
        AND (NOT BUILD_PKG_EBOOKS)
      )
        #nothing requested. Build main package
        set(BUILD_PKG_MAIN 1)
    endif()
endif()

message(""Packages to build:"")
message(STATUS ""BUILD_PKG_MAIN = ${BUILD_PKG_MAIN}"")
message(STATUS ""BUILD_PKG_COMMON = ${BUILD_PKG_COMMON}"")
message(STATUS ""BUILD_PKG_I18N = ${BUILD_PKG_I18N}"")
message(STATUS ""BUILD_PKG_EBOOKS = ${BUILD_PKG_EBOOKS}"")
message(STATUS ""BUILD_PKG_BOUNDLE = ${BUILD_PKG_BOUNDLE}"")

if(BUILD_PKG_BOUNDLE OR BUILD_PKG_MAIN)
    set(BUILD_PROGRAM 1)
endif()



if (BUILD_PROGRAM)

##########################################################################
#
# Dependencies
# Check for needed libraries and set all related includes, flags, etc. 
#
###############################################################################

message(""Checking for LenMus dependencies:"")

# Check for FluidR3_GM.sf2 sound font required by internal synthesizer
# package 'fluid-soundfont-gm'
set (INSTALL_SOUNDFONT ${LENMUS_INSTALL_SOUNDFONT})
find_path(FLUIDR3_PATH
          NAMES FluidR3_GM.sf2
          PATHS
              /usr/share/sounds/sf2     # Ubuntu and possibly all Debian derivatives
              /usr/share/soundfonts     # Red Hat
              ${LENMUS_ROOT_DIR}/res/sounds     #local builds
         )

if(""${FLUIDR3_PATH}"" STREQUAL ""FLUIDR3_PATH-NOTFOUND"")
    if (LENMUS_DOWNLOAD_SOUNDFONT)
        message(STATUS ""FluidR3_GM.sf2 soundfont not found. Downloading it ..."")
        file(DOWNLOAD 
            ""https://github.com/lenmus/lenmus/releases/download/Release_5.5.0/FluidR3_GM.sf2""
            ""${LENMUS_ROOT_DIR}/res/sounds/FluidR3_GM.sf2""
            SHOW_PROGRESS
            EXPECTED_HASH MD5=af289497caf8c76d97fdc67ec8409f05
            STATUS status
            LOG log
        )

        list(GET status 0 status_code)
        list(GET status 1 status_string)
        
        if(NOT status_code EQUAL 0)
            message(FATAL_ERROR ""Error downloading FluidR3%20GM.sf2. Status_code: ${status_code}
                status_string: ${status_string}
                log: ${log}
                "")
        endif()
        message(STATUS ""FluidR3_GM.sf2 soundfont downloaded."")
        set(LENMUS_SOUNDFONT_PATH ""${LENMUS_ROOT_DIR}/res/sounds/"")
        set (INSTALL_SOUNDFONT ON)

    else(LENMUS_DOWNLOAD_SOUNDFONT)
        message(FATAL_ERROR ""FluidR3_GM.sf2 soundfont not found. Aborting..."")
    endif(LENMUS_DOWNLOAD_SOUNDFONT)

else()
    set(LENMUS_SOUNDFONT_PATH ${FLUIDR3_PATH})
    message(STATUS ""FluidR3_GM.sf2 found in ${FLUIDR3_PATH}"")
endif()


# Check for Bravura music font required to render scores
set (INSTALL_BRAVURA_FONT ${LENMUS_INSTALL_BRAVURA_FONT})
find_path(BRAVURA_FONT_PATH
          NAMES Bravura.otf
          PATHS
              /usr/share/fonts/truetype/               # Red Hat & fonts-lenmus-bravura.deb
              ${LENMUS_ROOT_DIR}/res/z_fonts           # local builds
              ${LENMUS_ROOT_DIR}/res/fonts             # local builds
              ${LENMUS_ROOT_DIR}/res/bravura/src       # builds for PPA at Launchpad.net
         )
if(""${BRAVURA_FONT_PATH}"" STREQUAL ""BRAVURA_FONT_PATH-NOTFOUND"")
    if (LENMUS_DOWNLOAD_BRAVURA_FONT)
        message(STATUS ""Bravura font not found. Downloading it ..."")
        file(DOWNLOAD 
            ""https://github.com/steinbergmedia/bravura/raw/master/redist/otf/Bravura.otf""
            ""${LENMUS_ROOT_DIR}/res/fonts/Bravura.otf""
            SHOW_PROGRESS
#            EXPECTED_HASH MD5=863c90e6f99c264a1747856130ebdc3c
            STATUS status
            LOG log
        )

        list(GET status 0 status_code)
        list(GET status 1 status_string)
        
        if(NOT status_code EQUAL 0)
            message(FATAL_ERROR ""Error downloading Bravura font. Status_code: ${status_code}
                status_string: ${status_string}
                log: ${log}
                "")
        endif()
        message(STATUS ""Bravura font downloaded."")
        set(BRAVURA_FONT_PATH ""${LENMUS_ROOT_DIR}/res/fonts/"")
        set(INSTALL_BRAVURA_FONT ON)

    else(LENMUS_DOWNLOAD_BRAVURA_FONT)
        if (WIN32)
            message(FATAL_ERROR ""Bravura font not found. Aborting..."")
        else()
            message(STATUS ""Bravura font not found. It will not be installed."")
        endif()
        set(INSTALL_BRAVURA_FONT OFF)
    endif(LENMUS_DOWNLOAD_BRAVURA_FONT)

else()
    message(STATUS ""Bravura font found in ${BRAVURA_FONT_PATH}"")
endif()

# Check for UnitTest++. Required when unit tests are enabled (default)
if (LENMUS_ENABLE_UNIT_TESTS)
    find_package(UnitTest++)
    if(UNITTEST++_FOUND)
        include_directories(${UNITTEST++_INCLUDE_DIR})
        link_libraries( ${UNITTEST++_LIBRARY} )
        message(STATUS ""UnitTest++ found: libraries= ${UNITTEST++_LIBRARY}"" )
        message(STATUS ""UnitTest++ found: include= ${UNITTEST++_INCLUDE_DIR}"" )
    else(UNITTEST++_FOUND)
        message(STATUS ""UnitTest++ not found. Unit tests disabled."")
        message(STATUS ""UnitTest++_DIR = $ENV{UnitTest++_DIR}"")
		set(LENMUS_ENABLE_UNIT_TESTS OFF)
    endif()
endif(LENMUS_ENABLE_UNIT_TESTS)


#change value to ""1"" or ""0"", as required in lenmus_config.h
if (LENMUS_ENABLE_UNIT_TESTS)
	set(LENMUS_ENABLE_UNIT_TESTS ""1"")
else()
	set(LENMUS_ENABLE_UNIT_TESTS ""0"")
endif()	
if(WIN32)
    #TODO: I have problems to link with UnitTest++, so disable it for now
	set(LENMUS_ENABLE_UNIT_TESTS ""0"")
endif()
message(STATUS ""LENMUS_ENABLE_UNIT_TESTS = "" ${LENMUS_ENABLE_UNIT_TESTS} )


# Check for wxWidgets
if(WIN32)
    #See: https://stackoverflow.com/questions/41574177/cmake-findwxwidgets-fails-only-on-first-invocation-of-configure-command
    set(WX_ROOT_DIR ""$ENV{wxWidgets_DIR}"")
	if (${CMAKE_BUILD_TYPE} STREQUAL ""Debug"")
		set(wxWidgets_CONFIGURATION mswud)
	else()
		set(wxWidgets_CONFIGURATION mswu)
	endif()
    set(wxWidgets_ROOT_DIR ""$ENV{wxWidgets_DIR}"")
    set(wxWidgets_LIB_DIR ""$ENV{wxWidgets_DIR}/lib/vc_x64_lib"")
endif(WIN32)
find_package(wxWidgets 3.0 COMPONENTS base core adv aui xml xrc net qa html propgrid stc REQUIRED )
#find_package(wxWidgets 3.0 HINTS ""$ENV{wxWidgets_DIR}"" COMPONENTS base core adv aui xml xrc net qa html propgrid stc REQUIRED )
IF(wxWidgets_FOUND)
    INCLUDE(${wxWidgets_USE_FILE})
    include_directories( ${wxWidgets_INCLUDE_DIRS} )
    link_libraries( ${wxWidgets_LIBRARIES} )
    message(STATUS ""wxWidgets include dirs: "" ${wxWidgets_INCLUDE_DIRS})
    message(STATUS ""wxWidgets lib dir: "" ${wxWidgets_LIB_DIR})
    message(STATUS ""wxWidgets libraries: "" ${wxWidgets_LIBRARIES})
ELSE(wxWidgets_FOUND)
    message(SEND_ERROR ""wxWidgets not found"")
    message(STATUS ""wxWidgets_DIR = $ENV{wxWidgets_DIR}"")
ENDIF(wxWidgets_FOUND)

# Check for Sqlite3
find_package(SQLite3 REQUIRED)
IF(SQLite3_FOUND)
    include_directories( ${SQLite3_INCLUDE_DIR} )
    link_libraries( ${SQLite3_LIBRARIES} )
    message(STATUS ""SQLite3 found: libraries= ${SQLite3_LIBRARIES}"")
    message(STATUS ""SQLite3 found: include= ${SQLite3_INCLUDE_DIR}"")
ELSE(SQLite3_FOUND)
    message(SEND_ERROR ""SQLite3 not found"")
    message(STATUS ""SQLite3_DIR = $ENV{SQLite3_DIR}"")
ENDIF(SQLite3_FOUND)
include_directories(""packages/wxSQLite3/include"")

#Check for PortMidi
find_package(PortMidi REQUIRED)
IF(PortMidi_FOUND)
    include_directories( ${PortMidi_INCLUDE_DIRS} )
    link_libraries( ${PortMidi_LIBRARIES} )
    message(STATUS ""PortMidi found: include= ${PortMidi_INCLUDE_DIRS}"" )
    message(STATUS ""PortMidi found: libraries= ${PortMidi_LIBRARIES}"" )
ELSE(PortMidi_FOUND)
    message(SEND_ERROR ""PortMidi not found"")
    message(STATUS ""PortMidi_DIR = $ENV{PortMidi_DIR}"")
ENDIF(PortMidi_FOUND)

#Check for FluidSynth
#For me, in Windows, even using vcpkg, it's always been a nightmare to build. Bypass after trying for hours ... :-(
if(WIN32)
    set(FLUIDSYNTH_INCLUDE_DIR ""$ENV{FluidSynth_DIR}/include"")
    set(FLUIDSYNTH_LIBRARIES ""$ENV{FluidSynth_DIR}/lib/fluidsynth.lib"")
endif(WIN32)
find_package(FluidSynth REQUIRED)
IF(FLUIDSYNTH_FOUND)
    include_directories( ${FLUIDSYNTH_INCLUDE_DIR} )
    link_libraries( ${FLUIDSYNTH_LIBRARIES} )
    message(STATUS ""FluidSynth found: include= ${FLUIDSYNTH_INCLUDE_DIR}"" )
    message(STATUS ""FluidSynth found: libraries= ${FLUIDSYNTH_LIBRARIES}"" )
ELSE(FLUIDSYNTH_FOUND)
    message(SEND_ERROR ""FluidSynth not found"")
    message(STATUS ""FLUIDSYNTH_DIR = $ENV{FLUIDSYNTH_DIR}"")
ENDIF(FLUIDSYNTH_FOUND)

# Check for Lomse (only if not building from Lomse sources)
if (LENMUS_USE_LOMSE_SOURCES)
    include_directories(
        ${LOMSE_ROOT_DIR}/include
        ${LOMSE_ROOT_DIR}/src/agg/include
        ${LOMSE_ROOT_DIR}/src/agg/font_freetype
        ${LOMSE_ROOT_DIR}/packages/utfcpp
        ${LOMSE_ROOT_DIR}/packages/minizip
        ${LOMSE_ROOT_DIR}/packages
    )
    message(STATUS ""LOMSE: Not using Lomse library, but building with its sources"")
else()
    find_package(Lomse 0.25)                    
    if( LOMSE_FOUND )
        include_directories( ${LOMSE_INCLUDE_DIRS} )
        link_libraries( ${LOMSE_LIBRARIES} )
        message(STATUS ""Lomse found: libraries= ${LOMSE_LIBRARIES}"" )
        message(STATUS ""Lomse found: include= ${LOMSE_INCLUDE_DIRS}"" )
        message(STATUS ""Lomse found: version= ${LOMSE_LIB_VERSION}"" )
    else()
        message(SEND_ERROR ""Lomse package not found."")
    endif()
endif()

# Check for FreeType: header files required by some lomse headers
find_package(Freetype REQUIRED)              
if( FREETYPE_FOUND )
    include_directories( ${FREETYPE_INCLUDE_DIRS} )
    message(STATUS ""Freetype found: libraries= ${FREETYPE_LIBRARIES}"" )
    message(STATUS ""Freetype found: include= ${FREETYPE_INCLUDE_DIRS}"" )
else()
    message(SEND_ERROR ""FreeType package not found."")
    message(STATUS ""FreeType_DIR = $ENV{FreeType_DIR}"")
endif()

# Check for zlib: required by Lomse
find_package(ZLIB REQUIRED)
if( ZLIB_FOUND )
    include_directories( ${ZLIB_INCLUDE_DIR} )
    link_libraries( ${ZLIB_LIBRARY} )
    message(STATUS ""zlib found: libraries= ${ZLIB_LIBRARY}"" )
    message(STATUS ""zlib found: include= ${ZLIB_INCLUDE_DIRS}"" )
else()
    message(SEND_ERROR ""zlib package not found."")
endif()

# Check for libpng: required by Lomse. As png requires zlib, png should be looked for after zlib
if(WIN32)
    #Default CMake module does not work for me. So for now use this bad hack.
    include(FindPNG_WIN)
else()
    find_package(PNG REQUIRED)
endif(WIN32)
if( PNG_FOUND )
    include_directories( ${PNG_INCLUDE_DIRS} )
    link_libraries( ${PNG_LIBRARIES} )
    message(STATUS ""libpng found: libraries= ${PNG_LIBRARIES}"" )
    message(STATUS ""libpng found: include= ${PNG_INCLUDE_DIRS}"" )
    message(STATUS ""libpng found: definitions= ${PNG_DEFINITIONS}"" )
    message(STATUS ""libpng found: version string= ${PNG_VERSION_STRING}"" )
    string(REPLACE ""."" "";"" PNG_VERSION_LIST ${PNG_VERSION_STRING})
    list(GET PNG_VERSION_LIST 0 PNG_VERSION_MAJOR)
    list(GET PNG_VERSION_LIST 1 PNG_VERSION_MINOR)
    if(${PNG_VERSION_MINOR} STREQUAL ""6"")
        set(PNG_DEPENDENCY ""libpng16-16"")
    elseif(${PNG_VERSION_MINOR} STREQUAL ""2"")
        set(PNG_DEPENDENCY ""libpng12-0"")
    else()
        set(PNG_DEPENDENCY ""libpng"")
    endif()
    message(STATUS ""libpng found: major=${PNG_VERSION_MAJOR}, minor=${PNG_VERSION_MINOR}"" )
    message(STATUS ""libpng found: dependency to add=${PNG_DEPENDENCY}"" )
else()
    message(SEND_ERROR ""libpng package not found."")
endif(PNG_FOUND)


# Check for fontconfig: required by Lomse
if (UNIX)
    find_path(FONTCONFIG_INCLUDE_DIR fontconfig/fontconfig.h)
    find_library(FONTCONFIG_LIBRARIES NAMES fontconfig libfontconfig)
    if ((""${FONTCONFIG_INCLUDE_DIR}"" STREQUAL ""FONTCONFIG_INCLUDE_DIR-NOTFOUND"")
        OR (""${FONTCONFIG_LIBRARIES}"" STREQUAL ""FONTCONFIG_LIBRARIES-NOTFOUND"")
       )
        set(FONTCONFIG_FOUND FALSE)
    else()
        set(FONTCONFIG_FOUND TRUE)
    endif()

    if(FONTCONFIG_FOUND )
        include_directories( ${FONTCONFIG_INCLUDE_DIR}/fontconfig )
        link_libraries( ${FONTCONFIG_LIBRARIES} )
        message(STATUS ""fontconfig found: libraries= ${FONTCONFIG_LIBRARIES}"" )
        message(STATUS ""fontconfig found: include= ${FONTCONFIG_INCLUDE_DIR}/fontconfig"" )
    else()
        message(STATUS ""fontconfig libraries= ${FONTCONFIG_LIBRARIES}"" )
        message(STATUS ""fontconfig include= ${FONTCONFIG_INCLUDE_DIR}"" )
        message(FATAL_ERROR ""fontconfig package not found."")
    endif()
endif()


#======= End of dependencies checking ========================================


#-----------------------------------------------------------------------------
# Decide installation folders, as some values need to be defined for configuring
# file lenmus_config.h before building.
#
# By default, the installation prefix is ""/usr/local""
# You can change the install location by running cmake like this:
#   cmake -DCMAKE_INSTALL_PREFIX=/new/install/prefix
#
# Remember:
#  LENMUS_ROOT_DIR:
#       path to source tree, to copy files from there: i.e. $HOME/projects/lenmus
#  ROOT_INSTALL:
#       path to install binaries: i.e.:
#       '/usr/local'
#       'C:\Program Files\lenmus'
#  SHARED_DIR:
#       path to install shared files i.e.:
#           '/usr/local/share/lenmus/5.3/'
#           'C:\Program Files\lenmus'
#-----------------------------------------------------------------------------

# set installation paths
if(WIN32)
    #For CPack using NSIS, the DESTINATION path must be relative because installation path
    #is always specified at the moment when user executes the installer. Nevertheless
    #current NSIS installer does not allow the user to select instalation folder and
    #it is always installed in ""C:/Program Files/lenmus""
    set(BIN_DIR bin)
    set(SAMPLES_DIR .)
    set(LOCALE_DIR .)
    set(LOCALE_LICENSES_DIR locale)
    set(RES_DIR res)
    set(TEMPLATES_DIR .)
    set(XRC_DIR .)
    set(DOCS_DIR .)
else()
    set(BIN_DIR ""${ROOT_INSTALL}/bin"")
    set(SAMPLES_DIR $ENV{HOME}/${CMAKE_PROJECT_NAME} )
    set(LOCALE_DIR ${SHARED_DIR})
    set(LOCALE_LICENSES_DIR ${SHARED_DIR})
    set(RES_DIR ""${SHARED_DIR}/res"")
    set(TEMPLATES_DIR ${SHARED_DIR})
    set(XRC_DIR ${SHARED_DIR})
    set(DOCS_DIR ${SHARED_DIR})
endif()

message(""Installation paths:"")
message(STATUS ""ROOT_INSTALL = ${ROOT_INSTALL}"")
message(STATUS ""BIN_DIR = ${BIN_DIR}"")
message(STATUS ""SHARED_DIR = ${SHARED_DIR}"")
message(STATUS ""SAMPLES_DIR = ${SAMPLES_DIR}"" )
message(STATUS ""LOCALE_DIR = ${LOCALE_DIR}"")
message(STATUS ""LOCALE_LICENSES_DIR = ${LOCALE_LICENSES_DIR}"")
message(STATUS ""RES_DIR = ${RES_DIR}"")
message(STATUS ""TEMPLATES_DIR = ${TEMPLATES_DIR}"")
message(STATUS ""XRC_DIR = ${XRC_DIR}"")
message(STATUS ""DOCS_DIR = ${DOCS_DIR}"")


# Variable LENMUS_SOUNDFONT_PATH is needed for lenmus_config.h file and is
# used at run time. Thus for building packages for distribution, this
# variable must point to a valid path in the target distro, that is to the 
# paths in which the distro installs FluidR3_GM.sf2 file. But if
# the package is going to include this file then the variable 
# LENMUS_SOUNDFONT_PATH must point to the place at which the soundfont
# will be installed.

#To build Windows installers force to install Bravura and Soundfont
if (WIN32)
    set(INSTALL_SOUNDFONT 1)
    set(INSTALL_BRAVURA_FONT 1)
endif()

if(INSTALL_SOUNDFONT)
    set(LENMUS_SOUNDFONT_PATH """")   #to force to make it relative to <SHARED_DIR>
    if (NOT (""${FLUIDR3_PATH}"" STREQUAL ""${LENMUS_ROOT_DIR}/res/sounds/""))
        file(COPY ${FLUIDR3_PATH}/FluidR3_GM.sf2
             DESTINATION ${LENMUS_ROOT_DIR}/res/sounds)
    endif()
endif()
message(STATUS ""LENMUS_SOUNDFONT_PATH=${LENMUS_SOUNDFONT_PATH}"")

if(INSTALL_BRAVURA_FONT AND
   NOT (""${BRAVURA_FONT_PATH}"" STREQUAL ""${LENMUS_ROOT_DIR}/res/fonts/""))
        message(STATUS ""BRAVURA_FONT_PATH=${BRAVURA_FONT_PATH}"")
        file(COPY ${BRAVURA_FONT_PATH}/Bravura.otf
             DESTINATION ${LENMUS_ROOT_DIR}/res/fonts)
endif()



#process template header lenmus_config.h file to replace CMake settings
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/lenmus_config.h.cmake""
    ""${CMAKE_CURRENT_BINARY_DIR}/lenmus_config.h""
)
message(""lenmus_config.h configuration:"" )
message(STATUS ""LENMUS_INSTALL_ROOT=${LENMUS_INSTALL_ROOT}"")
message(STATUS ""LENMUS_TEST_SCORES_PATH=${LENMUS_TEST_SCORES_PATH}"")
message(STATUS ""LENMUS_SOUNDFONT_PATH=${LENMUS_SOUNDFONT_PATH}"")


#include binary dir so that lenmus_config.h can be accesed during build
include_directories(""${CMAKE_CURRENT_BINARY_DIR}"")


if (LENMUS_USE_LOMSE_SOURCES)
    #define path were fonts will be found by lomse when running. The 
    #value defined here *is not used* because LenMus program will force
    #the lomse library to use lenmus fonts path, but I have to put something!
    set( FONTS_PATH   ""${SHARED_DIR}/res/fonts"" )

    # include Lomse build options and create the include file ""lomse_config.h""
    message(""Lomse configuration"")
    include( ${LOMSE_ROOT_DIR}/build-options.cmake )
    set_target_properties(build-version PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)
endif()


# create and include the man page
if (UNIX)
    include( ${LENMUS_ROOT_DIR}/manpage.cmake )
endif()


#define a header file to pass CMake settings to source code
configure_file(
    ""${LENMUS_ROOT_DIR}/lenmus_config.h.cmake""
    ""${CMAKE_CURRENT_BINARY_DIR}/lenmus_config.h""
)


#////////////////////////////////////////////////////////////////////////
# Target: LenMus program
#////////////////////////////////////////////////////////////////////////

set (LENMUS  lenmus)

# set name of lenmus executable
if( WIN32 )
    set( CMAKE_EXECUTABLE_SUFFIX "".exe"" )
elseif( UNIX )
    set( CMAKE_EXECUTABLE_SUFFIX """" )
endif()



# source files to compile

set(APP_FILES
    ${SRC_DIR}/app/lenmus_about_dialog.cpp
    ${SRC_DIR}/app/lenmus_app.cpp
    ${SRC_DIR}/app/lenmus_art_provider.cpp
    ${SRC_DIR}/app/lenmus_book_reader.cpp
    ${SRC_DIR}/app/lenmus_canvas.cpp
    ${SRC_DIR}/app/lenmus_command_event_handler.cpp
    ${SRC_DIR}/app/lenmus_command_window.cpp
    ${SRC_DIR}/app/lenmus_content_box.cpp
    ${SRC_DIR}/app/lenmus_content_box_ctrol.cpp
    ${SRC_DIR}/app/lenmus_document_canvas.cpp
    ${SRC_DIR}/app/lenmus_document_frame.cpp
    ${SRC_DIR}/app/lenmus_events.cpp
    ${SRC_DIR}/app/lenmus_help_system.cpp
    ${SRC_DIR}/app/lenmus_main_frame.cpp
    ${SRC_DIR}/app/lenmus_preferences.cpp
    ${SRC_DIR}/app/lenmus_score_wizard.cpp
    ${SRC_DIR}/app/lenmus_splash_frame.cpp
    ${SRC_DIR}/app/lenmus_status_bar.cpp
    ${SRC_DIR}/app/lenmus_string.cpp
    ${SRC_DIR}/app/lenmus_virtual_keyboard.cpp
    ${SRC_DIR}/app/lenmus_welcome_window.cpp
    ${SRC_DIR}/app/lenmus_zip_reader.cpp
)

set(AUXMUSIC_FILES
    ${SRC_DIR}/auxmusic/lenmus_cadence.cpp
    ${SRC_DIR}/auxmusic/lenmus_chord.cpp
    ${SRC_DIR}/auxmusic/lenmus_composer.cpp
    ${SRC_DIR}/auxmusic/lenmus_interval.cpp
    ${SRC_DIR}/auxmusic/lenmus_images_creator.cpp
    ${SRC_DIR}/auxmusic/lenmus_scale.cpp
    ${SRC_DIR}/auxmusic/lenmus_score_corrector.cpp
    ${SRC_DIR}/auxmusic/lenmus_utilities.cpp
)

set(DIALOGS_FILES
    ${SRC_DIR}/dialogs/lenmus_dlg_books.cpp
    ${SRC_DIR}/dialogs/lenmus_dlg_choose_lang.cpp
    ${SRC_DIR}/dialogs/lenmus_dlg_clefs.cpp
    ${SRC_DIR}/dialogs/lenmus_dlg_debug.cpp
    ${SRC_DIR}/dialogs/lenmus_dlg_metronome.cpp
    ${SRC_DIR}/dialogs/lenmus_text_editor.cpp
)

set(EXERCISES_FILES
    ${SRC_DIR}/exercises/auxctrols/lenmus_counters_ctrol.cpp
    ${SRC_DIR}/exercises/auxctrols/lenmus_problem_displayer.cpp

    ${SRC_DIR}/exercises/constrains/lenmus_cadences_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_chords_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_dictation_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_ear_intervals_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_figured_bass_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_harmony_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_key_sign_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_music_reading_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_notes_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_scales_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_scores_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_theo_intervals_constrains.cpp
    ${SRC_DIR}/exercises/constrains/lenmus_tonality_constrains.cpp

    ${SRC_DIR}/exercises/ctrols/lenmus_dyncontrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_dictation_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_ear_compare_intv_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_ear_intervals_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_exercise_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_figured_bass_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_generators.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_harmony_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_idfy_cadences_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_idfy_chords_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_idfy_notes_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_idfy_scales_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_idfy_tonality_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_theo_intervals_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_theo_key_sign_ctrol.cpp
    ${SRC_DIR}/exercises/ctrols/lenmus_theo_music_reading_ctrol.cpp

    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_cadences.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_ear_intervals.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_idfy_chords.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_idfy_notes.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_idfy_scales.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_idfy_tonality.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_score_reading.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_cfg_theo_intervals.cpp
    ${SRC_DIR}/exercises/dialogs/lenmus_dlg_exercise_mode.cpp

    ${SRC_DIR}/exercises/params/lenmus_exercise_params.cpp
)

set(GLOBALS_FILES
    ${SRC_DIR}/globals/lenmus_actions.cpp
    ${SRC_DIR}/globals/lenmus_colors.cpp
    ${SRC_DIR}/globals/lenmus_injectors.cpp
    ${SRC_DIR}/globals/lenmus_paths.cpp
)

set(OPTIONS_FILES
    ${SRC_DIR}/options/lenmus_colors_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_internet_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_lang_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_languages.cpp
    ${SRC_DIR}/options/lenmus_options_dlg.cpp
    ${SRC_DIR}/options/lenmus_other_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_other_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_playback_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_shortcuts_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_sound_opt_panel.cpp
    ${SRC_DIR}/options/lenmus_toolbar_opt_panel.cpp
)

set(PROPERTIES_FILES
    ${SRC_DIR}/properties/lenmus_dlg_properties.cpp
    ${SRC_DIR}/properties/lenmus_properties_barline.cpp
    ${SRC_DIR}/properties/lenmus_properties_general.cpp
)

set(SOUND_FILES
    ${SRC_DIR}/sound/lenmus_metronome.cpp
    ${SRC_DIR}/sound/lenmus_midi_server.cpp
    ${SRC_DIR}/sound/lenmus_wave_player.cpp
)

set(TOOLBOX_FILES
    ${SRC_DIR}/toolbox/lenmus_time_signature_properties.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_box.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_box_events.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_box_theme.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_group.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_barlines.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_clefs.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_notes.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_rhythmic_dictation.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_selector.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_symbols.cpp
    ${SRC_DIR}/toolbox/lenmus_tool_page_top_level.cpp
)

set(XML_PARSER_FILES
    ${SRC_DIR}/xml_parser/lenmus_xml_parser.cpp
)

if (${LENMUS_ENABLE_UNIT_TESTS})
    set(TEST_FILES
        ${SRC_DIR}/tests/lenmus_test_app.cpp
        ${SRC_DIR}/tests/lenmus_test_cadence.cpp
        ${SRC_DIR}/tests/lenmus_test_composer.cpp
        ${SRC_DIR}/tests/lenmus_test_mainframe.cpp
        ${SRC_DIR}/tests/lenmus_test_score_corrector.cpp
        ${SRC_DIR}/tests/lenmus_test_tokenizer.cpp
        ${SRC_DIR}/tests/lenmus_test_runner.cpp
    )
endif()

set(LENMUS_PACKAGESS_FILES
    ${PACKAGES_DIR}/wxMidi/src/wxMidi.cpp
    ${PACKAGES_DIR}/wxMidi/src/wxMidiDatabase.cpp
    ${PACKAGES_DIR}/wxSQLite3/src/wxsqlite3.cpp
)

set(UPDATER_FILES
    ${SRC_DIR}/updater/lenmus_updater.cpp
    ${SRC_DIR}/updater/lenmus_updater_dlg.cpp
)

set(WIDGETS_FILES
    ${SRC_DIR}/widgets/lenmus_msg_box.cpp
    ${SRC_DIR}/widgets/lenmus_button.cpp
    ${SRC_DIR}/widgets/lenmus_wizard.cpp
)

set(ALL_LENMUS_SOURCES 
    ${APP_FILES} ${AUXMUSIC_FILES} ${DIALOGS_FILES} ${EXERCISES_FILES}
    ${GLOBALS_FILES} ${OPTIONS_FILES} ${PROPERTIES_FILES}
    ${SOUND_FILES} ${TOOLBOX_FILES} ${XML_PARSER_FILES} ${TEST_FILES}
    ${LENMUS_PACKAGESS_FILES} ${UPDATER_FILES} ${WIDGETS_FILES}
)

# Add folders for Visual Studio and other IDEs supporting it
source_group( ""app""             FILES ${APP_FILES} )
source_group( ""auxmusic""        FILES ${AUXMUSIC_FILES} )
source_group( ""dialogs""         FILES ${DIALOGS_FILES} )
source_group( ""exercises""       FILES ${EXERCISES_FILES} )
source_group( ""globals""         FILES ${GLOBALS_FILES} )
source_group( ""options""         FILES ${OPTIONS_FILES} )
source_group( ""properties""      FILES ${PROPERTIES_FILES} )
source_group( ""sound""           FILES ${SOUND_FILES} )
source_group( ""xml_parser""      FILES ${XML_PARSER_FILES} )
source_group( ""packages""        FILES ${LENMUS_PACKAGESS_FILES} )
source_group( ""toolbox""         FILES ${TOOLBOX_FILES} )
source_group( ""updater""         FILES ${UPDATER_FILES} )
source_group( ""widgets""         FILES ${WIDGETS_FILES} )
if (${LENMUS_ENABLE_UNIT_TESTS})
    source_group( ""tests""           FILES ${TEST_FILES} )
endif()



#Add Lomse sources
if (LENMUS_USE_LOMSE_SOURCES)
    include( ${LOMSE_ROOT_DIR}/add-sources.cmake )
    set (LOMSE_GROUP_FOLDER ""lomse/"" )
    include( ${LOMSE_ROOT_DIR}/add-group-folders.cmake )
    set(ALL_SOURCES ${ALL_LENMUS_SOURCES} ${ALL_LOMSE_SOURCES} )
else()
    set(ALL_SOURCES ${ALL_LENMUS_SOURCES} )
endif()



# Define target
if(UNIX)
	add_executable( ${LENMUS} ${ALL_SOURCES} )
else()
	add_executable( ${LENMUS} WIN32 ${ALL_SOURCES} )
endif()
add_dependencies(${LENMUS} lenmus-version)


# Add resources
#if(WIN32)
    # Windows users expect to see an icon associated with your program.
    # So, include a RC file for windows with the icon
#    list(APPEND ALL_SOURCES ${RESOURCES_DIR}/other/lenmus.rc)
#    source_group(""resources"" FILES ${RESOURCES_DIR}/other/lenmus.rc )
#elseif(APPLE)
    # Add an icon for the apple .app file
    #list(APPEND ALL_SOURCES ${RESOURCES_DIR}/other/osx/carbon/wxmac.icns)
#endif()


# Compiler options
if (WIN32)
    # remove noisy warning 4996: function or variable may be unsafe (i.e. strcat)
    set_target_properties(${LENMUS} PROPERTIES COMPILE_FLAGS ""/wd4996"")
endif(WIN32)

# ""Print all warnings"", macros for GCC & __UNIX__
if(UNIX)
    add_definitions( -Wall -DGCC -D__UNIX__ )
endif(UNIX)


# Linker options
#if(WIN32)
	#if (${CMAKE_BUILD_TYPE} STREQUAL ""Debug"")
		#set(CMAKE_EXE_LINKER_FLAGS  ""${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:WinMainCRTStartup"")
		#link_libraries(libucrtd.lib)
	#else()
		#set(CMAKE_EXE_LINKER_FLAGS  ""${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:WinMainCRTStartup"")
		#link_libraries(libucrt.lib)
	#endif()
#endif(WIN32)


# libraries to link
target_link_libraries ( ${LENMUS} 
            ${wxWidgets_LIBRARIES} ${PortMidi_LIBRARIES} ${PortTime_LIBRARIES}
            ${LOMSE_LIBRARIES} ${SQLite3_LIBRARIES} ${UNITTEST_LIBRARIES} 
			${FREETYPE_LIBRARIES} ${PNG_LIBRARIES} 
			${ZLIB_LIBRARIES} ${FONTCONFIG_LIBRARY}
)


# Target properties
#if(APPLE)
#    set_target_properties(${PROJECT_NAME} PROPERTIES
#        RESOURCE ${RESOURCES_DIR}/other/osx/carbon/wxmac.icns
#        MACOSX_BUNDLE_ICON_FILE wxmac.icns
#        MACOSX_BUNDLE_COPYRIGHT ""Copyright LenMus""
#        MACOSX_BUNDLE_GUI_IDENTIFIER ""org.wxwidgets.minimal""
#        )
#endif()

if (WIN32)
	# In Windows force to use static Runtime library
	set(CompilerFlags
			CMAKE_CXX_FLAGS
			CMAKE_CXX_FLAGS_DEBUG
			CMAKE_CXX_FLAGS_RELEASE
			CMAKE_C_FLAGS
			CMAKE_C_FLAGS_DEBUG
			CMAKE_C_FLAGS_RELEASE
		)
	foreach(CompilerFlag ${CompilerFlags})
		string(REPLACE ""/MD"" ""/MT"" ${CompilerFlag} ""${${CompilerFlag}}"")
	endforeach()
endif(WIN32)

# Display compiler and linker settings
message(""Configuration for target ${LENMUS}"")
if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
	message(STATUS ""Compiler flags: ${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS_DEBUG}"")
else()
	message(STATUS ""Compiler flags: ${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS_RELEASE}"")
endif()
message(STATUS ""Linker flags: ${CMAKE_EXE_LINKER_FLAGS}"" )

endif(BUILD_PROGRAM)


#///////////////////////////////////////////////////////////////////////////////
# Program installation
#///////////////////////////////////////////////////////////////////////////////


# Package: lenmus (component: main)
# ------------------------------------------------------------------------------

# bin. LenMus program and other binary and related files (BIN_DIR)
install(TARGETS ${LENMUS}
	    RUNTIME
        DESTINATION ${BIN_DIR}
        COMPONENT main
)

if(WIN32)
    # customization XML file for tile icons and icons
    install(FILES ${LENMUS_ROOT_DIR}/installer/msw/lenmus.visualelementsmanifest.xml DESTINATION ${BIN_DIR} )
    install(FILES ${LENMUS_ROOT_DIR}/res/icons/tile-150x150.png DESTINATION ${BIN_DIR}/icons )
    install(FILES ${LENMUS_ROOT_DIR}/res/icons/tile-70x70.png DESTINATION ${BIN_DIR}/icons )
endif(WIN32)

# xrc resources
install(DIRECTORY ${LENMUS_ROOT_DIR}/xrc  DESTINATION ${XRC_DIR}
        COMPONENT main
        FILES_MATCHING
            PATTERN ""*.xrc""
            PATTERN ""x_*"" EXCLUDE
            PATTERN ""z_*"" EXCLUDE
)

# templates
install(DIRECTORY ${LENMUS_ROOT_DIR}/templates
        DESTINATION ${TEMPLATES_DIR}
        COMPONENT main
        FILES_MATCHING PATTERN ""*.lms""
)

# text files in root folder (license, etc.) shared among all users (SHARED_DIR)
install(FILES
            AUTHORS
            CHANGELOG.md
            INSTALL
            LICENSE
            NEWS
            README.md
            THANKS 
        DESTINATION ${DOCS_DIR}
        COMPONENT main
)
install(FILES ${LENMUS_ROOT_DIR}/docs/html/LICENSE_GNU_GPL_1.3.txt
        DESTINATION ${DOCS_DIR} COMPONENT main )
install(FILES ${LENMUS_ROOT_DIR}/docs/html/LICENSE_GNU_FDL_1.3.txt
        DESTINATION ${DOCS_DIR} COMPONENT main )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_en.txt
        DESTINATION ${DOCS_DIR} COMPONENT main )

if (UNIX)
    # Install desktop entry
    install(FILES ${LENMUS_ROOT_DIR}/res/desktop/org.lenmus.lenmus.desktop
            DESTINATION ""/usr/share/applications""
            COMPONENT main )
    # Install icon
    install(FILES ${LENMUS_ROOT_DIR}/res/icons/lenmus.png
            DESTINATION ""/usr/share/pixmaps""
            COMPONENT main )

    # Install AppStream upstream metadata
    install(FILES ${LENMUS_ROOT_DIR}/res/other/org.lenmus.lenmus.appdata.xml
            DESTINATION ""/usr/share/metainfo""
            COMPONENT main )
endif(UNIX)

if(INSTALL_SOUNDFONT)
    install(FILES ${LENMUS_ROOT_DIR}/res/sounds/FluidR3_GM.sf2
            DESTINATION ${RES_DIR}/sounds
            COMPONENT main )
endif()

if(INSTALL_BRAVURA_FONT)
    install(FILES ${BRAVURA_FONT_PATH}/Bravura.otf
            DESTINATION ${RES_DIR}/fonts
            COMPONENT main )
endif()


# Package: lenmus-i18n
# ------------------------------------------------------------------------------
# locale folder. License translations
    # ADD_LANG
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_de.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_el.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_es.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_eu.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_fr.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_gl_ES.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_it.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_nl.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_tr.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )
install(FILES ${LENMUS_ROOT_DIR}/installer/msw/locale/license_zh_CN.txt
        DESTINATION ${LOCALE_LICENSES_DIR} COMPONENT i18n )

# locale folder. help files and language catalogs for all languages
install(DIRECTORY  ${LENMUS_ROOT_DIR}/locale
		DESTINATION ${LOCALE_DIR}
        COMPONENT i18n 
        FILES_MATCHING
		    PATTERN ""common/*.*""
		    PATTERN ""*.htm""
		    #help
            PATTERN ""help*"" EXCLUDE
            PATTERN ""images*"" EXCLUDE
		    #PATTERN ""*.html""
		    #PATTERN ""*.js""
		    #PATTERN ""*.map""
		    #PATTERN ""*.inv""
		    #PATTERN ""*.png""
		    #PATTERN ""*.gif""
		    #PATTERN ""*.jpg""
		    #PATTERN ""*.css""
		    #language catalogs
		    PATTERN ""*.mo""
		    PATTERN ""x_*"" EXCLUDE
		    PATTERN ""z_*"" EXCLUDE
		    PATTERN ""*~"" EXCLUDE
		    #exclude unsupported languages
		        # ADD_LANG
		    PATTERN ""kk*"" EXCLUDE
		    PATTERN ""ru*"" EXCLUDE
)

#generate include files with translations for NSIS installer 
if(WIN32)
    #GUI translations
    set(NSIS_TRANSLATIONS ${CMAKE_BINARY_DIR}/mui_locale.nsh)
    file(REMOVE ${NSIS_TRANSLATIONS})
    file(APPEND ${NSIS_TRANSLATIONS} "";translations for installer GUI\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !addincludedir \""$"")
    file(APPEND ${NSIS_TRANSLATIONS} ""{LENMUS_NSIS_LOCALE}\""\n"")
        # ADD_LANG
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include de.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include el.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include en.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include es.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include eu.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include fr.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include gl_ES.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include it.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include nl.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include tr.nsh\n"")
    file(APPEND ${NSIS_TRANSLATIONS} ""  !include zh_CN.nsh\n"")
    
    message(""translations for NSIS installer created: ${NSIS_TRANSLATIONS}"")

    #Available languages
    set(NSIS_LANGUAGES ${CMAKE_BINARY_DIR}/mui_languages.nsh)
    file(REMOVE ${NSIS_LANGUAGES})
    file(APPEND ${NSIS_LANGUAGES} "";available languages for the installer\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE English    ;first language is the default language\n"")
        # ADD_LANG
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Basque\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE SimpChinese\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Dutch\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE French\n"")        
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Galician\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE German\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Greek\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Italian\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Spanish\n"")
    file(APPEND ${NSIS_LANGUAGES} ""  !insertmacro MUI_LANGUAGE Turkish\n"")

    message(""languages for NSIS installer created: ${NSIS_LANGUAGES}"")
endif()


# Package: lenmus-ebooks
# ------------------------------------------------------------------------------

# locale folder. eBooks for all languages (English included)
install(DIRECTORY  ${LENMUS_ROOT_DIR}/locale/
		DESTINATION ${LOCALE_DIR}/locale
        COMPONENT ebooks
        FILES_MATCHING
		    #books 
		    PATTERN ""*.lmb""
		    #exclude unsupported languages
		        # ADD_LANG
		    PATTERN ""x_*"" EXCLUDE
		    PATTERN ""z_*"" EXCLUDE
		    PATTERN ""kk*"" EXCLUDE
		    PATTERN ""ru*"" EXCLUDE
)


# Package: lenmus-common
# ------------------------------------------------------------------------------

# res folder. bitmaps, cursors, desktop, icons, sounds
install(DIRECTORY ${LENMUS_ROOT_DIR}/res/bitmaps   DESTINATION ${RES_DIR}
        COMPONENT common
        FILES_MATCHING PATTERN ""*.*"" PATTERN ""x_*"" EXCLUDE )
install(DIRECTORY ${LENMUS_ROOT_DIR}/res/cursors   DESTINATION ${RES_DIR}
        COMPONENT common
        FILES_MATCHING PATTERN ""*.png"" PATTERN ""x_*"" EXCLUDE )
install(FILES ${LENMUS_ROOT_DIR}/res/desktop/org.lenmus.lenmus.desktop
        DESTINATION ""${RES_DIR}/desktop""
        COMPONENT common )
install(DIRECTORY ${LENMUS_ROOT_DIR}/res/icons   DESTINATION ${RES_DIR}
        COMPONENT common
        FILES_MATCHING PATTERN ""*.*"" PATTERN ""x_*"" EXCLUDE )
install(DIRECTORY ${LENMUS_ROOT_DIR}/res/sounds   DESTINATION ${RES_DIR}
        COMPONENT common
        FILES_MATCHING PATTERN ""*.*"" 
                       PATTERN ""*.sf2"" EXCLUDE
                       PATTERN ""x_*"" EXCLUDE
                       PATTERN ""z_*"" EXCLUDE
        )

# samples 
#install(DIRECTORY ${LENMUS_ROOT_DIR}/scores/samples  DESTINATION ""${SAMPLES_DIR}""
#	    FILES_MATCHING PATTERN ""*.lms""
#	    PATTERN ""test_set"" EXCLUDE
#       COMPONENT common )
#)



#///////////////////////////////////////////////////////////////////////////////
# CPack section: installers generation
#///////////////////////////////////////////////////////////////////////////////

# define the components to package
if (BUILD_PKG_BOUNDLE)
    set(CPACK_MONOLITHIC_INSTALL 1)
    set(CPACK_DEB_COMPONENT_INSTALL 0)
else()
    set(CPACK_MONOLITHIC_INSTALL 0)
    set(CPACK_DEB_COMPONENT_INSTALL 1)
    if(BUILD_PKG_MAIN)
        set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ""main"")
    endif()
    if(BUILD_PKG_COMMON)
        set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ""common"")
    endif()
    if(BUILD_PKG_I18N)
        set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ""i18n"")
    endif()
    if(BUILD_PKG_EBOOKS)
        set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ""ebooks"")
    endif()
endif()
message(""CPACK_COMPONENTS_ALL=${CPACK_COMPONENTS_ALL}"")



# Common settings for all installers
set(CPACK_PACKAGE_VENDOR ${LENMUS_VENDOR_NAME})
set(CPACK_PACKAGE_CONTACT ""s.cecilio@gmail.com"")
set(CPACK_PACKAGE_DESCRIPTION ""A program for aural training and to learn music theory"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY
""Lenmus Phonascus is a totally free program for studying music theory that
 allows you to focus on specific skills and exercises, on both theory and aural
 training.
 .
 The different activities can be customized to meet your needs. Phonascus
 allows you to work at your own pace, providing interactive feedback until
 mastery of each concept is achieved.
 .
 Phonascus aims to create, as a community, the best free program for 
 music students, to help them in their studies. Phonascus has no 
 commercial purposes.
"")

if(UNIX)
    #-------------------------------------------------------------------------------------
	# configure CPack for Debian packages
    #-------------------------------------------------------------------------------------
	set(CPACK_GENERATOR ""DEB"")
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""Cecilio Salmeron <s.cecilio@gmail.com>"")
    set(CPACK_DEBIAN_PACKAGE_HOMEPAGE ""${LENMUS_VENDOR_SITE}"")
    set(CPACK_STRIP_FILES ON)		#remove debug information, if any, from binaries

    #auxiliary variable describing current available translations
        # ADD_LANG
    set(LENMUS_AVAILABLE_LOCALE
"" Currently available locales are:
    de (German)                   gl_ES(Galician)
    el (Greek)                    it (Italian)
    en (English)                  nl (Dutch)
    es (Spanish)                  tr (Turkish)
    eu (Basque)                   zh_CN (Simplified Chinese)
    fr (French)
"")

    #boundle package
    set(CPACK_DEBIAN_PACKAGE_NAME ""lenmus-all"")
    set(CPACK_DEBIAN_PACKAGE_VERSION ${LENMUS_PACKAGE_VERSION})
    set(CPACK_DEBIAN_PACKAGE_SECTION ""education"") 
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES ""^x86_64$|^amd64$"")  
      set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""amd64"")
    else()
      set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""i386"")
    endif() 
    string(CONCAT CPACK_PACKAGE_FILE_NAME ""${CPACK_DEBIAN_PACKAGE_NAME}""
            ""_${LENMUS_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.deb"")
    if (LENMUS_USE_LOMSE_SOURCES)
	    set(CPACK_DEBIAN_PACKAGE_DEPENDS """")
    else()
	    set(CPACK_DEBIAN_PACKAGE_DEPENDS ""liblomse (>= 0.25), "")
    endif()
    string(APPEND CPACK_DEBIAN_PACKAGE_DEPENDS
        ""libsqlite3-0, libportmidi0, fluid-soundfont-gm, ""
        ""libfreetype6, ${PNG_DEPENDENCY}, libfluidsynth-dev, zlib1g (>= 1:1.2.1)"")
    set(CPACK_DEBIAN_PACKAGE_DESCRIPTION
""A program for aural training and to learn music theory
 This package provides the program and all lenmus packages required to run
 the LenMus Phonascus program.
 .
 Lenmus Phonascus is a totally free program for studying music theory that
 allows you to focus on specific skills and exercises, on both theory and aural
 training.
 .
 The different activities can be customized to meet your needs. Phonascus
 allows you to work at your own pace, providing interactive feedback until
 mastery of each concept is achieved.
 .
 Phonascus aims to create, as a community, the best free program for 
 music students, to help them in their studies. Phonascus has no 
 commercial purposes.
"")

    #main package
    set(CPACK_DEBIAN_MAIN_PACKAGE_SECTION ""education"")
    set(CPACK_DEBIAN_MAIN_PACKAGE_NAME ""lenmus"")
    set(CPACK_DEBIAN_MAIN_PACKAGE_ARCHITECTURE ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
    set(CPACK_DEBIAN_MAIN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
    string(APPEND CPACK_DEBIAN_MAIN_PACKAGE_DEPENDS
        "", lenmus-common, lenmus-i18n, lenmus-ebooks"")
    string(CONCAT CPACK_DEBIAN_MAIN_FILE_NAME
            ""${CPACK_DEBIAN_MAIN_PACKAGE_NAME}""
            ""_${LENMUS_PACKAGE_VERSION}""
            ""_${CPACK_DEBIAN_MAIN_PACKAGE_ARCHITECTURE}.deb""
          )
    set(CPACK_COMPONENT_MAIN_DESCRIPTION
""LenMus Phonascus (aural training and music theory) binaries and related files
 This package provides the program and related files for the LenMus Phonascus
 program, a program for aural training and to learn music theory.
 .
 Lenmus Phonascus is a totally free program for studying music theory that
 allows you to focus on specific skills and exercises, on both theory and aural
 training. The  different activities can be customized to meet your needs. 
 Phonascus allows you to work at your own pace, providing interactive feedback
 until mastery of each concept is achieved.
"")

    #ebooks package
    set(CPACK_DEBIAN_EBOOKS_PACKAGE_SECTION ""education"")
    set(CPACK_DEBIAN_EBOOKS_PACKAGE_NAME ""lenmus-ebooks"")
    set(CPACK_DEBIAN_EBOOKS_PACKAGE_ARCHITECTURE ""all"")
    set(CPACK_DEBIAN_EBOOKS_PACKAGE_DEPENDS """")
    string(CONCAT CPACK_DEBIAN_EBOOKS_FILE_NAME
            ""${CPACK_DEBIAN_EBOOKS_PACKAGE_NAME}""
            ""_${LENMUS_PACKAGE_VERSION}""
            ""_${CPACK_DEBIAN_EBOOKS_PACKAGE_ARCHITECTURE}.deb""
          )
    set(CPACK_COMPONENT_EBOOKS_DESCRIPTION
""LenMus Phonascus eBooks (all current translations)
 This package provides the eBooks for the LenMus Phonascus program for aural
 training and to learn music theory.
 .
${LENMUS_AVAILABLE_LOCALE}""
)

    #common package
    set(CPACK_DEBIAN_COMMON_PACKAGE_SECTION ""education"")
    set(CPACK_DEBIAN_COMMON_PACKAGE_NAME ""lenmus-common"")
    set(CPACK_DEBIAN_COMMON_PACKAGE_ARCHITECTURE ""all"")
    set(CPACK_DEBIAN_COMMON_PACKAGE_DEPENDS """")
    string(CONCAT CPACK_DEBIAN_COMMON_FILE_NAME
            ""${CPACK_DEBIAN_COMMON_PACKAGE_NAME}""
            ""_${LENMUS_PACKAGE_VERSION}""
            ""_${CPACK_DEBIAN_COMMON_PACKAGE_ARCHITECTURE}.deb""
          )
    set(CPACK_COMPONENT_COMMON_DESCRIPTION
""LenMus Phonascus (aural training and music theory) shared files
 This package provides the support files needed by the LenMus Phonascus program.
 It includes bitmaps, cursors, desktop, icons and sounds, shared by all users.
"")

    #i18n package
    set(CPACK_DEBIAN_I18N_PACKAGE_SECTION ""education"")
    set(CPACK_DEBIAN_I18N_PACKAGE_NAME ""lenmus-i18n"")
    set(CPACK_DEBIAN_I18N_PACKAGE_ARCHITECTURE ""all"")
    set(CPACK_DEBIAN_I18N_PACKAGE_DEPENDS """")
    string(CONCAT CPACK_DEBIAN_I18N_FILE_NAME
            ""${CPACK_DEBIAN_I18N_PACKAGE_NAME}""
            ""_${LENMUS_PACKAGE_VERSION}""
            ""_${CPACK_DEBIAN_I18N_PACKAGE_ARCHITECTURE}.deb""
          )
    set(CPACK_COMPONENT_I18N_DESCRIPTION
""Message catalogues and translated files (but not eBooks) for all translations
${LENMUS_AVAILABLE_LOCALE}""
)



elseif(WIN32)
    #-------------------------------------------------------------------------------------
    # configure CPack for NSIS installer
    #-------------------------------------------------------------------------------------
    # AWARE: Only variables starting with ""CPACK_"" can be used to customize the installer.
    set(CPACK_GENERATOR ""NSIS"")
    set(CPACK_STRIP_FILES ON)		#remove debug information, if any, from binaries
    set(CPACK_PACKAGE_NAME ""lenmus"")
    set(CPACK_PACKAGE_VERSION ${LENMUS_PACKAGE_VERSION})
    
    #name of the package file to generate, not including the extension
    set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${SYSTEM_ARCHITECTURE}-setup"")
    
    #some paths used while building the installer
    set(CPACK_LENMUS_ROOT ""${LENMUS_ROOT_DIR}"")
    set(CPACK_LENMUS_BUILD_INSTALLER_PATH ""${CMAKE_BINARY_DIR}"")
    set(CPACK_LENMUS_INSTALL_PATH ""${SHARED_DIR}"")

	message(""Package name: ${CPACK_PACKAGE_FILE_NAME}"" )
	message(""Installation default path: ${CPACK_LENMUS_INSTALL_PATH}"" )
endif()

# Must be after the last CPACK macro
include(CPack)

message("" "")
message(""End of CMakeLists.txt =================================================="")
message("" "")
message(""Generation starts:"")
",3.1,3.1
7048,lxde,liblxqt,False,False,False,False,False,96,C++,2020-05-10 10:36:44+00:00,2013-08-06 13:39:51+00:00,33,781,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(liblxqt)


set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(KF5_MINIMUM_VERSION ""5.36.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")
set(QTXDG_MINIMUM_VERSION ""3.5.0"")

# Major LXQt Version, belong to all components
set(LXQT_MAJOR_VERSION 0)
# Minor LXQt Version, belong to all components
set(LXQT_MINOR_VERSION 15)
#
# Patch Version, belong *only* to the component
# LXQt is 0.13 - liblxqt is at patch version 0
# The official LXQt version will follow liblxqt.
#
# In a perfect world all components would have the same major- and minor- and
# patch-version as liblxqt - in real life it will be fine if every component
# has it's own patch version within a major/minor life cyle.
#
set(LXQT_PATCH_VERSION 0)
set(LXQT_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_PATCH_VERSION})


option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(BUILD_BACKLIGHT_LINUX_BACKEND ""Build the Linux backend for the backlight"" ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)

find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED Widgets DBus LinguistTools)
find_package(Qt5Xdg ${QTXDG_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
if (BUILD_BACKLIGHT_LINUX_BACKEND)
    find_package(PolkitQt5-1 REQUIRED)
endif (BUILD_BACKLIGHT_LINUX_BACKEND)
if (NOT APPLE)
    find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED X11Extras)
    find_package(X11 REQUIRED)
endif()
message(STATUS ""Building ${PROJECT_NAME} with Qt ${Qt5Core_VERSION}"")

include(CMakePackageConfigHelpers)
include(GNUInstallDirs) # Standard directories for installation

if (BUILD_BACKLIGHT_LINUX_BACKEND)
    add_subdirectory(lxqtbacklight/linux_backend/driver)
    add_definitions(-DUSE_BACKLIGHT_LINUX_BACKEND)
endif (BUILD_BACKLIGHT_LINUX_BACKEND)

set(LXQT_PKG_CONFIG_DESCRIPTION ""Shared library for LXQt applications"")

set(PUB_HDRS
    lxqthtmldelegate.h
    lxqtsettings.h
    lxqtplugininfo.h
    lxqtpowermanager.h
    lxqtapplication.h
    lxqtsingleapplication.h
    lxqttranslator.h
    lxqtprogramfinder.h

    configdialog/lxqtconfigdialog.h
    configdialog/lxqtconfigdialogcmdlineoptions.h
    configdialog/lxqtpageselectwidget.h

    lxqtpower/lxqtpower.h
    lxqtnotification.h
    lxqtautostartentry.h
    lxqtgridlayout.h
    lxqtrotatedwidget.h
    lxqtglobals.h
    lxqtbacklight.h
    #lxqtbacklight/virtual_backend.h
    #lxqtbacklight/linux_backend/linuxbackend.h
)

if (NOT APPLE)
    list (APPEND PUB_HDRS
        lxqtscreensaver.h
    )
endif (NOT APPLE)

set(PUBLIC_CLASSES
    HtmlDelegate
    Settings
    PluginInfo
    PowerManager
    Application
    SingleApplication
    Translator
    ProgramFinder

    ConfigDialog
    ConfigDialogCmdLineOptions
    PageSelectWidget

    Power
    Notification
    AutostartEntry
    GridLayout
    RotatedWidget
    Globals
    Backlight
)
if (NOT APPLE)
    list (APPEND PUBLIC_CLASSES
        ScreenSaver
    )
endif (NOT APPLE)

set(SRCS
    lxqthtmldelegate.cpp
    lxqtplugininfo.cpp
    lxqtpowermanager.cpp
    lxqtsettings.cpp
    lxqtapplication.cpp
    lxqtsingleapplication.cpp
    lxqttranslator.cpp
    lxqtprogramfinder.cpp

    configdialog/lxqtconfigdialog.cpp
    configdialog/lxqtconfigdialogcmdlineoptions.cpp
    configdialog/lxqtpageselectwidget.cpp

    lxqtpower/lxqtpower.cpp
    lxqtpower/lxqtpowerproviders.cpp
    lxqtautostartentry.cpp
    lxqtnotification.cpp
    lxqtgridlayout.cpp
    lxqtrotatedwidget.cpp
    lxqtbacklight.cpp
    lxqtbacklight/virtual_backend.cpp
)

if (NOT APPLE)
    list (APPEND SRCS
        lxqtscreensaver.cpp
    )
endif (NOT APPLE)

if (BUILD_BACKLIGHT_LINUX_BACKEND)
    list (APPEND SRCS
        lxqtbacklight/linux_backend/linuxbackend.cpp
    )
endif (BUILD_BACKLIGHT_LINUX_BACKEND)

set(MOCS
    lxqthtmldelegate.h
    lxqtpowermanager.h
    lxqtsettings.h
    lxqtapplication.h
    lxqtbacklight.h

    configdialog/lxqtconfigdialog.h
    configdialog/lxqtconfigdialog_p.h
    configdialog/lxqtpageselectwidget.h

    lxqtnotification.h
    lxqtnotification_p.h
    lxqtpower/lxqtpower.h
    lxqtpower/lxqtpowerproviders.h
    lxqtgridlayout.h
    lxqtrotatedwidget.h
    lxqtbacklight/virtual_backend.h
)

if (NOT APPLE)
    list (APPEND MOCS
        lxqtscreensaver.h
    )
endif (NOT APPLE)

if (BUILD_BACKLIGHT_LINUX_BACKEND)
    list (APPEND SRCS
        lxqtbacklight/linux_backend/linuxbackend.h
    )
endif (BUILD_BACKLIGHT_LINUX_BACKEND)

set(FORMS
    configdialog/lxqtconfigdialog.ui
)

set(POLKIT_FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/org.lxqt.backlight.pkexec.policy""
)

# Build Polkit file
configure_file ( polkit/org.lxqt.backlight.pkexec.policy.in ""${CMAKE_CURRENT_BINARY_DIR}/org.lxqt.backlight.pkexec.policy"" )

file(GLOB LXQT_CONFIG_FILES resources/*.conf)

QT5_ADD_DBUS_INTERFACE(DBUS_INTERFACE_SRCS
    dbus/org.freedesktop.Notifications.xml
    notifications_interface
)

QT5_ADD_DBUS_ADAPTOR(DBUS_ADAPTOR_SRCS
    dbus/org.lxqt.SingleApplication.xml
    lxqtsingleapplication.h LXQt::SingleApplication
)

set_property(SOURCE ${DBUS_INTERFACE_SRCS} ${DBUS_ADAPTOR_SRCS} PROPERTY SKIP_AUTOGEN ON)
list(APPEND SRCS ""${DBUS_INTERFACE_SRCS}"" ""${DBUS_ADAPTOR_SRCS}"")

# KF5WindowSystem is missing here. KF5WindowSystem doesn't provide an .pc file.
set(LXQT_PKG_CONFIG_REQUIRES ""Qt5Xdg >= ${QTXDG_MINIMUM_VERSION}, Qt5Widgets >= ${QT_MINIMUM_VERSION}, Qt5Xml >= ${QT_MINIMUM_VERSION}, Qt5DBus >= ${QT_MINIMUM_VERSION}"")

if (NOT APPLE)
    set(LXQT_PKG_CONFIG_REQUIRES ""${LXQT_PKG_CONFIG_REQUIRES}, Qt5X11Extras >= ${QT_MINIMUM_VERSION}"")
endif (NOT APPLE)


# Standard directories for installation
include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)
include(LXQtCreatePkgConfigFile)
include(LXQtCreatePortableHeaders)
include(LXQtConfigVars)

set(LXQT_INTREE_INCLUDE_DIR ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/include"")

set(LXQT_INSTALL_INCLUDE_DIR ""${CMAKE_INSTALL_FULL_INCLUDEDIR}/${LXQT_LIBRARY_NAME}"")
set(LXQT_INSTALL_CMAKE_DIR ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/cmake"")


## Translations
include(LXQtTranslateTs)

lxqt_translate_ts(QM_FILES
    UPDATE_TRANSLATIONS
        ${UPDATE_TRANSLATIONS}
    SOURCES
        ${SRCS}
        ${FORMS}
    INSTALL_DIR
        ""${LXQT_TRANSLATIONS_DIR}/${PROJECT_NAME}""
)

message(STATUS """")
message(STATUS ""liblxqt version: ${LXQT_VERSION}"")
message(STATUS """")


# Copy public headers
foreach(h ${PUB_HDRS})
    get_filename_component(bh ${h} NAME)
    configure_file(${h} ""${LXQT_INTREE_INCLUDE_DIR}/LXQt/${bh}"" COPYONLY)
endforeach()

# Create the portable headers
lxqt_create_portable_headers(INTREE_PORTABLE_HEADERS
    NAME_PREFIX ""lxqt""
    OUTPUT_DIR ""${LXQT_INTREE_INCLUDE_DIR}/LXQt""
    HEADER_NAMES ${PUBLIC_CLASSES}
)

#check_portable_headers(H_FILES ${PUB_HDRS} LINKS ""${INTREE_PORTABLE_HEADERS}"")

#************************************************
# Create in-tree build infrastructure
#************************************************
set(CFG_LXQT_TARGETS_FILE   ""${LXQT_INTREE_TARGETS_FILE}"")

configure_package_config_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/lxqt-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${LXQT_LIBRARY_NAME}-config.cmake""
    INSTALL_DESTINATION ""neverland""     # required, altough we don't install it
)

#************************************************
# Create installable build infrastructure
#************************************************
set(CFG_LXQT_TARGETS_FILE ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_LIBRARY_NAME}/${LXQT_LIBRARY_NAME}-targets.cmake"")

configure_package_config_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/lxqt-config.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/install/${LXQT_LIBRARY_NAME}-config.cmake""
    INSTALL_DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_LIBRARY_NAME}""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${LXQT_LIBRARY_NAME}-config-version.cmake""
    VERSION ${LXQT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/install/${LXQT_LIBRARY_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${LXQT_LIBRARY_NAME}-config-version.cmake""
    DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_LIBRARY_NAME}""
    COMPONENT Devel
)

install(EXPORT
    ${LXQT_LIBRARY_NAME}-targets
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${LXQT_LIBRARY_NAME}""
    COMPONENT Devel
)

add_library(${LXQT_LIBRARY_NAME}
    SHARED ${PUB_HDRS}
           ${SRCS}
           ${dbus_generated}
           ${UIS} ${MOCS}
           ${QM_FILES}
           ${QRC_CXX_SOURCES}

)

target_link_libraries(${LXQT_LIBRARY_NAME}
    PUBLIC
        KF5::WindowSystem
        Qt5::Widgets
        Qt5::DBus
        Qt5Xdg
)

if (NOT APPLE)
    target_link_libraries(${LXQT_LIBRARY_NAME}
        PUBLIC
            Qt5::X11Extras
        PRIVATE
            ${X11_Xscreensaver_LIB}
            ${X11_X11_LIB}
    )
endif (NOT APPLE)

set_target_properties(${LXQT_LIBRARY_NAME} PROPERTIES
    VERSION   ${LXQT_VERSION}
    SOVERSION ${LXQT_MAJOR_VERSION}
)

target_compile_definitions(${LXQT_LIBRARY_NAME}
    PRIVATE
        ""LXQT_RELATIVE_SHARE_DIR=\""${LXQT_RELATIVE_SHARE_DIR}\""""
        ""LXQT_SHARE_DIR=\""${LXQT_SHARE_DIR}\""""
        ""LXQT_RELATIVE_SHARE_TRANSLATIONS_DIR=\""${LXQT_RELATIVE_TRANSLATIONS_DIR}\""""
        ""LXQT_SHARE_TRANSLATIONS_DIR=\""${LXQT_TRANSLATIONS_DIR}\""""
        ""LXQT_GRAPHICS_DIR=\""${LXQT_GRAPHICS_DIR}\""""
        ""LXQT_ETC_XDG_DIR=\""${LXQT_ETC_XDG_DIR}\""""
        ""LXQT_DATA_DIR=\""${LXQT_DATA_DIR}\""""
        ""LXQT_INSTALL_PREFIX=\""${CMAKE_INSTALL_PREFIX}\""""
        ""LXQT_VERSION=\""${LXQT_VERSION}\""""
        ""COMPILE_LIBLXQT""
        ""$<$<CONFIG:Release>:QT_NO_DEBUG_OUTPUT>""
        ""$<$<CONFIG:Release>:QT_NO_WARNING_OUTPUT>""
        ""QT_NO_KEYWORDS""
)

target_include_directories(${LXQT_LIBRARY_NAME}
    INTERFACE
        ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${LXQT_LIBRARY_NAME}>""
        ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${LXQT_LIBRARY_NAME}/LXQt>""
        ""$<BUILD_INTERFACE:${LXQT_INTREE_INCLUDE_DIR}>""
        ""$<BUILD_INTERFACE:${LXQT_INTREE_INCLUDE_DIR}/LXQt>""
)

install(TARGETS
    ${LXQT_LIBRARY_NAME}
    DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    EXPORT ${LXQT_LIBRARY_NAME}-targets
    LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    COMPONENT Runtime
)

install(FILES
    ${PUB_HDRS}
    DESTINATION ""${LXQT_INSTALL_INCLUDE_DIR}/LXQt""
    COMPONENT Devel
)

install(FILES
    ${INTREE_PORTABLE_HEADERS}
    DESTINATION ""${LXQT_INSTALL_INCLUDE_DIR}/LXQt""
    COMPONENT Devel
)

install(FILES ${LXQT_CONFIG_FILES}
    DESTINATION ""${CMAKE_INSTALL_FULL_DATADIR}/lxqt""
    COMPONENT Runtime
)

if (BUILD_BACKLIGHT_LINUX_BACKEND)
    install(FILES ${POLKIT_FILES} DESTINATION ""${POLKITQT-1_POLICY_FILES_INSTALL_DIR}"")
endif (BUILD_BACKLIGHT_LINUX_BACKEND)

#************************************************
# Create and install pkgconfig file
#************************************************
lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${LXQT_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${LXQT_LIBRARY_NAME}
    DESCRIPTION ${LXQT_PKG_CONFIG_DESCRIPTION}
    INCLUDEDIRS ${LXQT_LIBRARY_NAME}
    LIBS ${LXQT_LIBRARY_NAME}
    REQUIRES ${LXQT_PKG_CONFIG_REQUIRES}
    VERSION ${LXQT_VERSION}
    INSTALL
)
#************************************************
",3.1.0,3.1
7196,jturney,ambit,False,False,False,False,False,9,C++,2020-05-05 15:07:31+00:00,2014-11-25 19:35:43+00:00,16,499,"#
#  Copyright (C) 2014 Justin Turney
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

cmake_policy(SET CMP0048 NEW)  # project_VERSION* variables populated from project(... VERSION x.x.x) string

cmake_minimum_required(VERSION 3.1)

project(ambit
        VERSION 0.4.0
        LANGUAGES C CXX)
set(ambit_AUTHORS      ""Justin M. Turney"")
set(ambit_DESCRIPTION  ""C++ library for the implementation of tensor product calculations"")
set(ambit_URL          ""https://github.com/jturney/ambit"")
set(ambit_LICENSE      ""GNU Lesser General Public License v3 (LGPL-3.0)"")

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(TargetOpenMP_FIND_COMPONENTS ""CXX"")

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

# <<<  CMake includes  >>>

include (CheckCXXCompilerFlag)
include (CMakePackageConfigHelpers)

# <<<  Default CMake options  >>>
include(psi4OptionsTools)

option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release)
#option_with_print(BUILD_SHARED_LIBS ""Build final library as shared, not static"" OFF)
#option_with_default(BUILD_FPIC ""Libraries will be compiled with position independent code"" ON)
#if(${BUILD_SHARED_LIBS} AND NOT ${BUILD_FPIC})
#    message(FATAL_ERROR ""BUILD_SHARED_LIBS ON and BUILD_FPIC OFF are incompatible, as shared library requires position independent code"")
#endif()

option (BUILD_DOXYGEN        ""Use Doxygen to create a HTML/PDF manual"" OFF)
option (BUILD_SPHINX         ""Build the user manual with Sphinx""       OFF)
option (STATIC_ONLY          ""Compile only the static library""         OFF)
option (SHARED_ONLY          ""Compile only the shared library""         OFF)
option (ENABLE_TESTS         ""Compile the tests""                       ON)
option (WITH_MPI             ""Build the library with MPI""              OFF)
option (ENABLE_CYCLOPS       ""Enable Cyclops usage"" OFF)
option (BUILD_FPIC           ""Static library in STATIC_ONLY will be compiled with position independent code"" ON)
option (CYCLOPS              ""Location of the Cyclops build directory"" """")
option (ELEMENTAL            ""Location of the Elemental build directory"" """")
option_with_print(ENABLE_OPENMP ""Enable OpenMP parallelization"" ON)
option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON
                  ""-xHost"" ""-march=native"")
option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2)
option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON)
option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib)
option_with_default(ENABLE_GENERIC ""Enables mostly static linking of system and math libraries for shared library"" OFF)

########################  Process & Validate Options  ##########################
include(GNUInstallDirs)
include(autocmake_safeguards)
#include(custom_color_messages)
# external projects manage their own OpenMP and c++YY flags, so only add to CXX_FLAGS for psi4-core
include(autocmake_omp)
include(custom_cxxstandard)
include(custom_static_library)

if (STATIC_ONLY AND SHARED_ONLY)
    message (FATAL_ERROR ""The options STATIC_ONLY=ON and SHARED_ONLY=ON are conflicting."" )
endif()

find_package(Threads REQUIRED)
link_libraries(""${CMAKE_THREAD_LIBS_INIT}"")

# HDF5 detection

find_package(TargetHDF5 REQUIRED)
include_directories(SYSTEM $<TARGET_PROPERTY:tgt::hdf5,INTERFACE_INCLUDE_DIRECTORIES>)

# BLAS and LAPACK
find_package (TargetLAPACK REQUIRED)

# Python Detection
set(Python_ADDITIONAL_VERSIONS 3.7 3.6 3.5)  # adjust with CMake minimum FindPythonInterp
find_package(PythonLibsNew REQUIRED)
message(STATUS ""Found Python ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}: ${PYTHON_EXECUTABLE} (found version ${PYTHON_VERSION_STRING})"")

#if (NOT ENABLE_STATIC AND NOT ENABLE_PSI4)
#    include(ConfigPython)
#    link_libraries(""${PYTHON_LIBRARIES}"")
#    include_directories(SYSTEM ""${PYTHON_INCLUDE_DIRS}"")
#endif()

# Boost Detection
# We need Boost.Python, so this has to come _after_ Python detection
#include(ConfigBoost)
#link_directories(""${Boost_LIBRARY_DIRS}"")
#include_directories(SYSTEM ""${Boost_INCLUDE_DIRS}"")

#if (ENABLE_PSI4)
#    include_directories(SYSTEM ${PSI4_INCLUDE_DIRS})
#endif()

# Append the suffix given from input to all generated executables
#if(EXECUTABLE_SUFFIX)
#   set(CMAKE_EXECUTABLE_SUFFIX ""${EXECUTABLE_SUFFIX}"")
#   message(STATUS ""Suffix ${CMAKE_EXECUTABLE_SUFFIX} will be appended to executables"")
#endif()
#
#if(LDFLAGS)
#   set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LDFLAGS}"")
#endif()
#
# tensor-specific includes and libraries
set(CMAKE_INCLUDE_CURRENT_DIR ON)
include_directories(
    ${PROJECT_BINARY_DIR}/include
    ${PROJECT_SOURCE_DIR}/include
)

if(ENABLE_CYCLOPS AND CYCLOPS)
    include_directories(${CYCLOPS}/include)
    add_definitions(-DHAVE_CYCLOPS)
endif()
if (ENABLE_ELEMENTAL AND ELEMENTAL)
    include_directories(${ELEMENTAL}/include)
    add_definitions(-DHAVE_ELEMENTAL)
endif()

#if (ENABLE_PSI4 AND PSI4_SOURCE_DIR AND PSI4_BINARY_DIR)
#    add_definitions(-DENABLE_PSI4=1)
#    include_directories(
#            ${PSI4_SOURCE_DIR}/include
#            ${PSI4_SOURCE_DIR}/src/lib
#            ${PSI4_BINARY_DIR}/include
#            ${PSI4_BINARY_DIR}/src/lib
#    )
#endif()

# library directory
add_subdirectory(lib)

# include directory (for installation)
add_subdirectory(include)

# recursively add source directories
add_subdirectory(src)

#if (NOT ENABLE_PSI4)
    # test suite
    enable_testing()
    include(CTest)
    add_subdirectory(test)

    # sample suite
    add_subdirectory(samples)
#endif()

# Add all targets to the build-tree export set

# <<<  Export Config  >>>

include(CMakePackageConfigHelpers)
# GNUInstallDirs ""DATADIR"" wrong here; CMake search path wants ""share"".
set(CMAKECONFIG_INSTALL_DIR ""share/cmake/${PROJECT_NAME}"")
configure_package_config_file(cmake/${PROJECT_NAME}Config.cmake.in
        ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
        INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        VERSION ${${PROJECT_NAME}_VERSION}
        COMPATIBILITY AnyNewerVersion)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        cmake/FindTargetHDF5.cmake
        DESTINATION ${CMAKECONFIG_INSTALL_DIR})

# this has to be the very last CMake module to be included
#include(ConfigInfo)
",3.1,3.1
7246,hluk,CopyQ,False,False,False,False,False,136,C++,2020-05-17 12:51:02+00:00,2009-10-21 13:35:38+00:00,2556,5071,"project(copyq)

if (APPLE)
    cmake_minimum_required(VERSION 3.1)
    set(COPYQ_EXECUTABLE_NAME ""CopyQ"")
else()
    cmake_minimum_required(VERSION 2.8.12)
    set(COPYQ_EXECUTABLE_NAME ${PROJECT_NAME})
endif()

# C++11
if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.1)
    set(CMAKE_CXX_STANDARD 11)
else()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
    set(COPYQ_DEBUG ON)
    add_definitions( -DCOPYQ_DEBUG  )
endif()

OPTION(PEDANTIC ""Enable all compiler warnings"" OFF)

# Options (cmake -LH)
OPTION(WITH_TESTS ""Run test cases from command line"" ${COPYQ_DEBUG})
OPTION(WITH_PLUGINS ""Compile plugins"" ON)

# Unix-specific options
if (UNIX AND NOT APPLE)
    include(GNUInstallDirs)
    set(DATA_INSTALL_PREFIX ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR}"" CACHE PATH ""Install path for data"")
    set(PLUGIN_INSTALL_PREFIX ""${CMAKE_INSTALL_PREFIX}/${CMAKE_SHARED_MODULE_PREFIX}/copyq/plugins"" CACHE PATH ""Install path for plugins"")
    set(ICON_INSTALL_PREFIX ""${DATA_INSTALL_PREFIX}/icons/hicolor/scalable/apps"" CACHE PATH ""Install path for icons"")
    set(ICON_INSTALL_PREFIX_TEMPLATE ""${DATA_INSTALL_PREFIX}/icons/hicolor/%SIZE%/apps"" CACHE PATH ""Install path for icons (%SIZE% is icon size)"")
    set(THEME_INSTALL_PREFIX ""${DATA_INSTALL_PREFIX}/copyq/themes"" CACHE PATH ""Install path for themes"")
    set(DESKTOP_INSTALL_PREFIX ""${DATA_INSTALL_PREFIX}/applications"" CACHE PATH ""Install path for desktop file"")
    set(APPDATA_INSTALL_PREFIX ""${DATA_INSTALL_PREFIX}/metainfo"" CACHE PATH ""Install path for AppData file"")
    set(MANPAGE_INSTALL_PREFIX ""${CMAKE_INSTALL_MANDIR}/man1"" CACHE PATH ""Install path for manual pages"")
    set(TRANSLATION_INSTALL_PREFIX ""${DATA_INSTALL_PREFIX}/copyq/translations"" CACHE PATH ""Install path for translations"")
    set(ICON_NAME ""copyq"" CACHE STRING ""Name for icon files"")
    set(COPYQ_AUTOSTART_COMMAND """" CACHE STRING ""Autostart command"")
endif()

set(CMAKE_AUTOMOC ON)

find_package(Qt5Widgets 5.5.0 REQUIRED)
list(APPEND copyq_LIBRARIES Qt5::Widgets)

set(copyq_APP_ID      com.github.hluk.copyq)
set(copyq_ICON_PREFIX src/images/icon)
set(copyq_ICON_NORMAL src/images/icon.svg)
set(copyq_ICON_MASK   src/images/icon_mask.svg)
set(copyq_DESKTOP     shared/${copyq_APP_ID}.desktop)
set(copyq_APPDATA     shared/${copyq_APP_ID}.appdata.xml)
set(copyq_MANPAGE     debian/copyq.1)

# Be more strict while compiling debugging version
if(CMAKE_COMPILER_IS_GNUCXX OR ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-long-long"")
    set(CMAKE_CXX_FLAGS_DEBUG
        ""${CMAKE_CXX_FLAGS_DEBUG} -Wextra -Wall -pedantic -Wfloat-equal -Woverloaded-virtual -Wundef -Wno-inconsistent-missing-destructor-override"")
endif()

if (PEDANTIC)
    if (CMAKE_COMPILER_IS_GNUCXX)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wextra -Wall \
            -Wsuggest-override \
            -Wlogical-op \
            -Wnoexcept \
            -Wstrict-null-sentinel \
            "")
    else()
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Weverything \
            -Winconsistent-missing-override \
            "")

        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
            -Wno-c++98-compat \
            -Wno-c++98-compat-pedantic \
            -Wno-shadow-field-in-constructor \
            -Wno-weak-vtables \
            -Wno-disabled-macro-expansion \
            -fcomment-block-commands=retval \
            "")

        # Disable errors from moc-generated files.
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
            -Wno-undefined-reinterpret-cast \
            -Wno-missing-prototypes \
            "")

        # Disable errors from qrc-generated files.
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
            -Wno-exit-time-destructors \
            -Wno-global-constructors \
            "")
    endif()

    set(CMAKE_CXX_FLAGS
        ""${CMAKE_CXX_FLAGS} -pedantic -Werror \
        -Wcast-align \
        -Wcast-qual \
        -Wctor-dtor-privacy \
        -Wdisabled-optimization \
        -Wformat=2 \
        -Winit-self \
        -Wmissing-declarations \
        -Wmissing-include-dirs \
        -Wold-style-cast \
        -Woverloaded-virtual \
        -Wredundant-decls \
        -Wstrict-overflow=4 \
        -Wundef \
        "")

    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
        -Wno-padded \
        -Wno-switch-enum \
        "")

    # Disable Q_OBJECT macro warnings.
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
        -Wno-unused-member-function \
        "")
endif()

if(WITH_TESTS)
    message(STATUS ""Building with tests."")

    add_definitions( -DHAS_TESTS )

    find_package(Qt5Test REQUIRED)
    list(APPEND copyq_LIBRARIES Qt5::Test)
endif()

# Generate version.h from current git commit if available.
add_custom_target(
    generate_version_header
    ALL
    COMMAND ${CMAKE_COMMAND}
        -D INPUT_FILE=${CMAKE_CURRENT_SOURCE_DIR}/src/common/version.h.in
        -D OUTPUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/src/common/version.h
        -P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake
    BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/src/common/version.h
    WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}""
)
set_source_files_properties(
    ${CMAKE_CURRENT_BINARY_DIR}/src/common/version.h
    PROPERTIES GENERATED TRUE
)

if (UNIX AND NOT APPLE)
    install(FILES ${copyq_ICON_NORMAL} DESTINATION ${ICON_INSTALL_PREFIX} RENAME ${ICON_NAME}.svg)
    install(FILES ${copyq_ICON_MASK}   DESTINATION ${ICON_INSTALL_PREFIX} RENAME ${ICON_NAME}_mask.svg)
    install(FILES ${copyq_APPDATA}     DESTINATION ${APPDATA_INSTALL_PREFIX})
    install(FILES ${copyq_MANPAGE}     DESTINATION ${MANPAGE_INSTALL_PREFIX})

    configure_file(${copyq_DESKTOP}.in ${copyq_DESKTOP})
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${copyq_DESKTOP} DESTINATION ${DESKTOP_INSTALL_PREFIX})

    foreach (copyq_ICON_EXTENT 16 22 24 32 48 64 128)
        set(copyq_ICON_SIZE ""${copyq_ICON_EXTENT}x${copyq_ICON_EXTENT}"")
        string(REPLACE ""%SIZE%"" ""${copyq_ICON_SIZE}"" copyq_ICON_TARGET_PREFIX ""${ICON_INSTALL_PREFIX_TEMPLATE}"")
        foreach (copyq_ICON_TYPE """")
            install(FILES ""${copyq_ICON_PREFIX}${copyq_ICON_TYPE}_${copyq_ICON_SIZE}.png"" DESTINATION ""${copyq_ICON_TARGET_PREFIX}"" RENAME ""${ICON_NAME}${copyq_ICON_TYPE}.png"")
        endforeach()
    endforeach()

    set(copyq_THEME_INSTALL_PREFIX ${THEME_INSTALL_PREFIX})
    file(GLOB copyq_THEMES shared/themes/*.css shared/themes/*.ini)
    install(FILES ${copyq_THEMES} DESTINATION ${THEME_INSTALL_PREFIX})

    add_definitions( -DCOPYQ_ICON_PREFIX=""${ICON_INSTALL_PREFIX}/${ICON_NAME}"" )
    add_definitions( -DCOPYQ_THEME_PREFIX=""${THEME_INSTALL_PREFIX}"" )
    add_definitions( -DCOPYQ_PLUGIN_PREFIX=""${PLUGIN_INSTALL_PREFIX}"" )
    add_definitions( -DCOPYQ_DESKTOP_FILE=""${DESKTOP_INSTALL_PREFIX}/${copyq_APP_ID}.desktop"" )
    add_definitions( -DCOPYQ_TRANSLATION_PREFIX=""${TRANSLATION_INSTALL_PREFIX}"" )
    add_definitions( -DCOPYQ_ICON_NAME=""${ICON_NAME}"" )

    if (COPYQ_AUTOSTART_COMMAND)
        add_definitions( -DCOPYQ_AUTOSTART_COMMAND=""${COPYQ_AUTOSTART_COMMAND}"" )
    endif()
elseif (APPLE)
    set(copyq_themes_dest_dir ""${COPYQ_EXECUTABLE_NAME}.app/Contents/Resources/themes"")
    file(GLOB copyq_THEMES shared/themes/*.css shared/themes/*.ini)
    install(FILES ${copyq_THEMES} DESTINATION ""${copyq_themes_dest_dir}"" COMPONENT Runtime)
endif()

add_definitions( -DQT_NO_CAST_TO_ASCII )

set_property(GLOBAL PROPERTY COPYQ_INSTALLED_PLUGINS)

if (WITH_PLUGINS)
    add_subdirectory(plugins)
endif()

add_subdirectory(src)
",3.1,3.1
7256,Shark-ML,Shark,False,False,False,False,False,17,C++,2019-05-03 07:10:20+00:00,2015-10-09 07:02:53+00:00,329,3977,"#####################################################################
#       Shark Machine Learning Library
#       Top-Level CMake driver file
#       Optionally included sub-probjects:
#         * Test/CMakeLists.txt
#         * examples/CMakeLists.txt
#         * doc/CMakeLists.txt
#####################################################################
project( shark )
cmake_minimum_required( VERSION 3.1 FATAL_ERROR)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
INCLUDE (CheckFunctionExists)


cmake_policy(SET CMP0003 NEW)
if(POLICY CMP0042)
	cmake_policy(SET CMP0042 NEW)
endif()
if(POLICY CMP0053)
	cmake_policy(SET CMP0053 NEW)
endif()
#=========================================================
# Output directories.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${shark_BINARY_DIR}/bin"")
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
	if(UNIX)
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${shark_BINARY_DIR}/lib"")
	else()
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${shark_BINARY_DIR}/bin"")
	endif()
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${shark_BINARY_DIR}/lib"")
endif()
mark_as_advanced( 
	CMAKE_RUNTIME_OUTPUT_DIRECTORY
	CMAKE_LIBRARY_OUTPUT_DIRECTORY
	CMAKE_ARCHIVE_OUTPUT_DIRECTORY
)

#####################################################################
# Static/Shared libraries
#####################################################################
option(BUILD_SHARED_LIBS ""Compile shark into a dynamic library instead of a static one."" OFF)
if(BUILD_SHARED_LIBS)
	set(SHARK_USE_DYNLIB 1)
endif()

#####################################################################
# Version information
#####################################################################
option(BUILD_OFFICIAL_RELEASE ""Is this an official Shark release."" OFF )
mark_as_advanced( BUILD_OFFICIAL_RELEASE )

set(SHARK_VERSION_MAJOR 4)
set(SHARK_VERSION_MINOR 0)
set(SHARK_VERSION_PATCH 0)
set(SHARK_VERSION ${SHARK_VERSION_MAJOR}.${SHARK_VERSION_MINOR}.${SHARK_VERSION_PATCH})
set(SHARK_SOVERSION 0)


#####################################################################
#	Adjustments for cpack and deb package generation
#####################################################################
set(CPACK_GENERATOR TGZ DEB)
set(CPACK_PACKAGE_NAME ""libshark"")
set(CPACK_BUNDLE_NAME ""libshark"")
set(CPACK_PACKAGE_VENDOR ""Institut fur Neuroinformatik, Ruhr-Universitaet Bochum"")
set(CPACK_PACKAGE_VERSION_MAJOR ${SHARK_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${SHARK_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${SHARK_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION ${SHARK_VERSION_MAJOR}.${SHARK_VERSION_MINOR}.${SHARK_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING.LESSER)

#Debian Compatible naming by default
if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)
else()
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)
endif()
set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libboost-all-dev (>=1.54)"")

set(CPACK_DEBIAN_PACKAGE_DESCRIPTION
	""SHARK is a modular C++ library for the design and optimization of adaptive systems. It provides methods for linear and nonlinear optimization, in particular evolutionary and gradient-based algorithms, kernel-based learning algorithms and neural networks, and various other machine learning techniques. SHARK serves as a toolbox to support real world applications as well as research indifferent domains of computational intelligence and machine learning. The sources are compatible with the following platforms: Windows, Solaris, MacOS X, and Linux.""
)
set( CPACK_DEBIAN_PACKAGE_MAINTAINER ""Christian Igel <c.igel@ieee.org>"" )

#####################################################################
#    Adjust include, lib, example and doc paths for installation
#####################################################################
if( UNIX )
	include(GNUInstallDirs)
	set( SHARK_INSTALL_BIN_DIR ${CMAKE_INSTALL_BINDIR} CACHE STRING """" )
	set( SHARK_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE STRING """" )
	set( SHARK_INSTALL_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING """" )
	set( SHARK_INSTALL_CONTRIB_DIR ${CMAKE_INSTALL_DATADIR}/shark/contrib CACHE STRING """" )
	set( SHARK_INSTALL_EXAMPLE_DIR ${CMAKE_INSTALL_DATADIR}/shark/examples CACHE STRING """" )
	set( SHARK_INSTALL_DOC_DIR ${CMAKE_INSTALL_DATADIR}/shark/doc CACHE STRING """" )
else()
	set( SHARK_INSTALL_BIN_DIR bin )
	set( SHARK_INSTALL_INCLUDE_DIR include/shark/ )
	set( SHARK_INSTALL_LIB_DIR lib/ )
	set( SHARK_INSTALL_CONTRIB_DIR contrib/ )
	set( SHARK_INSTALL_EXAMPLE_DIR examples/ )
	set( SHARK_INSTALL_DOC_DIR doc )
endif()

#####################################################################
#           Enable installer and package generation
#####################################################################
 include( CPack )

#####################################################################
#           Explicit macro setup for debug configuration
#####################################################################
# enable or disable debugging, default is Release
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE ""Release"")
endif()

if (UNIX)
    add_compile_options(""$<$<CONFIG:DEBUG>:-Wall>"")
endif()

list(APPEND COMPILE_DEFINITIONS_RELEASE NDEBUG)
message(STATUS ""Will build: "" ${CMAKE_BUILD_TYPE})

#####################################################################
#           Boost configuration
#####################################################################
set(Boost_USE_STATIC_LIBS OFF CACHE BOOL ""use static libraries from Boost"")
set(Boost_USE_MULTITHREADED ON)
add_definitions(-DBOOST_PARAMETER_MAX_ARITY=15)
add_definitions(-DBOOST_FILESYSTEM_VERSION=3)
add_definitions(-DBOOST_RESULT_OF_USE_DECLTYPE)

# Should we link the boost test dynamically
if(NOT Boost_USE_STATIC_LIBS)
	add_definitions(-DBOOST_TEST_DYN_LINK)
	add_definitions(-DBOOST_ALL_DYN_LINK)
endif()

find_package( 
	Boost 1.48.0 REQUIRED COMPONENTS
	serialization
	filesystem system
)

if(NOT Boost_FOUND)
	message(FATAL_ERROR ""Please make sure Boost 1.48.0 is installed on your system"")
endif()

if (WIN32)
	# disable autolinking in boost
	add_definitions( -DBOOST_ALL_NO_LIB )
endif()

include_directories(SYSTEM ${Boost_INCLUDE_DIR} )
link_directories( ${Boost_LIBRARY_DIR} )

# Set the libraries needed by Shark
list(APPEND LINK_LIBRARIES ${Boost_LIBRARIES})

message( STATUS ""Using boost from "" ${Boost_LIBRARY_DIR} )

#####################################################################
#		OpenMP
#####################################################################
option( ENABLE_OPENMP ""Enable OpenMP"" ON )
if( ENABLE_OPENMP )
	find_package( OpenMP QUIET )
	if( OPENMP_FOUND )
		message( STATUS ""OpenMP found"" )
		set(SHARK_USE_OPENMP 1)
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
		set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")

		set(SHARK_REQUIRED_C_FLAGS ""${OpenMP_C_FLAGS}"")
		set(SHARK_REQUIRED_CXX_FLAGS ""${OpenMP_CXX_FLAGS}"")
		set(SHARK_REQUIRED_EXE_LINKER_FLAGS ""${OpenMP_EXE_LINKER_FLAGS}"")

	else()
		message( STATUS ""OpenMP not found"" )
	endif()
else()
	message( STATUS ""Building without OpenMP as requested."" )
endif()

#####################################################################
#           BLAS configuration
#####################################################################

option( ENABLE_SIMD ""Use experimental SIMD feature in linear algebra"" OFF )
if( ENABLE_SIMD )
	set( SHARK_USE_SIMD 1)
endif()

option( ENABLE_CBLAS ""Use Installed Linear Algebra Library"" ON )
set(CBLAS_LIBRARY_PATH ""/usr/lib64/"" CACHE PATH ""Linear algebra library path"")
set(CBLAS_INCLUDE_PATH ""/usr/include/"" CACHE PATH ""Linear algebra include path"")
if( ENABLE_CBLAS )
	set(CBLAS_VENDOR FALSE)
	if( APPLE )
		set(CBLAS_VENDOR ""Accelerate"")
		set(CBLAS_INCLUDES """")
		set(CBLAS_LIBRARIES ""-framework Accelerate"" )
	else()
		#todo: do a propper vendor check
		find_library(OPENBLAS_LIBRARY openblas
			HINTS ${CBLAS_LIBRARY_PATH}
		)
		find_library(CBLAS_LIBRARY cblas
			HINTS ${CBLAS_LIBRARY_PATH}
		)
		find_library(CLAPACK_LIBRARY lapack
			HINTS ${CBLAS_LIBRARY_PATH}
		)
		find_library(ATLAS_LIBRARY atlas
			HINTS ${CBLAS_LIBRARY_PATH}
		)
		mark_as_advanced(
			OPENBLAS_LIBRARY
			CBLAS_LIBRARY
			CLAPACK_LIBRARY
			ATLAS_LIBRARY
		)
		
		find_file(CBLAS_INCLUDES cblas.h 
			PATHS ${CBLAS_INCLUDE_PATH}
		)

		if( OPENBLAS_LIBRARY AND CBLAS_INCLUDES)
			set(CBLAS_VENDOR ""OpenBLAS"")
			set(CBLAS_LIBRARIES ${OPENBLAS_LIBRARY})
		elseif( CBLAS_LIBRARY AND CLAPACK_LIBRARY AND ATLAS_LIBRARY AND CBLAS_INCLUDES)
			set(CBLAS_VENDOR ""ATLAS"")
			set(CBLAS_LIBRARIES ${CLAPACK_LIBRARY} ${CBLAS_LIBRARY} ${ATLAS_LIBRARY})
		elseif( CBLAS_LIBRARY AND CBLAS_INCLUDES)
			#check that we can compile a basic program with the libraries we have found
			#vendor versions might come with additional libraries which would be bad.
			try_compile(CBLAS_COMPILE 
				""${PROJECT_BINARY_DIR}/cBlasCheck""
				""${CMAKE_SOURCE_DIR}/cBlasCheck.cpp""
				CMAKE_FLAGS ""-DINCLUDE_DIRECTORIES=${CBLAS_INCLUDE_PATH}""
				LINK_LIBRARIES ${CBLAS_LIBRARY}
			)
			if(CBLAS_COMPILE)
				set(CBLAS_VENDOR ""GENERIC"")
				set(CBLAS_LIBRARIES ${CBLAS_LIBRARY})
			else()
				message(WARNING ""Can not compile basic program with cblas library"")
			endif()
		endif()
	endif()
	
	if(CBLAS_VENDOR)
		message(STATUS ""CBLAS FOUND: "" ${CBLAS_VENDOR})
		message(STATUS ""CBLAS include file "" ${CBLAS_INCLUDES} )
		message(STATUS ""CBLAS library files "" ${CBLAS_LIBRARIES} )
		set(SHARK_USE_CBLAS 1)
		list(APPEND EXTRA_INCLUDE_DIRECTORIES ${CBLAS_INCLUDE_PATH} )
		list(APPEND LINK_LIBRARIES ${CBLAS_LIBRARIES})
		include_directories ( ${CBLAS_INCLUDE_PATH} )
	else()
		message(STATUS ""No usable CBLAS Library found. No fast linear Algebra used."")
	endif()
	
	#Special setup for ATLAS
	if( CBLAS_VENDOR MATCHES ""ATLAS"" )
		set( SHARK_USE_ATLAS_LAPACK 1) # ATLAS always contains some LAPACK methods that we can use
	endif()

	if(CLAPACK_LIBRARY)
		#check for full lapack
		set(CMAKE_REQUIRE_QUIET 1)
		set(CMAKE_REQUIRED_LIBRARIES ${CBLAS_LIBRARIES})
		check_function_exists(dsyev_ HAS_FULL_LAPACK)
		
		if( HAS_FULL_LAPACK )
			set( SHARK_USE_LAPACK 1)
			message(STATUS ""Using Lapack!"")
		endif()
	endif()
endif()

#####################################################################
#           BLAS OpenCL configuration
#####################################################################

option( ENABLE_OPENCL ""Use OpenCL and boost.compute"" OFF )
if(ENABLE_OPENCL)
	if(${Boost_MINOR_VERSION} LESS 61)
		message(FATAL_ERROR ""Boost below 1.61 does not include Boost.Compute."")
	endif()
	find_package(OpenCL REQUIRED)
	include_directories(${OpenCL_INCLUDE_DIRS})
	list( APPEND LINK_LIBRARIES ${OpenCL_LIBRARY})
	set(SHARK_USE_OPENCL 1)
endif()

option( ENABLE_CLBLAST ""Use CLBlast as GPU backend"" OFF )
if(ENABLE_CLBLAST)
	find_package(CLBlast REQUIRED)
	set(SHARK_USE_CLBLAST 1)
	list( APPEND LINK_LIBRARIES clblast)
endif()

#####################################################################
#                       Static Code Analysis
#####################################################################
option(USE_CPPCHECK ""Use CPPCheck Static Code Analysis"" OFF)
mark_as_advanced(USE_CPPCHECK)
if(USE_CPPCHECK)
	find_program(CPP_CHECK cppcheck)
	mark_as_advanced(CPP_CHECK)
if(CPP_CHECK)
	message(STATUS ""cppcheck available for static code analysis."" )
	add_custom_target(code_analysis
		${CPP_CHECK} --enable=all --xml --force -I${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR} 2> StaticAnalysis.xml)
	endif()
endif()

#####################################################################
#                       GCov Code Analysis
#####################################################################
option(USE_GCOV_CHECK  ""GCov Coverage Check"" OFF)

if(USE_GCOV_CHECK)
find_program(GCOV_CHECK gcov)
if(CMAKE_BUILD_TYPE MATCHES ""Release"")
	message( FATAL_ERROR 
		""\nYou specified a Release Build.""
		""This does not make sense, if Coverage is enabled.""
		""Please change Build type to Debug or turn off Coverage.""
	)
endif()
	message(STATUS ""GCov available for static code analysis. Configuring for Code Check."" )
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} --coverage"")
	set(CFLAGS ""${CFLAGS} -g -O0 -Wall -W --coverage"")
	set(LDFLAGS ""${LDFLAGS} --coverage"")
endif()


#####################################################################
#                Adjust compiler flags and settings for MSVC
#####################################################################
if( MSVC )
	#4250: inherit via dominance
	add_definitions(/wd4250)
	#4251: needs to have dll-interface
	add_definitions(/wd4251)
	#4275: non-dll interface used as base for dll-interface class
	add_definitions(/wd4275)
	#4308: Negative integral constant
	add_definitions(/wd4800)
	add_definitions(/wd4308)

	string( REPLACE ""/O2"" ""/Od"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"" )
	set( CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"" CACHE STRING ""compiler-flags"" FORCE )

	add_definitions(-D_USE_MATH_DEFINES)
	add_definitions(-DNOMINMAX)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1)

	# Allow multi core compile on Visual Studio
	set(MULTICORE_COMPILE OFF CACHE BOOL ""Compile with all available cores"")
	if (${MULTICORE_COMPILE})
		add_definitions(${CMAKE_CXX_FLAGS} ""/MP"")
	endif(${MULTICORE_COMPILE})
endif()

#####################################################################
#                       General Path settings
#####################################################################
include_directories( ${shark_SOURCE_DIR}/include )
include_directories( ${shark_BINARY_DIR}/include )
add_subdirectory( include )
add_subdirectory( src )

#####################################################################
#                       Include Examples
#####################################################################
option( BUILD_EXAMPLES ""Build example programs."" ON )
add_subdirectory( examples )

#####################################################################
#                       Include Unit Tests
#####################################################################
# Enable Testing
include(CTest)
if(BUILD_TESTING)
	enable_testing()
	add_subdirectory( Test )
endif()

#####################################################################
#                       Include Documentation
#####################################################################
option(BUILD_DOCUMENTATION ""Build documentation."" OFF)
if(BUILD_DOCUMENTATION)
	add_subdirectory(doc)
endif()

###################################################################
#                       CPACK PACKAGING
###################################################################
set(INSTALL_CMAKE_DIR lib/cmake/Shark/)

# Add all targets to the build-tree export set
export(TARGETS shark SharkVersion FILE ""${shark_BINARY_DIR}/SharkTargets.cmake"")

# Create the SharkConfig.cmake and SharkConfigVersion files
set(SHARK_USE_FILE ""${PROJECT_SOURCE_DIR}/UseShark.cmake"")
set(SHARK_TARGETS_FILE ""${PROJECT_BINARY_DIR}/SharkTargets.cmake"")
set(SHARK_LIBRARIES ${LINK_LIBRARIES} shark)
set(SHARK_LIBRARY_DIRS ""${PROJECT_BINARY_DIR}/lib"")
set(SHARK_INCLUDE_DIRS ""${PROJECT_SOURCE_DIR}/include"" ""${PROJECT_BINARY_DIR}/include"" ""${Boost_INCLUDE_DIR}"" ${EXTRA_INCLUDE_DIRECTORIES})

# Configure the files to be exported
configure_file(SharkConfig.cmake.in ""${PROJECT_BINARY_DIR}/SharkConfig.cmake"")
configure_file(SharkConfigVersion.cmake.in ""${PROJECT_BINARY_DIR}/SharkConfigVersion.cmake"")

# Configure the SharkConfig.cmake for the install tree
set(SHARK_CONFIG_CODE ""
	# Compute the installation prefix from this SharkConfig.cmake file location.
	get_filename_component(SHARK_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)"")

# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE ""/"" "";"" _count ""${INSTALL_CMAKE_DIR}"")
foreach(p ${_count})
	set(SHARK_CONFIG_CODE ""${SHARK_CONFIG_CODE}
		get_filename_component(SHARK_INSTALL_PREFIX \""\${SHARK_INSTALL_PREFIX}\"" DIRECTORY)"")
endforeach()
set(SHARK_CONFIG_CODE ""${SHARK_CONFIG_CODE}"")

set(SHARK_USE_FILE ""\${SHARK_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}UseShark.cmake"")
set(SHARK_TARGETS_FILE ""\${SHARK_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}SharkTargets.cmake"")
set(SHARK_LIBRARIES ${LINK_LIBRARIES} shark)
set(SHARK_LIBRARY_DIRS ""\${SHARK_INSTALL_PREFIX}/lib"")
set(SHARK_INCLUDE_DIRS ""\${SHARK_INSTALL_PREFIX}/${SHARK_INSTALL_INCLUDE_DIR}"" ""${Boost_INCLUDE_DIR}"" ${EXTRA_INCLUDE_DIRECTORIES})
configure_file(SharkConfig.cmake.in ""${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/SharkConfig.cmake"")

# Install the SharkConfig.cmake and SharkConfigVersion.cmake
install(FILES
	""${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/SharkConfig.cmake""
	""${PROJECT_BINARY_DIR}/SharkConfigVersion.cmake""
	""${PROJECT_SOURCE_DIR}/UseShark.cmake""
	DESTINATION ""${INSTALL_CMAKE_DIR}"" COMPONENT dev
)

# Install the export set for use with the install-tree
install(EXPORT SharkTargets DESTINATION ""${INSTALL_CMAKE_DIR}"" COMPONENT dev)

#####################################################################
#                  Configure the Shark.h file
#####################################################################
configure_file (
	""${CMAKE_SOURCE_DIR}/include/shark/Core/Shark.h.in""
	""${CMAKE_BINARY_DIR}/include/shark/Core/Shark.h""
)
install(FILES
	""${CMAKE_BINARY_DIR}/include/shark/Core/Shark.h""
	DESTINATION ""${SHARK_INSTALL_INCLUDE_DIR}/shark/Core/"" COMPONENT deV
)

###################################################################
#                           UNINSTALL                             #
###################################################################
# refer to
# http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F
# for details
configure_file(
	""${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in""
	""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
	IMMEDIATE @ONLY)

add_custom_target(uninstall
	COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
)
",3.1,3.1
7306,morganbengtsson,mos,False,False,False,False,False,1,C++,2020-05-05 10:47:58+00:00,2014-04-24 17:58:18+00:00,139,2380,"cmake_minimum_required (VERSION 3.1.0)
project(mos)

set(CMAKE_CXX_STANDARD 17)

# GLFW
set(GLFW_BUILD_DOCS OFF CACHE BOOL """" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL """" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL """" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL """")
set(GLFW_USE_DWM_SWAP_INTERVAL ON CACHE BOOL """" FORCE)
add_subdirectory(externals/glfw)

# OpenAL soft
set(ALSOFT_DLOPEN OFF CACHE BOOL """" FORCE)
set(ALSOFT_WERROR OFF CACHE BOOL """" FORCE)
set(ALSOFT_UTILS OFF CACHE BOOL """" FORCE)
set(ALSOFT_NO_CONFIG_UTIL OFF CACHE BOOL """" FORCE)
set(ALSOFT_EXAMPLES OFF CACHE BOOL """" FORCE)
set(ALSOFT_TESTS OFF CACHE BOOL """" FORCE)
set(ALSOFT_CONFIG OFF CACHE BOOL """" FORCE) 
set(ALSOFT_HRTF_DEFS OFF CACHE BOOL """" FORCE)
set(ALSOFT_AMBDEC_PRESETS OFF CACHE BOOL """" FORCE)
set(ALSOFT_INSTALL OFF CACHE BOOL """" FORCE)
add_subdirectory(externals/openal-soft)

# glad
add_subdirectory(externals/glad)

# glm
set(GLM_TEST_ENABLE OFF CACHE BOOL """" FORCE)
add_subdirectory(externals/glm)

# stb
add_subdirectory(externals/stb)

# unicode
set(UTF8_TESTS OFF CACHE BOOL """" FORCE)
set(UTF8_SAMPLES OFF CACHE BOOL """" FORCE)
add_subdirectory(externals/utfcpp)

# mos
file(GLOB ROOT_SOURCE src/mos/*.cpp)
file(GLOB GFX_SOURCE src/mos/gfx/*.cpp src/mos/gfx/renderer/*.cpp)
file(GLOB AUD_SOURCE src/mos/aud/*.cpp)
file(GLOB SIM_SOURCE src/mos/sim/*.cpp)
file(GLOB IO_SOURCE src/mos/io/*.cpp)
file(GLOB CORE_SOURCE src/mos/core/*.cpp)

file(GLOB ROOT_HEADER include/mos/*.hpp)
file(GLOB GFX_HEADER include/mos/gfx/*.hpp include/mos/gfx/renderer/*.hpp)
file(GLOB AUD_HEADER include/mos/aud/*.hpp)
file(GLOB SIM_HEADER include/mos/sim/*.hpp)
file(GLOB IO_HEADER include/mos/io/*.hpp)
file(GLOB CORE_HEADER include/mos/core/*.hpp)

file(GLOB VERTEX_SHADERS assets/shaders/*.vert)
file(GLOB FRAGMENT_SHADERS assets/shaders/*.frag)
file(GLOB GEOMETRY_SHADERS assets/shaders/*.geom)
file(GLOB BRDF_LUT assets/brdfLUT.png)

add_library(${PROJECT_NAME} STATIC
${ROOT_HEADER} ${GFX_HEADER} ${AUD_HEADER} ${SIM_HEADER} ${IO_HEADER} ${CORE_HEADER}
${ROOT_SOURCE} ${GFX_SOURCE} ${AUD_SOURCE} ${SIM_SOURCE} ${IO_SOURCE} ${CORE_SOURCE}
${VERTEX_SHADERS} ${FRAGMENT_SHADERS} ${GEOMETRY_SHADERS} ${BRDF_LUT})

target_compile_definitions(${PROJECT_NAME} PRIVATE MOS_EFX AL_ALEXT_PROTOTYPES)
target_compile_definitions(${PROJECT_NAME} PUBLIC GLM_ENABLE_EXPERIMENTAL)

target_include_directories(${PROJECT_NAME}
        PUBLIC
        include
        externals/glfw/include
        externals/openal-soft/include
        externals/glad/include
        externals/glm
        externals/nlohmann_json_release
        externals/stb
        externals/utfcpp/source
        )

target_link_libraries(${PROJECT_NAME} PUBLIC OpenAL)
target_link_libraries(${PROJECT_NAME} PUBLIC ${GL_LIBRARY} ${PLATFORM_SPECIFIC_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC glfw ${GLFW_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC stb)
target_link_libraries(${PROJECT_NAME} PUBLIC glad)

#Windows min/max header problem
target_compile_definitions(${PROJECT_NAME} PUBLIC NOMINMAX STB_IMAGE_IMPLEMENTATION)

add_custom_target(copy_resources DEPENDS ${FRAGMENT_SHADERS} ${VERTEX_SHADERS} ${GEOMETRY_SHADERS} ${BRDF_LUT})

#Copy shader files to assets and brdfLUT to assets
add_custom_command(TARGET copy_resources POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_CURRENT_SOURCE_DIR}/assets ${CMAKE_BINARY_DIR}/assets)
		
# Copy OpenAL dll on Windows
if(WIN32)
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
							COMMAND ${CMAKE_COMMAND} -E copy
							""$<TARGET_FILE:OpenAL>"" ""${CMAKE_BINARY_DIR}/"")
endif()
		
# Copy shaders on each build
add_dependencies(${PROJECT_NAME} copy_resources)


file(GLOB ASSETS assets/*)

add_custom_target(copy_assets DEPENDS ${ASSETS})

#Copy assets
add_custom_command(TARGET copy_assets POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/assets ${CMAKE_BINARY_DIR}/assets)

# Copy shaders on each build
add_dependencies(${PROJECT_NAME} copy_assets)
",3.1.0,3.1
7339,skystrife,cpptoml,False,False,False,False,False,21,C++,2020-04-20 19:02:36+00:00,2013-05-20 10:44:32+00:00,478,256,"cmake_minimum_required(VERSION 3.1.0)
project(cpptoml)

set(cpptoml_VERSION 0.4.0)
set(cpptoml_TOML_VERSION 0.4.0)

include(CheckCXXCompilerFlag)
include(CheckCXXSourceCompiles)
include(CheckCXXSourceRuns)
include(CMakePushCheckState)

cmake_push_check_state()

option(ENABLE_LIBCXX ""Use libc++ for the C++ standard library"" ON)
option(CPPTOML_BUILD_EXAMPLES ""Build examples"" ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/deps/meta-cmake)

if(UNIX OR MINGW)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -pedantic"")

  if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    if(CMAKE_GENERATOR STREQUAL ""Ninja"")
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fcolor-diagnostics"")
    endif()

    if(ENABLE_LIBCXX)
      find_package(LIBCXX REQUIRED)
      set_libcxx_required_flags()
    endif()
  endif()
endif()

set(CMAKE_REQUIRED_FLAGS ""${CMAKE_REQUIRED_FLAGS} ${CMAKE_CXX11_STANDARD_COMPILE_OPTION}"")

cmake_pop_check_state()

add_library(cpptoml INTERFACE)

target_include_directories(cpptoml INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

if (LIBDL_LIBRARY)
  target_link_libraries(cpptoml INTERFACE ${LIBDL_LIBRARY})
endif()

if (CXXABI_LIBRARY)
  target_link_libraries(cpptoml INTERFACE ${CXXABI_LIBRARY})
endif()

if (CPPTOML_BUILD_EXAMPLES)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  add_subdirectory(examples)
endif()

find_package(Doxygen)
if(DOXYGEN_FOUND AND NOT TARGET doc)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cpptoml.doxygen.in
    ${CMAKE_CURRENT_BINARY_DIR}/cpptoml.doxygen @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE}
    ${CMAKE_CURRENT_BINARY_DIR}/cpptoml.doxygen
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
endif()

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/cpptoml/cpptomlConfigVersion.cmake
  VERSION ${cpptoml_VERSION}
  COMPATIBILITY SameMajorVersion)
configure_file(cmake/cpptomlConfig.cmake.in
               ${CMAKE_CURRENT_BINARY_DIR}/cpptoml/cpptomlConfig.cmake
               COPYONLY)

install(TARGETS cpptoml
        EXPORT cpptoml-exports)
install(FILES include/cpptoml.h
        DESTINATION include)
install(EXPORT cpptoml-exports
        FILE cpptomlTargets.cmake
        DESTINATION lib/cmake/cpptoml)
install(FILES
          ${CMAKE_CURRENT_BINARY_DIR}/cpptoml/cpptomlConfigVersion.cmake
          ${CMAKE_CURRENT_BINARY_DIR}/cpptoml/cpptomlConfig.cmake
        DESTINATION
          lib/cmake/cpptoml)

export(EXPORT cpptoml-exports
       FILE ${CMAKE_CURRENT_BINARY_DIR}/cpptoml/cpptomlTargets.cmake)
export(PACKAGE cpptoml)
",3.1.0,3.1
7430,LibCompanion,libCompanion,False,False,False,False,False,2,C++,2019-07-16 20:08:49+00:00,2017-03-21 17:44:30+00:00,3,281,"#
# This program is an object recognition framework written with OpenCV.
# Copyright (C) 2016-2018 Andreas Sekulski, Dimitri Kotlovsky
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
cmake_minimum_required(VERSION 3.1)

# Set installation directory for WIN32 (on UNIX '/usr/local' should be the default)
if(WIN32)
    set(CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE PATH ""Installation Directory"")
endif()

# Configure CMake project
project(Companion)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Define CMake Flags
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release"")
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY ON)
set(CMAKE_DEBUG_POSTFIX ""D"")

# Define interactive CMake Flags
option(Companion_BUILD_SHARED_LIBRARY ""Build Companion as shared library"" OFF)

# Cuda and current samples are not supported when building for Windows Store
if(NOT WINDOWS_STORE)
    option(Companion_BUILD_SAMPLES ""Build all Companion samples"" OFF)
    option(Companion_USE_CUDA ""Use cuda implementation of Companion"" OFF)
    option(Companion_USE_XFEATURES_2D ""Use non free module"" OFF)
endif()

# Define global properties
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Configure dependencies
set(OpenCVComponents ""core"" ""imgproc"" ""imgcodecs"" ""features2d"" ""videoio"" ""calib3d"")
if(Companion_USE_CUDA)
    set(OpenCVComponents ${OpenCVComponents} ""cudafeatures2d"")
    add_definitions(-DCompanion_USE_CUDA)
endif()

if(Companion_USE_XFEATURES_2D)
    set(OpenCVComponents ${OpenCVComponents} ""xfeatures2d"")
    add_definitions(-DCompanion_USE_XFEATURES_2D)
endif()

find_package(OpenCV REQUIRED ${OpenCVComponents})
find_package(OpenMP REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
endif()

# For developer
if(Companion_DEBUG)
    add_definitions(-DCompanion_DEBUG)
endif()

# Configure Companion
add_subdirectory(Companion)

# Configure to build additional modules
if(Companion_BUILD_SAMPLES)
	if(EXISTS ""${PROJECT_SOURCE_DIR}/CompanionSamples/CMakeLists.txt"")
		add_subdirectory(CompanionSamples)
	else()
		set(Companion_SAMPLE_MODULE ""Path_to_Samples_Module"" CACHE PATH ""Sample module path"")
        add_subdirectory(${Companion_SAMPLE_MODULE} samples)
	endif()
endif()",3.1,3.1
7570,Inovesa,Inovesa,False,False,False,False,False,7,C++,2020-05-05 05:25:55+00:00,2016-11-16 09:39:08+00:00,10,1413,"cmake_minimum_required(VERSION 3.1)

project(inovesa)

## User configuration
# Enable interrupts (Ctrl+C)
add_definitions(-DINOVESA_ENABLE_INTERRUPT=1)


# (default) options for Debug and Release builds
SET( CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} ${-Wall}"" )
if((DEFINED CMAKE_BUILD_TYPE) AND (CMAKE_BUILD_TYPE STREQUAL ""Debug""))
    add_definitions(-Wextra)
    add_definitions(-g -DDEBUG=1)
    MESSAGE (""Doing debug compile, including debug symbols."")
else()
  if ((""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"") OR (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU""))
    add_definitions(-O3 )
  endif()
  add_definitions(-w )
  MESSAGE (""Doing release compile, using optimization flags."")
endif()

## end of user configuration

set (INOVESA_VERSION_MAJOR 1)
set (INOVESA_VERSION_MINOR 1)
set (INOVESA_VERSION_FIX 0)
# pre release numbers:
# -1: alpha
# -2: beta
# -3 RC1
# -n RC(n-2)

SET (COVERAGE OFF CACHE BOOL ""Coverage"")

configure_file (
  ""${PROJECT_SOURCE_DIR}/InovesaConfig.hpp.in""
  ""${PROJECT_BINARY_DIR}/InovesaConfig.hpp""
)
include_directories(""${PROJECT_BINARY_DIR}"")

aux_source_directory(./src SRC_LIST)

set(SRC_LIST
  ./src/CL/CLProfiler.cpp
  ./src/CL/OpenCLHandler.cpp
  ./src/IO/Display.cpp
  ./src/IO/FSPath.cpp
  ./src/IO/GUI/GUIElement.cpp
  ./src/IO/GUI/Plot1DLine.cpp
  ./src/IO/GUI/Plot2DPoints.cpp
  ./src/IO/GUI/Plot2DPrimitive.cpp
  ./src/IO/GUI/Plot3DColormap.cpp
  ./src/IO/HDF5File.cpp
  ./src/IO/ProgramOptions.cpp
  ./src/PS/ElectricField.cpp
  ./src/PS/PhaseSpace.cpp
  ./src/PS/PhaseSpaceFactory.cpp
  ./src/SM/DriftMap.cpp
  ./src/SM/FokkerPlanckMap.cpp
  ./src/SM/KickMap.cpp
  ./src/SM/DynamicRFKickMap.cpp
  ./src/SM/RFKickMap.cpp
  ./src/SM/Identity.cpp
  ./src/SM/SourceMap.cpp
  ./src/SM/WakeKickMap.cpp
  ./src/SM/WakePotentialMap.cpp
  ./src/SM/WakeFunctionMap.cpp
  ./src/Z/CollimatorImpedance.cpp
  ./src/Z/ConstImpedance.cpp
  ./src/Z/Impedance.cpp
  ./src/Z/ImpedanceFactory.cpp
  ./src/Z/FreeSpaceCSR.cpp
  ./src/Z/ParallelPlatesCSR.cpp
  ./src/Z/ResistiveWall.cpp
  ./src/MessageStrings.cpp
  ./src/main.cpp
)

set(INC_LIST
  ./inc/Array.h
  ./inc/CL/CLProfiler.hpp
  ./inc/CL/local_cl.hpp
  ./inc/CL/OpenCLHandler.hpp
  ./inc/PS/ElectricField.hpp
  ./inc/PS/PhaseSpace.hpp
  ./inc/PS/PhaseSpaceFactory.hpp
  ./inc/PS/Ruler.hpp
  ./inc/IO/Display.hpp
  ./inc/IO/FSPath.hpp
  ./inc/IO/GUI/GUIElement.hpp
  ./inc/IO/GUI/Plot1DLine.hpp
  ./inc/IO/GUI/Plot2DPoints.hpp
  ./inc/IO/GUI/Plot2DPrimitive.hpp
  ./inc/IO/GUI/Plot3DColormap.hpp
  ./inc/IO/HDF5File.hpp
  ./inc/IO/ProgramOptions.hpp
  ./inc/SM/DriftMap.hpp
  ./inc/SM/FokkerPlanckMap.hpp
  ./inc/SM/KickMap.hpp
  ./inc/SM/DynamicRFKickMap.hpp
  ./inc/SM/RFKickMap.hpp
  ./inc/SM/Identity.hpp
  ./inc/SM/SourceMap.hpp
  ./inc/SM/WakePotentialMap.hpp
  ./inc/SM/WakeKickMap.hpp
  ./inc/SM/WakeFunctionMap.hpp
  ./inc/Z/CollimatorImpedance.hpp
  ./inc/Z/ConstImpedance.hpp
  ./inc/Z/Impedance.hpp
  ./inc/Z/ImpedanceFactory.hpp
  ./inc/Z/FreeSpaceCSR.hpp
  ./inc/Z/ParallelPlatesCSR.hpp
  ./inc/Z/ResistiveWall.hpp
  ./inc/MessageStrings.hpp
  ./inc/defines.hpp
)

add_executable(${PROJECT_NAME} ${SRC_LIST} ${INC_LIST} ${MISC_LIST})

include(CheckIncludeFileCXX)

execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
add_definitions(""-DGIT_BRANCH=\""${GIT_BRANCH}\"""")

execute_process(
  COMMAND git rev-parse --verify HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
add_definitions(""-DGIT_COMMIT=\""${GIT_COMMIT}\"""")
include_directories(./inc)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# workaround CMake bug (e.g. in MacOS)
set(CMAKE_CXX_FLAGS ""-std=c++14 ${CMAKE_CXX_FLAGS}"")

# turn on automatic optimizations for current architecture when GCC is used
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
  add_definitions(-march=native)
  MESSAGE (""Builing for current architecture. Binary might not work on other CPU."")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")


## OpenCL (optional)
IF((NOT DEFINED ENV{INOVESA_USE_OPENCL}) OR (""$ENV{INOVESA_USE_OPENCL}"" EQUAL 1))
find_package(OpenCL QUIET)
IF(OPENCL_FOUND)
    add_definitions( -DINOVESA_USE_OPENCL=1)
    MESSAGE (""Found OpenCL. Will add support."")
    SET(LIBS ${LIBS} ${OPENCL_LIBRARIES})
    include_directories(${OPENCL_INCLUDE_DIRS})
    find_package(clFFT QUIET)
    IF(clFFT_FOUND)
        add_definitions( -DINOVESA_USE_CLFFT=1)
        MESSAGE (""Found clFFT. Will add support."")
        SET(LIBS ${LIBS} ${CLFFT_LIBRARIES})
        include_directories(${CLFFT_INCLUDE_DIRS})
    ENDIF()
    IF((DEFINED CMAKE_BUILD_TYPE) AND (CMAKE_BUILD_TYPE STREQUAL ""Debug""))
        # Enable OpenCL profiling
        add_definitions(-DINOVESA_ENABLE_CLPROFILING=1)
    ENDIF()
ELSE()
    MESSAGE (""Did not find OpenCL. Will compile without OpenCL support."")
ENDIF()
ELSE()
    MESSAGE (""Excluded OpenCL. Will compile without OpenCL support."")
ENDIF()

## OpenGL (optional)
IF((NOT DEFINED ENV{INOVESA_USE_OPENGL}) OR (""$ENV{INOVESA_USE_OPENGL}""  EQUAL 1))
find_package(OpenGL QUIET)
find_package(GLEW QUIET)
find_package(GLFW QUIET)
IF((OPENGL_FOUND) AND (GLEW_FOUND) AND (GLFW_FOUND))
    add_definitions( -DINOVESA_USE_OPENGL=1)
    MESSAGE (""Found OpenGL. Will add support."")
    add_definitions( -DGLFW_VERSION_MAJOR=${GLFW_VERSION_MAJOR})
    include_directories(${GLEW_INCLUDE_DIRS} ${GLFW_INCLUDE_DIRS})
    set (LIBS ${LIBS} ${GLFW_LIBRARIES} ${GLEW_LIBRARIES}
              ${GL_LIBRARY} ${OPENGL_LIBRARIES}
    )
ELSE()
    MESSAGE (""Did not find OpenGL. Will compile without OpenGL support."")
ENDIF()
ELSE()
    MESSAGE (""Excluded OpenGL. Will compile without OpenGL support."")
ENDIF()

## Boost (needed)
find_package(Boost COMPONENTS filesystem program_options system REQUIRED QUIET)
include_directories(${Boost_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${Boost_LIBRARIES})

## FFTW (needed)
find_package(FFTW REQUIRED QUIET)
include_directories(${FFTW_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${FFTW_LIBRARIES} )

## HDF5 (optional)
find_package(HDF5 COMPONENTS CXX QUIET)
IF(HDF5_FOUND)
    add_definitions( -DINOVESA_USE_HDF5=1)
    MESSAGE (""Found HDF5. Will add support."")
    include_directories(${HDF5_INCLUDE_DIRS})
    set (LIBS ${LIBS} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES})
ELSE()
    MESSAGE (""Did not find HDF5. Will compile without HDF5 support."")
ENDIF()

## PNG (optional)
find_package(PNG QUIET)
IF(PNG_FOUND)
find_package(PNG++ QUIET)
ENDIF()
IF(PNG++_FOUND)
    add_definitions( -DINOVESA_USE_PNG=1)
    include_directories(${PNG_INCLUDE_DIRS})
    SET(LIBS ${LIBS} ${PNG_LIBRARIES})
    MESSAGE (""Found PNG++. Will add PNG support."")
ELSE()
    MESSAGE (""Did not find PNG++. Will compile without PNG support."")
ENDIF()


IF(COVERAGE AND (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU""))
    MESSAGE (""Build for coverage information."")
    target_compile_options(${PROJECT_NAME} PRIVATE --coverage)
    target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBS} --coverage)
ELSE()
    target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBS})
ENDIF()


INSTALL(TARGETS inovesa RUNTIME DESTINATION bin)

",3.1,3.1
7771,darktable-org,darktable,False,False,False,False,False,313,C,2020-05-17 18:12:52+00:00,2012-03-21 21:53:04+00:00,4028,25705,"cmake_minimum_required(VERSION 3.10.0)

cmake_policy(SET CMP0011 NEW)
cmake_policy(SET CMP0025 NEW)
cmake_policy(SET CMP0048 NEW)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/modules/"")
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/"")

### Add defaults for cmake
# These defaults need to be included before the project() call.
include(DefineCMakeDefaults)

If(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR ""In-source builds are not permitted. Make a separate folder for building:\nmkdir build; cd build; cmake ..\nBefore that, remove the files already created:\nrm -rf CMakeCache.txt CMakeFiles"")
endif(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)

if(DEFINED PROJECT_VERSION)
  project(darktable VERSION ${PROJECT_VERSION} LANGUAGES CXX C)
else()
  # Actual version string will be generated from git later
  project(darktable VERSION 0 LANGUAGES CXX C)
endif()

# Allow forcing the C/CPP compiler that is actually used during the compilation
# to something other than what is used by the cmake run. This is useful when
# the compiler for some reason breaks the initial cmake checks but works fine
# for actually compiling darktable. This allows building darktable using
# afl-clang-fast achieving a >4x speedup in fuzzing.
IF(DEFINED DT_FORCE_C_COMPILER)
  set(CMAKE_C_COMPILER ${DT_FORCE_C_COMPILER})
endif()
IF(DEFINED DT_FORCE_CXX_COMPILER)
  set(CMAKE_CXX_COMPILER ${DT_FORCE_CXX_COMPILER})
endif()

include(DefineOptions.cmake)

# Include GNUInstallDirs, which sets sensible defaults for install directories.
# See https://cmake.org/cmake/help/v3.0/module/GNUInstallDirs.html for further information.
# These values can be easily overridden if required.
# Some defaults are set for OpenBSD as well (info and man pages).

include(GNUInstallDirs)
include(FeatureSummary)

# https://medium.com/@alasher/colored-c-compiler-output-with-ninja-clang-gcc-10bfe7f2b949
if(${FORCE_COLORED_OUTPUT})
  if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
    add_compile_options(-fdiagnostics-color=always)
  elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    add_compile_options(-fcolor-diagnostics)
  endif()
endif()

# Whether to use relative paths for the build RPATH
if (APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(CMAKE_INSTALL_LIBDIR_RPATH @loader_path/../${CMAKE_INSTALL_LIBDIR}/darktable)
else()
    set(CMAKE_INSTALL_LIBDIR_RPATH $ORIGIN/../${CMAKE_INSTALL_LIBDIR}/darktable)
endif()

if (USE_OPENMP)
    if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR
        CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"")

        # Clang has an option to specify the OpenMP standard to use. Specify it.
        # FIXME: Implement this in FindOpenMP.cmake
        set(OPENMP_VERSION_SPECIFIER ""-fopenmp-version=45"")

        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OPENMP_VERSION_SPECIFIER}"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OPENMP_VERSION_SPECIFIER}"")
    endif()

    find_package(OpenMP 4.5 REQUIRED)
endif()

# Check for base threading library
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
find_package(Threads REQUIRED)

# Fail if returned library is not pthread
if (NOT CMAKE_USE_PTHREADS_INIT)
    message(FATAL_ERROR ""POSIX threads: not found"")
endif()

include(ConfigureChecks.cmake)

include(CheckCCompilerFlag)

# Check if this is source package build
if(NOT EXISTS ${CMAKE_SOURCE_DIR}/.git)
  set(SOURCE_PACKAGE 1)
else()
  set(SOURCE_PACKAGE 0)
endif()

if(BUILD_SSE2_CODEPATHS)
  CHECK_C_COMPILER_FLAG(""-msse2"" _MSSE2)
  if(NOT _MSSE2)
    MESSAGE(WARNING ""Building of SSE2-optimized codepaths is enabled, but the compiler does not understand -msse2."")
    set(BUILD_SSE2_CODEPATHS OFF)
  endif()
endif()

MESSAGE(STATUS ""Building SSE2-optimized codepaths: ${BUILD_SSE2_CODEPATHS}"")

#
# Set platform defaults...
#
if(APPLE)
	message(""-- Mac OS X build detected, setting default features"")

	# prefer macports and/or user-installed libraries over system ones
	LIST(APPEND CMAKE_PREFIX_PATH /opt/local /usr/local)
	set(CMAKE_FIND_FRAMEWORK ""LAST"")
	# except libstdc++ (only one linked via -l flag, not full path)
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -L/usr/lib"" CACHE STRING """" FORCE)
	set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -L/usr/lib"" CACHE STRING """" FORCE)
	set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -L/usr/lib"" CACHE STRING """" FORCE)
	mark_as_advanced(CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS)

	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_DARWIN_C_SOURCE"")
	add_definitions(""-DOS_OBJECT_USE_OBJC=0"")
endif(APPLE)

include(compiler-versions)

if(WIN32)
  message(""-- Win32 build detected, setting default features"")
  set(CMAKE_FIND_LIBRARY_SUFFIXES .dll ${CMAKE_FIND_LIBRARY_SUFFIXES})
  set(USE_COLORD OFF)
  set(USE_KWALLET OFF)
  set(BUILD_CMSTEST OFF)
  set(BUILD_PRINT OFF)
  set(TESTBUILD_OPENCL_PROGRAMS OFF)
  if(BUILD_MSYS2_INSTALL)
    add_definitions(-DMSYS2_INSTALL)
  endif()
endif(WIN32)


#
# Set package version
#
file(MAKE_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/src/"") # the src/ subdirectory won't exist yet

# adds custom command to generate header containing version info.
# takes 1 optional parameter - version override.
function(generate_version_gen_c)
  if(ARGC EQUAL 2)
    # if a version override was specified, use it
    set(_VERSION ""${ARGV0}"")
    set(_TYPE ""${ARGV1}"")
  else()
    # else, the tool will autodetect the version
    set(_VERSION """")
    set(_TYPE ""git checkout"")
  endif()

  add_custom_target(
    create_version_gen ALL
    COMMAND ${CMAKE_SOURCE_DIR}/tools/create_version_c.sh ${CMAKE_BINARY_DIR}/src/version_gen.c ${_VERSION}
    DEPENDS ${CMAKE_SOURCE_DIR}/tools/create_version_c.sh
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT ""Updating version string (${_TYPE})""
    VERBATIM # else might break when export-subst was needed but did not happen
  )
endfunction(generate_version_gen_c)

if(DEFINED PROJECT_VERSION AND PROJECT_VERSION VERSION_GREATER 0)
  #project version is defined by -D on the cmake command line
  # only use that value, do not update it at make time
  generate_version_gen_c(${PROJECT_VERSION} ""version override"")
else(DEFINED PROJECT_VERSION AND PROJECT_VERSION VERSION_GREATER 0)
  if(NOT SOURCE_PACKAGE) # i.e., a git checkout
    # this part is setting the corresponding CMake variable which gets used for example when creating a source package
    execute_process(
      COMMAND sh ${CMAKE_SOURCE_DIR}/tools/get_git_version_string.sh OUTPUT_STRIP_TRAILING_WHITESPACE
      OUTPUT_VARIABLE PROJECT_VERSION
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    # FIXME: PROJECT_VERSION will not be updated automatically, until you rerun cmake
    generate_version_gen_c()
  else(NOT SOURCE_PACKAGE)
    if(NOT EXISTS ${CMAKE_SOURCE_DIR}/src/version_gen.c)
      # should be expanded by git archive due to export-subst in .gitattributes
      set(PROJECT_VERSION ""archive-$Format:%H$"")
      # but was it expanded?
      if(PROJECT_VERSION MATCHES Format)
        set(PROJECT_VERSION ""unknown-version"")
      endif(PROJECT_VERSION MATCHES Format)
      generate_version_gen_c(${PROJECT_VERSION} ""source package"")
    else(NOT EXISTS ${CMAKE_SOURCE_DIR}/src/version_gen.c)
      # no need to create version_gen.c if it's already shipped. that is for example the case with our release tarballs
      execute_process(
        COMMAND sh ${CMAKE_SOURCE_DIR}/tools/parse_version_c.sh ${CMAKE_SOURCE_DIR}/src/version_gen.c OUTPUT_STRIP_TRAILING_WHITESPACE
        OUTPUT_VARIABLE PROJECT_VERSION
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      )
      # FIXME: (irrelevant) PROJECT_VERSION will not be updated automatically, until you rerun cmake
      # but generate_version target expects it to be in build dir, so we need to copy it
      add_custom_target(
        create_version_gen ALL
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/src/version_gen.c ${CMAKE_BINARY_DIR}/src/version_gen.c
        DEPENDS ${CMAKE_SOURCE_DIR}/src/version_gen.c
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        COMMENT ""Updating version string (source package) - ${PROJECT_VERSION}""
      )
    endif(NOT EXISTS ${CMAKE_SOURCE_DIR}/src/version_gen.c)
  endif(NOT SOURCE_PACKAGE)
endif(DEFINED PROJECT_VERSION AND PROJECT_VERSION VERSION_GREATER 0)

# needed to make sure that version string is actually updated.
add_custom_command(
  OUTPUT ${CMAKE_BINARY_DIR}/src/version_gen.c
  COMMAND ${CMAKE_COMMAND} -E echo
  DEPENDS create_version_gen
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

# WARNING: no target should reference version_gen.c directly. instead, they should add_dependencies(yourtarget generate_version)
add_custom_target(
  generate_version ALL
  DEPENDS ${CMAKE_BINARY_DIR}/src/version_gen.c
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

# Add a sensible build type default and warning because empty means no optimization and no debug info.
if(NOT CMAKE_BUILD_TYPE)
	message(""WARNING: CMAKE_BUILD_TYPE is not defined!\n         Defaulting to CMAKE_BUILD_TYPE=RelWithDebInfo. Use ccmake to set a proper value."")
	SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

if(CMAKE_BUILD_TYPE MATCHES ""^[Dd][Ee][Bb][Uu][Gg]$"" AND SOURCE_PACKAGE)
  message(FATAL_ERROR ""ERROR: Debug build type most likely isn't what you want, use RelWithDebInfo instead. If you're absolutely sure that this is what you want then just comment out this line."")
endif()

include(compiler-warnings)
include(windows-macros)

# we need some external programs for building darktable
message(STATUS ""Looking for external programs"")
set(EXTERNAL_PROGRAMS_FOUND 1)

# we need perl for introspection
find_program(perl_BIN perl)
if(${perl_BIN} STREQUAL ""perl_BIN-NOTFOUND"")
  message(STATUS ""Missing perl"")
  set(EXTERNAL_PROGRAMS_FOUND 0)
else(${perl_BIN} STREQUAL ""perl_BIN-NOTFOUND"")
  message(STATUS ""Found perl"")
endif(${perl_BIN} STREQUAL ""perl_BIN-NOTFOUND"")

# we need intltool-merge for darktable.desktop
find_program(intltool_merge_BIN intltool-merge)
if(${intltool_merge_BIN} STREQUAL ""intltool_merge_BIN-NOTFOUND"")
  message(STATUS ""Missing intltool-merge"")
  set(EXTERNAL_PROGRAMS_FOUND 0)
else(${intltool_merge_BIN} STREQUAL ""intltool_merge_BIN-NOTFOUND"")
  message(STATUS ""Found intltool-merge"")
endif(${intltool_merge_BIN} STREQUAL ""intltool_merge_BIN-NOTFOUND"")

# we need desktop-file-validate to check darktable.desktop
find_program(desktop_file_validate_BIN desktop-file-validate)
if(${desktop_file_validate_BIN} STREQUAL ""desktop_file_validate_BIN-NOTFOUND"")
  message(STATUS ""Missing desktop-file-validate, problems in darktable.desktop might go unnoticed"")
  set(VALIDATE_DESKTOP_FILE 0)
else(${desktop_file_validate_BIN} STREQUAL ""desktop_file_validate_BIN-NOTFOUND"")
  message(STATUS ""Found desktop-file-validate"")
  set(VALIDATE_DESKTOP_FILE 1)
endif(${desktop_file_validate_BIN} STREQUAL ""desktop_file_validate_BIN-NOTFOUND"")

# we need appstream-util to check darktable.appdata.xml
if(VALIDATE_APPDATA_FILE)
  find_program(appstream_util_BIN appstream-util)
  if(${appstream_util_BIN} STREQUAL ""appstream_util_BIN-NOTFOUND"")
    message(STATUS ""Missing appstream-util, problems in darktable.appdata.xml might go unnoticed"")
    set(VALIDATE_APPDATA_FILE OFF)
  else(${appstream_util_BIN} STREQUAL ""appstream_util_BIN-NOTFOUND"")
    message(STATUS ""Found appstream-util"")
  endif(${appstream_util_BIN} STREQUAL ""appstream_util_BIN-NOTFOUND"")
endif(VALIDATE_APPDATA_FILE)

if(TESTBUILD_OPENCL_PROGRAMS)
  set(TESTBUILD_OPENCL_PROGRAMS OFF)

  macro(find_llvm versions)
    foreach(version ${versions})
      find_package(LLVM ${version} CONFIG)
      if(LLVM_FOUND)
        break()
      endif()
    endforeach()
  endmacro()

  # 3.9 is the first version with which this works.
  find_llvm(""10;9;8;7;6.0;5.0;4.0;3.9"")

  if (LLVM_FOUND)
    message(STATUS ""Found LLVM ${LLVM_PACKAGE_VERSION}"")

    find_program(CLANG_OPENCL_COMPILER
      NAMES clang-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR} clang-${LLVM_PACKAGE_VERSION} clang${LLVM_VERSION_MAJOR}${LLVM_VERSION_MINOR} clang-${LLVM_VERSION_MAJOR} clang${LLVM_VERSION_MAJOR}
    )

    if (NOT ${CLANG_OPENCL_COMPILER} STREQUAL ""CLANG_OPENCL_COMPILER-NOTFOUND"")
      message(STATUS ""Found clang compiler - ${CLANG_OPENCL_COMPILER}"")

      find_path(CLANG_OPENCL_INCLUDE_DIR opencl-c.h
        HINTS ${LLVM_INSTALL_PREFIX}/lib/clang ${LLVM_INSTALL_PREFIX}/lib64/clang
        PATH_SUFFIXES include ${LLVM_PACKAGE_VERSION}/include
        NO_DEFAULT_PATH
      )

      if (NOT ${CLANG_OPENCL_INCLUDE_DIR} STREQUAL ""CLANG_OPENCL_INCLUDE_DIR-NOTFOUND"")
        message(STATUS ""Found clang opencl-c.h header in ${CLANG_OPENCL_INCLUDE_DIR}"")
        set(TESTBUILD_OPENCL_PROGRAMS ON)
      else()
        message(WARNING ""Could not find clang opencl-c.h header include dir"")
        message(WARNING ""Test-compilation of OpenCL programs can not be done."")
      endif()
    else()
      message(WARNING ""Could not find appropriate clang compiler"")
      message(WARNING ""Test-compilation of OpenCL programs can not be done."")
    endif()
  else()
    message(WARNING ""Could not find LLVM 3.9+"")
    message(WARNING ""Test-compilation of OpenCL programs can not be done."")
  endif()
endif()

if(USE_OPENCL AND TESTBUILD_OPENCL_PROGRAMS)
  message(STATUS ""Will be able to test-compile OpenCL programs. Nice."")
elseif(USE_OPENCL)
  message(STATUS ""Test-compilation of OpenCL programs is disabled."")
endif()

# we need jsonschema to check noiseprofiles.json
find_program(jsonschema_BIN jsonschema)
if(${jsonschema_BIN} STREQUAL ""jsonschema_BIN-NOTFOUND"")
  message(STATUS ""Missing jsonschema, problems in noiseprofiles.json might go unnoticed"")
  set(VALIDATE_JSON 0)
else(${jsonschema_BIN} STREQUAL ""jsonschema_BIN-NOTFOUND"")
  message(STATUS ""Found jsonschema"")
  set(VALIDATE_JSON 1)
endif(${jsonschema_BIN} STREQUAL ""jsonschema_BIN-NOTFOUND"")

# we need an xslt interpreter to generate preferences_gen.h and darktablerc
find_program(Xsltproc_BIN xsltproc)
if(${Xsltproc_BIN} STREQUAL ""Xsltproc_BIN-NOTFOUND"")
  message(STATUS ""Missing xsltproc"")
  find_program(Saxon_BIN saxon-xslt)
  if(${Saxon_BIN} STREQUAL ""Saxon_BIN-NOTFOUND"")
    message(STATUS ""Missing saxon-xslt"")
    message(STATUS ""No xslt interpreter found"")
    set(EXTERNAL_PROGRAMS_FOUND 0)
  else(${Saxon_BIN} STREQUAL ""Saxon_BIN-NOTFOUND"")
    message(STATUS ""Found saxon-xslt"")
  endif(${Saxon_BIN} STREQUAL ""Saxon_BIN-NOTFOUND"")
else(${Xsltproc_BIN} STREQUAL ""Xsltproc_BIN-NOTFOUND"")
  message(STATUS ""Found xsltproc"")
endif(${Xsltproc_BIN} STREQUAL ""Xsltproc_BIN-NOTFOUND"")

# do we have xmllint?
if(USE_XMLLINT)
  find_program(Xmllint_BIN xmllint)
  if(${Xmllint_BIN} STREQUAL ""Xmllint_BIN-NOTFOUND"")
    message(STATUS ""Missing xmllint"")
    set(USE_XMLLINT OFF)
  else(${Xmllint_BIN} STREQUAL ""Xmllint_BIN-NOTFOUND"")
    message(STATUS ""Found xmllint"")
  endif(${Xmllint_BIN} STREQUAL ""Xmllint_BIN-NOTFOUND"")
endif(USE_XMLLINT)

find_program(exiftool_BIN exiftool)
if(${exiftool_BIN} STREQUAL ""exiftool_BIN-NOTFOUND"")
  message(STATUS ""Missing exiftool"")
  set(HAVE_EXIFTOOL 0)
else()
  message(STATUS ""Found exiftool"")
  set(HAVE_EXIFTOOL 1)
endif()

# done with looking for programs
if(NOT EXTERNAL_PROGRAMS_FOUND)
  message(FATAL_ERROR ""Some external programs couldn't be found"")
else(NOT EXTERNAL_PROGRAMS_FOUND)
  message(STATUS ""All external programs found"")
endif(NOT EXTERNAL_PROGRAMS_FOUND)

# The path can be modified by setting CMAKE_INSTALL_LOCALEDIR
if(USE_NLS)
    find_package(Gettext)
    if(GETTEXT_MSGFMT_EXECUTABLE)
        message(STATUS ""Found msgfmt to convert .po file. Translation enabled"")
        add_subdirectory(po)
    else()
        message(STATUS ""Cannot find msgfmt to convert .po file. Translation won't be enabled"")
    endif()
endif(USE_NLS)

# needed to generate file ""preferences_gen.h"" accordingly
if(USE_OPENCL)
	SET(HAVE_OPENCL 1)
else()
	SET(HAVE_OPENCL 0)
endif(USE_OPENCL)

if(NOT SOURCE_PACKAGE AND NOT (CMAKE_VERSION VERSION_LESS 3.3) AND DEFINED ENV{_DO_IWYU})
  find_program(iwyu_path NAMES include-what-you-use iwyu)

  if(iwyu_path)
    set(DT_CMAKE_INCLUDE_WHAT_YOU_USE ${iwyu_path} -Xiwyu --mapping_file=${CMAKE_SOURCE_DIR}/iwyu.imp -Xiwyu --prefix_header_includes=add)
  endif()

  find_program(iwyu_tool_path NAMES iwyu_tool.py)
  if (iwyu_tool_path)
    add_custom_command(
      OUTPUT ""${CMAKE_BINARY_DIR}/iwyu.log""
      COMMAND ""${iwyu_tool_path}"" -v -p ""${CMAKE_BINARY_DIR}""
              -- --mapping_file=${CMAKE_SOURCE_DIR}/iwyu.imp
              --prefix_header_includes=add 2>
              ""${CMAKE_BINARY_DIR}/iwyu.log""
      WORKING_DIRECTORY ""${CMAKE_BINARY_DIR}""
      COMMENT ""Running include-what-you-use tool""
      VERBATIM
    )
    add_custom_target(iwyu
      DEPENDS ""${CMAKE_BINARY_DIR}/iwyu.log""
      VERBATIM
    )
  endif()

  find_program(fix_includes_path NAMES fix_includes.py)
  if (fix_includes_path)
    add_custom_target(iwyu_fix
      COMMAND ""${fix_includes_path}"" --noblank_lines --comments
              --nosafe_headers < ""${CMAKE_BINARY_DIR}/iwyu.log"" || true
      COMMAND ${CMAKE_COMMAND} -E remove ""${CMAKE_BINARY_DIR}/iwyu.log""
      DEPENDS ""${CMAKE_BINARY_DIR}/iwyu.log""
      WORKING_DIRECTORY ""${CMAKE_BINARY_DIR}""
      COMMENT ""Running include-what-you-use fix_includes tool""
      VERBATIM
    )
  endif()
endif()

if(BUILD_TESTING)
  find_package(cmocka 1.1.0 CONFIG REQUIRED)
  include(AddCMockaTest)
  include(AddCMockaMockTest)
endif(BUILD_TESTING)

#
# Test SSE level
#
# if(NOT USE_SSE_FLAG)
# 	set(SSE_C_TESTS ""sse4"" ""sse3"" ""sse2"" ""sse"")
# 	message(""-- Checking SSE instructions support by current CPU"")
# 	foreach(sse_test ${SSE_C_TESTS})
# 		if(NOT SSE_FOUND)
# 			if(WIN32)
# 				set(SSE_CHECK_COMMAND ""FAILURE"")
# 			elseif(APPLE)
# 				set(SSE_CHECK_COMMAND sysctl -a | grep ${sse_test})
# 			else()#other os
# 				set(SSE_CHECK_COMMAND grep ${sse_test} /proc/cpuinfo)
# 			endif(WIN32)
# 			execute_process(COMMAND ${SSE_CHECK_COMMAND} RESULT_VARIABLE ret_var OUTPUT_VARIABLE out_var)
#
# 			if(ret_var EQUAL 0) # grep returns 0 on success
# 				set(SSE_FOUND TRUE)
# 				message(""--  ${sse_test} detected and working."")
# 				set(USE_SSE_SET ${sse_test})
# 			endif(ret_var EQUAL 0)
#
# 		endif(NOT SSE_FOUND)
# 	endforeach(sse_test)
# endif(NOT USE_SSE_FLAG)
#
# # set the SSE
# if(USE_SSE_SET)
# 	set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ""-m${USE_SSE_SET}"")
# endif(USE_SSE_SET)

# setup some theme specific variables
set(THEME hicolor)
set(THEME_DIRECTORY ""${CMAKE_INSTALL_DATAROOTDIR}/icons/${THEME}"")

# we need some specific functions:
if(NOT WIN32)
    if(CMAKE_SYSTEM MATCHES ""SunOS.*"")
        add_definitions(""-D_XOPEN_SOURCE=600"")
    else()
        add_definitions(""-D_XOPEN_SOURCE=700"")
    endif(CMAKE_SYSTEM MATCHES ""SunOS.*"")
endif(NOT WIN32)

# Set default component name - that way external modules like RawSpeed will install their
# materials under the default component and not under 'Unspecified'
set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME DTApplication)

# lets continue into build directories
include(data/supported_extensions.cmake) # this file needs to be included first as it gets amended in src/
add_subdirectory(src) # src/ needs to be before data/ so that the correct CSS file gets installed
add_subdirectory(data)
add_subdirectory(doc)
add_subdirectory(tools)

# This contains fixup_bundle
# And adding a separate subderectory as a last one will make sure
# that fixup_bundle will run _after_ all files has been installed
add_subdirectory(packaging)

include(cmake/darktable-packaging.cmake)

# uninstall target
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

feature_summary(WHAT ALL)
",3.10.0,3.1
7774,periscop,openscop,False,False,False,False,False,13,C,2020-02-13 15:12:25+00:00,2013-06-03 21:09:32+00:00,7,375,"cmake_minimum_required(VERSION 3.1)

#///////////////////////////////////////////////////////////////////#
#                              PROJECT                              #
#///////////////////////////////////////////////////////////////////#

set(OSL_VERSION_MAJOR 0)
set(OSL_VERSION_MINOR 9)
set(OSL_VERSION_PATCH 2)
set(PACKAGE_VERSION
  ${OSL_VERSION_MAJOR}.${OSL_VERSION_MINOR}.${OSL_VERSION_PATCH})

project(osl
  LANGUAGES C)

# Default to Debug build
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
  message(STATUS ""No building type advertised, default to Release"")
endif()

#///////////////////////////////////////////////////////////////////#
#                           DEPENDENCIES                            #
#///////////////////////////////////////////////////////////////////#

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)

find_package(GMP)
if(GMP_FOUND)
  add_library(gmp INTERFACE IMPORTED)
  set_property(TARGET gmp
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${GMP_INCLUDE_DIRS})
  set_property(TARGET gmp
    PROPERTY INTERFACE_LINK_LIBRARIES ${GMP_LIBRARIES})
else()
  message(STATUS ""GMP not found, using old style integers"")
endif()

#///////////////////////////////////////////////////////////////////#
#                        COMPILATION OPTIONS                        #
#///////////////////////////////////////////////////////////////////#

option(BUILD_SHARED_LIBS
  ""Build as shared lib (default). Set to FALSE if you want static library""
  TRUE)

include(cmake/compiler-flags.cmake)

set(CMAKE_C_FLAGS_RELEASE ""-O3 -mtune=generic"")
set(CMAKE_C_FLAGS_DEBUG
  ""${COMPILER_AVALIABLE_WARNINGS} ${COMPILER_ADDRESS_SANITIZER_FLAG} ${COMPILER_UNDEFINED_SANITIZER_FLAG} -Og -g"")
set(CMAKE_C_FLAGS_OPTIMIZED
  ""${COMPILER_LTO_FLAG} ${COMPILER_MARCH_NATIVE} -O3"")
set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELEASE} -g"")

# Use full RPATH on build tree
set(CMAKE_SKIP_BUILD_RPATH FALSE)
# Do not build with install RPATH
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
# Set the RPATH when install
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# Only set RPATH if the installation directory is not a system directory
LIST(FIND
  CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib""
  isSystemDir)
if(""${isSystemDir}"" STREQUAL ""-1"")
  set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
else()
  set(CMAKE_INSTALL_RPATH """")
endif()

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/include/osl/scop.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/include/osl/scop.h)

add_subdirectory(source)

#///////////////////////////////////////////////////////////////////#
#                           DOCUMENTATION                           #
#///////////////////////////////////////////////////////////////////#

add_subdirectory(doc)

#///////////////////////////////////////////////////////////////////#
#                               TEST                                #
#///////////////////////////////////////////////////////////////////#

enable_testing()
add_subdirectory(tests)

#///////////////////////////////////////////////////////////////////#
#                             INSTALL                               #
#///////////////////////////////////////////////////////////////////#

install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/include/""
  DESTINATION include FILES_MATCHING PATTERN ""*.h"")
install(DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/include/""
  DESTINATION include FILES_MATCHING PATTERN ""*.h"")

configure_file(
  ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
  IMMEDIATE @ONLY)
add_custom_target(uninstall
  COMMAND ${CMAKE_COMMAND} -P
  ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

#///////////////////////////////////////////////////////////////////#
#                           USER INFOS                              #
#///////////////////////////////////////////////////////////////////#

message(STATUS """")
message(STATUS ""************************* OSL *************************"")
message(STATUS """")
message(STATUS ""Configuration done."")

string(TOUPPER ${CMAKE_BUILD_TYPE} CURRENT_BUILD_TYPE)
if (CURRENT_BUILD_TYPE MATCHES RELEASE)
  message(STATUS ""Build type is Release"")
  message(STATUS ""C compiler = ${CMAKE_C_COMPILER}"")
  message(STATUS ""C flags    =  ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}"")
elseif(CURRENT_BUILD_TYPE MATCHES OPTIMIZED)
  message(STATUS ""C compiler = ${CMAKE_C_COMPILER}"")
  message(STATUS ""C flags    = ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_OPTIMIZED}"")
elseif(CURRENT_BUILD_TYPE MATCHES RELWITHDEBINFO)
  message(STATUS ""C compiler = ${CMAKE_C_COMPILER}"")
  message(STATUS ""C flags    = ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELWITHDEBINFO}"")
else(CURRENT_BUILD_TYPE MATCHES DEBUG)
  message(STATUS ""C compiler = ${CMAKE_C_COMPILER}"")
  message(STATUS ""C flags    = ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}"")
else(CURRENT_BUILD_TYPE MATCHES DEBUG)
  message(STATUS ""C compiler = ${CMAKE_C_COMPILER}"")
  message(STATUS ""C flags    = ${CMAKE_C_FLAGS}"")
endif(CURRENT_BUILD_TYPE MATCHES RELEASE)

message(STATUS """")
message(STATUS ""You can execute:"")
message(STATUS ""    make          # To compile osl library"")
if (PYTHONINTERP_FOUND)
  message(STATUS ""    make test     # To execute tests"")
endif()
message(STATUS ""    make install  # To install library, include and CMake module"")
message(STATUS ""                  # If you need root access:"")
message(STATUS ""                  #     sudo make install"")
message(STATUS ""                  #     su -c \""make install\"""")
if(DOXYGEN_FOUND)
  message(STATUS ""    make doxygen  # To generate the Doxygen"")
endif()
if(texi2pdf_exe)
  message(STATUS ""    make doc      # To generate the documentation"")
endif()
message(STATUS """")
message(STATUS ""******************************************************"")
message(STATUS """")
",3.1,3.1
7952,cellml,libcellml,False,False,False,False,False,17,C++,2020-05-15 00:41:23+00:00,2015-04-16 04:10:34+00:00,4,3631,"# Copyright libCellML Contributors
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.cmake_minimum_required (VERSION 3.1)

cmake_minimum_required(VERSION 3.5.2)

set(PROJECT_NAME libCellML)
project(${PROJECT_NAME} VERSION 0.1.0 LANGUAGES CXX)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(common)
include(environmentchecks)

# Use the following variables when configuring the build from the command line to
# set the corresponding cache variables.

# COVERAGE ==> LIBCELLML_COVERAGE
set(_PARAM_ANNOTATION ""Enable coverage testing."")
if(COVERAGE_TESTING_AVAILABLE)
  set(LIBCELLML_COVERAGE ON CACHE BOOL ${_PARAM_ANNOTATION})
endif()
if(DEFINED COVERAGE AND COVERAGE_TESTING_AVAILABLE)
  set(LIBCELLML_COVERAGE ""${COVERAGE}"" CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
elseif(COVERAGE)
  message(WARNING ""Coverage testing requested but gcov or its requirements not found!"")
endif()
unset(COVERAGE CACHE)

# MEMCHECK ==> LIBCELLML_MEMCHECK
set(_PARAM_ANNOTATION ""Enable memcheck testing."")
if(VALGRIND_TESTING_AVAILABLE)
  set(LIBCELLML_MEMCHECK ON CACHE BOOL ${_PARAM_ANNOTATION})
endif()
if(DEFINED MEMCHECK AND VALGRIND_TESTING_AVAILABLE)
  set(LIBCELLML_MEMCHECK ""${MEMCHECK}"" CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
elseif(MEMCHECK)
  message(WARNING ""Memcheck testing requested but valgrind or its requirements not found!"")
endif()
unset(MEMCHECK CACHE)

# BINDINGS_PYTHON ==> LIBCELLML_BINDINGS_PYTHON
set(_PARAM_ANNOTATION ""Build Python wrappers."")
if(BINDINGS_AVAILABLE)
  set(LIBCELLML_BINDINGS_PYTHON ON CACHE BOOL ${_PARAM_ANNOTATION})
endif()
if(DEFINED BINDINGS_PYTHON AND BINDINGS_AVAILABLE)
  set(LIBCELLML_BINDINGS_PYTHON ""${BINDINGS_PYTHON}"" CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
endif()
unset(BINDINGS_PYTHON CACHE)

# UNIT_TESTS ==> LIBCELLML_UNIT_TESTS
set(_PARAM_ANNOTATION ""Enable libCellML tests."")
set(LIBCELLML_UNIT_TESTS ON CACHE BOOL ${_PARAM_ANNOTATION})
if(DEFINED UNIT_TESTS)
  set(LIBCELLML_UNIT_TESTS ""${UNIT_TESTS}"" CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
endif()
unset(UNIT_TESTS CACHE)

if(LIBCELLML_COVERAGE OR LIBCELLML_MEMCHECK)
  if(NOT LIBCELLML_UNIT_TESTS)
    message(STATUS ""Configuration confusion:
      Memchecking or coverage testing has been requested but unit tests have not.
      This is not possible so forcing the unit tests to 'on' to make it possible.
      "")
    set(LIBCELLML_UNIT_TESTS ON CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
  endif()
endif()

# TWAE ==> LIBCELLML_TREAT_WARNINGS_AS_ERRORS -- Note: This excludes third party code, where warnings are never treated as errors.
set(_PARAM_ANNOTATION ""Treat warnings as errors, this setting applies only to compilation units built by this project."")
set(LIBCELLML_TREAT_WARNINGS_AS_ERRORS ON CACHE BOOL ${_PARAM_ANNOTATION})
if(DEFINED TWAE)
  set(LIBCELLML_TREAT_WARNINGS_AS_ERRORS ""${TWAE}"" CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
endif()
unset(TWAE CACHE)

# BUILD_TYPE ==> LIBCELLML_BUILD_TYPE
set(_PARAM_ANNOTATION ""Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
set(LIBCELLML_BUILD_TYPE ""Debug"" CACHE STRING ${_PARAM_ANNOTATION})
if(DEFINED BUILD_TYPE)
  set(LIBCELLML_BUILD_TYPE ${BUILD_TYPE} CACHE STRING ${_PARAM_ANNOTATION} FORCE)
endif()
unset(BUILD_TYPE CACHE)
if(LIBCELLML_MEMCHECK OR LIBCELLML_COVERAGE)
  if(LIBCELLML_BUILD_TYPE STREQUAL ""Release"")
    message(STATUS ""Configuration confusion:
      Release build requested but memchecking or coverage has also been requested.
      This is not possible so forcing the build type to 'Debug' to make it possible.
      "")
    set(LIBCELLML_BUILD_TYPE ""Debug"" CACHE STRING ${_PARAM_ANNOTATION} FORCE)
  endif()
endif()

# INSTALL_PREFIX ==> LIBCELLML_INSTALL_PREFIX
set(_PARAM_ANNOTATION ""Install path prefix, prepended onto install directories."")
set(LIBCELLML_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING ${_PARAM_ANNOTATION})
if(DEFINED INSTALL_PREFIX)
  set(LIBCELLML_INSTALL_PREFIX ${INSTALL_PREFIX} CACHE STRING ${_PARAM_ANNOTATION} FORCE)
endif()
unset(INSTALL_PREFIX CACHE)

# BUILD_SHARED ==> LIBCELLML_BUILD_SHARED
set(_PARAM_ANNOTATION ""Build shared libraries (so, dylib, DLLs)."")
set(LIBCELLML_BUILD_SHARED ON CACHE BOOL ${_PARAM_ANNOTATION})
if(DEFINED BUILD_SHARED)
  set(LIBCELLML_BUILD_SHARED ${BUILD_SHARED} CACHE BOOL ${_PARAM_ANNOTATION} FORCE)
endif()
unset(BUILD_SHARED CACHE)

# Uninstall target
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
               ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
               IMMEDIATE @ONLY)
add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

# Keep the GUI tidy.
internalise_cmake_variables()
hide_distracting_variables()

# Turn on the ability to create folders to organize projects (.vcproj)
# It creates ""CMakePredefinedTargets"" folder by default and adds CMake
# defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Find libxml2
set(HAVE_LIBXML2_CONFIG FALSE)
if(MSVC)
  # If we want to use config packages on Windows with Visual Studio,
  # we need to have two find_package calls and explicitly state that
  # we wish to use Config mode in the first call.  Finding LibXml2 in config mode
  # is the preferred method so we will try this first quietly.
  #
  # This does change how we get information about include paths and such so we
  # need to track how we found LibXml2.
  find_package(LibXml2 CONFIG QUIET)
  if(LibXml2_FOUND)
    set(HAVE_LIBXML2_CONFIG TRUE)
  else()
    find_package(LibXml2 REQUIRED)
  endif()
else()
  find_package(LibXml2 REQUIRED)
endif()

# cellml library target
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)

if(LIBCELLML_UNIT_TESTS)
  # enable testing here so that we can make use of the 'test' target
  enable_testing()
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)
endif()

# Add docs
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/docs)

# Format our code
if(CLANG_FORMAT_EXE)
  set(FILES_TO_FORMAT
    ${API_HEADER_FILES}
    ${MODULE_HEADER_FILES}
    ${SOURCE_FILES}
    ${HEADER_FILES}
    ${CONFIG_FILES}
    ${TESTS_HEADER_FILES}
    ${TESTS_SOURCE_FILES}
  )

  set(CHECK_CODE_FORMATTING_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/cmake_command_check_code_formatting.cmake)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_command_check_code_formatting.cmake.in
    ${CHECK_CODE_FORMATTING_SCRIPT} @ONLY)
  if(CLANG_FORMAT_TESTING_AVAILABLE)
    add_custom_target(test_clang_format
      COMMAND ${CMAKE_COMMAND} -P ${CHECK_CODE_FORMATTING_SCRIPT}
    )
  endif()

  add_custom_target(format_code
    COMMAND ${CLANG_FORMAT_EXE} -i ${FILES_TO_FORMAT}
    COMMENT ""Source code has been reformatted by clang-format.""
  )
endif()
",3.1,3.1
7976,jp9000,obs-studio,False,False,False,False,False,331,C,2020-05-17 17:46:45+00:00,2013-10-01 02:40:31+00:00,19357,8078,"cmake_minimum_required(VERSION 3.10)

if (UNIX AND POLICY CMP0072)
	# In case of both legacy and glvnd OpenGL libraries found. Prefer GLVND
	cmake_policy(SET CMP0072 NEW)
endif()

project(obs-studio)

option(BUILD_CAPTIONS ""Build captions"" FALSE)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(WIN32)
	cmake_minimum_required(VERSION 3.16)

	# Check for Win SDK version 10.0.18362 or above
	if(MSVC AND MSVC_VERSION LESS 1920)
		message(STATUS ""Windows API version is ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}"")
		string(REPLACE ""."" "";"" WINAPI_VER ""${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}"")

		list(GET WINAPI_VER 0 WINAPI_VER_MAJOR)
		list(GET WINAPI_VER 1 WINAPI_VER_MINOR)
		list(GET WINAPI_VER 2 WINAPI_VER_BUILD)

		set(WINAPI_COMPATIBLE FALSE)
		if(WINAPI_VER_MAJOR EQUAL 10)
			if (WINAPI_VER_MINOR EQUAL 0)
				if (WINAPI_VER_BUILD GREATER_EQUAL 18362)
					set(WINAPI_COMPATIBLE TRUE)
				endif()
			else()
				set(WINAPI_COMPATIBLE TRUE)
			endif()
		elseif(WINAPI_VER_MAJOR GREATER 10)
			set(WINAPI_COMPATIBLE TRUE)
		endif()

		if(NOT WINAPI_COMPATIBLE)
			message(FATAL_ERROR ""OBS requires Windows 10 SDK version 10.0.18362.0 and above to compile.\nPlease download the most recent Windows 10 SDK in order to compile (or update to Visual Studio 2019)."")
		endif()
	endif()

	if (QTDIR OR DEFINED ENV{QTDIR} OR DEFINED ENV{QTDIR32} OR DEFINED ENV{QTDIR64})
		# Qt path set by user or env var
	else()
		set(QTDIR """" CACHE PATH ""Path to Qt (e.g. C:/Qt/5.7/msvc2015_64)"")
		message(WARNING ""QTDIR variable is missing.  Please set this variable to specify path to Qt (e.g. C:/Qt/5.7/msvc2015_64)"")
	endif()
	if (DepsPath OR DEFINED ENV{DepsPath} OR DEFINED ENV{DepsPath32} OR DEFINED ENV{DepsPath64})
		# Dependencies path set by user or env var
	else()
		set(DepsPath """" CACHE PATH ""Path to compiled dependencies (e.g. D:/dependencies/win64)"")
		message(WARNING ""DepsPath variable is missing.  Please set this variable to specify path to compiled dependencies (e.g. D:/dependencies/win64)"")
	endif()
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
set(ENABLE_SCRIPTING TRUE CACHE BOOL ""Enables scripting"")
set(SCRIPTING_ENABLED OFF CACHE BOOL ""Internal global cmake variable"" FORCE)

include(ObsHelpers)
include(ObsCpack)
include(GNUInstallDirs)

# Must be a string in the format of ""x.x.x-rcx""
if(DEFINED RELEASE_CANDIDATE)
	set(OBS_VERSION ""${RELEASE_CANDIDATE}"")
	string(REPLACE ""-rc"" ""."" RC_SPLIT ${RELEASE_CANDIDATE})
	string(REPLACE ""."" "";"" RC_SPLIT ${RC_SPLIT})
	message(WARNING ""******************************************************************************\nRelease candidate deteced, OBS_VERSION is now: ${OBS_VERSION}\n******************************************************************************"")
	list(GET RC_SPLIT 0 OBS_RELEASE_CANDIDATE_MAJOR)
	list(GET RC_SPLIT 1 OBS_RELEASE_CANDIDATE_MINOR)
	list(GET RC_SPLIT 2 OBS_RELEASE_CANDIDATE_PATCH)
	list(GET RC_SPLIT 3 OBS_RELEASE_CANDIDATE)
else()
	set(OBS_RELEASE_CANDIDATE_MAJOR 0)
	set(OBS_RELEASE_CANDIDATE_MINOR 0)
	set(OBS_RELEASE_CANDIDATE_PATCH 0)
	set(OBS_RELEASE_CANDIDATE 0)
endif()

# Binary Versioning for Windows
if(WIN32)
	string(REPLACE ""-"" "";"" UI_VERSION_SPLIT ${OBS_VERSION})
	list(GET UI_VERSION_SPLIT 0 UI_VERSION)
	string(REPLACE ""."" "";"" UI_VERSION_SEMANTIC ${UI_VERSION})
	list(GET UI_VERSION_SEMANTIC 0 UI_VERSION_MAJOR)
	list(GET UI_VERSION_SEMANTIC 1 UI_VERSION_MINOR)
	list(GET UI_VERSION_SEMANTIC 2 UI_VERSION_PATCH)
	set(OBS_COMPANY_NAME ""OBS"")
	set(OBS_PRODUCT_NAME ""OBS Studio"")
	set(OBS_COMMENTS ""Free and open source software for video recording and live streaming"")
	set(OBS_LEGAL_COPYRIGHT ""(C) Hugh Bailey"")
	set(MODULE_DESCRIPTION ""OBS Studio"")
	configure_file(UI/obs.rc.in ${PROJECT_BINARY_DIR}/obs.rc)
endif()

if(MSVC AND NOT EXISTS ""${CMAKE_BINARY_DIR}/ALL_BUILD.vcxproj.user"")
	file(GENERATE
		OUTPUT ""${CMAKE_BINARY_DIR}/ALL_BUILD.vcxproj.user""
		INPUT ""${CMAKE_SOURCE_DIR}/cmake/ALL_BUILD.vcxproj.user.in"")
endif()

if(NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

if(${CMAKE_C_COMPILER_ID} MATCHES ""Clang"" OR ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"")
	set(CMAKE_COMPILER_IS_CLANG TRUE)
endif()

if (MSVC_CXX_ARCHITECTURE_ID)
    string(TOLOWER ${MSVC_CXX_ARCHITECTURE_ID} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
else ()
    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
endif ()

if(LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES ""(i[3-6]86|x86|x64|x86_64|amd64)"")
	set(NEEDS_SIMDE ""0"")
	if(NOT MSVC)
		set(ARCH_SIMD_FLAGS ""-mmmx"" ""-msse"" ""-msse2"")
	endif()
elseif(LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)64(le)?"")
	set(NEEDS_SIMDE ""0"")
	set(ARCH_SIMD_FLAGS ""-mvsx"")
	add_compile_definitions(NO_WARN_X86_INTRINSICS)
else()
	set(NEEDS_SIMDE ""1"")
	add_definitions(-DNEEDS_SIMDE=1)
	set(ARCH_SIMD_FLAGS """")
	message(STATUS ""No Native SSE2 SIMD Support - Using SIMDE"")
endif()

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
	set(CMAKE_CXX_FLAGS ""-Wall -Wextra -Wvla -Wno-unused-function -Wno-missing-field-initializers ${CMAKE_CXX_FLAGS} -fno-strict-aliasing"")
	set(CMAKE_C_FLAGS ""-Wall -Wextra -Wvla -Wno-unused-function -Werror-implicit-function-declaration -Wno-missing-braces -Wno-missing-field-initializers ${CMAKE_C_FLAGS} -std=gnu99 -fno-strict-aliasing"")

	option(USE_LIBC++ ""Use libc++ instead of libstdc++"" ${APPLE})
	if(USE_LIBC++)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
	endif()
elseif(MSVC)
	if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
		string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
	else()
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
	endif()

	# Disable pointless constant condition warnings
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /wd4127 /wd4201 /wd4456 /wd4457 /wd4458 /wd4459 /wd4595"")
endif()

if(WIN32)
	add_definitions(-DUNICODE -D_UNICODE -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)
endif()

if(MSVC)
	add_compile_options(""/MP"")
	set(CMAKE_C_FLAGS_DEBUG ""/DDEBUG=1 /D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
	set(CMAKE_CXX_FLAGS_DEBUG ""/DDEBUG=1 /D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")

	if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO"")
		set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO"")
		set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH:NO"")
	endif()

	foreach(t EXE SHARED MODULE)
		set(CMAKE_${t}_LINKER_FLAGS ""${CMAKE_${t}_LINKER_FLAGS} /OPT:REF"")
		set(CMAKE_${t}_LINKER_FLAGS_DEBUG ""${CMAKE_${t}_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO"")
		set(CMAKE_${t}_LINKER_FLAGS_RELWITHDEBINFO ""${CMAKE_${t}_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO"")
	endforeach()
else()
	if(MINGW)
		set(CMAKE_WIDL ""widl"" CACHE STRING ""wine IDL header file generation program"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_WIN32_WINNT=0x0600 -DWINVER=0x0600"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0600 -DWINVER=0x0600"")
	endif()
	set(CMAKE_C_FLAGS_DEBUG ""-DDEBUG=1 -D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
	set(CMAKE_CXX_FLAGS_DEBUG ""-DDEBUG=1 -D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
endif()

if(APPLE)
	set(CMAKE_MACOSX_RPATH TRUE)
	set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
	list(APPEND CMAKE_INSTALL_RPATH ""@loader_path/"" ""@executable_path/"")
elseif(UNIX)
	option(USE_XDG ""Utilize XDG Base Directory Specification"" ON)
	if(USE_XDG)
		add_definitions(-DUSE_XDG)
	endif()

	if(NOT UNIX_STRUCTURE)
		list(APPEND CMAKE_INSTALL_RPATH ""$ORIGIN"")
	endif()
endif()

option(BUILD_TESTS ""Build test directory (includes test sources and possibly a platform test executable)"" FALSE)
mark_as_advanced(BUILD_TESTS)

if(NOT INSTALLER_RUN)
	option(ENABLE_UI ""Enables the OBS user interfaces"" ON)
	if(DISABLE_UI OR NOT ENABLE_UI)
		set(UI_ENABLED FALSE)
	else()
		set(UI_ENABLED TRUE)

		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(_lib_suffix 64)
		else()
			set(_lib_suffix 32)
		endif()

		if(DEFINED QTDIR${_lib_suffix})
			list(APPEND CMAKE_PREFIX_PATH ""${QTDIR${_lib_suffix}}"")
		elseif(DEFINED QTDIR)
			list(APPEND CMAKE_PREFIX_PATH ""${QTDIR}"")
		elseif(DEFINED ENV{QTDIR${_lib_suffix}})
			list(APPEND CMAKE_PREFIX_PATH ""$ENV{QTDIR${_lib_suffix}}"")
		elseif(DEFINED ENV{QTDIR})
			list(APPEND CMAKE_PREFIX_PATH ""$ENV{QTDIR}"")
		endif()

		find_package(Qt5Widgets ${FIND_MODE})
	endif()

	add_subdirectory(deps)

	if(WIN32)
		add_subdirectory(libobs-d3d11)
		add_subdirectory(libobs-winrt)
	endif()

	add_subdirectory(libobs-opengl)
	add_subdirectory(libobs)
	add_subdirectory(plugins)
	add_subdirectory(UI)
	if (BUILD_TESTS)
		add_subdirectory(test)
	endif()

	add_subdirectory(cmake/helper_subdir)
else()
	obs_generate_multiarch_installer()
endif()

include(CopyMSVCBins)
",3.10,3.1
7997,mltframework,mlt,False,False,False,False,False,54,C,2020-05-17 18:05:25+00:00,2012-04-13 18:30:28+00:00,651,5228,"project(MLT)
set(MLT_VERSION 6.21.0)
cmake_minimum_required(VERSION 3.10)
find_package(PkgConfig REQUIRED)
include(GNUInstallDirs)
option(GPL ""Enable GPLv2 modules"" ON)
option(GPL3 ""Enable GPLv3 modules"" ON)
if(WIN32)
  option(NODEPLOY ""Keep bin/ lib/ layout on Windows"" ON)
endif()
if(CMAKE_SYSTEM_PROCESSOR MATCHES ""(x86_64)|(AMD64)"")
    set(X86_64 ON)
    if(NOT MSVC)
        add_definitions(-DUSE_MMX -DUSE_SSE -DUSE_SSE2 -DARCH_X86_64)
    endif()
endif()
if(CMAKE_C_COMPILER_ID MATCHES ""GNU|Clang"")
    add_compile_options(-ffast-math)
elseif(MSVC)
    add_compile_options(/fp:fast)
endif()
find_package(Threads REQUIRED)
add_subdirectory(src/framework)
add_subdirectory(src/melt)
add_subdirectory(src/mlt++)
#add_subdirectory(src/swig)
#file(GLOB modules src/modules/*/)
set(modules
    src/modules/avformat
    src/modules/core
    src/modules/decklink
    src/modules/frei0r
    src/modules/feeds
    src/modules/gdk
    src/modules/kdenlive
    src/modules/motion_est
    src/modules/normalize
    src/modules/oldfilm
    src/modules/opencv
    src/modules/plus
    src/modules/plusgpl
    src/modules/qt
    src/modules/rubberband
    src/modules/rtaudio
    src/modules/sdl2
    src/modules/vid.stab
    src/modules/vmfx
    src/modules/xine
    src/modules/xml
)
foreach(module ${modules})
    add_subdirectory(${module})
endforeach()
install(DIRECTORY profiles DESTINATION ${CMAKE_INSTALL_DATADIR}/mlt)
install(DIRECTORY presets DESTINATION ${CMAKE_INSTALL_DATADIR}/mlt)
",3.10,3.1
8001,humanoid-path-planner,hpp-pinocchio,False,False,False,False,False,11,C++,2020-05-17 08:14:20+00:00,2016-07-06 08:44:26+00:00,5,489,"# Copyright 2016-2018 CNRS-LAAS
#
# Author: Joseph Mirabel, Nicolas Mansard from Antonio El Khoury
#
# This file is part of hpp-pinocchio.
# hpp-pinocchio is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# hpp-pinocchio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Lesser Public License for more details.
# You should have received a copy of the GNU Lesser General Public License
# along with hpp-pinocchio.  If not, see <http://www.gnu.org/licenses/>.

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

SET(CXX_DISABLE_WERROR TRUE)
SET(PROJECT_NAME hpp-pinocchio)
SET(PROJECT_DESCRIPTION ""Wrapping of the kinematic/dynamic chain Pinocchio for HPP."")

OPTION(INSTALL_DOCUMENTATION ""Generate and install the documentation"" ON)
SET(PROJECT_USE_CMAKE_EXPORT TRUE)

INCLUDE(cmake/hpp.cmake)
INCLUDE(cmake/boost.cmake)
INCLUDE(cmake/apple.cmake)

COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

# Handle APPLE Cmake policy
IF(APPLE)
  APPLY_DEFAULT_APPLE_CONFIGURATION()
ENDIF(APPLE)

# Activate hpp-util logging if requested
SET (HPP_DEBUG FALSE CACHE BOOL ""trigger hpp-util debug output"")
IF (HPP_DEBUG)
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHPP_DEBUG"")
ENDIF()
SET (HPP_BENCHMARK FALSE CACHE BOOL ""trigger hpp-util benchmarking output"")
IF (HPP_BENCHMARK)
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHPP_ENABLE_BENCHMARK"")
ENDIF()

# Profiling flags when building with DEBUG
#-----------------------------------------
IF(CMAKE_BUILD_TYPE MATCHES ""DEBUG"")
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET (${PROJECT_NAME}_CXXFLAGS ""-ggdb3 ${${PROJECT_NAME}_CXXFLAGS}"")
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDIF(CMAKE_BUILD_TYPE MATCHES ""DEBUG"")

# Search for Boost.
# Boost.Test is used by the test suite.
SET(BOOST_COMPONENTS_LIB thread)
SET(BOOST_COMPONENTS ${BOOST_COMPONENTS_LIB})
IF(BUILD_TESTING)
  SET(BOOST_COMPONENTS ${BOOST_COMPONENTS_LIB} unit_test_framework)
ENDIF()
SEARCH_FOR_BOOST()

# Search for dependecies.
ADD_PROJECT_DEPENDENCY(hpp-util REQUIRED PKG_CONFIG_REQUIRES ""hpp-util >= 3.2"")
ADD_PROJECT_DEPENDENCY(pinocchio REQUIRED PKG_CONFIG_REQUIRES ""pinocchio >= 2.1.10"")
ADD_PROJECT_DEPENDENCY(Eigen3 REQUIRED ""eigen3 >= 3.2.92"")

ADD_PROJECT_DEPENDENCY(""example-robot-data"")
ADD_PROJECT_DEPENDENCY(""hpp-environments"")

# Set header files.
SET(${PROJECT_NAME}_HEADERS
  include/hpp/pinocchio/fwd.hh
  include/hpp/pinocchio/device.hh
  include/hpp/pinocchio/device-data.hh
  include/hpp/pinocchio/device-sync.hh
  include/hpp/pinocchio/humanoid-robot.hh
  include/hpp/pinocchio/joint.hh
  include/hpp/pinocchio/joint-collection.hh
  include/hpp/pinocchio/frame.hh
  include/hpp/pinocchio/body.hh
  include/hpp/pinocchio/gripper.hh
  include/hpp/pinocchio/configuration.hh
  include/hpp/pinocchio/collision-object.hh
  include/hpp/pinocchio/extra-config-space.hh
  include/hpp/pinocchio/center-of-mass-computation.hh
  include/hpp/pinocchio/simple-device.hh
  include/hpp/pinocchio/util.hh
  include/hpp/pinocchio/pool.hh

  include/hpp/pinocchio/liegroup.hh
  include/hpp/pinocchio/liegroup-element.hh
  include/hpp/pinocchio/liegroup-space.hh
  include/hpp/pinocchio/liegroup/vector-space.hh
  include/hpp/pinocchio/liegroup/cartesian-product.hh
  include/hpp/pinocchio/liegroup/special-euclidean.hh
  include/hpp/pinocchio/liegroup/special-orthogonal.hh

  include/hpp/pinocchio/urdf/util.hh
  )

SET(${PROJECT_NAME}_SOURCES
  src/addition-visitor.hh
  src/comparison.hh
  src/comparison.hxx
  src/device.cc
  src/device-data.cc
  src/device-sync.cc
  src/humanoid-robot.cc
  src/joint.cc
  src/frame.cc
  src/collision-object.cc
  src/body.cc
  src/gripper.cc
  src/center-of-mass-computation.cc
  src/configuration.cc
  src/simple-device.cc
  src/liegroup-element.cc
  src/liegroup-space.cc
  src/log-visitor.hh
  src/size-visitor.hh
  src/substraction-visitor.hh
  src/urdf/util.cc
  src/util.cc
  )

ADD_LIBRARY(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:include>)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} hpp-util::hpp-util pinocchio::pinocchio)

INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)

ADD_SUBDIRECTORY(tests)

PKG_CONFIG_APPEND_LIBS(${PROJECT_NAME})
PKG_CONFIG_APPEND_BOOST_LIBS(${BOOST_COMPONENTS_LIB})
",3.1,3.1
8145,Luthaf,chrp,False,False,False,False,False,4,C++,2020-02-20 13:03:07+00:00,2015-06-19 14:41:20+00:00,8,268,"cmake_minimum_required(VERSION 3.1)

project(cfiles C CXX)
set(CMAKE_CXX_STANDARD 11)
set(CXX_STANDARD_REQUIRED ON)

option(BUILD_SHARED_LIBS ""Build shared libraries instead of static ones"" OFF)
option(CFILES_USE_FFTW3 ""Use FFTW3 for FFT, instead of the bundled KissFFT"" OFF)

# Set a default build type if none was specified
if (${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    if(""${CMAKE_BUILD_TYPE}"" STREQUAL """" AND ""${CMAKE_CONFIGURATION_TYPES}"" STREQUAL """")
        message(STATUS ""Setting build type to 'release' as none was specified."")
        set(CMAKE_BUILD_TYPE ""release""
            CACHE STRING
            ""Choose the type of build, options are: none(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) debug release relwithdebinfo minsizerel.""
        FORCE)
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS release debug relwithdebuginfo minsizerel none)
    endif()
endif()

if(EXISTS ""${PROJECT_SOURCE_DIR}/chemfiles/CMakeLists.txt"")
    add_subdirectory(chemfiles)
else()
    message(FATAL_ERROR ""Missing the chemfiles library. Please run `git submodule update --init`."")
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

find_package(Git QUIET)
set(CFILES_VERSION 0.1.0)

file(WRITE ${CMAKE_BINARY_DIR}/version.hpp.in
""\#define CFILES_VERSION \""\${CFILES_VERSION}\""\n""
)
file(WRITE ${CMAKE_BINARY_DIR}/version.cmake
""
cmake_policy(SET CMP0012 NEW)
set(CFILES_VERSION ${CFILES_VERSION})
if(${GIT_FOUND})
    execute_process(
        COMMAND ${GIT_EXECUTABLE} describe --tags --always --dirty
        OUTPUT_VARIABLE GIT_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (NOT \""\${GIT_VERSION}\"" STREQUAL \""${CFILES_VERSION}\"")
        set(CFILES_VERSION ${CFILES_VERSION}-\${GIT_VERSION})
    endif()
endif()
configure_file(\${SRC} \${DST})
"")

add_custom_target(version
    ${CMAKE_COMMAND} -D SRC=${CMAKE_BINARY_DIR}/version.hpp.in
                     -D DST=${CMAKE_BINARY_DIR}/version.hpp
                     -P ${CMAKE_BINARY_DIR}/version.cmake
)


add_library(docopt OBJECT external/docopt/docopt.cpp)
target_include_directories(docopt PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/external)

add_library(eigen INTERFACE)
target_include_directories(eigen INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/external)
target_compile_definitions(eigen INTERFACE -DEIGEN_MPL2_ONLY)

if (${CFILES_USE_FFTW3})
    set(KISSFTT_OBJECTS """")
else()
    add_library(kissfft OBJECT external/kissfft/kiss_fft.c external/kissfft/tools/kiss_fftr.c)
    target_include_directories(kissfft PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft/tools
    )
    set(KISSFTT_OBJECTS $<TARGET_OBJECTS:kissfft>)
endif()

file(GLOB_RECURSE sources ${CMAKE_CURRENT_SOURCE_DIR}/src/**.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)

add_library(libcfiles
    ${sources}
    ${KISSFTT_OBJECTS}
    $<TARGET_OBJECTS:docopt>
    $<TARGET_OBJECTS:fmt>
)
set_target_properties(libcfiles PROPERTIES OUTPUT_NAME cfiles)

target_include_directories(libcfiles
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        ${CMAKE_CURRENT_BINARY_DIR}/
    PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}/chemfiles/external/fmt/include
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft/tools
)

target_link_libraries(libcfiles eigen chemfiles)

if (NOT DEFINED STD_REGEX_WORKS)
    include(CompilerFlags)
    try_compile(STD_REGEX_WORKS
        ${PROJECT_BINARY_DIR}
        ${PROJECT_SOURCE_DIR}/cmake/check_std_regex.cpp
    )
endif()

if(NOT ${STD_REGEX_WORKS})
    message(STATUS ""Using Boost.Regex instead of std::regex"")
    find_package(Boost 1.53 REQUIRED COMPONENTS regex)
    target_include_directories(docopt PUBLIC ${Boost_INCLUDE_DIRS})
    target_compile_definitions(docopt PRIVATE ""-DDOCTOPT_USE_BOOST_REGEX"")
    target_link_libraries(libcfiles ${Boost_LIBRARIES})
endif()

if (${CFILES_USE_FFTW3})
    find_package(FFTW REQUIRED COMPONENTS FLOAT_LIB)
    target_link_libraries(libcfiles ${FFTW_FLOAT_LIB})
    target_include_directories(libcfiles PRIVATE ${FFTW_INCLUDE_DIRS})
    target_compile_definitions(libcfiles PRIVATE -DCFILES_USE_FFTW3)
else()
    find_package(FFTW QUIET)
    if(${FFTW_FOUND})
        message(STATUS ""Found FFTW3, consider enabling it with CFILES_USE_FFTW3 for faster FFT"")
    endif()
endif()

add_dependencies(libcfiles version)

add_executable(cfiles src/main.cpp)
target_link_libraries(cfiles libcfiles)

install(TARGETS cfiles DESTINATION bin)

if(CHFL_CODE_COVERAGE)
    # Code coverage should use gcc
    if(NOT CMAKE_COMPILER_IS_GNUCXX)
        message(FATAL_ERROR ""Code coverage can only be used with GCC"")
    endif()
    set(CMAKE_BUILD_TYPE ""debug"" CACHE STRING ""Type of build: release|debug|relwithdebuginfo"" FORCE)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage"")
endif()

enable_testing()
add_subdirectory(tests)
",3.1,3.1
8228,vindar,mtools,False,False,False,False,False,2,C++,2020-03-07 02:00:44+00:00,2015-06-19 22:17:27+00:00,1,1471,"###############################################################################
###############################################################################
#
#                       CMakeList for mtools library 
#
###############################################################################
###############################################################################
cmake_minimum_required(VERSION 3.10)

message(STATUS """")
message(STATUS ""***************************************************************"")
message(STATUS ""*                                                             *"")
message(STATUS ""*                   MTOOLS CONFIGURATION                      *"")
message(STATUS ""*                                                             *"")
message(STATUS ""***************************************************************"")
message(STATUS """")


###############################################################################
# If using Windows, look for vcpkg...
###############################################################################
if( WIN32 )
	# test if the env variable VCPKG_DIR is defined
	if (DEFINED ENV{VCPKG_DIR})
		#yes, we use it to find vcpkg.cmake
		string(REPLACE ""\\"" ""/"" _vcpkg_dir ""$ENV{VCPKG_DIR}"")
	else ()
		# no try to find vcpkg.exe
		find_file( _vcpkg_exe ""vcpkg.exe"" PATHS ENV PATH)
		if (_vcpkg_exe)			
			get_filename_component(_vcpkg_dir ${_vcpkg_exe} DIRECTORY)
		endif()		
	endif()	
	if (_vcpkg_dir)	
		set(CMAKE_TOOLCHAIN_FILE 
			""${_vcpkg_dir}/scripts/buildsystems/vcpkg.cmake"")					
		message(STATUS ""Windows: vcpkg found at [${_vcpkg_dir}]"")	
	else()
		message(STATUS ""Windows: vcpkg not found."")	
	endif()
        
    # only Debug and Release configurations
    SET(CMAKE_CONFIGURATION_TYPES ""Debug;Release;RelWithDebInfo"" CACHE STRING """" FORCE)

endif()
	 
	      
###############################################################################
# Project name and version
###############################################################################
file(READ VERSION MTOOLS_VERSION 10)
message(STATUS """")
message(STATUS ""library version: ${MTOOLS_VERSION}"")
message(STATUS ""-------------------------------------"")
message(STATUS """")

project(mtools)


###############################################################################
# Locate the external libraries needed. 
###############################################################################


# load the custom find modules (for cimg and cairo). 
set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake )


# use cotire for precompiled headers if present
include(cotire OPTIONAL)
message(STATUS """")
option(USE_COTIRE ""Use precompiled headers generated by cotire"" OFF) 
if (COMMAND cotire)
	message(STATUS ""COTIRE FOUND : set USE_COTIRE=ON to use PCH"")
else()
	message(STATUS ""COTIRE NOT FOUND : not using precompild headers"")
endif()
message(STATUS """")




#### REQUIRED ####
message(STATUS """")
message(STATUS ""Checking external dependencies."")
message(STATUS """")

# zlib 
find_package(ZLIB REQUIRED)

# fltk, use custom find method
find_package(FLTK_alt REQUIRED)

# libpng
find_package(PNG REQUIRED)

# libjpeg, use custom find method 
find_package(JPEG_alt REQUIRED)

# cimg, use custom find method 
find_package(CIMG_alt REQUIRED)

#tinyXML2
find_package(TinyXML2 REQUIRED)

if (NOT ZLIB_FOUND OR NOT FLTK_FOUND OR NOT PNG_FOUND OR NOT JPEG_FOUND OR NOT CIMG_FOUND OR NOT TinyXML2_FOUND)
	message(STATUS """")
	message(STATUS ""***************************************************************"")	
	message(STATUS ""*                           ERROR                             *"")
	message(STATUS ""***************************************************************"")
	message(STATUS ""Some required libraries could not be found."")
	message(FATAL_ERROR ""Aborting configuration script..."" )
else()
	message(STATUS """")
	message(STATUS ""OK. All required library present."")
	message(STATUS ""-------------------------------------"")
	message(STATUS """")
endif()

#### OPTIONAL ####
message(STATUS """")
message(STATUS ""Checking optional libraries."")
message(STATUS """")

# cairo, use custom find method 
find_package(CAIRO_alt)

#opengl 
find_package(OpenGL)

#opencl
find_package(OpenCL)

#openmp
find_package(OpenMP)


###############################################################################
# set the configuration options and create mtools-config.hpp
###############################################################################


	
option(CONSOLE_ONLY ""console only mode"" OFF)    
if (CONSOLE_ONLY)
    set(MTOOLS_BASIC_CONSOLE 1)
else ()
    set(MTOOLS_BASIC_CONSOLE 0)
endif ()


option(USE_SSE ""use SSE specific code"" OFF)    
if (USE_SSE)
    set(MTOOLS_SSE 1)
else ()
    set(MTOOLS_SSE 0)
endif ()


if (CAIRO_FOUND)
	option(USE_CAIRO ""build with Cairo support"" OFF)    
endif()
if (USE_CAIRO)
    set(MTOOLS_CAIRO 1)
else ()
    set(MTOOLS_CAIRO 0)
endif ()


if (OpenGL_OpenGL_FOUND)
    option(USE_OPENGL ""build with OpenGL support"" ON)    
endif()
if (USE_OPENGL)
    set(MTOOLS_OPENGL 1)
else ()
    set(MTOOLS_OPENGL 0)
endif ()


if (OpenCL_FOUND)
    option(USE_OPENCL ""build with OpenCL support"" OFF)
    set(MTOOLS_OPENCL_VERSION ""${OpenCL_VERSION_MAJOR}.${OpenCL_VERSION_MINOR}"" CACHE STRING ""OpenCL version"")
endif()
if (USE_OPENCL)
    set(MTOOLS_OPENCL 1)
else ()
    set(MTOOLS_OPENCL 0)
endif ()


if (OpenMP_CXX_FOUND)
    option(USE_OPENMP ""build with openmp support"" OFF)
    set(MTOOLS_OPENMP_VERSION ""${OpenMP_CXX_VERSION_MAJOR}.${OpenMP_CXX_VERSION_MINOR}"" CACHE STRING ""OpenMP version"")
endif()
if (USE_OPENMP)
    set(MTOOLS_OPENMP 1)
else ()
    set(MTOOLS_OPENMP 0)
endif ()

message(STATUS """")

configure_file(mtools_config.hpp.in ""${CMAKE_SOURCE_DIR}/include/mtools/mtools_config.hpp"" @ONLY)


###############################################################################
# list all sources and header files of the library. 
###############################################################################
file(GLOB_RECURSE _mtools_cpp_files ./src/*.cpp)
file(GLOB_RECURSE _mtools_hpp_files ./include/*.hpp ./include/*.h)


###############################################################################
# create the library
###############################################################################

add_library(mtools STATIC ${_mtools_cpp_files} ${_mtools_hpp_files})

target_include_directories(mtools PRIVATE ./include/mtools)         # for commodity, so that cpp source file of the lib do not need to subdir mtools. 

# set property for cotire (optional precompiled header tool) does nothing if not present
set_target_properties(mtools PROPERTIES
	COTIRE_UNITY_SOURCE_PRE_UNDEFS ""max;min;MTOOLS_ASSERT;MTOOLS_INSURE;MTOOLS_ERROR;MTOOLS_DEBUG;MTOOLS_THROW""
	COTIRE_UNITY_SOURCE_POST_UNDEFS ""max;min;MTOOLS_ASSERT;MTOOLS_INSURE;MTOOLS_ERROR;MTOOLS_DEBUG;MTOOLS_THROW"")


option(LOCAL_INSTALL ""local installation"" ON)    

if (LOCAL_INSTALL)
    # local installation
    target_include_directories(mtools PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)		# - local include directory
else()
	# system wide installation
    target_include_directories(mtools PUBLIC                            
                               $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>   # - local include dir : when building mtools, test and the example
                               $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include> )   # - install include dir : for the exported target 
endif()


# link with libatomic on gcc
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
	target_link_libraries(mtools PUBLIC atomic)
endif()


# link with zlib
# target_link_libraries(mtools PUBLIC ZLIB::ZLIB) <-- do not use because export are not forwarded. 
target_link_libraries(mtools PUBLIC ${ZLIB_LIBRARIES})
target_include_directories(mtools PUBLIC ${ZLIB_INCLUDE_DIRS})

#link with fltk
target_link_libraries(mtools PUBLIC ${FLTK_LIBRARIES})
target_include_directories(mtools PUBLIC ${FLTK_INCLUDE_DIR})
target_compile_options(mtools PUBLIC ${FLTK_OPTIONS})

#link with libpng
# target_link_libraries(mtools PUBLIC PNG::PNG)  <-- do not use because export are not forwarded. 
target_link_libraries(mtools PUBLIC ${PNG_LIBRARIES})
target_include_directories(mtools PUBLIC ${PNG_INCLUDE_DIRS})
target_compile_definitions(mtools PUBLIC ${PNG_DEFINITIONS})

#link with libjpeg
target_link_libraries(mtools PUBLIC ${JPEG_LIBRARIES})
target_include_directories(mtools PUBLIC ${JPEG_INCLUDE_DIR})

#link with cimg
target_include_directories(mtools PUBLIC ${CIMG_INCLUDE_DIR})

#link with TinyXML2
target_link_libraries(mtools PUBLIC ${TinyXML2_LIBRARIES})
target_include_directories(mtools PUBLIC ${TinyXML2_INCLUDE_DIRS})

#link with cairo
if (USE_CAIRO)
	target_link_libraries(mtools PUBLIC ${CAIRO_LIBRARIES})
	target_include_directories(mtools PUBLIC ${CAIRO_INCLUDE_DIRS})
endif ()

#link with opengl
if (USE_OPENGL)
    # target_link_libraries(mtools PUBLIC OpenGL::GL) <-- do not use because export are not forwarded.
	target_link_libraries(mtools PUBLIC ${OPENGL_LIBRARIES})
	target_include_directories(mtools PUBLIC ${OPENGL_INCLUDE_DIR})	
endif ()

#link with opencl
if (USE_OPENCL)
    # target_link_libraries(mtools PUBLIC OpenCL::OpenCL) <-- do not use because export are not forwarded.
	target_link_libraries(mtools PUBLIC ${OpenCL_LIBRARIES})
	target_include_directories(mtools PUBLIC ${OpenCL_INCLUDE_DIRS})
endif ()

#link with openmp
if (USE_OPENMP)
    # target_link_libraries(mtools PUBLIC OpenMP::OpenMP_CXX) <-- do not use because export are not forwarded.
	target_link_libraries(mtools PUBLIC ${OpenMP_CXX_LIBRARIES})
	target_compile_options(mtools PUBLIC ${OpenMP_CXX_FLAGS})
endif ()


# if cotire present and USE_COTIRE is on, use it
if (COMMAND cotire)
	if (USE_COTIRE)
		cotire(mtools)
	endif()
endif()


###############################################################################
# C++ compile features
###############################################################################

# release is the default build type
if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif ()

if(WIN32)
	set(CMAKE_CXX_STANDARD 17)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /DMTOOLS_DEBUG_FLAG"")	
	# hack for RelWithDebINfo configuration otherwise compile never ends on MSVC
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""/Zi /Gm- /Ox /Ob0 /DMTOOLS_DEBUG_FLAG"")	
else()
	target_compile_options(mtools PUBLIC ""-std=c++17"")
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -DMTOOLS_DEBUG_FLAG -Wall"")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DMTOOLS_DEBUG_FLAG -Wall"")
	set(CMAKE_CXX_FLAGS_RELEASE  ""${CMAKE_CXX_FLAGS_RELEASE} -Wall"")
endif()


###############################################################################
# installation of the library
###############################################################################


if (LOCAL_INSTALL)

    export(TARGETS mtools FILE mtools-export.cmake)    	# export the package
    file(WRITE  ""${CMAKE_CURRENT_BINARY_DIR}/mtools-config.cmake""
         ""set(MTOOLS_CXX_COMPILER \""${CMAKE_CXX_COMPILER}\"")\nset(MTOOLS_C_COMPILER \""${CMAKE_C_COMPILER}\"")\ninclude(\$\{CMAKE_CURRENT_LIST_DIR\}/mtools-export.cmake)"" )
    export(PACKAGE mtools)                              # register the package

else()

    set(_include_install_dir ""include/mtools"")
    set(_lib_install_dir ""lib/mtools"")
    set(_tools_install_dir ""bin"")
    
    install(PROGRAMS ""${CMAKE_CURRENT_SOURCE_DIR}/tools/mtools-project.py"" DESTINATION ${_tools_install_dir})
    install(TARGETS mtools EXPORT mtools DESTINATION ${_lib_install_dir})
    install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/include/mtools""  DESTINATION ""include"")
    install(EXPORT mtools DESTINATION ${_lib_install_dir} FILE mtools-export.cmake)
    file(WRITE  ""${CMAKE_CURRENT_BINARY_DIR}/mtools-config.cmake"" 
         ""set(MTOOLS_CXX_COMPILER \""${CMAKE_CXX_COMPILER}\"")\nset(MTOOLS_C_COMPILER \""${CMAKE_C_COMPILER}\"")\ninclude(\$\{CMAKE_CURRENT_LIST_DIR\}/mtools-export.cmake)"" ) 
    install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/mtools-config.cmake"" DESTINATION ${_lib_install_dir})

endif()



###############################################################################
# test project.
###############################################################################
file(GLOB _test_mtools_cpp_files ./test/*.cpp)
file(GLOB _test_mtools_hpp_files ./test/*.hpp ./test/*.h)


add_executable(test_mtools ${_test_mtools_cpp_files} ${_test_mtools_hpp_files})
target_link_libraries(test_mtools mtools)


# add mtools to the precompiled headers generated by cotire for the test project (does nothing if cotire not present)
set_target_properties(test_mtools PROPERTIES COTIRE_PREFIX_HEADER_INCLUDE_PATH ""${CMAKE_SOURCE_DIR}/include/mtools/mtools.hpp"")
	
	
# set test_mtools as the startup project in visual studio
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test_mtools)


# if cotire present and USE_COTIRE is ON, use it
if (COMMAND cotire)
	if (USE_COTIRE)
		cotire(test_mtools)
	endif()
endif()


###############################################################################
# vs filters for mtools: organized according to the directory structure. 
###############################################################################
foreach(_source IN ITEMS ${_mtools_hpp_files} ${_mtools_cpp_files})
    get_filename_component(_source_path ""${_source}"" PATH)
    file(RELATIVE_PATH _source_path_rel ""${PROJECT_SOURCE_DIR}"" ""${_source_path}"")
    string(REPLACE ""/"" ""\\"" _group_path ""${_source_path_rel}"")
    source_group(""${_group_path}"" FILES ""${_source}"")
endforeach()


###############################################################################
# vs filters for test_mtools: organized according to the directory structure. 
###############################################################################
foreach(_source IN ITEMS ${_test_mtools_cpp_files} ${_test_mtools_hpp_files})
    get_filename_component(_source_path ""${_source}"" PATH)
    file(RELATIVE_PATH _source_path_rel ""${PROJECT_SOURCE_DIR}/test"" ""${_source_path}"")
    string(REPLACE ""/"" ""\\"" _group_path ""${_source_path_rel}"")
    source_group(""${_group_path}"" FILES ""${_source}"")
endforeach()


###############################################################################
# move ALL_BUILD and ZERO_CHECK inside filter ""CMakePredefinedTargets""
###############################################################################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(PREDEFINED_TARGETS_FOLDER ""CustomTargets"")


###############################################################################
# cleanup for cmake-gui
###############################################################################
MARK_AS_ADVANCED(FLTK_DIR)
MARK_AS_ADVANCED(FLTK_BASE_LIBRARY)
MARK_AS_ADVANCED(FLTK_FLUID_EXECUTABLE)
MARK_AS_ADVANCED(FLTK_FORMS_LIBRARY)
MARK_AS_ADVANCED(FLTK_GL_LIBRARY)
MARK_AS_ADVANCED(FLTK_IMAGES_LIBRARY)
MARK_AS_ADVANCED(FLTK_INCLUDE_DIR)



###############################################################################
# configure the examples
###############################################################################
add_subdirectory(./examples EXCLUDE_FROM_ALL)


###############################################################################
# display infos
###############################################################################

message(STATUS """")
message(STATUS ""compilation options:"")
message(STATUS ""-------------------------------------"")
message(STATUS """")

if (CONSOLE_ONLY)
    message(STATUS ""  CONSOLE_ONLY = 1  (console mode)"")
else ()
    message(STATUS ""  CONSOLE_ONLY = 0  (graphic mode)"")
endif ()

if (USE_SSE)
    message(STATUS ""  USE_SSE = 1       (enable specific SSE code)"")
else ()
    message(STATUS ""  USE_SSE = 0       (disable specific SSE code)"")
endif ()

if (USE_CAIRO)
    message(STATUS ""  USE_CAIRO = 1     (enabled)"")
else ()
    message(STATUS ""  USE_CAIRO = 0     (disabled)"")
endif ()

if (USE_OPENGL)
    message(STATUS ""  USE_OPENGL = 1    (enabled)"")
else ()
    message(STATUS ""  USE_OPENGL = 0    (disabled)"")
endif ()

if (USE_OPENCL)
    message(STATUS ""  USE_OPENCL = 1    (enabled, version ${MTOOLS_OPENCL_VERSION})"")
else ()
    message(STATUS ""  USE_OPENCL = 0    (disabled)"")
endif ()

if (USE_OPENMP)
    message(STATUS ""  USE_OPENMP = 1    (enabled, version ${MTOOLS_OPENMP_VERSION})"")
else ()
    message(STATUS ""  USE_OPENMP = 0    (disabled)"")
endif ()

message(STATUS """")


if (COMMAND cotire)
	if (USE_COTIRE)
		message(STATUS ""  USE PRECOMPILED HEADERS (USE_COTIRE = ON)"")
	else()
		message(STATUS ""  DO NOT USE PRECOMPILED HEADERS (USE_COTIRE = OFF)"")	
	endif()
else()
	message(STATUS ""  DO NOT USE PRECOMPILED HEADERS (cotire not found)"")	
endif()


message(STATUS """")
message(STATUS """")
if (LOCAL_INSTALL)
    message(STATUS ""  LOCAL_INSTALL = 1  -> mtools will be used locally (no installation)"")
else()
    message(STATUS ""  LOCAL_INSTALL = 0  -> mtools will be installed in"")
	message(STATUS ""  CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}"")
endif()

message(STATUS """")    
message(STATUS """")

if (NOT WIN32)
	message(STATUS ""Chosen configuration ${CMAKE_BUILD_TYPE} : [${CMAKE_CXX_FLAGS}]"")
        message(STATUS ""    - Debug : [${CMAKE_CXX_FLAGS_DEBUG}]"")
        message(STATUS ""    - RelWithDebInfo : [${CMAKE_CXX_FLAGS_RELWITHDEBINFO}]"")
        message(STATUS ""    - Release : [${CMAKE_CXX_FLAGS_RELEASE}]"")
else()
	message(STATUS ""MSVC Configurations: "")
	message(STATUS ""    - Debug : [${CMAKE_CXX_FLAGS_DEBUG}]"")
	message(STATUS ""    - RelWithDebInfo : [${CMAKE_CXX_FLAGS_RELWITHDEBINFO}]"")
	message(STATUS ""    - Release : [${CMAKE_CXX_FLAGS_RELEASE}]"")
endif()

message(STATUS """")
message(STATUS """")
message(STATUS ""****************************************************************"")
message(STATUS ""*                     CONFIGURATION DONE.                      *"")
message(STATUS ""*                                                              *"")
if (NOT WIN32)
	message(STATUS ""* - Run 'make' inside the '/build' sub-directory to build the  *"")
	message(STATUS ""*   library                                                    *"")
	message(STATUS ""*                                                              *"")
	if (LOCAL_INSTALL)
	message(STATUS ""* - No installation (use the local build tree)                 *"")
	message(STATUS ""*   Add the '/tools' subdir to PATH to use 'mtools-project.py' *"")	
	message(STATUS ""*                                                              *"")
	else()
	message(STATUS ""* - Then install it with '[sudo] make install'                 *"")
	endif()
	message(STATUS ""*                                                              *"")
	message(STATUS ""* - Run 'make all' inside './examples' to build the examples   *"")
else ()
	message(STATUS ""* - Open the solution '/built/mtools.sln' to build the library *"")
	message(STATUS ""*                                                              *"")
	if (LOCAL_INSTALL)
	message(STATUS ""* - No installation (use the local build tree)                 *"")
	message(STATUS ""*   Add the '/tools' subdir to PATH to use 'mtools-config.py'  *"")		
	message(STATUS ""*                                                              *"")
	else()
	message(STATUS ""* - Then install with the INSTALL project inside the solution  *"")
	endif()
	message(STATUS ""*                                                              *"")
	message(STATUS ""* - Open the solution file ./examples/examples.sln to build    *"")
	message(STATUS ""*   the examples                                               *"")
endif()
	message(STATUS ""*                                                              *"")
	message(STATUS ""****************************************************************"")
	message(STATUS """")

###############################################################################
#end of file
###############################################################################


",3.10,3.1
8252,LedgerHQ,lib-ledger-core,False,False,False,False,False,26,C++,2020-05-17 16:01:01+00:00,2016-09-20 13:51:06+00:00,48,1531,"cmake_minimum_required(VERSION 3.10)
project(ledger-core)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
option(TARGET_JNI ""Indicates wheter or not the toolchain must build for JNI or not"" OFF)
option(BUILD_TESTS ""Indicates wheter or not the toolchain must build the test or not"" ON)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(UseBackportedModules)

# The project version number.
set(VERSION_MAJOR   3   CACHE STRING ""Project major version number."")
set(VERSION_MINOR   2   CACHE STRING ""Project minor version number."")
set(VERSION_PATCH   1   CACHE STRING ""Project patch version number."")
mark_as_advanced(VERSION_MAJOR VERSION_MINOR VERSION_PATCH)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY build)
list(APPEND INCLUDE_DIRECTORIES core/test/include/)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Setup BOOST
set(BOOST_INCLUDEDIR ""${CMAKE_CURRENT_SOURCE_DIR}/core/lib/boost/"")

# Fix LLC-186: Add this flag to avoid crash for 10.10.x version
# https://stackoverflow.com/questions/41865537/how-does-apples-codesign-utility-decide-which-sha-algorithms-to-sign-a-shared
# Notes:
# > This is a ""blind"" fix, no available 10.10.x macOS machine,
# > Issue is specific to 10.10.x, 10.9.5 and > 10.10.x are fine
set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.9"" CACHE STRING ""Minimum OS X version to target for deployment: 10.9"" FORCE)

set(CMAKE_MACOSX_RPATH 1)

add_definitions(""-DSQLITE_HAS_CODEC"")

string(FIND ""${CMAKE_OSX_SYSROOT}"" ""iphone"" IS_IOS)
if(IS_IOS GREATER_EQUAL 0 OR TARGET_JNI OR ANDROID)
    set(BUILD_TESTING OFF CACHE BOOL ""iOS build fail otherwise"" FORCE)
    set(BUILD_TESTS OFF CACHE BOOL ""Cannot run tests for these options"" FORCE)
endif()

add_subdirectory(doc)
add_subdirectory(core)

if (BUILD_TESTS)
    add_subdirectory(qt-host)
endif()

enable_testing()
",3.10,3.1
8260,JamesBoer,Jinx,False,False,False,False,False,1,C++,2020-04-27 15:13:25+00:00,2016-07-08 08:36:35+00:00,103,378,"
# Require minimum standard version of CMake
cmake_minimum_required (VERSION 3.10)

# Add C# utilities for building tools
include(CSharpUtilities)

# Set project name
project(Jinx)

# Set folders based on file structure
function(jinx_auto_set_folders source_list)
	foreach(source IN LISTS ${source_list})
		get_filename_component(source_path ""${source}"" PATH)
		string(REPLACE ""/"" ""\\"" source_path_folder ""${source_path}"")
		source_group(""${source_path_folder}"" FILES ""${source}"")
	endforeach()
endfunction()

# Set folders manuallly
function(jinx_set_folders source_list folder_name)
	foreach(source IN LISTS source_list)
		source_group(""\\${folder_name}"" FILES ""${source}"")
	endforeach()
endfunction()

# Build a test or utility executable
function(jinx_build_executable project_name source_list is_linked is_startup requires_pthreads)

	# Create executable as project name
	add_executable(${project_name} ${source_list})

	# Set C++ 17 compiler flags
	set(CMAKE_CXX_STANDARD 17)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)
	
	# Set the executable as the default startup project
	if(is_startup)
		set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${project_name})
	endif()
	
	# Add Jinx library
	if(is_linked)
		target_link_libraries(${project_name} Jinx)
	endif()
	
	# Add pthreads
	if(requires_pthreads AND UNIX AND NOT APPLE)
		set(THREADS_PREFER_PTHREAD_FLAG ON)
		find_package(Threads REQUIRED)
		target_link_libraries(${project_name} Threads::Threads)
	endif()

	# Create IDE folder structure
	jinx_set_folders(""${source_list}"" Source)

endfunction()

# Enable IDE folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(
    jinx_source_list
    ""Source/Jinx.h""
    ""Source/JxBuffer.cpp""
    ""Source/JxBuffer.h""
    ""Source/JxCollection.cpp""
    ""Source/JxCollection.h""
    ""Source/JxCommon.cpp""
    ""Source/JxCommon.h""
    ""Source/JxConversion.cpp""
    ""Source/JxConversion.h""
    ""Source/JxFunctionDefinition.h""
    ""Source/JxFunctionSignature.cpp""
    ""Source/JxFunctionSignature.h""
    ""Source/JxGuid.h""
    ""Source/JxHash.cpp""
    ""Source/JxHash.h""
    ""Source/JxInternal.h""
    ""Source/JxLexer.cpp""
    ""Source/JxLexer.h""
    ""Source/JxLibCore.cpp""
    ""Source/JxLibCore.h""
    ""Source/JxLibrary.cpp""
    ""Source/JxLibrary.h""
    ""Source/JxLogging.cpp""
    ""Source/JxLogging.h""
    ""Source/JxMemory.cpp""
    ""Source/JxMemory.h""
    ""Source/JxParser.cpp""
    ""Source/JxParser.h""
    ""Source/JxPropertyName.cpp""
    ""Source/JxPropertyName.h""
    ""Source/JxRuntime.cpp""
    ""Source/JxRuntime.h""
    ""Source/JxScript.cpp""
    ""Source/JxScript.h""
    ""Source/JxSerialize.cpp""
    ""Source/JxSerialize.h""
    ""Source/JxUnicode.cpp""
    ""Source/JxUnicode.h""
    ""Source/JxUnicodeCaseFolding.cpp""
    ""Source/JxUnicodeCaseFolding.h""
    ""Source/JxVariableStackFrame.cpp""
    ""Source/JxVariableStackFrame.h""
    ""Source/JxVariant.cpp""
    ""Source/JxVariant.h""
)

# Set C++ 17 compiler flags
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Create library as project name
add_library(${PROJECT_NAME} ${jinx_source_list})

# Set warning level
if(MSVC)
	target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX)
else()
	target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -pedantic -Werror)
endif()

# Create IDE folder structure
jinx_auto_set_folders(jinx_source_list)

# Check if Jinx is included via add_subdirectory.
get_directory_property(jinx_is_subproject PARENT_DIRECTORY)

# Only build the test suite and utilities if this is not a subproject
if(NOT jinx_is_subproject)

	set(
		headertest_source_list
		""Tests/HeaderTest/HeaderTest.cpp""
		""Tests/HeaderTest/HeaderTest.h""
		""Tests/HeaderTest/Main.cpp""
	)
	set(
		unittests_source_list
		""Tests/UnitTests/catch.hpp""
		""Tests/UnitTests/Main.cpp""
		""Tests/UnitTests/TestCasts.cpp""
		""Tests/UnitTests/TestCollections.cpp""
		""Tests/UnitTests/TestErrors.cpp""
		""Tests/UnitTests/TestExpressions.cpp""
		""Tests/UnitTests/TestFunctions.cpp""
		""Tests/UnitTests/TestIfElse.cpp""
		""Tests/UnitTests/TestLibCore.cpp""
		""Tests/UnitTests/TestLibraries.cpp""
		""Tests/UnitTests/TestLoops.cpp""
		""Tests/UnitTests/TestNative.cpp""
		""Tests/UnitTests/TestStatements.cpp""
		""Tests/UnitTests/TestUnicode.cpp""
		""Tests/UnitTests/UnitTest.cpp""
		""Tests/UnitTests/UnitTest.h""
	)
	jinx_build_executable(Features ""Tests/Features/Main.cpp"" TRUE FALSE FALSE)	
	jinx_build_executable(FuzzTests ""Tests/FuzzTests/Main.cpp"" TRUE FALSE TRUE)	
	jinx_build_executable(HeaderTest ""${headertest_source_list}"" FALSE FALSE FALSE)
	jinx_build_executable(PerfTest ""Tests/PerfTest/Main.cpp"" TRUE FALSE TRUE)
	jinx_build_executable(UnitTests ""${unittests_source_list}"" TRUE TRUE FALSE)
	if(MSVC)
		jinx_build_executable(CaseFoldGen ""Utils/CaseFoldGen/Main.cpp"" FALSE FALSE FALSE)
		add_subdirectory(Utils/JinxTools)		
		add_subdirectory(Utils/JinxPad)	
	endif()

endif()
",3.10,3.1
8318,hyperquantum,PMP,False,False,False,False,False,1,C++,2020-05-01 22:34:38+00:00,2014-11-06 18:43:38+00:00,2,557,"# Copyright (C) 2011-2018, Kevin Andre <hyperquantum@gmail.com>
#
# This file is part of PMP (Party Music Player).
#
# PMP is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# PMP is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with PMP.  If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
set(CMAKE_LEGACY_CYGWIN_WIN32 0)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
project(PMP)

enable_testing()

set (CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(FindPkgConfig)
include(PMPVersion)

find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5Multimedia REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5Sql REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Xml REQUIRED)

pkg_check_modules(TAGLIB REQUIRED taglib>=1.11)

include_directories(${TAGLIB_INCLUDE_DIRS})
link_directories(${TAGLIB_LIBRARY_DIRS})

# enable compiler warnings for GCC
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic"")
endif()

set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(WIN32)
  option(ENABLE_WIN32_CONSOLE ""Show the windows console even outside Debug mode"" OFF)
endif(WIN32)

add_subdirectory(src)
add_subdirectory(testing)
",3.1.0,3.1
8319,H-uru,libhsplasma,False,False,False,False,False,16,C++,2020-05-11 14:44:44+00:00,2011-07-01 04:43:11+00:00,21,1419,"project(libhsplasma)
cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake"")

option(ENABLE_SSE2 ""Build with SSE2 CPU instructions"" ON)

set(CMAKE_C_FLAGS_DEBUG ""-DDEBUG ${CMAKE_C_FLAGS_DEBUG}"")
set(CMAKE_CXX_FLAGS_DEBUG ""-DDEBUG ${CMAKE_CXX_FLAGS_DEBUG}"")
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
        CMAKE_CXX_COMPILER_ID MATCHES "".*Clang"")
    set(WARNING_FLAGS ""-Wall -Wextra -Wno-unused-parameter"")
    set(CMAKE_CXX_FLAGS ""${WARNING_FLAGS} ${CMAKE_CXX_FLAGS}"")
    set(CMAKE_C_FLAGS ""${WARNING_FLAGS} ${CMAKE_C_FLAGS}"")
    if(ENABLE_SSE2)
        set(CMAKE_CXX_FLAGS ""-msse2 ${CMAKE_CXX_FLAGS}"")
        set(CMAKE_C_FLAGS ""-msse2 ${CMAKE_C_FLAGS}"")
    endif()
endif()

if(APPLE)
    add_definitions(""-DMACOSX"")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD ""c++11"")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY ""libc++"")
endif()

if(MSVC)
    add_definitions(""-D_CRT_SECURE_NO_WARNINGS"")
    set(CMAKE_CXX_FLAGS ""/wd4996 /wd4244 /wd4251 /wd4351 ${CMAKE_CXX_FLAGS}"")
    set(CMAKE_C_FLAGS ""/wd4996 /wd4244 /wd4251 /wd4351 ${CMAKE_C_FLAGS}"")
endif()

# Turn everything on by default
option(ENABLE_PYTHON ""Build HSPlasma Python integration"" ON)
option(ENABLE_TOOLS ""Build the HSPlasma tools"" ON)
option(ENABLE_NET ""Build HSPlasmaNet"" ON)
option(ENABLE_PHYSX ""Build with PhysX Support"" ON)
option(BUILD_SHARED_LIBS ""Build shared libraries"" ON)

try_compile(NEED_SIZE_T_OVERLOAD ${PROJECT_BINARY_DIR}
            ${PROJECT_SOURCE_DIR}/cmake/check_size_t_overload.cpp)

configure_file(${PROJECT_SOURCE_DIR}/cmake/PlasmaConfig.h.in
               ${PROJECT_BINARY_DIR}/PlasmaConfig.h)
include_directories(${PROJECT_BINARY_DIR})

find_package(string_theory 2.0 REQUIRED)

add_subdirectory(core)

if(ENABLE_PYTHON)
    add_subdirectory(Python)
endif()

if(ENABLE_TOOLS)
    add_subdirectory(Tools)
endif()

if(ENABLE_NET)
    add_subdirectory(net)
endif()

install(EXPORT HSPlasma-targets DESTINATION share/cmake/HSPlasma)
",3.1,3.1
8433,beached,parse_json,False,False,False,False,False,1,C++,2019-11-26 02:23:01+00:00,2016-05-05 23:22:47+00:00,1,305,"cmake_minimum_required(VERSION 3.10)

project( parse_json_prj )
#set( CMAKE_CXX_STANDARD 17 CACHE STRING ""The C++ standard whose features are requested."")

find_package( Boost 1.60.0 COMPONENTS system filesystem regex iostreams unit_test_framework REQUIRED )
find_package( CURL REQUIRED )

include_directories( SYSTEM ${Boost_INCLUDE_DIRS} )
link_directories( ${Boost_LIBRARY_DIRS} )

add_definitions( -DBOOST_TEST_DYN_LINK ) 

enable_testing()

include(""${CMAKE_SOURCE_DIR}/dependent_projects/CMakeListsCompiler.txt"")

include_directories(""./include"")
#set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)

if (""${CMAKE_BUILD_TYPE}"" STREQUAL ""Debug"")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/debug"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/release"")
elseif (""${CMAKE_BUILD_TYPE}"" STREQUAL ""Release"")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/release"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/debug"")
elseif (""${CMAKE_BUILD_TYPE}"" STREQUAL """")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/release"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/debug"")
endif ()

message(""Building for: ${CMAKE_BUILD_TYPE}"")
message(""Checking for glean cache: '${GLEAN_CACHE}'"")

option(GLEAN_INSTALL_ROOT """")
if (EXISTS ""${GLEAN_INSTALL_ROOT}"")
  message(""using glean dependencies"")
  message(""installing to ${GLEAN_INSTALL_ROOT}"")
  add_custom_target(dependency_stub)
  include_directories(SYSTEM ""${GLEAN_INSTALL_ROOT}/include"")
  link_directories(""${GLEAN_INSTALL_ROOT}/lib"")
elseif (EXISTS ""${GLEAN_CACHE}"")
	message(""using glean dependencies in cache at ${GLEAN_INSTALL_ROOT}"")
  add_custom_target(dependency_stub)
  include_directories(SYSTEM ""${GLEAN_CACHE}/include"")
  link_directories(""${GLEAN_CACHE}/lib"")
elseif (EXISTS ""${GLEAN_CACHE2}"")
  message(""looks like glean is in use but missing ${GLEAN_CACHE}"")
elseif (EXISTS ""${CMAKE_SOURCE_DIR}/glean.cmake"")
  message(""glean.cmake detected"")
  include(""${CMAKE_SOURCE_DIR}/glean.cmake"")
  add_library(dependency_stub STATIC ""${CMAKE_SOURCE_DIR}/dependent_projects/stub.cpp"")
  add_dependencies(dependency_stub ${DEP_PROJECT_DEPS})
  include_directories(SYSTEM ""${CMAKE_BINARY_DIR}/install/include"")
  link_directories(""${CMAKE_BINARY_DIR}/install/lib"")
endif ()

set(HEADER_FOLDER ""include"")
set(TEST_FOLDER ""tests"")
set(SOURCE_FOLDER ""src"")

include_directories(${HEADER_FOLDER})
set( HEADER_FILES
	${HEADER_FOLDER}/daw_json.h
	${HEADER_FOLDER}/daw_json_details.h
	${HEADER_FOLDER}/daw_json_interface.h
	${HEADER_FOLDER}/daw_json_link.h
	${HEADER_FOLDER}/daw_json_parser.h
	${HEADER_FOLDER}/daw_json_value_t.h
	${HEADER_FOLDER}/daw_value_to_json.h
)

set( SOURCE_FILES
	${SOURCE_FOLDER}/daw_json.cpp
	${SOURCE_FOLDER}/daw_json_link.cpp
	${SOURCE_FOLDER}/daw_json_parser.cpp
	${SOURCE_FOLDER}/daw_json_value_t.cpp
	${SOURCE_FOLDER}/daw_value_to_json.cpp
)

set( HEADER_FILES_v2
	${HEADER_FOLDER}/daw_json_link_binding.h
	${HEADER_FOLDER}/daw_json_parser_v2.h
	${HEADER_FOLDER}/daw_json_parser_exception.h
	${HEADER_FOLDER}/daw_json_parser_impl.h
)

set( SOURCE_FILES_v2
	${SOURCE_FOLDER}/daw_json_parser_v2.cpp
	${SOURCE_FOLDER}/daw_json_parser_v2_state.cpp
	${SOURCE_FOLDER}/daw_json_parser_exception.cpp
)

add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})
add_custom_target(full)

add_library ( parse_json ${HEADER_FILES} ${SOURCE_FILES} )
add_dependencies( parse_json dependency_stub )
target_link_libraries( parse_json utf_range utf_string ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} ${CURL_LIBRARIES} )
add_dependencies(check parse_json)
add_dependencies(full parse_json)

add_library ( parse_json_v2 ${HEADER_FILES_v2} ${SOURCE_FILES_v2} )
add_dependencies( parse_json_v2 dependency_stub )
target_link_libraries( parse_json_v2 utf_range utf_string ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} ${CURL_LIBRARIES} )
add_dependencies(check parse_json_v2)
add_dependencies(full parse_json_v2)

install( TARGETS parse_json DESTINATION lib )
install( TARGETS parse_json_v2 DESTINATION lib )
install( DIRECTORY ${HEADER_FOLDER}/ DESTINATION include/daw/json )

add_executable( parse_json_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/parse_json_test.cpp )
add_dependencies( parse_json_test_bin dependency_stub )
target_link_libraries( parse_json_test_bin utf_string utf_range parse_json ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
add_test( NAME parse_json_test COMMAND parse_json_test_bin )
add_dependencies(check parse_json_test_bin)
add_dependencies(full parse_json_test_bin)

add_executable( parse_json_test_v2_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw_json_parser_v2.h ${HEADER_FILES_v2} ${TEST_FOLDER}/parse_json_test_v2.cpp )
add_dependencies( parse_json_test_v2_bin dependency_stub )
target_link_libraries( parse_json_test_v2_bin parse_json_v2 ${Boost_LIBRARIES} )
add_test( NAME parse_json_test_v2 COMMAND parse_json_test_v2_bin )
add_dependencies(check parse_json_test_v2_bin)
add_dependencies(full parse_json_test_v2_bin)

add_executable( json_file_parser_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/json_file_parser_test.cpp )
add_dependencies( json_file_parser_test_bin dependency_stub )
target_link_libraries( json_file_parser_test_bin utf_string utf_range parse_json ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
add_test( NAME json_file_parser_test COMMAND json_file_parser_test_bin )
add_dependencies(check json_file_parser_test_bin)
add_dependencies(full json_file_parser_test_bin)

add_executable( daw_json_link_v2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES_v2} ${TEST_FOLDER}/daw_json_link_v2_test.cpp )
add_dependencies( daw_json_link_v2_test_bin dependency_stub )
target_link_libraries( daw_json_link_v2_test_bin utf_range utf_string parse_json ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
add_test( NAME daw_json_link_v2_test COMMAND daw_json_link_v2_test_bin )
add_dependencies(check daw_json_link_v2_test_bin)
add_dependencies(full daw_json_link_v2_test_bin)

add_executable( json_link_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/json_link_test.cpp )
add_dependencies( json_link_test_bin dependency_stub )
target_link_libraries( json_link_test_bin utf_range utf_string parse_json ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
add_test( NAME json_link_test COMMAND json_link_test_bin )
add_dependencies(check json_link_test_bin)
add_dependencies(full json_link_test_bin)

",3.10,3.1
8498,thrust,thrust,False,False,False,False,False,38,C++,2020-05-16 18:29:13+00:00,2012-03-06 01:01:29+00:00,2740,3844,"cmake_minimum_required(VERSION 3.10)

project(Thrust NONE)

set(THRUST_SOURCE ""${CMAKE_SOURCE_DIR}"")
include(cmake/common_variables.cmake)

if ("""" STREQUAL ""${CMAKE_BUILD_TYPE}"")
  set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""Choose the type of build."" FORCE)

  set_property(
    CACHE CMAKE_BUILD_TYPE
    PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel
  )
endif ()

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.12)
  set(CMAKE_CONFIGURE_DEPENDS CONFIGURE_DEPENDS)
endif ()

list(INSERT CMAKE_MODULE_PATH 0 ""${PROJECT_SOURCE_DIR}/cmake"")
include(AppendOptionIfAvailable)

# Please note this also sets the default for the CUDA C++ version; see the comment below.
set(CMAKE_CXX_STANDARD 14 CACHE STRING ""The C++ version to be used."")
set(CMAKE_CXX_EXTENSIONS OFF)

message(STATUS ""C++ Standard version: ${CMAKE_CXX_STANDARD}"")

# Temporary hacks to make Feta work; this requires you to define
# `CMAKE_CUDA_COMPILER_ID=Feta` and `CMAKE_CUDA_COMPILER_FORCED`.
if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
  # If using Feta, don't set CXX compiler
  if (NOT ""${CMAKE_CXX_COMPILER}"" STREQUAL """")
    unset(CMAKE_CXX_COMPILER CACHE)
    message(FATAL_ERROR ""You are using Feta as your CUDA C++ compiler, but have""
      "" specified a different ISO C++ compiler; Feta acts as both, so please""
      "" unset the CMAKE_CXX_COMPILER variable."")
  endif ()

  # We don't set CMAKE_CUDA_HOST_COMPILER for Feta; if we do, CMake tries to
  # pass `-ccbin ${CMAKE_CUDA_HOST_COMPILER}` to Feta, which it doesn't
  # understand.
  if (NOT ""${CMAKE_CUDA_HOST_COMPILER}"" STREQUAL """")
    unset(CMAKE_CUDA_HOST_COMPILER CACHE)
    message(FATAL_ERROR ""You are using Feta as your CUDA C++ compiler, but have""
      "" specified a different host ISO C++ compiler; Feta acts as both, so""
      "" please unset the CMAKE_CUDA_HOST_COMPILER variable."")
  endif ()

  set(CMAKE_CXX_COMPILER ""${CMAKE_CUDA_COMPILER}"")
  set(CMAKE_CUDA_FLAGS ""${CMAKE_CUDA_FLAGS} -stdpar"")
  set(CMAKE_CUDA_HOST_LINK_LAUNCHER ""${CMAKE_CUDA_COMPILER}"")
  set(CMAKE_CUDA_LINK_EXECUTABLE
      ""<CMAKE_CUDA_HOST_LINK_LAUNCHER> ${CMAKE_CUDA_FLAGS} <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>"")
endif ()

enable_language(CXX)

# We don't set CMAKE_CUDA_HOST_COMPILER for Feta; if we do, CMake tries to
# pass `-ccbin ${CMAKE_CUDA_HOST_COMPILER}` to Feta, which it doesn't
# understand.
if (NOT ""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
  if (NOT ""${CMAKE_CUDA_HOST_COMPILER}"" STREQUAL """")
    unset(CMAKE_CUDA_HOST_COMPILER CACHE)
    message(FATAL_ERROR ""Thrust tests and examples require the C++ compiler""
      "" and the CUDA host compiler to be the same; to set this compiler, please""
      "" use the CMAKE_CXX_COMPILER variable, not the CMAKE_CUDA_HOST_COMPILER""
      "" variable."")
  endif ()
  set(CMAKE_CUDA_HOST_COMPILER ""${CMAKE_CXX_COMPILER}"")
endif ()

set(THRUST_TARGET_FLAGS)
macro(add_flag_option flag docstring default)
  set(opt ""THRUST_${flag}"")
  option(${opt} ""${docstring}"" ""${default}"")
  mark_as_advanced(${opt})
  if (${${opt}})
    list(APPEND THRUST_TARGET_FLAGS ${flag})
  endif()
endmacro()
add_flag_option(IGNORE_DEPRECATED_CPP_DIALECT ""Don't warn about any deprecated C++ standards and compilers."" OFF)
add_flag_option(IGNORE_DEPRECATED_CPP_11 ""Don't warn about deprecated C++11."" OFF)
add_flag_option(IGNORE_DEPRECATED_COMPILER ""Don't warn about deprecated COMPILERS."" OFF)
add_flag_option(IGNORE_CUB_VERSION_CHECK ""Don't warn about mismatched CUB versions."" OFF)

# Use our find_package config to assemble the Thrust library components we need:
find_package(Thrust REQUIRED CONFIG
  NO_DEFAULT_PATH # Only check the explicit HINTS below:
  HINTS
    ""${CMAKE_CURRENT_LIST_DIR}""
)
thrust_create_target(Thrust FROM_OPTIONS ${THRUST_TARGET_FLAGS})
thrust_debug_target(Thrust ""${THRUST_VERSION}"")

thrust_update_system_found_flags()
message(STATUS ""CPP system found? ${THRUST_CPP_FOUND}"")
message(STATUS ""CUDA system found? ${THRUST_CUDA_FOUND}"")
message(STATUS ""TBB system found? ${THRUST_TBB_FOUND}"")
message(STATUS ""OMP system found? ${THRUST_OMP_FOUND}"")

if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  enable_language(CUDA)

  # Force CUDA C++ standard to be the same as the C++ standard used.
  #
  # Now, CMake is unaligned with reality on standard versions: https://gitlab.kitware.com/cmake/cmake/issues/18597
  # which means that using standard CMake methods, it's impossible to actually sync the CXX and CUDA versions for pre-11
  # versions of C++; CUDA accepts 98 but translates that to 03, while CXX doesn't accept 03 (and doesn't translate that to 03).
  # In case this gives You, dear user, any trouble, please escalate the above CMake bug, so we can support reality properly.
  if (DEFINED CMAKE_CUDA_STANDARD)
      message(WARNING ""You've set CMAKE_CUDA_STANDARD; please note that this variable is ignored, and CMAKE_CXX_STANDARD""
          "" is used as the C++ standard version for both C++ and CUDA."")
  endif()
  unset(CMAKE_CUDA_STANDARD CACHE)
  set(CMAKE_CUDA_STANDARD ${CMAKE_CXX_STANDARD})

  set(THRUST_HIGHEST_COMPUTE_ARCH 75)
  set(THRUST_KNOWN_COMPUTE_ARCHS 30 32 35 50 52 53 60 61 62 70 72 75)

  set(OPTION_INIT OFF)
  if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    set(OPTION_INIT ON)
  endif ()
  option(THRUST_DISABLE_ARCH_BY_DEFAULT ""If ON, then all CUDA architectures are disabled on the initial CMake run.""
    ${OPTION_INIT})

  set(OPTION_INIT ON)
  if (THRUST_DISABLE_ARCH_BY_DEFAULT)
    set(OPTION_INIT OFF)
  endif ()

  if (NOT ${THRUST_HIGHEST_COMPUTE_ARCH} IN_LIST THRUST_KNOWN_COMPUTE_ARCHS)
    message(FATAL_ERROR ""When changing the highest compute version, don't forget to add it to the list!"")
  endif ()

  set(NUMBER_OF_ARCHS_ENABLED 0)
  foreach (COMPUTE_ARCH IN LISTS THRUST_KNOWN_COMPUTE_ARCHS)
    option(THRUST_ENABLE_COMPUTE_${COMPUTE_ARCH} ""Enable code generation for tests for sm_${COMPUTE_ARCH}"" ${OPTION_INIT})
    if (THRUST_ENABLE_COMPUTE_${COMPUTE_ARCH})
      math(EXPR NUMBER_OF_ARCHS_ENABLED ""${NUMBER_OF_ARCHS_ENABLED}+1"")
      if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
        if (NOT ${NUMBER_OF_ARCHS_ENABLED} EQUAL 1)
          message(FATAL_ERROR ""Feta does not support compilation for multiple device architectures at once."")
        endif ()
        set(CMAKE_CUDA_FLAGS ""${CMAKE_CUDA_FLAGS} -gpu=cc${COMPUTE_ARCH}"")
      else ()
        set(CMAKE_CUDA_FLAGS ""${CMAKE_CUDA_FLAGS} -gencode arch=compute_${COMPUTE_ARCH},code=sm_${COMPUTE_ARCH}"")
      endif ()
      set(COMPUTE_MESSAGE ""${COMPUTE_MESSAGE} sm_${COMPUTE_ARCH}"")
    endif ()
  endforeach ()

  if (NOT ""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    option(THRUST_ENABLE_COMPUTE_FUTURE ""Enable code generation for tests for compute_${THRUST_HIGHEST_COMPUTE_ARCH}"" ${OPTION_INIT})
    if (THRUST_ENABLE_COMPUTE_FUTURE)
      set(CMAKE_CUDA_FLAGS
        ""${CMAKE_CUDA_FLAGS} -gencode arch=compute_${THRUST_HIGHEST_COMPUTE_ARCH},code=compute_${THRUST_HIGHEST_COMPUTE_ARCH}"")
      set(COMPUTE_MESSAGE ""${COMPUTE_MESSAGE} compute_${THRUST_HIGHEST_COMPUTE_ARCH}"")
    endif ()
  endif ()

  if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    # Today:
    # * NVCC accepts CUDA C++ in .cu files but not .cpp files.
    # * Feta accepts CUDA C++ in .cpp files but not .cu files.
    # TODO: This won't be necessary in the future.
    set(CMAKE_CUDA_FLAGS ""${CMAKE_CUDA_FLAGS} -cppsuffix=cu"")
    set(THRUST_TREAT_FILE_AS_CXX """")
  endif ()

  # RDC is off by default in NVCC and on by default in Feta. Turning off RDC
  # isn't currently supported by Feta. So, we default to RDC off for NVCC and
  # RDC on for Feta.
  set(OPTION_INIT OFF)
  if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    set(OPTION_INIT ON)
  endif ()

  option(THRUST_ENABLE_TESTS_WITH_RDC
    ""Build all Thrust tests with RDC; tests that require RDC are not affected by this option.""
    ${OPTION_INIT})

  option(THRUST_ENABLE_EXAMPLES_WITH_RDC
    ""Build all Thrust examples with RDC; examples which require RDC are not affected by this option.""
    ${OPTION_INIT})

  message(""-- Enabled CUDA architectures:${COMPUTE_MESSAGE}"")
endif ()

if (""TBB"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  # There's a ton of these in the TBB backend, even though the code is correct.
  # TODO: silence these warnings in code instead
  append_option_if_available(""-Wno-unused-parameter"" THRUST_CXX_WARNINGS)
endif ()

if (""MSVC"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"")
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.00)
    message(FATAL_ERROR ""This version of MSVC no longer supported."")
  endif ()
endif ()

if (""GNU"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"")
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.4)
    message(FATAL_ERROR ""This version of GCC no longer supported."")
  endif ()
endif ()

if (""MSVC"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"")
  # TODO Enable /Wall
  append_option_if_available(""/WX"" THRUST_CXX_WARNINGS)

  # Disabled loss-of-data conversion warnings.
  # TODO Re-enable.
  append_option_if_available(""/wd4244"" THRUST_CXX_WARNINGS)
  append_option_if_available(""/wd4267"" THRUST_CXX_WARNINGS)

  # Suppress numeric conversion-to-bool warnings.
  # TODO Re-enable.
  append_option_if_available(""/wd4800"" THRUST_CXX_WARNINGS)

  # Disable warning about applying unary operator- to unsigned type.
  append_option_if_available(""/wd4146"" THRUST_CXX_WARNINGS)

  # MSVC STL assumes that `allocator_traits`'s allocator will use raw pointers,
  # and the `__DECLSPEC_ALLOCATOR` macro causes issues with thrust's universal
  # allocators:
  #   warning C4494: 'std::allocator_traits<_Alloc>::allocate' :
  #      Ignoring __declspec(allocator) because the function return type is not
  #      a pointer or reference
  # See https://github.com/microsoft/STL/issues/696
  append_option_if_available(""/wd4494"" THRUST_CXX_WARNINGS)

  # Some of the async tests require /bigobj to fit all their sections into the
  # object files:
  append_option_if_available(""/bigobj"" THRUST_CXX_WARNINGS)

  set(THRUST_TREAT_FILE_AS_CXX ""/TP"")
else ()
  append_option_if_available(""-Werror"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wall"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wextra"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Winit-self"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Woverloaded-virtual"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wcast-qual"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wno-cast-align"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wno-long-long"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wno-variadic-macros"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wno-unused-function"" THRUST_CXX_WARNINGS)
  append_option_if_available(""-Wno-unused-variable"" THRUST_CXX_WARNINGS)

  set(THRUST_TREAT_FILE_AS_CXX ""-x c++"")
endif ()

if (""GNU"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"")
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.5)
    # In GCC 4.4, the CUDA backend's kernel launch templates cause
    # impossible-to-decipher ""'<anonymous>' is used uninitialized in this
    # function"" warnings, so we disable uninitialized variable warnings.
    append_option_if_available(""-Wno-uninitialized"" THRUST_CXX_WARNINGS)
  endif ()

  if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.5)
    # This isn't available until GCC 4.3, and misfires on TMP code until
    # GCC 4.5.
    append_option_if_available(""-Wlogical-op"" THRUST_CXX_WARNINGS)
  endif ()

  if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 7.3)
    # GCC 7.3 complains about name mangling changes due to `noexcept`
    # becoming part of the type system; we don't care.
    append_option_if_available(""-Wno-noexcept-type"" THRUST_CXX_WARNINGS)
  endif ()

  if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 AND CMAKE_CXX_STANDARD EQUAL 98)
    # thrust::complex can't really be made trivially copyable in pre-11.
    # Disable a warning about a non-trivially-copyable type being memmoved that was added to GCC 8.
    append_option_if_available(""-Wno-class-memaccess"" THRUST_CXX_WARNINGS)
  endif ()
endif ()

if ((""Clang"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"") OR
    (""XL"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}""))
  # xlC and Clang warn about unused parameters in uninstantiated templates.
  # This causes xlC to choke on the OMP backend, which is mostly #ifdef'd out
  # (and thus has unused parameters) when you aren't using it.
  append_option_if_available(""-Wno-unused-parameters"" THRUST_CXX_WARNINGS)
endif ()

if (""Clang"" STREQUAL ""${CMAKE_CXX_COMPILER_ID}"")
  # -Wunneeded-internal-declaration misfires in the unit test framework
  # on older versions of Clang.
  append_option_if_available(""-Wno-unneeded-internal-declaration"" THRUST_CXX_WARNINGS)
endif ()

foreach (CXX_OPTION IN LISTS THRUST_CXX_WARNINGS)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${CXX_OPTION}"")
endforeach ()

if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  if (""NVIDIA"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    foreach (CXX_OPTION IN LISTS THRUST_CXX_WARNINGS)
      set(CMAKE_CUDA_FLAGS ""${CMAKE_CUDA_FLAGS} -Xcompiler=${CXX_OPTION}"")
    endforeach ()
    set(CMAKE_CUDA_FLAGS
      ""${CMAKE_CUDA_FLAGS} -Werror all-warnings -Xcudafe --display_error_number"")
  endif ()
endif ()

# For every public header, build a translation unit containing `#include <header>`
# to let the compiler try to figure out warnings in that header if it is not otherwise
# included in tests, and also to verify if the headers are modular enough.
# .inl files are not globbed for, because they are not supposed to be used as public
# entrypoints.
list(APPEND THRUST_HEADER_GLOBS thrust/*.h)
list(APPEND THRUST_HEADER_EXCLUDE_SYSTEMS_GLOBS thrust/system/*/*)

string(TOLOWER ${THRUST_HOST_SYSTEM} THRUST_HOST_SYSTEM_LOWERCASE)
list(APPEND THRUST_HEADER_SYSTEMS_GLOBS thrust/system/${THRUST_HOST_SYSTEM_LOWERCASE}/*)

string(TOLOWER ${THRUST_DEVICE_SYSTEM} THRUST_DEVICE_SYSTEM_LOWERCASE)
list(APPEND THRUST_HEADER_SYSTEMS_GLOBS thrust/system/${THRUST_DEVICE_SYSTEM_LOWERCASE}/*)

list(APPEND THRUST_HEADER_EXCLUDE_DETAILS_GLOBS thrust/detail/*)
list(APPEND THRUST_HEADER_EXCLUDE_DETAILS_GLOBS thrust/*/detail/*)
list(APPEND THRUST_HEADER_EXCLUDE_DETAILS_GLOBS thrust/*/*/detail/*)

# Get all .h files...
file(
  GLOB_RECURSE THRUST_HEADERS
  RELATIVE ${PROJECT_SOURCE_DIR}/thrust
  ${CMAKE_CONFIGURE_DEPENDS}
  ${THRUST_HEADER_GLOBS}
)

# ...then remove all system specific headers...
file(
  GLOB_RECURSE THRUST_HEADER_EXCLUDE_SYSTEMS
  RELATIVE ${PROJECT_SOURCE_DIR}/thrust
  ${CMAKE_CONFIGURE_DEPENDS}
  ${THRUST_HEADER_EXCLUDE_SYSTEMS_GLOBS}
)
list(REMOVE_ITEM THRUST_HEADERS ${THRUST_HEADER_EXCLUDE_SYSTEMS})

# ...then add all headers specific to the selected host and device systems back again...
file(
  GLOB_RECURSE THRUST_SYSTEMS_HEADERS
  RELATIVE ${PROJECT_SOURCE_DIR}/thrust
  ${CMAKE_CONFIGURE_DEPENDS}
  ${THRUST_HEADER_SYSTEMS_GLOBS}
)
list(APPEND THRUST_HEADERS ${THRUST_SYSTEMS_HEADERS})

# ...and remove all the detail headers (also removing the detail headers from the selected systems).
file(
  GLOB_RECURSE THRUST_HEADER_EXCLUDE_DETAILS
  RELATIVE ${PROJECT_SOURCE_DIR}/thrust
  ${CMAKE_CONFIGURE_DEPENDS}
  ${THRUST_HEADER_EXCLUDE_DETAILS_GLOBS}
)
list(REMOVE_ITEM THRUST_HEADERS ${THRUST_HEADER_EXCLUDE_DETAILS})

# List of headers that aren't implemented for all backends, but are implemented for CUDA.
set(THRUST_PARTIALLY_IMPLEMENTED_HEADERS_CUDA
  async/copy.h
  async/for_each.h
  async/reduce.h
  async/sort.h
  async/transform.h
  event.h
  future.h
)

# List of headers that aren't implemented for all backends, but are implemented for CPP.
set(THRUST_PARTIALLY_IMPLEMENTED_HEADERS_CPP
)

# List of headers that aren't implemented for all backends, but are implemented for TBB.
set(THRUST_PARTIALLY_IMPLEMENTED_HEADERS_TBB
)

# List of headers that aren't implemented for all backends, but are implemented for OMP.
set(THRUST_PARTIALLY_IMPLEMENTED_HEADERS_OMP
)

# List of all partially implemented headers.
set(THRUST_PARTIALLY_IMPLEMENTED_HEADERS
  emptylistguard
  ${THRUST_PARTIALLY_IMPLEMENTED_HEADERS_CUDA}
  ${THRUST_PARTIALLY_IMPLEMENTED_HEADERS_CPP}
  ${THRUST_PARTIALLY_IMPLEMENTED_HEADERS_TBB}
  ${THRUST_PARTIALLY_IMPLEMENTED_HEADERS_OMP}
)

list(REMOVE_DUPLICATES THRUST_PARTIALLY_IMPLEMENTED_HEADERS)

foreach (THRUST_HEADER IN LISTS THRUST_HEADERS)
  if (""${THRUST_HEADER}"" IN_LIST THRUST_PARTIALLY_IMPLEMENTED_HEADERS)
    # This header is partially implemented on _some_ backends...
    if (NOT ""${THRUST_HEADER}"" IN_LIST THRUST_PARTIALLY_IMPLEMENTED_HEADERS_${THRUST_DEVICE_SYSTEM})
      # ...but not on the selected one.
      continue()
    endif ()
  endif ()

  set(THRUST_HEADER_TEST_EXT .cpp)
  if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
    set(THRUST_HEADER_TEST_EXT .cu)
  endif ()

  set(SOURCE_NAME headers/${THRUST_HEADER}${THRUST_HEADER_TEST_EXT})
  configure_file(cmake/header_test.in ${SOURCE_NAME})

  list(APPEND THRUST_HEADER_TEST_SOURCES ${SOURCE_NAME})
endforeach ()

add_library(header-test OBJECT ${THRUST_HEADER_TEST_SOURCES})
target_link_libraries(header-test PUBLIC Thrust)

include(CTest)
enable_testing()

# Handle tests.

set(THRUST_TEST_RUN_ARGUMENTS
  -DTHRUST_SOURCE=${CMAKE_SOURCE_DIR}
  -P ""${CMAKE_SOURCE_DIR}/cmake/run_test.cmake"")

list(APPEND THRUST_TESTFRAMEWORK_FILES testing/unittest/testframework.cu)
if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_TESTFRAMEWORK_FILES testing/unittest/cuda/testframework.cu)
else ()
  # When CUDA is disabled, explain to CMake that testframework.cu is actually a C++ file.
  set_source_files_properties(testing/unittest/testframework.cu
    PROPERTIES
      LANGUAGE CXX
      COMPILE_FLAGS ""${THRUST_TREAT_FILE_AS_CXX}"")
endif ()

add_library(thrust_testframework STATIC ${THRUST_TESTFRAMEWORK_FILES})
target_link_libraries(thrust_testframework PUBLIC Thrust)
target_include_directories(
  thrust_testframework
  PRIVATE ${PROJECT_SOURCE_DIR}/testing
)

if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"" AND ""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
  set_target_properties(thrust_testframework
    PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS OFF)
endif ()

list(APPEND THRUST_TEST_GLOBS testing/*.cu)
list(APPEND THRUST_TEST_GLOBS testing/*.cpp)

if     (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_TEST_GLOBS testing/cuda/*.cu)
elseif (""CPP"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_TEST_GLOBS testing/cpp/*.cu)
  list(APPEND THRUST_TEST_GLOBS testing/cpp/*.cpp)
elseif (""OMP"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_TEST_GLOBS testing/omp/*.cu)
  list(APPEND THRUST_TEST_GLOBS testing/omp/*.cpp)
endif ()

file(
  GLOB THRUST_TESTS
  RELATIVE ${PROJECT_SOURCE_DIR}/testing
  ${CMAKE_CONFIGURE_DEPENDS}
  ${THRUST_TEST_GLOBS}
)

# List of tests that aren't implemented for all backends, but are implemented for CUDA.
set(THRUST_PARTIALLY_IMPLEMENTED_CUDA
    async_copy
    async_for_each
    async_reduce
    async_reduce_into
    async_sort
    async_transform
    event
    future
)

# List of tests that aren't implemented for all backends, but are implemented for CPP.
set(THRUST_PARTIALLY_IMPLEMENTED_CPP
)

# List of tests that aren't implemented for all backends, but are implemented for TBB.
set(THRUST_PARTIALLY_IMPLEMENTED_TBB
)

# List of tests that aren't implemented for all backends, but are implemented for OMP.
set(THRUST_PARTIALLY_IMPLEMENTED_OMP
)

# List of all partially implemented tests.
set(THRUST_PARTIALLY_IMPLEMENTED
  ${THRUST_PARTIALLY_IMPLEMENTED_CUDA}
  ${THRUST_PARTIALLY_IMPLEMENTED_CPP}
  ${THRUST_PARTIALLY_IMPLEMENTED_TBB}
  ${THRUST_PARTIALLY_IMPLEMENTED_OMP}
)

list(REMOVE_DUPLICATES THRUST_PARTIALLY_IMPLEMENTED)

# Handle tests.

foreach (THRUST_TEST_SOURCE IN LISTS THRUST_TESTS)
  # TODO: Per-test flags.

  set(THRUST_TEST_CREATION_ADDITIONAL)
  set(THRUST_TEST_ADD_TO_CTEST ON)

  get_filename_component(THRUST_TEST_CATEGORY ${THRUST_TEST_SOURCE} DIRECTORY)
  if (NOT ("""" STREQUAL ""${THRUST_TEST_CATEGORY}""))
    set(THRUST_TEST_CATEGORY ""${THRUST_TEST_CATEGORY}."")
  endif ()

  get_filename_component(THRUST_TEST_NAME ${THRUST_TEST_SOURCE} NAME_WE)

  if (""${THRUST_TEST_NAME}"" IN_LIST THRUST_PARTIALLY_IMPLEMENTED)
    # This test is partially implemented on _some_ backends...
    if (NOT ""${THRUST_TEST_NAME}"" IN_LIST THRUST_PARTIALLY_IMPLEMENTED_${THRUST_DEVICE_SYSTEM})
      # ...but not on the selected one.
      set(THRUST_TEST_CREATION_ADDITIONAL EXCLUDE_FROM_ALL)
      set(THRUST_TEST_ADD_TO_CTEST OFF)
    endif ()
  endif ()

  set(THRUST_TEST ""thrust.test.${THRUST_TEST_CATEGORY}${THRUST_TEST_NAME}"")

  if (NOT ""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
    # Test files are generally .cu; if CUDA is not enabled, CMake doesn't know what to
    # do with them. But since they are pretty much just C++, we can compile them with
    # non-nvcc C++ compilers... but we need to tell CMake that they are, in fact, just C++.
    set_source_files_properties(${PROJECT_SOURCE_DIR}/testing/${THRUST_TEST_SOURCE}
      PROPERTIES
        LANGUAGE CXX
        COMPILE_FLAGS ""${THRUST_TREAT_FILE_AS_CXX}"")
  endif ()

  add_executable(
    ${THRUST_TEST}
    ${THRUST_TEST_CREATION_ADDITIONAL}
    # THRUST_TEST_CREATION_ADDITIONAL is actually a CMake keyword (sometimes).
    ${PROJECT_SOURCE_DIR}/testing/${THRUST_TEST_SOURCE}
  )

  target_include_directories(
    ${THRUST_TEST}
    PRIVATE ${PROJECT_SOURCE_DIR}/testing
  )

  target_link_libraries(${THRUST_TEST} thrust_testframework)

  if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"" AND ""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    set_target_properties(${THRUST_TEST}
      PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS OFF)
  endif ()

  # All the CUDA-specific ones will test device-side launch (aka calling parallel
  # algorithms from device code), which requires the CUDA device-side runtime,
  # which requires RDC, so these always need to be built with RDC.
  if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"" AND
      (THRUST_ENABLE_TESTS_WITH_RDC OR ""${THRUST_TEST_CATEGORY}"" STREQUAL ""cuda""))
    if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
      set_target_properties(${THRUST_TEST}
        PROPERTIES COMPILE_FLAGS ""-gpu=rdc"")
    else ()
      set_target_properties(${THRUST_TEST}
        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    endif ()
  endif ()

  if (THRUST_TEST_ADD_TO_CTEST)
    add_test(NAME ${THRUST_TEST}
      COMMAND ${CMAKE_COMMAND}
        -DTHRUST_BINARY=$<TARGET_FILE:${THRUST_TEST}>
        ${THRUST_TEST_RUN_ARGUMENTS})
  endif ()
endforeach ()

# Handle examples.

option(THRUST_EXAMPLE_FILECHECK_PATH ""Path to the LLVM FileCheck utility."" """")

set(THRUST_EXAMPLE_FILECHECK_ENABLED OFF)
if (NOT """" STREQUAL ""${THRUST_EXAMPLE_FILECHECK_PATH}"")
  execute_process(
    COMMAND ""${THRUST_EXAMPLE_FILECHECK_PATH}"" ""${THRUST_FILECHECK_DATA_PATH}/thrust.sanity.filecheck""
    INPUT_FILE ""${CMAKE_SOURCE_DIR}/cmake/sanity""
    RESULT_VARIABLE THRUST_FILECHECK_RESULT
  )

  if (""0"" STREQUAL ""${THRUST_FILECHECK_RESULT}"")
    set(THRUST_EXAMPLE_FILECHECK_ENABLED ON)
    message(""-- FileCheck enabled: ${THRUST_EXAMPLE_FILECHECK_PATH}"")
  endif ()
endif ()

list(APPEND THRUST_EXAMPLE_GLOBS examples/*.cu)
list(APPEND THRUST_EXAMPLE_GLOBS examples/*.cpp)

if     (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_EXAMPLE_GLOBS examples/cuda/*.cu)
elseif (""OMP"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
  list(APPEND THRUST_EXAMPLE_GLOBS examples/omp/*.cu)
  list(APPEND THRUST_EXAMPLE_GLOBS examples/omp/*.cpp)
endif ()

if (CMAKE_VERSION VERSION_LESS 3.12)
  file(
    GLOB THRUST_EXAMPLES
    RELATIVE ${PROJECT_SOURCE_DIR}/examples
    ${THRUST_EXAMPLE_GLOBS}
    CONFIGURE_DEPENDS
  )
else ()
  file(
    GLOB THRUST_EXAMPLES
    RELATIVE ${PROJECT_SOURCE_DIR}/examples
    ${THRUST_EXAMPLE_GLOBS}
  )
endif ()

set(THRUST_EXAMPLE_RUN_ARGUMENTS
  -DTHRUST_SOURCE=${CMAKE_SOURCE_DIR}
  -DTHRUST_FILECHECK_ENABLED=${THRUST_EXAMPLE_FILECHECK_ENABLED}
  -DTHRUST_FILECHECK=${THRUST_EXAMPLE_FILECHECK_PATH}
  -P ""${CMAKE_SOURCE_DIR}/cmake/run_example.cmake"")

foreach (THRUST_EXAMPLE_SOURCE IN LISTS THRUST_EXAMPLES)
  # TODO: Per-example flags.

  get_filename_component(THRUST_EXAMPLE_CATEGORY ${THRUST_EXAMPLE_SOURCE} DIRECTORY)
  if (NOT ("""" STREQUAL ""${THRUST_EXAMPLE_CATEGORY}""))
    set(THRUST_EXAMPLE_CATEGORY ""${THRUST_EXAMPLE_CATEGORY}."")
  endif ()

  get_filename_component(THRUST_EXAMPLE_NAME ${THRUST_EXAMPLE_SOURCE} NAME_WE)

  set(THRUST_EXAMPLE ""thrust.example.${THRUST_EXAMPLE_CATEGORY}${THRUST_EXAMPLE_NAME}"")

  if (NOT ""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"")
    # Example files are generally .cu; if CUDA is not enabled, CMake doesn't know what to
    # do with them. But since they are pretty much just C++, we can compile them with
    # non-nvcc C++ compilers... but we need to tell CMake that they are, in fact, just C++.
    set_source_files_properties(${PROJECT_SOURCE_DIR}/examples/${THRUST_EXAMPLE_SOURCE}
      PROPERTIES
        LANGUAGE CXX
        COMPILE_FLAGS ""${THRUST_TREAT_FILE_AS_CXX}"")
  endif ()

  add_executable(
    ${THRUST_EXAMPLE}
    ${PROJECT_SOURCE_DIR}/examples/${THRUST_EXAMPLE_SOURCE}
  )

  target_include_directories(
    ${THRUST_EXAMPLE}
    PRIVATE ${PROJECT_SOURCE_DIR}/examples
  )

  target_link_libraries(${THRUST_EXAMPLE} Thrust)

  if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"" AND ""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
    set_target_properties(${THRUST_EXAMPLE}
      PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS OFF)
  endif ()

  if (""CUDA"" STREQUAL ""${THRUST_DEVICE_SYSTEM}"" AND THRUST_ENABLE_EXAMPLES_WITH_RDC)
    if (""Feta"" STREQUAL ""${CMAKE_CUDA_COMPILER_ID}"")
      set_target_properties(${THRUST_EXAMPLE}
        PROPERTIES COMPILE_FLAGS ""-gpu=rdc"")
    else ()
      set_target_properties(${THRUST_EXAMPLE}
        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    endif ()
  endif ()

  add_test(NAME ${THRUST_EXAMPLE}
    COMMAND ${CMAKE_COMMAND}
      -DTHRUST_EXAMPLE=${THRUST_EXAMPLE}
      -DTHRUST_BINARY=$<TARGET_FILE:${THRUST_EXAMPLE}>
      ${THRUST_EXAMPLE_RUN_ARGUMENTS})
endforeach ()
",3.10,3.1
8687,PerMalmberg,Smooth,False,False,False,False,False,6,C++,2020-05-17 08:59:26+00:00,2017-06-25 08:05:06+00:00,133,761,"#[[
Smooth - A C++ framework for embedded programming on top of Espressif's ESP-IDF
Copyright 2019 Per Malmberg (https://gitbub.com/PerMalmberg)

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]

# This CMakeLists.txt is meant for use when developing the smooth framework and running the tests.

cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 17)

# Select the test project to build
set(selected_test_project starter_example)

# For Linux builds, you may enable address sanitizer
set(SMOOTH_ENABLE_ASAN 0)
set(SMOOTH_ASAN_OPTIMIZATION_LEVEL 1)

list(APPEND available_tests
        starter_example
        access_point
        logging
        mqtt
        publish
        task_event_queue
        timer
        secure_socket_test
        server_socket_test
        secure_server_socket_test
        http_server_test
        destructing_event_queues
        destructing_subscribing_event_queues
        security
        sntp
        hw_interrupt_queue
        hw_sdcard_test
        hw_spiflash
        hw_jsonfile_test
        linux_asan_test
        linux_unit_tests
        hw_wrover_kit_blinky
        i2c_bme280_test
        spi_4_line_devices_test
        i2c_dht12_test
        i2c_rtc8563_test
        )

list(FIND available_tests ${selected_test_project} test_found)
if(${test_found} EQUAL -1)
    message(FATAL_ERROR ""'${selected_test_project}' not found or not a valid test project for the current platform."")
endif()

if(${ESP_PLATFORM})
    message(STATUS ""Compiling for ESP"")
    set(EXTRA_COMPONENT_DIRS
            ${CMAKE_CURRENT_SOURCE_DIR}/smooth_component
            ${CMAKE_CURRENT_SOURCE_DIR}/test/${selected_test_project})

    include($ENV{IDF_PATH}/tools/cmake/project.cmake)
    project(${selected_test_project})
else()
    message(STATUS ""Compiling for Host Platform"")
    if(${APPLE})
        include_directories(SYSTEM /usr/local/include)
        link_directories(/usr/local/lib)
    endif()
    add_subdirectory(mock-idf)
    add_subdirectory(lib)
    add_subdirectory(test/${selected_test_project})
endif()
",3.10,3.1
8927,lcm-proj,lcm,False,False,False,False,False,38,Java,2020-05-08 06:20:48+00:00,2014-09-12 05:01:03+00:00,487,1168,"cmake_minimum_required(VERSION 3.1)

project(lcm)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
if(CMAKE_VERSION VERSION_LESS 3.7)
  list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/3.7"")
endif()

find_package(GLib2 REQUIRED)

# Configuration and utility functions
include(lcm-cmake/config.cmake NO_POLICY_SCOPE)
include(lcm-cmake/functions.cmake)
include(lcm-cmake/version.cmake)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
if (WIN32)
  add_definitions(-DWIN32 -D_CRT_SECURE_NO_WARNINGS)
  include_directories(${lcm_SOURCE_DIR}/WinSpecific/include)
  include_directories(${lcm_SOURCE_DIR}/WinSpecific/getopt)
  include_directories(${lcm_SOURCE_DIR})
  add_subdirectory(WinSpecific)
  set(lcm-winport lcm-winport)
  get_filename_component(LCM_LCMGEN_PATH ${GLIB2_GLIB_RUNTIME} DIRECTORY)
  set(LCM_USE_GLIB_RUNTIME ""set(LCM_LCMGEN_PATH \""${LCM_LCMGEN_PATH}\"")"")
else()
  set(lcm-winport)
endif()

# Core modules
add_subdirectory(lcm)
add_subdirectory(lcmgen)
add_subdirectory(lcm-logger)

option(LCM_ENABLE_EXAMPLES ""Build test and example programs"" ON)
if(LCM_ENABLE_EXAMPLES)
  add_subdirectory(liblcm-test)
endif()

# Documentation (Main, C/C++, .NET)
add_subdirectory(docs)

# Java
lcm_option(
  LCM_ENABLE_JAVA
  ""Build Java bindings and utilities""
  JAVA_FOUND Java 1.6)
if(LCM_ENABLE_JAVA)
  add_subdirectory(lcm-java)
  add_custom_target(lcm-spy DEPENDS lcm-spy-alias)
  add_custom_target(lcm-logplayer-gui DEPENDS lcm-logplayer-gui-alias)
endif()

# Python
lcm_option(
  LCM_ENABLE_PYTHON
  ""Build Python bindings and utilities""
  PYTHON_FOUND Python)
if(LCM_ENABLE_PYTHON)
  add_subdirectory(lcm-python)
endif()

# Lua
lcm_option(
  LCM_ENABLE_LUA
  ""Build Lua bindings and utilities""
  LUA_FOUND Lua)
if(LCM_ENABLE_LUA)
  add_subdirectory(lcm-lua)
endif()

# .NET
# TODO

# Go
lcm_option(
  LCM_ENABLE_GO
  ""Build Go utilities, bindings is source distributed""

  # Disable until #294 is resolved
  FALSE Go)
  #  GO_FOUND Go)

option(LCM_ENABLE_TESTS ""Build unit tests"" ON)
if(LCM_ENABLE_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()

# Install rules
include(lcm-cmake/install.cmake)

option(LCM_INSTALL_M4MACROS ""Install autotools support M4 macros"" ON)
if(LCM_INSTALL_M4MACROS)
  add_subdirectory(m4macros)
endif()

option(LCM_INSTALL_PKGCONFIG ""Install pkg-config files"" ON)
if(LCM_INSTALL_PKGCONFIG)
  add_subdirectory(lcm-pkgconfig)
endif()

# Distribution rules
add_custom_target(dist
  COMMAND ${CMAKE_COMMAND}
    -DSOURCE_DIR=${lcm_SOURCE_DIR}
    -DOUTPUT_DIR=${lcm_BINARY_DIR}
    -DVERSION=${LCM_VERSION}
    -P ${lcm_SOURCE_DIR}/lcm-cmake/mkdist.cmake)

# CPack packaging rules
include(lcm-cmake/cpack.cmake)
",3.1,3.1
8958,savoirfairelinux,opendht,False,False,False,False,False,29,C++,2020-05-13 20:18:47+00:00,2014-12-17 19:05:22+00:00,629,2351,"cmake_minimum_required (VERSION 3.1)
include(CMakePackageConfigHelpers)
include(CMakeDependentOption)

project (opendht)
set (opendht_VERSION_MAJOR 2)
set (opendht_VERSION_MINOR 1.0)
set (opendht_VERSION ${opendht_VERSION_MAJOR}.${opendht_VERSION_MINOR})
set (PACKAGE_VERSION ${opendht_VERSION})
set (VERSION ""${opendht_VERSION}"")

# Options
option (OPENDHT_STATIC ""Build static library"" ON)
option (OPENDHT_SHARED ""Build shared library"" ON)
option (OPENDHT_LOG ""Build with logs"" ON)
option (OPENDHT_PYTHON ""Build Python bindings"" OFF)
option (OPENDHT_TOOLS ""Build DHT tools"" ON)
option (OPENDHT_SYSTEMD ""Install systemd module"" OFF)
option (OPENDHT_ARGON2 ""Use included argon2 sources"" OFF)
option (OPENDHT_LTO ""Build with LTO"" OFF)
option (OPENDHT_SANITIZE ""Build with address sanitizer and stack protector"" OFF)
option (OPENDHT_PROXY_SERVER ""Enable DHT proxy server, use Restinio and jsoncpp"" OFF)
option (OPENDHT_PUSH_NOTIFICATIONS ""Enable push notifications support"" OFF)
option (OPENDHT_PROXY_SERVER_IDENTITY ""Allow clients to use the node identity"" OFF)
option (OPENDHT_PROXY_CLIENT ""Enable DHT proxy client, use Restinio and jsoncpp"" OFF)
option (OPENDHT_PROXY_OPENSSL ""Build DHT proxy with OpenSSL"" ON)
option (OPENDHT_PROXY_HTTP_PARSER_FORK ""Build DHT proxy with custom http_parser to support old API"" OFF)
CMAKE_DEPENDENT_OPTION(OPENDHT_HTTP ""Build embedded http(s) client"" OFF ""NOT OPENDHT_PROXY_SERVER;NOT OPENDHT_PROXY_CLIENT"" ON)
option (OPENDHT_PEER_DISCOVERY ""Enable multicast peer discovery"" ON)
option (OPENDHT_INDEX ""Build DHT indexation feature"" OFF)
option (OPENDHT_TESTS ""Add unit tests executable"" OFF)
option (OPENDHT_C ""Build C bindings"" OFF)

find_package(Doxygen)
option (OPENDHT_DOCUMENTATION ""Create and install the HTML based API documentation (requires Doxygen)"" ${DOXYGEN_FOUND})

# Dependencies
list (APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
find_package (Threads)
find_package (PkgConfig)
find_package (GnuTLS 3.3 REQUIRED)
pkg_search_module (Nettle nettle)
find_package (Msgpack 1.2 REQUIRED)
if (OPENDHT_TOOLS)
    find_package (Readline 6 REQUIRED)
endif ()
if (NOT OPENDHT_ARGON2)
    find_package(PkgConfig)
    pkg_search_module(argon2 libargon2)
    if (argon2_FOUND)
        message(""-- Found Argon2: "" ${argon2_LIBRARY_DIRS} "" (found version \"""" ${argon2_VERSION} ""\"")"")
        link_directories (${argon2_LIBRARY_DIRS})
    else ()
        message(""Argon2 not found, using included version."")
        set(OPENDHT_ARGON2 ON)
    endif()
endif ()

pkg_search_module(Jsoncpp jsoncpp)
if (Jsoncpp_FOUND)
    add_definitions(-DOPENDHT_JSONCPP)
    list (APPEND opendht_SOURCES
      src/base64.h
      src/base64.cpp
    )
endif()

if (OPENDHT_HTTP)
    find_package(Restinio REQUIRED)
    if (Restinio_FOUND)
        find_library(FMT_LIBRARY fmt)
        add_library(fmt SHARED IMPORTED)
        find_library(HTTP_PARSER_LIBRARY http_parser)
        add_library(http_parser SHARED IMPORTED)
    endif()
    if (NOT Jsoncpp_FOUND)
        message(SEND_ERROR ""Jsoncpp is required for DHT proxy support"")
    endif()
    if (OPENDHT_PROXY_OPENSSL)
        # https://cmake.org/cmake/help/latest/module/FindOpenSSL.html
        pkg_search_module(OPENSSL REQUIRED openssl)
        if (OPENSSL_FOUND)
            message(STATUS ""Found OpenSSL ${OPENSSL_VERSION}"")
            include_directories(${OPENSSL_INCLUDE_DIRS})
        else ()
            message(SEND_ERROR ""OpenSSL is required for DHT proxy as specified"")
        endif()
    endif()
    if (OPENDHT_PROXY_HTTP_PARSER_FORK)
        add_definitions(-DOPENDHT_PROXY_HTTP_PARSER_FORK)
    endif()
else()
    set(OPENDHT_PROXY_OPENSSL OFF)
endif()
if (OPENDHT_HTTP OR OPENDHT_PEER_DISCOVERY)
    add_definitions(-DASIO_STANDALONE)
endif()

# Build flags
set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_STANDARD_REQUIRED on)
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-return-type -Wall -Wextra -Wnon-virtual-dtor -pedantic-errors -fvisibility=hidden"")
if (OPENDHT_SANITIZE)
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fstack-protector-strong"")
endif ()
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DMSGPACK_DISABLE_LEGACY_NIL -DMSGPACK_DISABLE_LEGACY_CONVERT"")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()
add_definitions(-DPACKAGE_VERSION=""${opendht_VERSION}"")
if (OPENDHT_LOG)
    add_definitions(-DOPENDHT_LOG=true)
else ()
    add_definitions(-DOPENDHT_LOG=false)
endif()
if (OPENDHT_LTO)
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -flto"")
    if (CMAKE_COMPILER_IS_GNUCC)
        set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fuse-linker-plugin"")
        set (CMAKE_AR        ""gcc-ar"")
        set (CMAKE_NM        ""gcc-nm"")
        set (CMAKE_RANLIB    ""gcc-ranlib"")
    endif ()
endif ()

if (MSGPACK_INCLUDE_DIRS)
    include_directories (SYSTEM ""${MSGPACK_INCLUDE_DIRS}"")
endif ()
if (GNUTLS_INCLUDE_DIRS)
    include_directories (SYSTEM ""${GNUTLS_INCLUDE_DIRS}"")
endif ()
if (Nettle_INCLUDE_DIRS)
    include_directories (SYSTEM ""${Nettle_INCLUDE_DIRS}"")
endif ()
if (Restinio_INCLUDE_DIR)
    include_directories (SYSTEM ""${Restinio_INCLUDE_DIR}"")
endif ()
if (Jsoncpp_INCLUDE_DIRS)
    include_directories (SYSTEM ""${Jsoncpp_INCLUDE_DIRS}"")
endif ()
if (OpenSSL_INCLUDE_DIR)
    include_directories (SYSTEM ""${OpenSSL_INCLUDE_DIR}"")
endif ()
link_directories (${Nettle_LIBRARY_DIRS})
link_directories (${Jsoncpp_LIBRARY_DIRS})
include_directories (
    ./
    include/
    include/opendht/
    ${CMAKE_CURRENT_BINARY_DIR}/include/
)

# Install dirs
include (GNUInstallDirs)
set (prefix ${CMAKE_INSTALL_PREFIX})
set (exec_prefix ""\${prefix}"")
set (libdir ""\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}"")
set (includedir ""\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}"")
set (bindir ""${CMAKE_INSTALL_FULL_BINDIR}"")
set (sysconfdir ""${CMAKE_INSTALL_FULL_SYSCONFDIR}"")
set (top_srcdir ""${CMAKE_CURRENT_SOURCE_DIR}"")

# Sources
list (APPEND opendht_SOURCES
    src/utils.cpp
    src/infohash.cpp
    src/crypto.cpp
    src/default_types.cpp
    src/node.cpp
    src/value.cpp
    src/dht.cpp
    src/op_cache.cpp
    src/storage.h
    src/listener.h
    src/search.h
    src/value_cache.h
    src/op_cache.h
    src/net.h
    src/parsed_message.h
    src/request.h
    src/callbacks.cpp
    src/routing_table.cpp
    src/node_cache.cpp
    src/network_engine.cpp
    src/securedht.cpp
    src/dhtrunner.cpp
    src/log.cpp
    src/network_utils.cpp
    src/thread_pool.cpp
)

list (APPEND opendht_HEADERS
    include/opendht/def.h
    include/opendht/utils.h
    include/opendht/sockaddr.h
    include/opendht/rng.h
    include/opendht/crypto.h
    include/opendht/infohash.h
    include/opendht/default_types.h
    include/opendht/node.h
    include/opendht/value.h
    include/opendht/dht.h
    include/opendht/dht_interface.h
    include/opendht/callbacks.h
    include/opendht/routing_table.h
    include/opendht/node_cache.h
    include/opendht/network_engine.h
    include/opendht/scheduler.h
    include/opendht/rate_limiter.h
    include/opendht/securedht.h
    include/opendht/log.h
    include/opendht/log_enable.h
    include/opendht/thread_pool.h
    include/opendht/network_utils.h
    include/opendht.h
)

if (OPENDHT_PEER_DISCOVERY)
    list (APPEND opendht_SOURCES src/peer_discovery.cpp)
    list (APPEND opendht_HEADERS include/opendht/peer_discovery.h)
    add_definitions(-DOPENDHT_PEER_DISCOVERY)
endif()

if (OPENDHT_PYTHON)
    message(""Indexation enabled since it is required for Python support"")
    set(OPENDHT_INDEX ON)
endif()
if (OPENDHT_INDEX)
    list (APPEND opendht_SOURCES src/indexation/pht.cpp)
    list (APPEND opendht_HEADERS include/opendht/indexation/pht.h)
    add_definitions(-DOPENDHT_INDEXATION)
endif()

if (OPENDHT_PROXY_SERVER)
  add_definitions(-DOPENDHT_PROXY_SERVER)
  if (OPENDHT_PROXY_SERVER_IDENTITY)
    add_definitions(-DOPENDHT_PROXY_SERVER_IDENTITY)
  endif()
  list (APPEND opendht_HEADERS
    include/opendht/dht_proxy_server.h
  )
  list (APPEND opendht_SOURCES
    src/dht_proxy_server.cpp
  )
endif ()

if (OPENDHT_PROXY_CLIENT)
  add_definitions(-DOPENDHT_PROXY_CLIENT)
  list (APPEND opendht_HEADERS
    include/opendht/dht_proxy_client.h
  )
  list (APPEND opendht_SOURCES
    src/dht_proxy_client.cpp
  )
endif ()

if (OPENDHT_HTTP)
  if (OPENDHT_PUSH_NOTIFICATIONS)
    message(""Using push notification"")
    add_definitions(-DOPENDHT_PUSH_NOTIFICATIONS)
  endif ()
  list (APPEND opendht_HEADERS
    include/opendht/proxy.h
    include/opendht/http.h
  )
  list (APPEND opendht_SOURCES
    src/http.cpp
  )
endif ()

if(OPENDHT_ARGON2)
    # make sure argon2 submodule is up to date and initialized
    message(""Initializing Argon2 submodule"")
    execute_process(COMMAND git submodule update --init)

    # add local argon2 files to build
    list (APPEND opendht_SOURCES
        argon2/src/argon2.c
        argon2/src/core.c
        argon2/src/blake2/blake2b.c
        argon2/src/thread.c
        argon2/src/ref.c
        argon2/src/encoding.c
    )
    include_directories(argon2/include/)
endif()

# Targets
if (OPENDHT_STATIC)
    add_library (opendht-static STATIC
        ${opendht_SOURCES}
        ${opendht_HEADERS}
    )
    set_target_properties (opendht-static PROPERTIES OUTPUT_NAME ""opendht"")
    if (OPENDHT_ARGON2)
        target_include_directories(opendht-static SYSTEM PRIVATE argon2)
    else ()
        target_include_directories(opendht-static SYSTEM PRIVATE ${argon2_INCLUDE_DIRS})
    endif ()
    target_link_libraries(opendht-static
        PRIVATE  ${argon2_LIBRARIES}
        PUBLIC ${CMAKE_THREAD_LIBS_INIT} ${GNUTLS_LIBRARIES} ${Nettle_LIBRARIES}
               ${Jsoncpp_LIBRARIES} ${FMT_LIBRARY} ${HTTP_PARSER_LIBRARY}
               ${OPENSSL_LIBRARIES})
    install (TARGETS opendht-static DESTINATION ${CMAKE_INSTALL_LIBDIR} EXPORT opendht)
endif ()

if (OPENDHT_SHARED)
    add_library (opendht SHARED
        ${opendht_SOURCES}
        ${opendht_HEADERS}
    )
    set_target_properties (opendht PROPERTIES IMPORT_SUFFIX ""_import.lib"")
    set_target_properties (opendht PROPERTIES SOVERSION ${opendht_VERSION_MAJOR} VERSION ${opendht_VERSION})
    target_compile_definitions(opendht PRIVATE OPENDHT_BUILD)
    if (OPENDHT_ARGON2)
        target_include_directories(opendht SYSTEM PRIVATE argon2)
    else ()
        target_link_libraries(opendht PRIVATE ${argon2_LIBRARIES})
        target_include_directories(opendht SYSTEM PRIVATE ${argon2_INCLUDE_DIRS})
    endif ()
    target_link_libraries(opendht
        PUBLIC ${CMAKE_THREAD_LIBS_INIT} ${OPENSSL_LIBRARIES}
        PRIVATE ${GNUTLS_LIBRARIES} ${Nettle_LIBRARIES}
                ${Jsoncpp_LIBRARIES}
                ${FMT_LIBRARY} ${HTTP_PARSER_LIBRARY})

    install (TARGETS opendht DESTINATION ${CMAKE_INSTALL_LIBDIR} EXPORT opendht)
endif ()

if (OPENDHT_C)
    add_library (opendht-c SHARED
        c/opendht.cpp
        c/opendht_c.h
    )
    target_compile_definitions(opendht-c PRIVATE OPENDHT_C_BUILD)
    if (OPENDHT_SHARED)
        target_link_libraries(opendht-c opendht)
    else ()
        target_link_libraries(opendht-c opendht-static)
    endif ()

    # PkgConfig module
    configure_file (
        opendht-c.pc.in
        opendht-c.pc
        @ONLY
    )
    install (TARGETS opendht-c DESTINATION ${CMAKE_INSTALL_LIBDIR} EXPORT opendht-c)
    install (FILES ${CMAKE_CURRENT_BINARY_DIR}/opendht-c.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif ()

if (OPENDHT_TOOLS)
    add_subdirectory(tools)
endif ()
add_subdirectory(doc)

if (OPENDHT_PYTHON)
    add_subdirectory(python)
endif ()

# CMake module
write_basic_package_version_file(""${CMAKE_CURRENT_BINARY_DIR}/opendhtConfigVersion.cmake""
  VERSION ${opendht_VERSION}
  COMPATIBILITY AnyNewerVersion
)
# PkgConfig module
configure_file (
    opendht.pc.in
    opendht.pc
    @ONLY
)

# Install targets
install (DIRECTORY include DESTINATION ${CMAKE_INSTALL_PREFIX})
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/opendht.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
install (EXPORT opendht DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/opendht FILE opendhtConfig.cmake)
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/opendhtConfigVersion.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/opendht)

# Unit tests
if (OPENDHT_TESTS)
    FIND_PACKAGE(Cppunit REQUIRED)
    # unit testing
    list (APPEND test_FILES
        tests/infohashtester.h
        tests/infohashtester.cpp
        tests/valuetester.h
        tests/valuetester.cpp
        tests/cryptotester.h
        tests/cryptotester.cpp
        tests/dhtrunnertester.h
        tests/dhtrunnertester.cpp
        tests/threadpooltester.h
        tests/threadpooltester.cpp
    )
    if (OPENDHT_PROXY_SERVER AND OPENDHT_PROXY_CLIENT)
        list (APPEND test_FILES
            tests/httptester.h
            tests/httptester.cpp
            tests/dhtproxytester.h
            tests/dhtproxytester.cpp
        )
    endif()
    if (OPENDHT_PEER_DISCOVERY)
        list (APPEND test_FILES
            tests/peerdiscoverytester.h
            tests/peerdiscoverytester.cpp
        )
    endif()
    add_executable(opendht_unit_tests
        tests/tests_runner.cpp
        ${test_FILES}
    )
    target_include_directories(opendht_unit_tests SYSTEM PRIVATE ${CPPUNIT_INCLUDE_DIRS})
    if (OPENDHT_SHARED)
        target_link_libraries(opendht_unit_tests opendht)
    else ()
        target_link_libraries(opendht_unit_tests opendht-static)
    endif ()
    target_link_libraries(opendht_unit_tests
       ${CMAKE_THREAD_LIBS_INIT}
       ${CPPUNIT_LIBRARIES}
       ${GNUTLS_LIBRARIES}
       ${Jsoncpp_LIBRARIES}
    )
    if (OPENDHT_PROXY_OPENSSL)
        target_link_libraries(opendht_unit_tests ${OPENSSL_LIBRARIES})
    endif()
    enable_testing()
    add_test(TEST opendht_unit_tests)
endif()
",3.1,3.1
8994,GATB,MindTheGap,False,False,False,False,False,8,C++,2020-04-22 16:46:02+00:00,2016-04-20 08:59:52+00:00,19,434,"################################################################################
 #   MindTheGap: Integrated detection and assembly of insertion variants
 #   A tool from the GATB (Genome Assembly Tool Box)
 #   Copyright (C) 2014  INRIA
 #   Authors: C.Lemaitre, G. Rizk
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU Affero General Public License as
 #  published by the Free Software Foundation, either version 3 of the
 #  License, or (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU Affero General Public License for more details.
 #
 #  You should have received a copy of the GNU Affero General Public License
 #  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ################################################################################

project(MindTheGap)

cmake_minimum_required(VERSION 3.1)

################################################################################
# The version number.
################################################################################
# The default version number is the latest official build
SET (gatb-tool_VERSION_MAJOR 2)
SET (gatb-tool_VERSION_MINOR 2)
SET (gatb-tool_VERSION_PATCH 1)

# But, it is possible to define another release number during a local build
IF (DEFINED MAJOR)
    SET (gatb-tool_VERSION_MAJOR ${MAJOR})
ENDIF()
IF (DEFINED MINOR)
    SET (gatb-tool_VERSION_MINOR ${MINOR})
ENDIF()
IF (DEFINED PATCH)
    SET (gatb-tool_VERSION_PATCH ${PATCH})
ENDIF()

set (gatb-tool-version ${gatb-tool_VERSION_MAJOR}.${gatb-tool_VERSION_MINOR}.${gatb-tool_VERSION_PATCH})

# However, continuous integration has priority over local compilation
IF (DEFINED JENKINS_TAG)
    SET (gatb-tool-version ${JENKINS_TAG})
ENDIF()

################################################################################
# Define cmake modules directory
################################################################################
SET (GATB_CORE_HOME  ${PROJECT_SOURCE_DIR}/thirdparty/gatb-core/gatb-core)
SET (CMAKE_MODULE_PATH ${GATB_CORE_HOME}/cmake)

################################################################################
# SUPPORTED KMER SIZES
################################################################################

# One can uncomment this line and set the wanted values
#set (KSIZE_LIST ""32   64   96  128  160  192  224  256"")

################################################################################
# THIRD PARTIES
################################################################################

# We don't want to install some GATB-CORE artifacts
#SET (GATB_CORE_EXCLUDE_TOOLS     1)
SET (GATB_CORE_EXCLUDE_TESTS     1)
SET (GATB_CORE_EXCLUDE_EXAMPLES  1)

# GATB CORE
include (GatbCore)

################################################################################
# TOOL
################################################################################


# We also set a flag for TR1 management
if (use_new_cxx)
    set (CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -DUSE_NEW_CXX "")
endif()
 
message(""-- cxx: ${CMAKE_CXX_FLAGS}"")



# we get compilation definitions from the gatb-core part
add_definitions (${gatb-core-flags})

# SET( CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -Wall -Wextra"" )
SET( CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0"")

# we give the headers directories from : 
#       - from project source 
#       - from GATB-CORE source
#       - from dsk source 
set (PROGRAM_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src)

include_directories (${PROGRAM_SOURCE_DIR} ${gatb-core-includes})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# we define the files to be compiled
file (GLOB  ProjectFiles  src/*)


# we define the artifact to be built: the project binary
add_executable        (${PROJECT_NAME}  src/main.cpp ${ProjectFiles})
add_executable(nwalign src/nwAlign/nwalign.cpp)

# we define which libraries to be linked with project binary
target_link_libraries (${PROJECT_NAME}  ${gatb-core-libraries})
target_link_libraries (nwalign  ${gatb-core-libraries})



################################################################################
#  PACKAGING 
################################################################################

# We set the version number
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY  ""gatb-tool ${PROJECT_NAME}"")
SET (CPACK_PACKAGE_VENDOR               ""Genscale team (INRIA)"")
SET (CPACK_PACKAGE_VERSION_MAJOR        ""${gatb-tool_VERSION_MAJOR}"")
SET (CPACK_PACKAGE_VERSION_MINOR        ""${gatb-tool_VERSION_MINOR}"")
SET (CPACK_PACKAGE_VERSION_PATCH        ""${gatb-tool_VERSION_PATCH}"")
SET (CPACK_PACKAGE_VERSION              ""${gatb-tool-version}"")  

# We set the kind of archive
SET (CPACK_GENERATOR                    ""TGZ"")
SET (CPACK_SOURCE_GENERATOR             ""TGZ"")

# We ignore unwated files for the source archive
SET (CPACK_SOURCE_IGNORE_FILES          
    ""^${PROJECT_SOURCE_DIR}/\\.git/""     ;
    ""^${PROJECT_SOURCE_DIR}/\\.gitmodules""  ;
    ""^${PROJECT_SOURCE_DIR}/\\.gitignore"";
    ""^${PROJECT_SOURCE_DIR}/build/""  ;
    ""^${GATB_CORE_HOME}/\\.cproject"" ;
    ""^${GATB_CORE_HOME}/\\.git/""     ;
    ""^${GATB_CORE_HOME}/\\.project""  ;
    ""^${GATB_CORE_HOME}/\\.gitignore"";
    ""^${GATB_CORE_HOME}/doc/design""  ;
    ""^${GATB_CORE_HOME}/DELIVERY.md""
)

# We copy the project binary to the 'bin' directory
INSTALL (TARGETS   ${PROJECT_NAME}                           DESTINATION bin)
INSTALL (DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test          DESTINATION .)
INSTALL (DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data          DESTINATION .)
#INSTALL (DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/doc           DESTINATION .)
INSTALL (FILES     ${CMAKE_CURRENT_SOURCE_DIR}/README.md     DESTINATION .)
INSTALL (FILES     ${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.md     DESTINATION .)
INSTALL (FILES     ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE       DESTINATION .)

# We include the ""bin"" tag into binary archive file name
set (CPACK_PACKAGE_FILE_NAME  ${PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-bin-${CMAKE_SYSTEM_NAME})

include (CPack)
",3.1,3.1
9237,jklappert,Himalaya,False,False,False,False,False,3,C++,2019-03-28 12:19:08+00:00,2017-07-03 14:30:53+00:00,3,604,"cmake_minimum_required(VERSION 3.1)
project(Himalaya VERSION 2.0.0 LANGUAGES CXX Fortran)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# require an Eigen installation
find_package(Eigen3 3.0 REQUIRED)
find_package(Mathematica 8.0)

# if needed, set your Fortran and C++ compiler
#set (CMAKE_Fortran_COMPILER gfortran)
#set (CMAKE_CXX_COMPILER clang++)
#set (CMAKE_CXX_COMPILER icpc)

# set the build type to release. If one needs debugging symbols, compile
# with ""CMAKE_BUILD_TYPE Debug""
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# set the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# enable all warnings in Debug mode
if(CMAKE_BUILD_TYPE STREQUAL Debug)
  if(CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_ID MATCHES ""Clang""))
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic"")
  endif()
endif()

# set paths
set(SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/source)
set(INCLUDE_PATH ${SOURCE_PATH}/include)

#include c++ header files
include_directories(${INCLUDE_PATH})
include_directories(${INCLUDE_PATH}/hierarchies)
include_directories(${INCLUDE_PATH}/mh2_eft)
include_directories(${INCLUDE_PATH}/mh2_fo)
include_directories(${INCLUDE_PATH}/mh2l)
include_directories(${INCLUDE_PATH}/misc)
include_directories(${EIGEN3_INCLUDE_DIR})

set(EXEC_INSTALL_PREFIX ""${CMAKE_INSTALL_PREFIX}"")
set(INCLUDE_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/include/himalaya"")
set(LIB_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/lib"")

# setting the correct version to all headers
configure_file (
  ""${INCLUDE_PATH}/version.hpp.in""
  ""${INCLUDE_PATH}/version.hpp"")

# generate himalaya.pc file for pkg-config
configure_file (
  ""${PROJECT_SOURCE_DIR}/cmake/himalaya.pc.in""
  ""${CMAKE_BINARY_DIR}/himalaya.pc""
  @ONLY)

# Himalaya library files
set(HIM_LIBSOURCES
  # interface
  ${SOURCE_PATH}/HierarchyCalculator.cpp
  ${SOURCE_PATH}/HierarchyObject.cpp
  ${SOURCE_PATH}/Himalaya_interface.cpp
  # hierarchies
  ${SOURCE_PATH}/hierarchies/H32q2g.cpp
  ${SOURCE_PATH}/hierarchies/H3.cpp
  ${SOURCE_PATH}/hierarchies/H3q22g.cpp
  ${SOURCE_PATH}/hierarchies/H4.cpp
  ${SOURCE_PATH}/hierarchies/H5.cpp
  ${SOURCE_PATH}/hierarchies/H5g1.cpp
  ${SOURCE_PATH}/hierarchies/H6b2qg2.cpp
  ${SOURCE_PATH}/hierarchies/H6b.cpp
  ${SOURCE_PATH}/hierarchies/H6bq22g.cpp
  ${SOURCE_PATH}/hierarchies/H6bq2g2.cpp
  ${SOURCE_PATH}/hierarchies/H6.cpp
  ${SOURCE_PATH}/hierarchies/H6g2.cpp
  ${SOURCE_PATH}/hierarchies/H9.cpp
  ${SOURCE_PATH}/hierarchies/H9q2.cpp
  # EFT calculation
  ${SOURCE_PATH}/mh2_eft/Mh2EFTCalculator.cpp
  ${SOURCE_PATH}/mh2_eft/ThresholdCalculator.cpp
  ${SOURCE_PATH}/mh2_eft/threshold_loop_functions.cpp
  # fixed-order calculation
  ${SOURCE_PATH}/mh2_fo/linalg2.cpp
  ${SOURCE_PATH}/mh2_fo/MSSM_mass_eigenstates.cpp
  ${SOURCE_PATH}/mh2_fo/pv.cpp
  # helpers
  ${SOURCE_PATH}/misc/dilog.cpp)

# DSZ library files
set(DSZ_LIBSOURCES
  ${SOURCE_PATH}/mh2l/DSZHiggs.cpp
  ${SOURCE_PATH}/mh2l/DSZHiggs.f
  ${SOURCE_PATH}/mh2l/functs.f)

# build the himalaya and DSZ library
add_library(DSZ_static STATIC ${DSZ_LIBSOURCES})
set_target_properties(DSZ_static PROPERTIES OUTPUT_NAME DSZ)
add_library(DSZ_shared SHARED ${DSZ_LIBSOURCES})
set_target_properties(DSZ_shared PROPERTIES OUTPUT_NAME DSZ)
add_library(Himalaya_static STATIC ${HIM_LIBSOURCES})
set_target_properties(Himalaya_static PROPERTIES OUTPUT_NAME Himalaya)
add_library(Himalaya_shared SHARED ${HIM_LIBSOURCES})
set_target_properties(Himalaya_shared PROPERTIES OUTPUT_NAME Himalaya)
target_link_libraries(Himalaya_shared PUBLIC DSZ_shared)

# set the executable
add_executable(example ${SOURCE_PATH}/example.cpp)
target_link_libraries(example Himalaya_static DSZ_static)

# create LibrayLink executable
if(Mathematica_FOUND)
  set(LL_SRC ${SOURCE_PATH}/LibraryLink/Himalaya_LibraryLink.cpp)
  set(LL_LIB Himalaya_LibraryLink)
  include_directories(${Mathematica_INCLUDE_DIR})
  include_directories(${Mathematica_MathLink_INCLUDE_DIR})
  Mathematica_ADD_LIBRARY(${LL_LIB} ${LL_SRC})
  target_link_libraries(${LL_LIB} PRIVATE Himalaya_shared ${Mathematica_MathLink_LIBRARIES})
  set_target_properties(${LL_LIB} PROPERTIES LINK_FLAGS ""${Mathematica_MathLink_LINKER_FLAGS}"")
  Mathematica_ABSOLUTIZE_LIBRARY_DEPENDENCIES(${LL_LIB})
endif()

# install libraries
install(
  TARGETS Himalaya_static Himalaya_shared DSZ_static DSZ_shared
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
)

# install public headers
install(FILES
  ""${INCLUDE_PATH}/HierarchyCalculator.hpp""
  ""${INCLUDE_PATH}/HierarchyObject.hpp""
  ""${INCLUDE_PATH}/Himalaya_interface.hpp""
  ""${INCLUDE_PATH}/version.hpp""
  DESTINATION ""${INCLUDE_INSTALL_DIR}"")

# install himalaya.pc file
install(FILES
  ""${CMAKE_BINARY_DIR}/himalaya.pc""
  DESTINATION ""${LIB_INSTALL_DIR}/pkgconfig"")

# adding documentation
add_subdirectory(doc)

# test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/test)
  enable_testing()
  add_subdirectory(test)
endif()
",3.1,3.1
9242,ruimaciel,femp,False,False,False,False,False,1,C++,2020-01-01 19:55:07+00:00,2009-12-17 20:37:09+00:00,6,1411,"cmake_minimum_required(VERSION 3.10) # due to googletest

project(femp
    LANGUAGES CXX
    VERSION 0.1.0
    )

add_subdirectory(libla)
add_subdirectory(libfemp)
add_subdirectory(gui)
add_subdirectory(cmdline)
",3.10,3.1
9271,crazyzlj,AutoFuzSlpPos,False,False,False,False,False,10,C++,2019-07-22 14:08:38+00:00,2015-05-23 08:46:59+00:00,2,428,"# ----------------------------------------------------------------------------
#  Root CMake file for AutoFuzSlpPos.
#
#     Please from the off-tree build directory, invoke:
#       $ cmake <path/to/AutoFuzSlpPos>
#
#       Optional cmake options:
#         -DINSTALL_PREFIX=<path/to/install>
#         -DLLVM_ROOT_DIR Specific the root directory of brew installed LLVM, e.g., /usr/local/opt/llvm
#
#  Routine testing platforms and compilers include:
#     1. Windows 10 with Visual Studio 2010/2015, mongo-c-driver-1.5.5, GDAL-1.11.4/2.4.1
#     2. Windows 10 with msys2/mingw64 (GCC-8.2.0), mongo-c-driver-1.6.1, GDAL-2.3.2
#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0
#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)
#     5. macOS 10.14.5 with Clang-10.0 with Xcode, mongo-c-driver-1.14.0, GDAL-2.4.2 (brew installed)
#     6. Windows 10 with Visual Studio 2013+Intel C++ Compiler 17.0, mongo-c-driver-1.5.5, GDAL-1.11.4
#
#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)
#  Latest updated: Jul. 20, 2019
#  Copyright (C) 2015-2019 Lreis, IGSNRR, CAS
# ----------------------------------------------------------------------------
### Disable in-source builds to prevent source tree corruption.
IF("" ${CMAKE_SOURCE_DIR}"" STREQUAL "" ${CMAKE_BINARY_DIR}"")
  MESSAGE(FATAL_ERROR ""
FATAL: In-source builds are not allowed.
       You should create a separate directory for build files.""
)
ENDIF()
CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)

# Set initial project name with coding languages
PROJECT(AutoFuzSlpPos CXX C)

### Set default or specified installation directory.
IF (INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX} CACHE PATH ""Set specified install path"" FORCE)
ELSE()
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/bin CACHE PATH ""Set default install path"" FORCE)
ENDIF ()
SET(INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.
IF(CMAKE_GENERATOR MATCHES ""Makefiles|Ninja"" AND ""${CMAKE_BUILD_TYPE}"" STREQUAL """")
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

### Allow project folders in MSVC and Xcode.
IF(MSVC OR XCODE)
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
ENDIF()

### Break in case of popular CMake configuration mistakes.
IF(NOT CMAKE_SIZEOF_VOID_P GREATER 0)
  MESSAGE(FATAL_ERROR ""CMake fails to determine the bitness of the target platform.
  Please check your CMake and compiler installation.""
)
ENDIF()

SET(TAUDEM_ALL ${CMAKE_CURRENT_SOURCE_DIR}/autofuzslppos/taudem_ext)
ADD_SUBDIRECTORY(${TAUDEM_ALL})
",3.1,3.1
9333,veyon,veyon,False,False,False,False,False,21,C++,2020-04-25 08:15:34+00:00,2017-04-11 05:22:24+00:00,496,5295,"cmake_minimum_required(VERSION 3.1.0)

project(veyon)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH})
if(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
	set(VEYON_DEBUG TRUE)
elseif(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE relwithdebinfo)
endif()

if(VEYON_DEBUG)
	add_definitions(-DVEYON_DEBUG)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

if(COMMAND CMAKE_POLICY)
	cmake_policy(SET CMP0009 NEW)
	cmake_policy(SET CMP0020 NEW)
	cmake_policy(SET CMP0063 NEW)
	if(${CMAKE_VERSION} VERSION_GREATER ""3.8.0"")
		cmake_policy(SET CMP0069 NEW)
	endif()
	if(${CMAKE_VERSION} VERSION_GREATER ""3.12.0"")
		cmake_policy(SET CMP0075 NEW)
	endif()
endif()

include(AddFileDependencies)
include(CheckCSourceCompiles)
include(CheckIncludeFiles)
include(CheckFunctionExists)
include(CheckSymbolExists)
include(CheckTypeSize)
include(GNUInstallDirs)
include(CotireVeyon)
include(ConfigureFiles)
include(SetDefaultTargetProperties)

find_package(Git)

if(GIT_FOUND)
	execute_process(COMMAND ""${GIT_EXECUTABLE}"" describe --tags
					WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
					OUTPUT_STRIP_TRAILING_WHITESPACE
					OUTPUT_VARIABLE VERSION_STRING)
	string(REGEX REPLACE ""^v([0-9]+)\\..*"" ""\\1"" VERSION_MAJOR ""${VERSION_STRING}"")
	string(REGEX REPLACE ""^v[0-9]+\\.([0-9]+).*"" ""\\1"" VERSION_MINOR ""${VERSION_STRING}"")
	string(REGEX REPLACE ""^v[0-9]+\\.[0-9]+\\.([0-9]+).*"" ""\\1"" VERSION_PATCH ""${VERSION_STRING}"")

	# determine build number to use in NSIS installer and resource files
	execute_process(COMMAND ""${GIT_EXECUTABLE}"" describe --tags
					COMMAND cut -d ""-"" -f2
					WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
					OUTPUT_STRIP_TRAILING_WHITESPACE
					OUTPUT_VARIABLE VERSION_BUILD)
	if(NOT VERSION_BUILD GREATER 0)
		set(VERSION_BUILD 0)
	endif()

	# Get list of all committers from git history, ordered by number of commits.
	# The CONTRIBUTORS file is used by AboutDialog. This information can be provided
	# with -DCONTRIBUTORS=/path/to/CONTRIBUTORS instead. For instance, to generate
	# this file for version 3.0.2, the command is:
	#   git shortlog -sne v3.0.2 | cut -c8-
	set(CONTRIBUTORS ""${CMAKE_BINARY_DIR}/CONTRIBUTORS"")
	if(NOT EXISTS ""${CONTRIBUTORS}"")
		execute_process(COMMAND ""${GIT_EXECUTABLE}"" shortlog -s d160d147165271516589c304cb1b8f5e48f8527d..HEAD
						COMMAND cut -c8-
						COMMAND sort -f
						OUTPUT_FILE ""${CONTRIBUTORS}""
						WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
						TIMEOUT 10)
	endif()

endif()

# can't retrieve version information as not building from Git repository?
if(NOT VERSION_STRING)
	set(VERSION_MAJOR 4)
	set(VERSION_MINOR 99)
	set(VERSION_PATCH 0)
	set(VERSION_BUILD 0)
	set(VERSION_STRING ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")
else()
	# remove leading character from tag name
	string(REPLACE ""v"" """" VERSION_STRING ""${VERSION_STRING}"")
endif()

# set up compiler version variable
string(REGEX REPLACE ""\\.[0-9]$"" """" COMPILER_VERSION_MAJOR_MINOR ${CMAKE_CXX_COMPILER_VERSION})


# set up basic platform variables
if(WIN32)
	set(VEYON_BUILD_WIN32 1)
endif()
if(APPLE)
	set(VEYON_BUILD_APPLE 1)
endif()
if(UNIX AND NOT ANDROID)
	set(VEYON_BUILD_LINUX 1)
endif()
if(ANDROID)
	set(VEYON_BUILD_ANDROID 1)
endif()

if(WIN64)
	set(VEYON_BUILD_WIN64 TRUE)
endif()

# set up library and plugin path variables
if(VEYON_BUILD_ANDROID)
	set(CMAKE_INSTALL_PREFIX ""/"")
	set(VEYON_LIB_DIR ""lib"")
	set(VEYON_INSTALL_PLUGIN_DIR ""${VEYON_LIB_DIR}/veyon"")
	set(VEYON_INSTALL_DATA_DIR ""${CMAKE_INSTALL_DATADIR}/veyon"")
	set(VEYON_PLUGIN_DIR """")
	set(VEYON_TRANSLATIONS_DIR ""/translations"")
else()
	if(CMAKE_INSTALL_LIBDIR)
		set(VEYON_LIB_DIR ""${CMAKE_INSTALL_LIBDIR}/veyon"" CACHE INTERNAL ""Veyon library directory"")
	else()
		set(VEYON_LIB_DIR lib/veyon CACHE INTERNAL ""Veyon library directory"")
	endif()

	set(VEYON_INSTALL_PLUGIN_DIR ""${VEYON_LIB_DIR}"")
	set(VEYON_INSTALL_DATA_DIR ""${CMAKE_INSTALL_DATADIR}/veyon"")

	if(WIN32)
		set(VEYON_PLUGIN_DIR ""plugins"")
		set(VEYON_TRANSLATIONS_DIR ""translations"")
	else()
		set(VEYON_PLUGIN_DIR ""../${VEYON_LIB_DIR}"")
		set(VEYON_TRANSLATIONS_DIR ""../share/veyon/translations"")
	endif()
endif()


set(VEYON_CORE_INCLUDE_DIR core/src)

# find required Qt5 modules
find_package(Qt5Core REQUIRED)
find_package(Qt5Concurrent REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5LinguistTools REQUIRED)
find_package(Qt5Quick REQUIRED)
find_package(Qt5QuickControls2 REQUIRED)
if(VEYON_BUILD_ANDROID)
find_package(Qt5AndroidExtras REQUIRED)
endif()
if(VEYON_DEBUG)
find_package(Qt5Test REQUIRED)
set(VEYON_DEBUG_LIBRARIES Qt5::Test)
endif()

# find required libraries
find_package(QCA REQUIRED)

# FindOpenSSL.cmake in recent versions of CMake will only find the DLLs instead
# of the import libraries if CYGWIN is not set
set(CYGWIN TRUE)
find_package(OpenSSL REQUIRED)
unset(CYGWIN)

# find Linux-specific packages
if(VEYON_BUILD_LINUX)
	include(XdgInstall)
endif()

find_package(LibVNCClient 0.9.13)

if(LibVNCClient_FOUND)
	include(CheckCSourceCompiles)
	set(CMAKE_REQUIRED_LIBRARIES LibVNC::LibVNCClient)
	check_c_source_compiles(""
#include <rfb/rfbclient.h>

int main()
{
	rfbClient* client = rfbGetClient( 8, 3, 4 );
	client->connectTimeout = 1;
	client->readTimeout = 1;
	return 0;
}
""
	LIBVNCCLIENT_SUPPORTS_TIMEOUTS)
	if(NOT LIBVNCCLIENT_SUPPORTS_TIMEOUTS)
		message(FATAL_ERROR ""Outdated development version of LibVNCClient found"")
	endif()
	unset(CMAKE_REQUIRED_LIBRARIES)
else()
	message(WARNING ""Performing internal build of LibVNCClient which requires additional development packages"")
	find_package(ZLIB REQUIRED)
	find_package(PNG REQUIRED)
	find_package(JPEG REQUIRED)
	find_package(LZO REQUIRED)
	set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
	find_package(Threads REQUIRED)
endif()

find_package(LibVNCServer 0.9.8)
if(NOT LibVNCServer_FOUND)
	### BEGIN: libvncserver configuration
	include(LibVNCServerIntegration)

	set(_RFB_RFBCONFIG_H TRUE)
	set(LIBVNCSERVER_HAVE_LIBJPEG TRUE)
	set(LIBVNCSERVER_HAVE_LZO TRUE)
	set(LIBVNCSERVER_HAVE_LIBPNG TRUE)
	set(LIBVNCSERVER_HAVE_LIBPTHREAD TRUE)
	set(LIBVNCSERVER_HAVE_LIBZ TRUE)
	set(LIBVNCSERVER_HAVE_LIBSSL TRUE)
	set(LIBVNCSERVER_ALLOW24BPP TRUE)
	set(LIBVNCSERVER_IPv6 TRUE)
	### END: libvncserver configuration

	# write libvncserver configuration header
	file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/${VEYON_CORE_INCLUDE_DIR}/rfb)
	configure_file(${CMAKE_SOURCE_DIR}/3rdparty/libvncserver/rfb/rfbconfig.h.cmakein ${CMAKE_BINARY_DIR}/${VEYON_CORE_INCLUDE_DIR}/rfb/rfbconfig.h @ONLY)

endif()

if(SANITIZE)
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fsanitize=undefined"")
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fsanitize=undefined"")
endif()

set(VEYON_COMPILE_OPTIONS ""-Wall;-Werror"")
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fstack-protector-strong ${CFLAGS}"")
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fstack-protector-strong -fno-exceptions ${CXXFLAGS}"")

if(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
message(WARNING ""Not using -fvisibility=hidden and/or LTO with GCC < 6.0"")
set(DISABLE_LTO TRUE)
else()
set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
endif()

if(VEYON_BUILD_WIN32 OR VEYON_BUILD_WIN64)
set(DISABLE_LTO TRUE)
endif()

add_definitions(
	-DQT_DEPRECATED_WARNINGS
	-DQT_DISABLE_DEPRECATED_BEFORE=0x050e00
	-D_FORTIFY_SOURCE=2
	-DQT_NO_CAST_FROM_ASCII
	-DQT_NO_CAST_TO_ASCII
	-DQT_NO_CAST_FROM_BYTEARRAY
	-DQT_NO_KEYWORDS
	-DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT
	-DQT_USE_QSTRINGBUILDER
	-DQT_STRICT_ITERATORS
)

file(GLOB_RECURSE IN_FILES RELATIVE ${CMAKE_SOURCE_DIR} ""*config.h.in"" ""*.rc.in"" ""*.desktop.in"" ""*.policy.in"" ""*.service.in"" ""*.manifest.in"" ""*.nsi.in"")
CONFIGURE_FILES(${IN_FILES})

set(CMAKE_AUTOMOC TRUE)
set(CMAKE_AUTOUIC TRUE)
set(CMAKE_AUTORCC TRUE)

set(3rdparty_DIR ${CMAKE_SOURCE_DIR}/3rdparty)
set(ultravnc_DIR ${3rdparty_DIR}/ultravnc)
set(libvncserver_DIR ${3rdparty_DIR}/libvncserver)
set(x11vnc_DIR ${3rdparty_DIR}/x11vnc)
set(libfakekey_DIR ${3rdparty_DIR}/libfakekey)

set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${VEYON_LIB_DIR}"")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

if(VEYON_BUILD_ANDROID)
	include(AndroidDeployQt)
	set(_CMAKE_ANDROID_DIR ""${CMAKE_SOURCE_DIR}/android"")
	set(ANDROID_INSTALL_DIR ""${CMAKE_BINARY_DIR}/install"")
	set(ANDROID_EXTRA_PLUGINS ${ANDROID_INSTALL_DIR}/${VEYON_LIB_DIR}/veyon/ ${QT_DIR}/lib/qca-qt5/crypto ${ANDROID_INSTALL_DIR}/jar)
	set(ANDROID_EXTRA_LIBS)
	list(APPEND ANDROID_EXTRA_LIBS ""${ANDROID_SYSROOT_GENERIC}/libc++_shared.so"")
	list(APPEND ANDROID_EXTRA_LIBS ""${QT_DIR}/lib/libldap.so""
									""${QT_DIR}/lib/liblber.so""
									""${QT_DIR}/lib/libsasl2.so"")

	add_custom_target(prepare-apk
		COMMAND rm -rf ${ANDROID_INSTALL_DIR}
		COMMAND cd ${CMAKE_BINARY_DIR}/core && make DESTDIR=${ANDROID_INSTALL_DIR} install
		COMMAND cd ${CMAKE_BINARY_DIR}/plugins && make DESTDIR=${ANDROID_INSTALL_DIR} install
	)
endif()

# make sub-directories
add_subdirectory(core)
add_subdirectory(server)
add_subdirectory(service)
add_subdirectory(master)
add_subdirectory(configurator)
add_subdirectory(cli)
add_subdirectory(worker)
add_subdirectory(plugins)
add_subdirectory(translations)

#
# add Windows installer related targets
#
if(WIN32)
	include(WindowsInstaller)
endif()

#
# package generation
#
include(cmake/CPackDefinitions.cmake)



#
# display configuration information
#

message(""\n""
""Veyon build summary\n""
""--------------------\n""
""* Version                     : ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD} (${VERSION_STRING})\n""
""* Install prefix              : ${CMAKE_INSTALL_PREFIX}\n""
""* Library directory           : ${CMAKE_INSTALL_PREFIX}/${VEYON_LIB_DIR}\n""
""* Plugin directory            : ${CMAKE_INSTALL_PREFIX}/${VEYON_INSTALL_PLUGIN_DIR}\n""
""* Build type                  : ${CMAKE_BUILD_TYPE}\n""
""* Build platform              : ${CMAKE_SYSTEM_PROCESSOR}\n""
""* Compile flags               : ${CMAKE_C_FLAGS} (CXX: ${CMAKE_CXX_FLAGS})\n""
)
",3.1.0,3.1
9336,gabyx,ApproxMVBB,False,False,False,False,False,5,C++,2020-01-21 23:49:44+00:00,2014-12-10 00:00:00+00:00,246,535,"#The CMake Minimum version that is required.
cmake_minimum_required(VERSION 3.10)

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/;${CMAKE_MODULE_PATH}"")
message(STATUS ""Module path is now set to: "" ${CMAKE_MODULE_PATH} )

#The name of the project ===============================================
set(ApproxMVBBProjectName ""ApproxMVBB"")
if(${CMAKE_GENERATOR} MATCHES ""Unix Makefiles"")
        set(ApproxMVBBProjectName  ""${ApproxMVBBProjectName}-${PROJECTNAMEPREFIX}"")
endif()
message(STATUS ""Project name is: "" ${ApproxMVBBProjectName})
project(${ApproxMVBBProjectName} LANGUAGES CXX C)

set(ApproxMVBB_BINARY_DIR ${PROJECT_BINARY_DIR})
set(ApproxMVBB_ROOT_DIR   ${PROJECT_SOURCE_DIR})

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_VERBOSE_MAKEFILE ON)

# PRECISION ISSUES =====================================================
# From http://christian-seiler.de/projekte/fpmath/
#x86 platforms support two types of floating point instruction sets nowadays:
#The classical x87 floating point unit and the new MMX/SSE instructions that can even perform parallel calculations.
#The characteristics of the x87 FPU are:

    #Different instructions for loading and storing different types of floating point numbers from and to memory.
    #A single instruction set for performing calculations.
    #An internal precision with which all calculations are done.
    #Instructions to change the internal precision
    #Support for single, double and double-extended precision.
#The characteristics of the MMX/SSE instructions are:

    #Different instructions for loading and storing different types of floating point numbers from and to memory.
    #Different instructions for performing caluclations depending on the data types in the registers.
    #Calculation precision is dependent on operhand types.
    #Supports only single and double precision
    #Support for parallel computation.
# What we wont in this library is, only the GeometricPredicates need ""double precision"" (not extended precision)
# That means either by using only sse instruction set this is enforced or by manually setting the FPU unit to double precision
# so far we manually set it to double precision in the Predicates,
# on Windows (64bit) we cannot change FPU precision, so we use the sse flag to ensure only ""double precision""
#=======================================================================

# Add the ccache to the build system
if(${CMAKE_GENERATOR} MATCHES ""Unix Makefiles"")
find_program(CCACHE_FOUND ccache)
  if(CCACHE_FOUND)
      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
      set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
  endif(CCACHE_FOUND)
endif()

#Add some multithreaded build support ==================================
mark_as_advanced(MULTITHREADED_BUILD)
set(MULTITHREADED_BUILD ON CACHE BOOL ""Parallel build with as many threads as possible!"")
if(MULTITHREADED_BUILD)
    if(${CMAKE_GENERATOR} MATCHES ""Unix Makefiles"")
            file(COPY ${ApproxMVBB_ROOT_DIR}/cmake/parallelmake.sh DESTINATION ${PROJECT_BINARY_DIR}
                FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
                NO_SOURCE_PERMISSIONS
            )
            set(CMAKE_MAKE_PROGRAM ""${PROJECT_BINARY_DIR}/parallelmake.sh"")
            message(STATUS ""Set make program to ${PROJECT_BINARY_DIR}/parallelmake.sh"")
    elseif(MSVC)
      add_definitions(""/MP"")
      message(STATUS ""Added parallel build arguments to CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}"")
    endif()
endif()
# ======================================================================

#Optional Stuff ========================================================
mark_as_advanced( CMAKE_DEBUG_POSTFIX )
set(CMAKE_DEBUG_POSTFIX ""-dbg"" CACHE STRING ""Debug postfix for library/executable"")

mark_as_advanced(ApproxMVBB_BUILD_LIBRARY )
set(ApproxMVBB_BUILD_LIBRARY ON CACHE BOOL ""Build a shared library"")

mark_as_advanced(ApproxMVBB_BUILD_TESTS)
set(ApproxMVBB_BUILD_TESTS ON CACHE BOOL ""Build the tests"")

mark_as_advanced(ApproxMVBB_BUILD_BENCHMARKS)
set(ApproxMVBB_BUILD_BENCHMARKS OFF CACHE BOOL ""Build the benchmarks (only meaningful in Release!)"")

mark_as_advanced(ApproxMVBB_BUILD_EXAMPLE )
set(ApproxMVBB_BUILD_EXAMPLE ON CACHE BOOL ""Build the example, the library is automatically built if this is true"")

mark_as_advanced(ApproxMVBB_FORCE_MSGLOG_LEVEL)
set(ApproxMVBB_FORCE_MSGLOG_LEVEL ""0"" CACHE STRING ""Force the message log level (0-3), 0 = use deubg/release settings in LogDefines.hpp!"")

mark_as_advanced(ApproxMVBB_USE_OPENMP)
set(ApproxMVBB_USE_OPENMP ON CACHE BOOL ""Try to use OpenMp for parallel speedup"")

mark_as_advanced(ApproxMVBB_BUILD_LIBRARY_STATIC  )
set(ApproxMVBB_BUILD_LIBRARY_STATIC OFF CACHE BOOL ""Build a static library"")

mark_as_advanced(ApproxMVBB_KDTREE_SUPPORT )
set(ApproxMVBB_KDTREE_SUPPORT ON CACHE BOOL ""Build library with KDTree support."")
mark_as_advanced(ApproxMVBB_XML_SUPPORT )
set(ApproxMVBB_XML_SUPPORT OFF CACHE BOOL ""Build library with XML support."")

#=======================================================================

# Dependencies =========================================================
find_package(Eigen3 REQUIRED)
add_library(eigenLib INTERFACE IMPORTED)
set_property(TARGET eigenLib PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${EIGEN3_INCLUDE_DIR})
list(APPEND ApproxMVBB_LIBS_DEP_PUBLIC eigenLib)

if(${ApproxMVBB_KDTREE_SUPPORT})
    find_package(Meta REQUIRED)
    add_library(metaLib INTERFACE IMPORTED)
    set_property(TARGET metaLib PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${Meta_INCLUDE_DIR})
    if( NOT ${Meta_TARGET} STREQUAL """")
        add_dependencies(metaLib ${Meta_TARGET})
    endif()
endif()

if(${ApproxMVBB_XML_SUPPORT})
    find_package(PugiXML REQUIRED)
endif()

if(ApproxMVBB_USE_OPENMP)
    include(ProcessorCount)
    ProcessorCount(NPROCESSES)

    find_package(OpenMP)
    if(OpenMP_FOUND)
        list(APPEND ApproxMVBB_LIBS_DEP_PRIVATE OpenMP::OpenMP_CXX)
        set(ApproxMVBB_OPENMP_SUPPORT ON)

        mark_as_advanced(ApproxMVBB_OPENMP_USE_NTHREADS)
        set(ApproxMVBB_OPENMP_USE_NTHREADS OFF CACHE BOOL ""If the number of threads should be fixed, otherwise determined at runtime!"")
        if(ApproxMVBB_OPENMP_USE_NTHREADS)
            set(ApproxMVBB_OPENMP_NTHREADS ${NPROCESSES} CACHE STRING ""The number of threads to use."")
            mark_as_advanced(ApproxMVBB_OPENMP_NTHREADS )
        endif()
    else()
        set(ApproxMVBB_OPENMP_SUPPORT OFF)
    endif()
endif()
# ======================================================================

if(ApproxMVBB_BUILD_EXAMPLE)
    set(ApproxMVBB_BUILD_LIBRARY On CACHE BOOL ""Build a shared library"" FORCE)
endif()

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${MYPROJECT_CXX_FLAGS}"")
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${MYPROJECT_CXX_FLAGS}"")
message(STATUS ""Added '${MYPROJECT_CXX_FLAGS}' to CMAKE_CXX and CMAKE_C_FLAGS: ${CMAKE_CXX_FLAGS} and ${CMAKE_C_FLAGS}"")

# Define Install Directories
# Install stuff (default location is not some where on the system! for safty reasons)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX ""${PROJECT_BINARY_DIR}/install"" CACHE STRING ""Install prefix (e.g. /usr/local/)"" FORCE)
endif()
if(${UNIX})
    include(GNUInstallDirs)
    set(ApproxMVBB_INC_INSTALL_DIR ""${CMAKE_INSTALL_INCLUDEDIR}"") 
    set(ApproxMVBB_RUNTIME_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"") 
    set(ApproxMVBB_LIBRARY_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")
    set(ApproxMVBB_ARCHIVE_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")
    set(ApproxMVBB_FRAMEWORK_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")

    set(ApproxMVBB_INSTALL_FULL_LIBDIR ""${CMAKE_INSTALL_FULL_LIBDIR}"")

    set(ApproxMVBB_CMAKE_CONFIG_INSTALL_DIR ""${CMAKE_INSTALL_DATADIR}/ApproxMVBB/cmake"")
    set(ApproxMVBB_ADDITIONAL_FILES_INSTALL_DIR ""${CMAKE_INSTALL_DATADIR}/ApproxMVBB"")
    
elseif(${WIN32})
    set(ApproxMVBB_INC_INSTALL_DIR ""${CMAKE_INSTALL_INCLUDEDIR}"")
    set(ApproxMVBB_RUNTIME_INSTALL_DIR ""bin"") 
    set(ApproxMVBB_LIBRARY_INSTALL_DIR ""bin"")
    set(ApproxMVBB_ARCHIVE_INSTALL_DIR ""lib"")
    set(ApproxMVBB_FRAMEWORK_INSTALL_DIR ""bin"")

    set(ApproxMVBB_CMAKE_CONFIG_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/cmake"")
    set(ApproxMVBB_ADDITIONAL_FILES_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}"")
else()
	message(FATAL_ERROR ""Could not set install folders for this platform!"")
endif()

# Define all MVBB Source files
include(SetTargetCompileOptions)
include(DefineApproxMVBBSources)
set(ApproxMVBB_INCLUDE_DIR ""${PROJECT_SOURCE_DIR}/include/ApproxMVBB"")
set(ApproxMVBB_EXTERNAL_INCLUDE_DIRS ""${PROJECT_SOURCE_DIR}/external/Diameter/include/ApproxMVBB""
                                     ""${PROJECT_SOURCE_DIR}/external/GeometryPredicates/include/ApproxMVBB"")

#Include all relevant sources
include_all_approxmvbb_source(ApproxMVBB_SRC
                              ApproxMVBB_INC
                              ApproxMVBB_INC_DIRS
                              ApproxMVBB_DEPENDING_TARGETS
                              ${PROJECT_SOURCE_DIR} ${ApproxMVBB_BINARY_DIR} )

set(ApproxMVBB_LICENSE_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/COPYING"")
set(ApproxMVBB_README_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")

message(STATUS ""Dependecy Libs (public): ${ApproxMVBB_LIBS_DEP_PUBLIC}"")

if(ApproxMVBB_BUILD_LIBRARY)
    add_subdirectory(lib)
endif()

if(ApproxMVBB_BUILD_TESTS)
    enable_testing()
    add_custom_target(build_and_test ${CMAKE_CTEST_COMMAND} ""--output-on-failure"")
    add_subdirectory(tests)
endif()

if(ApproxMVBB_BUILD_BENCHMARKS)
    add_subdirectory(benchmarks)
endif()

if(ApproxMVBB_BUILD_EXAMPLE)
    add_subdirectory(example)
endif()
",3.10,3.1
9487,dashesy,CereLink,False,False,False,False,False,9,C++,2019-12-04 15:45:32+00:00,2013-01-02 18:40:47+00:00,28,306,"# CBSDK CMake Build System
# Author: griffin.milsap@gmail.com
#         chadwick.boulay@gmail.com
# Version 1.1 Jan. 2017
#   Build information for
#       cbsdk Library
#       -shared, -static (optional), -matlab (optional), -octave (optional)
#       -testcbsdk Test Binary (optional)
#   See ""Optional Targets"" below for options to disable specific targets.
#
# MATLAB:
#    First ../Matlab  is looked.
#    If mex.h is not found then FindMatlab.cmake looks at usual places.
#    Use -DMatlab_ROOT_DIR if installed in unknown location (or copy to ../Matlab).
#    e.g., Matlab R2016a on Mac OS: -DMatlab_ROOT_DIR=/Applications/MATLAB_R2016a.app/
#    -DCBMEX_INSTALL_PREFIX can be used to install cbmex to given directory
#
# General Windows:
#    - If you are using MSVC and not logged-in as an administrator then you will not be
#    able to build the INSTALL target, as by default it tries to install to C:\Program Files.
#    Change the install target using CMAKE_INSTALL_PREFIX. See example CMAKE command below.
#    - If you would like to build the C# libraries and examples then add -DBUILD_CLI=ON
# QT:
#     QT5 ships with its own cmake config files. We need to tell CMake where to find this.
#     On Mac OS, assuming qt installed with homebrew,
#     run CMake with -DCMAKE_PREFIX_PATH=$(brew --prefix qt5)
#     On Windows, run CMake with -DQt5_DIR=path\to\qt\version\platform\lib\cmake\Qt5
#     For example: cmake .. -G ""Visual Studio 15 2017 Win64"" -DQt5_DIR=C:\Qt\5.13.1\msvc2017_64\lib\cmake\Qt5 -DCMAKE_INSTALL_PREFIX=..\dist -DBUILD_CLI=ON
#


CMAKE_MINIMUM_REQUIRED( VERSION 3.1.0 )

PROJECT( CBSDK )

SET( CBSDK_VERSION_MAJOR 1 )
SET( CBSDK_VERSION_MINOR 0 )

##########################################################################################
# Optional Targets
option(BUILD_STATIC ""Build static cbsdk library"" ON)
option(BUILD_CBMEX ""Build Matlab wrapper"" ON)
option(BUILD_CBOCT ""Build Octave wrapper"" ON)
option(BUILD_TEST ""Build testcbsdk"" ON)
option(BUILD_TEST_COMMENTS ""Build test_comments"" ON)
option(BUILD_TEST_ANAOUT ""Build test_anaout"" ON)
option(BUILD_HDF5 ""Build HDF5"" ON)

##########################################################################################
# Define target names
SET( LIB_NAME cbsdk )
SET( INSTALL_TARGET_LIST ${LIB_NAME} )
SET( LIB_NAME_STATIC cbsdk_static )
SET( LIB_NAME_CBMEX cbmex )
SET( LIB_NAME_CBOCT cboct )
SET( TEST_NAME testcbsdk )
SET( TEST_COMMENTS_NAME test_comments )
SET( TEST_ANAOUT_NAME test_analog_out )
SET( N2H5_NAME n2h5 )

##########################################################################################
# Store some platform-specific strings used to construct lib names / folder structures.
IF ( WIN32 )
    SET( PLATFORM_NAME ""win"" )
ELSEIF ( APPLE )
    SET( PLATFORM_NAME ""osx"" )
ELSE ( WIN32 )
    SET( PLATFORM_NAME ""linux"" )
ENDIF ( WIN32 )
# Handle 64 bit binaries
IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
    SET( LIB_SUFFIX """" )
    SET( PLATFORM_NAME ${PLATFORM_NAME}32 )
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 4 )
    SET( LIB_SUFFIX 64 )
    SET( PLATFORM_NAME ${PLATFORM_NAME}64 )
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
IF( ${PLATFORM_NAME} STREQUAL osx64 )
    SET( LIB_SUFFIX """" )
ENDIF( ${PLATFORM_NAME} STREQUAL osx64 )

##########################################################################################
# Misc Configuration
# -output directory
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY         ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY         ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/dist/lib${LIB_SUFFIX} )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY         ${CMAKE_CURRENT_SOURCE_DIR}/dist/bin )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_CURRENT_SOURCE_DIR}/dist/bin )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/dist/bin )
# -Make sure debug builds are recognized
SET(CMAKE_DEBUG_POSTFIX ""d"" CACHE STRING ""Add a postfix, usually d on windows"")
# -Find additional cmake modules
SET( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR} )
LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake"")
# -?
ADD_DEFINITIONS( -DCBSDK_EXPORTS )
IF( WIN32 )
    # From cbhwlib/cbmex.vcproj: PreprocessorDefinitions=""WIN32;_WINDOWS;NO_AFX;WINVER=0x0501;CBSDK_EXPORTS;QT_APP""
    ADD_DEFINITIONS( -DWIN32 -D_WINDOWS -DNO_AFX -DWINVER=0x0501 -DNOMINMAX
        -D_CRT_SECURE_NO_WARNINGS
        -D_WINSOCK_DEPRECATED_NO_WARNINGS)  # Not necessary if -DUNICODE
ENDIF( WIN32 )
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
cmake_policy(SET CMP0063 NEW) # ENABLE CMP0063: Honor visibility properties for all target types.
cmake_policy(SET CMP0042 NEW) # ENABLE CMP0042: MACOSX_RPATH is enabled by default.

##########################################################################################
# Third party libraries

# -Qt
#We could use a variable to make this editable by GUI, but then we have to clear Qt4 variables for reconfigure.
#SET(CMAKE_PREFIX_PATH ""."" CACHE PATH ""Qt path. e.g., C:\\Qt\\5.8\\msvc2015_64\\"")
SET(USING_QT5 OFF)
find_package(Qt5 COMPONENTS Core)
IF(Qt5_FOUND)
    MESSAGE(STATUS ""Found Qt ${Qt5Core_VERSION_STRING}"")
    SET(USING_QT5 ON)
    FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Xml Concurrent)
ELSE(Qt5_FOUND)
    FIND_PACKAGE( Qt4 REQUIRED QtCore QtXml)
ENDIF(Qt5_FOUND)
IF(${USING_QT5})
    SET(QT_LIBRARIES Qt5::Core Qt5::Xml Qt5::Concurrent)
ELSE(${USING_QT5})
    INCLUDE( ${QT_USE_FILE} )
ENDIF(${USING_QT5})
ADD_DEFINITIONS( ${QT_DEFINITIONS} -DQT_APP )

# -HDF5
IF(${BUILD_HDF5})
    FIND_PACKAGE( HDF5 COMPONENTS C HL)
ENDIF()

# -Matlab
IF(${BUILD_CBMEX})
    # Try MATLAB locally first, then on MATLAB install
    FIND_PATH( Matlab_INCLUDE_DIRS
        ""mex.h""
        ""${PROJECT_SOURCE_DIR}/Matlab/include""
    )
    IF ( Matlab_INCLUDE_DIRS )
        SET( MATLAB_ROOT ""${PROJECT_SOURCE_DIR}/Matlab"" )
        MESSAGE ( STATUS ""Search mex libraries at "" ${Matlab_INCLUDE_DIRS}/../lib/${PLATFORM_NAME} )
        FILE( GLOB_RECURSE Matlab_LIBRARIES ${Matlab_INCLUDE_DIRS}/../lib/${PLATFORM_NAME}/libm*.* )
        IF( Matlab_LIBRARIES )
            SET( MATLAB_FOUND 1 )
        ENDIF( Matlab_LIBRARIES )
    ELSE ( Matlab_INCLUDE_DIRS )
        #SET( MATLAB_FIND_DEBUG 1 )
        FIND_PACKAGE( Matlab COMPONENTS MX_LIBRARY)
    ENDIF ( Matlab_INCLUDE_DIRS )
ENDIF()

# -Octave
IF(${BUILD_CBOCT})
    FIND_PACKAGE( Octave )
ENDIF()

##########################################################################################
# Files/folders common to multiple targets

SET( LIB_INCL_DIRS
    ${PROJECT_SOURCE_DIR}/cbhwlib
    ${PROJECT_SOURCE_DIR}/Central
    ${PROJECT_SOURCE_DIR}/CentralCommon
)
IF( WIN32 )
    LIST(APPEND LIB_INCL_DIRS ""${PROJECT_SOURCE_DIR}/compat/"")
ENDIF( WIN32 )

SET( LIB_SOURCE
    ${PROJECT_SOURCE_DIR}/cbmex/cbsdk.cpp
    ${PROJECT_SOURCE_DIR}/cbmex/cbsdk.h
    ${PROJECT_SOURCE_DIR}/cbmex/SdkApp.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/cbhwlib.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/cbhwlib.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/cbHwlibHi.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/cbHwlibHi.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtils.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtils.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsBinary.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsBinary.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsConcurrent.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsConcurrent.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsXml.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsXml.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsXmlItems.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/CCFUtilsXmlItems.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/InstNetwork.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/InstNetwork.h
    ${PROJECT_SOURCE_DIR}/cbhwlib/XmlFile.cpp
    ${PROJECT_SOURCE_DIR}/cbhwlib/XmlFile.h
    ${PROJECT_SOURCE_DIR}/Central/Instrument.cpp
    ${PROJECT_SOURCE_DIR}/Central/Instrument.h
    ${PROJECT_SOURCE_DIR}/Central/UDPsocket.cpp
    ${PROJECT_SOURCE_DIR}/Central/UDPsocket.h
)
IF( WIN32 )
    LIST ( APPEND LIB_SOURCE ${PROJECT_SOURCE_DIR}/cbmex/cbMex.rc )  # ??
ENDIF( WIN32 )

# Qt-MOC headers that need it
SET( LIB_HEADERS
    ${PROJECT_SOURCE_DIR}/cbhwlib/InstNetwork.h
)
IF(${USING_QT5})
    QT5_WRAP_CPP( LIB_HEADERS_MOC ${LIB_HEADERS} )
ELSE(${USING_QT5})
    QT4_WRAP_CPP( LIB_HEADERS_MOC ${LIB_HEADERS} )
ENDIF(${USING_QT5})

# Source for both cbmex and octave targets
SET( LIB_SOURCE_CBMEX
    ${PROJECT_SOURCE_DIR}/cbmex/cbmex.cpp
)

##########################################################################################
# Targets

##
# cbsdk shared / dynamic
ADD_LIBRARY( ${LIB_NAME} SHARED ${LIB_SOURCE} ${LIB_HEADERS_MOC} )
IF (NOT WIN32)
    # Hide unexported symbols
    IF( NOT APPLE )
        SET_TARGET_PROPERTIES( ${LIB_NAME} PROPERTIES LINK_FLAGS ""-Wl,--exclude-libs,ALL"" )
    ENDIF( NOT APPLE )
ENDIF(NOT WIN32)
TARGET_INCLUDE_DIRECTORIES( ${LIB_NAME} PRIVATE ${LIB_INCL_DIRS})
TARGET_LINK_LIBRARIES( ${LIB_NAME} PRIVATE ${QT_LIBRARIES} )
IF( WIN32 )
    # From cbhw/cbmex.vcproj: AdditionalDependencies=""ws2_32.lib winmm.lib libmx.lib libmex.lib libmat.lib QtXmlx644.lib QtCorex644.lib""
    TARGET_LINK_LIBRARIES( ${LIB_NAME} PRIVATE ws2_32 winmm )
ENDIF( WIN32 )

##
# cbsdk_static (optional)
IF(${BUILD_STATIC})
    ADD_LIBRARY( ${LIB_NAME_STATIC} STATIC ${LIB_SOURCE} ${LIB_HEADERS_MOC} )
    TARGET_INCLUDE_DIRECTORIES( ${LIB_NAME_STATIC} PRIVATE ${LIB_INCL_DIRS})
    TARGET_LINK_LIBRARIES( ${LIB_NAME_STATIC} PRIVATE ${QT_LIBRARIES} )
    IF (WIN32 )
        TARGET_LINK_LIBRARIES( ${LIB_NAME_STATIC} PRIVATE ws2_32 winmm )
    ENDIF( WIN32 )
    IF( WIN32 )
        SET_TARGET_PROPERTIES( ${LIB_NAME_STATIC} PROPERTIES COMPILE_FLAGS ""-DSTATIC_CBSDK_LINK"")
    ELSE( WIN32 )
        # Need relocatable static library
        SET_TARGET_PROPERTIES( ${LIB_NAME_STATIC} PROPERTIES COMPILE_FLAGS ""-fPIC"")  #-DSTATIC_CBSDK_LINK
        SET_TARGET_PROPERTIES( ${LIB_NAME_STATIC} PROPERTIES LINK_FLAGS ""-Wl,--exclude-libs,ALL"" )
        #SET_TARGET_PROPERTIES(${LIB_NAME_STATIC} PROPERTIES XCODE_ATTRIBUTE_GENERATE_MASTER_OBJECT_FILE ""YES"")
        #SET_TARGET_PROPERTIES(${LIB_NAME_STATIC} PROPERTIES XCODE_ATTRIBUTE_STRIP_STYLE ""non-global"")
        #SET_TARGET_PROPERTIES(${LIB_NAME_STATIC} PROPERTIES XCODE_ATTRIBUTE_DEPLOYMENT_POSTPROCESSING ""YES"")
        #SET_TARGET_PROPERTIES(${LIB_NAME_STATIC} PROPERTIES XCODE_ATTRIBUTE_SEPARATE_STRIP ""YES"")
    ENDIF( WIN32)
    LIST(APPEND INSTALL_TARGET_LIST ${LIB_NAME_STATIC})
ENDIF(${BUILD_STATIC})

##
# cbmex
IF(${BUILD_CBMEX} AND MATLAB_FOUND )
    MESSAGE ( STATUS ""Add cbmex build target using MATLAB libs at "" ${Matlab_ROOT_DIR})
    IF( WIN32 )
        SET ( LIB_SOURCE_CBMEX ${LIB_SOURCE_CBMEX} ${PROJECT_SOURCE_DIR}/cbmex/cbMex.rc )
    ENDIF( WIN32 )
    ADD_LIBRARY( ${LIB_NAME_CBMEX} SHARED ${LIB_SOURCE_CBMEX} )
    
    # Want package name to be cbmex without prefix
    IF( WIN32 )
        # Do not output to Debug/Release directories on Windows
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES PREFIX ""../"" )
        # Manually export mexFunction because __declspec(dllexport) conflicts with its definition in mex.h
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES LINK_FLAGS ""/EXPORT:mexFunction"" )
    ELSEIF( APPLE )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES PREFIX """" )
        # This is for normal users of MATLAB on OSX without homebrew 
        #  so we try to use relative paths to be able to bundle shared libraries 
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES BUILD_WITH_INSTALL_RPATH 1 INSTALL_NAME_DIR ""@rpath"")
    ELSE( WIN32 )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES PREFIX """" )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES LINK_FLAGS ""-Wl,--exclude-libs,ALL"" )
    ENDIF( WIN32 )
    
    SET_TARGET_PROPERTIES( ${LIB_NAME_CBMEX} PROPERTIES SUFFIX .${Matlab_MEX_EXTENSION})
    IF( NOT CBMEX_INSTALL_PREFIX )
        SET( CBMEX_INSTALL_PREFIX .)
    ENDIF( NOT CBMEX_INSTALL_PREFIX )
    # Use static library to build cbmex
    ADD_DEPENDENCIES( ${LIB_NAME_CBMEX} ${LIB_NAME_STATIC} )
    TARGET_INCLUDE_DIRECTORIES( ${LIB_NAME_CBMEX}
        PRIVATE ${LIB_INCL_DIRS} ${Matlab_INCLUDE_DIRS}
    )
    TARGET_LINK_LIBRARIES( ${LIB_NAME_CBMEX}
        ${LIB_NAME_STATIC}
        ${QT_LIBRARIES}
        ${Matlab_LIBRARIES}
    )
    INSTALL( TARGETS ${LIB_NAME_CBMEX}
        RUNTIME DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
        LIBRARY DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
        ARCHIVE DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
    )
ENDIF( ${BUILD_CBMEX} AND MATLAB_FOUND )

##
# octave
IF( ${BUILD_CBOCT} AND OCTAVE_FOUND )
    MESSAGE ( STATUS ""Add cbmex build target using Octave libs at "" ${OCTAVE_OCT_LIB_DIR})
    IF( WIN32 )
        SET ( LIB_SOURCE_CBMEX ${LIB_SOURCE_CBMEX} ../cbmex/cbMex.rc )
    ENDIF( WIN32 )
    ADD_LIBRARY( ${LIB_NAME_CBOCT} SHARED ${LIB_SOURCE_CBMEX} )
    
    # Want package name to be cbmex without prefix
    IF( WIN32 )
        # Do not output to Debug/Release directories on Windows
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES PREFIX ""../"" )
        # Manually export mexFunction because __declspec(dllexport) conflicts with its definition in mex.h
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES LINK_FLAGS ""/EXPORT:mexFunction"" )
    ELSEIF( APPLE )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES PREFIX """" )
        # This is for normal users of MATLAB on OSX without homebrew 
        #  so we try to use relative paths to be able to bundle shared libraries 
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES BUILD_WITH_INSTALL_RPATH 1 INSTALL_NAME_DIR ""@rpath"")
    ELSE( WIN32 )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES PREFIX """" )
        SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES LINK_FLAGS ""-Wl,--exclude-libs,ALL"" )
    ENDIF( WIN32 )
    
    SET_TARGET_PROPERTIES( ${LIB_NAME_CBOCT} PROPERTIES SUFFIX .mex)
    IF( NOT CBMEX_INSTALL_PREFIX )
        SET( CBMEX_INSTALL_PREFIX .)
    ENDIF( NOT CBMEX_INSTALL_PREFIX )
    # Use static library to build cbmex
    ADD_DEPENDENCIES( ${LIB_NAME_CBOCT} ${LIB_NAME_STATIC} )
    TARGET_INCLUDE_DIRECTORIES( ${LIB_NAME_CBOCT}
        PRIVATE ${LIB_INCL_DIRS} ${OCTAVE_INCLUDE_DIR}
    )
    TARGET_LINK_LIBRARIES( ${LIB_NAME_CBOCT} ${LIB_NAME_STATIC} ${QT_LIBRARIES} ${OCTAVE_LIBRARIES} )
    INSTALL( TARGETS ${LIB_NAME_CBOCT}
        RUNTIME DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
        LIBRARY DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
        ARCHIVE DESTINATION ${CBMEX_INSTALL_PREFIX}/CereLink 
    )
ENDIF( ${BUILD_CBOCT} AND OCTAVE_FOUND )

##
# test
IF(${BUILD_TEST})
    ADD_EXECUTABLE( ${TEST_NAME} ${PROJECT_SOURCE_DIR}/cbmex/testcbsdk.cpp )
    TARGET_INCLUDE_DIRECTORIES( ${TEST_NAME} PRIVATE ${LIB_INCL_DIRS})
    TARGET_LINK_LIBRARIES( ${TEST_NAME} ${LIB_NAME} )
    LIST(APPEND INSTALL_TARGET_LIST ${TEST_NAME})
    
    IF(WIN32)
        get_target_property(QT5_QMAKE_EXECUTABLE Qt5::qmake IMPORTED_LOCATION)
        get_filename_component(QT5_WINDEPLOYQT_EXECUTABLE ${QT5_QMAKE_EXECUTABLE} PATH)
        set(QT5_WINDEPLOYQT_EXECUTABLE ""${QT5_WINDEPLOYQT_EXECUTABLE}/windeployqt.exe"")
        add_custom_command(TARGET ${TEST_NAME} POST_BUILD
            COMMAND ${QT5_WINDEPLOYQT_EXECUTABLE} $<TARGET_FILE:${LIB_NAME}>)

        ADD_EXECUTABLE( test_io ${PROJECT_SOURCE_DIR}/cbmex/test_io.cpp )
        TARGET_INCLUDE_DIRECTORIES( test_io PRIVATE ${LIB_INCL_DIRS})
        TARGET_LINK_LIBRARIES( test_io ${LIB_NAME} )
        LIST(APPEND INSTALL_TARGET_LIST test_io)
        add_custom_command(TARGET test_io POST_BUILD
            COMMAND ${QT5_WINDEPLOYQT_EXECUTABLE} $<TARGET_FILE:${LIB_NAME}>)
    ENDIF(WIN32)
ENDIF(${BUILD_TEST})

IF(${BUILD_TEST_COMMENTS})
    ADD_EXECUTABLE( ${TEST_COMMENTS_NAME} ${PROJECT_SOURCE_DIR}/samples/TestComments/test_comments.cpp )
    TARGET_INCLUDE_DIRECTORIES( ${TEST_COMMENTS_NAME} PRIVATE
        ${LIB_INCL_DIRS}
        ${PROJECT_SOURCE_DIR}/cbmex)
    TARGET_LINK_LIBRARIES( ${TEST_COMMENTS_NAME} ${LIB_NAME} )
    LIST(APPEND INSTALL_TARGET_LIST ${TEST_COMMENTS_NAME})
    IF(WIN32)
        get_target_property(QT5_QMAKE_EXECUTABLE Qt5::qmake IMPORTED_LOCATION)
        get_filename_component(QT5_WINDEPLOYQT_EXECUTABLE ${QT5_QMAKE_EXECUTABLE} PATH)
        set(QT5_WINDEPLOYQT_EXECUTABLE ""${QT5_WINDEPLOYQT_EXECUTABLE}/windeployqt.exe"")
        add_custom_command(TARGET ${TEST_COMMENTS_NAME} POST_BUILD
            COMMAND ${QT5_WINDEPLOYQT_EXECUTABLE} $<TARGET_FILE:${LIB_NAME}>)
    ENDIF(WIN32)
ENDIF(${BUILD_TEST_COMMENTS})

IF(${BUILD_TEST_ANAOUT})
    ADD_EXECUTABLE( ${TEST_ANAOUT_NAME} ${PROJECT_SOURCE_DIR}/samples/TestAnalogOut/test_analog_out.cpp )
    TARGET_INCLUDE_DIRECTORIES( ${TEST_ANAOUT_NAME} PRIVATE
        ${LIB_INCL_DIRS}
        ${PROJECT_SOURCE_DIR}/cbmex)
    TARGET_LINK_LIBRARIES( ${TEST_ANAOUT_NAME} ${LIB_NAME} )
    LIST(APPEND INSTALL_TARGET_LIST ${TEST_ANAOUT_NAME})
    IF(WIN32)
        get_target_property(QT5_QMAKE_EXECUTABLE Qt5::qmake IMPORTED_LOCATION)
        get_filename_component(QT5_WINDEPLOYQT_EXECUTABLE ${QT5_QMAKE_EXECUTABLE} PATH)
        set(QT5_WINDEPLOYQT_EXECUTABLE ""${QT5_WINDEPLOYQT_EXECUTABLE}/windeployqt.exe"")
        add_custom_command(TARGET ${TEST_ANAOUT_NAME} POST_BUILD
            COMMAND ${QT5_WINDEPLOYQT_EXECUTABLE} $<TARGET_FILE:${LIB_NAME}>)
    ENDIF(WIN32)
ENDIF(${BUILD_TEST_ANAOUT})

##
# n2h5
IF(${BUILD_HDF5} AND HDF5_FOUND )
    SET( N2H5_SOURCE
        ${PROJECT_SOURCE_DIR}/n2h5/main.cpp
        ${PROJECT_SOURCE_DIR}/n2h5/n2h5.cpp
        ${PROJECT_SOURCE_DIR}/n2h5/n2h5.h
        ${PROJECT_SOURCE_DIR}/n2h5/NevNsx.h
    )
    MESSAGE ( STATUS ""Add n2h5 utility build target"")
    IF( WIN32 )
        SET ( N2H5_SOURCE ${N2H5_SOURCE} ${PROJECT_SOURCE_DIR}/n2h5/res/n2h5_res.rc )
    ENDIF( WIN32 )
    ADD_EXECUTABLE( ${N2H5_NAME} ${N2H5_SOURCE} )
    TARGET_INCLUDE_DIRECTORIES( ${N2H5_NAME} PRIVATE ${LIB_INCL_DIRS} ${HDF5_INCLUDE_DIRS})
    TARGET_LINK_LIBRARIES (${N2H5_NAME} ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES})
    LIST(APPEND INSTALL_TARGET_LIST ${N2H5_NAME})
ENDIF(${BUILD_HDF5} AND HDF5_FOUND )

##
# C++ / CLI
add_subdirectory(cli)

#########################################################################################
# Install libraries, test executable, and headers
INSTALL( TARGETS ${INSTALL_TARGET_LIST}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib${LIB_SUFFIX}
    ARCHIVE DESTINATION lib${LIB_SUFFIX}
)
INSTALL( FILES ${PROJECT_SOURCE_DIR}/cbmex/cbsdk.h ${PROJECT_SOURCE_DIR}/cbhwlib/cbhwlib.h DESTINATION include )

#########################################################################################
# Shared & Static post-build copy the header files into the dist directory.
ADD_CUSTOM_COMMAND(
    TARGET ""${LIB_NAME}""
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/cbmex/cbsdk.h"" ""${CMAKE_CURRENT_SOURCE_DIR}/dist/include/cbsdk.h""
    COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/cbhwlib/cbhwlib.h"" ""${CMAKE_CURRENT_SOURCE_DIR}/dist/include/cbhwlib.h""
)
",3.1.0,3.1
9504,Martchus,tageditor,False,False,False,False,False,1,C++,2020-05-13 16:44:06+00:00,2015-04-22 17:19:53+00:00,170,552,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# meta data
project(tageditor)
set(META_PROJECT_NAME ${PROJECT_NAME})
set(META_PROJECT_TYPE application)
set(META_APP_NAME ""Tag Editor"")
set(META_APP_CATEGORIES ""AudioVideo;Database;"")
set(META_APP_AUTHOR ""Martchus"")
set(META_APP_URL ""https://github.com/${META_APP_AUTHOR}/${META_PROJECT_NAME}"")
set(META_APP_DESCRIPTION
    ""A tageditor with Qt GUI and command line interface. Supports MP4 (iTunes), ID3, Vorbis, Opus, FLAC and Matroska"")
set(META_GUI_OPTIONAL true)
set(META_JS_SRC_DIR renamingutility)
set(META_VERSION_MAJOR 3)
set(META_VERSION_MINOR 3)
set(META_VERSION_PATCH 8)
set(META_ADD_DEFAULT_CPP_UNIT_TEST_APPLICATION ON)

# add project files
set(HEADER_FILES cli/attachmentinfo.h cli/fieldmapping.h cli/helper.h cli/mainfeatures.h application/knownfieldmodel.h)
set(SRC_FILES application/main.cpp cli/attachmentinfo.cpp cli/fieldmapping.cpp cli/helper.cpp cli/mainfeatures.cpp
              application/knownfieldmodel.cpp)

set(GUI_HEADER_FILES application/targetlevelmodel.h application/settings.h gui/fileinfomodel.h misc/htmlinfo.h
                     misc/utility.h)
set(GUI_SRC_FILES application/targetlevelmodel.cpp application/settings.cpp gui/fileinfomodel.cpp misc/htmlinfo.cpp
                  misc/utility.cpp)

set(WIDGETS_HEADER_FILES
    gui/entertargetdialog.h
    gui/javascripthighlighter.h
    gui/attachmentsedit.h
    gui/attachmentsmodel.h
    gui/codeedit.h
    gui/mainwindow.h
    gui/minimumemptyspinbox.h
    gui/notificationlabel.h
    gui/notificationmodel.h
    gui/pathlineedit.h
    gui/picturepreviewselection.h
    gui/filefilterproxymodel.h
    gui/initiate.h
    gui/previousvaluehandling.h
    gui/renamefilesdialog.h
    gui/settingsdialog.h
    gui/tagedit.h
    gui/tagfieldedit.h
    gui/tageditorwidget.h
    dbquery/dbquery.h
    dbquery/musicbrainz.h
    dbquery/makeitpersonal.h
    dbquery/lyricswikia.h
    gui/dbquerywidget.h
    misc/networkaccessmanager.h
    renamingutility/filesystemitem.h
    renamingutility/filesystemitemmodel.h
    renamingutility/filteredfilesystemitemmodel.h
    renamingutility/renamingengine.h
    renamingutility/tageditorobject.h)
set(WIDGETS_SRC_FILES
    gui/attachmentsedit.cpp
    gui/attachmentsmodel.cpp
    gui/codeedit.cpp
    gui/entertargetdialog.cpp
    gui/mainwindow.cpp
    gui/minimumemptyspinbox.cpp
    gui/notificationlabel.cpp
    gui/notificationmodel.cpp
    gui/pathlineedit.cpp
    gui/picturepreviewselection.cpp
    gui/filefilterproxymodel.cpp
    gui/initiate.cpp
    gui/javascripthighlighter.cpp
    gui/renamefilesdialog.cpp
    gui/settingsdialog.cpp
    gui/tagedit.cpp
    gui/tagfieldedit.cpp
    gui/tageditorwidget.cpp
    dbquery/dbquery.cpp
    dbquery/musicbrainz.cpp
    dbquery/makeitpersonal.cpp
    dbquery/lyricswikia.cpp
    gui/dbquerywidget.cpp
    misc/networkaccessmanager.cpp
    renamingutility/filesystemitem.cpp
    renamingutility/filesystemitemmodel.cpp
    renamingutility/filteredfilesystemitemmodel.cpp
    renamingutility/renamingengine.cpp
    renamingutility/tageditorobject.cpp
    resources/icons.qrc
    resources/scripts.qrc)
set(WIDGETS_UI_FILES
    gui/id3v2optionpage.ui
    gui/id3v1optionpage.ui
    gui/tagprocessinggeneraloptionpage.ui
    gui/tagprocessingtargetsoptionpage.ui
    gui/editorgeneraloptionpage.ui
    gui/filebrowsergeneraloptionpage.ui
    gui/mainwindow.ui
    gui/renamefilesdialog.ui
    gui/editorautocorrectionoptionpage.ui
    gui/picturepreviewselection.ui
    gui/editorfieldsoptionpage.ui
    gui/editordbqueryoptionpage.ui
    gui/infooptionpage.ui
    gui/entertargetdialog.ui
    gui/attachmentsedit.ui
    gui/editortempoptionpage.ui
    gui/filelayout.ui
    gui/tageditorwidget.ui
    gui/dbquerywidget.ui
    gui/imageconversiondialog.ui)

set(TEST_HEADER_FILES)
set(TEST_SRC_FILES tests/cli.cpp)

set(TS_FILES translations/${META_PROJECT_NAME}_de_DE.ts translations/${META_PROJECT_NAME}_en_US.ts)

set(ICON_FILES resources/icons/hicolor/scalable/apps/${META_PROJECT_NAME}.svg)

set(DOC_FILES README.md)

set(REQUIRED_ICONS
    window-close
    document-open
    edit-clear
    edit-copy
    emblem-error
    emblem-warning
    emblem-information
    emblem-question
    object-locked
    object-unlocked
    preferences-other
    view-refresh
    view-preview
    document-open-recent
    tag-add
    process-stop
    edit-find
    media-playback-start
    list-add
    tag
    dialog-ok-apply
    help-about
    preferences-desktop-locale
    edit-undo
    document-properties
    image-x-generic
    unlock
    tag-properties
    edit-rename
    system-run
    go-next
    expand-menu-hover
    autocorrection
    lock
    qtcreator
    collapse-menu-hover
    edit-paste
    document-save-as
    view-list-tree
    document-edit
    edit-delete
    search
    system-search
    document-revert
    dialog-ok
    preferences-desktop-icons
    dialog-cancel
    edit-clear
    application-exit
    tag-delete
    system-file-manager
    document-save
    view-media-lyrics
    image-resize-symbolic)

# find c++utilities
set(CONFIGURATION_PACKAGE_SUFFIX
    """"
    CACHE STRING ""sets the suffix for find_package() calls to packages configured via c++utilities"")
find_package(c++utilities${CONFIGURATION_PACKAGE_SUFFIX} 5.0.0 REQUIRED)
use_cpp_utilities()
include(BasicConfig)

# find qtutilities
if (WIDGETS_GUI OR QUICK_GUI)
    find_package(qtutilities${CONFIGURATION_PACKAGE_SUFFIX} 6.0.0 REQUIRED)
    use_qt_utilities()
endif ()

# find tagparser
find_package(tagparser${CONFIGURATION_PACKAGE_SUFFIX} 9.2.0 REQUIRED)
use_tag_parser()

# enable experimental JSON export
option(ENABLE_JSON_EXPORT ""enable JSON export"" OFF)
if (ENABLE_JSON_EXPORT)
    # find reflective-rapidjson
    find_package(reflective_rapidjson${CONFIGURATION_PACKAGE_SUFFIX} REQUIRED)
    use_reflective_rapidjson()

    # add additional source files
    list(APPEND HEADER_FILES cli/json.h)
    list(APPEND SRC_FILES cli/json.cpp)

    # add generator invocation
    include(ReflectionGenerator)
    add_reflection_generator_invocation(
        INPUT_FILES
        cli/json.h
        GENERATORS
        json
        OUTPUT_LISTS
        HEADER_FILES
        CLANG_OPTIONS_FROM_TARGETS
        ${META_TARGET_NAME})

    # add compile definitions
    list(APPEND META_PRIVATE_COMPILE_DEFINITIONS ${META_PROJECT_VARNAME_UPPER}_JSON_EXPORT)
endif ()

# add Qt modules which can not be detected automatically
list(APPEND ADDITIONAL_QT_MODULES Concurrent Network)

# include modules to apply configuration
if (WIDGETS_GUI OR QUICK_GUI)
    include(QtGuiConfig)
    include(QtJsProviderConfig)
    include(QtWebViewProviderConfig)
    include(QtConfig)
endif ()
include(WindowsResources)
include(TestTarget)
include(AppTarget)
include(ShellCompletion)
include(ConfigHeader)

# create desktop file using previously defined meta data
add_desktop_file()

# create custom desktop file for launching the renaming utility separately
add_custom_desktop_file(
    FILE_NAME
    ""${META_ID}-renamingutility""
    DESKTOP_FILE_APP_NAME
    ""Renaming utility (${META_APP_NAME})""
    DESKTOP_FILE_GENERIC_NAME
    ""Renaming utility (${META_APP_NAME})""
    DESKTOP_FILE_DESCRIPTION
    ""Tool to rename files using its tag information""
    DESKTOP_FILE_CATEGORIES
    ""${META_APP_CATEGORIES}""
    DESKTOP_FILE_CMD
    ""${META_TARGET_NAME} qt-gui --renaming-utility""
    DESKTOP_FILE_ICON
    ""${META_PROJECT_NAME}"")
",3.1.0,3.1
9552,stack-of-tasks,sot-pattern-generator,False,False,False,False,False,29,C++,2020-05-11 12:16:54+00:00,2010-11-04 17:28:29+00:00,4,303,"# Copyright 2010, 2019-2020, François Bleibel, Olivier Stasse, Guilhem Saurel, JRL, CNRS/AIST, LAAS-CNRS
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

# Project properties
SET(PROJECT_ORG stack-of-tasks)
SET(PROJECT_NAME sot-pattern-generator)
SET(PROJECT_DESCRIPTION ""jrl-walkgen bindings for dynamic-graph."")
SET(PROJECT_URL ""https://github.com/${PROJECT_ORG}/${PROJECT_NAME}"")

# Project options
OPTION(BUILD_PYTHON_INTERFACE ""Build the python bindings"" ON)
OPTION(INSTALL_PYTHON_INTERFACE_ONLY ""Install *ONLY* the python bindings"" OFF)
OPTION(SUFFIX_SO_VERSION ""Suffix library name with its version"" ON)

# Project configuration
IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  SET(PROJECT_USE_CMAKE_EXPORT TRUE)
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
SET(CUSTOM_HEADER_DIR ""sot/pattern-generator"")
SET(CXX_DISABLE_WERROR TRUE)
SET(DOXYGEN_USE_MATHJAX YES)

# JRL-cmakemodule setup
INCLUDE(cmake/base.cmake)
INCLUDE(cmake/python.cmake)

# Project definition
COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX C)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

# Project dependencies
ADD_PROJECT_DEPENDENCY(jrl-walkgen REQUIRED PKG_CONFIG_REQUIRES ""jrl-walkgen >= 3.2.0"")
ADD_PROJECT_DEPENDENCY(sot-core REQUIRED PKG_CONFIG_REQUIRES ""sot-core >= 4.8.1"")
ADD_PROJECT_DEPENDENCY(talos_data)
ADD_OPTIONAL_DEPENDENCY(""hrp2_14_description >= 1.0.5"")

IF(BUILD_PYTHON_INTERFACE)
  FINDPYTHON()
  STRING(REGEX REPLACE ""-"" ""_"" PYTHON_DIR ${CUSTOM_HEADER_DIR})
  ADD_PROJECT_DEPENDENCY(dynamic-graph-python REQUIRED
    PKG_CONFIG_REQUIRES dynamic-graph-python)
ENDIF(BUILD_PYTHON_INTERFACE)

# Main Library
SET(${PROJECT_NAME}_HEADERS
  include/${CUSTOM_HEADER_DIR}/next-step.h
  include/${CUSTOM_HEADER_DIR}/exception-pg.h
  include/${CUSTOM_HEADER_DIR}/next-step-pg-sot.h
  include/${CUSTOM_HEADER_DIR}/pg.h
  include/${CUSTOM_HEADER_DIR}/pg-manager.h
  include/${CUSTOM_HEADER_DIR}/step-queue.h
  include/${CUSTOM_HEADER_DIR}/selector.h
  include/${CUSTOM_HEADER_DIR}/step-checker.h
  include/${CUSTOM_HEADER_DIR}/step-time-line.h
  include/${CUSTOM_HEADER_DIR}/step-observer.h
  include/${CUSTOM_HEADER_DIR}/step-computer.h
  include/${CUSTOM_HEADER_DIR}/step-computer-force.h
  include/${CUSTOM_HEADER_DIR}/step-computer-joystick.h
  include/${CUSTOM_HEADER_DIR}/step-computer-pos.h
  include/${CUSTOM_HEADER_DIR}/which-foot-upper.h
  )

ADD_LIBRARY(${PROJECT_NAME} INTERFACE)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} INTERFACE $<INSTALL_INTERFACE:include>)
INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)

ADD_SUBDIRECTORY(src)
IF(BUILD_PYTHON_INTERFACE)
  ADD_SUBDIRECTORY(python)
ENDIF(BUILD_PYTHON_INTERFACE)
ADD_SUBDIRECTORY(tests)

IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  INSTALL(FILES package.xml DESTINATION share/${PROJECT_NAME})
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
",3.1,3.1
9597,cucumber,cucumber-cpp,False,False,False,False,False,96,C++,2020-05-16 12:46:50+00:00,2010-04-30 06:22:30+00:00,217,402,"cmake_minimum_required(VERSION 3.1)

if(NOT CMAKE_VERSION VERSION_LESS ""3.3"")
    # Don't ignore visibility related properties for non-SHARED targets
    cmake_policy(SET CMP0063 NEW)
endif()

if (NOT CMAKE_VERSION VERSION_LESS ""3.13"")
    # CMP0077: option() honors normal variables
    # https://cmake.org/cmake/help/latest/policy/CMP0077.html
    cmake_policy(SET CMP0077 NEW)
endif()

project(Cucumber-Cpp)

option(BUILD_SHARED_LIBS        ""Generate shared libraries"" OFF)
option(CUKE_USE_STATIC_BOOST    ""Statically link Boost (except boost::test)"" ${WIN32})
option(CUKE_USE_STATIC_GTEST    ""Statically link Google Test"" ON)
option(CUKE_ENABLE_BOOST_TEST   ""Enable Boost.Test framework"" ON)
option(CUKE_ENABLE_EXAMPLES     ""Build examples"" OFF)
option(CUKE_ENABLE_GTEST        ""Enable Google Test framework"" ON)
option(CUKE_ENABLE_QT           ""Enable Qt framework"" ON)
option(CUKE_TESTS_E2E           ""Enable end-to-end tests"" ON)
option(CUKE_TESTS_UNIT          ""Enable unit tests"" ON)
option(CUKE_TESTS_VALGRIND      ""Enable tests within Valgrind"" OFF)
set(GMOCK_SRC_DIR """" CACHE STRING ""Google Mock framework sources path (otherwise downloaded)"")
set(GMOCK_VER ""1.7.0"" CACHE STRING ""Google Mock framework version to be used"")

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)

#
# Option deprecation: if deprecated option is defined
# then print a warning and use its value instead
#

function(option_depr_message old prefer)
    message (DEPRECATION ""${old} is deprecated in favor of ${prefer}"")
endfunction()

function(option_depr old prefer)
    if(DEFINED ${old})
        option_depr_message(${old} ${prefer})
        set (${prefer} ${${old}} CACHE BOOL ""Set from deprecated ${old}"" FORCE)
    endif()
endfunction()

function(option_depr_invert old prefer)
    if(DEFINED ${old})
        option_depr_message(${old} ${prefer})
        set (${prefer} $<NOT:${${old}}> CACHE BOOL ""Set from deprecated ${old}"" FORCE)
    endif()
endfunction()


option_depr_invert (CUKE_DISABLE_BOOST_TEST   CUKE_ENABLE_BOOST_TEST)
option_depr_invert (CUKE_DISABLE_GTEST        CUKE_ENABLE_GTEST)
option_depr_invert (CUKE_DISABLE_QT           CUKE_ENABLE_QT)
option_depr_invert (CUKE_DISABLE_E2E_TESTS    CUKE_TESTS_E2E)
option_depr_invert (CUKE_DISABLE_UNIT_TESTS   CUKE_TESTS_UNIT)
option_depr        (VALGRIND_TESTS            CUKE_TESTS_VALGRIND)


#
# Generic Compiler Flags
#

if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang|GNU"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS_INIT} -Werror -Wall -Wextra ${CMAKE_CXX_FLAGS}"")
    # TODO: A better fix should handle ld's --as-needed flag
    if(UNIX AND NOT APPLE)
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Xlinker '--no-as-needed'"")
    endif()
elseif(MSVC)
    set(CMAKE_CXX_FLAGS ""-DNOMINMAX ${CMAKE_CXX_FLAGS}"") # exclude M$ min/max macros
    set(CMAKE_CXX_FLAGS ""/wd4996 ${CMAKE_CXX_FLAGS}"") # don't warn about use of plain C functions without (non-portable) ""_s"" suffix
    #set(CMAKE_CXX_FLAGS_DEBUG ""/analyze ${CMAKE_CXX_FLAGS_DEBUG}"")
endif()

#
# Colored Terminal Output
#

if(UNIX AND (
       (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    OR (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))
    AND CMAKE_GENERATOR STREQUAL ""Ninja"")
  # These compilers generate coloured output, but by default only when their output channel is a
  # terminal (TTY/PTY). Ninja however captures all output in a pipe (per-subprocess), disabling
  # coloured compiler diagnostics. We forcefully enable it because Ninja, since 1.0.0
  # (ninja-build/ninja#198) takes care to strip VT100 CSI control sequences from the output if Ninja
  # itself is writing to a pipe instead of a terminal. As a result this should give us the best of
  # both worlds: coloured output when we're running in a terminal, plain output for editors, IDEs,
  # etc.
  set(CMAKE_CXX_FLAGS ""-fdiagnostics-color=always ${CMAKE_CXX_FLAGS}"" CACHE STRING """" FORCE)
endif()

#
# Boost
#

if(MSVC11)
    # Boost 1.51 fixed a bug with MSVC11
    message(STATUS ""Forcing Boost 1.51+ on MSVC11"")
    set(BOOST_MIN_VERSION ""1.51"")
else()
    set(BOOST_MIN_VERSION ""1.46"")
endif()

set(Boost_USE_STATIC_RUNTIME OFF)
set(CUKE_CORE_BOOST_LIBS thread system regex date_time program_options filesystem)
if(CUKE_ENABLE_BOOST_TEST)
    # ""An external test runner utility is required to link with dynamic library"" (Boost User's Guide)
    set(Boost_USE_STATIC_LIBS OFF)
    set(CMAKE_CXX_FLAGS ""-DBOOST_TEST_DYN_LINK ${CMAKE_CXX_FLAGS}"")
    find_package(Boost ${BOOST_MIN_VERSION} COMPONENTS unit_test_framework)
endif()

if(CUKE_USE_STATIC_BOOST)
    set(Boost_USE_STATIC_LIBS ON)
    find_package(Boost ${BOOST_MIN_VERSION} COMPONENTS ${CUKE_CORE_BOOST_LIBS} REQUIRED)
else()
    set(CMAKE_CXX_FLAGS ""-DBOOST_ALL_DYN_LINK ${CMAKE_CXX_FLAGS}"")
    set(Boost_USE_STATIC_LIBS OFF)
    find_package(Boost ${BOOST_MIN_VERSION} COMPONENTS ${CUKE_CORE_BOOST_LIBS} REQUIRED)
endif()

# Create import targets for CMake versions older than 3.5 (actually older FindBoost.cmake)
if(Boost_USE_STATIC_LIBS)
    set(LIBRARY_TYPE STATIC)
else()
    # Just because we don't ask for static doesn't mean we're not getting static
    set(LIBRARY_TYPE UNKNOWN)
endif()
if(Boost_INCLUDE_DIRS AND NOT TARGET Boost::boost)
    add_library(Boost::boost INTERFACE IMPORTED)
    set_target_properties(Boost::boost PROPERTIES
        ""INTERFACE_INCLUDE_DIRECTORIES"" ""${Boost_INCLUDE_DIRS}"")
endif()
if(Boost_THREAD_LIBRARY AND NOT TARGET Boost::thread)
    find_package(Threads REQUIRED)
    add_library(Boost::thread ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::thread PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_THREAD_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Threads::Threads;Boost::boost""
    )
endif()
if(Boost_SYSTEM_LIBRARY AND NOT TARGET Boost::system)
    add_library(Boost::system ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::system PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_SYSTEM_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::boost""
    )
    if(Boost_USE_STATIC_LIBS)
        set_target_properties(Boost::system PROPERTIES
            ""COMPILE_DEFINITIONS"" BOOST_ERROR_CODE_HEADER_ONLY=1
        )
    endif()
endif()
if(Boost_FILESYSTEM_LIBRARY AND NOT TARGET Boost::filesystem)
    add_library(Boost::filesystem ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::filesystem PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_FILESYSTEM_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::system;Boost::boost""
    )
endif()
if(Boost_REGEX_LIBRARY AND NOT TARGET Boost::regex)
    add_library(Boost::regex ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::regex PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_REGEX_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::boost""
    )
endif()
if(Boost_DATE_TIME_LIBRARY AND NOT TARGET Boost::date_time)
    add_library(Boost::date_time ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::date_time PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_DATE_TIME_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::boost""
    )
endif()
if(Boost_PROGRAM_OPTIONS_LIBRARY AND NOT TARGET Boost::program_options)
    add_library(Boost::program_options ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::program_options PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_PROGRAM_OPTIONS_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::boost""
    )
endif()
if(Boost_UNIT_TEST_FRAMEWORK_LIBRARY AND NOT TARGET Boost::unit_test_framework)
    add_library(Boost::unit_test_framework ${LIBRARY_TYPE} IMPORTED)
    set_target_properties(Boost::unit_test_framework PROPERTIES
        ""IMPORTED_LOCATION"" ""${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}""
        ""INTERFACE_LINK_LIBRARIES"" ""Boost::boost""
    )
endif()

#
# GTest
#

if(CUKE_ENABLE_GTEST)
    set(GTEST_USE_STATIC_LIBS ${CUKE_USE_STATIC_GTEST})
    if(NOT GMOCK_ROOT)
        set(GMOCK_ROOT ""${CMAKE_CURRENT_BINARY_DIR}/gmock"")
    endif()
    find_package(GMock REQUIRED)
endif()

#
# Qt
#

if(CUKE_ENABLE_QT)
    find_package(Qt5Core)
    find_package(Qt5Gui)
    find_package(Qt5Widgets)
    find_package(Qt5Test)

    if(Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Widgets_FOUND AND Qt5Test_FOUND)
        message(STATUS ""Found Qt version: ${Qt5Core_VERSION_STRING}"")
        if(NOT Qt5Core_VERSION_STRING VERSION_LESS 5.7 AND (NOT DEFINED CMAKE_CXX_STANDARD OR NOT CMAKE_CXX_STANDARD STREQUAL 98))
            message(STATUS ""C++11 is needed from Qt version 5.7.0, building with c++11 enabled"")
            set(CMAKE_CXX_STANDARD 11)
        endif()
        add_library(Qt::Core    INTERFACE IMPORTED)
        add_library(Qt::Gui     INTERFACE IMPORTED)
        add_library(Qt::Widgets INTERFACE IMPORTED)
        add_library(Qt::Test    INTERFACE IMPORTED)
        set_target_properties(Qt::Core    PROPERTIES INTERFACE_LINK_LIBRARIES Qt5::Core   )
        set_target_properties(Qt::Gui     PROPERTIES INTERFACE_LINK_LIBRARIES Qt5::Gui    )
        set_target_properties(Qt::Widgets PROPERTIES INTERFACE_LINK_LIBRARIES Qt5::Widgets)
        set_target_properties(Qt::Test    PROPERTIES INTERFACE_LINK_LIBRARIES Qt5::Test   )
    else()
        find_package(Qt4 COMPONENTS QtCore QtGui QtTest)
        if(QT4_FOUND)
            add_library(Qt::Core    INTERFACE IMPORTED)
            add_library(Qt::Gui     INTERFACE IMPORTED)
            add_library(Qt::Widgets INTERFACE IMPORTED)
            add_library(Qt::Test    INTERFACE IMPORTED)
            set_target_properties(Qt::Core    PROPERTIES INTERFACE_LINK_LIBRARIES Qt4::QtCore)
            set_target_properties(Qt::Gui     PROPERTIES INTERFACE_LINK_LIBRARIES Qt4::QtGui )
            set_target_properties(Qt::Widgets PROPERTIES INTERFACE_LINK_LIBRARIES Qt4::QtGui )
            set_target_properties(Qt::Test    PROPERTIES INTERFACE_LINK_LIBRARIES Qt4::QtTest)
            include(${QT_USE_FILE})
        endif()
    endif()
endif()

#
# Valgrind
#

if(CUKE_TESTS_VALGRIND)
    find_package(Valgrind REQUIRED)
    set(VALGRIND_ARGS --error-exitcode=2 --leak-check=full --undef-value-errors=no)
    if(NOT VALGRIND_VERSION_STRING VERSION_LESS 3.9)
        # Valgrind 3.9 no longer shows all leaks unless asked to
        list(APPEND VALGRIND_ARGS --show-leak-kinds=all)
    endif()
    function(add_test name)
        if(NOT name STREQUAL ""NAME"")
            _add_test(${VALGRIND_EXECUTABLE} ${VALGRIND_ARGS} ${ARGV})
            return()
        endif()

        set(TEST_ARGS ${ARGV})
        list(FIND TEST_ARGS COMMAND COMMAND_IDX)
        if(COMMAND_IDX EQUAL -1)
            message(AUTHOR_WARNING ""Weird command-line given to add_test(), not injecting valgrind"")
            _add_test(${ARGV})
            return()
        endif()

        # We want to operate on the COMMAND, not the 'COMMAND' keyword preceding it
        math(EXPR COMMAND_IDX ""${COMMAND_IDX} + 1"")

        # Keep add_test() behaviour of replacing COMMANDs, when executable targets, with their output files
        list(GET TEST_ARGS ${COMMAND_IDX} COMMAND)
        if(TARGET ${COMMAND})
            get_target_property(COMMAND_TYPE ${COMMAND} TYPE)
            if(COMMAND_TYPE STREQUAL ""EXECUTABLE"")
                # Inserting first, removing the original only after that, because inserting to the end of the list doesn't work
                math(EXPR ORIG_COMMAND_IDX ""${COMMAND_IDX} + 1"")
                list(INSERT TEST_ARGS ${COMMAND_IDX} ""$<TARGET_FILE:${COMMAND}>"")
                list(REMOVE_AT TEST_ARGS ${ORIG_COMMAND_IDX})
            endif()
        endif()

        # Insert the valgrind command line, before the command to execute
        list(INSERT TEST_ARGS ${COMMAND_IDX} ${VALGRIND_EXECUTABLE} ${VALGRIND_ARGS})

        _add_test(${TEST_ARGS})
    endfunction()
endif()

#
# Cucumber-Cpp
#

set(CUKE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
add_subdirectory(3rdparty/json_spirit)
add_subdirectory(src)

#
# Tests
#

if(CUKE_TESTS_UNIT)
    enable_testing()
    add_subdirectory(tests)
else()
    message(STATUS ""Skipping unit tests"")
endif()

if(NOT CUKE_TESTS_E2E)
    message(STATUS ""Skipping end-to-end tests"")
else()
    find_program(CUCUMBER_RUBY cucumber)
    if(CUCUMBER_RUBY)
        message(STATUS ""Found Cucumber"")
        set(CUKE_FEATURES_DIR ""${CMAKE_SOURCE_DIR}/features"")
        set(CUKE_FEATURES_TMP ""${CMAKE_BINARY_DIR}/tmp"")
        set(CUKE_TEST_FEATURES_DIR ""${CUKE_FEATURES_TMP}/test_features"")
        set(CUKE_DYNAMIC_CPP_STEPS ""${CUKE_TEST_FEATURES_DIR}/step_definitions/cpp_steps.cpp"")
        string(REPLACE ""/tmp"" ""${CMAKE_FILES_DIRECTORY}/e2e-steps.dir/tmp"" CUKE_DYNAMIC_CPP_STEPS_OBJ ""${CUKE_DYNAMIC_CPP_STEPS}${CMAKE_CXX_OUTPUT_EXTENSION}"")

        add_executable(e2e-steps EXCLUDE_FROM_ALL ${CUKE_DYNAMIC_CPP_STEPS})
        # Mark this file as generated so it isn't required at CMake generation time (it is necessary when the target gets built though)
        set_source_files_properties(${CUKE_DYNAMIC_CPP_STEPS} PROPERTIES GENERATED TRUE)
        target_link_libraries(e2e-steps PRIVATE cucumber-cpp)
        #Boost test lib required for boost specific scenario ""Predicate Message""
        if(TARGET Boost::unit_test_framework)
            target_link_libraries(e2e-steps PRIVATE Boost::unit_test_framework)
        else()
            set(CUKE_E2E_TAGS ""--tags ~@boost"")
        endif()

        set(CUKE_COMPILE_DYNAMIC_CPP_STEPS '""${CMAKE_COMMAND}"" --build ""${CMAKE_BINARY_DIR}"" --target e2e-steps')

        function(add_feature_target TARGET_NAME)
            # Ensure we get colored output from cucumber and give it direct terminal access if
            # possible. Direct terminal access would cause the output to be displayed as it's being
            # produced instead of when cucumber is finished.
            if(CMAKE_GENERATOR STREQUAL ""Ninja"")
                list(APPEND ARGN --color)
            endif()
            set(USES_TERMINAL)
            if(NOT CMAKE_VERSION VERSION_LESS 3.2)
                set(USES_TERMINAL USES_TERMINAL)
            endif()
            add_custom_target(${TARGET_NAME}
                COMMAND ${CUCUMBER_RUBY}
                TEST_FEATURES_DIR=${CUKE_TEST_FEATURES_DIR}
                TMP_DIR=${CUKE_FEATURES_TMP}
                DYNAMIC_CPP_STEPS_SRC=${CUKE_DYNAMIC_CPP_STEPS}
                DYNAMIC_CPP_STEPS_EXE=${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/e2e-steps
                DYNAMIC_CPP_STEPS_OBJ=${CUKE_DYNAMIC_CPP_STEPS_OBJ}
                COMPILE_DYNAMIC_CPP_STEPS=${CUKE_COMPILE_DYNAMIC_CPP_STEPS}
                CUCUMBER_RUBY=${CUCUMBER_RUBY}
                --format=junit ""--out=${CMAKE_BINARY_DIR}/features""
                ${CUKE_E2E_TAGS}
                ${ARGN}
                ${CUKE_FEATURES_DIR}
                ${USES_TERMINAL}
                # Execute in same directory as where DLLs appear on Windows
                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src
                )
        endfunction(add_feature_target)

        add_feature_target(features         --format progress)
        add_feature_target(features-pretty  --format pretty)
        add_feature_target(features-wip     --format pretty --tags @wip)

    else()
        message(WARNING ""Could not find Cucumber: skipping end-to-end tests"")
    endif()

endif()

#
# Examples
#

if(CUKE_ENABLE_EXAMPLES)
    add_subdirectory(examples)
endif()
",3.1,3.1
9744,cglosser,QuEST,False,False,False,False,False,2,C++,2019-10-03 20:54:15+00:00,2015-06-12 12:12:27+00:00,2,409,"cmake_minimum_required(VERSION 3.1)
project(QuEST VERSION 0.1 LANGUAGES CXX)

# Location of custom detection scripts
set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/modules"")

# Set RELEASE as default build type
if (NOT CMAKE_BUILD_TYPE)
  set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
      ""Choose the type of build, options are: None Debug Release.""
      FORCE)
endif (NOT CMAKE_BUILD_TYPE)

# Enable warning flags if available
include(""${PROJECT_SOURCE_DIR}/cmake/flag_check.cmake"")
enable_cxx_compiler_flag_if_supported(""-Wall"")
enable_cxx_compiler_flag_if_supported(""-Wextra"")
enable_cxx_compiler_flag_if_supported(""-fdiagnostics-color=auto"")
enable_cxx_compiler_flag_if_supported(""-pedantic"")

set(CPP_FEATURES cxx_auto_type cxx_constexpr cxx_delegating_constructors cxx_lambdas cxx_range_for cxx_strong_enums)

add_library(libquest """")
target_compile_features(libquest PRIVATE ${CPP_FEATURES})

find_package(Eigen3 3.2.2 REQUIRED)
target_include_directories(libquest PUBLIC ${EIGEN3_INCLUDE_DIR})

find_package(Boost 1.55 COMPONENTS program_options REQUIRED)
target_include_directories(libquest PUBLIC ${Boost_INCLUDE_DIR})

include(""${PROJECT_SOURCE_DIR}/cmake/set_git_hash.cmake"")
set_git_macros(libquest)

include(src/CMakeLists.txt)
include(test/CMakeLists.txt)
include(tools/CMakeLists.txt)
",3.1,3.1
9858,lxde,lxqt-admin,False,False,False,False,False,82,C++,2020-04-24 17:00:32+00:00,2014-05-21 01:57:49+00:00,15,419,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-admin)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

# Set default installation paths
set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}"" CACHE PATH ""Installation path for libraries"")

# Minimum Versions
set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(PolkitQt5-1 REQUIRED)

# Patch Version
set(LXQT_ADMIN_PATCH_VERSION 0)

set(LXQT_ADMIN_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_ADMIN_PATCH_VERSION})
add_definitions(
    ""-DLXQT_ADMIN_VERSION=\""${LXQT_ADMIN_VERSION}\""""
)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)
include(LXQtTranslate)

if(${CMAKE_SYSTEM_NAME} MATCHES ""OpenBSD"" OR ${CMAKE_SYSTEM_NAME} MATCHES ""NetBSD"")
    add_subdirectory(lxqt-admin-user)
    message(WARNING ""${CMAKE_SYSTEM_NAME} is not supported by lxqt-admin-time"")
else()
    add_subdirectory(lxqt-admin-user)
    add_subdirectory(lxqt-admin-time)
endif()
",3.1.0,3.1
9876,chemfiles,chrp,False,False,False,False,False,4,C++,2020-02-20 13:03:07+00:00,2015-06-19 14:41:20+00:00,8,268,"cmake_minimum_required(VERSION 3.1)

project(cfiles C CXX)
set(CMAKE_CXX_STANDARD 11)
set(CXX_STANDARD_REQUIRED ON)

option(BUILD_SHARED_LIBS ""Build shared libraries instead of static ones"" OFF)
option(CFILES_USE_FFTW3 ""Use FFTW3 for FFT, instead of the bundled KissFFT"" OFF)

# Set a default build type if none was specified
if (${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    if(""${CMAKE_BUILD_TYPE}"" STREQUAL """" AND ""${CMAKE_CONFIGURATION_TYPES}"" STREQUAL """")
        message(STATUS ""Setting build type to 'release' as none was specified."")
        set(CMAKE_BUILD_TYPE ""release""
            CACHE STRING
            ""Choose the type of build, options are: none(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) debug release relwithdebinfo minsizerel.""
        FORCE)
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS release debug relwithdebuginfo minsizerel none)
    endif()
endif()

if(EXISTS ""${PROJECT_SOURCE_DIR}/chemfiles/CMakeLists.txt"")
    add_subdirectory(chemfiles)
else()
    message(FATAL_ERROR ""Missing the chemfiles library. Please run `git submodule update --init`."")
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

find_package(Git QUIET)
set(CFILES_VERSION 0.1.0)

file(WRITE ${CMAKE_BINARY_DIR}/version.hpp.in
""\#define CFILES_VERSION \""\${CFILES_VERSION}\""\n""
)
file(WRITE ${CMAKE_BINARY_DIR}/version.cmake
""
cmake_policy(SET CMP0012 NEW)
set(CFILES_VERSION ${CFILES_VERSION})
if(${GIT_FOUND})
    execute_process(
        COMMAND ${GIT_EXECUTABLE} describe --tags --always --dirty
        OUTPUT_VARIABLE GIT_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (NOT \""\${GIT_VERSION}\"" STREQUAL \""${CFILES_VERSION}\"")
        set(CFILES_VERSION ${CFILES_VERSION}-\${GIT_VERSION})
    endif()
endif()
configure_file(\${SRC} \${DST})
"")

add_custom_target(version
    ${CMAKE_COMMAND} -D SRC=${CMAKE_BINARY_DIR}/version.hpp.in
                     -D DST=${CMAKE_BINARY_DIR}/version.hpp
                     -P ${CMAKE_BINARY_DIR}/version.cmake
)


add_library(docopt OBJECT external/docopt/docopt.cpp)
target_include_directories(docopt PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/external)

add_library(eigen INTERFACE)
target_include_directories(eigen INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/external)
target_compile_definitions(eigen INTERFACE -DEIGEN_MPL2_ONLY)

if (${CFILES_USE_FFTW3})
    set(KISSFTT_OBJECTS """")
else()
    add_library(kissfft OBJECT external/kissfft/kiss_fft.c external/kissfft/tools/kiss_fftr.c)
    target_include_directories(kissfft PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft/tools
    )
    set(KISSFTT_OBJECTS $<TARGET_OBJECTS:kissfft>)
endif()

file(GLOB_RECURSE sources ${CMAKE_CURRENT_SOURCE_DIR}/src/**.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)

add_library(libcfiles
    ${sources}
    ${KISSFTT_OBJECTS}
    $<TARGET_OBJECTS:docopt>
    $<TARGET_OBJECTS:fmt>
)
set_target_properties(libcfiles PROPERTIES OUTPUT_NAME cfiles)

target_include_directories(libcfiles
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        ${CMAKE_CURRENT_BINARY_DIR}/
    PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}/chemfiles/external/fmt/include
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft
        ${CMAKE_CURRENT_SOURCE_DIR}/external/kissfft/tools
)

target_link_libraries(libcfiles eigen chemfiles)

if (NOT DEFINED STD_REGEX_WORKS)
    include(CompilerFlags)
    try_compile(STD_REGEX_WORKS
        ${PROJECT_BINARY_DIR}
        ${PROJECT_SOURCE_DIR}/cmake/check_std_regex.cpp
    )
endif()

if(NOT ${STD_REGEX_WORKS})
    message(STATUS ""Using Boost.Regex instead of std::regex"")
    find_package(Boost 1.53 REQUIRED COMPONENTS regex)
    target_include_directories(docopt PUBLIC ${Boost_INCLUDE_DIRS})
    target_compile_definitions(docopt PRIVATE ""-DDOCTOPT_USE_BOOST_REGEX"")
    target_link_libraries(libcfiles ${Boost_LIBRARIES})
endif()

if (${CFILES_USE_FFTW3})
    find_package(FFTW REQUIRED COMPONENTS FLOAT_LIB)
    target_link_libraries(libcfiles ${FFTW_FLOAT_LIB})
    target_include_directories(libcfiles PRIVATE ${FFTW_INCLUDE_DIRS})
    target_compile_definitions(libcfiles PRIVATE -DCFILES_USE_FFTW3)
else()
    find_package(FFTW QUIET)
    if(${FFTW_FOUND})
        message(STATUS ""Found FFTW3, consider enabling it with CFILES_USE_FFTW3 for faster FFT"")
    endif()
endif()

add_dependencies(libcfiles version)

add_executable(cfiles src/main.cpp)
target_link_libraries(cfiles libcfiles)

install(TARGETS cfiles DESTINATION bin)

if(CHFL_CODE_COVERAGE)
    # Code coverage should use gcc
    if(NOT CMAKE_COMPILER_IS_GNUCXX)
        message(FATAL_ERROR ""Code coverage can only be used with GCC"")
    endif()
    set(CMAKE_BUILD_TYPE ""debug"" CACHE STRING ""Type of build: release|debug|relwithdebuginfo"" FORCE)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage"")
endif()

enable_testing()
add_subdirectory(tests)
",3.1,3.1
10051,urho3d,Urho3D,False,False,False,False,False,138,C++,2020-05-12 17:57:59+00:00,2013-10-02 08:55:35+00:00,3174,9768,"#
# Copyright (c) 2008-2020 the Urho3D project.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# Set CMake minimum version
cmake_minimum_required (VERSION 3.10.2)

# Set project name
project (Urho3D)

# Set CMake modules search path
set (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake/Modules)

# Include UrhoCommon.cmake module after setting project name
include (UrhoCommon)

# Setup SDK install destinations
set (PATH_SUFFIX Urho3D)
if (WIN32)
    set (SCRIPT_EXT .bat)
    if (CMAKE_HOST_WIN32)
        set (PATH_SUFFIX .)
    endif ()
else ()
    set (SCRIPT_EXT .sh)
endif ()
if (URHO3D_64BIT)
    # Install to 'lib64' when one of these conditions is true
    if ((MINGW AND CMAKE_CROSSCOMPILING) OR URHO3D_USE_LIB64_RPM OR (HAS_LIB64 AND NOT URHO3D_USE_LIB_DEB))
        set (LIB_SUFFIX 64)
    endif ()
endif ()
set (DEST_INCLUDE_DIR include/Urho3D)    # The include directory path contains the 'Urho3D' suffix regardless of PATH_SUFFIX variable
set (DEST_SHARE_DIR share/${PATH_SUFFIX})
set (DEST_BUNDLE_DIR ${DEST_SHARE_DIR}/Applications)
# Note to package maintainer: ${PATH_SUFFIX} for library could be removed if the extra path is not desired, but if so then the RPATH setting in Source's CMakeLists.txt needs to be adjusted accordingly
set (DEST_LIBRARY_DIR lib${LIB_SUFFIX}/${PATH_SUFFIX})
set (DEST_PKGCONFIG_DIR lib${LIB_SUFFIX}/pkgconfig)
# Install application launcher scripts
file (GLOB APP_SCRIPTS ${CMAKE_SOURCE_DIR}/bin/*${SCRIPT_EXT})
install (PROGRAMS ${APP_SCRIPTS} DESTINATION ${DEST_RUNTIME_DIR})   # DEST_RUNTIME_DIR variable is set by the set_output_directories() macro call in the UrhoCommon module
# Install CMake modules and toolchains provided by and for Urho3D
install (DIRECTORY ${CMAKE_SOURCE_DIR}/CMake/ DESTINATION ${DEST_SHARE_DIR}/CMake)    # Note: the trailing slash is significant
# Install CMake build scripts
file (GLOB CMAKE_SCRIPTS ${CMAKE_SOURCE_DIR}/script/*${SCRIPT_EXT})
install (PROGRAMS ${CMAKE_SCRIPTS} DESTINATION ${DEST_SHARE_DIR}/Scripts)

# Setup package variables
set (URHO3D_DESCRIPTION ""Urho3D is a free lightweight, cross-platform 2D and 3D game engine implemented in C++ and released under the MIT license. Greatly inspired by OGRE (http://www.ogre3d.org) and Horde3D (http://www.horde3d.org)."")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY ${URHO3D_DESCRIPTION})
set (URHO3D_URL ""https://github.com/urho3d/Urho3D"")
set (CPACK_PACKAGE_VENDOR ${URHO3D_URL})
set (CPACK_PACKAGE_CONTACT ${URHO3D_URL})
execute_process (COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/CMake/Modules/GetUrhoRevision.cmake WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} OUTPUT_VARIABLE URHO3D_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
set (CPACK_PACKAGE_VERSION ${URHO3D_VERSION})
string (REGEX MATCH ""([^.]+)\\.([^.]+)\\.(.+)"" MATCHED ${URHO3D_VERSION})
if (MATCHED)
    set (CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})
    set (CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})
    set (CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})
endif ()
set (CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/LICENSE)
set (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
set (CPACK_GENERATOR TGZ)
if (ANDROID)
    set (CPACK_SYSTEM_NAME Android)
elseif (IOS)
    set (CPACK_SYSTEM_NAME iOS)
elseif (TVOS)
    set (CPACK_SYSTEM_NAME tvOS)
elseif (APPLE)
    set (CPACK_SYSTEM_NAME macOS)
elseif (WIN32)
    if (MINGW)
        set (CPACK_SYSTEM_NAME MinGW)   # MinGW implies Windows platform
    endif ()
    if (CMAKE_HOST_WIN32)
        set (CPACK_GENERATOR ZIP)       # Differentiate artifacts generated from Windows host system
    endif ()
elseif (WEB)
    set (CPACK_SYSTEM_NAME Web)
elseif (CPACK_SYSTEM_NAME STREQUAL Linux)
    if (RPI)
        set (CPACK_SYSTEM_NAME Raspberry-Pi)
        set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)
    elseif (ARM)
        set (CPACK_SYSTEM_NAME ARM)     # Generic ARM
        if (URHO3D_64BIT)
            set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE arm64)
        else ()
            set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)
        endif ()
    elseif (NOT URHO3D_64BIT)
        set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)
        set (CPACK_RPM_PACKAGE_ARCHITECTURE i686)       # The 'package' target should be built with the help of 'setarch i686' command on a 64-bit host system
    endif ()
    # TODO: Temporary disable RPM and DEB package generation for CI as it has run out of disk space for a few of the target platforms.
    if (NOT DEFINED ENV{CI})
        if (NOT URHO3D_64BIT OR HAS_LIB64)
            list (APPEND CPACK_GENERATOR RPM)
        endif ()
        if (NOT URHO3D_64BIT OR NOT HAS_LIB64)
            list (APPEND CPACK_GENERATOR DEB)
        endif ()
        if (URHO3D_64BIT)
            if (URHO3D_USE_LIB64_RPM AND NOT HAS_LIB64)
                set (CPACK_GENERATOR RPM)
            elseif (URHO3D_USE_LIB_DEB AND HAS_LIB64)
                set (CPACK_GENERATOR DEB)
            endif ()
        endif ()
    endif ()
endif ()
if (URHO3D_64BIT)
    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-64bit)
endif ()
set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-${URHO3D_LIB_TYPE})
if (WIN32 AND NOT URHO3D_OPENGL)
    if (URHO3D_D3D11)
        set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-3D11)   # The artifact name has a space constraint on our website when viewed in a mobile browser, 3D11 stands for Direct3D 11
    else ()
        set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-3D9)
    endif ()
elseif (ANDROID)
    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-${ANDROID_ABI})
elseif (RPI AND RPI_ABI MATCHES ^armeabi-v7a)
    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-v7a)
elseif (ARM_ABI_FLAGS)
    string (REGEX REPLACE ""^.*mcpu=([^ ]+).*$"" -\\1 CPU_NAME ""${ARM_ABI_FLAGS}"")
    string (REGEX REPLACE .*- - CPU_NAME ""${CPU_NAME}"")
    string (TOUPPER ""${CPU_NAME}"" CPU_NAME)
    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}${CPU_NAME})
endif ()
if (NOT DEFINED ENV{RELEASE_TAG})
    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-snapshot)
endif ()
include (CPack)

# Setup macOS, iOS, and tvOS bundle variables
if (URHO3D_MACOSX_BUNDLE OR (APPLE AND ARM))
    if (NOT MACOSX_BUNDLE_ICON_FILE)
        set (MACOSX_BUNDLE_ICON_FILE UrhoIcon)
    endif ()
    if (NOT MACOSX_BUNDLE_BUNDLE_VERSION)
        set (MACOSX_BUNDLE_BUNDLE_VERSION ${URHO3D_VERSION})
    endif ()
    if (NOT MACOSX_BUNDLE_LONG_VERSION_STRING)
        set (MACOSX_BUNDLE_LONG_VERSION_STRING ${URHO3D_VERSION})
    endif ()
    if (NOT MACOSX_BUNDLE_SHORT_VERSION_STRING)
        set (MACOSX_BUNDLE_SHORT_VERSION_STRING ${URHO3D_VERSION})
    endif ()
    if (NOT MACOSX_BUNDLE_COPYRIGHT)
        set (MACOSX_BUNDLE_COPYRIGHT ""Copyright (c) 2008-2020 the Urho3D project."")
    endif ()
endif ()

# Setup SDK-like include dir in the build tree for building the Urho3D library
if (ANDROID AND GRADLE_BUILD_DIR)
    set (THIRD_PARTY_INCLUDE_DIR ${GRADLE_BUILD_DIR}/tree/${CMAKE_BUILD_TYPE}/${ANDROID_ABI}/${DEST_INCLUDE_DIR}/ThirdParty)
else ()
    set (THIRD_PARTY_INCLUDE_DIR ${CMAKE_BINARY_DIR}/${DEST_INCLUDE_DIR}/ThirdParty)
endif ()
file (MAKE_DIRECTORY ${THIRD_PARTY_INCLUDE_DIR})

# Urho3D source
add_subdirectory (Source)

# Urho3D documentation
add_subdirectory (Docs)
",3.10.2,3.1
10070,TelepathyIM,telepathy-morse,False,False,False,False,False,14,C++,2020-05-10 17:07:01+00:00,2014-06-08 18:04:19+00:00,52,287,"cmake_minimum_required(VERSION 3.1)

project(TelepathyMorse
    VERSION 0.2.0
    LANGUAGES CXX
)

set(OVERRIDE_CXX_STANDARD 11 CACHE STRING ""Compile with custom C++ standard version"")
option(BUILD_QML_IMPORT ""Enable compilation of qml import plugin"" FALSE)

set(CMAKE_CXX_STANDARD ${OVERRIDE_CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(Qt5 REQUIRED COMPONENTS Core DBus Xml Network)
find_package(TelegramQt5 REQUIRED)
find_package(TelepathyQt5 0.9.6 REQUIRED)
find_package(TelepathyQt5Service 0.9.6 REQUIRED)
set(TELEPATHY_QT_VERSION ${TELEPATHY_QT5_VERSION})

include(GNUInstallDirs)
include(FeatureSummary)

add_executable(telepathy-morse main.cpp)

target_sources(telepathy-morse PRIVATE
    main.cpp
    connection.cpp
    connection.hpp
    datastorage.cpp
    datastorage.hpp
    protocol.cpp
    protocol.hpp
    textchannel.cpp
    textchannel.hpp
)

if (NOT BUILD_VERSION)
    find_package(Git QUIET)
    if(GIT_FOUND AND EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/.git"")
        execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
            WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}""
            OUTPUT_VARIABLE BUILD_VERSION
            ERROR_QUIET
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
    else()
        set(BUILD_VERSION ""unknown"")
    endif()
endif()

set(MORSE_BUILD_VERSION ${BUILD_VERSION})

set_target_properties(telepathy-morse
    PROPERTIES
        AUTOMOC TRUE
)

configure_file(version.cpp.in ""${CMAKE_CURRENT_BINARY_DIR}/version.cpp"" @ONLY)

add_library(MorseInfo STATIC
    info.cpp
    info.hpp
    ""${CMAKE_CURRENT_BINARY_DIR}/version.cpp""
)

target_include_directories(MorseInfo PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(MorseInfo PUBLIC
    Qt5::Core
)

set_target_properties(MorseInfo
    PROPERTIES
        AUTOMOC TRUE
)

if (TELEPATHY_QT_VERSION VERSION_LESS ""0.9.7"")
    message(WARNING ""TelepathyQt version < 0.9.7, so group chat and debug interface support will be disabled."")
else()
    set(ENABLE_GROUP_CHAT TRUE)
    set(ENABLE_DEBUG_IFACE TRUE)
endif()

if (ENABLE_DEBUG_IFACE)
    target_compile_definitions(telepathy-morse PRIVATE
        ENABLE_DEBUG_IFACE
    )
    target_sources(telepathy-morse PRIVATE
        debug.cpp
        debug.hpp
    )
endif()

if (ENABLE_GROUP_CHAT)
    target_compile_definitions(telepathy-morse PRIVATE
        ENABLE_GROUP_CHAT
    )

    if (TELEPATHY_QT_VERSION VERSION_LESS ""0.9.8"")
        target_compile_definitions(telepathy-morse PRIVATE
            USE_BUNDLED_GROUPS_IFACE
        )
        target_sources(telepathy-morse PRIVATE
            contactgroups.cpp
            contactgroups.hpp
        )
        set(USE_BUNDLED_GROUPS_IFACE TRUE)
    endif()
endif()

target_include_directories(telepathy-morse PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${TELEPATHY_QT5_INCLUDE_DIR}
)

target_link_libraries(telepathy-morse
    Qt5::Core
    Qt5::DBus
    Qt5::Network
    ${TELEPATHY_QT5_LIBRARIES}
    ${TELEPATHY_QT5_SERVICE_LIBRARIES}
    TelegramQt5::Core
    MorseInfo
)

target_compile_definitions(telepathy-morse PRIVATE
    QT_NO_CAST_FROM_BYTEARRAY
    QT_NO_CAST_TO_ASCII
    QT_NO_URL_CAST_FROM_STRING
    QT_RESTRICTED_CAST_FROM_ASCII
    QT_STRICT_ITERATORS
)

configure_file(dbus-service.in org.freedesktop.Telepathy.ConnectionManager.morse.service)

if(BUILD_QML_IMPORT)
    add_subdirectory(imports/Morse)
endif()

install(
    TARGETS telepathy-morse
    DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}
)

install(
    FILES morse.manager
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/telepathy/managers
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/org.freedesktop.Telepathy.ConnectionManager.morse.service
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/dbus-1/services
)

#install(
#    FILES morse.png
#    DESTINATION share/icons/hicolor/48x48/apps
#)

message(STATUS ""${PROJECT_NAME} configuration:"")
message(STATUS ""  Build type: ${CMAKE_BUILD_TYPE}"")
message(STATUS ""  Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}"")
message(STATUS ""  Qt: ${Qt5_VERSION} at ${_qt5Core_install_prefix}"")

feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1,3.1
10094,bjornbytes,lovr,False,False,False,False,False,15,C,2020-05-15 21:01:20+00:00,2016-07-03 23:36:45+00:00,602,2930,"cmake_minimum_required(VERSION 3.1.0)
cmake_policy(SET CMP0063 NEW)
project(lovr)

# Options
option(LOVR_ENABLE_AUDIO ""Enable the audio module"" ON)
option(LOVR_ENABLE_DATA ""Enable the data module"" ON)
option(LOVR_ENABLE_EVENT ""Enable the event module"" ON)
option(LOVR_ENABLE_FILESYSTEM ""Enable the filesystem module"" ON)
option(LOVR_ENABLE_GRAPHICS ""Enable the graphics module"" ON)
option(LOVR_ENABLE_HEADSET ""Enable the headset module"" ON)
option(LOVR_ENABLE_MATH ""Enable the math module"" ON)
option(LOVR_ENABLE_PHYSICS ""Enable the physics module"" ON)
option(LOVR_ENABLE_THREAD ""Enable the thread module"" ON)
option(LOVR_ENABLE_TIMER ""Enable the timer module"" ON)

option(LOVR_ENABLE_ENET ""Bundle with lua-enet"" ON)
option(LOVR_ENABLE_JSON ""Bundle with lua-cjson"" ON)

option(LOVR_USE_LUAJIT ""Use LuaJIT instead of Lua"" ON)
option(LOVR_USE_OPENVR ""Enable the OpenVR backend for the headset module"" ON)
option(LOVR_USE_OPENXR ""Enable the OpenXR backend for the headset module"" OFF)
option(LOVR_USE_WEBVR ""Enable the WebVR backend for the headset module"" OFF)
option(LOVR_USE_WEBXR ""Enable the WebXR backend for the headset module"" OFF)
option(LOVR_USE_OCULUS ""Enable the LibOVR backend for the headset module (be sure to also set LOVR_OCULUS_PATH to point to the Oculus SDK)"" OFF)
option(LOVR_USE_OCULUS_MOBILE ""Enable the Oculus Mobile (Android) backend for the headset module"" OFF)
option(LOVR_USE_DESKTOP_HEADSET ""Enable the keyboard/mouse backend for the headset module"" ON)
option(LOVR_USE_LEAP ""Enable the Leap Motion backend for the headset module"" OFF)

option(LOVR_SYSTEM_ENET ""Use the system-provided enet"" OFF)
option(LOVR_SYSTEM_GLFW ""Use the system-provided glfw"" OFF)
option(LOVR_SYSTEM_LUA ""Use the system-provided Lua"" OFF)
option(LOVR_SYSTEM_ODE ""Use the system-provided ODE"" OFF)
option(LOVR_SYSTEM_OPENAL ""Use the system-provided OpenAL"" OFF)

option(LOVR_BUILD_EXE ""Build an executable"" ON)
option(LOVR_BUILD_SHARED ""Build a shared library (takes precedence over LOVR_BUILD_EXE)"" OFF)
option(LOVR_BUILD_BUNDLE ""On macOS, build a .app bundle instead of a raw program"" OFF)

option(LOVR_USE_THREADLOCAL ""Allow use of thread local storage; disable to run on Windows XP as a DLL"" ON)

# Setup
if(EMSCRIPTEN)
  string(CONCAT LOVR_EMSCRIPTEN_FLAGS
    ""-Os ""
    ""-s USE_GLFW=3 ""
    ""-s USE_WEBGL2=1 ""
    ""-s GL_PREINITIALIZED_CONTEXT=1 ""
    ""-s FULL_ES2=1 ""
    ""-s FULL_ES3=1 ""
    ""-s FORCE_FILESYSTEM=1 ""
    ""-s \""EXPORTED_FUNCTIONS=[ ""
      ""'_main','_lovrDestroy',""
      ""'_lovrCanvasCreateFromHandle',""
      ""'_lovrGraphicsSetCamera',""
      ""'_webvr_onAnimationFrame',""
      ""'_mat4_set','_mat4_identity','_mat4_invert','_mat4_multiply','_mat4_rotateQuat','_mat4_transform','_mat4_transformDirection',""
      ""'_quat_fromMat4','_quat_getAngleAxis'""
    ""]\"" ""
    ""-s \""EXTRA_EXPORTED_RUNTIME_METHODS=['getValue','setValue']\"" ""
    ""--js-library \""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/webvr.js\"" ""
    ""--js-library \""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/webxr.js\"" ""
    ""--shell-file \""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/lovr.html\""""
  )
  if(LOVR_ENABLE_THREAD)
    set(LOVR_EMSCRIPTEN_FLAGS ""${LOVR_EMSCRIPTEN_FLAGS} -s USE_PTHREADS=1"")
  endif()
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${LOVR_EMSCRIPTEN_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${LOVR_EMSCRIPTEN_FLAGS}"")
  set(CMAKE_EXECUTABLE_SUFFIX "".html"")
  set(LOVR_USE_WEBVR ON)
  set(LOVR_USE_WEBXR ON)
  set(LOVR_USE_OPENVR OFF)
  set(LOVR_USE_OCULUS OFF)
elseif(ANDROID)
  set(LOVR_USE_OPENVR OFF)
  set(LOVR_USE_OCULUS OFF)
  set(LOVR_USE_DESKTOP_HEADSET OFF)
  set(LOVR_USE_OCULUS_MOBILE ON)
  set(LOVR_BUILD_SHARED ON) # Android has only ""activities""
elseif(UNIX)
  find_package(PkgConfig)
  if(NOT APPLE)
    set(CMAKE_SKIP_RPATH OFF)
  endif()
endif()

# enet
if(LOVR_ENABLE_ENET)
  if(LOVR_SYSTEM_ENET)
    pkg_search_module(ENET REQUIRED enet)
    include_directories(${ENET_INCLUDE_DIRS})
    set(LOVR_ENET ${ENET_LIBRARIES})
  else()
    if(EMSCRIPTEN)
      set(HAVE_HAS_SOCKLEN_T TRUE CACHE BOOL """")
    endif()
    add_subdirectory(deps/enet enet)
    include_directories(deps/enet/include)
    set(LOVR_ENET enet)
    if(WIN32)
      set(LOVR_ENET ${LOVR_ENET} ws2_32 winmm)
    endif()
    if(EMSCRIPTEN)
      target_compile_definitions(enet PRIVATE __APPLE__)
    endif()
  endif()
endif()

# GLFW
if(NOT (EMSCRIPTEN OR ANDROID))
  if(LOVR_SYSTEM_GLFW)
    pkg_search_module(GLFW REQUIRED glfw3)
    include_directories(${GLFW_INCLUDE_DIRS})
    set(LOVR_GLFW ${GLFW_LIBRARIES})
  else()
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL """")
    set(GLFW_BUILD_TESTS OFF CACHE BOOL """")
    set(GLFW_BUILD_DOCS OFF CACHE BOOL """")
    set(BUILD_SHARED_LIBS ON CACHE BOOL """")
    add_subdirectory(deps/glfw glfw)
    include_directories(deps/glfw/include)
    set(LOVR_GLFW glfw ${GLFW_LIBRARIES})
  endif()
  unset(LIB_SUFFIX CACHE)
endif()

# Lua
if(LOVR_USE_LUAJIT AND NOT EMSCRIPTEN)
  if (APPLE)
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pagezero_size 10000 -image_base 100000000"")
  endif()
  if(LOVR_SYSTEM_LUA)
    pkg_search_module(LUAJIT REQUIRED luajit)
    include_directories(${LUAJIT_INCLUDE_DIRS})
    set(LOVR_LUA ${LUAJIT_LIBRARIES})
  else()
    add_subdirectory(deps/luajit luajit)
    include_directories(deps/luajit/src ${CMAKE_BINARY_DIR}/luajit)
    set(LOVR_LUA libluajit)
  endif()
else()
  if(EMSCRIPTEN)
    option(LUA_USE_RELATIVE_LOADLIB OFF)
    option(LUA_USE_ULONGJMP OFF)
    option(LUA_USE_POPEN OFF)
  endif()
  if(LOVR_SYSTEM_LUA)
    pkg_search_module(LUA REQUIRED lua)
    include_directories(${LUA_INCLUDE_DIRS})
    set(LOVR_LUA ${LUA_LIBRARIES})
  else()
    add_subdirectory(deps/lua lua)
    include_directories(deps/lua/src ${CMAKE_BINARY_DIR}/lua)
    set(LOVR_LUA liblua_static)
    set_target_properties(lua luac PROPERTIES EXCLUDE_FROM_ALL 1)
  endif()
endif()

# MSDF
if(LOVR_ENABLE_DATA)
  add_subdirectory(deps/msdfgen lib_msdfgen)
  include_directories(deps/msdfgen)
  set(LOVR_MSDF lib_msdfgen)
  if(APPLE)
    set_target_properties(lib_msdfgen PROPERTIES MACOSX_RPATH ON)
  endif()
endif()

# ODE
if(LOVR_ENABLE_PHYSICS)
  if(LOVR_SYSTEM_ODE)
    pkg_search_module(ODE REQUIRED ode)
    pkg_search_module(CCD REQUIRED ccd)
    include_directories(${ODE_INCLUDE_DIRS} ${CCD_INCLUDE_DIRS})
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -lstdc++"")
    set(LOVR_ODE ode ccd)
  else()
    if(EMSCRIPTEN)
      set(ODE_BUILD_SHARED OFF CACHE BOOL """")
    else()
      set(ODE_BUILD_SHARED ON CACHE BOOL """")
    endif()
    add_subdirectory(deps/ode ode)
    if(NOT WIN32)
      set_target_properties(ode PROPERTIES COMPILE_FLAGS ""-Wno-unused-volatile-lvalue -Wno-array-bounds -Wno-undefined-var-template"")
    endif()
    include_directories(deps/ode/include ""${CMAKE_CURRENT_BINARY_DIR}/ode/include"")
    set(LOVR_ODE ode)
  endif()
endif()

# OpenAL
if(LOVR_ENABLE_AUDIO)
  if(LOVR_SYSTEM_OPENAL)
    pkg_search_module(OPENAL openal-soft)
    if (NOT OPENAL_FOUND)
      pkg_search_module(OPENAL openal)
      if (NOT OPENAL_FOUND)
        message(FATAL_ERROR ""OpenAL not found."")
      endif()
    endif()
    include_directories(${OPENAL_INCLUDE_DIRS})
    string(REPLACE "";"" "" "" OPENAL_LDFLAGS_STR ""${OPENAL_LDFLAGS}"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OPENAL_LDFLAGS_STR}"")
    set(LOVR_OPENAL ${OPENAL_LIBRARIES})
  else()
    set(ALSOFT_UTILS OFF CACHE BOOL """")
    set(ALSOFT_EXAMPLES OFF CACHE BOOL """")
    set(ALSOFT_TESTS OFF CACHE BOOL """")
    if(NOT EMSCRIPTEN)
      add_subdirectory(deps/openal-soft openal)
      set(LOVR_OPENAL OpenAL)
      if(WIN32)
        set_target_properties(OpenAL PROPERTIES COMPILE_FLAGS ""/wd4005 /wd4098"")
      endif()
    endif()
    include_directories(deps/openal-soft/include)
  endif()
endif()

# OpenGL
if(NOT (WIN32 OR EMSCRIPTEN OR ANDROID))
  find_package(OpenGL REQUIRED)
  include_directories(${OPENGL_INCLUDE_DIRS})
  set(LOVR_OPENGL ${OPENGL_LIBRARIES})
endif()

# OpenVR
if(LOVR_ENABLE_HEADSET AND LOVR_USE_OPENVR)
  set(BUILD_SHARED ON CACHE BOOL """")
  set(BUILD_UNIVERSAL OFF CACHE BOOL """")
  include_directories(deps/openvr/headers)
  include_directories(deps/openvr/src)
  include_directories(deps/openvr/src/vrcommon)
  if(WIN32 AND CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(LOVR_OPENVR openvr_api64)
  else()
    set(LOVR_OPENVR openvr_api)
  endif()
  add_subdirectory(deps/openvr)
  set_target_properties(${LOVR_OPENVR} PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/openvr_api""
    RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/openvr_api""
  )
endif()

# OpenXR
# Currently, to use OpenXR, add the OpenXR SDK to the deps folder:
#   git submodule add https://github.com/khronosgroup/openxr-sdk deps/openxr
if(LOVR_ENABLE_HEADSET AND LOVR_USE_OPENXR)
  include_directories(deps/openxr/include)
  add_subdirectory(deps/openxr openxr)
  set(LOVR_OPENXR openxr_loader)
endif()

# Leap Motion
if(LOVR_ENABLE_HEADSET AND LOVR_USE_LEAP)
  if(NOT LOVR_LEAP_PATH)
    message(FATAL_ERROR ""LOVR_USE_LEAP requires the LOVR_LEAP_PATH to be set to the location of the Leap Motion SDK (LeapSDK) folder"")
  endif()
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(LEAP_ARCH ""x64"")
  else()
    set(LEAP_ARCH ""x86"")
  endif()
  add_library(LeapC SHARED IMPORTED)
  include_directories(""${LOVR_LEAP_PATH}/include"")
  set_target_properties(LeapC PROPERTIES IMPORTED_IMPLIB ""${LOVR_LEAP_PATH}/lib/${LEAP_ARCH}/LeapC.lib"")
  set_target_properties(LeapC PROPERTIES IMPORTED_LOCATION ""${LOVR_LEAP_PATH}/lib/${LEAP_ARCH}/LeapC.dll"")
  set(LOVR_LEAP LeapC)
endif()

# Oculus SDK -- expects Oculus SDK 1.26.0 or later
if(LOVR_ENABLE_HEADSET AND LOVR_USE_OCULUS)
  if(NOT LOVR_OCULUS_PATH)
    message(FATAL_ERROR ""LOVR_USE_OCULUS requires the LOVR_OCULUS_PATH to be set to the location of the Oculus Desktop SDK (LibOVR) folder"")
  endif()
  set(OCULUS_BUILD_TYPE ""Release"")
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(OCULUS_ARCH ""x64"")
  else()
    set(OCULUS_ARCH ""Win32"")
  endif()
  include_directories(""${LOVR_OCULUS_PATH}/LibOVR/Include"")
  link_directories(""${LOVR_OCULUS_PATH}/LibOVR/Lib/Windows/${OCULUS_ARCH}/${OCULUS_BUILD_TYPE}/VS2017"")
  set(LOVR_OCULUS LibOVR)
endif()

# pthreads
if(LOVR_ENABLE_THREAD)
  if(NOT WIN32 AND NOT EMSCRIPTEN)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
    set(LOVR_PTHREADS Threads::Threads)
  endif()
  if (LOVR_USE_THREADLOCAL)
    add_definitions(-DUSE_LOVR_STBI_THREADLOCAL)
  endif()
endif()

# LÖVR

# Resources
file(GLOB LOVR_RESOURCES ""src/resources/*.ttf"" ""src/resources/*.json"" ""src/resources/*.lua"")
foreach(path ${LOVR_RESOURCES})

  # Turn the absolute path into a C variable like src_resources_boot_lua
  file(RELATIVE_PATH identifier ${CMAKE_CURRENT_SOURCE_DIR} ${path})
  string(MAKE_C_IDENTIFIER ${identifier} identifier)

  # Read the file and turn the bytes into comma-separated hex literals
  file(READ ${path} data HEX)
  string(REGEX REPLACE ""([0-9a-f][0-9a-f])"" ""0x\\1,"" data ${data})

  # Generate the output filename by adding .h to the input filename
  string(CONCAT output ${path} "".h"")

  # Write some xxd-compatible C code!
  file(WRITE ${output} ""const unsigned char ${identifier}[] = {${data}};\nconst unsigned int ${identifier}_len = sizeof(${identifier});\n"")
endforeach()

set(LOVR_SRC
  src/main.c
  src/core/arr.c
  src/core/fs.c
  src/core/maf.c
  src/core/map.c
  src/core/png.c
  src/core/ref.c
  src/core/utf.c
  src/core/util.c
  src/core/zip.c
  src/api/api.c
  src/api/l_lovr.c
)

if(LOVR_BUILD_SHARED)
  add_library(lovr SHARED ${LOVR_SRC})
elseif(LOVR_BUILD_EXE)
  add_executable(lovr ${LOVR_SRC})
else()
  return()
endif()

set_target_properties(lovr PROPERTIES C_VISIBILITY_PRESET default)
set_target_properties(lovr PROPERTIES C_STANDARD 99)
target_include_directories(lovr PRIVATE src src/modules)
target_link_libraries(lovr
  ${LOVR_ENET}
  ${LOVR_GLFW}
  ${LOVR_LUA}
  ${LOVR_MSDF}
  ${LOVR_ODE}
  ${LOVR_OPENAL}
  ${LOVR_OPENGL}
  ${LOVR_OPENVR}
  ${LOVR_OPENXR}
  ${LOVR_OCULUS}
  ${LOVR_LEAP}
  ${LOVR_PTHREADS}
  ${LOVR_EMSCRIPTEN_FLAGS}
)

if(LOVR_ENABLE_AUDIO)
  add_definitions(-DLOVR_ENABLE_AUDIO)
  target_sources(lovr PRIVATE
    src/modules/audio/audio.c
    src/api/l_audio.c
    src/api/l_audio_source.c
    src/api/l_audio_microphone.c
  )
endif()

if(LOVR_ENABLE_DATA)
  add_definitions(-DLOVR_ENABLE_DATA)
  target_sources(lovr PRIVATE
    src/modules/data/audioStream.c
    src/modules/data/blob.c
    src/modules/data/modelData.c
    src/modules/data/modelData_gltf.c
    src/modules/data/modelData_obj.c
    src/modules/data/rasterizer.c
    src/modules/data/soundData.c
    src/modules/data/textureData.c
    src/api/l_data.c
    src/api/l_data_audioStream.c
    src/api/l_data_blob.c
    src/api/l_data_modelData.c
    src/api/l_data_rasterizer.c
    src/api/l_data_soundData.c
    src/api/l_data_textureData.c
    src/lib/stb/stb_image.c
    src/lib/stb/stb_truetype.c
    src/lib/stb/stb_vorbis.c
    src/lib/jsmn/jsmn.c
  )
endif()

if(LOVR_ENABLE_EVENT)
  add_definitions(-DLOVR_ENABLE_EVENT)
  target_sources(lovr PRIVATE
    src/modules/event/event.c
    src/api/l_event.c
  )
endif()

if(LOVR_ENABLE_FILESYSTEM)
  add_definitions(-DLOVR_ENABLE_FILESYSTEM)
  target_sources(lovr PRIVATE
    src/modules/filesystem/filesystem.c
    src/modules/filesystem/file.c
    src/api/l_filesystem.c
  )
endif()

if(LOVR_ENABLE_GRAPHICS)
  add_definitions(-DLOVR_ENABLE_GRAPHICS)
  target_sources(lovr PRIVATE
    src/modules/graphics/font.c
    src/modules/graphics/graphics.c
    src/modules/graphics/material.c
    src/modules/graphics/model.c
    src/modules/graphics/opengl.c
    src/api/l_graphics.c
    src/api/l_graphics_canvas.c
    src/api/l_graphics_font.c
    src/api/l_graphics_material.c
    src/api/l_graphics_mesh.c
    src/api/l_graphics_model.c
    src/api/l_graphics_shader.c
    src/api/l_graphics_shaderBlock.c
    src/api/l_graphics_texture.c
    src/resources/shaders.c
    src/lib/glad/glad.c
  )
endif()

if(LOVR_ENABLE_HEADSET)
  add_definitions(-DLOVR_ENABLE_HEADSET)
  target_sources(lovr PRIVATE
    src/api/l_headset.c
    src/modules/headset/headset.c
  )

  if(LOVR_USE_OPENVR)
    add_definitions(-DLOVR_USE_OPENVR)
    target_sources(lovr PRIVATE src/modules/headset/openvr.c)
    if(UNIX)
      target_compile_options(lovr PRIVATE -Wno-typedef-redefinition)
    endif()
  endif()
  if(LOVR_USE_OPENXR)
    add_definitions(-DLOVR_USE_OPENXR)
    target_sources(lovr PRIVATE src/modules/headset/openxr.c)
  endif()
  if(LOVR_USE_OCULUS)
    add_definitions(-DLOVR_USE_OCULUS)
    target_sources(lovr PRIVATE src/modules/headset/oculus.c)
  endif()
  if(LOVR_USE_OCULUS_MOBILE)
    add_definitions(-DLOVR_USE_OCULUS_MOBILE)
    target_sources(lovr PRIVATE src/modules/headset/oculus_mobile.c)
  endif()
  if(LOVR_USE_WEBVR)
    add_definitions(-DLOVR_USE_WEBVR)
    target_sources(lovr PRIVATE src/modules/headset/webvr.c)
  endif()
  if(LOVR_USE_WEBXR)
    add_definitions(-DLOVR_USE_WEBXR)
    target_sources(lovr PRIVATE src/modules/headset/webxr.c)
  endif()
  if(LOVR_USE_DESKTOP_HEADSET)
    add_definitions(-DLOVR_USE_DESKTOP_HEADSET)
    target_sources(lovr PRIVATE src/modules/headset/desktop.c)
  endif()
  if(LOVR_USE_LEAP)
    add_definitions(-DLOVR_USE_LEAP)
    target_sources(lovr PRIVATE src/modules/headset/leap.c)
  endif()
endif()

if(LOVR_ENABLE_MATH)
  add_definitions(-DLOVR_ENABLE_MATH)
  target_sources(lovr PRIVATE
    src/modules/math/math.c
    src/modules/math/curve.c
    src/modules/math/pool.c
    src/modules/math/randomGenerator.c
    src/api/l_math.c
    src/api/l_math_curve.c
    src/api/l_math_randomGenerator.c
    src/api/l_math_vectors.c
    src/lib/noise1234/noise1234.c
  )
endif()

if(LOVR_ENABLE_PHYSICS)
  add_definitions(-DLOVR_ENABLE_PHYSICS)
  target_sources(lovr PRIVATE
    src/modules/physics/physics.c
    src/api/l_physics.c
    src/api/l_physics_collider.c
    src/api/l_physics_joints.c
    src/api/l_physics_shapes.c
    src/api/l_physics_world.c
  )
endif()

if(LOVR_ENABLE_THREAD)
  add_definitions(-DLOVR_ENABLE_THREAD)
  target_sources(lovr PRIVATE
    src/modules/thread/channel.c
    src/modules/thread/thread.c
    src/api/l_thread.c
    src/api/l_thread_channel.c
    src/api/l_thread_thread.c
    src/lib/tinycthread/tinycthread.c
  )
endif()

if(LOVR_ENABLE_TIMER)
  add_definitions(-DLOVR_ENABLE_TIMER)
  target_sources(lovr PRIVATE src/modules/timer/timer.c src/api/l_timer.c)
endif()

if(LOVR_ENABLE_ENET)
  add_definitions(-DLOVR_ENABLE_ENET)
  target_sources(lovr PRIVATE src/lib/lua-enet/enet.c)
endif()

if(LOVR_ENABLE_JSON)
  add_definitions(-DLOVR_ENABLE_JSON)
  target_sources(lovr PRIVATE
    src/lib/lua-cjson/fpconv.c
    src/lib/lua-cjson/lua_cjson.c
    src/lib/lua-cjson/strbuf.c
  )
endif()

# Platforms
if(WIN32)
  target_sources(lovr PRIVATE src/core/os_win32.c)
  set_target_properties(lovr PROPERTIES COMPILE_FLAGS ""/wd4244 /MP"")
  set_target_properties(lovr PROPERTIES LINK_FLAGS_DEBUG ""/SUBSYSTEM:CONSOLE"")
  set_target_properties(lovr PROPERTIES LINK_FLAGS_RELEASE ""/SUBSYSTEM:windows /ENTRY:mainCRTStartup"")
  target_compile_definitions(lovr PUBLIC -D_CRT_SECURE_NO_WARNINGS)
  target_compile_definitions(lovr PUBLIC -D_CRT_NONSTDC_NO_WARNINGS)

  if(MSVC_VERSION VERSION_LESS 1900)
    target_compile_definitions(lovr PUBLIC -Dinline=__inline -Dsnprintf=_snprintf)
  endif()

  function(move_dll)
    if(TARGET ${ARGV0})
      add_custom_command(TARGET lovr POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
        $<TARGET_FILE:${ARGV0}>
        $<TARGET_FILE_DIR:lovr>/$<TARGET_FILE_NAME:${ARGV0}>
      )
    endif()
  endfunction()

  move_dll(${LOVR_GLFW})
  move_dll(${LOVR_LUA})
  move_dll(${LOVR_ODE})
  move_dll(${LOVR_OPENAL})
  move_dll(${LOVR_OPENVR})
  move_dll(${LOVR_LEAP})
  move_dll(${LOVR_MSDF})
  target_compile_definitions(lovr PRIVATE -DLOVR_GL)
elseif(APPLE)
  target_link_libraries(lovr objc)
  target_sources(lovr PRIVATE src/core/os_macos.c)
  target_compile_definitions(lovr PRIVATE -DLOVR_GL)
  if(LOVR_BUILD_BUNDLE)
    function(move_lib)
      if(TARGET ${ARGV0})
        add_custom_command(TARGET lovr POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E copy
          $<TARGET_SONAME_FILE:${ARGV0}>
          ${CMAKE_CURRENT_BINARY_DIR}/lovr.app/Contents/MacOS/$<TARGET_SONAME_FILE_NAME:${ARGV0}> # Bad
        )
      endif()
    endfunction()

    move_lib(${LOVR_GLFW})
    move_lib(${LOVR_LUA})
    move_lib(${LOVR_ODE})
    move_lib(${LOVR_OPENAL})
    move_lib(${LOVR_OPENVR})
    move_lib(${LOVR_MSDF})

    target_sources(lovr PRIVATE ""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/lovr.icns"")
    set_target_properties(lovr PROPERTIES
      MACOSX_BUNDLE TRUE
      MACOSX_RPATH TRUE
      BUILD_WITH_INSTALL_RPATH TRUE
      INSTALL_RPATH ""@executable_path""
      MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/Info.plist""
      RESOURCE ""${CMAKE_CURRENT_SOURCE_DIR}/src/resources/lovr.icns""
    )
  endif()
elseif(EMSCRIPTEN)
  target_sources(lovr PRIVATE src/core/os_web.c)
  target_compile_definitions(lovr PRIVATE -DLOVR_WEBGL)
elseif(ANDROID)
  target_sources(lovr PRIVATE src/core/os_android.c)
  target_link_libraries(lovr log EGL GLESv3)
  target_compile_definitions(lovr PRIVATE -DLOVR_GLES)
elseif(UNIX)
  target_sources(lovr PRIVATE src/core/os_linux.c)
  target_compile_definitions(lovr PRIVATE -DLOVR_GL)
endif()
",3.1.0,3.1
10209,nxblas,nxsimd,False,False,False,False,False,27,C++,2020-05-12 18:28:44+00:00,2016-02-19 22:41:39+00:00,743,645,"############################################################################
# Copyright (c) Johan Mabille, Sylvain Corlay, Wolf Vollprecht and         #
# Martin Renou                                                             #
# Copyright (c) QuantStack                                                 #
#                                                                          #
# Distributed under the terms of the BSD 3-Clause License.                 #
#                                                                          #
# The full license is in the file LICENSE, distributed with this software. #
############################################################################

cmake_minimum_required(VERSION 3.1)
project(xsimd)

set(XSIMD_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Versionning
# ===========

file(STRINGS ""${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_config.hpp"" xsimd_version_defines
     REGEX ""#define XSIMD_VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${xsimd_version_defines})
    if(ver MATCHES ""#define XSIMD_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(XSIMD_VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(${PROJECT_NAME}_VERSION
    ${XSIMD_VERSION_MAJOR}.${XSIMD_VERSION_MINOR}.${XSIMD_VERSION_PATCH})
message(STATUS ""xsimd v${${PROJECT_NAME}_VERSION}"")

# Build
# =====

set(XSIMD_HEADERS
    ${XSIMD_INCLUDE_DIR}/xsimd/xsimd.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_align.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_config.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_include.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_instruction_set.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_basic_math.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_error.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_exp_reduction.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_exponential.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_fp_manipulation.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_fp_sign.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_gamma.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_horner.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_hyperbolic.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_invtrigo.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_logarithm.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_math.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_math_complex.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_numerical_constant.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_power.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_rem_pio2.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_rounding.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_trigo_reduction.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/math/xsimd_trigonometric.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/memory/xsimd_aligned_allocator.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/memory/xsimd_aligned_stack_buffer.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/memory/xsimd_alignment.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_complex.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_conversion.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_double.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_float.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_int8.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_int32.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_int64.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_int_base.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_bool.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_complex.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_conversion.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_double.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_float.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_int8.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_int16.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_int32.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_int64.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512_int_base.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_bool.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_complex.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_conversion.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_double.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_float.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_int8.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_int16.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_int32.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_int64.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_uint8.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_uint16.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_uint32.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_uint64.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_utils.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_base.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_base_bool.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_complex_base.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_fallback.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_int_conversion.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_complex.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_conversion.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_double.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_float.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_int8.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_int32.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_int64.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse_int_base.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_traits.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_types_include.hpp
    ${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_utils.hpp
)

add_library(xsimd INTERFACE)

target_include_directories(xsimd INTERFACE
    $<BUILD_INTERFACE:${XSIMD_INCLUDE_DIR}>
    $<INSTALL_INTERFACE:include>)

target_compile_features(xsimd INTERFACE cxx_std_11)

OPTION(ENABLE_FALLBACK ""build tests/benchmarks with fallback implementation"" OFF)
OPTION(ENABLE_XTL_COMPLEX ""enables support for xcomplex defined in xtl"" OFF)
OPTION(BUILD_TESTS ""xsimd test suite"" OFF)
OPTION(DOWNLOAD_GTEST ""build gtest from downloaded sources"" OFF)

if(DOWNLOAD_GTEST OR GTEST_SRC_DIR)
    set(BUILD_TESTS ON)
endif()

if(ENABLE_FALLBACK)
    add_definitions(-DXSIMD_ENABLE_FALLBACK=1)
endif()

if(ENABLE_XTL_COMPLEX)
    add_definitions(-DXSIMD_ENABLE_XTL_COMPLEX=1)
    find_package(xtl 0.4.11 REQUIRED)
    target_link_libraries(xsimd INTERFACE xtl)
endif()

if(BUILD_TESTS)
    add_subdirectory(test)
endif()

OPTION(BUILD_BENCHMARK ""xsimd benchmarks"" OFF)
if(BUILD_BENCHMARK)
    add_subdirectory(benchmark)
endif()

OPTION(BUILD_EXAMPLES ""xsimd examples"" OFF)
if(BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

# Installation
# ============

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

install(TARGETS xsimd
        EXPORT ${PROJECT_NAME}-targets)

# Makes the project importable from the build directory
export(EXPORT ${PROJECT_NAME}-targets
       FILE ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake"")

install(DIRECTORY ${XSIMD_INCLUDE_DIR}/xsimd
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# GNUInstallDirs ""DATADIR"" wrong here; CMake search path wants ""share"".
set(XSIMD_CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE STRING ""install path for xsimdConfig.cmake"")

configure_package_config_file(${PROJECT_NAME}Config.cmake.in
                              ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
                              INSTALL_DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})

# xsimd is header-only and does not depend on the architecture.
# Remove CMAKE_SIZEOF_VOID_P from xtensorConfigVersion.cmake so that an xtensorConfig.cmake
# generated for a 64 bit target can be used for 32 bit targets and vice versa.
set(_XTENSOR_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
unset(CMAKE_SIZEOF_VOID_P)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
                                 VERSION ${${PROJECT_NAME}_VERSION}
                                 COMPATIBILITY SameMajorVersion)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})
install(EXPORT ${PROJECT_NAME}-targets
        FILE ${PROJECT_NAME}Targets.cmake
        DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})

configure_file(${PROJECT_NAME}.pc.in
               ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
                @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
        DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig/"")

",3.1,3.1
10245,varunamachi,quartz,False,False,False,False,False,1,C++,2019-11-10 04:24:20+00:00,2015-10-25 09:46:52+00:00,4,561,"project( qz )
cmake_minimum_required(VERSION 3.1)
cmake_policy( SET CMP0020 NEW )
set( PROJECT_ROOT $ENV{QUARTZ_ROOT} )
include( $ENV{QUARTZ_ROOT}/cmake/cmake_lib/container.cmake )

if(CMAKE_COMPILER_IS_GNUCXX)

#        ""${CMAKE_CXX_FLAGS}
#         -std=c++14"")
endif()

add_project( source )
add_project( plugins )


",3.1,3.1
10292,ospray,OSPRay,False,False,False,False,False,39,Objective-C,2020-05-17 17:29:27+00:00,2013-06-20 19:16:51+00:00,666,8381,"## Copyright 2009-2019 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.1)

##############################################################
# Language setup
##############################################################

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

set(CMAKE_C_STANDARD   99)
set(CMAKE_CXX_STANDARD 11)

set(CMAKE_C_STANDARD_REQUIRED   ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

##############################################################
# Establish project
##############################################################

include(cmake/ospray_version.cmake)

project(OSPRay VERSION ${OSPRAY_VERSION} LANGUAGES C CXX)

##############################################################
# CMake modules and macro files
##############################################################

list(APPEND CMAKE_MODULE_PATH
  ${PROJECT_SOURCE_DIR}/cmake
  ${PROJECT_SOURCE_DIR}/cmake/compiler
)

include(ospray_macros)
include(ospray_options)
include(package)
include(ispc)

if (OSPRAY_INSTALL_DEPENDENCIES)
  include(ospray_redistribute_deps)
endif()

##############################################################
# Add library and executable targets
##############################################################

## Main OSPRay library ##
add_subdirectory(ospray)

## OSPRay sample apps ##
if (OSPRAY_ENABLE_APPS)
  add_subdirectory(apps)
endif()

## Modules ##
if (OSPRAY_ENABLE_MODULES)
  add_subdirectory(modules)
endif()

## Testing ##
if (OSPRAY_APPS_TESTING)
  add_subdirectory(test_image_data)
endif()

## Clang-format target ##
if (OSPRAY_ENABLE_TARGET_CLANGFORMAT)
  include(clang-format)
endif()

# Must be last
include(CPack)
",3.1,3.1
10570,libqtxdg,libqtxdg,False,False,False,False,False,30,C++,2020-04-27 10:17:23+00:00,2014-05-08 11:49:59+00:00,0,512,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(libqtxdg)

option(BUILD_TESTS ""Builds tests"" OFF)
option(BUILD_DEV_UTILS ""Builds and install development utils"" OFF)

# additional cmake files
set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

set(QTXDG_MAJOR_VERSION 3)
set(QTXDG_MINOR_VERSION 5)
set(QTXDG_PATCH_VERSION 0)
set(QTXDG_VERSION_STRING ${QTXDG_MAJOR_VERSION}.${QTXDG_MINOR_VERSION}.${QTXDG_PATCH_VERSION})

set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")
set(GLIB_MINIMUM_VERSION ""2.41.0"") # Mime Apps new implementation

find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED Widgets Svg Xml DBus)
find_package(GLIB ${GLIB_MINIMUM_VERSION} REQUIRED COMPONENTS gobject gio gio-unix)

include(GNUInstallDirs)             # Standard directories for installation
include(CMakePackageConfigHelpers)
include(GenerateExportHeader)

include(LXQtPreventInSourceBuilds)
include(LXQtCreatePkgConfigFile)
include(LXQtCreatePortableHeaders)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Add link optimizations. It make the .so around 33% smaller without any known
# drawback.
include(compiler_settings NO_POLICY_SCOPE)

set(CMAKE_AUTOMOC ON)

if (BUILD_TESTS)
    find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED Test)
endif()


set(QTXDGX_LIBRARY_NAME ""Qt5Xdg"")
set(QTXDGX_FILE_NAME ""qt5xdg"")

set(QTXDGX_ICONLOADER_LIBRARY_NAME ""Qt5XdgIconLoader"")
set(QTXDGX_ICONLOADER_FILE_NAME ""qt5xdgiconloader"")
set(QTXDGX_ICONENGINEPLUGIN_LIBRARY_NAME ""Qt5XdgIconPlugin"")

set(QTXDGX_PKG_CONFIG_DESCRIPTION ""Qt5Xdg, a Qt5 implementation of XDG standards"")
set(QTXDGX_PKG_CONFIG_REQUIRES ""Qt5Core >= ${QT_MINIMUM_VERSION}, Qt5Xml >= ${QT_MINIMUM_VERSION}, Qt5Widgets >= ${QT_MINIMUM_VERSION}, Qt5DBus >= ${QT_MINIMUM_VERSION}, Qt5XdgIconLoader = ${QTXDG_VERSION_STRING}"")

set(QTXDGX_ICONLOADER_PKG_CONFIG_DESCRIPTION ""Qt5XdgIconLader, a Qt5 XDG Icon Loader"")
set(QTXDGX_ICONLOADER_PKG_CONFIG_REQUIRES ""Qt5Gui >= ${QT_MINIMUM_VERSION}, Qt5Svg >= ${QT_MINIMUM_VERSION}"")

set(QTXDGX_INTREE_INCLUDEDIR ""${CMAKE_CURRENT_BINARY_DIR}/InTreeBuild/include"")

message(STATUS ""Building ${PROJECT_NAME} with Qt ${Qt5Core_VERSION}"")

add_subdirectory(src)

if(BUILD_TESTS)
    enable_testing()
    target_compile_definitions(${QTXDGX_LIBRARY_NAME}
        PRIVATE ""QTXDG_TESTS=\""1\""""
    )
    add_subdirectory(test)
else()
    message(STATUS """")
    message(STATUS ""For building tests use -DBUILD_TESTS=Yes option."")
    message(STATUS """")
endif()

if (BUILD_DEV_UTILS)
    add_subdirectory(util)
endif()

configure_package_config_file(
    ""${PROJECT_SOURCE_DIR}/cmake/${QTXDGX_FILE_NAME}-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config-version.cmake""
    VERSION ${QTXDG_VERSION_STRING}
    COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
    ""${PROJECT_SOURCE_DIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config-version.cmake""
    VERSION ${QTXDG_VERSION_STRING}
    COMPATIBILITY AnyNewerVersion
)

lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${QTXDGX_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${QTXDGX_LIBRARY_NAME}
    DESCRIPTION ${QTXDGX_PKG_CONFIG_DESCRIPTION}
    INCLUDEDIRS ${QTXDGX_FILE_NAME}
    LIBS ${QTXDGX_LIBRARY_NAME}
    REQUIRES ${QTXDGX_PKG_CONFIG_REQUIRES}
    REQUIRES_PRIVATE ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    VERSION ${QTXDG_VERSION_STRING}
    INSTALL
)

lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    DESCRIPTION ${QTXDGX_ICONLOADER_PKG_CONFIG_DESCRIPTION}
    INCLUDEDIRS ${QTXDGX_ICONLOADER_FILE_NAME}
    LIBS ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    REQUIRES ${QTXDGX_ICONLOADER_PKG_CONFIG_REQUIRES}
    VERSION ${QTXDG_VERSION_STRING}
    INSTALL
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
    COMPONENT Devel
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
    COMPONENT Devel
)

install(EXPORT
    ""${QTXDGX_FILE_NAME}-targets""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
    FILE ""${QTXDGX_FILE_NAME}-targets.cmake""
    COMPONENT Devel
)

install(EXPORT
    ""${QTXDGX_ICONLOADER_FILE_NAME}-targets""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
    FILE ""${QTXDGX_ICONLOADER_FILE_NAME}-targets.cmake""
    COMPONENT Devel
)

# uninstall target
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

#add_custom_target(uninstall
#    COMMAND ${CMAKE_COMMAND} -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"")
",3.1.0,3.1
10653,Nepitwin,libCompanion,False,False,False,False,False,2,C++,2019-07-16 20:08:49+00:00,2017-03-21 17:44:30+00:00,3,281,"#
# This program is an object recognition framework written with OpenCV.
# Copyright (C) 2016-2018 Andreas Sekulski, Dimitri Kotlovsky
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
cmake_minimum_required(VERSION 3.1)

# Set installation directory for WIN32 (on UNIX '/usr/local' should be the default)
if(WIN32)
    set(CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE PATH ""Installation Directory"")
endif()

# Configure CMake project
project(Companion)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Define CMake Flags
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release"")
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY ON)
set(CMAKE_DEBUG_POSTFIX ""D"")

# Define interactive CMake Flags
option(Companion_BUILD_SHARED_LIBRARY ""Build Companion as shared library"" OFF)

# Cuda and current samples are not supported when building for Windows Store
if(NOT WINDOWS_STORE)
    option(Companion_BUILD_SAMPLES ""Build all Companion samples"" OFF)
    option(Companion_USE_CUDA ""Use cuda implementation of Companion"" OFF)
    option(Companion_USE_XFEATURES_2D ""Use non free module"" OFF)
endif()

# Define global properties
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Configure dependencies
set(OpenCVComponents ""core"" ""imgproc"" ""imgcodecs"" ""features2d"" ""videoio"" ""calib3d"")
if(Companion_USE_CUDA)
    set(OpenCVComponents ${OpenCVComponents} ""cudafeatures2d"")
    add_definitions(-DCompanion_USE_CUDA)
endif()

if(Companion_USE_XFEATURES_2D)
    set(OpenCVComponents ${OpenCVComponents} ""xfeatures2d"")
    add_definitions(-DCompanion_USE_XFEATURES_2D)
endif()

find_package(OpenCV REQUIRED ${OpenCVComponents})
find_package(OpenMP REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
endif()

# For developer
if(Companion_DEBUG)
    add_definitions(-DCompanion_DEBUG)
endif()

# Configure Companion
add_subdirectory(Companion)

# Configure to build additional modules
if(Companion_BUILD_SAMPLES)
	if(EXISTS ""${PROJECT_SOURCE_DIR}/CompanionSamples/CMakeLists.txt"")
		add_subdirectory(CompanionSamples)
	else()
		set(Companion_SAMPLE_MODULE ""Path_to_Samples_Module"" CACHE PATH ""Sample module path"")
        add_subdirectory(${Companion_SAMPLE_MODULE} samples)
	endif()
endif()",3.1,3.1
10675,lxde,lxqt-globalkeys,False,False,False,False,False,76,C++,2020-05-03 14:14:39+00:00,2013-08-06 10:46:27+00:00,17,429,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-globalkeys)

# additional cmake files
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)

# Version
set(LXQT_GLOBALKEYS_MAJOR_VERSION 0)
set(LXQT_GLOBALKEYS_MINOR_VERSION 15)
set(LXQT_GLOBALKEYS_PATCH_VERSION 0)
set(LXQT_GLOBALKEYS_VERSION ${LXQT_GLOBALKEYS_MAJOR_VERSION}.${LXQT_GLOBALKEYS_MINOR_VERSION}.${LXQT_GLOBALKEYS_PATCH_VERSION})
add_definitions(""-DLXQT_GLOBALKEYS_VERSION=\""${LXQT_GLOBALKEYS_VERSION}\"""")

include(LXQtPreventInSourceBuilds)
include(LXQtTranslate)
include(LXQtCreatePkgConfigFile)
include(LXQtCreatePortableHeaders)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

include(GNUInstallDirs) # Standard directories for installation
include(CMakePackageConfigHelpers)

set(LXQT_GLOBALKEYS_LIBRARY_NAME lxqt-globalkeys)
set(LXQT_GLOBALKEYS_UI_LIBRARY_NAME lxqt-globalkeys-ui)
set(LXQT_INSTALL_CMAKE_DIR     ""${CMAKE_INSTALL_DATAROOTDIR}/cmake"")

#************************************************
# Build config.cmake files
#************************************************
set(LXQT_GLOBALKEYS_CMAKE_NAME ${LXQT_GLOBALKEYS_LIBRARY_NAME})
set(LXQT_GLOBALKEYS_UI_CMAKE_NAME ${LXQT_GLOBALKEYS_UI_LIBRARY_NAME})

configure_package_config_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/lxqt_globalkeys-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}""
)

configure_package_config_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/lxqt_globalkeys_ui-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_UI_CMAKE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}""
)
#************************************************
# End of build config.cmake
#************************************************

#************************************************
# Generate config-version.cmake files
#************************************************
write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}-config-version.cmake""
    VERSION ${LXQT_GLOBALKEYS_VERSION}
    COMPATIBILITY AnyNewerVersion
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_UI_CMAKE_NAME}-config-version.cmake""
    VERSION ${LXQT_GLOBALKEYS_VERSION}
    COMPATIBILITY AnyNewerVersion
)
#************************************************
# End of generate config-version.cmake files
#************************************************

set(LXQT_GLOBALKEYS_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}"")
add_subdirectory(daemon)
add_subdirectory(config)
add_subdirectory(client)
add_subdirectory(ui)

install(FILES
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}-config-version.cmake""
    DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_GLOBALKEYS_CMAKE_NAME}""
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_UI_CMAKE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${LXQT_GLOBALKEYS_UI_CMAKE_NAME}-config-version.cmake""
    DESTINATION ""${LXQT_INSTALL_CMAKE_DIR}/${LXQT_GLOBALKEYS_UI_CMAKE_NAME}""
)

# merged from lxqt-common
add_subdirectory(autostart)
add_subdirectory(xdg)

",3.1.0,3.1
10799,myint,perceptualdiff,False,False,False,False,False,5,C++,2019-03-17 14:24:32+00:00,2011-12-02 23:56:43+00:00,131,456,"project(perceptualdiff)

cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(NOT MSVC)
    add_compile_options(
        -Wall -Wextra -pedantic -Wcast-qual -Wpointer-arith -Winit-self
        -Wswitch-default -Wmissing-include-dirs -Wold-style-cast
        -Wnon-virtual-dtor -Wshadow -Wno-unknown-pragmas)
endif()

find_package(OpenMP)
if(OPENMP_FOUND)
    add_compile_options(${OpenMP_CXX_FLAGS})
    if(NOT MSVC)
        set(CMAKE_EXE_LINKER_FLAGS
            ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}"")
    endif()
endif()

option(SANITIZERS ""Enable sanitizers"" FALSE)
if(SANITIZERS)
    add_compile_options(-fsanitize=address,undefined -fno-omit-frame-pointer)
    set(CMAKE_EXE_LINKER_FLAGS
        ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined"")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(FREEIMAGE_FIND_REQUIRED, TRUE)
find_package(FreeImage)

add_library(pdiff lpyramid.cpp rgba_image.cpp metric.cpp)
target_include_directories(pdiff SYSTEM PRIVATE ${FREEIMAGE_INCLUDE_DIRS})
target_link_libraries(pdiff PRIVATE ${FREEIMAGE_LIBRARIES})

add_executable(perceptualdiff compare_args.cpp perceptualdiff.cpp)
target_link_libraries(perceptualdiff PRIVATE pdiff)

install(TARGETS perceptualdiff DESTINATION bin)

# Packing stuff.
set(CPACK_PACKAGE_VERSION_MAJOR ""1"")
set(CPACK_PACKAGE_VERSION_MINOR ""2"")
set(CPACK_PACKAGE_VERSION_PATCH ""0"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""An image comparison utility."")
set(CPACK_PACKAGE_VENDOR ""pdiff dev team"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/README.rst)
set(CPACK_GENERATOR TGZ)
set(CPACK_SOURCE_PACKAGE_FILE_NAME
    ""perceptualdiff-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}""
    CACHE INTERNAL ""tarball basename""
)
set(CPACK_SOURCE_GENERATOR TGZ)
# The following components are regex's to match anywhere (unless anchored)
# in absolute path + filename to find files or directories to be excluded
# from source tarball.
set(CPACK_SOURCE_IGNORE_FILES
    ""~$""
    ""/\\\\.gitignore$""
    ""/\\\\..*\\\\.swp$""
    ""^${PROJECT_SOURCE_DIR}/\\\\.git/""
    ""^${PROJECT_SOURCE_DIR}/CMakeFiles/""
    ""^${PROJECT_SOURCE_DIR}/CMakeCache.txt""
    ""^${PROJECT_SOURCE_DIR}/CPackSourceConfig.cmake""
    ""^${PROJECT_SOURCE_DIR}/CPackConfig.cmake""
    ""^${PROJECT_SOURCE_DIR}/CTestTestfile.cmake""
    ""^${PROJECT_SOURCE_DIR}/Makefile""
    ""^${PROJECT_SOURCE_DIR}/_CPack_Packages""
    ""^${PROJECT_SOURCE_DIR}/cmake_install.cmake""
    ""^${PROJECT_SOURCE_DIR}/install_manifest.txt""
    ""^${PROJECT_SOURCE_DIR}/perceptualdiff""
    ""^${PROJECT_SOURCE_DIR}/perceptualdiff-.*""
    ""^${PROJECT_SOURCE_DIR}/Testing""
    ""^${PROJECT_SOURCE_DIR}/coverage_output""
)
include(CPack)
",3.1,3.1
10874,akheron,jansson,False,False,False,False,False,69,C,2020-05-07 18:41:47+00:00,2009-04-23 06:35:33+00:00,2183,994,"# Notes:
#
# Author: Paul Harris, June 2012
# Additions: Joakim Soderberg, February 2013
#
# Supports: building static/shared, release/debug/etc, can also build html docs
# and some of the tests.
# Note that its designed for out-of-tree builds, so it will not pollute your
# source tree.
#
# TODO 1: Finish implementing tests. api tests are working, but the valgrind
# variants are not flagging problems.
#
# TODO 2: There is a check_exports script that would try and incorporate.
#
# TODO 3: Consolidate version numbers, currently the version number is written
# into: * cmake (here) * autotools (the configure) * source code header files.
# Should not be written directly into header files, autotools/cmake can do
# that job.
#
# Brief intro on how to use cmake:
# > mkdir build (somewhere - we do out-of-tree builds)
# > use cmake, ccmake, or cmake-gui to configure the project. for linux, you
# can only choose one variant: release,debug,etc... and static or shared.
# >> example:
# >> cd build
# >> ccmake -i ../path_to_jansson_dir
# >>  inside, configure your options. press C until there are no lines
#     with * next to them.
# >>  note, I like to configure the 'install' path to ../install, so I get
#     self-contained clean installs I can point other projects to.
# >>  press G to 'generate' the project files.
# >> make (to build the project)
# >> make install
# >> make test (to run the tests, if you enabled them)
#
# Brief description on how it works:
# There is a small hierarchy of CMakeLists.txt files which define how the
# project is built.
# Header file detection etc is done, and the results are written into config.h
# and jansson_config.h, which are generated from the corresponding
# config.h.cmake and jansson_config.h.cmake template files.
# The generated header files end up in the build directory - not in
# the source directory.
# The rest is down to the usual make process.



cmake_minimum_required (VERSION 3.1)
project(jansson C)

# Options
option(JANSSON_BUILD_SHARED_LIBS ""Build shared libraries."" OFF)
option(USE_URANDOM ""Use /dev/urandom to seed the hash function."" ON)
option(USE_WINDOWS_CRYPTOAPI ""Use CryptGenRandom to seed the hash function."" ON)

if (MSVC)
   # This option must match the settings used in your program, in particular if you
	# are linking statically
	option(JANSSON_STATIC_CRT ""Link the static CRT libraries"" OFF )
endif ()

option(JANSSON_EXAMPLES ""Compile example applications"" ON)

if (UNIX)
   option(JANSSON_COVERAGE ""(GCC Only! Requires gcov/lcov to be installed). Include target for doing coverage analysis for the test suite. Note that -DCMAKE_BUILD_TYPE=Debug must be set"" OFF)
   option(JANSSON_COVERALLS ""Generate coverage info for Coveralls"" OFF)
   option(JANSSON_COVERALLS_UPLOAD ""Upload coverage info to Coveralls (Only works via Travis)"" ON)
endif ()

# Set some nicer output dirs.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(JANSSON_TEMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/tmp)

# Give the debug version a different postfix for windows,
# so both the debug and release version can be built in the
# same build-tree on Windows (MSVC).
if (WIN32 AND NOT CMAKE_DEBUG_POSTFIX)
   set(CMAKE_DEBUG_POSTFIX ""_d"")
endif()

# This is how I thought it should go
# set (JANSSON_VERSION ""2.3.1"")
# set (JANSSON_SOVERSION 2)

set(JANSSON_DISPLAY_VERSION ""2.13.1"")

# This is what is required to match the same numbers as automake's
set(JANSSON_VERSION ""4.13.0"")
set(JANSSON_SOVERSION 4)

# for CheckFunctionKeywords
set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include (CheckCSourceCompiles)
include (CheckFunctionExists)
include (CheckFunctionKeywords)
include (CheckIncludeFiles)
include (CheckTypeSize)

# suppress format-truncation warning
include (CheckCCompilerFlag)
check_c_compiler_flag(-Wno-format-truncation HAS_NO_FORMAT_TRUNCATION)
if (HAS_NO_FORMAT_TRUNCATION)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-format-truncation"")
endif()

if (MSVC)
   # Turn off Microsofts ""security"" warnings.
   add_definitions( ""/W3 /D_CRT_SECURE_NO_WARNINGS /wd4005 /wd4996 /nologo"" )

   if (JANSSON_STATIC_CRT)
      set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /MT"")
      set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} /MTd"")
   endif()
endif()

message(""C compiler: ${CMAKE_C_COMPILER_ID}"")

# Coverage only works with GCC for a debug build.
if (JANSSON_COVERALLS)
   set(JANSSON_COVERAGE ON)
endif()

if (JANSSON_COVERAGE)
   include(CodeCoverage)
   include(Coveralls)

   # This adds coverage arguments to gcc/clang.
   coveralls_turn_on_coverage()
endif()

check_include_files (endian.h HAVE_ENDIAN_H)
check_include_files (fcntl.h HAVE_FCNTL_H)
check_include_files (sched.h HAVE_SCHED_H)
check_include_files (unistd.h HAVE_UNISTD_H)
check_include_files (sys/param.h HAVE_SYS_PARAM_H)
check_include_files (sys/stat.h HAVE_SYS_STAT_H)
check_include_files (sys/time.h HAVE_SYS_TIME_H)
check_include_files (sys/types.h HAVE_SYS_TYPES_H)

check_function_exists (close HAVE_CLOSE)
check_function_exists (getpid HAVE_GETPID)
check_function_exists (gettimeofday HAVE_GETTIMEOFDAY)
check_function_exists (open HAVE_OPEN)
check_function_exists (read HAVE_READ)
check_function_exists (sched_yield HAVE_SCHED_YIELD)

# Check for the int-type includes
check_include_files (stdint.h HAVE_STDINT_H)

# Check our 64 bit integer sizes
check_type_size (__int64 __INT64)
check_type_size (int64_t INT64_T)
check_type_size (""long long"" LONG_LONG_INT)

# Check our 32 bit integer sizes
check_type_size (int32_t INT32_T)
check_type_size (__int32 __INT32)
check_type_size (""long"" LONG_INT)
check_type_size (""int"" INT)
if (HAVE_INT32_T)
   set (JSON_INT32 int32_t)
elseif (HAVE___INT32)
   set (JSON_INT32 __int32)
elseif (HAVE_LONG_INT AND (LONG_INT EQUAL 4))
   set (JSON_INT32 long)
elseif (HAVE_INT AND (INT EQUAL 4))
   set (JSON_INT32 int)
else ()
   message (FATAL_ERROR ""Could not detect a valid 32-bit integer type"")
endif ()

check_type_size (""unsigned long"" UNSIGNED_LONG_INT)
check_type_size (""unsigned int"" UNSIGNED_INT)
check_type_size (""unsigned short"" UNSIGNED_SHORT)

check_type_size (uint32_t UINT32_T)
check_type_size (__uint32 __UINT32)
if (HAVE_UINT32_T)
   set (JSON_UINT32 uint32_t)
elseif (HAVE___UINT32)
   set (JSON_UINT32 __uint32)
elseif (HAVE_UNSIGNED_LONG_INT AND (UNSIGNED_LONG_INT EQUAL 4))
   set (JSON_UINT32 ""unsigned long"")
elseif (HAVE_UNSIGNED_INT AND (UNSIGNED_INT EQUAL 4))
   set (JSON_UINT32 ""unsigned int"")
else ()
      message (FATAL_ERROR ""Could not detect a valid unsigned 32-bit integer type"")
endif ()

check_type_size (uint16_t UINT16_T)
check_type_size (__uint16 __UINT16)
if (HAVE_UINT16_T)
   set (JSON_UINT16 uint16_t)
elseif (HAVE___UINT16)
   set (JSON_UINT16 __uint16)
elseif (HAVE_UNSIGNED_INT AND (UNSIGNED_INT EQUAL 2))
   set (JSON_UINT16 ""unsigned int"")
elseif (HAVE_UNSIGNED_SHORT AND (UNSIGNED_SHORT EQUAL 2))
   set (JSON_UINT16 ""unsigned short"")
else ()
      message (FATAL_ERROR ""Could not detect a valid unsigned 16-bit integer type"")
endif ()

check_type_size (uint8_t UINT8_T)
check_type_size (__uint8 __UINT8)
if (HAVE_UINT8_T)
   set (JSON_UINT8 uint8_t)
elseif (HAVE___UINT8)
   set (JSON_UINT8 __uint8)
else ()
   set (JSON_UINT8 ""unsigned char"")
endif ()

# Check for ssize_t and SSIZE_T existence.
check_type_size(ssize_t SSIZE_T)
check_type_size(SSIZE_T UPPERCASE_SSIZE_T)
if(NOT HAVE_SSIZE_T)
   if(HAVE_UPPERCASE_SSIZE_T)
      set(JSON_SSIZE SSIZE_T)
   else()
      set(JSON_SSIZE int)
   endif()
endif()
set(CMAKE_EXTRA_INCLUDE_FILES """")

# Check for all the variants of strtoll
check_function_exists (strtoll HAVE_STRTOLL)
check_function_exists (strtoq HAVE_STRTOQ)
check_function_exists (_strtoi64 HAVE__STRTOI64)

# Figure out what variant we should use
if (HAVE_STRTOLL)
   set (JSON_STRTOINT strtoll)
elseif (HAVE_STRTOQ)
   set (JSON_STRTOINT strtoq)
elseif (HAVE__STRTOI64)
   set (JSON_STRTOINT _strtoi64)
else ()
   # fallback to strtol (32 bit)
   # this will set all the required variables
   set (JSON_STRTOINT strtol)
   set (JSON_INT_T long)
   set (JSON_INTEGER_FORMAT ""\""ld\"""")
endif ()

# if we haven't defined JSON_INT_T, then we have a 64 bit conversion function.
# detect what to use for the 64 bit type.
# Note: I will prefer long long if I can get it, as that is what the automake system aimed for.
if (NOT DEFINED JSON_INT_T)
   if (HAVE_LONG_LONG_INT AND (LONG_LONG_INT EQUAL 8))
      set (JSON_INT_T ""long long"")
   elseif (HAVE_INT64_T)
      set (JSON_INT_T int64_t)
   elseif (HAVE___INT64)
      set (JSON_INT_T __int64)
   else ()
      message (FATAL_ERROR ""Could not detect 64 bit type, although I detected the strtoll equivalent"")
   endif ()

   # Apparently, Borland BCC and MSVC wants I64d,
   # Borland BCC could also accept LD
   # and gcc wants ldd,
   # I am not sure what cygwin will want, so I will assume I64d

   if (WIN32) # matches both msvc and cygwin
      set (JSON_INTEGER_FORMAT ""\""I64d\"""")
   else ()
      set (JSON_INTEGER_FORMAT ""\""lld\"""")
   endif ()
endif ()


# If locale.h and localeconv() are available, define to 1, otherwise to 0.
check_include_files (locale.h HAVE_LOCALE_H)
check_function_exists (localeconv HAVE_LOCALECONV)

if (HAVE_LOCALECONV AND HAVE_LOCALE_H)
   set (JSON_HAVE_LOCALECONV 1)
else ()
   set (JSON_HAVE_LOCALECONV 0)
endif()

# check if we have setlocale
check_function_exists(setlocale HAVE_SETLOCALE)

# Check what the inline keyword is.
# Note that the original JSON_INLINE was always set to just 'inline', so this goes further.
check_function_keywords(""inline"")
check_function_keywords(""__inline"")
check_function_keywords(""__inline__"")

if (HAVE_INLINE)
   set(JSON_INLINE inline)
elseif (HAVE___INLINE)
   set(JSON_INLINE __inline)
elseif (HAVE___INLINE__)
   set(JSON_INLINE __inline__)
else()
   # no inline on this platform
   set (JSON_INLINE)
endif()

check_c_source_compiles (""int main() { unsigned long val; __sync_bool_compare_and_swap(&val, 0, 1); __sync_add_and_fetch(&val, 1); __sync_sub_and_fetch(&val, 1); return 0; } "" HAVE_SYNC_BUILTINS)
check_c_source_compiles (""int main() { char l; unsigned long v; __atomic_test_and_set(&l, __ATOMIC_RELAXED); __atomic_store_n(&v, 1, __ATOMIC_RELEASE); __atomic_load_n(&v, __ATOMIC_ACQUIRE); __atomic_add_fetch(&v, 1, __ATOMIC_ACQUIRE); __atomic_sub_fetch(&v, 1, __ATOMIC_RELEASE); return 0; }"" HAVE_ATOMIC_BUILTINS)

if (HAVE_SYNC_BUILTINS)
  set(JSON_HAVE_SYNC_BUILTINS 1)
else()
  set(JSON_HAVE_SYNC_BUILTINS 0)
endif()

if (HAVE_ATOMIC_BUILTINS)
  set(JSON_HAVE_ATOMIC_BUILTINS 1)
else()
  set(JSON_HAVE_ATOMIC_BUILTINS 0)
endif()

set (JANSSON_INITIAL_HASHTABLE_ORDER 3 CACHE STRING ""Number of buckets new object hashtables contain is 2 raised to this power. The default is 3, so empty hashtables contain 2^3 = 8 buckets."")

# configure the public config file
configure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_config.h.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h)

# Copy the jansson.h file to the public include folder
file (COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h
           DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/)

add_definitions(-DJANSSON_USING_CMAKE)

# configure the private config file
configure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_private_config.h.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)

# and tell the source code to include it
add_definitions(-DHAVE_CONFIG_H)

include_directories (${CMAKE_CURRENT_BINARY_DIR}/include)
include_directories (${CMAKE_CURRENT_BINARY_DIR}/private_include)

# Add the lib sources.
file(GLOB JANSSON_SRC src/*.c)

set(JANSSON_HDR_PRIVATE
   ${CMAKE_CURRENT_SOURCE_DIR}/src/hashtable.h
   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson_private.h
   ${CMAKE_CURRENT_SOURCE_DIR}/src/strbuffer.h
   ${CMAKE_CURRENT_SOURCE_DIR}/src/utf.h
   ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)

set(JANSSON_HDR_PUBLIC
   ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h
   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h)

source_group(""Library Sources"" FILES ${JANSSON_SRC})
source_group(""Library Private Headers"" FILES ${JANSSON_HDR_PRIVATE})
source_group(""Library Public Headers"" FILES ${JANSSON_HDR_PUBLIC})

if(JANSSON_BUILD_SHARED_LIBS)
   add_library(jansson SHARED
      ${JANSSON_SRC}
      ${JANSSON_HDR_PRIVATE}
      ${JANSSON_HDR_PUBLIC}
      src/jansson.def)

   set_target_properties(jansson PROPERTIES
      VERSION ${JANSSON_VERSION}
      SOVERSION ${JANSSON_SOVERSION})
else()
   add_library(jansson STATIC
      ${JANSSON_SRC}
      ${JANSSON_HDR_PRIVATE}
      ${JANSSON_HDR_PUBLIC})
   set_target_properties(jansson PROPERTIES
      POSITION_INDEPENDENT_CODE true)
endif()

if (JANSSON_EXAMPLES)
	add_executable(simple_parse ""${CMAKE_CURRENT_SOURCE_DIR}/examples/simple_parse.c"")
	target_link_libraries(simple_parse jansson)
endif()

# For building Documentation (uses Sphinx)
option(JANSSON_BUILD_DOCS ""Build documentation (uses python-sphinx)."" ON)
if (JANSSON_BUILD_DOCS)
   find_package(Sphinx)

   if (NOT SPHINX_FOUND)
      message(WARNING ""Sphinx not found. Cannot generate documentation!
      Set -DJANSSON_BUILD_DOCS=OFF to get rid of this message."")
   else()
      if (Sphinx_VERSION_STRING VERSION_LESS 1.0)
         message(WARNING ""Your Sphinx version is too old!
               This project requires Sphinx v1.0 or above to produce
               proper documentation (you have v${Sphinx_VERSION_STRING}).
               You will get output but it will have errors."")
      endif()

      # configured documentation tools and intermediate build results
      set(BINARY_BUILD_DIR ""${CMAKE_CURRENT_BINARY_DIR}/_build"")

      # Sphinx cache with pickled ReST documents
      set(SPHINX_CACHE_DIR ""${CMAKE_CURRENT_BINARY_DIR}/_doctrees"")

      # CMake could be used to build the conf.py file too,
      # eg it could automatically write the version of the program or change the theme.
      # if(NOT DEFINED SPHINX_THEME)
      #    set(SPHINX_THEME default)
      # endif()
      #
      # if(NOT DEFINED SPHINX_THEME_DIR)
      #    set(SPHINX_THEME_DIR)
      # endif()
      #
      # configure_file(
      #    ""${CMAKE_CURRENT_SOURCE_DIR}/conf.py.in""
      #    ""${BINARY_BUILD_DIR}/conf.py""
      #    @ONLY)

      # TODO: Add support for all sphinx builders: http://sphinx-doc.org/builders.html

      # Add documentation targets.
      set(DOC_TARGETS html)

      option(JANSSON_BUILD_MAN ""Create a target for building man pages."" ON)

      if (JANSSON_BUILD_MAN)
         if (Sphinx_VERSION_STRING VERSION_LESS 1.0)
            message(WARNING ""Sphinx version 1.0 > is required to build man pages. You have v${Sphinx_VERSION_STRING}."")
         else()
            list(APPEND DOC_TARGETS man)
         endif()
      endif()

      option(JANSSON_BUILD_LATEX ""Create a target for building latex docs (to create PDF)."" OFF)

      if (JANSSON_BUILD_LATEX)
         find_package(LATEX)

         if (NOT LATEX_COMPILER)
            message(""Couldn't find Latex, can't build latex docs using Sphinx"")
         else()
            message(""Latex found! If you have problems building, see Sphinx documentation for required Latex packages."")
            list(APPEND DOC_TARGETS latex)
         endif()
      endif()

      # The doc target will build all documentation targets.
      add_custom_target(doc)

      foreach (DOC_TARGET ${DOC_TARGETS})
         add_custom_target(${DOC_TARGET}
            ${SPHINX_EXECUTABLE}
            # -q   # Enable for quiet mode
            -b ${DOC_TARGET}
            -d ""${SPHINX_CACHE_DIR}""
            # -c ""${BINARY_BUILD_DIR}"" # enable if using cmake-generated conf.py
            ""${CMAKE_CURRENT_SOURCE_DIR}/doc""
            ""${CMAKE_CURRENT_BINARY_DIR}/doc/${DOC_TARGET}""
            COMMENT ""Building ${DOC_TARGET} documentation with Sphinx"")

         add_dependencies(doc ${DOC_TARGET})
      endforeach()

      message(""Building documentation enabled for: ${DOC_TARGETS}"")
   endif()
endif ()


option(JANSSON_WITHOUT_TESTS ""Don't build tests ('make test' to execute tests)"" OFF)

if (NOT JANSSON_WITHOUT_TESTS)
   option(JANSSON_TEST_WITH_VALGRIND ""Enable valgrind tests."" OFF)

   ENABLE_TESTING()

   if (JANSSON_TEST_WITH_VALGRIND)
      # TODO: Add FindValgrind.cmake instead of having a hardcoded path.

      add_definitions(-DVALGRIND)

      # enable valgrind
      set(CMAKE_MEMORYCHECK_COMMAND valgrind)
      set(CMAKE_MEMORYCHECK_COMMAND_OPTIONS
         ""--error-exitcode=1 --leak-check=full --show-reachable=yes --track-origins=yes -q"")

      set(MEMCHECK_COMMAND
         ""${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}"")
      separate_arguments(MEMCHECK_COMMAND)
   endif ()

   #
   # Test suites.
   #
   if (CMAKE_COMPILER_IS_GNUCC)
      add_definitions(-Wall -Wextra -Wdeclaration-after-statement)
   endif ()

   set(api_tests
         test_array
         test_copy
         test_chaos
         test_dump
         test_dump_callback
         test_equal
         test_load
         test_loadb
         test_load_callback
         test_number
         test_object
         test_pack
         test_simple
         test_sprintf
         test_unpack)

   # Doing arithmetic on void pointers is not allowed by Microsofts compiler
   # such as secure_malloc and secure_free is doing, so exclude it for now.
   if (NOT MSVC)
      list(APPEND api_tests test_memory_funcs)
   endif()

   # Helper macro for building and linking a test program.
   macro(build_testprog name dir)
       add_executable(${name} ${dir}/${name}.c)
       add_dependencies(${name} jansson)
       target_link_libraries(${name} jansson)
   endmacro(build_testprog)

   # Create executables and tests/valgrind tests for API tests.
   foreach (test ${api_tests})
      build_testprog(${test} ${CMAKE_CURRENT_SOURCE_DIR}/test/suites/api)

      if (JANSSON_TEST_WITH_VALGRIND)
         add_test(memcheck__${test}
             ${MEMCHECK_COMMAND} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}
             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})
      else()
         add_test(${test}
             ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}
             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})
      endif ()
   endforeach ()

   # Test harness for the suites tests.
   build_testprog(json_process ${CMAKE_CURRENT_SOURCE_DIR}/test/bin)

   set(SUITE_TEST_CMD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/json_process)
   set(SUITES encoding-flags valid invalid invalid-unicode)
   foreach (SUITE ${SUITES})
       file(GLOB TESTDIRS test/suites/${SUITE}/*)

       foreach (TESTDIR ${TESTDIRS})
         if (IS_DIRECTORY ${TESTDIR})
            get_filename_component(TNAME ${TESTDIR} NAME)

            if (JANSSON_TEST_WITH_VALGRIND)
               add_test(memcheck__${SUITE}__${TNAME}
                        ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} ${TESTDIR})
            else()
               add_test(${SUITE}__${TNAME}
                        ${SUITE_TEST_CMD} ${TESTDIR})
            endif()

            if ((${SUITE} STREQUAL ""valid"" OR ${SUITE} STREQUAL ""invalid"") AND NOT EXISTS ${TESTDIR}/nostrip)
               if (JANSSON_TEST_WITH_VALGRIND)
                  add_test(memcheck__${SUITE}__${TNAME}__strip
                           ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} --strip ${TESTDIR})
               else()
                  add_test(${SUITE}__${TNAME}__strip
                           ${SUITE_TEST_CMD} --strip ${TESTDIR})
               endif()
            endif ()
         endif ()
       endforeach ()
   endforeach ()

   if (JANSSON_COVERAGE)
      setup_target_for_coverage(
            coverage             # Coverage make target ""make coverage"".
            coverage             # Name of output directory.
            make                 # Name of test runner executable.
            test)                # Arguments to the test runner above (make test).

      if (JANSSON_COVERALLS)
         set(COVERAGE_SRCS ${JANSSON_SRC})
         coveralls_setup(""${COVERAGE_SRCS}"" ${JANSSON_COVERALLS_UPLOAD})
      endif ()
   endif ()

   # Enable using ""make check"" just like the autotools project.
   # By default cmake creates a target ""make test""
   add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND}
                     DEPENDS json_process ${api_tests})
endif ()

#
# Installation preparation.
#

# Allow the user to override installation directories.
set(JANSSON_INSTALL_LIB_DIR       lib CACHE PATH ""Installation directory for libraries"")
set(JANSSON_INSTALL_BIN_DIR       bin CACHE PATH ""Installation directory for executables"")
set(JANSSON_INSTALL_INCLUDE_DIR   include CACHE PATH ""Installation directory for header files"")

if(WIN32 AND NOT CYGWIN)
  set(DEF_INSTALL_CMAKE_DIR cmake)
else()
  set(DEF_INSTALL_CMAKE_DIR lib/cmake/jansson)
endif()

set(JANSSON_INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH ""Installation directory for CMake files"")

# Create pkg-conf file.
# (We use the same files as ./configure does, so we
#  have to defined the same variables used there).
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(exec_prefix ""\${prefix}"")
set(libdir      ""\${exec_prefix}/${JANSSON_INSTALL_LIB_DIR}"")
set(includedir  ""\${prefix}/${JANSSON_INSTALL_INCLUDE_DIR}"")
set(VERSION     ${JANSSON_DISPLAY_VERSION})
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson.pc.in
               ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc @ONLY)

# Make sure the paths are relative.
foreach(p LIB BIN INCLUDE CMAKE)
    set(var JANSSON_INSTALL_${p}_DIR)
endforeach()

# Generate the config file for the build-tree.
set(JANSSON__INCLUDE_DIRS
    ""${CMAKE_CURRENT_SOURCE_DIR}/include""
    ""${CMAKE_CURRENT_BINARY_DIR}/include"")
set(JANSSON_INCLUDE_DIRS ${JANSSON__INCLUDE_DIRS} CACHE PATH ""Jansson include directories"")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/janssonConfig.cmake.in
               ${CMAKE_CURRENT_BINARY_DIR}/janssonConfig.cmake
               @ONLY)


# Generate the config file for the installation tree.
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
  ""${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake""
  VERSION ${JANSSON_VERSION}
  COMPATIBILITY ExactVersion
)

configure_package_config_file(
    ""cmake/janssonConfig.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake""
    INSTALL_DESTINATION ""${JANSSON_INSTALL_CMAKE_DIR}""
)

#
# Install targets.
#
option(JANSSON_INSTALL ""Generate installation target"" ON)
if (JANSSON_INSTALL)
  install(TARGETS jansson
          EXPORT janssonTargets
          LIBRARY DESTINATION ""lib""
          ARCHIVE DESTINATION ""lib""
          RUNTIME DESTINATION ""bin""
          INCLUDES DESTINATION ""include"")

  install(FILES ${JANSSON_HDR_PUBLIC}
          DESTINATION ""include"")

  # Install the pkg-config.
  install(FILES
          ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc
          DESTINATION lib/pkgconfig)

  # Install the configs.
  install(FILES
      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake
      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake
      DESTINATION ""${JANSSON_INSTALL_CMAKE_DIR}"")

  # Install exports for the install-tree.
  install(EXPORT janssonTargets
          NAMESPACE jansson::
          DESTINATION ""${JANSSON_INSTALL_CMAKE_DIR}"")
endif()

# For use when simply using add_library from a parent project to build jansson.
set(JANSSON_LIBRARIES jansson CACHE STRING ""jansson libraries"")
",3.1,3.1
11130,coder0xff,Plange,False,False,False,False,False,2,C++,2020-02-28 16:07:06+00:00,2015-11-11 05:17:50+00:00,9,777,"cmake_minimum_required (VERSION 3.10)
project(plange)
enable_testing()

if (MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /bigobj"") # MSVC++ fails without it
endif()

find_package(Git)
if (GIT_FOUND)
	mark_as_advanced(
		FORCE
		git_executable
	)
	message(INFO "" Initializing git submodules..."")
	execute_process(
		COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
else()
	message(WARNING "" Git was not found. Uninitialized git submodules must be initialized manually."")
endif()

function(add_googletest)
	set(BUILD_GMOCK OFF CACHE BOOL """")
	set(BUILD_GTEST ON CACHE BOOL """")
	set(INSTALL_GMOCK OFF CACHE BOOL """")
	set(INSTALL_GTEST ON CACHE BOOL """")
    set(gtest_force_shared_crt ON CACHE BOOL ""Force gtest to used shared VC++ CRT"")
	add_subdirectory(source/googletest)
	include_directories(""${gtest_SOURCE_DIR}/include"")
endfunction(add_googletest)
add_googletest()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(NOT MSVC) # Remove condition once CMAKE supports this with Visual Studio 2017
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
endif()

add_subdirectory(source/utilities)
add_subdirectory(source/mpl)
add_subdirectory(source/collections)
add_subdirectory(source/parlex)
add_subdirectory(source/plc)
add_subdirectory(source/grammar_gen)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT plc)

mark_as_advanced(
	FORCE
	BUILD_GMOCK
	BUILD_GTEST
	BUILD_SHARED_LIBS
	INSTALL_GTEST
	gtest_build_samples
	gtest_build_tests
	gtest_disable_pthreads
	gtest_force_shared_crt
	gtest_hide_internal_symbols
)
",3.10,3.1
11138,QMatrixClient,libqmatrixclient,False,False,False,False,False,26,C++,2020-04-22 19:52:19+00:00,2016-04-09 00:12:50+00:00,73,1726,"cmake_minimum_required(VERSION 3.10)
if (POLICY CMP0092)
cmake_policy(SET CMP0092 NEW)
endif()

set(API_VERSION ""0.6"")
project(Quotient VERSION ""${API_VERSION}.0"" LANGUAGES CXX)

option(${PROJECT_NAME}_INSTALL_TESTS ""install quotest (former qmc-example) application"" ON)
# https://github.com/quotient-im/libQuotient/issues/369
option(${PROJECT_NAME}_ENABLE_E2EE ""end-to-end encryption (E2EE) support"" OFF)

include(CheckCXXCompilerFlag)
if (WIN32)
    if (NOT CMAKE_INSTALL_LIBDIR)
        set(CMAKE_INSTALL_LIBDIR ""."")
    endif ()

    if (NOT CMAKE_INSTALL_BINDIR)
        set(CMAKE_INSTALL_BINDIR ""."")
    endif ()

    if (NOT CMAKE_INSTALL_INCLUDEDIR)
        set(CMAKE_INSTALL_INCLUDEDIR ""include"")
    endif ()
else()
    include(GNUInstallDirs)
    set(INCLUDEDIR_INIT ${PROJECT_NAME})
endif(WIN32)
set(${PROJECT_NAME}_INSTALL_INCLUDEDIR
        ""${CMAKE_INSTALL_INCLUDEDIR}/${INCLUDEDIR_INIT}"" CACHE PATH
        ""directory to install ${PROJECT_NAME} include files to"")

# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Debug' as none was specified"")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING ""Choose the type of build"" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

if (MSVC)
    add_compile_options(/EHsc /W4
        /wd4100 /wd4127 /wd4242 /wd4244 /wd4245 /wd4267 /wd4365 /wd4456 /wd4459
        /wd4464 /wd4505 /wd4514 /wd4571 /wd4619 /wd4623 /wd4625 /wd4626 /wd4706
        /wd4710 /wd4774 /wd4820 /wd4946 /wd5026 /wd5027)
else()
    foreach (FLAG all """" pedantic extra error=return-type no-unused-parameter
                  no-gnu-zero-variadic-macro-arguments)
        CHECK_CXX_COMPILER_FLAG(""-W${FLAG}"" WARN_${FLAG}_SUPPORTED)
        if ( WARN_${FLAG}_SUPPORTED AND NOT CMAKE_CXX_FLAGS MATCHES ""(^| )-W?${FLAG}($| )"")
            add_compile_options(-W${FLAG})
        endif ()
    endforeach ()
endif()

find_package(Qt5 5.9 REQUIRED Network Gui Multimedia Test)
get_filename_component(Qt5_Prefix ""${Qt5_DIR}/../../../.."" ABSOLUTE)

if (${PROJECT_NAME}_ENABLE_E2EE)
    if ((NOT DEFINED USE_INTREE_LIBQOLM OR USE_INTREE_LIBQOLM)
            AND EXISTS ${PROJECT_SOURCE_DIR}/3rdparty/libQtOlm/lib/utils.h)
        add_subdirectory(3rdparty/libQtOlm)
        include_directories(3rdparty/libQtOlm)
        if (NOT DEFINED USE_INTREE_LIBQOLM)
            set (USE_INTREE_LIBQOLM 1)
        endif ()
    endif ()
    if (NOT USE_INTREE_LIBQOLM)
        set(SAVED_CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})
        set(CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})
        find_package(QtOlm 3.0.1 REQUIRED)
        if (NOT QtOlm_FOUND)
            message( WARNING ""libQtOlm not found; configuration will most likely fail."")
            message( WARNING ""Make sure you have installed libQtOlm development files"")
            message( WARNING ""as a package or checked out the library sources in lib/."")
            message( WARNING ""See also BUILDING.md"")
        endif ()
    endif ()
else ()
    message( STATUS ""End-to-end encryption (E2EE) support is turned off."")
endif ()

if (GTAD_PATH)
    get_filename_component(ABS_GTAD_PATH ""${GTAD_PATH}"" REALPATH)
endif ()
if (MATRIX_DOC_PATH)
    get_filename_component(ABS_API_DEF_PATH ""${MATRIX_DOC_PATH}/api"" REALPATH)
endif ()
if (ABS_GTAD_PATH AND ABS_API_DEF_PATH)
    if (NOT CLANG_FORMAT)
        set(CLANG_FORMAT clang-format)
    endif()
    get_filename_component(ABS_CLANG_FORMAT ""${CLANG_FORMAT}"" PROGRAM)
endif()

message( STATUS )
message( STATUS ""============================================================================="" )
message( STATUS ""                       ${PROJECT_NAME} Build Information"" )
message( STATUS ""============================================================================="" )
message( STATUS ""Version: ${PROJECT_VERSION}, API version: ${API_VERSION}"")
if (CMAKE_BUILD_TYPE)
    message( STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
endif(CMAKE_BUILD_TYPE)
message( STATUS ""Using compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}"" )
message( STATUS ""Install Prefix: ${CMAKE_INSTALL_PREFIX}"" )
message( STATUS ""  Header files will be installed to ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDEDIR}"" )
message( STATUS ""Using Qt ${Qt5_VERSION} at ${Qt5_Prefix}"" )
if (ABS_API_DEF_PATH AND ABS_GTAD_PATH)
    message( STATUS ""Generating API stubs enabled (use --target update-api)"" )
    message( STATUS ""  Using GTAD at ${ABS_GTAD_PATH}"" )
    message( STATUS ""  Using API files at ${ABS_API_DEF_PATH}"" )
    if (ABS_CLANG_FORMAT)
        message( STATUS ""clang-format is at ${ABS_CLANG_FORMAT}"")
    else ()
        message( STATUS ""${CLANG_FORMAT} is NOT FOUND; API files won't be reformatted"")
    endif ()
endif ()
find_package(Git)
if (${PROJECT_NAME}_ENABLE_E2EE)
    if (USE_INTREE_LIBQOLM)
        message( STATUS ""Using in-tree libQtOlm"")
        if (GIT_FOUND)
            execute_process(COMMAND
                ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
                WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/3rdparty/libQtOlm
                OUTPUT_VARIABLE QTOLM_GIT_SHA1
                OUTPUT_STRIP_TRAILING_WHITESPACE)
            message( STATUS ""  Library git SHA1: ${QTOLM_GIT_SHA1}"")
        endif (GIT_FOUND)
    else ()
        message( STATUS ""Using libQtOlm ${QtOlm_VERSION} at ${QtOlm_DIR}"")
    endif ()
endif ()
message( STATUS ""============================================================================="" )
message( STATUS )

# Set up source files
set(lib_SRCS
    lib/networkaccessmanager.cpp
    lib/connectiondata.cpp
    lib/connection.cpp
    lib/ssosession.cpp
    lib/logging.cpp
    lib/room.cpp
    lib/user.cpp
    lib/avatar.cpp
    lib/syncdata.cpp
    lib/settings.cpp
    lib/networksettings.cpp
    lib/converters.cpp
    lib/util.cpp
    lib/encryptionmanager.cpp
    lib/eventitem.cpp
    lib/events/event.cpp
    lib/events/roomevent.cpp
    lib/events/stateevent.cpp
    lib/events/eventcontent.cpp
    lib/events/roomcreateevent.cpp
    lib/events/roomtombstoneevent.cpp
    lib/events/roommessageevent.cpp
    lib/events/roommemberevent.cpp
    lib/events/roompowerlevelsevent.cpp
    lib/events/typingevent.cpp
    lib/events/receiptevent.cpp
    lib/events/reactionevent.cpp
    lib/events/callanswerevent.cpp
    lib/events/callcandidatesevent.cpp
    lib/events/callhangupevent.cpp
    lib/events/callinviteevent.cpp
    lib/events/directchatevent.cpp
    lib/events/encryptionevent.cpp
    lib/events/encryptedevent.cpp
    lib/events/roomkeyevent.cpp
    lib/jobs/requestdata.cpp
    lib/jobs/basejob.cpp
    lib/jobs/syncjob.cpp
    lib/jobs/mediathumbnailjob.cpp
    lib/jobs/downloadfilejob.cpp
)

set(CSAPI_DIR csapi)
set(ASAPI_DEF_DIR application-service/definitions)
set(ISAPI_DEF_DIR identity/definitions)

foreach (D ${CSAPI_DIR} ${CSAPI_DIR}/definitions
         ${CSAPI_DIR}/definitions/wellknown ${ASAPI_DEF_DIR} ${ISAPI_DEF_DIR})
    aux_source_directory(lib/${D} api_SRCS)
endforeach()

# Make no mistake: CMake cannot run gtad first and then populate the list of
# resulting api_SRCS files. In other words, placing the above foreach after
# the custom targets definition won't bring the desired result:
# CMake will execute it at cmake invocation and gtad will only run later
# when building the update-api target. If you see that gtad has created
# new files you have to re-run cmake.
# TODO: check `file(GLOB_RECURSE ... CONFIGURE_DEPENDS)` (from CMake 3.14)
if (MATRIX_DOC_PATH AND GTAD_PATH)
    set(FULL_CSAPI_DIR lib/${CSAPI_DIR})
    set(FULL_CSAPI_SRC_DIR ${ABS_API_DEF_PATH}/client-server)
    file(GLOB_RECURSE API_DEFS RELATIVE ${PROJECT_SOURCE_DIR}
        ${FULL_CSAPI_SRC_DIR}/*.yaml
        ${ABS_API_DEF_PATH}/${ASAPI_DEF_DIR}/*.yaml
        ${ABS_API_DEF_PATH}/${ISAPI_DEF_DIR}/*.yaml
    )
    add_custom_target(update-api
        ${ABS_GTAD_PATH} --config ${CSAPI_DIR}/gtad.yaml --out ${CSAPI_DIR}
            ${FULL_CSAPI_SRC_DIR}
            old_sync.yaml- room_initial_sync.yaml- # deprecated
            search.yaml- # current GTAD is limited in handling move-only data
            sync.yaml- # we have a better handcrafted implementation
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/lib
        SOURCES ${FULL_CSAPI_DIR}/gtad.yaml
                ${FULL_CSAPI_DIR}/{{base}}.h.mustache
                ${FULL_CSAPI_DIR}/{{base}}.cpp.mustache
                ${API_DEFS}
        VERBATIM
    )
    if (ABS_CLANG_FORMAT)
        # TODO: list(TRANSFORM) is available from CMake 3.12
        foreach (S ${api_SRCS})
            string (REGEX REPLACE "".cpp$"" "".h"" H ${S})
            list(APPEND api_HDRS ${H})
        endforeach()
        set(CLANG_FORMAT_ARGS -i -sort-includes ${CLANG_FORMAT_ARGS})
        add_custom_command(TARGET update-api POST_BUILD
            COMMAND ${ABS_CLANG_FORMAT} ${CLANG_FORMAT_ARGS} ${api_SRCS}
            COMMAND ${ABS_CLANG_FORMAT} ${CLANG_FORMAT_ARGS} ${api_HDRS}
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            VERBATIM
            COMMENT Formatting files
        )
    endif()
endif()

set(tests_SRCS tests/quotest.cpp)

add_library(${PROJECT_NAME} ${lib_SRCS} ${api_SRCS})
if (${PROJECT_NAME}_ENABLE_E2EE)
    target_compile_definitions(${PROJECT_NAME} PUBLIC ${PROJECT_NAME}_E2EE_ENABLED)
endif()
set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION ""${PROJECT_VERSION}""
    SOVERSION ${API_VERSION}
    INTERFACE_${PROJECT_NAME}_MAJOR_VERSION ${API_VERSION}
)
set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY
             COMPATIBLE_INTERFACE_STRING ${PROJECT_NAME}_MAJOR_VERSION)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)

target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
    $<INSTALL_INTERFACE:${${PROJECT_NAME}_INSTALL_INCLUDEDIR}>
)
if (${PROJECT_NAME}_ENABLE_E2EE)
    target_link_libraries(${PROJECT_NAME} QtOlm)
    set(FIND_DEPS ""find_dependency(QtOlm)"") # For QuotientConfig.cmake.in
endif()
target_link_libraries(${PROJECT_NAME} Qt5::Core Qt5::Network Qt5::Gui Qt5::Multimedia)

set(TEST_BINARY quotest)
add_executable(${TEST_BINARY} ${tests_SRCS})
target_link_libraries(${TEST_BINARY} Qt5::Core Qt5::Test ${PROJECT_NAME})

configure_file(${PROJECT_NAME}.pc.in ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY NEWLINE_STYLE UNIX)

# Installation

install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        INCLUDES DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDEDIR}
)
install(DIRECTORY lib/ DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN ""*.h"")

include(CMakePackageConfigHelpers)
# NB: SameMajorVersion doesn't really work yet, as we're within 0.x trail.
# Maybe consider jumping the gun and releasing 1.0, as semver advises?
write_basic_package_version_file(
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake""
    COMPATIBILITY SameMajorVersion
)

export(PACKAGE ${PROJECT_NAME})
export(EXPORT ${PROJECT_NAME}Targets
       FILE ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Targets.cmake"")
configure_file(cmake/${PROJECT_NAME}Config.cmake.in
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake""
    @ONLY
)

set(ConfigFilesLocation ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"")
install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake DESTINATION ${ConfigFilesLocation})

install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake""
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake""
    DESTINATION ${ConfigFilesLocation}
)
install(EXPORT_ANDROID_MK ${PROJECT_NAME}Targets DESTINATION share/ndk-modules)

if (WIN32)
    install(FILES mime/packages/freedesktop.org.xml DESTINATION mime/packages)
endif (WIN32)

if (${PROJECT_NAME}_INSTALL_TESTS)
    install(TARGETS ${TEST_BINARY} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endif ()

if (UNIX AND NOT APPLE)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()
",3.10,3.1
11176,KDE,kmymoney,False,False,False,False,False,53,C++,2020-05-17 09:40:45+00:00,2015-09-18 12:19:55+00:00,57,6354,"# The CMake version we require
cmake_minimum_required(VERSION 3.1)

# Setting the name of the main project
project(KMyMoney VERSION ""5.0.80"" LANGUAGES CXX)

# Determine the GIT reference (if we're based on GIT)
if(EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/.git"")
  execute_process(COMMAND git rev-parse --short HEAD WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}"" OUTPUT_VARIABLE VERSION_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(VERSION_SUFFIX ""-${VERSION_SUFFIX}"")
  # Add variables which are similar to the build in names of cmake
  set(PROJECT_VERSION_SUFFIX ""${VERSION_SUFFIX}"")
  set(${PROJECT_NAME}_VERSION_SUFFIX ""${VERSION_SUFFIX}"")
elseif(DEFINED VERSION_SUFFIX)
  string(REGEX REPLACE ""-*(.+)"" ""\\1"" DASHFREE_SUFFIX ""${VERSION_SUFFIX}"")
  set(PROJECT_VERSION_SUFFIX ""-${DASHFREE_SUFFIX}"")
  set(${PROJECT_NAME}_VERSION_SUFFIX ""-${DASHFREE_SUFFIX}"")
endif()

# Automoc all sources
set(CMAKE_AUTOMOC TRUE)
list(APPEND CMAKE_AUTOMOC_MACRO_NAMES ""K_PLUGIN_FACTORY"" ""K_PLUGIN_FACTORY_WITH_JSON"")

if (POLICY CMP0063)
  cmake_policy(SET CMP0063 NEW) # Policy introduced in CMake version 3.3
endif()
if (POLICY CMP0071)
  # We do not require the old behaviour. It is only set to old, to prevent accidential use of
  # the new behavour. If the new behaviour becomes important, cmake_minimum_required has to be
  # set to ""3.10"".
  cmake_policy(SET CMP0071 OLD) # Policy introduced in CMake version 3.10
endif()


######################### General Requirements ##########################

if (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0.0)
    message(FATAL_ERROR ""This version of KMyMoney requires at least gcc 6.0.0 to be built successfully"")
endif()

find_package(ECM 5.42 REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH} ${ECM_KDE_MODULE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)

include(KDEInstallDirs)
include(KDECMakeSettings)
# reimplementation because kmymoney app image is bound to ECM 5.36
if(""${ECM_GLOBAL_FIND_VERSION}"" VERSION_LESS ""5.38.0"")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
  if(WIN32)
     set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
  else()
     set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
  endif()
elseif(NOT WIN32)
   set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
endif()

include(FeatureSummary)
include(CMakeDependentOption)

include(GenerateExportHeader)
include(KMyMoneyMacros)

find_package(PkgConfig)

set (OPT_KF5_COMPONENTS DocTools Holidays Contacts Akonadi IdentityManagement Activities)
find_package(Gpgmepp)
if (Gpgmepp_FOUND)
  set(GPG_FOUND TRUE)
else()
  set(GPG_FOUND FALSE)
  list(APPEND OPT_KF5_COMPONENTS Gpgmepp)
endif()

if (PkgConfig_FOUND)
  pkg_check_modules(SQLCIPHER sqlcipher IMPORTED_TARGET)
  pkg_check_modules(LIBOFX libofx IMPORTED_TARGET)
endif()

find_package(Qt5 5.6 REQUIRED
  COMPONENTS Core DBus Widgets Svg Xml Test PrintSupport
  OPTIONAL_COMPONENTS Sql Concurrent QuickWidgets)

find_package(KF5 5.2 REQUIRED
  COMPONENTS Archive CoreAddons Config ConfigWidgets I18n Completion KCMUtils ItemModels ItemViews Service Wallet IconThemes XmlGui TextWidgets Notifications KIO
  OPTIONAL_COMPONENTS ${OPT_KF5_COMPONENTS}
)

if(LibAlkimia5_DIR)
  set(_LibAlkimia5_DIR ${LibAlkimia5_DIR})
endif()
find_package(LibAlkimia5 8.0)
if (NOT LibAlkimia5_FOUND)
  # restore LibAlkimia5_DIR set to NOTFOUND by first find_package call
  if(_LibAlkimia5_DIR)
    set(LibAlkimia5_DIR ${_LibAlkimia5_DIR})
  endif()
  find_package(LibAlkimia5 7.0 REQUIRED)
endif()

# Recent changes to LibAlkimia should allow us to remove this construct
#if(CMAKE_SYSTEM_NAME MATCHES ""Windows"")
#  include_directories(${GMP_INCLUDE_DIR})
#endif()

find_package(KChart 2.6.0)

if(KF5Gpgmepp_FOUND)
  set(GPG_FOUND TRUE)
endif()

cmake_dependent_option(ENABLE_GPG ""Enable GPG support."" ON
                       ""GPG_FOUND"" OFF)

add_feature_info(""Encryption"" ENABLE_GPG ""Allows to store your financial data using strong GPG encryption."")

add_definitions(-DQT_USE_QSTRINGBUILDER -DQT_NO_CAST_TO_ASCII -DQT_NO_URL_CAST_FROM_STRING)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# use DBus only on Linux
if(CMAKE_SYSTEM_NAME MATCHES ""Linux"")
  set(KMM_DBUS 1)
endif()

set(CMAKE_INCLUDE_CURRENT_DIR ON)
include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})

# check for Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
  set(APIDOC_DIR ${CMAKE_CURRENT_BINARY_DIR}/apidocs)

  make_directory(""${APIDOC_DIR}"")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/kmymoney.doxygen.in ${CMAKE_CURRENT_BINARY_DIR}/kmymoney.doxygen IMMEDIATE)

  add_custom_target(apidoc ""${DOXYGEN}"" ""${CMAKE_CURRENT_BINARY_DIR}/kmymoney.doxygen"")
endif(DOXYGEN_FOUND)
add_feature_info(""Doxygen"" DOXYGEN_FOUND ""Generate API documentation with Doxygen (for devs only)."")

# check some include files exists
set(CMAKE_REQUIRED_DEFINITIONS -D_XOPEN_SOURCE=500 -D_BSD_SOURCE)
include (CheckIncludeFileCXX)
check_include_file_cxx(""unistd.h"" HAVE_UNISTD_H)
check_include_file_cxx(""pwd.h"" HAVE_PWD_H)
check_include_file_cxx(""windows.h"" HAVE_WINDOWS_H)
check_include_file_cxx(""lmcons.h"" HAVE_LMCONS_H)
check_include_file_cxx(""process.h"" HAVE_PROCESS_H)

# include check for members in structs
include (CheckStructHasMember)

######################### Special Requirements ##########################

# This is needed for QtSqlite and QtDesigner
# (they'll install files to ${QT_INSTALL_DIR}/plugins/)
get_filename_component(QT_BIN_DIR ""${QT_MOC_EXECUTABLE}"" PATH)
get_filename_component(QT_DIR     ${QT_BIN_DIR}        PATH)
set(QT_INSTALL_DIR ${QT_DIR} CACHE PATH
  ""Qt install prefix defaults to the Qt prefix: ${QT_DIR}"")

cmake_dependent_option(ENABLE_ADDRESSBOOK ""Enable addressbook support."" ON
                       ""KF5IdentityManagement_FOUND;KF5Akonadi_FOUND;KF5Contacts_FOUND"" OFF)

add_feature_info(""Address book"" ENABLE_ADDRESSBOOK ""Allows fetching payee information from KDE PIM system."")

cmake_dependent_option(ENABLE_HOLIDAYS ""Enable addressbook support."" ON
                       ""KF5Holidays_FOUND"" OFF)

add_feature_info(""Holidays"" ENABLE_HOLIDAYS ""Allows fetching holidays from KDE PIM system."")

cmake_dependent_option(ENABLE_ACTIVITIES ""Enable activities support."" ON
                       ""KF5Activities_FOUND"" OFF)

option(ENABLE_FORECASTVIEW ""Enable forecast view"" ON)
add_feature_info(""Forecast view"" ENABLE_FORECASTVIEW ""Adds possibility to calculate forecasts."")
cmake_dependent_option(ENABLE_REPORTSVIEW ""Enable reports view."" ON
                       ""KChart_FOUND"" OFF)
add_feature_info(""Reports view"" ENABLE_REPORTSVIEW ""Adds possibility to display chart and table reports."")
option(ENABLE_BUDGETVIEW ""Enable budget view"" ON)
add_feature_info(""Budget view"" ENABLE_BUDGETVIEW ""Adds possibility to plan a budget."")
option(ENABLE_ONLINEJOBOUTBOXVIEW ""Enable online job outbox view"" ON)
add_feature_info(""Online job outbox view"" ENABLE_ONLINEJOBOUTBOXVIEW ""Adds outbox for sending online jobs."")

cmake_dependent_option(ENABLE_SQLSTORAGE ""Enable SQL storage support."" ON
                       ""Qt5Sql_FOUND"" OFF)

add_feature_info(""SQL Storage"" ENABLE_SQLSTORAGE ""Allows storing your financial data in SQL database."")

cmake_dependent_option(ENABLE_SQLCIPHER ""Enable SQLCipher support."" ON
                       ""SQLCIPHER_FOUND"" OFF)

# Otherwise compilers halt on something like that:
# ld: library not found for -lsqlcipher
# on MS Windows, FreeBSD, macOS, and Ubuntu 14.04 (Ubuntu has CMake 3.5.1 but I'm not sure if it's the one to blame).
if(ENABLE_SQLCIPHER AND (NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" OR CMAKE_VERSION VERSION_LESS 3.5.2))
  link_directories(${SQLCIPHER_LIBRARY_DIRS})
endif()

add_feature_info(""SQLCipher"" ENABLE_SQLCIPHER ""Allows encrypting your SQLite3 database."")

cmake_dependent_option(ENABLE_IBANBICDATA ""Enable IBAN/BIC data support."" OFF
                       ""Qt5Sql_FOUND"" OFF)

add_feature_info(""IBAN/BIC data"" ENABLE_IBANBICDATA ""Adds predefined IBAN/BIC numbers to KMyMoney (note: doesn't work yet)."")

# check for optional QWebEngine
option(ENABLE_WEBENGINE ""Enable QWebEngine"" OFF)
if(ENABLE_WEBENGINE)
  find_package(Qt5WebEngineWidgets 5.8 REQUIRED)
  if(Qt5WebEngineWidgets_VERSION VERSION_GREATER 5.8.99 AND Qt5WebEngineWidgets_VERSION VERSION_LESS 5.9.3)
    message(WARNING ""QWebEngine version ${Qt5WebEngineWidgets_VERSION} is known to be unstable with KMyMoney"")
  endif()
else(ENABLE_WEBENGINE)
  find_package(KF5WebKit REQUIRED)
endif(ENABLE_WEBENGINE)

# check for optional LibOFX support
cmake_dependent_option(ENABLE_OFXIMPORTER ""Enable OFX Importer"" ON
                       ""LIBOFX_FOUND"" OFF)

if(ENABLE_OFXIMPORTER)
  if(NOT LIBOFX_HAVE_CLIENTUID)
    get_target_property(PATH_TO_LIBOFX_HEADER PkgConfig::LIBOFX INTERFACE_INCLUDE_DIRECTORIES )
    if (""${PATH_TO_LIBOFX_HEADER}"" STREQUAL ""PATH_TO_LIBOFX_HEADER-NOTFOUND"")
      set(PATH_TO_LIBOFX_HEADER ${LIBOFX_INCLUDEDIR})
    endif()
    set(PATH_TO_LIBOFX_HEADER ""${PATH_TO_LIBOFX_HEADER}/libofx/libofx.h"")
    unset(LIBOFX_HAVE_CLIENTUID)
    unset(LIBOFX_HAVE_CLIENTUID CACHE) #not doing this will prevent updating below check
    check_struct_has_member(""struct OfxFiLogin"" clientuid ${PATH_TO_LIBOFX_HEADER} LIBOFX_HAVE_CLIENTUID LANGUAGE CXX)
  endif()

  if (LIBOFX_HAVE_CLIENTUID)
    set (nice_LIBOFX_HAVE_CLIENTUID ""yes"")
  else()
    set (nice_LIBOFX_HAVE_CLIENTUID ""no"")
  endif()

else()
  set (nice_LIBOFX_HAVE_CLIENTUID ""unknown"")
  unset(LIBOFX_HAVE_CLIENTUID)
  unset(LIBOFX_HAVE_CLIENTUID CACHE)
endif(ENABLE_OFXIMPORTER)

add_feature_info(""OFX Importer"" ENABLE_OFXIMPORTER ""Allows importing OFX files (have client uid version: ${nice_LIBOFX_HAVE_CLIENTUID})"" )

# check for optional KBanking support
find_package(aqbanking 6.0.1)
find_package(gwenhywfar 5.1.2)
find_package(gwengui-cpp)
find_package(gwengui-qt5)

cmake_dependent_option(ENABLE_KBANKING ""Enable KBanking plugin"" ON
                       ""AQBANKING_FOUND;gwengui-cpp_FOUND;gwengui-qt5_FOUND;Qt5QuickWidgets_FOUND"" OFF)

add_feature_info(KBanking ENABLE_KBANKING ""Interface for the following online banking protocols: HBCI, EBICS, OFX Direct Connect, Paypal"")

# check for optional Weboob support
set(Python_ADDITIONAL_VERSIONS 2.7 2.6)
find_package(PythonInterp 2.6)
find_package(PythonLibs ${PYTHON_VERSION_STRING})

if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND)
  if(NOT PYTHON_VERSION_MAJOR VERSION_LESS 3)
    unset(PYTHONLIBS_FOUND)
    unset(PYTHONINTERP_FOUND)
    message(WARNING ""Python 2 required, but Python 3 found."")
  else()
    include(FindPythonModule)
    find_python_module(weboob REQUIRED)
  endif()
endif()

cmake_dependent_option(ENABLE_WEBOOB ""Enable Weboob plugin"" ON
                       ""PYTHONLIBS_FOUND;PYTHONINTERP_FOUND;PY_WEBOOB;Qt5Concurrent_FOUND"" OFF)
add_feature_info(Weboob ENABLE_WEBOOB ""Online banking interface using Weboob."")


# check for optional ical support
find_package(Libical)
cmake_dependent_option(ENABLE_LIBICAL ""Enable Calendar plugin"" ON
                       ""LIBICAL_FOUND"" OFF)
add_feature_info(iCalendar ENABLE_LIBICAL ""iCalendar integration."")


option(ENABLE_QIFIMPORTER ""Enable QIF Importer"" ON)
option(ENABLE_QIFEXPORTER ""Enable QIF Exporter"" ON)
add_feature_info(""QIF Importer"" ENABLE_QIFIMPORTER ""Allows importing QIF files."")
add_feature_info(""QIF Exporter"" ENABLE_QIFEXPORTER ""Allows exporting QIF files."")

option(ENABLE_GNCIMPORTER ""Enable GNC Importer"" ON)
add_feature_info(""GNC Importer"" ENABLE_GNCIMPORTER ""Allows importing GNUCash files."")

option(ENABLE_CSVIMPORTER ""Enable CSV Importer"" ON)
option(ENABLE_CSVEXPORTER ""Enable CSV Exporter"" ON)
add_feature_info(""CSV Importer"" ENABLE_CSVIMPORTER ""Allows importing CSV files."")
add_feature_info(""CSV Exporter"" ENABLE_CSVEXPORTER ""Allows exporting CSV files."")

option(ENABLE_UNFINISHEDFEATURES ""For devs only"" OFF)
add_feature_info(""New features"" ENABLE_CSVEXPORTER ""Compiles unfinished features for testing."")

add_feature_info(""prefix.sh"" KDE_INSTALL_PREFIX_SCRIPT ""create prefix.sh script to support local execution"")

# TODO: this should be removed
enable_testing()

######################### Settings ##########################

# If no build type is set, use ""Release with Debug Info""
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_BUILD_TYPE ""${CMAKE_BUILD_TYPE}"" CACHE STRING
  ""Choose the type of build.
Possible values are: 'Release' 'RelWithDebInfo' 'Debug' 'DebugKMM' 'Debugfull' 'Profile'
The default value is: 'RelWithDebInfo'"" FORCE)

# tells gcc to enable exception handling
include(KDECompilerSettings)
kde_enable_exceptions()

# Set linker flags

# There is no way to detect linker in cmake (see https://gitlab.kitware.com/cmake/cmake/issues/17596)
# and linkers aren't compatible with each other, so we need to assume something
if(CMAKE_CXX_COMPILER_ID MATCHES ""AppleClang"")
  set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,-dead_strip -Wl,-undefined,error"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,-dead_strip -Wl,-undefined,error -Wl,-mark_dead_strippable_dylib"")
  set(CMAKE_EXE_LINKER_FLAGS    ""${CMAKE_EXE_LINKER_FLAGS}    -Wl,-dead_strip -Wl,-undefined,error"")

elseif(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--as-needed"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--as-needed"")
  # TODO: remove multiple definitions of payeeIdentifierLoader::createPayeeIdentifierFromSqlDatabase
  set(CMAKE_EXE_LINKER_FLAGS    ""${CMAKE_EXE_LINKER_FLAGS} -Wl,--as-needed -Wl,--allow-multiple-definition"")
  # CI builds are crashing on FreeBSD with --no-undefined. Probably because -DECM_ENABLE_SANITIZERS='address'
  # more can be read on the following site https://bugs.freedesktop.org/show_bug.cgi?id=100120
  if(NOT CMAKE_SYSTEM_NAME MATCHES ""FreeBSD"")
    set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--no-undefined"")
    set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined"")
    set(CMAKE_EXE_LINKER_FLAGS    ""${CMAKE_EXE_LINKER_FLAGS}    -Wl,--no-undefined"")
  endif()

  # TODO: remove multiple definitions of payeeIdentifierLoader::hasItemEditDelegate
  if(CMAKE_SYSTEM_NAME MATCHES ""Windows"")
    set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--allow-multiple-definition"")
    set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--allow-multiple-definition"")
  endif()

elseif(CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /FORCE:Multiple"")
endif()

# Set compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wlogical-op -Wno-null-dereference -Wshadow -Wunused -Wno-misleading-indentation -Wsuggest-override -Wcast-qual -Wformat=2 -fno-common"")

elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" OR CMAKE_CXX_COMPILER_ID MATCHES ""AppleClang"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wcast-qual -Wformat=2 -Wunreachable-code -fno-common"")

elseif(CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /experimental:external /external:anglebrackets /external:W0 /W3"")
endif()


# IDEA: Set on a per target base
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" OR CMAKE_CXX_COMPILER_ID MATCHES ""AppleClang"")
  # DebugKMM, Debugfull, Profile
  set(CMAKE_CXX_FLAGS_DEBUGKMM
      ""-g -O2 -fno-reorder-blocks -fno-schedule-insns -fno-inline"")
  set(CMAKE_CXX_FLAGS_DEBUGFULL
      ""-g3 -fno-inline"")
  set(CMAKE_CXX_FLAGS_PROFILE
      ""-g3 -fno-inline -ftest-coverage -fprofile-arcs"")

  # preprocessor definitions in case this is a debug build
  set(CMAKE_CXX_FLAGS_DEBUGFULL ""${CMAKE_CXX_FLAGS_DEBUGFULL} -DQT_STRICT_ITERATORS -DKMM_DEBUG -DQT_FORCE_ASSERTS"")
  set(CMAKE_CXX_FLAGS_DEBUGKMM  ""${CMAKE_CXX_FLAGS_DEBUGFULL} -DKMM_DEBUG -DQT_FORCE_ASSERTS"")
endif()

option(USE_MODELTEST
  ""Compile with ModelTest code (default=OFF)"" OFF)

add_feature_info(""Model test"" USE_MODELTEST ""Generate modeltest code (for devs only)."")

option(USE_QT_DESIGNER
  ""Install KMyMoney specific widget library for Qt-Designer (default=OFF)"" OFF)

add_feature_info(""QtDesigner"" USE_QT_DESIGNER ""Qt-Designer library support (for devs only)."")

######################### The Actual Targets ##########################
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
if(WIN32)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
else()
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
endif()

add_subdirectory( tools )
add_subdirectory( kmymoney )
if(KF5DocTools_FOUND)
  add_subdirectory( doc )
endif()

######################### Output Results #############################

# create the config.h file out of the config.h.cmake
configure_file(""config-kmymoney.h.cmake"" ""${CMAKE_CURRENT_BINARY_DIR}/config-kmymoney.h"")
configure_file(""config-kmymoney-version.h.cmake"" ""${CMAKE_CURRENT_BINARY_DIR}/config-kmymoney-version.h"")

message(""
Build type: ${CMAKE_BUILD_TYPE}"")

feature_summary(WHAT REQUIRED_PACKAGES_NOT_FOUND
                DESCRIPTION ""The following REQUIRED packages have not been found:"")

feature_summary(WHAT OPTIONAL_PACKAGES_NOT_FOUND
                DESCRIPTION ""The following OPTIONAL packages have not been found:"")

feature_summary(WHAT ENABLED_FEATURES
                DESCRIPTION ""The following features have been enabled:"")

feature_summary(WHAT DISABLED_FEATURES
                DESCRIPTION ""The following features have been disabled:"")
",3.1,3.1
11183,QuantStack,xtensor-python,False,False,False,False,False,20,C++,2020-04-04 17:22:08+00:00,2016-11-11 00:18:30+00:00,225,374,"############################################################################
# Copyright (c) Wolf Vollprecht, Johan Mabille and Sylvain Corlay          #
# Copyright (c) QuantStack                                                 #
#                                                                          #
# Distributed under the terms of the BSD 3-Clause License.                 #
#                                                                          #
# The full license is in the file LICENSE, distributed with this software. #
############################################################################

cmake_minimum_required(VERSION 3.1)
project(xtensor-python)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
set(XTENSOR_PYTHON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Versioning
# ==========

set(XTENSOR_PYTHON_CONFIG_FILE
    ""${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/xtensor_python_config.hpp"")
file(STRINGS ${XTENSOR_PYTHON_CONFIG_FILE} xtensor_python_version_defines
    REGEX ""#define XTENSOR_PYTHON_VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${xtensor_python_version_defines})
    if(ver MATCHES ""#define XTENSOR_PYTHON_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(XTENSOR_PYTHON_VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(${PROJECT_NAME}_VERSION 
    ${XTENSOR_PYTHON_VERSION_MAJOR}.${XTENSOR_PYTHON_VERSION_MINOR}.${XTENSOR_PYTHON_VERSION_PATCH})
message(STATUS ""xtensor-python v${${PROJECT_NAME}_VERSION}"")

# Dependencies
# ============

set(xtensor_REQUIRED_VERSION 0.21.2)
if(TARGET xtensor)
    set(xtensor_VERSION ${XTENSOR_VERSION_MAJOR}.${XTENSOR_VERSION_MINOR}.${XTENSOR_VERSION_PATCH})
    # Note: This is not SEMVER compatible comparison
    if( NOT ${xtensor_VERSION} VERSION_GREATER_EQUAL ${xtensor_REQUIRED_VERSION})
        message(ERROR ""Mismatch xtensor versions. Found '${xtensor_VERSION}' but requires: '${xtensor_REQUIRED_VERSION}'"")
    else()
        message(STATUS ""Found xtensor v${xtensor_VERSION}"")
    endif()
else()
    find_package(xtensor ${xtensor_REQUIRED_VERSION} REQUIRED)
    message(STATUS ""Found xtensor: ${xtensor_INCLUDE_DIRS}/xtensor"")
endif()
    
# Currently no required version for pybind11
if(TARGET pybind11)
    # pybind11 has a variable that indicates its version already, so use that
    message(STATUS ""Found pybind11 v${pybind11_VERSION}"")
else()
    find_package(pybind11 REQUIRED)
    message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIRS}/pybind11"")
endif()

find_package(NumPy REQUIRED)
message(STATUS ""Found numpy: ${NUMPY_INCLUDE_DIRS}"")

# Build
# =====

set(XTENSOR_PYTHON_HEADERS
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pyarray.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pyarray_backstrides.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pycontainer.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pystrides_adaptor.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pytensor.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/pyvectorize.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/xtensor_python_config.hpp
    ${XTENSOR_PYTHON_INCLUDE_DIR}/xtensor-python/xtensor_type_caster_base.hpp
)

add_library(xtensor-python INTERFACE)
target_include_directories(xtensor-python INTERFACE
    ""$<BUILD_INTERFACE:${XTENSOR_PYTHON_INCLUDE_DIR};${pybind11_INCLUDE_DIRS};${NUMPY_INCLUDE_DIRS}>""
    $<INSTALL_INTERFACE:include>)
target_link_libraries(xtensor-python INTERFACE xtensor)
get_target_property(inc_dir xtensor-python INTERFACE_INCLUDE_DIRECTORIES)

OPTION(BUILD_TESTS ""xtensor test suite"" OFF)
OPTION(DOWNLOAD_GTEST ""build gtest from downloaded sources"" OFF)

if(DOWNLOAD_GTEST OR GTEST_SRC_DIR)
    set(BUILD_TESTS ON)
endif()

if(BUILD_TESTS)
    if(MSVC)
        set(PYTHON_MODULE_EXTENSION "".pyd"")
    else()
        set(PYTHON_MODULE_EXTENSION "".so"")
    endif()

    add_subdirectory(test)
    add_subdirectory(benchmark)
endif()

# Installation
# ============

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

install(TARGETS xtensor-python
        EXPORT ${PROJECT_NAME}-targets)

# Makes the project importable from the build directory
export(EXPORT ${PROJECT_NAME}-targets
       FILE ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake"")

install(FILES ${XTENSOR_PYTHON_HEADERS}
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xtensor-python)

set(XTENSOR_PYTHON_CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE
    STRING ""install path for xtensor-pythonConfig.cmake"")

configure_package_config_file(${PROJECT_NAME}Config.cmake.in
                              ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
                              INSTALL_DESTINATION ${XTENSOR_PYTHON_CMAKECONFIG_INSTALL_DIR})

# xtensor-python is header-only and does not depend on the architecture.
# Remove CMAKE_SIZEOF_VOID_P from xtensor-pythonConfigVersion.cmake so that an xtensor-pythonConfig.cmake
# generated for a 64 bit target can be used for 32 bit targets and vice versa.
set(_XTENSOR_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
unset(CMAKE_SIZEOF_VOID_P)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
                                 VERSION ${${PROJECT_NAME}_VERSION}
                                 COMPATIBILITY AnyNewerVersion)
set(CMAKE_SIZEOF_VOID_P ${_XTENSOR_CMAKE_SIZEOF_VOID_P})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${XTENSOR_PYTHON_CMAKECONFIG_INSTALL_DIR})
install(EXPORT ${PROJECT_NAME}-targets
        FILE ${PROJECT_NAME}Targets.cmake
        DESTINATION ${XTENSOR_PYTHON_CMAKECONFIG_INSTALL_DIR})

",3.1,3.1
11272,powertab,powertabeditor,False,False,False,False,False,11,C++,2020-05-06 20:20:29+00:00,2014-07-21 01:57:27+00:00,295,1968,"cmake_minimum_required( VERSION 3.1 )

# Target OS X 10.9 and above. This must be set before the first project() call.
set( CMAKE_OSX_DEPLOYMENT_TARGET ""10.9""
     CACHE STRING ""Minimum OS X deployment version""
)

project( powertabeditor )

# Allow using BOOST_ROOT.
if ( POLICY CMP0074 )
	cmake_policy( SET CMP0074 NEW )
endif ()

enable_testing()

set( CMAKE_MODULE_PATH
    ${CMAKE_SOURCE_DIR}/cmake
    ${CMAKE_SOURCE_DIR}/cmake/third_party/modules
)

set( PTE_VERSION 2.0.0-alpha10 )

include( PTE_Platform )
include( PTE_CompilerFlags )
include( PTE_Paths )
include( PTE_ThirdParty )
include( PTE_CopyFiles )
include( PTE_PrecompiledHeader )
include( PTE_Executable )
include( PTE_Library )

add_subdirectory( source )
add_subdirectory( test )
add_subdirectory( installer )
if ( PLATFORM_LINUX )
    add_subdirectory(xdg)
endif ()
",3.1,3.1
11582,Axosoft,nsfw,False,False,False,False,False,43,C++,2020-04-28 20:22:36+00:00,2015-08-03 20:27:14+00:00,701,221,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
set (PROJECT_NAME ""NSFW"")
project (${PROJECT_NAME})

message (STATUS ""Running CMake version ${CMAKE_VERSION}"")

set (NSFW_INCLUDE_DIR ""${CMAKE_SOURCE_DIR}/include"")

add_subdirectory (src)
",3.1.0,3.1
11696,ZixiVideo,obs-studio,False,False,False,False,False,312,C,2020-05-14 14:14:01+00:00,2020-04-06 09:24:32+00:00,0,8015,"cmake_minimum_required(VERSION 3.10)

if (UNIX AND POLICY CMP0072)
	# In case of both legacy and glvnd OpenGL libraries found. Prefer GLVND
	cmake_policy(SET CMP0072 NEW)
endif()

project(obs-studio)

option(BUILD_CAPTIONS ""Build captions"" FALSE)

if(WIN32)
	cmake_minimum_required(VERSION 3.16)

	# Check for Win SDK version 10.0.18362 or above
	if(MSVC AND MSVC_VERSION LESS 1920)
		message(STATUS ""Windows API version is ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}"")
		string(REPLACE ""."" "";"" WINAPI_VER ""${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}"")

		list(GET WINAPI_VER 0 WINAPI_VER_MAJOR)
		list(GET WINAPI_VER 1 WINAPI_VER_MINOR)
		list(GET WINAPI_VER 2 WINAPI_VER_BUILD)

		set(WINAPI_COMPATIBLE FALSE)
		if(WINAPI_VER_MAJOR EQUAL 10)
			if (WINAPI_VER_MINOR EQUAL 0)
				if (WINAPI_VER_BUILD GREATER_EQUAL 18362)
					set(WINAPI_COMPATIBLE TRUE)
				endif()
			else()
				set(WINAPI_COMPATIBLE TRUE)
			endif()
		elseif(WINAPI_VER_MAJOR GREATER 10)
			set(WINAPI_COMPATIBLE TRUE)
		endif()

		if(NOT WINAPI_COMPATIBLE)
			message(FATAL_ERROR ""OBS requires Windows 10 SDK version 10.0.18362.0 and above to compile.\nPlease download the most recent Windows 10 SDK in order to compile (or update to Visual Studio 2019)."")
		endif()
	endif()

	if (QTDIR OR DEFINED ENV{QTDIR} OR DEFINED ENV{QTDIR32} OR DEFINED ENV{QTDIR64})
		# Qt path set by user or env var
	else()
		set(QTDIR """" CACHE PATH ""Path to Qt (e.g. C:/Qt/5.7/msvc2015_64)"")
		message(WARNING ""QTDIR variable is missing.  Please set this variable to specify path to Qt (e.g. C:/Qt/5.7/msvc2015_64)"")
	endif()
	if (DepsPath OR DEFINED ENV{DepsPath} OR DEFINED ENV{DepsPath32} OR DEFINED ENV{DepsPath64})
		# Dependencies path set by user or env var
	else()
		set(DepsPath """" CACHE PATH ""Path to compiled dependencies (e.g. D:/dependencies/win64)"")
		message(WARNING ""DepsPath variable is missing.  Please set this variable to specify path to compiled dependencies (e.g. D:/dependencies/win64)"")
	endif()
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
set(ENABLE_SCRIPTING TRUE CACHE BOOL ""Enables scripting"")
set(SCRIPTING_ENABLED OFF CACHE BOOL ""Internal global cmake variable"" FORCE)

include(ObsHelpers)
include(ObsCpack)
include(GNUInstallDirs)

# Must be a string in the format of ""x.x.x-rcx""
if(DEFINED RELEASE_CANDIDATE)
	set(OBS_VERSION ""${RELEASE_CANDIDATE}"")
	string(REPLACE ""-rc"" ""."" RC_SPLIT ${RELEASE_CANDIDATE})
	string(REPLACE ""."" "";"" RC_SPLIT ${RC_SPLIT})
	message(WARNING ""******************************************************************************\nRelease candidate deteced, OBS_VERSION is now: ${OBS_VERSION}\n******************************************************************************"")
	list(GET RC_SPLIT 0 OBS_RELEASE_CANDIDATE_MAJOR)
	list(GET RC_SPLIT 1 OBS_RELEASE_CANDIDATE_MINOR)
	list(GET RC_SPLIT 2 OBS_RELEASE_CANDIDATE_PATCH)
	list(GET RC_SPLIT 3 OBS_RELEASE_CANDIDATE)
else()
	set(OBS_RELEASE_CANDIDATE_MAJOR 0)
	set(OBS_RELEASE_CANDIDATE_MINOR 0)
	set(OBS_RELEASE_CANDIDATE_PATCH 0)
	set(OBS_RELEASE_CANDIDATE 0)
endif()

# Binary Versioning for Windows
if(WIN32)
	string(REPLACE ""-"" "";"" UI_VERSION_SPLIT ${OBS_VERSION})
	list(GET UI_VERSION_SPLIT 0 UI_VERSION)
	string(REPLACE ""."" "";"" UI_VERSION_SEMANTIC ${UI_VERSION})
	list(GET UI_VERSION_SEMANTIC 0 UI_VERSION_MAJOR)
	list(GET UI_VERSION_SEMANTIC 1 UI_VERSION_MINOR)
	list(GET UI_VERSION_SEMANTIC 2 UI_VERSION_PATCH)
	set(OBS_COMPANY_NAME ""OBS"")
	set(OBS_PRODUCT_NAME ""OBS Studio"")
	set(OBS_COMMENTS ""Free and open source software for video recording and live streaming"")
	set(OBS_LEGAL_COPYRIGHT ""(C) Hugh Bailey"")
	set(MODULE_DESCRIPTION ""OBS Studio"")
	configure_file(UI/obs.rc.in ${PROJECT_BINARY_DIR}/obs.rc)
endif()

if(MSVC AND NOT EXISTS ""${CMAKE_BINARY_DIR}/ALL_BUILD.vcxproj.user"")
	file(GENERATE
		OUTPUT ""${CMAKE_BINARY_DIR}/ALL_BUILD.vcxproj.user""
		INPUT ""${CMAKE_SOURCE_DIR}/cmake/ALL_BUILD.vcxproj.user.in"")
endif()

if(NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

if(${CMAKE_C_COMPILER_ID} MATCHES ""Clang"" OR ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"")
	set(CMAKE_COMPILER_IS_CLANG TRUE)
endif()

if (MSVC_CXX_ARCHITECTURE_ID)
    string(TOLOWER ${MSVC_CXX_ARCHITECTURE_ID} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
else ()
    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
endif ()

if(LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES ""(i[3-6]86|x86|x64|x86_64|amd64)"")
	set(NEEDS_SIMDE ""0"")
	if(NOT MSVC)
		set(ARCH_SIMD_FLAGS ""-mmmx"" ""-msse"" ""-msse2"")
	endif()
elseif(LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)64(le)?"")
	set(NEEDS_SIMDE ""0"")
	set(ARCH_SIMD_FLAGS ""-mvsx"")
	add_compile_definitions(NO_WARN_X86_INTRINSICS)
else()
	set(NEEDS_SIMDE ""1"")
	add_definitions(-DNEEDS_SIMDE=1)
	set(ARCH_SIMD_FLAGS """")
	message(STATUS ""No Native SSE2 SIMD Support - Using SIMDE"")
endif()

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
	set(CMAKE_CXX_FLAGS ""-Wall -Wextra -Wvla -Wno-unused-function -Wno-missing-field-initializers ${CMAKE_CXX_FLAGS} -fno-strict-aliasing"")
	set(CMAKE_C_FLAGS ""-Wall -Wextra -Wvla -Wno-unused-function -Werror-implicit-function-declaration -Wno-missing-braces -Wno-missing-field-initializers ${CMAKE_C_FLAGS} -std=gnu99 -fno-strict-aliasing"")

	option(USE_LIBC++ ""Use libc++ instead of libstdc++"" ${APPLE})
	if(USE_LIBC++)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
	endif()
elseif(MSVC)
	if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
		string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
	else()
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
	endif()

	# Disable pointless constant condition warnings
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /wd4127 /wd4201 /wd4456 /wd4457 /wd4458 /wd4459 /wd4595"")
endif()

if(WIN32)
	add_definitions(-DUNICODE -D_UNICODE -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)
endif()

if(MSVC)
	add_compile_options(""/MP"")
	set(CMAKE_C_FLAGS_DEBUG ""/DDEBUG=1 /D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
	set(CMAKE_CXX_FLAGS_DEBUG ""/DDEBUG=1 /D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")

	if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO"")
		set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO"")
		set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH:NO"")
	endif()

	foreach(t EXE SHARED MODULE)
		set(CMAKE_${t}_LINKER_FLAGS ""${CMAKE_${t}_LINKER_FLAGS} /OPT:REF"")
		set(CMAKE_${t}_LINKER_FLAGS_DEBUG ""${CMAKE_${t}_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO"")
		set(CMAKE_${t}_LINKER_FLAGS_RELWITHDEBINFO ""${CMAKE_${t}_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO"")
	endforeach()
else()
	if(MINGW)
		set(CMAKE_WIDL ""widl"" CACHE STRING ""wine IDL header file generation program"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_WIN32_WINNT=0x0600 -DWINVER=0x0600"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0600 -DWINVER=0x0600"")
	endif()
	set(CMAKE_C_FLAGS_DEBUG ""-DDEBUG=1 -D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
	set(CMAKE_CXX_FLAGS_DEBUG ""-DDEBUG=1 -D_DEBUG=1 ${CMAKE_C_FLAGS_DEBUG}"")
endif()

if(APPLE)
	set(CMAKE_MACOSX_RPATH TRUE)
	set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
	list(APPEND CMAKE_INSTALL_RPATH ""@loader_path/"" ""@executable_path/"")
elseif(UNIX)
	option(USE_XDG ""Utilize XDG Base Directory Specification"" ON)
	if(USE_XDG)
		add_definitions(-DUSE_XDG)
	endif()

	if(NOT UNIX_STRUCTURE)
		list(APPEND CMAKE_INSTALL_RPATH ""$ORIGIN"")
	endif()
endif()

option(BUILD_TESTS ""Build test directory (includes test sources and possibly a platform test executable)"" FALSE)
mark_as_advanced(BUILD_TESTS)

if(NOT INSTALLER_RUN)
	option(ENABLE_UI ""Enables the OBS user interfaces"" ON)
	if(DISABLE_UI OR NOT ENABLE_UI)
		set(UI_ENABLED FALSE)
	else()
		set(UI_ENABLED TRUE)

		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(_lib_suffix 64)
		else()
			set(_lib_suffix 32)
		endif()

		if(DEFINED QTDIR${_lib_suffix})
			list(APPEND CMAKE_PREFIX_PATH ""${QTDIR${_lib_suffix}}"")
		elseif(DEFINED QTDIR)
			list(APPEND CMAKE_PREFIX_PATH ""${QTDIR}"")
		elseif(DEFINED ENV{QTDIR${_lib_suffix}})
			list(APPEND CMAKE_PREFIX_PATH ""$ENV{QTDIR${_lib_suffix}}"")
		elseif(DEFINED ENV{QTDIR})
			list(APPEND CMAKE_PREFIX_PATH ""$ENV{QTDIR}"")
		endif()

		find_package(Qt5Widgets ${FIND_MODE})
	endif()

	add_subdirectory(deps)

	if(WIN32)
		add_subdirectory(libobs-d3d11)
		add_subdirectory(libobs-winrt)
	endif()

	add_subdirectory(libobs-opengl)
	add_subdirectory(libobs)
	add_subdirectory(plugins)
	add_subdirectory(UI)
	if (BUILD_TESTS)
		add_subdirectory(test)
	endif()

	add_subdirectory(cmake/helper_subdir)
else()
	obs_generate_multiarch_installer()
endif()

include(CopyMSVCBins)
",3.10,3.1
11762,jrl-umi3218,Tasks,False,False,False,False,False,15,C++,2020-05-13 08:01:21+00:00,2012-09-03 16:37:00+00:00,41,484,"#
# Copyright 2012-2019 CNRS-UM LIRMM, CNRS-AIST JRL
#

cmake_minimum_required(VERSION 3.1.3)

set(PROJECT_NAME Tasks)
set(PROJECT_DESCRIPTION ""..."")
set(PROJECT_URL ""https://github.com/jrl-umi3218/Tasks"")
set(PROJECT_DEBUG_POSTFIX ""_d"")
set(PROJECT_VERSION 1.2.0)
set(PROJECT_USE_CMAKE_EXPORT TRUE)

# Disable -Werror on Unix for now.
set(CXX_DISABLE_WERROR True)
set(DOXYGEN_USE_MATHJAX ""YES"")

include(cmake/base.cmake)
include(cmake/cython/cython.cmake)
include(cmake/msvc-specific.cmake)

project(Tasks CXX)

add_definitions(-mfpmath=sse -msse2)

if(NOT WIN32)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic"")
endif()

add_project_dependency(RBDyn REQUIRED)
add_project_dependency(sch-core REQUIRED)
add_project_dependency(eigen-qld REQUIRED)
find_package(eigen-lssol QUIET)
if(${eigen-lssol_FOUND})
  add_project_dependency(eigen-lssol REQUIRED)
endif()

# For MSVC, set local environment variable to enable finding the built dll
# of the main library when launching ctest with RUN_TESTS
if(MSVC)
  set(CMAKE_MSVCIDE_RUN_PATH ""\$(SolutionDir)/src/\$(Configuration)"")
endif(MSVC)

add_subdirectory(src)

if(${BUILD_TESTING})
  add_subdirectory(tests)
endif()

if(${PYTHON_BINDING})
 add_subdirectory(binding/python)
endif()
",3.1.3,3.1
11875,isazi,TransientSearch,False,False,False,False,False,2,C++,2020-05-05 16:36:34+00:00,2015-03-27 14:59:41+00:00,0,342,"cmake_minimum_required(VERSION 3.10)
project(AMBER VERSION 2.1)
include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -std=c++14"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native"")
set(TARGET_LINK_LIBRARIES isa_utils isa_opencl astrodata dedispersion integration snr OpenCL)
if($ENV{OPENMP})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fopenmp"")
endif()
if($ENV{LOFAR})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_HDF5"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} hdf5 hdf5_cpp z)
endif()
if($ENV{PSRDADA})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_PSRDADA"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} psrdada cudart)
endif()

# amber
add_executable(amber
  src/CommandLine.cpp
  src/TransientSearch.cpp
  src/Trigger.cpp
)
target_include_directories(amber PRIVATE include)
target_link_libraries(amber PRIVATE ${TARGET_LINK_LIBRARIES})

install(TARGETS amber
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
",3.10,3.1
12000,yhirose,cpp-peglib,False,False,False,False,False,12,C++,2020-05-17 16:07:57+00:00,2015-02-07 21:10:11+00:00,319,527,"cmake_minimum_required(VERSION 3.1.0)
project(""cpp-peglib"")

find_package(Threads)
# Check if a supported compiler is used to setup the C++ standard to use:
get_property(known_features GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
list(FIND known_features ""cxx_std_17"" found)
if(NOT ${found} EQUAL -1)
  # C++17 standard is supported
  set(CMAKE_CXX_STANDARD 17)
else()
  # Check for C++11 standard support
  list(FIND known_features ""cxx_std_11"" found)
  if(NOT ${found} EQUAL -1)
    # C++11 standard is supported
    set(CMAKE_CXX_STANDARD 11)
  endif()
endif()

if(${found} EQUAL -1)
  message(FATAL_ERROR ""Your compiler is not supported."")
endif()

set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Weverything -Wno-c++98-compat -Wno-padded -Wno-weak-vtables -Wno-exit-time-destructors -Wno-c++2a-compat -Wno-switch-enum"")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra"")
elseif(MSVC)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4 /wd4503 /wd4512 /utf-8"")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
  set(add_link_deps Threads::Threads)
endif()

enable_testing()

add_subdirectory(test)
add_subdirectory(example)
add_subdirectory(lint)

install(FILES peglib.h DESTINATION include)
",3.1.0,3.1
12182,EduardoPagotto,ChimeraEngine,False,False,False,False,False,2,C++,2020-04-28 18:29:56+00:00,2013-09-27 14:13:43+00:00,0,848,"cmake_minimum_required(VERSION 3.10.2)

PROJECT(ChimeraEngine)

set(CMAKE_CXX_FLAGS ""-std=c++11 ${CMAKE_CXX_FLAGS} -g -ftest-coverage -fprofile-arcs"")

set(OVR_SET_TO_USE OFF)
set(HMD_Z1_SET_TO_USE ON)

#option(OVR_SET_TO_USE ""Compilar com Driver OVR"" ON)
#option(OVR_SET_TO_USE ""Compilar sem Driver OVR"" OFF)

if (OVR_SET_TO_USE)
	add_definitions(-DOVR_SET_TO_USE)
endif(OVR_SET_TO_USE)

if (HMD_Z1_SET_TO_USE)
	add_definitions(-DHMD_Z1_SET_TO_USE)
endif(HMD_Z1_SET_TO_USE)

set (OpenGL_GL_PREFERENCE GLVND)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

add_subdirectory(chimera)
add_subdirectory(samples)
#add_subdirectory(examples)",3.10.2,3.1
12187,hbirchtree,coffeecutie-imgui,False,False,False,False,False,1,CMake,2019-11-20 01:00:39+00:00,2017-05-06 14:19:12+00:00,0,315,"cmake_minimum_required(VERSION 3.1)
project ( CoffeeImGui VERSION 0.9 )
cmake_policy ( SET CMP0069 NEW )

include( toolchain/cmake/Modules/SubprojectFunctions.cmake )
init_subproject()

include (GitDependencies)

dependency_get (
    REQUIRED
    SOURCE hbirchtree/coffeecutie
    TAG rel-4.4.2.10.23
    NAMES
        libraries=Coffee
    SIDELOAD
        ${Coffee_LOCAL_BUILD}
    )

set ( IMGUI_DIR
    ${CMAKE_SOURCE_DIR}/src/libs/imgui
    )

if(BUILD_LIBRARIES)
    find_package ( Coffee REQUIRED )
    dependency_resolve ( Coffee::ComponentBundleSetup Coffee::CoreApplication )

    add_subdirectory(src/imgui)

    if(BUILD_BINARIES AND BUILD_EXAMPLES)
        if(TARGET Coffee::ASIO)
            dependency_resolve ( Coffee::ASIO )
        endif()

        add_subdirectory(examples/basic)
    endif()
endif()

add_subdirectory(toolchain/docs-gen)

End_Subproject()
",3.1,3.1
12225,PADrend,Util,False,False,False,False,False,5,C++,2020-02-18 12:15:32+00:00,2013-10-17 12:26:22+00:00,2,232,"#
# This file is part of the Util library.
# Copyright (C) 2009-2017 Benjamin Eikel <benjamin@eikel.org>
# Copyright (C) 2014-2019 Sascha Brandt <sascha@brandt.graphics>
#
# This library is subject to the terms of the Mozilla Public License, v. 2.0.
# You should have received a copy of the MPL along with this library; see the 
# file LICENSE. If not, you can obtain one at http://mozilla.org/MPL/2.0/.
#
cmake_minimum_required(VERSION 3.1.0)
project(Util VERSION 0.3.0)

if(POLICY CMP0076) 
	cmake_policy(SET CMP0076 OLD)
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# options
option(UTIL_BUILD_TESTS ""Defines if CppUnit tests for the Util library are built."" OFF)

# Set up install directories
include(GNUInstallDirs)
set(CMAKE_INSTALL_CMAKECONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/Util)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

add_library(Util SHARED """")

target_sources(Util PRIVATE
	Encoding.cpp
	GenericAttribute.cpp
	GenericAttributeSerialization.cpp
	GenericConversion.cpp
	JSON_Parser.cpp
	LibRegistry.cpp
	LoadLibrary.cpp
	Macros.cpp
	MicroXML.cpp
	ProgressIndicator.cpp
	StringIdentifier.cpp
	StringUtils.cpp
	Timer.cpp
	TypeConstant.cpp
	Util.cpp
	Utils.cpp
)
# Install the header files
install(FILES
	AttributeProvider.h
	BidirectionalMap.h
	CountedObjectWrapper.h
	Encoding.h
	GenericAttribute.h
	GenericAttributeSerialization.h
	GenericConversion.h
	Generic.h
	JSON_Parser.h
	LibRegistry.h
	LoadLibrary.h
	Macros.h
	MicroXML.h
	Numeric.h
	ObjectExtension.h
	ProgressIndicator.h
	ReferenceCounter.h
	References.h
	Registry.h
	RegistryHelper.h
	StringIdentifier.h
	StringUtils.h
	Timer.h
	TriState.h
	TypeConstant.h
	TypeNameMacro.h
	UpdatableHeap.h
	Util.h
	Utils.h
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Util
	COMPONENT headers
)
add_subdirectory(Factory)
add_subdirectory(Graphics)
add_subdirectory(IO)
add_subdirectory(Network)
add_subdirectory(Resources)
add_subdirectory(Serialization)
add_subdirectory(UI)
add_subdirectory(examples)

add_subdirectory(extern)

if(UTIL_BUILD_TESTS)
	if(UNIX AND NOT APPLE)
		find_program(MEMORYCHECK_COMMAND NAMES valgrind)
		set(MEMORYCHECK_COMMAND_OPTIONS ""--tool=memcheck --leak-check=summary --num-callers=1 --vgdb=no"")
	endif()
	include(CTest)
	add_subdirectory(tests)
endif()

if(WIN32)
	target_link_libraries(Util PRIVATE ""-lpsapi -lgdi32"")
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
	target_link_libraries(Util PRIVATE rt)
endif()

#target_compile_definitions(Util PUBLIC UtilExtern)
#target_include_directories(Util PRIVATE UtilExtern)
target_link_libraries(Util PRIVATE UtilExtern)

# Dependency to pthread
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads)
if(TARGET Threads::Threads)
	target_link_libraries(Util PRIVATE ${CMAKE_THREAD_LIBS_INIT})
endif()

include(CheckIncludeFileCXX)
include(CheckCXXSymbolExists)

# Test if the header execinfo.h exists
check_include_file_cxx(execinfo.h UTIL_HAVE_EXECINFO_H)
if(UTIL_HAVE_EXECINFO_H)
	target_compile_definitions(Util PRIVATE UTIL_HAVE_EXECINFO_H)
endif()

# Test if the header malloc.h exists
check_include_file_cxx(malloc.h UTIL_HAVE_MALLOC_H)
if(UTIL_HAVE_MALLOC_H)
	target_compile_definitions(Util PRIVATE UTIL_HAVE_MALLOC_H)
endif()
# Test if mallinfo exists
check_cxx_symbol_exists(mallinfo malloc.h UTIL_HAVE_MALLINFO)
if(UTIL_HAVE_MALLINFO)
	target_compile_definitions(Util PRIVATE UTIL_HAVE_MALLINFO)
endif()
# Test if malloc_info exists
check_cxx_symbol_exists(malloc_info malloc.h UTIL_HAVE_MALLOC_INFO)
if(UTIL_HAVE_MALLOC_INFO)
	target_compile_definitions(Util PRIVATE UTIL_HAVE_MALLOC_INFO)
endif()

# Test if open_memstream exists
check_cxx_symbol_exists(open_memstream stdio.h UTIL_HAVE_OPEN_MEMSTREAM)
if(UTIL_HAVE_OPEN_MEMSTREAM)
	target_compile_definitions(Util PRIVATE UTIL_HAVE_OPEN_MEMSTREAM)
endif()

# Set version of library
set_target_properties(Util PROPERTIES VERSION ${Util_VERSION}
																			SOVERSION ${Util_VERSION_MAJOR}
																			LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")

include(FeatureSummary)
set_package_properties(CURL PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Support for using the http:// and ftp:// virtual file system.""
)
set_package_properties(Freetype PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Creation of a bitmap containing a font's glyphs.""
)
set_package_properties(LibArchive PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Support for using the virtual file systems for archives (e.g. zip, tar).""
)
set_package_properties(libzip PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Support for using the zip:// virtual file system.""
)
set_package_properties(LibXml2 PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Replace the provided XML parser by libxml2's parser.""
)
set_package_properties(PNG PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Read/write support for PNG (Portable Network Graphics) raster image files.""
)
set_package_properties(SDL2 PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Multi-platform creation of a window and a rendering context. Multi-platform concurrency support.""
)
set_package_properties(SDL2_image PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Read/write support for additional raster image file formats (e.g. JPEG, TIFF).""
)
set_package_properties(SDL2_net PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Multi-platform support for network communication.""
)
set_package_properties(SQLite3 PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Support for using the dbfs:// virtual file system.""
)
set_package_properties(ZLIB PROPERTIES
	TYPE OPTIONAL
	PURPOSE ""Helper library required by other external libraries (e.g. libpng, libzip).""
)
feature_summary(DESCRIPTION ""The following packages have been found:"" WHAT PACKAGES_FOUND)
feature_summary(DESCRIPTION ""The following packages have *not* been found:"" WHAT PACKAGES_NOT_FOUND)

# Install the library
install(TARGETS Util EXPORT LibraryExport
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT runtimelibraries
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT runtimelibraries
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT developmentlibraries
	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Set include directories for users of this library
target_include_directories(Util
													 INTERFACE
													 ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"" ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""
													 ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"")

# Library export
#   to use from the build tree
export(EXPORT LibraryExport FILE UtilTargets.cmake)
#   to use from installation tree
install(EXPORT LibraryExport DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} FILE UtilTargets.cmake COMPONENT developmentlibraries)

# Create the configuration files
include(CMakePackageConfigHelpers)
configure_file(UtilConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/UtilConfig.cmake COPYONLY)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/UtilConfigVersion.cmake
																 VERSION ${Util_VERSION}
																 COMPATIBILITY SameMajorVersion)

# Install the configuration files
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/UtilConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/UtilConfigVersion.cmake
				DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} COMPONENT developmentlibraries)

# Packaging
include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_NAME ""libutil${Util_VERSION_MAJOR}"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Util library"")
set(CPACK_PACKAGE_VENDOR ""Benjamin Eikel; Claudius Jaehn; Ralf Petring; Sascha Brandt"")
set(CPACK_PACKAGE_CONTACT ""Benjamin Eikel <benjamin@eikel.org>"")
set(CPACK_PACKAGE_VERSION_MAJOR ${Util_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${Util_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${Util_VERSION_PATCH})
set(CPACK_PACKAGE_FILE_NAME ""libUtil"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_STRIP_FILES ON)

include(CPack)
",3.1.0,3.1
12267,isazi,AstroData,False,False,False,False,False,2,C++,2020-04-20 12:19:09+00:00,2012-10-31 14:04:56+00:00,0,275,"cmake_minimum_required(VERSION 3.10)
project(AstroData VERSION 3.1.1)
include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -std=c++14"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native"")
if($ENV{LOFAR})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_HDF5"")
endif()
if($ENV{PSRDADA})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_PSRDADA"")
endif()

# libastrodata
add_library(astrodata SHARED
  src/Observation.cpp
  src/Platform.cpp
  src/ReadData.cpp
  src/SynthesizedBeams.cpp
)
set_target_properties(astrodata PROPERTIES
  VERSION ${PROJECT_VERSION}
  SOVERSION 1
  PUBLIC_HEADER ""include/Generator.hpp;include/Observation.hpp;include/Platform.hpp;include/ReadData.hpp;include/SynthesizedBeams.hpp""
)
target_include_directories(astrodata PRIVATE include)

install(TARGETS astrodata
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
",3.10,3.1
12354,bloomberg,bde_verify,False,False,False,False,False,11,C++,2020-05-15 21:00:09+00:00,2015-02-02 14:26:17+00:00,31,1135,"cmake_minimum_required(VERSION 3.1)

project(bde_verify)

set(BDE_VERIFY_VERSION_MAJOR ""1"")
set(BDE_VERIFY_VERSION_MINOR ""3"")
set(BDE_VERIFY_VERSION_PATCH ""15"")
set(BDE_VERIFY_VERSION ""${BDE_VERIFY_VERSION_MAJOR}.${BDE_VERIFY_VERSION_MINOR}.${BDE_VERIFY_VERSION_PATCH}"")

add_subdirectory(bde-verify-vs)

find_package(LLVM REQUIRED)
set(CLANG_RESOURCE_DIR
    ""${LLVM_INSTALL_PREFIX}/lib/clang/${LLVM_PACKAGE_VERSION}""
    CACHE PATH ""Clang resource directory"")
file(GLOB CLANG_RESOURCE_FILES ""${CLANG_RESOURCE_DIR}/include/*.*"")

if(MSVC)
    add_definitions(
        ""/wd4141""
        ""/wd4146""
        ""/wd4244""
        ""/wd4291""
        ""/wd4624""
        ""/wd4800""
        ""/wd4996""
    )
    set(system_libs version)
    set(SCRIPT "".pl"")
    set(CPACK_GENERATOR ""NSIS"")
    set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ""ON"")
    set(CPACK_NSIS_MODIFY_PATH ""ON"")
    set(CPACK_NSIS_MUI_ICON
        ""${CMAKE_CURRENT_SOURCE_DIR}/bde-verify-vs/BDE_Verify.ico"")
    set(CPACK_NSIS_DISPLAY_NAME ""BdeVerify"")
    set(CPACK_NSIS_PACKAGE_NAME ""BdeVerify"")
    set(APREGKEY
        ""Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\"")
    set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""
        WriteRegStr SHCTX   '${APREGKEY}bde_verify${SCRIPT}'   '' \\
                    '$INSTDIR\\\\bin\\\\bde_verify${SCRIPT}'
        WriteRegStr SHCTX   '${APREGKEY}bb_cppverify${SCRIPT}' '' \\
                    '$INSTDIR\\\\bin\\\\bb_cppverify${SCRIPT}'
        WriteRegStr SHCTX   '${APREGKEY}check_bos${SCRIPT}'    '' \\
                    '$INSTDIR\\\\bin\\\\check_bos${SCRIPT}'
        WriteRegStr SHCTX   '${APREGKEY}bde_verify_bin.exe'    '' \\
                    '$INSTDIR\\\\libexec\\\\bde-verify\\\\bde_verify_bin.exe'
        System::Call 'Shell32::SHChangeNotify(i 0x8000000, i 0, i 0, i 0)'
    "")
    set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ""
        DeleteRegKey SHCTX '${APREGKEY}bde_verify${SCRIPT}'
        DeleteRegKey SHCTX '${APREGKEY}bb_cppverify${SCRIPT}'
        DeleteRegKey SHCTX '${APREGKEY}check_bos${SCRIPT}'
        DeleteRegKey SHCTX '${APREGKEY}bde_verify_bin.exe'
        System::Call 'Shell32::SHChangeNotify(i 0x8000000, i 0, i 0, i 0)'
    "")
else()
    if(NOT $ENV{PREFIX})
        if(IS_DIRECTORY /opt/bb)
            set($ENV{PREFIX} /opt/bb)
        elseif(IS_DIRECTORY /usr)
            set($ENV{PREFIX} /usr)
        endif()
    endif()

    if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
        execute_process(COMMAND ""which"" ""${CMAKE_CXX_COMPILER}""
                        OUTPUT_VARIABLE GCCDIR)
    else()
        execute_process(COMMAND ""which"" ""g++""
                        OUTPUT_VARIABLE GCCDIR)
    endif()
    string(REGEX REPLACE ""^(.*)/bin/[^/]*$"" ""\\1"" GCCDIR ${GCCDIR})

    if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""AppleClang"")
        set(CMAKE_CXX_COMPILER ""clang++"")
        add_compile_options(""-Wno-mismatched-tags"")
    elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
        add_compile_options(""--gcc-toolchain=${GCCDIR}"")
        add_compile_options(""-Wno-mismatched-tags"")
    endif()

    add_definitions(-D__STDC_LIMIT_MACROS)
    add_definitions(-D__STDC_CONSTANT_MACROS)
    add_definitions(-DSPELL_CHECK=1)

    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-common"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-exceptions"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-rtti"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -m64"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs"")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL ""SunOS"")
    add_definitions(-DBYTE_ORDER=BIG_ENDIAN)
    foreach(L
        ${GCCDIR}/lib/sparcv9
        $ENV{PREFIX}/lib64
        /opt/swt/lib64
        /usr/lib/sparcv9
    )
        set(CMAKE_EXE_LINKER_FLAGS
            ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-L,${L},-R,${L}"")
    endforeach(L)
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
    foreach(L
        ${GCCDIR}/lib64
        $ENV{PREFIX}/lib64
        /opt/swt/lib64
        /usr/lib64
    )
        set(CMAKE_EXE_LINKER_FLAGS
            ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-L,${L},-rpath,${L}"")
    endforeach(L)
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")
    foreach(L
        ${LLVM_INSTALL_PREFIX}/lib64
        /usr/local/lib
    )
        set(CMAKE_EXE_LINKER_FLAGS
            ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-L,${L},-rpath,${L}"")
    endforeach(L)
endif()

set(G ${CMAKE_CURRENT_SOURCE_DIR}/groups/csa)

include_directories(
    ${G}/csabase
    ${G}/csaglb
    ${LLVM_INCLUDE_DIRS}
    /opt/bb/include
    /opt/swt/include
    /usr/local/include  # For aspell.h
)

add_library(csabase
    ${G}/csabase/csabase_abstractvisitor.cpp
    ${G}/csabase/csabase_analyse.cpp
    ${G}/csabase/csabase_analyser.cpp
    ${G}/csabase/csabase_attachments.cpp
    ${G}/csabase/csabase_checkregistry.cpp
    ${G}/csabase/csabase_clang.cpp
    ${G}/csabase/csabase_config.cpp
    ${G}/csabase/csabase_debug.cpp
    ${G}/csabase/csabase_diagnostic_builder.cpp
    ${G}/csabase/csabase_diagnosticfilter.cpp
    ${G}/csabase/csabase_filenames.cpp
    ${G}/csabase/csabase_format.cpp
    ${G}/csabase/csabase_location.cpp
    ${G}/csabase/csabase_ppobserver.cpp
    ${G}/csabase/csabase_registercheck.cpp
    ${G}/csabase/csabase_report.cpp
    ${G}/csabase/csabase_tool.cpp
    ${G}/csabase/csabase_util.cpp
    ${G}/csabase/csabase_visitor.cpp
)

target_compile_features(csabase PUBLIC cxx_auto_type)
target_compile_definitions(csabase PRIVATE
                           BDE_VERIFY_VERSION=""${BDE_VERIFY_VERSION}"")

if(MSVC)
    set(RC ${CMAKE_CURRENT_SOURCE_DIR}/bde-verify-vs/bde_verify_bin.rc)
endif()

add_executable(bde_verify_bin
    ${RC}
    ${G}/csaaq/csaaq_cppinexternc.cpp
    ${G}/csaaq/csaaq_freefunctionsdepend.cpp
    ${G}/csaaq/csaaq_friendsinheaders.cpp
    ${G}/csaaq/csaaq_globaldata.cpp
    ${G}/csaaq/csaaq_includeinexternc.cpp
    ${G}/csaaq/csaaq_inentns.cpp
    ${G}/csaaq/csaaq_runtimeinit.cpp
    ${G}/csaaq/csaaq_transitiveincludes.cpp
    ${G}/csabbg/csabbg_allocatorforward.cpp
    ${G}/csabbg/csabbg_allocatornewwithpointer.cpp
    ${G}/csabbg/csabbg_assertassign.cpp
    ${G}/csabbg/csabbg_bslovrdstl.cpp
    ${G}/csabbg/csabbg_bslstdstring.cpp
    ${G}/csabbg/csabbg_classsections.cpp
    ${G}/csabbg/csabbg_cmporder.cpp
    ${G}/csabbg/csabbg_deprecated.cpp
    ${G}/csabbg/csabbg_enumvalue.cpp
    ${G}/csabbg/csabbg_functioncontract.cpp
    ${G}/csabbg/csabbg_managedptr.cpp
    ${G}/csabbg/csabbg_membernames.cpp
    ${G}/csabbg/csabbg_midreturn.cpp
    ${G}/csabbg/csabbg_movecontract.cpp
    ${G}/csabbg/csabbg_testdriver.cpp
    ${G}/csabde/csabde_tool.cpp
    ${G}/csafmt/csafmt_banner.cpp
    ${G}/csafmt/csafmt_comments.cpp
    ${G}/csafmt/csafmt_headline.cpp
    ${G}/csafmt/csafmt_indent.cpp
    ${G}/csafmt/csafmt_longlines.cpp
    ${G}/csafmt/csafmt_nonascii.cpp
    ${G}/csafmt/csafmt_whitespace.cpp
    ${G}/csaglb/csaglb_comments.cpp
    ${G}/csaglb/csaglb_includes.cpp
    ${G}/csamisc/csamisc_anonymousnamespaceinheader.cpp
    ${G}/csamisc/csamisc_arrayargument.cpp
    ${G}/csamisc/csamisc_arrayinitialization.cpp
    ${G}/csamisc/csamisc_boolcomparison.cpp
    ${G}/csamisc/csamisc_charclassrange.cpp
    ${G}/csamisc/csamisc_charvsstring.cpp
    ${G}/csamisc/csamisc_constantreturn.cpp
    ${G}/csamisc/csamisc_contiguousswitch.cpp
    ${G}/csamisc/csamisc_cstylecastused.cpp
    ${G}/csamisc/csamisc_donotuseendl.cpp
    ${G}/csamisc/csamisc_dumpast.cpp
    ${G}/csamisc/csamisc_funcalpha.cpp
    ${G}/csamisc/csamisc_hashptr.cpp
    ${G}/csamisc/csamisc_longinline.cpp
    ${G}/csamisc/csamisc_memberdefinitioninclassdefinition.cpp
    ${G}/csamisc/csamisc_movablerefref.cpp
    ${G}/csamisc/csamisc_namespacetags.cpp
    ${G}/csamisc/csamisc_opvoidstar.cpp
    ${G}/csamisc/csamisc_shortcompare.cpp
    ${G}/csamisc/csamisc_spellcheck.cpp
    ${G}/csamisc/csamisc_strictaliasing.cpp
    ${G}/csamisc/csamisc_stringadd.cpp
    ${G}/csamisc/csamisc_swapab.cpp
    ${G}/csamisc/csamisc_swapusing.cpp
    ${G}/csamisc/csamisc_thatwhich.cpp
    ${G}/csamisc/csamisc_thrownonstdexception.cpp
    ${G}/csamisc/csamisc_unnamed_temporary.cpp
    ${G}/csamisc/csamisc_verifysameargumentnames.cpp
    ${G}/csastil/csastil_externalguards.cpp
    ${G}/csastil/csastil_implicitctor.cpp
    ${G}/csastil/csastil_includeorder.cpp
    ${G}/csastil/csastil_leakingmacro.cpp
    ${G}/csastil/csastil_templatetypename.cpp
    ${G}/csastil/csastil_uppernames.cpp
    ${G}/csatr/csatr_componentheaderinclude.cpp
    ${G}/csatr/csatr_componentprefix.cpp
    ${G}/csatr/csatr_entityrestrictions.cpp
    ${G}/csatr/csatr_files.cpp
    ${G}/csatr/csatr_friendship.cpp
    ${G}/csatr/csatr_globalfunctiononlyinsource.cpp
    ${G}/csatr/csatr_globaltypeonlyinsource.cpp
    ${G}/csatr/csatr_groupname.cpp
    ${G}/csatr/csatr_includeguard.cpp
    ${G}/csatr/csatr_nesteddeclarations.cpp
    ${G}/csatr/csatr_packagename.cpp
    ${G}/csatr/csatr_usingdeclarationinheader.cpp
    ${G}/csatr/csatr_usingdirectiveinheader.cpp
    ${G}/csaxform/csaxform_refactor.cpp
    ${G}/csaxform/csaxform_refactor_config.cpp
)

target_compile_features(bde_verify_bin PUBLIC cxx_auto_type)

set(CMAKE_SKIP_RPATH ON)

set(CMAKE_LIBRARY_PATH
    ${LLVM_LIBRARY_DIRS}
    /opt/swt/lib64
    /opt/bb/lib64
    /usr/lib/sparcv9
    /usr/lib64
)

function(llvmlib name)
    find_library(LIB${name}
                 NAMES ${name}
                 PATHS ${LLVM_LIBRARY_DIRS}
                       /lib64
                       /opt/bb/lib64
                       /opt/swt/lib64
                       /usr/lib/sparcv9
                       /usr/lib64
    )
    if(LIB${name})
        target_link_libraries(bde_verify_bin ${LIB${name}})
    endif()
endfunction(llvmlib)

target_link_libraries(bde_verify_bin csabase ${system_libs})

llvmlib(clangFrontendTool)
llvmlib(clangCodeGen)
llvmlib(clangARCMigrate)
llvmlib(clangRewriteFrontend)
llvmlib(clangStaticAnalyzerFrontend)
llvmlib(clangFrontend)
llvmlib(clangSerialization)
llvmlib(clangDriver)
llvmlib(clangParse)
llvmlib(clangSema)
llvmlib(clangEdit)
llvmlib(clangStaticAnalyzerCheckers)
llvmlib(clangStaticAnalyzerCore)
llvmlib(clangAnalysis)
llvmlib(clangTooling)
llvmlib(clangToolingCore)
llvmlib(clangASTMatchers)
llvmlib(clangRewrite)
llvmlib(clangAST)
llvmlib(clangLex)
llvmlib(clangBasic)
llvmlib(clangCrossTU)
llvmlib(clangIndex)
llvmlib(LLVMLTO)
llvmlib(LLVMPasses)
llvmlib(LLVMAggressiveInstCombine)
llvmlib(LLVMObjCARCOpts)
llvmlib(LLVMDebugInfoPDB)
llvmlib(LLVMCoverage)
llvmlib(LLVMSparcCodeGen)
llvmlib(LLVMSparcAsmParser)
llvmlib(LLVMSparcDesc)
llvmlib(LLVMSparcInfo)
llvmlib(LLVMOption)
llvmlib(LLVMX86AsmParser)
llvmlib(LLVMX86CodeGen)
llvmlib(LLVMGlobalISel)
llvmlib(LLVMSelectionDAG)
llvmlib(LLVMAsmPrinter)
llvmlib(LLVMDebugInfoDWARF)
llvmlib(LLVMBitstreamReader)
llvmlib(LLVMDebugInfoCodeView)
llvmlib(LLVMDebugInfoMSF)
llvmlib(LLVMX86Desc)
llvmlib(LLVMMCDisassembler)
llvmlib(LLVMX86Info)
llvmlib(LLVMX86Utils)
llvmlib(LLVMCodeGen)
llvmlib(LLVMTarget)
llvmlib(LLVMCoroutines)
llvmlib(LLVMipo)
llvmlib(LLVMInstrumentation)
llvmlib(LLVMVectorize)
llvmlib(LLVMScalarOpts)
llvmlib(LLVMLinker)
llvmlib(LLVMIRReader)
llvmlib(LLVMAsmParser)
llvmlib(LLVMInstCombine)
llvmlib(LLVMTransformUtils)
llvmlib(LLVMBitWriter)
llvmlib(LLVMAnalysis)
llvmlib(LLVMObject)
llvmlib(LLVMMCParser)
llvmlib(LLVMMC)
llvmlib(LLVMBitReader)
llvmlib(LLVMProfileData)
llvmlib(LLVMCore)
llvmlib(LLVMBinaryFormat)
llvmlib(LLVMRemarks)
llvmlib(LLVMSupport)
llvmlib(LLVMDemangle)
llvmlib(ncurses)
llvmlib(pthread)
llvmlib(dl)
llvmlib(z)
llvmlib(aspell)
llvmlib(rt)
llvmlib(tinfo)
llvmlib(malloc)

message(""install prefix = ${CMAKE_INSTALL_PREFIX}"")
string(REGEX REPLACE
    ""^.*[/\\]([^/\\]*)$""
    ""${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_SYSTEM_NAME}-\\1""
    CMAKE_INSTALL_PREFIX
    ""/${CMAKE_CXX_COMPILER}""
)
string(REGEX REPLACE
    ""[.].*$""
    """"
    CMAKE_INSTALL_PREFIX
    ${CMAKE_INSTALL_PREFIX}
)

install(TARGETS
    csabase
    bde_verify_bin
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION libexec/bde-verify
)

install(PROGRAMS
    scripts/bde_verify${SCRIPT}
    scripts/bb_cppverify${SCRIPT}
    scripts/check_bos${SCRIPT}
    DESTINATION bin)

install(FILES
    bde.cfg
    bde_verify.cfg
    bb_cppverify.cfg
    DESTINATION etc/bde-verify)

file(GLOB headers ""${G}/csabase/csabase_*.h"" ""${G}/csaglb/csaglb_*.h"")

install(FILES ${headers} DESTINATION include/bde-verify)
install(FILES ${CLANG_RESOURCE_FILES}
        DESTINATION include/bde-verify/clang/include)

set(CPACK_PACKAGE_INSTALL_DIRECTORY ""BdeVerify"")
set(CPACK_PACKAGE_VENDOR ""Bloomberg Finance L.P."")
set(CPACK_PACKAGE_VERSION_MAJOR ${BDE_VERIFY_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${BDE_VERIFY_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${BDE_VERIFY_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION       ${BDE_VERIFY_VERSION})
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_NSIS_COMPRESSOR ""/SOLID lzma \r\n SetCompressorDictSize 32"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""BDE Verify - Static C++ code analysis"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")

include(CPack)

## ----------------------------------------------------------------------------
## Copyright (C) 2015 Bloomberg Finance L.P.
##
## Licensed under the Apache License, Version 2.0 (the ""License"");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an ""AS IS"" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ----------------------------- END-OF-FILE ----------------------------------
",3.1,3.1
12363,wschreyer,PENTrack,False,False,False,False,False,6,C++,2020-05-15 22:48:12+00:00,2013-09-16 10:54:34+00:00,6,681,"cmake_minimum_required (VERSION 3.1)
project (PENTrack CXX)

if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(""alglib-3.15.0/cpp/src"")
add_library(alglib OBJECT alglib-3.15.0/cpp/src/alglibinternal.cpp
                          alglib-3.15.0/cpp/src/integration.cpp
                          alglib-3.15.0/cpp/src/optimization.cpp
                          alglib-3.15.0/cpp/src/alglibmisc.cpp
                          alglib-3.15.0/cpp/src/interpolation.cpp
                          alglib-3.15.0/cpp/src/solvers.cpp
                          alglib-3.15.0/cpp/src/ap.cpp
                          alglib-3.15.0/cpp/src/linalg.cpp
                          alglib-3.15.0/cpp/src/specialfunctions.cpp)
						
include_directories(""tricubic-1.0/src/libtricubic"")
add_library(libtricubic OBJECT tricubic-1.0/src/libtricubic/libtricubic.cpp tricubic-1.0/src/libtricubic/tricubic_utils.cpp)

include_directories(""exprtk"")
include_directories(""include"")

set(CGAL_DONT_OVERRIDE_CMAKE_FLAGS TRUE CACHE BOOL ""Tell CGAL not to override compiler flags"")
find_package(CGAL HINTS ""cgal"")
if (CGAL_FOUND)
	message(STATUS ""CGAL version: "" ${CGAL_VERSION})
	if (CGAL_VERSION VERSION_LESS 4.14)
		message(SEND_ERROR ""CGAL versions older than 4.14 are not supported!"")
	endif()
	include_directories(${CGAL_INCLUDE_DIRS})
	include(${CGAL_USE_FILE})
else()
	message(SEND_ERROR ""CGAL library not found! For installation instructions see README.md."")
endif()

set(Boost_REALPATH ON)
if (BUILD_TESTS)
	message(STATUS ""Tests will be built, requires Boost 1.59.0 or newer with unit test framework"")
	find_package(Boost 1.59.0 REQUIRED system filesystem unit_test_framework)
else()
	find_package(Boost 1.53.0 REQUIRED system filesystem)
endif()
if (Boost_FOUND)
	include_directories(${Boost_INCLUDE_DIRS})
	link_directories(${Boost_LIBRARY_DIRS})
endif()

find_package(ROOT)
if (ROOT_FOUND)
	message(STATUS ""Found ROOT, you can use the ROOTlog option"")
    include(${ROOT_USE_FILE})
endif()

				
add_library(PENTrack_src OBJECT src/globals.cpp src/trianglemesh.cpp src/geometry.cpp src/mc.cpp src/field.cpp src/edmfields.cpp src/tracking.cpp src/logger.cpp
                        		src/field_2d.cpp src/field_3d.cpp src/fields.cpp src/harmonicfields.cpp src/conductor.cpp src/particle.cpp src/neutron.cpp src/microroughness.cpp
                        		src/electron.cpp src/proton.cpp src/mercury.cpp src/xenon.cpp src/source.cpp src/config.cpp src/analyticFields.cpp)

if (ROOT_FOUND)
	target_compile_definitions(PENTrack_src PUBLIC USEROOT=1)
endif()

if (CMAKE_COMPILER_IS_GNUCXX)
	target_compile_options(PENTrack_src PUBLIC -Wall)
endif()


add_executable(PENTrack src/main.cpp $<TARGET_OBJECTS:PENTrack_src> $<TARGET_OBJECTS:alglib> $<TARGET_OBJECTS:libtricubic>)
target_link_libraries (PENTrack ${Boost_LIBRARIES} ${CGAL_LIBRARIES} ${ROOT_LIBRARIES})


if (BUILD_TESTS)
	enable_testing()
	add_executable(runTests test/test.cpp test/fieldTests.cpp $<TARGET_OBJECTS:PENTrack_src> $<TARGET_OBJECTS:alglib> $<TARGET_OBJECTS:libtricubic>)
	target_link_libraries(runTests ${Boost_LIBRARIES} ${CGAL_LIBRARIES} ${ROOT_LIBRARIES})
	target_compile_definitions(runTests PRIVATE ""BOOST_TEST_DYN_LINK=1"")
	add_test(COMMAND runTests)
endif()
",3.1,3.1
12492,DerThorsten,nifty,False,False,False,False,False,8,C++,2020-04-22 18:21:26+00:00,2016-01-23 17:43:51+00:00,27,1761,"cmake_minimum_required(VERSION 3.1)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)

project(NIFTY)
set(${PROJECT_NAME}_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)




#-------------------------------------------------------------------------------------------------------------------
# Version
#-------------------------------------------------------------------------------------------------------------------
# as seen in the github.com/QuantStack/xtensor
file(STRINGS ""${${PROJECT_NAME}_INCLUDE_DIR}/nifty/nifty_config.hxx"" ${PROJECT_NAME}_version_defines
     REGEX ""#define ${PROJECT_NAME}_VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${${PROJECT_NAME}_version_defines})
    if(ver MATCHES ""#define ${PROJECT_NAME}_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(${PROJECT_NAME}_VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(${PROJECT_NAME}_VERSION 
    ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH})
message(STATUS ""${PROJECT_NAME} v${${PROJECT_NAME}_VERSION}"")


include(CheckCXXCompilerFlag)

include_directories(${${PROJECT_NAME}_INCLUDE_DIR})

option(USE_OLD_ABI ""Use old GLIBC ABI for backwards compatability"" OFF)
# Old ABI to be compatible with boost
if(USE_OLD_ABI)
    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
endif()

option(WITH_GUROBI ""Build with gurobi"" OFF)
option(WITH_CPLEX ""Build with cplex"" OFF)
option(WITH_GLPK ""Build with glpk"" OFF)
option(WITH_HDF5 ""Build with hdf5 support"" OFF)
option(WITH_FASTFILTERS ""Build with fastfilters"" OFF)
option(WITH_LP_MP ""Build with lpmp"" OFF)
option(WITH_QPBO ""Build with qpbo"" OFF)
option(WITH_Z5 ""Build with z5"" OFF)

option(BUILD_PYTHON_TEST ""Build python tests"" OFF)
option(BUILD_CPP_TEST ""Build c++ tests"" OFF)
option(BUILD_NIFTY_PYTHON ""Build the python bindings"" ON)
option(BUILD_DOCS ""Build the docs"" OFF)
option(BUILD_CPP_EXAMPLES ""Build the c++ examples"" OFF)
option(BUILD_PYTHON_DOCS ""Build the Python documentation with Sphinx"" OFF)

option(REMOVE_SOME_WARNINGS ""Remove some annoying warnings"" ON)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)


if(MSVC)
    # Disable autolinking on MSVC.
    add_definitions(-DBOOST_ALL_NO_LIB)
endif()

# from externals..
if(REMOVE_SOME_WARNINGS AND (CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang""))
    add_definitions(-Wno-attributes)
    # vigra uses old stuff....
    add_definitions(-Wno-deprecated-declarations)
    if(WITH_CPLEX)
        # cplex
        add_definitions(-Wno-ignored-attributes)
    endif()
    if(WITH_LP_MP)
        add_definitions(-Wno-non-template-friend)
        add_definitions(-Wno-terminate)
        add_definitions(-Wno-write-strings)
    endif()
endif()


# boost geometry needs this 
if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
    add_definitions(-fext-numeric-literals)
endif()

#-------------------------------------------------------------------------------------------------------------------
# check for c++ 14 / 17 support
#-------------------------------------------------------------------------------------------------------------------

message(STATUS ""CXX_FLAGS: ${CMAKE_CXX_FLAGS}"")
if (NOT ""${CMAKE_CXX_FLAGS}"" MATCHES ""-std=c\\+\\+17"")
    message(STATUS ""Using c++ 14"")
    set(CMAKE_CXX_STANDARD 14)
    set(CPP17 FALSE)
else()
    message(STATUS ""Using c++ 17"")
    set(CMAKE_CXX_STANDARD 17)
    set(CPP17 TRUE)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# WITH_LP_MP needs special treatment since
# it requires C++ 14 and uses OpenMP
if(WITH_LP_MP)
    find_package(OpenMP)
    if (OPENMP_FOUND)
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    endif()
endif()


#-------------------------------------------------------------------------------------------------------------------
# Set a default build configuraton if none is specified. 'MinSizeRel' produces the smallest binaries
#-------------------------------------------------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS ""Setting build type to 'Release' as none was specified."")
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
        ""MinSizeRel"" ""RelWithDebInfo"")
endif()
string(TOUPPER ""${CMAKE_BUILD_TYPE}"" U_CMAKE_BUILD_TYPE)


#-------------------------------------------------------------------------------------------------------------------
# thread libs
#-------------------------------------------------------------------------------------------------------------------
find_package(Threads)


#-------------------------------------------------------------------------------------------------------------------
# rt lib
#-------------------------------------------------------------------------------------------------------------------
if(UNIX AND NOT APPLE)
  find_library(RT rt)
  set(LINK_RT true)
  #message(STATUS ""Linking to RT is enabled"")
else()
  set(LINK_RT false)
  #message(STATUS ""Linking to RT is diabled"")
endif()


find_package(xtensor REQUIRED)
include_directories(${xtensor_INCLUDE_DIRS})


#-------------------------------------------------------------------------------------------------------------------
# externals
#-------------------------------------------------------------------------------------------------------------------
# FIXME external maxflow project doews not exist anymore
# was this removed accidentally?
# include_directories( ""${CMAKE_CURRENT_SOURCE_DIR}/externals/maxflow"")




#-------------------------------------------------------------------------------------------------------------------
# hdf5 libs
#-------------------------------------------------------------------------------------------------------------------

if(WITH_HDF5)
    find_package(HDF5)
    include_directories(${HDF5_INCLUDE_DIR})
    add_definitions(-DWITH_HDF5)
endif()



#-------------------------------------------------------------------------------------------------------------------
# find boost
#-------------------------------------------------------------------------------------------------------------------

# If WITH_BOOST_FS is set, we always use the boost filesystem library
# otherwise, we check if we have c++17 support. If so, we use std::filesystem,
# otherwise we fall back to boost filesystem.
if(CPP17)
    SET(WITH_BOOST_FS FALSE CACHE BOOL """")
else()
    SET(WITH_BOOST_FS TRUE CACHE BOOL """")
endif()

if(WITH_BOOST_FS)
    message(STATUS ""With boost filesystem"")
    find_package(Boost 1.63.0 COMPONENTS system filesystem REQUIRED)
    add_definitions(-DWITH_BOOST_FS)
    SET(FILESYSTEM_LIBRARIES ""${Boost_FILESYSTEM_LIBRARY};${Boost_SYSTEM_LIBRARY}"")
else()
    message(STATUS ""With std filesystem"")
    find_package(Boost 1.63.0 REQUIRED)

    # see this issue for discussions about the filesystem lib in CMake
    # https://gitlab.kitware.com/cmake/cmake/issues/17834
    if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
        SET(FILESYSTEM_LIBRARIES ""stdc++fs"")
    endif()

    # on clang, we need to enable libc++experimental, see
    # https://stackoverflow.com/a/45332844
    if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
        # see https://libcxx.llvm.org/docs/UsingLibcxx.html#id3
        if(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS ""7.0"")
            SET(FILESYSTEM_LIBRARIES ""c++experimental"")
        elseif(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS ""9.0"")
            SET(FILESYSTEM_LIBRARIES ""c++fs"")
        endif()
        # nothing required for clang>=9.0
    endif()
endif()
include_directories(${Boost_INCLUDE_DIR})


if(WITHIN_TRAVIS)
    add_definitions(-DWITHIN_TRAVIS)
endif()


#-------------------------------------------------------------------------------------------------------------------
# find LP SOLVERS
#-------------------------------------------------------------------------------------------------------------------

SET(NIFTY_LP_SOLVER_LIBS """")
#-------------------------------------------------------------------------------------------------------------------
# find cplex
#-------------------------------------------------------------------------------------------------------------------
if(WITH_CPLEX)
    find_package(CPLEX REQUIRED)
    include_directories(${CPLEX_INCLUDE_DIRS})
    add_definitions(-DWITH_CPLEX)
    SET(NIFTY_LP_SOLVER_LIBS ""${NIFTY_LP_SOLVER_LIBS};${CPLEX_LIBRARIES}"")
endif()

#-------------------------------------------------------------------------------------------------------------------
# find gurobi
#-------------------------------------------------------------------------------------------------------------------
if(WITH_GUROBI)
    find_package(GUROBI REQUIRED)
    include_directories(${GUROBI_INCLUDE_DIR})
    add_definitions(-DWITH_GUROBI)
    SET(NIFTY_LP_SOLVER_LIBS ""${NIFTY_LP_SOLVER_LIBS};${GUROBI_LIBRARIES}"")
endif()


#-------------------------------------------------------------------------------------------------------------------
# find glpk
#-------------------------------------------------------------------------------------------------------------------
if(WITH_GLPK)
    find_package(GLPK REQUIRED)
    include_directories(${GLPK_INCLUDE_DIR})
    add_definitions(-DWITH_GLPK)
    SET(NIFTY_LP_SOLVER_LIBS ""${NIFTY_LP_SOLVER_LIBS};${GLPK_LIBRARY}"")
endif()


#-------------------------------------------------------------------------------------------------------------------
# find fastfilters
#-------------------------------------------------------------------------------------------------------------------
if(WITH_FASTFILTERS)
    find_package(FASTFILTERS REQUIRED)
    include_directories(${FASTFILTERS_INCLUDE_DIR})
    add_definitions(-DWITH_FASTFILTERS)
endif()



#-------------------------------------------------------------------------------------------------------------------
# find z5
#-------------------------------------------------------------------------------------------------------------------
if(WITH_Z5)
    add_definitions(-DWITH_Z5)
    option(WITH_BLOSC ""Build z5 with blosc compression"" ON)
    option(WITH_BZIP2 ""Build z5 with bzip2 compression"" ON)
    option(WITH_ZLIB ""Build z5 with zlib compression"" ON)

    # z5 compression libraries
    SET(Z5_COMPRESSION_LIBRARIES """")
    if(WITH_BLOSC)
        find_package(BLOSC REQUIRED)
        include_directories(${BLOSC_INCLUDE_DIR})
        add_definitions(-DWITH_BLOSC)
        SET(Z5_COMPRESSION_LIBRARIES ""${Z5_COMPRESSION_LIBRARIES};${BLOSC_LIBRARIES}"")
    endif()

    if(WITH_ZLIB)
        find_package(ZLIB REQUIRED)
        include_directories(ZLIB_INCLUDE_DIRS)
        add_definitions(-DWITH_ZLIB)
        SET(Z5_COMPRESSION_LIBRARIES ""${Z5_COMPRESSION_LIBRARIES};${ZLIB_LIBRARIES}"")
    endif()

    if(WITH_BZIP2)
        find_package(BZip2 REQUIRED)
        include_directories(BZIP2_INCLUDE_DIRS)
        add_definitions(-DWITH_BZIP2)
        SET(Z5_COMPRESSION_LIBRARIES ""${Z5_COMPRESSION_LIBRARIES};${BZIP2_LIBRARIES}"")
    endif()
endif()


#-------------------------------------------------------------------------------------------------------------------
# additional dependencies for LP_MP
#-------------------------------------------------------------------------------------------------------------------
if(WITH_LP_MP)


    find_package(HDF5 REQUIRED)
    include_directories(${HDF5_INCLUDE_DIR})
    add_definitions(-DWITH_HDF5)

    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/lib"")
    add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/lib"")

    add_definitions(-DWITH_LP_MP)
    add_definitions(-DWITH_SAT)

    if(OPENMP_FOUND)
        add_definitions(-DLP_MP_PARALLEL)
    endif(OPENMP_FOUND)

    # set additional flags for the release build
    if(CMAKE_BUILD_TYPE STREQUAL ""Release"")
        # adding only -ffast-math will result in infinity and nan not being checked (but e.g. graph matching and discrete tomography have infinite costs)
        #add_definitions(-ffast-math -fno-finite-math-only)
        add_definitions()
        SET(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native"")
        SET(CMAKE_EXE_LINKER_FLAGS_RELEASE  ""${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}"" )
    endif()

    # include LP_MP dependencies
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/meta/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/Catch/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/cpp_sort/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/opengm/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/PEGTL"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/cereal/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/tclap/include"")
    include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/externals/LP_MP/external/lingeling-ala"")

    ## TODO this seems to be a pretty old version, would the newer version help?!
    ## FIXME we actually don't need to link this for building the LP_MP multicut
    #include(ExternalProject)
    #ExternalProject_ADD(
    #   lingeling
    #   #SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/external/lingeling-ala""
    #   URL ""http://fmv.jku.at/lingeling/lingeling-bal-2293bef-151109.tar.gz""
    #   BUILD_IN_SOURCE 1
    #   #BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/lingeling-ala""
    #   CONFIGURE_COMMAND ""./configure.sh""
    #   BUILD_COMMAND ""make""
    #   INSTALL_COMMAND """"
    #   )
    #include_directories(""${CMAKE_CURRENT_BINARY_DIR}/lingeling-prefix/src/lingeling"")
    ##link_directories(""${CMAKE_CURRENT_BINARY_DIR}/lingeling-prefix/src/lingeling"")

endif()


if(WITH_QPBO)
    include_directories( ""${CMAKE_CURRENT_SOURCE_DIR}/externals/qpbo"")
    add_definitions(-DWITH_QPBO)
endif(WITH_QPBO)


#-------------------------------------------------------------------------------------------------------------------
# enable_testing
#-------------------------------------------------------------------------------------------------------------------
enable_testing()

#-------------------------------------------------------------------------------------------------------------------
# global headers
#-------------------------------------------------------------------------------------------------------------------
file(GLOB_RECURSE headers include/*.hxx)
include_directories(include)


#-------------------------------------------------------------------------------------------------------------------
# src folder
#-------------------------------------------------------------------------------------------------------------------
add_subdirectory(src)


#-------------------------------------------------------------------------------------------------------------------
# docsrc folder
#-------------------------------------------------------------------------------------------------------------------
add_subdirectory(docsrc)


#-------------------------------------------------------------------------------------------------------------------
#  install headers
#-------------------------------------------------------------------------------------------------------------------
install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/include/nifty""
  DESTINATION include
  FILES_MATCHING
  PATTERN ""*.hxx""
  PATTERN ""*.hpp""
  PATTERN ""*.h""
)


#------------------------------------------------------------------------------------------------------------------
# install
#-------------------------------------------------------------------------------------------------------------------
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)


install(DIRECTORY  ${${PROJECT_NAME}_INCLUDE_DIR}/nifty
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/nifty)


set(${PROJECT_NAME}_CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE
    STRING ""install path for ${PROJECT_NAME}Config.cmake"")

configure_package_config_file(${PROJECT_NAME}Config.cmake.in
                              ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
                              INSTALL_DESTINATION ${${PROJECT_NAME}_CMAKECONFIG_INSTALL_DIR})


write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
                                 VERSION ${${PROJECT_NAME}_VERSION}
                                 COMPATIBILITY AnyNewerVersion)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${${PROJECT_NAME}_CMAKECONFIG_INSTALL_DIR})
",3.1,3.1
12538,sustrik,libdill,False,False,False,False,False,23,C,2019-10-28 23:16:16+00:00,2016-01-16 06:46:15+00:00,1295,1315,"# CMake build system is not officially supported.
# If you find out it's not working fix it and send a pull request.

cmake_minimum_required(VERSION 3.1)
project(libdill VERSION 1.6 LANGUAGES C)

include(CheckSymbolExists)
include(CheckFunctionExists)

file(GLOB sources ${CMAKE_CURRENT_LIST_DIR}/*.c ${CMAKE_CURRENT_LIST_DIR}/dns/dns.c)
include_directories(${PROJECT_SOURCE_DIR} ""${PROJECT_SOURCE_DIR}/dns"")
set_source_files_properties(dns/dns.c PROPERTIES COMPILE_FLAGS -std=c99)
add_library(dill ${sources})

# add pthread
list(APPEND CMAKE_REQUIRED_LIBRARIES pthread)
target_link_libraries(dill pthread)

# add openssl # requires libssl-dev on ubuntu
list(APPEND CMAKE_REQUIRED_LIBRARIES ssl crypto)
target_link_libraries(dill ssl crypto)

# check and enable rt if available
list(APPEND CMAKE_REQUIRED_LIBRARIES rt)
check_symbol_exists(clock_gettime time.h HAVE_CLOCK_GETTIME)
if(HAVE_CLOCK_GETTIME)
  target_link_libraries(dill rt)
endif()

# Installation (https://github.com/forexample/package-example)

# Layout. This works for all platforms:
#   * <prefix>/lib/cmake/<PROJECT-NAME>
#   * <prefix>/lib/
#   * <prefix>/include/
set(config_install_dir ""lib/cmake/${PROJECT_NAME}"")
set(include_install_dir ""include"")

set(generated_dir ""${CMAKE_CURRENT_BINARY_DIR}/generated"")

# Configuration
set(version_config ""${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake"")
set(project_config ""${generated_dir}/${PROJECT_NAME}Config.cmake"")
set(TARGETS_EXPORT_NAME ""${PROJECT_NAME}Targets"")
set(namespace ""${PROJECT_NAME}::"")

# Include module with fuction 'write_basic_package_version_file'
include(CMakePackageConfigHelpers)

# Configure '<PROJECT-NAME>ConfigVersion.cmake'
# Use:
#   * PROJECT_VERSION
write_basic_package_version_file(
    ""${version_config}"" COMPATIBILITY SameMajorVersion
)

# Configure '<PROJECT-NAME>Config.cmake'
# Use variables:
#   * TARGETS_EXPORT_NAME
#   * PROJECT_NAME
configure_package_config_file(
    ""cmake/Config.cmake.in""
    ""${project_config}""
    INSTALL_DESTINATION ""${config_install_dir}""
)

# Targets:
#   * <prefix>/lib/libdill.a
#   * header location after install: <prefix>/include/libdill.h
install(
    TARGETS dill
    EXPORT ""${TARGETS_EXPORT_NAME}""
    LIBRARY DESTINATION ""lib""
    ARCHIVE DESTINATION ""lib""
    RUNTIME DESTINATION ""bin""
    INCLUDES DESTINATION ""${include_install_dir}""
)

# Headers:
#   * libdill.h -> <prefix>/include/libdill.h
install(
    FILES libdill.h
    DESTINATION ""${include_install_dir}""
)

# Config
#   * <prefix>/lib/cmake/libdill/libdillConfig.cmake
#   * <prefix>/lib/cmake/libdill/libdillConfigVersion.cmake
install(
    FILES ""${project_config}"" ""${version_config}""
    DESTINATION ""${config_install_dir}""
)

# Config
#   * <prefix>/lib/cmake/libdill/libdillTargets.cmake
install(
    EXPORT ""${TARGETS_EXPORT_NAME}""
    NAMESPACE ""${namespace}""
    DESTINATION ""${config_install_dir}""
)

set(CMAKE_REQUIRED_LIBRARIES )

# check and enable stack guard and dns if available
list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)

set(CMAKE_REQUIRED_LIBRARIES )
set(CMAKE_REQUIRED_DEFINITIONS )

add_definitions(-DDILL_THREADS)

check_function_exists(mprotect HAVE_MPROTECT)
if(HAVE_MPROTECT)
  add_definitions(-DHAVE_MPROTECT)
endif()

check_function_exists(posix_memalign HAVE_POSIX_MEMALIGN)
if(HAVE_POSIX_MEMALIGN)
  add_definitions(-DHAVE_POSIX_MEMALIGN)
endif()

# tests
include(CTest)
if(BUILD_TESTING)
    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/tests)
    set(test_files
        tests/bundle.c
        tests/chan.c
        tests/choose.c
        tests/example.c
        tests/fd.c
        tests/go1.c
        tests/go2.c
        tests/go3.c
        tests/go4.c
        tests/go5.c
        tests/handle.c
        tests/happyeyeballs.c
        tests/http.c
        tests/iol.c
        tests/ipaddr.c
        tests/ipc.c
        tests/overload.c
        tests/prefix.c
        tests/rbtree.c
        tests/signals.c
        tests/sleep.c
        tests/socks5.c
        tests/suffix.c
        tests/tcp.c
        tests/threads.c
        tests/threads2.c
        tests/tls.c
        tests/udp.c
        tests/ws.c)
    foreach(test_file IN LISTS test_files)
      get_filename_component(test_name ${test_file} NAME_WE)
      add_executable(test_${test_name} ${test_file})
      set_target_properties(test_${test_name} PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/tests
        OUTPUT_NAME ${test_name})
      target_link_libraries(test_${test_name} dill)
      add_test(test_${test_name} tests/${test_name})
    endforeach()
endif()

# perf
if(BUILD_PERF)
    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/perf)
    set(perf_files
        perf/chan.c
        perf/choose.c
        perf/ctxswitch.c
        perf/go.c
        perf/hdone.c
        perf/timer.c
        perf/whispers.c)
    foreach(perf_file IN LISTS perf_files)
      get_filename_component(perf_name ${perf_file} NAME_WE)
      add_executable(perf_${perf_name} ${perf_file})
      set_target_properties(perf_${perf_name} PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/perf
        OUTPUT_NAME ${perf_name})
      target_link_libraries(perf_${perf_name} dill)
    endforeach()
endif()
",3.1,3.1
12719,benjaminjack,pinetree,False,False,False,False,False,3,C++,2019-12-06 23:00:14+00:00,2017-01-25 17:36:36+00:00,1,644,"cmake_minimum_required(VERSION 3.1.0)

project(pinetree)

# Modern C++ woooo!
set(CMAKE_CXX_STANDARD 11)

set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0 -g"")

# Tell Cmake that headers are also in source directory
include_directories(src/${PROJECT_NAME})
include_directories(tests)
include_directories(lib)

# Pull in source and test files
set(SOURCE_DIR ""${CMAKE_SOURCE_DIR}/src/${PROJECT_NAME}"")
set(SOURCES 
    ""${SOURCE_DIR}/feature.cpp""
    ""${SOURCE_DIR}/polymer.cpp""
    ""${SOURCE_DIR}/choices.cpp""
    ""${SOURCE_DIR}/tracker.cpp""
    ""${SOURCE_DIR}/model.cpp""
    ""${SOURCE_DIR}/gillespie.cpp""
    ""${SOURCE_DIR}/reaction.cpp"")

# Generate python module
add_subdirectory(lib/pybind11)
pybind11_add_module(core ${SOURCES} ""${SOURCE_DIR}/python_bindings.cpp"")
install(TARGETS core DESTINATION src/${PROJECT_NAME})

SET(TEST_DIR ""tests"")
SET(TESTS ${SOURCES}
    ""${TEST_DIR}/test_main.cpp""
    ""${TEST_DIR}/unit_tests.cpp"")

# Generate a test executable
#include_directories(lib/catch/include)
add_executable(""${PROJECT_NAME}_test"" ${TESTS})
",3.1.0,3.1
12751,rncbc,drumkv1,False,False,False,False,False,3,C++,2020-05-05 08:11:15+00:00,2015-09-22 14:48:55+00:00,18,1148,"project(DRUMKV1)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.9.14"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
else ()
  set (VERSION ""${VERSION}"")
endif ()

set (PACKAGE_NAME ""drumkv1"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""drumkv1"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable JACK standalone build.
option (CONFIG_JACK ""Enable JACK stand-alone build (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable ALSA MIDI support option.
option (CONFIG_ALSA_MIDI ""Enable ALSA MIDI support (default=yes)"" 1)

# Enable LV2 plugin build.
option (CONFIG_LV2 ""Enable LV2 plug-in build (default=yes)"" 1)

option (CONFIG_LV2_UI_X11 ""Enable LV2 plug-in X11 UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_EXTERNAL ""Enable LV2 plug-in External UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_IDLE ""Enable LV2 UI Idle interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_SHOW ""Enable LV2 UI Show interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_RESIZE ""Enable LV2 UI Resize interface support (default=yes)"" 1)

option (CONFIG_LV2_PROGRAMS ""Enable LV2 plug-in Programs support (default=yes)"" 1)

option (CONFIG_LV2_PATCH ""Enable LV2 plug-in Patch support (default=yes)"" 1)

option (CONFIG_LV2_PORT_EVENT ""Enable LV2 plug-in Port-event support (EXPERIMENTAL) (default=no)"" 0)


# Enable liblo availability.
option (CONFIG_LIBLO ""Enable liblo interface (default=yes)"" 1)

# Enable NSM support.
option (CONFIG_NSM ""Enable NSM support (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Make sure we get some subtle optimizations out there...
add_compile_options (-ffast-math)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for SNDFILE libraries.
pkg_check_modules (SNDFILE REQUIRED sndfile)
if (SNDFILE_FOUND)
  set (CONFIG_SNDFILE 1)
  include_directories (${SNDFILE_INCLUDE_DIRS})
  link_directories (${SNDFILE_LIBRARY_DIRS})
  link_libraries (${SNDFILE_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${SNDFILE_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** SNDFILE library not found."")
  set (CONFIG_SNDFILE 0)
endif ()

# Check for JACK libraries.
if (CONFIG_JACK)
  pkg_check_modules (JACK jack>=0.100.0)
  if (JACK_FOUND)
    include_directories (${JACK_INCLUDE_DIRS})
    link_directories (${JACK_LIBRARY_DIRS})
  # link_libraries (${JACK_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for JACK MIDI headers availability.
    if (CONFIG_JACK_MIDI)
      check_include_file (jack/midiport.h HAVE_JACK_MIDIPORT_H)
      if (NOT HAVE_JACK_MIDIPORT_H)
        set (CONFIG_JACK_MIDI 0)
      endif ()
    endif ()
    # Check for JACK session headers availability.
    if (CONFIG_JACK_SESSION)
      check_include_file (jack/session.h HAVE_JACK_SESSION_H)
      if (NOT HAVE_JACK_SESSION_H)
        set (CONFIG_JACK_SESSION 0)
      endif ()
    endif ()
    # Check for JACK session event callback availability.
    if (CONFIG_JACK_SESSION)
      check_function_exists (jack_set_session_callback CONFIG_JACK_SESSION)
    endif ()
    # Check for ALSA libraries.
    if (CONFIG_ALSA_MIDI)
      pkg_check_modules (ALSA alsa)
      set (CONFIG_ALSA_MIDI ${ALSA_FOUND})
      if (CONFIG_ALSA_MIDI)
        include_directories (${ALSA_INCLUDE_DIRS})
        link_directories (${ALSA_LIBRARY_DIRS})
        link_libraries (${ALSA_LIBRARIES})
      # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
      else ()
        message (WARNING ""*** ALSA library not found."")
      endif ()
    endif ()
  else ()
    message (WARNING ""*** JACK library not found."")
    set (CONFIG_JACK 0)
  endif ()
endif ()

if (NOT CONFIG_JACK)
  set (CONFIG_JACK_SESSION 0)
  set (CONFIG_JACK_MIDI 0)
  set (CONFIG_ALSA_MIDI 0)
  set (CONFIG_LIBLO 0)
  set (CONFIG_NSM 0)
endif ()

# Check for LIBLO libraries.
if (CONFIG_LIBLO)
  pkg_check_modules (LIBLO liblo)
  if (LIBLO_FOUND)
    include_directories (${LIBLO_INCLUDE_DIRS})
    link_directories (${LIBLO_LIBRARY_DIRS})
    link_libraries (${LIBLO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LIBLO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LIBLO library not found."")
    set (CONFIG_LIBLO 0)
  endif ()
endif ()

# Check for LV2 support.
if (CONFIG_LV2)
  pkg_check_modules (LV2 lv2)
  if (LV2_FOUND)
    include_directories (${LV2_INCLUDE_DIRS})
    link_directories (${LV2_LIBRARY_DIRS})
    link_libraries (${LV2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LV2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for LV2 Atom support.
    check_include_file (lv2/lv2plug.in/ns/ext/atom/atom.h HAVE_LV2_ATOM_H)
    if (NOT HAVE_LV2_ATOM_H)
      set (CONFIG_LV2_ATOM 0)
    else ()
      set (CONFIG_LV2_ATOM 1)
    endif ()
    set (CONFIG_LV2_ATOM_FORGE_OBJECT ${CONFIG_LV2_ATOM})
    set (CONFIG_LV2_ATOM_FORGE_KEY ${CONFIG_LV2_ATOM})
    # Check for LV2 UI support.
    check_include_file (lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_H)
    if (NOT HAVE_LV2_UI_H)
      set (CONFIG_LV2_UI 0)
    else ()
      set (CONFIG_LV2_UI 1)
    endif ()
    if (NOT CONFIG_LV2_UI)
      set (CONFIG_LV2_UI_X11 0)
      set (CONFIG_LV2_UI_EXTERNAL 0)
      set (CONFIG_LV2_UI_IDLE 0)
      set (CONFIG_LV2_UI_SHOW 0)
      set (CONFIG_LV2_UI_RESIZE 0)
    endif ()
  else ()
    message (WARNING ""*** LV2 SDK not found."")
    set (CONFIG_LV2 0)
  endif ()
endif ()

# Check for LV2 headers.
if (CONFIG_LV2)
  set (LV2_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/lv2)
  set (CMAKE_REQUIRED_INCLUDES ""${LV2_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
  include_directories (${LV2_INCLUDES})
else ()
  set (CONFIG_LV2_UI_X11 0)
  set (CONFIG_LV2_UI_EXTERNAL 0)
  set (CONFIG_LV2_UI_IDLE 0)
  set (CONFIG_LV2_UI_SHOW 0)
  set (CONFIG_LV2_UI_RESIZE 0)
  set (CONFIG_LV2_PROGRAMS 0)
  set (CONFIG_LV2_PATCH 0)
endif ()

if (CONFIG_LV2_UI_EXTERNAL)
  check_include_file (lv2_external_ui.h HAVE_LV2_EXTERNAL_UI_H)
  if (NOT HAVE_LV2_EXTERNAL_UI_H)
    set (CONFIG_LV2_UI_EXTERNAL 0)
  endif ()
endif ()

if (CONFIG_LV2_PROGRAMS)
  check_include_file (lv2_programs.h HAVE_LV2_PROGRAMS_H)
  if (NOT HAVE_LV2_PROGRAMS_H)
    set (CONFIG_LV2_PROGRAMS 0)
  endif ()
endif ()

if (CONFIG_LV2_PATCH)
  check_include_file (lv2/lv2plug.in/ns/ext/patch/patch.h HAVE_LV2_PATCH_H)
  if (NOT HAVE_LV2_PATCH_H)
    set (CONFIG_LV2_PATCH 0)
  endif ()
endif ()


add_subdirectory (src)


configure_file (drumkv1.spec.in drumkv1.spec IMMEDIATE @ONLY)

install (FILES drumkv1.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES drumkv1.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME drumkv1.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK stand-alone build . . . . . . . . . . . . . ."" CONFIG_JACK)
show_option (""  JACK session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
show_option (""  ALSA MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_ALSA_MIDI)
show_option (""  LV2 plug-in build  . . . . . . . . . . . . . . . ."" CONFIG_LV2)
show_option (""  LV2 plug-in X11 UI support   . . . . . . . . . . ."" CONFIG_LV2_UI_X11)
show_option (""  LV2 plug-in External UI support  . . . . . . . . ."" CONFIG_LV2_UI_EXTERNAL)
show_option (""  LV2 plug-in UI Idle interface support  . . . . . ."" CONFIG_LV2_UI_IDLE)
show_option (""  LV2 plug-in UI Show interface support  . . . . . ."" CONFIG_LV2_UI_SHOW)
show_option (""  LV2 plug-in UI Resize interface support  . . . . ."" CONFIG_LV2_UI_RESIZE)
show_option (""  LV2 plug-in Programs support . . . . . . . . . . ."" CONFIG_LV2_PROGRAMS)
show_option (""  LV2 plug-in Patch support  . . . . . . . . . . . ."" CONFIG_LV2_PATCH)
show_option (""  LV2 plug-in Port-event support (EXPERIMENTAL)  . ."" CONFIG_LV2_PORT_EVENT)
show_option (""  OSC service support (liblo)  . . . . . . . . . . ."" CONFIG_LIBLO)
show_option (""  NSM (Non Session Management) support . . . . . . ."" CONFIG_NSM)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
12905,esrf-bliss,Processlib,False,False,False,False,False,14,C++,2020-02-17 14:57:25+00:00,2012-09-21 20:52:38+00:00,1,319,"###########################################################################
# This file is part of ProcessLib, a submodule of LImA project the
# Library for Image Acquisition
#
# Copyright (C) : 2009-2017
# European Synchrotron Radiation Facility
# CS40220 38043 Grenoble Cedex 9
# FRANCE
#
# Contact: lima@esrf.fr
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
############################################################################

# For installation purpose one can set the following variables...
#
# - CMAKE_INSTALL_PREFIX:
#  Set this to a installation directory, default for UNIX is /usr/local
#
# - PYTHON_SITE_PACKAGES_DIR:
# Set this to an alternative python site-packages directory,
# default is the python installation directory, for UNIX it
# can be /usr/lib/python2.7/dist-packages/ .

cmake_minimum_required(VERSION 3.1)

project (processlib)
include(cmake/project_version.cmake)

# Include additional modules that are used unconditionally
include(GNUInstallDirs)
include(GenerateExportHeader)

# If conda build, always set lib dir to 'lib'
if($ENV{CONDA_BUILD})
  set(CMAKE_INSTALL_LIBDIR ""lib"")
endif()

# Set lower / upper case project names
string(TOUPPER ""${PROJECT_NAME}"" PROJECT_NAME_UPPER)
string(TOLOWER ""${PROJECT_NAME}"" PROJECT_NAME_LOWER)

# Check if processlib is being used directly or via add_subdirectory
set(PROCESSLIB_MASTER_PROJECT OFF)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set(PROCESSLIB_MASTER_PROJECT ON)
endif()

# Enable C++11 and later
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(MSVC AND MSVC_VERSION GREATER 1500)
    # Compiler specific (parallel build)
    set(CMAKE_C_FLAGS   ""${CMAKE_C_FLAGS} /MP"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")
endif()

# cmake directory for additional macros
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# Threads lib required
find_package(Threads REQUIRED)

# Enable GSL processing
option(PROCESSLIB_ENABLE_GSL ""enable GSL related processing?"" ON)
if(PROCESSLIB_ENABLE_GSL)
    find_package(GSL REQUIRED)
endif(PROCESSLIB_ENABLE_GSL)

# Enable python binding code compilation using sip generator
option(PROCESSLIB_ENABLE_PYTHON ""compile python binding code?"" ${LIMA_ENABLE_PYTHON})
if(PROCESSLIB_ENABLE_PYTHON)
    find_package(PythonInterp)
    find_package(PythonLibs)
    if(${PYTHONINTERP_FOUND})
      # python site-packages folder
      execute_process(
          COMMAND ${PYTHON_EXECUTABLE} -c ""from distutils.sysconfig import get_python_lib; print (get_python_lib())""
          OUTPUT_VARIABLE _PYTHON_SITE_PACKAGES_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
    endif()

    find_package(SIP)
    if(SIP_FOUND)
        include(SIPMacros)

        if(WIN32)
            set(SIP_TAGS WIN32_PLATFORM)
        elseif(UNIX)
            set(SIP_TAGS POSIX_PLATFORM)
        endif(WIN32)
        set(SIP_EXTRA_OPTIONS -e -g)
    else()
  	    message(FATAL_ERROR ""python SIP not installed, please install or disable PROCESSLIB_ENABLE_PYTHON"")
    endif()

    set(PYTHON_SITE_PACKAGES_DIR ${_PYTHON_SITE_PACKAGES_DIR} CACHE PATH ""where should python modules be installed?"")

    find_package(NumPy)
    if(${NUMPY_FOUND})
        include_directories(${NUMPY_INCLUDE_DIRS})
        link_directories(${NUMPY_LIBRARIES})
    else()
        message(FATAL_ERROR ""NumPy not found, cannot build python extensions"")
    endif()
endif()

set(processlib_srcs
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/project_version.cc # Add version info
    core/src/GslErrorMgr.cpp
    core/src/PoolThreadMgr.cpp
    core/src/TaskEventCallback.cpp
    core/src/LinkTask.cpp
    core/src/SinkTask.cpp
    core/src/TaskMgr.cpp
    core/src/HeaderContainer.cpp
    tasks/src/BackgroundSubstraction.cpp
    tasks/src/FlatfieldCorrection.cpp
    tasks/src/RoiCounter.cpp
    tasks/src/Binning.cpp
    tasks/src/Flip.cpp
    tasks/src/SoftRoi.cpp
    tasks/src/Bpm.cpp
    tasks/src/Mask.cpp
    tasks/src/Roi2Spectrum.cpp
    tasks/src/Rotation.cpp
    tasks/src/PeakFinder.cpp
)
if(WIN32)
    list(APPEND processlib_srcs
        core/src/WindowSpecific/pthread_cancelling.cpp
        core/src/WindowSpecific/pthread_cond.cpp
        core/src/WindowSpecific/pthread_key.cpp
        core/src/WindowSpecific/pthread_mutex.cpp
        core/src/WindowSpecific/pthread_rwlock.cpp
        core/src/WindowSpecific/pthread_thread.cpp
        core/src/WindowSpecific/stdio_compat.cpp
        core/src/WindowSpecific/time_compat.cpp
    )
endif()

file(GLOB_RECURSE core_incs ""core/include/*.h"")
file(GLOB_RECURSE tasks_incs ""tasks/include/*.h"")

add_library(processlib SHARED
    ${processlib_srcs}
    ${core_incs}
    ${tasks_incs}
)

# Generate export macros
generate_export_header(processlib)

# Set version
set_target_properties(processlib PROPERTIES
    VERSION ""${PROJECT_VERSION}""
    SOVERSION ""${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}"")

if(PROCESSLIB_ENABLE_GSL)
    target_link_libraries(processlib
        PUBLIC GSL::gsl
        PUBLIC GSL::gslcblas
    )
else()
    target_compile_definitions(processlib
        PUBLIC PROCESSLIB_WITHOUT_GSL
    )
endif(PROCESSLIB_ENABLE_GSL)

# The following might work with cmake 3.12
# Add the library processlib definition
# add_subdirectory(core)
# add_subdirectory(tasks)
# target_link_libraries(processlib
#   PRIVATE core
#   PRIVATE tasks)

target_include_directories(processlib PUBLIC
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/core/include>""
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/tasks/include>""
    ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>""
)
if(WIN32)
    target_include_directories(processlib PUBLIC
        ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/core/include/WindowSpecific>""
        ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/processlib/WindowSpecific>""
    )
endif()

if(THREADS_HAVE_PTHREAD_ARG)
    target_compile_options(PUBLIC processlib ""-pthread"")
endif()
if(CMAKE_THREAD_LIBS_INIT)
    target_link_libraries(processlib PRIVATE ""${CMAKE_THREAD_LIBS_INIT}"")
endif()

if(WIN32)
    target_compile_definitions(processlib PRIVATE LIBPROCESSLIB_EXPORTS)
    set_target_properties(processlib PROPERTIES PREFIX ""lib"")
    set_target_properties(processlib PROPERTIES IMPORT_PREFIX ""lib"")
endif()

# SIP generated binding code for python
if(PROCESSLIB_ENABLE_PYTHON)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/sip/processlib.sip sip/processlib.sip COPYONLY)
    set(SIP_INCLUDE_DIRS ""${CMAKE_CURRENT_SOURCE_DIR}/tasks/sip"")
    # Disable BPM is GLS is not enabled
    if(NOT PROCESSLIB_ENABLE_GSL)
        set(SIP_DISABLE_FEATURES ""BPM_SUPPORT"")
    endif(NOT PROCESSLIB_ENABLE_GSL)
    add_sip_python_module(processlib ""${CMAKE_CURRENT_BINARY_DIR}/sip/processlib.sip"")
    target_include_directories(python_module_processlib PRIVATE ${PYTHON_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/sip)
    target_link_libraries(python_module_processlib PRIVATE processlib)
endif()

## Installation

# Generate and install package config file and version
if(PROCESSLIB_MASTER_PROJECT)
    set(PROJECT_LIBRARIES processlib)
    set(SIP_INSTALL_DIR ${CMAKE_INSTALL_DATADIR}/sip/processlib)
    include(cmake/package_config.cmake)
endif()

install(
    TARGETS processlib
    EXPORT ""${TARGETS_EXPORT_NAME}""
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}   # import library
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}   # .so files are libraries
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}   # .dll files are binaries
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}  # this does not actually install anything (but used by downstream projects)
)

install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/project_version.h
        ${CMAKE_CURRENT_BINARY_DIR}/processlib_export.h
    COMPONENT devel
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/processlib
)

install(
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/core/include/processlib
    COMPONENT devel
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN ""*.h""
)

install(
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tasks/include/processlib
    COMPONENT devel
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN ""*.h""
)

if(WIN32)
    install(
        DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/core/include/WindowSpecific
        COMPONENT devel
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/processlib
        FILES_MATCHING PATTERN ""*.h""
    )
endif()

if(PROCESSLIB_ENABLE_PYTHON AND PROCESSLIB_MASTER_PROJECT)
    install(
        FILES sip/processlib.sip
              tasks/sip/BackgroundSubstraction.sip
              tasks/sip/Binning.sip
              tasks/sip/Bpm.sip
              tasks/sip/FlatfieldCorrection.sip
              tasks/sip/Flip.sip
              tasks/sip/Mask.sip
              tasks/sip/PeakFinder.sip
              tasks/sip/Roi2Spectrum.sip
              tasks/sip/RoiCounter.sip
              tasks/sip/Rotation.sip
              tasks/sip/SoftRoi.sip
        COMPONENT devel
        DESTINATION ${SIP_INSTALL_DIR}
    )
endif()

## Tests
if(PROCESSLIB_ENABLE_TESTS)
    enable_testing()
    #add_subdirectory(test)
endif()

# Packages
set(CPACK_GENERATOR ""DEB"")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""ESRF/BLISS"") #required
set(CPACK_PACKAGE_CONTACT ""lima@esrf.fr"")
include(CPack)
",3.1,3.1
12960,shdown,luastatus,False,False,False,False,False,8,C,2020-04-14 19:22:30+00:00,2016-12-08 17:04:56+00:00,156,588,"cmake_minimum_required (VERSION 3.1.3)
project (luastatus C)

if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()

set (CMAKE_C_STANDARD 99)

if (""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"" OR
    ""${CMAKE_C_COMPILER_ID}"" STREQUAL ""Clang""
)
    if (${CMAKE_BUILD_TYPE} MATCHES ""Release|MinSizeRel"")
        set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -s"")
    endif ()
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pedantic -Wall -Wextra -Wcast-qual -Wredundant-decls -Wshadow -Winit-self"")
endif ()

#------------------------------------------------------------------------------

find_package (PkgConfig REQUIRED)
if (WITH_LUA_LIBRARY)
    pkg_search_module (LUA REQUIRED ""${WITH_LUA_LIBRARY}"")
else ()
    pkg_search_module (LUA REQUIRED
        lua54 lua-5.4 lua5.4
        lua53 lua-5.3 lua5.3
        lua52 lua-5.2 lua5.2
        lua51 lua-5.1 lua5.1
        luajit
        lua)
endif ()

function (luastatus_target_compile_with target var)
    target_include_directories (${target} SYSTEM PUBLIC
        ${${var}_INCLUDE_DIRS})
    target_compile_options (${target} PUBLIC
        ${${var}_CFLAGS_OTHER})
endfunction ()

function (luastatus_target_build_with target var)
    luastatus_target_compile_with (""${target}"" ""${var}"")
    target_link_libraries (${target} PUBLIC ${${var}_LIBRARIES})
endfunction ()

#------------------------------------------------------------------------------

include (GNUInstallDirs)

set (BARLIBS_DIR ""${CMAKE_INSTALL_FULL_LIBDIR}/luastatus/barlibs"")
set (PLUGINS_DIR ""${CMAKE_INSTALL_FULL_LIBDIR}/luastatus/plugins"")

function (luastatus_add_barlib_or_plugin destdir name)
    set (sources ${ARGV})
    list (REMOVE_AT sources 0 1)
    add_library (""${name}"" MODULE ${sources})
    set_target_properties (""${name}"" PROPERTIES PREFIX """")
    if (destdir)
        install (TARGETS ""${name}"" DESTINATION ""${destdir}"")
    endif ()
endfunction ()

function (luastatus_add_barlib)
    luastatus_add_barlib_or_plugin (""${BARLIBS_DIR}"" ${ARGV})
endfunction ()

function (luastatus_add_plugin)
    luastatus_add_barlib_or_plugin (""${PLUGINS_DIR}"" ${ARGV})
endfunction ()

function (luastatus_add_barlib_noinstall)
    luastatus_add_barlib_or_plugin ("""" ${ARGV})
endfunction ()

function (luastatus_add_plugin_noinstall)
    luastatus_add_barlib_or_plugin ("""" ${ARGV})
endfunction ()

option (BUILD_DOCS ""build man pages"" ON)

function (luastatus_add_man_page src basename section)
    if (NOT BUILD_DOCS)
        return ()
    endif ()
    set (dest ""${basename}.${section}"")
    add_custom_command (
        OUTPUT ""${dest}""
        COMMAND ""${PROJECT_SOURCE_DIR}/generate-man.sh"" ARGS ""${CMAKE_CURRENT_SOURCE_DIR}/${src}"" ""${dest}""
        WORKING_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}""
        MAIN_DEPENDENCY ""${src}""
        VERBATIM)
    add_custom_target (""man${section}-${basename}"" ALL DEPENDS ""${dest}"")
    install (FILES ""${dest}"" DESTINATION ""${CMAKE_INSTALL_MANDIR}/man${section}"")
endfunction ()

#------------------------------------------------------------------------------

add_subdirectory (libls)
add_subdirectory (luastatus)
add_subdirectory (tests)

#------------------------------------------------------------------------------

macro (DEF_OPT optname subdir defvalue)
    option (${optname} ""build ${subdir}"" ${defvalue})
    if (${optname})
        add_subdirectory (${subdir})
    endif ()
endmacro ()

DEF_OPT (BUILD_BARLIB_DWM                 ""barlibs/dwm""                 ON)
DEF_OPT (BUILD_BARLIB_I3                  ""barlibs/i3""                  ON)
DEF_OPT (BUILD_BARLIB_LEMONBAR            ""barlibs/lemonbar""            ON)
DEF_OPT (BUILD_BARLIB_STDOUT              ""barlibs/stdout""              ON)

DEF_OPT (BUILD_PLUGIN_ALSA                ""plugins/alsa""                ON)
DEF_OPT (BUILD_PLUGIN_BACKLIGHT_LINUX     ""plugins/backlight-linux""     ON)
DEF_OPT (BUILD_PLUGIN_BATTERY_LINUX       ""plugins/battery-linux""       ON)
DEF_OPT (BUILD_PLUGIN_CPU_USAGE_LINUX     ""plugins/cpu-usage-linux""     ON)
DEF_OPT (BUILD_PLUGIN_DBUS                ""plugins/dbus""                ON)
DEF_OPT (BUILD_PLUGIN_FILE_CONTENTS_LINUX ""plugins/file-contents-linux"" ON)
DEF_OPT (BUILD_PLUGIN_FS                  ""plugins/fs""                  ON)
DEF_OPT (BUILD_PLUGIN_IMAP                ""plugins/imap""                ON)
DEF_OPT (BUILD_PLUGIN_INOTIFY             ""plugins/inotify""             ON)
DEF_OPT (BUILD_PLUGIN_MEM_USAGE_LINUX     ""plugins/mem-usage-linux""     ON)
DEF_OPT (BUILD_PLUGIN_MPD                 ""plugins/mpd""                 ON)
DEF_OPT (BUILD_PLUGIN_NETWORK_LINUX       ""plugins/network-linux""       ON)
DEF_OPT (BUILD_PLUGIN_PIPE                ""plugins/pipe""                ON)
DEF_OPT (BUILD_PLUGIN_PULSE               ""plugins/pulse""               OFF)
DEF_OPT (BUILD_PLUGIN_TIMER               ""plugins/timer""               ON)
DEF_OPT (BUILD_PLUGIN_UDEV                ""plugins/udev""                ON)
DEF_OPT (BUILD_PLUGIN_XKB                 ""plugins/xkb""                 ON)
DEF_OPT (BUILD_PLUGIN_XTITLE              ""plugins/xtitle""              ON)
",3.1.3,3.1
13131,trilkk,dnload,False,False,False,False,False,8,Python,2020-05-06 15:47:43+00:00,2015-04-12 14:17:25+00:00,51,356,"cmake_minimum_required(VERSION 3.1)
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release"")
project(dnload)

enable_language(C)
enable_language(CXX)

include(""defaults.cmake"")

find_boost(""filesystem"" ""program_options"" ""system"" ""wave"")
find_png()
find_sdl2()
find_threads()

check_mali()
check_videocore()
if(MALI_FOUND)
    add_definitions(-DDNLOAD_MALI -DDNLOAD_GLESV2)
    set(EGL_LIBRARY ""EGL"")
    set(OPENGL_gl_LIBRARY ""GLESv2"")
elseif(VIDEOCORE_FOUND)
    add_definitions(-DDNLOAD_VIDEOCORE -DDNLOAD_GLESV2)
    set(BCM_HOST_LIBRARY ""bcm_host"")
    set(EGL_LIBRARY ""EGL"")
    set(OPENGL_gl_LIBRARY ""GLESv2"")
else()
    find_opengl()
    find_glew()
endif()

output_flags(""DEBUG"" on)

add_definitions(-DUSE_LD)
add_definitions(-DVERSION=""r14"")

include_directories(""${PROJECT_SOURCE_DIR}/src"")

add_executable(intro
    ""src/bsd_rand.c""
    ""src/bsd_rand.h""
    ""src/glsl_pipeline.cpp""
    ""src/glsl_pipeline.hpp""
    ""src/glsl_program.cpp""
    ""src/glsl_program.hpp""
    ""src/glsl_shader.cpp""
    ""src/glsl_shader.hpp""
    ""src/glsl_shader_program.cpp""
    ""src/glsl_shader_program.hpp""
    ""src/glsl_shader_source.cpp""
    ""src/glsl_shader_source.hpp""
    ""src/glsl_wave.cpp""
    ""src/glsl_wave.hpp""
    ""src/image_png.cpp""
    ""src/image_png.hpp""
    ""src/intro.cpp"")
if(MSVC)
    target_link_libraries(intro ""WINMM"")
    target_link_libraries(intro ""${OPENGL_gl_LIBRARY}"")
    target_link_libraries(intro debug ""${GLEW_LIBRARY_DEBUG}"" optimized ""${GLEW_LIBRARY}"")
    target_link_libraries(intro debug ""${PNG_LIBRARY_DEBUG}"" optimized ""${PNG_LIBRARY}"")
    target_link_libraries(intro debug ""${SDL2_LIBRARY_DEBUG}"" optimized ""${SDL2_LIBRARY}"")
    target_link_libraries(intro debug ""${ZLIB_LIBRARY_DEBUG}"" optimized ""${ZLIB_LIBRARY}"")
else()
    if(MALI_FOUND)
        target_link_libraries(intro ""${EGL_LIBRARY}"")
        target_link_libraries(intro ""${OPENGL_gl_LIBRARY}"")
    elseif(VIDEOCORE_FOUND)
        target_link_libraries(intro ""${BCM_HOST_LIBRARY}"")
        target_link_libraries(intro ""${EGL_LIBRARY}"")
        target_link_libraries(intro ""${OPENGL_gl_LIBRARY}"")
    else()
        target_link_libraries(intro ""${GLEW_LIBRARY}"")
    endif()
    target_link_libraries(intro ""${BOOST_FILESYSTEM_LIBRARY}"")
    target_link_libraries(intro ""${BOOST_PROGRAM_OPTIONS_LIBRARY}"")
    target_link_libraries(intro ""${BOOST_SYSTEM_LIBRARY}"")
    target_link_libraries(intro ""${BOOST_THREAD_LIBRARY}"")
    target_link_libraries(intro ""${BOOST_WAVE_LIBRARY}"")
    target_link_libraries(intro ""${PNG_LIBRARY}"")
    target_link_libraries(intro ""${SDL2_LIBRARY}"")
endif()
target_link_libraries(intro ""${THREADS_LIBRARY}"")
",3.1,3.1
13214,igormironchik,args-parser,False,False,False,False,False,2,C++,2019-03-11 06:24:14+00:00,2015-03-13 08:17:15+00:00,32,263,"
cmake_minimum_required( VERSION 3.1 )

set( ARGS_VERSION ""5.0.1"" )

option( BUILD_EXAMPLES ""Build examples? Default ON."" ON )
option( BUILD_TESTS ""Build tests? Default ON."" ON )

if( NOT CMAKE_BUILD_TYPE )
	set( CMAKE_BUILD_TYPE ""Release""
		CACHE STRING ""Choose the type of build.""
		FORCE )
endif( NOT CMAKE_BUILD_TYPE )

set( CMAKE_CXX_STANDARD 14 )

set( CMAKE_CXX_STANDARD_REQUIRED ON )

file( COPY runtests.rb
	DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )

project( Args )

if( ${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME} )

	if( BUILD_EXAMPLES )
		add_subdirectory( samples )
	endif()

	if( BUILD_TESTS )
		enable_testing()

		add_subdirectory( tests )
	endif()

	add_library( Args INTERFACE )

	install( DIRECTORY Args
		DESTINATION include
	)

	install( FILES
			Args/all.hpp
			Args/api.hpp
			Args/arg_as_command.hpp
			Args/arg.hpp
			Args/arg_iface.hpp
			Args/cmd_line.hpp
			Args/command.hpp
			Args/context.hpp
			Args/enums.hpp
			Args/exceptions.hpp
			Args/group_iface.hpp
			Args/groups.hpp
			Args/help.hpp
			Args/help_printer.hpp
			Args/help_printer_iface.hpp
			Args/multi_arg.hpp
			Args/types.hpp
			Args/utils.hpp
			Args/value_utils.hpp
		DESTINATION
			include/Args
	)

	install( TARGETS Args
		EXPORT ArgsTargets
		RUNTIME DESTINATION bin
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION lib
		INCLUDES DESTINATION include
	)

	install( EXPORT ArgsTargets
		DESTINATION lib/cmake/Args
	)

	include( CMakePackageConfigHelpers )

	write_basic_package_version_file(
		""${CMAKE_CURRENT_BINARY_DIR}/ArgsConfigVersion.cmake""
		VERSION ${ARGS_VERSION}
		COMPATIBILITY AnyNewerVersion )

	configure_package_config_file( ArgsConfig.cmake.in
		""${CMAKE_CURRENT_BINARY_DIR}/ArgsConfig.cmake""
		INSTALL_DESTINATION lib/cmake/Args )

	install( FILES ${PROJECT_BINARY_DIR}/ArgsConfig.cmake
			${PROJECT_BINARY_DIR}/ArgsConfigVersion.cmake
		DESTINATION lib/cmake/Args )

else()

	set( Args_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE )

endif( ${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME} )
",3.1,3.1
13314,alexeevdv,falltergeist,False,False,False,False,False,27,C++,2020-05-08 10:46:23+00:00,2012-11-24 10:08:12+00:00,600,2049,"#
# Copyright 2012-2018 Falltergeist Developers.
#
# This file is part of Falltergeist.
#
# Falltergeist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Falltergeist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Falltergeist.  If not, see <http://www.gnu.org/licenses/>.
#

# It must be set before project
set(CMAKE_BUILD_TYPE ""Debug"" CACHE STRING ""Choose the type of build (by default Debug)"")

cmake_minimum_required(VERSION 3.1)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/modules)

project(falltergeist)
set(falltergeist_VERSION  0.3.1)

include_directories(src)

if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
	set(USE_CONAN TRUE)
endif()

if (USE_CONAN)
	include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
	conan_basic_setup()
endif()

find_package(ZLIB REQUIRED)
if(NOT ZLIB_FOUND)
	message(FATAL_ERROR ""zlib library not found"")
endif(NOT ZLIB_FOUND)
include_directories(${ZLIB_INCLUDE_DIRS})

find_package(SDL2 REQUIRED)
if(NOT SDL2_FOUND)
	message(FATAL_ERROR ""SDL2 library not found"")
endif(NOT SDL2_FOUND)
include_directories(${SDL2_INCLUDE_DIR})

find_package(SDL2_mixer REQUIRED)
if(NOT SDLMIXER_FOUND)
	message(FATAL_ERROR ""SDL2_mixer library not found"")
endif(NOT SDLMIXER_FOUND)
include_directories(${SDL_MIXER_INCLUDE_DIR})

find_package(SDL2_image REQUIRED)
if(NOT SDLIMAGE_FOUND)
	message(FATAL_ERROR ""SDL2_image library not found"")
endif(NOT SDLIMAGE_FOUND)
include_directories(${SDL_IMAGE_INCLUDE_DIR})

find_package(OpenGL REQUIRED)
if(NOT OPENGL_FOUND)
	message(FATAL_ERROR ""GL library not found"")
endif(NOT OPENGL_FOUND)
include_directories(${OPENGL_INCLUDE_DIR})

if (NOT USE_CONAN)
	find_package(GLEW REQUIRED)
	if(NOT GLEW_FOUND)
		message(FATAL_ERROR ""GLEW library not found"")
	endif(NOT GLEW_FOUND)
	include_directories(${GLEW_INCLUDE_DIR})
endif()

find_package(GLM REQUIRED)
if(NOT GLM_FOUND)
	message(FATAL_ERROR ""GLM library not found"")
endif(NOT GLM_FOUND)
include_directories(${GLM_INCLUDE_DIR})

file(GLOB_RECURSE SOURCES  src/*.cpp)

if(MSVC)
	set(_additional_includes ""package/windows.rc"" pchheader.cpp)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

add_executable(falltergeist main.cpp ${SOURCES} ${_additional_includes})

set_target_properties(falltergeist PROPERTIES
	CXX_STANDARD 14
	CXX_STANDARD_REQUIRED YES
	CXX_EXTENSIONS NO
)

if(MSVC)
	set_property(TARGET falltergeist
		APPEND PROPERTY LINK_FLAGS /NODEFAULTLIB:MSVCRT
	)
	include(cmake/modules/PrecompiledHeader.cmake)
	add_precompiled_header(falltergeist pchheader.h FORCEINCLUDE SOURCE_CXX pchheader.cpp)
else()
	add_definitions(-Wall)
endif()

if (CONAN_LIBS)
	target_link_libraries(falltergeist ${CONAN_LIBS})
else()
	target_link_libraries(falltergeist ${ZLIB_LIBRARIES} ${SDL2_LIBRARY} ${SDL_MIXER_LIBRARY} ${SDL_IMAGE_LIBRARY} ${OPENGL_gl_LIBRARY} ${GLEW_LIBRARY})
endif()

include(cmake/install/windows.cmake)
include(cmake/install/linux.cmake)
include(cmake/install/apple.cmake)
",3.1,3.1
13316,c-koi,gmic-qt,False,False,False,False,False,17,C++,2020-04-14 07:12:29+00:00,2017-04-21 16:55:31+00:00,66,522,"project(gmic-qt)

message(STATUS ""Using CMake version: ${CMAKE_VERSION}"")

cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
LIST (APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/modules"")
include(FeatureSummary)

set(CMAKE_CXX_STANDARD 11)
add_definitions(-Dcimg_use_cpp11=1)
set(MIN_QT_VERSION 5.2.0)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC OFF)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(EXTRA_LIBRARIES)

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

message(""Build type is "" ${CMAKE_BUILD_TYPE})

set (GMIC_QT_HOST ""gimp"" CACHE STRING ""Define for which host qmic-qt will be built: gimp, krita, none, paintdotnet, or digikam."")
if (${GMIC_QT_HOST} STREQUAL ""none"")
  message(""Building standalone version."")
else()
  message(""Building for target host application: "" ${GMIC_QT_HOST})
endif()

if(EXISTS ""../src/gmic.cpp"")
  set (GMIC_PATH ""../src"" CACHE STRING ""Define the path to the gmic headers"")
else()
  set (GMIC_PATH ""../gmic/src"" CACHE STRING ""Define the path to the gmic headers"")
endif()

message(""G'MIC path: "" ${GMIC_PATH})

option(ENABLE_DYNAMIC_LINKING ""Dynamically link the binaries to the GMIC shared library"" OFF)
option(ENABLE_CURL ""Add support for curl"" ON)
set (GMIC_LIB_PATH ""${GMIC_PATH}"" CACHE STRING ""Define the path to the GMIC shared library"")

option(ENABLE_ASAN ""Enable -fsanitize=address (if debug build)"" ON)
option(ENABLE_FFTW3 ""Enable FFTW3 library support"" ON)

option(ENABLE_LTO ""Enable -flto (Link Time Optimizer) on gcc and clang"" ON)

if (WIN32)
    message(""LTO is disabled (windows platform)"")
    set(ENABLE_LTO OFF)
endif()

if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
    set(ENABLE_LTO OFF)
endif()


#
# Look for G'MIC repository
#
get_filename_component(GMIC_ABSOLUTE_PATH ${GMIC_PATH} ABSOLUTE BASEDIR ${CMAKE_SOURCE_DIR})
if (EXISTS ${GMIC_ABSOLUTE_PATH}/gmic.cpp)
  message(""Found G'MIC repository"")
else()
  get_filename_component(TARGET_CLONE_DIR ${GMIC_ABSOLUTE_PATH}/.. ABSOLUTE)
  message("""")
  message(""Cannot find G'MIC repository in "" ${GMIC_ABSOLUTE_PATH} )
  message("""")
  message(""You should try:"")
  message("""")
  message(""   git clone https://github.com/dtschump/gmic.git "" ${TARGET_CLONE_DIR}/gmic )
  message("""")
  message(FATAL_ERROR ""\nG'MIC repository not found"")
endif()

#
# Look for CImg.h and gmic_stdlib.h
#
set(GMIC_FILES CImg.h gmic_stdlib.h)
foreach(F ${GMIC_FILES})
  if(EXISTS ${GMIC_ABSOLUTE_PATH}/${F})
    message(""Found "" ${GMIC_PATH}/${F})
  else()
    message(${F} "" not found"")
    execute_process(COMMAND make -C ${GMIC_ABSOLUTE_PATH} ${F})
    if(EXISTS ${GMIC_ABSOLUTE_PATH}/${F})
      message(""Found "" ${GMIC_PATH}/${F})
    else()
      message(FATAL_ERROR ""\nCannot obtain "" ${GMIC_PATH}/${F})
    endif()
  endif()
endforeach()

#
# Ensure that gmic and CImg are the same version
#
file(STRINGS ${GMIC_ABSOLUTE_PATH}/CImg.h CIMG_VERSION REGEX ""cimg_version "")
string(REGEX REPLACE "".*cimg_version "" """" CIMG_VERSION ${CIMG_VERSION})
message(""CImg version is ["" ${CIMG_VERSION} ""]"")

file(STRINGS ${GMIC_ABSOLUTE_PATH}/gmic.h GMIC_VERSION REGEX ""gmic_version "")
string(REGEX REPLACE "".*gmic_version "" """" GMIC_VERSION ${GMIC_VERSION})
message(""G'MIC version is ["" ${GMIC_VERSION} ""]"")

if (NOT(${GMIC_VERSION} EQUAL ${CIMG_VERSION}))
  message(FATAL_ERROR ""\nVersion numbers of files 'gmic.h' ("" ${GMIC_VERSION} "") and 'CImg.h' ("" ${CIMG_VERSION} "") mismatch"")
endif()


option(PRERELEASE ""Set to ON makes this a prelease build"")
if (${PRERELEASE})
    string(TIMESTAMP PRERELEASE_DATE %y%m%d)
    message(""Prelease date is "" ${PRERELEASE_DATE})
    add_definitions(-Dgmic_prerelease=""${PRERELEASE_DATE}"")
endif()

option(DRMINGW ""Set to ON enables the drmingw debugger."")
if (${DRMINGW})
    add_definitions(-DDRMINGW)
endif()


# Required packages

#
# Qt5
#
find_package(Qt5 ${MIN_QT_VERSION}
        REQUIRED COMPONENTS
        Core
        Gui
        Widgets
        Network
)

#
# For the translations
#
find_package(Qt5LinguistTools REQUIRED)

#
# PNG
#
find_package(PNG REQUIRED)
add_definitions(${PNG_DEFINITIONS})
add_definitions(-Dcimg_use_png)
include_directories(SYSTEM ${PNG_INCLUDE_DIR})
if (APPLE)
    # this is not added correctly on OSX -- see http://forum.kde.org/viewtopic.php?f=139&t=101867&p=221242#p221242
    include_directories(SYSTEM ${PNG_INCLUDE_DIR})
endif()

#
# ZLIB
#
find_package(ZLIB REQUIRED)
add_definitions(-Dcimg_use_zlib)
include_directories(SYSTEM ${ZLIB_INCLUDE_DIRS} )

#
# FFTW3
#
find_package(FFTW3 REQUIRED)
add_definitions(-Dcimg_use_fftw3 )
include_directories(${FFTW3_INCLUDE_DIR})
find_library(FFTW3_THREADS_LIB fftw3_threads PATHS ${FFTW3_LIBRARY_DIRS})
if(FFTW3_THREADS_LIB STREQUAL ""FFTW3_THREADS_LIB-NOTFOUND"")
    add_definitions(-Dcimg_use_fftw3_singlethread)
else()
    list(APPEND EXTRA_LIBRARIES ""-lfftw3_threads"")
endif()

#
# CURL
#
if(ENABLE_CURL)
    find_package(CURL)
    if (CURL_FOUND)
        add_definitions(-Dcimg_use_curl)
        include_directories(SYSTEM ${CURL_INCLUDE_DIRS} )
    endif()
endif()

#
# Test for OpenMP
#
find_package(OpenMP)
set_package_properties(OpenMP PROPERTIES
    DESCRIPTION ""A low-level parallel execution library""
    URL ""http://openmp.org/wp/""
    TYPE OPTIONAL
    PURPOSE ""Optionally used by gmic-qt"")

if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.8.3 AND OPENMP_FOUND)
    message(""G'Mic: using OpenMP"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    add_definitions(-Dcimg_use_openmp)
    add_definitions(-fopenmp)
endif()

#
# LTO option
#

if (ENABLE_LTO AND (CMAKE_COMPILER_IS_GNUCC OR (CMAKE_CSS_COMPILER_IS STREQUAL ""Clang"")))
    message(""Link Time Optimizer enabled"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -flto"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -flto"")
endif()

#
# add all defines
#

set(gmic_qt_LIBRARIES
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::Network
        ${PNG_LIBRARIES}
        ${FFTW3_LIBRARIES}
        ${ZLIB_LIBRARIES}
        ${EXTRA_LIBRARIES}
)

if(ENABLE_CURL)
    if (CURL_FOUND)
        set(gmic_qt_LIBRARIES
            ${gmic_qt_LIBRARIES}
            ${CURL_LIBRARIES}
        )
    endif()
endif()

add_definitions(-Dgmic_build)
add_definitions(-Dcimg_use_abort)
add_definitions(-Dgmic_is_parallel)
add_definitions(-Dgmic_gui)
add_definitions(-Dcimg_use_abort)
add_definitions(-Dcimg_appname=\""gmic\"")

if (UNIX AND NOT APPLE)
    add_definitions(-Dcimg_display=1)
    add_definitions(-D_IS_LINUX_)
    add_definitions(-Dcimg_use_vt100)
    add_definitions(-D_IS_UNIX_)
    find_package(X11)
    set(gmic_qt_LIBRARIES
        ${gmic_qt_LIBRARIES}
        ${X11_LIBRARIES} # XXX: Search for X11: Wayland is coming!
    )

endif()

if (APPLE)
    add_definitions(-Dcimg_display=0)
    add_definitions(-D_IS_MACOS_)
    set(CMAKE_MACOSX_RPATH 1)
    set(BUILD_WITH_INSTALL_RPATH 1)
    add_definitions(-mmacosx-version-min=10.9 -Wno-macro-redefined -Wno-deprecated-register)
endif()

if (WIN32)
    add_definitions(-Dcimg_display=2)
    add_definitions(-DPSAPI_VERSION=1)
    set(gmic_qt_LIBRARIES
        ${gmic_qt_LIBRARIES}
        pthread psapi gdi32
    )
endif()

SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH ""$ORIGIN/"")

if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
    add_definitions(-D_GMIC_QT_DEBUG_)
    if(ENABLE_ASAN)
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address"")
      set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
    endif(ENABLE_ASAN)
elseif (CMAKE_BUILD_TYPE STREQUAL ""Release"")
    add_definitions(-DQT_NO_DEBUG_OUTPUT)
    string(REPLACE ""-O2"" """" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}"")
    string(REPLACE ""-O3"" """" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}"")
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -Ofast"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -s"")
    if (WIN32)
      set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -mwindows"")
    endif()
elseif (CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"")
    add_definitions(-DQT_NO_DEBUG_OUTPUT)
    string(REPLACE ""-O2"" """" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
    string(REPLACE ""-O3"" """" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
    set_source_files_properties(${GMIC_PATH}/gmic.cpp PROPERTIES COMPILE_FLAGS ""-Ofast"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2"")
else()
    message(FATAL_ERROR ""Build type not recognized (${CMAKE_BUILD_TYPE})"")
endif()

include_directories(${CMAKE_SOURCE_DIR}/src ${GMIC_PATH})

set (gmic_qt_SRCS

  src/ClickableLabel.h
  src/Common.h
  src/OverrideCursor.h
  src/DialogSettings.h
  src/FilterParameters/AbstractParameter.h
  src/FilterParameters/BoolParameter.h
  src/FilterParameters/ButtonParameter.h
  src/FilterParameters/ChoiceParameter.h
  src/FilterParameters/ColorParameter.h
  src/FilterParameters/ConstParameter.h
  src/FilterParameters/CustomDoubleSpinBox.h
  src/FilterParameters/FileParameter.h
  src/FilterParameters/FilterParametersWidget.h
  src/FilterParameters/FloatParameter.h
  src/FilterParameters/FolderParameter.h
  src/FilterParameters/IntParameter.h
  src/FilterParameters/LinkParameter.h
  src/FilterParameters/MultilineTextParameterWidget.h
  src/FilterParameters/NoteParameter.h
  src/FilterParameters/PointParameter.h
  src/FilterParameters/SeparatorParameter.h
  src/FilterParameters/TextParameter.h
  src/FilterSelector/FiltersModel.h
  src/FilterSelector/FiltersModelReader.h
  src/FilterSelector/FiltersPresenter.h
  src/FilterSelector/FiltersView/FiltersView.h
  src/FilterSelector/FiltersView/TreeView.h
  src/FilterSelector/FiltersVisibilityMap.h
  src/CroppedImageListProxy.h
  src/CroppedActiveLayerProxy.h
  src/FilterSyncRunner.h
  src/FilterThread.h
  src/Globals.h
  src/gmic_qt.h
  src/GmicStdlib.h
  src/GmicProcessor.h
  src/HeadlessProcessor.h
  src/Host/host.h
  src/HtmlTranslator.h
  src/IconLoader.h
  src/ImageConverter.h
  src/ImageTools.h
  src/InputOutputState.h
  src/KeypointList.h
  src/LayersExtentProxy.h
  src/Logger.h
  src/MainWindow.h
  src/ParametersCache.h
  src/PreviewMode.h
  src/TimeLogger.h
  src/Updater.h
  src/Utils.h
  src/FilterSelector/FiltersView/FilterTreeFolder.h
  src/FilterSelector/FiltersView/FilterTreeItem.h
  src/FilterSelector/FavesModel.h
  src/FilterSelector/FavesModelReader.h
  src/FilterSelector/FiltersView/FilterTreeAbstractItem.h
  src/FilterSelector/FiltersView/FilterTreeItemDelegate.h
  src/FilterSelector/FavesModelWriter.h
  src/Widgets/ProgressInfoWidget.h
  src/Widgets/PreviewWidget.h
  src/Widgets/InOutPanel.h
  src/Widgets/ZoomLevelSelector.h
  src/Widgets/SearchFieldWidget.h
  src/Widgets/LanguageSelectionWidget.h
  src/Widgets/ProgressInfoWindow.h
  src/ZoomConstraint.h

  ${GMIC_PATH}/gmic.h
  ${GMIC_PATH}/CImg.h
  ${GMIC_PATH}/gmic_stdlib.h

  src/ClickableLabel.cpp
  src/Common.cpp
  src/OverrideCursor.cpp
  src/DialogSettings.cpp
  src/FilterParameters/AbstractParameter.cpp
  src/FilterParameters/BoolParameter.cpp
  src/FilterParameters/ButtonParameter.cpp
  src/FilterParameters/ChoiceParameter.cpp
  src/FilterParameters/ColorParameter.cpp
  src/FilterParameters/ConstParameter.cpp
  src/FilterParameters/CustomDoubleSpinBox.cpp
  src/FilterParameters/FileParameter.cpp
  src/FilterParameters/FilterParametersWidget.cpp
  src/FilterParameters/FloatParameter.cpp
  src/FilterParameters/FolderParameter.cpp
  src/FilterParameters/IntParameter.cpp
  src/FilterParameters/LinkParameter.cpp
  src/FilterParameters/MultilineTextParameterWidget.cpp
  src/FilterParameters/NoteParameter.cpp
  src/FilterParameters/PointParameter.cpp
  src/FilterParameters/SeparatorParameter.cpp
  src/FilterParameters/TextParameter.cpp
  src/FilterSelector/FiltersModel.cpp
  src/FilterSelector/FiltersModelReader.cpp
  src/FilterSelector/FiltersPresenter.cpp
  src/FilterSelector/FiltersView/FiltersView.cpp
  src/FilterSelector/FiltersView/TreeView.cpp
  src/FilterSelector/FiltersVisibilityMap.cpp
  src/CroppedImageListProxy.cpp
  src/CroppedActiveLayerProxy.cpp
  src/FilterSyncRunner.cpp
  src/FilterThread.cpp
  src/gmic_qt.cpp
  src/Globals.cpp
  src/GmicStdlib.cpp
  src/GmicProcessor.cpp
  src/HeadlessProcessor.cpp
  src/HtmlTranslator.cpp
  src/IconLoader.cpp
  src/ImageConverter.cpp
  src/ImageTools.cpp
  src/InputOutputState.cpp
  src/KeypointList.cpp
  src/LayersExtentProxy.cpp
  src/Logger.cpp
  src/MainWindow.cpp
  src/ParametersCache.cpp
  src/PreviewMode.cpp
  src/TimeLogger.cpp
  src/Updater.cpp
  src/Utils.cpp
  src/FilterSelector/FiltersView/FilterTreeItem.cpp
  src/FilterSelector/FiltersView/FilterTreeFolder.cpp
  src/FilterSelector/FavesModel.cpp
  src/FilterSelector/FavesModelReader.cpp
  src/FilterSelector/FiltersView/FilterTreeAbstractItem.cpp
  src/FilterSelector/FiltersView/FilterTreeItemDelegate.cpp
  src/FilterSelector/FavesModelWriter.cpp
  src/Widgets/PreviewWidget.cpp
  src/Widgets/ProgressInfoWidget.cpp
  src/Widgets/InOutPanel.cpp
  src/Widgets/ZoomLevelSelector.cpp
  src/Widgets/SearchFieldWidget.cpp
  src/Widgets/LanguageSelectionWidget.cpp
  src/Widgets/ProgressInfoWindow.cpp
)

if(ENABLE_DYNAMIC_LINKING)
  set(CMAKE_SKIP_RPATH TRUE)
  set(gmic_qt_LIBRARIES
    ${gmic_qt_LIBRARIES}
    ""gmic""
    )
  link_directories(${GMIC_LIB_PATH})
else(ENABLE_DYNAMIC_LINKING)
  set(gmic_qt_SRCS
    ${gmic_qt_SRCS}
    ${GMIC_PATH}/gmic.cpp
    )
endif(ENABLE_DYNAMIC_LINKING)

qt5_wrap_ui(gmic_qt_SRCS
  ui/dialogsettings.ui
  ui/filtersview.ui
  ui/headlessprogressdialog.ui
  ui/inoutpanel.ui
  ui/languageselectionwidget.ui
  ui/mainwindow.ui
  ui/multilinetextparameterwidget.ui
  ui/progressinfowidget.ui
  ui/progressinfowindow.ui
  ui/SearchFieldWidget.ui
  ui/zoomlevelselector.ui
)

set(gmic_translation_files

    translations/cs.ts
    translations/de.ts
    translations/es.ts
    translations/fr.ts
    translations/id.ts
    translations/it.ts
    translations/nl.ts
    translations/pl.ts
    translations/pt.ts
    translations/ru.ts
    translations/ua.ts
    translations/ja.ts
    translations/zh.ts
)

set_source_files_properties(${gmic_translation_files} PROPERTIES OUTPUT_LOCATION translations)

# qt5_create_translation(
#     qmic_qt_QM
#     ${CMAKE_SOURCE_DIR}/translations
#     ${gmic_qt_SRCS}
#     ${gmic_translation_files}
# )

qt5_add_translation(gmic_qt_QM
    ${gmic_translation_files}
  )

# install(FILES ${gmic_qt_QM} DESTINATION ${CMAKE_SOURCE_DIR}/translations)

set(gmic_qt_QRC
    gmic_qt.qrc
    translations.qrc
)

if (${GMIC_QT_HOST} STREQUAL ""gimp"")

    execute_process(COMMAND gimptool-2.0 --libs-noui OUTPUT_VARIABLE GIMP2_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND gimptool-2.0 --cflags-noui OUTPUT_VARIABLE GIMP2_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND pkg-config gimp-2.0 --define-variable=prefix=${CMAKE_INSTALL_PREFIX} --variable gimplibdir OUTPUT_VARIABLE GIMP2_PKGLIBDIR OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GIMP2_INCLUDE_DIRS}"")

    set (gmic_qt_SRCS ${gmic_qt_SRCS} src/Host/Gimp/host_gimp.cpp)
    add_definitions(-DGMIC_HOST=gimp -DGIMP_DISABLE_DEPRECATED)
    add_executable(gmic_gimp_qt ${gmic_qt_SRCS} ${gmic_qt_QRC} ${qmic_qt_QM})
    target_link_libraries(
      gmic_gimp_qt
      PRIVATE
      ${GIMP2_LIBRARIES}
      ${gmic_qt_LIBRARIES}
      )
    install(TARGETS gmic_gimp_qt RUNTIME DESTINATION ""${GIMP2_PKGLIBDIR}/plug-ins"")

elseif (${GMIC_QT_HOST} STREQUAL ""krita"")

    set (gmic_qt_SRCS ${gmic_qt_SRCS} src/Host/Krita/host_krita.cpp)
    add_definitions(-DGMIC_HOST=krita)
    add_executable(gmic_krita_qt ${gmic_qt_SRCS} ${gmic_qt_QRC} ${qmic_qt_QM})
    target_link_libraries(
      gmic_krita_qt
      PRIVATE
      ${gmic_qt_LIBRARIES}
      )
    install(TARGETS gmic_krita_qt RUNTIME DESTINATION bin)

elseif (${GMIC_QT_HOST} STREQUAL ""none"")

    set (gmic_qt_SRCS ${gmic_qt_SRCS} src/Host/None/host_none.cpp src/Host/None/ImageDialog.h src/Host/None/ImageDialog.cpp)
    add_definitions(-DGMIC_HOST=standalone)
    add_executable(gmic_qt ${gmic_qt_SRCS} ${gmic_qt_QRC}  ${qmic_qt_QM})
    target_link_libraries(gmic_qt PRIVATE ${gmic_qt_LIBRARIES})
    install(TARGETS gmic_qt RUNTIME DESTINATION bin)

elseif (${GMIC_QT_HOST} STREQUAL ""paintdotnet"")

    set (gmic_qt_SRCS ${gmic_qt_SRCS} src/Host/PaintDotNet/host_paintdotnet.cpp)
    add_definitions(-DGMIC_HOST=paintdotnet)
    add_executable(gmic_paintdotnet_qt ${gmic_qt_SRCS} ${gmic_qt_QRC} ${qmic_qt_QM})
    target_link_libraries(
      gmic_paintdotnet_qt
      PRIVATE
      ${gmic_qt_LIBRARIES}
      )

elseif (${GMIC_QT_HOST} STREQUAL ""digikam"")

    include(GNUInstallDirs)

    find_package(DigikamCore ""6.3.0"" CONFIG REQUIRED)

    set_package_properties(DigikamCore PROPERTIES
                           URL ""http://www.digikam.org""
                           DESCRIPTION ""digiKam core library""
    )

    # --- Manage C++ exception rules -------

    string(REPLACE "" -DQT_NO_EXCEPTIONS "" "" "" CMAKE_CXX_FLAGS "" ${CMAKE_CXX_FLAGS} "")
    string(REPLACE "" -fno-exceptions ""    "" "" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    string(STRIP ""${CMAKE_CXX_FLAGS}"" CMAKE_CXX_FLAGS)

    if (MSVC)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -EHsc"")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"")
        if (WIN32)
            set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -EHsc"")
        else()
            set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fexceptions"")
        endif()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fexceptions"")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fexceptions"")
    endif()

    string(STRIP ""${CMAKE_CXX_FLAGS}"" ${CMAKE_CXX_FLAGS})

    # ---

    include_directories($<TARGET_PROPERTY:Digikam::digikamcore,INTERFACE_INCLUDE_DIRECTORIES>/digikam)

    set (gmic_qt_SRCS ${gmic_qt_SRCS} src/Host/digiKam/host_digikam.cpp src/Host/digiKam/gmicqttoolplugin.cpp)
    add_definitions(-DGMIC_HOST=digikam)
    add_library(Editor_GmicQt_Plugin
                MODULE ${gmic_qt_SRCS} ${gmic_qt_QRC} ${qmic_qt_QM})

    set_target_properties(Editor_GmicQt_Plugin PROPERTIES PREFIX """")

    target_link_libraries(Editor_GmicQt_Plugin
                          PRIVATE
                          ${gmic_qt_LIBRARIES}
                          Digikam::digikamcore)

    # --- Install rules ---------------------------------

    get_target_property(QT_QMAKE_EXECUTABLE ${Qt5Core_QMAKE_EXECUTABLE} IMPORTED_LOCATION)

    if(NOT QT_QMAKE_EXECUTABLE)
        message(FATAL_ERROR ""qmake is not found."")
    endif()

    # execute the command ""qmake -query QT_INSTALL_PLUGINS"" to get the path of plugins dir.
    execute_process(COMMAND ${QT_QMAKE_EXECUTABLE} -query QT_INSTALL_PLUGINS
                    OUTPUT_VARIABLE QT_PLUGINS_DIR
                    OUTPUT_STRIP_TRAILING_WHITESPACE)

    if(NOT QT_PLUGINS_DIR)
        message(FATAL_ERROR ""Qt5 plugin directory cannot be detected."")
    endif()

    install(TARGETS Editor_GmicQt_Plugin
            DESTINATION ${QT_PLUGINS_DIR}/digikam/editor)

else()
    message(FATAL_ERROR ""GMIC_QT_HOST is not defined as gimp, krita, none, paintdotnet, or digikam"")
endif()

feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1.0,3.1
13443,esrf-bliss,Lima,False,False,False,False,False,21,C++,2020-05-14 09:39:50+00:00,2012-09-21 20:41:28+00:00,30,2720,"###########################################################################
# This file is part of LImA, a Library for Image Acquisition
#
#  Copyright (C) : 2009-2017
#  European Synchrotron Radiation Facility
#  BP 220, Grenoble 38043
#  FRANCE
#
#  Contact: lima@esrf.fr
#
#  This is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
############################################################################

cmake_minimum_required(VERSION 3.1)

project (Lima)
include(cmake/project_version.cmake)

set(NAME ""core"")

# Include additional modules that are used unconditionally
include(GNUInstallDirs)
include(GenerateExportHeader)

# If conda build, always set lib dir to 'lib'
if($ENV{CONDA_BUILD})
  set(CMAKE_INSTALL_LIBDIR ""lib"")
endif()

# Set lower / upper case project names
string(TOUPPER ""${PROJECT_NAME}"" PROJECT_NAME_UPPER)
string(TOLOWER ""${PROJECT_NAME}"" PROJECT_NAME_LOWER)

# Set targets export name (used by lima and dependencies)
set(TARGETS_EXPORT_NAME ""${PROJECT_NAME_LOWER}-targets"")
#set(namespace ""${PROJECT_NAME}::"")

# Enable C++11 and later
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(MSVC AND MSVC_VERSION GREATER 1500)
    # Compiler specific (parallel build)
    set(CMAKE_C_FLAGS   ""${CMAKE_C_FLAGS} /MP"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")
endif()

# CMake additional macros
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
include(LimaTools)

if(UNIX AND LIMA_ENABLE_NUMA)
    # Numa is needed for advanced buffer management
    find_package(Numa REQUIRED)
endif()

# Import pthread
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
find_package(Threads REQUIRED)

### Define options

include(Options.cmake)

### Find dependencies

# Processlib third-party is mandatory
if (LIMA_BUILD_SUBMODULES)
    add_subdirectory(third-party/Processlib)
else()
    find_package(Processlib REQUIRED)
endif()

# Enable python binding code compilation using sip generator
if(LIMA_ENABLE_PYTHON)
  limatools_find_python_and_sip()
endif()

#--------------------------------------------------------------------------------
# Define source files
#--------------------------------------------------------------------------------

# add_subdirectory(common)
# add_subdirectory(control)
# add_subdirectory(control/software_operation)
# add_subdirectory(hardware)

set(common_srcs
    common/src/Constants.cpp
    common/src/SizeUtils.cpp
    common/src/Timestamp.cpp
    common/src/ThreadUtils.cpp
    common/src/Exceptions.cpp
    common/src/MemUtils.cpp
    common/src/AcqState.cpp
    common/src/Debug.cpp
    common/src/VideoUtils.cpp
    common/src/Event.cpp
    common/src/Timer.cpp
    common/src/DirectoryEventUtils.cpp)

if(UNIX)
    list(APPEND common_srcs
        common/src/RegExUtils.cpp
        common/src/SimplePipe.cpp
    )
endif()

file(GLOB_RECURSE common_incs ""common/include/*.h"")

set(hardware_srcs
    hardware/src/HwInterface.cpp
    hardware/src/HwCap.cpp
    hardware/src/HwSyncCtrlObj.cpp
    hardware/src/HwFrameInfo.cpp
    hardware/src/HwFrameCallback.cpp
    hardware/src/HwBufferCtrlObj.cpp
    hardware/src/HwBufferMgr.cpp
    hardware/src/HwShutterCtrlObj.cpp
    hardware/src/HwMaxImageSizeCallback.cpp
    hardware/src/HwDetInfoCtrlObj.cpp
    hardware/src/HwBinCtrlObj.cpp
    hardware/src/HwRoiCtrlObj.cpp
    hardware/src/HwFlipCtrlObj.cpp
    hardware/src/HwSerialLine.cpp
    hardware/src/HwBufferSave.cpp
    hardware/src/HwVideoCtrlObj.cpp
    hardware/src/HwEventCtrlObj.cpp
    hardware/src/HwSavingCtrlObj.cpp
    hardware/src/HwReconstructionCtrlObj.cpp
)

if(UNIX)
    list(APPEND hardware_srcs hardware/src/HwFileEventMgr.cpp)
endif()

file(GLOB_RECURSE hardware_incs ""hardware/include/*.h"")

set(control_srcs
    control/src/CtSaving.cpp
    control/src/CtControl.cpp
    control/src/CtAcquisition.cpp
    control/src/CtBuffer.cpp
    control/src/CtImage.cpp
    control/src/CtSaving_ZBuffer.cpp
    control/src/CtSaving_Compression.cpp
    control/src/CtSaving_Edf.cpp
    control/src/CtShutter.cpp
    control/src/CtAccumulation.cpp
    control/src/CtVideo.cpp
    control/src/CtEvent.cpp
)

file(GLOB_RECURSE control_incs ""control/include/*.h"")

set(software_operation_srcs
    control/software_operation/src/SoftOpInternalMgr.cpp
    control/software_operation/src/SoftOpExternalMgr.cpp
    control/software_operation/src/SoftOpId.cpp
)

file(GLOB_RECURSE software_operation_incs ""control/software_operation/include/*.h"")

set(extra_libs)
set(extra_includes)
set(extra_definitions)

# Optional for libconfig++ support
if(LIMA_ENABLE_CONFIG)
    find_package(Libconfig)
    if(${CONFIG_FOUND})
        list(APPEND extra_definitions -DWITH_CONFIG)
        list(APPEND extra_libs ${LIBCONFIG_LIBRARIES})
        list(APPEND common_srcs common/src/ConfigUtils.cpp)
        list(APPEND control_srcs control/src/CtConfig.cpp)
        list(APPEND extra_includes ${LIBCONFIG_INCLUDE_DIRS})
    else()
        message(FATAL_ERROR ""libconfig++ not found, set LIB_CONFIG path or disable LIMA_ENABLE_CONFIG"")
    endif()
endif()

# Option for Spec-like shared-memory (SPS)  support
if(LIMA_ENABLE_SPS_IMAGE)
    list(APPEND extra_definitions -DWITH_SPS_IMAGE)
    list(APPEND control_srcs control/src/CtSpsImage.cpp third-party/Sps/Src/sps.c)
endif()

# Option for extra saving formats edf.gz, edf.lz4, cbf, hdf5, tiff, fits
include(Saving.cmake)

#--------------------------------------------------------------------------------
# Add the library limacore definition
#--------------------------------------------------------------------------------
add_library(limacore SHARED
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}/project_version.cc # Add version info
    ${common_srcs}
    ${hardware_srcs}
    ${control_srcs}
    ${software_operation_srcs}
    ${common_incs}
    ${hardware_incs}
    ${control_incs}
    ${software_operation_incs}
)

# Set version
set_target_properties(limacore PROPERTIES
    VERSION ""${PROJECT_VERSION}""
    SOVERSION ""${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}"")

# Generate export macros
generate_export_header(limacore)
message(""#####################################"")
message(""${CMAKE_BINARY_DIR}"")
message(""#####################################"")

target_include_directories(limacore PUBLIC
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/common/include>""
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/hardware/include>""
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/control/include>""
    ""$<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>""
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/control/software_operation/include>""
    ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>""
)

if(LIMA_BUILD_SUBMODULES)
    target_include_directories(limacore PUBLIC
        ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/third-party/Processlib/core/include>""
        ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/third-party/Processlib/tasks/include>"")
endif()

if(UNIX AND LIMA_ENABLE_NUMA)
    target_compile_definitions(limacore PUBLIC LIMA_USE_NUMA)
    target_include_directories(limacore PRIVATE ""${NUMA_INCLUDE_DIR}"")
endif()

if(LIMA_ENABLE_SPS_IMAGE)
    target_compile_definitions(limacore PUBLIC WITH_SPS_IMAGE)
    target_include_directories(limacore PRIVATE ""${CMAKE_SOURCE_DIR}/third-party/Sps/Include"")
endif()

# Set LIMA_NO_DEBUG if LIMA_ENABLE_DEBUG is set
if(NOT LIMA_ENABLE_DEBUG)
    target_compile_definitions(limacore PUBLIC LIMA_NO_DEBUG)
endif()

# add all include paths coming from saving format options
target_include_directories(limacore PRIVATE ${extra_includes} ${saving_includes})

# add compiler definitions required by saving libraries
target_compile_definitions(limacore PUBLIC ${extra_definitions} ${saving_definitions})

# add libraries
target_link_libraries(limacore PUBLIC Threads::Threads)
target_link_libraries(limacore PUBLIC processlib ${saving_libs} ${extra_libs})
target_link_libraries(limacore PRIVATE ${saving_private_libs})

if(UNIX)
    target_compile_definitions(limacore PUBLIC -DHAS_INOTIFY)
    target_link_libraries(limacore PUBLIC ""rt"")
    if(LIMA_ENABLE_NUMA)
        target_link_libraries(limacore PUBLIC ${NUMA_LIBRARY})
    endif()
endif()

if(WIN32)
    target_compile_definitions(limacore PRIVATE LIMACORE_EXPORTS)
    set_target_properties(limacore PROPERTIES PREFIX ""lib"")
    set_target_properties(limacore PROPERTIES IMPORT_PREFIX ""lib"")
endif()

#--------------------------------------------------------------------------------
# SIP generates binding code for python
#--------------------------------------------------------------------------------
if(LIMA_ENABLE_PYTHON)
    set(INCLUDES)
    file(GLOB SIP_SOURCES
         RELATIVE ""${CMAKE_CURRENT_SOURCE_DIR}/common/sip""
         ""${CMAKE_CURRENT_SOURCE_DIR}/common/sip/*.sip""
         RELATIVE ""${CMAKE_CURRENT_SOURCE_DIR}/hardware/sip""
         ""${CMAKE_CURRENT_SOURCE_DIR}/hardware/sip/*.sip""
         RELATIVE ""${CMAKE_CURRENT_SOURCE_DIR}/control/sip""
         ""${CMAKE_CURRENT_SOURCE_DIR}/control/sip/*.sip""
         RELATIVE ""${CMAKE_CURRENT_SOURCE_DIR}/control/software_operation/sip""
         ""${CMAKE_CURRENT_SOURCE_DIR}/control/software_operation/sip/*.sip"")
    foreach(SIP_SOURCES ${SIP_SOURCES})
        set(INCLUDES
""${INCLUDES}
%Include ${SIP_SOURCES}""
)
    endforeach()

    configure_file(sip/limacore.sip.in sip/limacore.sip)
    list(APPEND LIMA_SIP_INCLUDE_DIRS
        ""${CMAKE_CURRENT_BINARY_DIR}/sip""
        ""${CMAKE_CURRENT_SOURCE_DIR}/common/sip""
        ""${CMAKE_CURRENT_SOURCE_DIR}/hardware/sip""
        ""${CMAKE_CURRENT_SOURCE_DIR}/control/sip""
        ""${CMAKE_CURRENT_SOURCE_DIR}/control/software_operation/sip"")
    if (LIMA_BUILD_SUBMODULES)
      list(APPEND LIMA_SIP_INCLUDE_DIRS
          ""${CMAKE_CURRENT_SOURCE_DIR}/sip"")
      # This is required for LimaTools
      list(APPEND PROCESSLIB_SIP_INCLUDE_DIRS
          ""${CMAKE_CURRENT_SOURCE_DIR}/third-party/Processlib/sip""
          ""${CMAKE_CURRENT_SOURCE_DIR}/third-party/Processlib/tasks/sip"")
    endif()
    set(SIP_INCLUDE_DIRS
        ${LIMA_SIP_INCLUDE_DIRS}
        ${PROCESSLIB_SIP_INCLUDE_DIRS})
    if (NOT LIMA_ENABLE_CONFIG)
      set(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} WITH_CONFIG)
    endif()
    if (NOT LIMA_ENABLE_SPS_IMAGE)
      set(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} WITH_SPS_IMAGE)
    endif()
    set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/sip/limacore.sip PROPERTIES OBJECT_DEPENDS ${SIP_SOURCES})
    # Run sip now !
    add_sip_python_module(limacore ${CMAKE_CURRENT_BINARY_DIR}/sip/limacore.sip FALSE)

    target_include_directories(python_module_limacore PRIVATE
        ${PYTHON_INCLUDE_DIRS}
        ${NUMPY_INCLUDE_DIRS}
        ${CMAKE_CURRENT_SOURCE_DIR}/sip
        ${CMAKE_CURRENT_SOURCE_DIR}/sip/core
        ${CMAKE_CURRENT_SOURCE_DIR}/third-party/Processlib/sip)
    target_link_libraries(python_module_limacore PRIVATE limacore ${NUMPY_LIBRARIES})

    add_custom_command(TARGET lima${NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/python/Lima ${CMAKE_BINARY_DIR}/python/Lima)
endif()

## Installation

include(Install.cmake)

#--------------------------------------------------------------------------------
# Option for openGL real-time display  support
#--------------------------------------------------------------------------------
if(LIMA_ENABLE_GLDISPLAY)
    add_subdirectory(third-party/gldisplay)
endif()

#--------------------------------------------------------------------------------
# TESTS, run ctest or make test
#--------------------------------------------------------------------------------
if(LIMA_ENABLE_TESTS)
    enable_testing()
    add_subdirectory(control/test)
    add_subdirectory(common/test)
endif()

#--------------------------------------------------------------------------------
# CAMERA list is in cmake/CameraList.cmake file
#--------------------------------------------------------------------------------
if (LIMA_BUILD_SUBMODULES)
    include(CameraList)
endif()

#--------------------------------------------------------------------------------
# Python Tango server
#--------------------------------------------------------------------------------
if(LIMA_ENABLE_PYTANGO_SERVER)
    add_subdirectory(applications/tango/python)
endif()

#--------------------------------------------------------------------------------
# PACKAGES debian at least, run cpack or make package
#--------------------------------------------------------------------------------
set(CPACK_GENERATOR ""DEB"")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""ESRF/BLISS"") #required
set(CPACK_PACKAGE_CONTACT ""lima@esrf.fr"")
include(CPack)
",3.1,3.1
13548,libvmi,libvmi,False,False,False,False,False,51,C,2020-05-17 01:04:41+00:00,2013-01-02 22:06:12+00:00,446,1435,"cmake_minimum_required(VERSION 3.1)

# set cmake module path, to search in cmake/modules first
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules"")
#-----------------------------------------------------------------------------
#                           GENERAL CONFIGURATION
#-----------------------------------------------------------------------------
project(LibVMI VERSION 0.13.0 LANGUAGES C ASM)
set(VERSION ""0.13.0"")

# build type
set(default_build_type ""Debug"")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS ""Setting build type to '${default_build_type}' as none was specified."")
    set(CMAKE_BUILD_TYPE ""${default_build_type}"" CACHE
        STRING ""Choose the type of build."" FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
        STRINGS ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()
#-----------------------------------------------------------------------------
#                              DEPENDENCIES
#-----------------------------------------------------------------------------
include(FeatureSummary)
find_package(PkgConfig REQUIRED)
set_package_properties(PkgConfig PROPERTIES
    DESCRIPTION ""Helper tool to compile applications and libraries""
    URL ""https://www.freedesktop.org/wiki/Software/pkg-config/""
    TYPE REQUIRED
    PURPOSE ""Find and configure multiple LibVMI dependencies"")
pkg_search_module(GLIB REQUIRED glib-2.0)
# cleanup GLIB_LDFLAGS (remove -l prefix)
string(REGEX REPLACE ""-l"" """" GLIB_LDFLAGS ${GLIB_LDFLAGS})

include(DetectArchitecture)
include(StaticAnalysis)
include(GNUInstallDirs)
#-----------------------------------------------------------------------------
#                           BUILD TYPES & FLAGS
#-----------------------------------------------------------------------------
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wextra"")
set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -g3 -O0"")
set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -Wno-cast-function-type -Werror -O2"")

# default hardening flags that have no performance hit
set(HARDENING_LINKER_FLAGS ""-Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now"")
# update default flags
set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${HARDENING_LINKER_FLAGS}"")
set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${HARDENING_LINKER_FLAGS}"")

# strip library in release mode
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE ""-s"")
#-----------------------------------------------------------------------------
#                             BUILD OPTIONS
#-----------------------------------------------------------------------------
option(ENABLE_XEN ""Build Xen driver"" ON)
option(ENABLE_FILE ""Build file driver"" ON)

option(ENABLE_WINDOWS ""Build Windows introspection"" ON)
option(ENABLE_LINUX ""Build Linux introspection"" ON)
option(ENABLE_FREEBSD ""Build FreeBSD introspection"" ON)

option(ENABLE_STATIC ""Build libvmi static library"" ON)

option(ENABLE_XENSTORE ""Build with Xenstore"" ON)
option(ENABLE_VMIFS ""Enable vmifs: maps memory to a file through FUSE"" ON)
option(ENABLE_CONFIGFILE ""Enable config file"" ON)
option(ENABLE_ADDRESS_CACHE ""Enable address cache"" ON)
option(ENABLE_PAGE_CACHE ""Enable page cache"" ON)
option(ENABLE_SAFETY_CHECKS ""Enable API safety checks"" ON)
option(ENABLE_TESTING ""Build libvmi test suite"" OFF)
option(BUILD_EXAMPLES ""Build the examples"" ON)
# See libvmi/debug.h for possible debug levels
option(VMI_DEBUG ""Debug output level"" OFF)
# hardening flags that causes overhead, disabled by default
option(HARDENING ""Enable hardening flags (with overhead)"" OFF)
option(ENV_DEBUG ""Toggle the debug output via LIBVMI_DEBUG environment variable"" OFF)

# json
# for some reason it's impossible to override the default options that get defined here
# further down in the chain (ie. in libvmi/CMakeLists.txt)
find_package(JSON-C)
if (JSON-C_FOUND)
option(ENABLE_KVM ""Build KVM driver"" ON)
option(ENABLE_BAREFLANK ""Build Bareflank driver"" ON)
option(ENABLE_JSON_PROFILES ""Enable JSON profiles"" ON)
option(REKALL_PROFILES ""Support Rekall's JSON profiles"" ON)
option(VOLATILITY_IST ""Support Volatility's JSON ISTs"" ON)
else ()
message(STATUS ""JSON-C library was not found, KVM, Bareflank & JSON profile support is disabled"")
option(ENABLE_KVM ""Build KVM driver"" OFF)
option(ENABLE_BAREFLANK ""Build Bareflank driver"" OFF)
option(ENABLE_JSON_PROFILES ""Enable JSON profiles"" OFF)
option(REKALL_PROFILES ""Support Rekall's JSON profiles"" OFF)
option(VOLATILITY_IST ""Support Volatility's JSON ISTs"" OFF)
endif ()

# default values
set(MAX_PAGE_CACHE_SIZE ""512"")

# enable hardening if requested
if (HARDENING)
    # enable stack canaries, not all because the performance cost is too high
    # -fstack-protector-strong appears since GCC 4.9
    # we assume Debian Stretch at least, so GCC 6.3.0
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fstack-protector-strong"")
    # enforce position independant code
    set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
    # enforce pie
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pie"")
    # enforce fortify source
    # we should use add_compile_definitions, but only available since
    # CMake 3.12.0 (assuming 3.1)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2"")
endif ()

if (ENABLE_XEN AND ENABLE_XENSTORE)
    find_package(Xenstore REQUIRED)
endif ()

#-----------------------------------------------------------------------------
#                               SOURCES
#-----------------------------------------------------------------------------
configure_file(libvmi.pc.in ${PROJECT_BINARY_DIR}/libvmi.pc)
install(FILES ${PROJECT_BINARY_DIR}/libvmi.pc DESTINATION
    ""${CMAKE_INSTALL_FULL_LIBDIR}/pkgconfig"")

configure_file(libvmi/config.h.in ${PROJECT_BINARY_DIR}/config.h)
# include <libvmi/libvmi.h> ""config.h"", ""private.h"" and <glib.h>
include_directories(${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR} libvmi ${GLIB_INCLUDE_DIRS})
add_definitions(-DHAVE_CONFIG_H)
add_subdirectory(libvmi)
add_subdirectory(tools)
if (ENABLE_TESTING)
    # this command should always be called in the root CMakeLists.txt
    enable_testing()
    add_subdirectory(tests)
endif (ENABLE_TESTING)

if (BUILD_EXAMPLES)
    add_subdirectory(examples)
endif (BUILD_EXAMPLES)
add_subdirectory(doc)
#-----------------------------------------------------------------------------
#                               BUILD SUMMARY
#-----------------------------------------------------------------------------
add_feature_info(ENABLE_XEN ENABLE_XEN ""Build Xen driver"")
add_feature_info(ENABLE_KVM ENABLE_KVM ""Build KVM driver"")
add_feature_info(ENABLE_BAREFLANK ENABLE_BAREFLANK ""Build Bareflank driver"")
add_feature_info(ENABLE_FILE ENABLE_FILE ""Build file driver"")

add_feature_info(ENABLE_WINDOWS ENABLE_WINDOWS ""Enable Windows introspection"")
add_feature_info(ENABLE_LINUX ENABLE_LINUX ""Enable Linux introspection"")
add_feature_info(ENABLE_FREEBSD ENABLE_FREEBSD ""Enable FreeBSD introspection"")

add_feature_info(ENABLE_STATIC ENABLE_STATIC ""Build LibVMI static library"")

add_feature_info(ENABLE_XENSTORE ENABLE_XENSTORE ""Build Xen driver with Xenstore"")
add_feature_info(ENABLE_VMIFS ENABLE_VMIFS ""Enable vmifs: maps memory to a file through FUSE"")
add_feature_info(ENABLE_CONFIGFILE ENABLE_CONFIGFILE ""Enable config file"")
add_feature_info(ENABLE_ADDRESS_CACHE ENABLE_ADDRESS_CACHE ""Enable address cache"")
add_feature_info(ENABLE_PAGE_CACHE ENABLE_PAGE_CACHE ""Enable page cache"")
add_feature_info(REKALL_PROFILES REKALL_PROFILES ""Support Rekall's JSON profiles"")
add_feature_info(VOLATILITY_IST VOLATILITY_IST ""Support Volatility's JSON ISTs"")
add_feature_info(ENABLE_SAFETY_CHECKS ENABLE_SAFETY_CHECKS ""Enable API safety checks"")
add_feature_info(ENABLE_TESTING ENABLE_TESTING ""Enable LibVMI test suite"")
add_feature_info(BUILD_EXAMPLES BUILD_EXAMPLES ""Build the examples"")
message(STATUS "" ↳ Compiler     → ${CMAKE_C_COMPILER}"")
message(STATUS "" ↳ C Flags      → ${CMAKE_C_FLAGS}"")
message(STATUS "" ↳ Prefix       → ${CMAKE_INSTALL_PREFIX}"")
message(STATUS "" ↳ Build        → ${CMAKE_BUILD_TYPE}"")
feature_summary(DESCRIPTION
    ""--------        LibVMI package summary       --------""
    WHAT PACKAGES_FOUND PACKAGES_NOT_FOUND)

feature_summary(DESCRIPTION
    ""--------        LibVMI feature summary       --------""
    WHAT ENABLED_FEATURES DISABLED_FEATURES)
",3.1,3.1
13553,vasild,cpp-ipfs-api,False,False,False,False,False,5,C++,2019-11-05 20:59:02+00:00,2016-10-30 10:11:35+00:00,86,203,"cmake_minimum_required(VERSION 3.1.0)

# Adhere the version number to http://semver.org/
project(cpp-ipfs-http-client VERSION 0.4.0 LANGUAGES CXX)

# Compile in C++11 mode
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add compiler warnings
if(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR
   CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra -Werror"")
endif()

# Generate compile_commands.json, to be used by YouCompleteMe.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Find curl
find_package(CURL REQUIRED)
include_directories(${CURL_INCLUDE_DIRS})

# Find ""JSON for Modern C++"" (nlohmann/json.hpp)
find_path(JSON_FOR_MODERN_CXX_INCLUDE_DIR NAMES nlohmann/json.hpp)
mark_as_advanced(JSON_FOR_MODERN_CXX_INCLUDE_DIR)
if(NOT JSON_FOR_MODERN_CXX_INCLUDE_DIR)
  message(FATAL_ERROR ""JSON for Modern C++ (nlohmann/json.hpp) not found. Go fetch it from https://github.com/nlohmann/json/blob/develop/src/json.hpp and tell CMake where it is: 'cmake -DJSON_FOR_MODERN_CXX_INCLUDE_DIR:PATH=/path/to/include' (assuming the file is in /path/to/include/nlohmann/json.hpp)"")
endif()
include_directories(${JSON_FOR_MODERN_CXX_INCLUDE_DIR})

include_directories(""include"")

# Targets

set(IPFS_API_LIBNAME ipfs-http-client)

# To build and install a shared library: ""cmake -DBUILD_SHARED_LIBS:BOOL=ON ...""
add_library(${IPFS_API_LIBNAME}
  src/client.cc
  src/http/transport-curl.cc
)
set_target_properties(${IPFS_API_LIBNAME} PROPERTIES
  SOVERSION ${PROJECT_VERSION_MAJOR}
  VERSION ${PROJECT_VERSION}
)
target_link_libraries(${IPFS_API_LIBNAME} ${CURL_LIBRARIES})
if(NOT DISABLE_INSTALL)
  install(TARGETS ${IPFS_API_LIBNAME} DESTINATION lib)
  install(FILES include/ipfs/client.h DESTINATION include/ipfs)
  install(FILES include/ipfs/http/transport.h DESTINATION include/ipfs/http)
endif()
# Tests, use ""CTEST_OUTPUT_ON_FAILURE=1 make test"" to see output from failed tests

# https://cmake.org/cmake/help/v3.0/module/CTest.html
include(CTest)

if(BUILD_TESTING)
  add_subdirectory(test)
endif()
",3.1.0,3.1
13667,u1f35c,onak,False,False,False,False,False,2,C,2020-01-17 20:18:00+00:00,2016-05-19 10:58:06+00:00,2,587,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(onak VERSION 0.5.0 LANGUAGES C)

include(FindPkgConfig)
include(GNUInstallDirs)
include(TestBigEndian)
# Fall back for earlier versions of CMake which lack RUNSTATEDIR
if (""x${CMAKE_INSTALL_FULL_RUNSTATEDIR}"" STREQUAL ""x"")
	set(CMAKE_INSTALL_FULL_RUNSTATEDIR
		${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run)
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

# Configuration options from the user
set(DBTYPE ""dynamic"" CACHE STRING
	""Configure the default database backend to use"" )
option(KEYD
	""Enable the key daemon to handle communication with the key database""
	ON)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)

# Pick up a git based version number for development builds
find_package(Git)
if (GIT_FOUND AND EXISTS ""${CMAKE_SOURCE_DIR}/.git"")
	EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags --dirty
		OUTPUT_VARIABLE GIT_VERSION
		OUTPUT_STRIP_TRAILING_WHITESPACE)
	string(REPLACE ""onak-"" """" VERSION ${GIT_VERSION})
else()
	set(VERSION ${PROJECT_VERSION})
endif()

# Core objects
add_library(libonak STATIC armor.c charfuncs.c cleankey.c cleanup.c decodekey.c
	getcgi.c hash.c keyarray.c keyid.c keyindex.c ll.c log.c marshal.c
	mem.c merge.c onak-conf.c parsekey.c photoid.c rsa.c sigcheck.c sendsync.c
	sha1x.c wordlist.c)
set(LIBONAK_LIBRARIES """")

# Ideally use Nettle, fall back to our own md5/sha1 routines otherwise
pkg_check_modules(NETTLE nettle)
if (NETTLE_FOUND)
	set(HAVE_NETTLE true)
	target_include_directories(libonak SYSTEM PUBLIC ${NETTLE_INCLUDE_DIRS})
	LIST(APPEND LIBONAK_LIBRARIES ${NETTLE_LIBRARIES})
else()
	target_sources(libonak PRIVATE md5.c sha1.c)
endif()

# We need libhogweed and libgmp to be able to do more than hash calculations
pkg_check_modules(HOGWEED hogweed)
if (HOGWEED_FOUND)
	find_package(GMP)
endif()
if (GMP_FOUND)
	set(HAVE_CRYPTO true)
	target_include_directories(libonak SYSTEM PUBLIC
			${GMP_INCLUDE_DIRS} ${HOGWEED_INCLUDE_DIRS})
	LIST(APPEND LIBONAK_LIBRARIES ${GMP_LIBRARY} ${HOGWEED_LIBRARIES})
endif()

# Build files that have substitutions in them
include_directories(${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR})
configure_file(""${CMAKE_SOURCE_DIR}/build-config.h.in""
	""${CMAKE_BINARY_DIR}/build-config.h"" @ONLY)

configure_file(""${CMAKE_SOURCE_DIR}/onak.ini.in""
	""${CMAKE_BINARY_DIR}/onak.ini"" @ONLY)
install(FILES ${CMAKE_BINARY_DIR}/onak.ini
	DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})

configure_file(""${CMAKE_SOURCE_DIR}/onak-mail.pl.in""
	""${CMAKE_BINARY_DIR}/onak-mail.pl"" @ONLY)
install(PROGRAMS ${CMAKE_BINARY_DIR}/onak-mail.pl
	DESTINATION ${CMAKE_INSTALL_LIBDIR}/onak/)
install(FILES onak-mail.pl.8 DESTINATION ${CMAKE_INSTALL_MANDIR}/man8/)

# Key database backends
add_subdirectory(keydb)

# Now we have the DB type confirmed we can tidy up the libonak options

if (DBTYPE STREQUAL ""dynamic"")
	LIST(APPEND LIBONAK_LIBRARIES ""dl"")
else()
	list (FIND BACKENDS ${DBTYPE} _index)
	if (${_index} LESS 0)
		message(FATAL_ERROR ""${DBTYPE} is not a supported DB backend."")
	endif()

	LIST(APPEND LIBONAK_LIBRARIES ${BACKEND_${DBTYPE}_LIBS})
endif()

# For onak-conf.o compilation
target_compile_definitions(libonak PRIVATE
	CONFIGDIR=""${CMAKE_INSTALL_FULL_SYSCONFDIR}""
	DBINIT=keydb_${DBTYPE}_init)

# DB Backend related options are known, so finish off libonak configuration
target_sources(libonak PRIVATE keydb/keydb_${DBTYPE}.c)
target_link_libraries(libonak ${LIBONAK_LIBRARIES})

# CGI directory
add_subdirectory(cgi)

# Executables start here

# Swiss Army tool
add_executable(onak onak.c)
target_link_libraries(onak libonak)

# Tools that operate on the key DB
add_executable(maxpath maxpath.c stats.c)
target_link_libraries(maxpath libonak)
add_executable(sixdegrees sixdegrees.c stats.c)
target_link_libraries(sixdegrees libonak)
add_executable(wotsap wotsap.c)
target_link_libraries(wotsap libonak)

# Stand alone tools
add_executable(splitkeys splitkeys.c)
target_link_libraries(splitkeys libonak)
add_executable(stripkey stripkey.c)
target_link_libraries(stripkey libonak)

install(TARGETS onak splitkeys RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install(FILES onak.1 splitkeys.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1/)

# Basic unit tests
enable_testing()
add_test(NAME syntaxtest COMMAND perl -cw ${CMAKE_BINARY_DIR}/onak-mail.pl)
add_test(NAME sanitytests COMMAND ${CMAKE_SOURCE_DIR}/runtests)
",3.1,3.1
13675,google,filament,False,False,False,False,False,66,C++,2020-05-16 21:33:08+00:00,2018-08-03 17:26:00+00:00,9056,2750,"# ==================================================================================================
# CMake
# ==================================================================================================
cmake_minimum_required(VERSION 3.10)

# ==================================================================================================
# Project declaration
# ==================================================================================================
project(TNT)

# ==================================================================================================
# Options
# ==================================================================================================
option(FILAMENT_ENABLE_JAVA ""Compile Java projects, requires a JDK and the JAVA_HOME env var"" ON)

option(FILAMENT_USE_EXTERNAL_GLES3 ""Experimental: Compile Filament against OpenGL ES 3"" OFF)

option(FILAMENT_USE_SWIFTSHADER ""Experimental: Compile Filament against SwiftShader"" OFF)

option(FILAMENT_GENERATE_JS_DOCS ""Build WebGL documentation and tutorials"" OFF)

option(FILAMENT_ENABLE_LTO ""Enable link-time optimizations if supported by the compiler"" OFF)

option(FILAMENT_SKIP_SAMPLES ""Don't build samples"" OFF)

# ==================================================================================================
# CMake policies
# ==================================================================================================
if (CMAKE_VERSION VERSION_GREATER_EQUAL ""3.12"")
    cmake_policy(SET CMP0074 NEW)
endif()

# ==================================================================================================
# Support for ccache
# ==================================================================================================
find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    set(C_LAUNCHER   ""${CCACHE_PROGRAM}"")
    set(CXX_LAUNCHER ""${CCACHE_PROGRAM}"")

    configure_file(build/launch-c.in   launch-c)
    configure_file(build/launch-cxx.in launch-cxx)

    execute_process(COMMAND chmod a+rx
        ""${CMAKE_BINARY_DIR}/launch-c""
        ""${CMAKE_BINARY_DIR}/launch-cxx""
    )

    if (CMAKE_GENERATOR STREQUAL ""Xcode"")
        set(CMAKE_XCODE_ATTRIBUTE_CC         ""${CMAKE_BINARY_DIR}/launch-c"")
        set(CMAKE_XCODE_ATTRIBUTE_CXX        ""${CMAKE_BINARY_DIR}/launch-cxx"")
        set(CMAKE_XCODE_ATTRIBUTE_LD         ""${CMAKE_BINARY_DIR}/launch-c"")
        set(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS ""${CMAKE_BINARY_DIR}/launch-cxx"")
    else()
        set(CMAKE_C_COMPILER_LAUNCHER        ""${CMAKE_BINARY_DIR}/launch-c"")
        set(CMAKE_CXX_COMPILER_LAUNCHER      ""${CMAKE_BINARY_DIR}/launch-cxx"")
    endif()
endif()

# ==================================================================================================
# Support Vim and Visual Studio Code by generating compile_commands.json
# ==================================================================================================
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ==================================================================================================
# OS specific
# ==================================================================================================
if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT WEBGL)
    set(LINUX TRUE)
endif()

if (ANDROID OR WEBGL OR IOS OR FILAMENT_USE_SWIFTSHADER)
    set(IS_MOBILE_TARGET TRUE)
endif()

if (WIN32)
    # Link statically against c/c++ lib to avoid missing redistriburable such as
    # ""VCRUNTIME140.dll not found. Try reinstalling the app."", but give users
    # a choice to opt for the shared runtime if they want.
    option(USE_STATIC_CRT ""Link against the static runtime libraries."" ON)

    # On Windows we need to instruct cmake to generate the .def in order to get the .lib required
    # when linking against dlls. CL.EXE will not generate .lib without .def file (or without pragma
    # __declspec(dllexport) in front of each functions).
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

    if (${USE_STATIC_CRT})
        set(CRT_FLAGS_RELEASE ""/MT"")
        set(CRT_FLAGS_DEBUG ""/MTd"")
    else()
        set(CRT_FLAGS_RELEASE ""/MD"")
        set(CRT_FLAGS_DEBUG ""/MDd"")
    endif()

    # TODO: Figure out why pdb generation messes with incremental compilaton.
    # IN RELEASE_WITH_DEBUG_INFO, generate debug info in .obj, no in pdb.
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${CRT_FLAGS_RELEASE} /Z7"")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} ${CRT_FLAGS_RELEASE} /Z7"")

    # In RELEASE, also generate PDBs.
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} ${CRT_FLAGS_RELEASE} /Zi"")
    set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} ${CRT_FLAGS_RELEASE} /Zi"")

    # In DEBUG, avoid generating a PDB file which seems to mess with incremental compilation.
    # Instead generate debug info directly inside obj files.
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} ${CRT_FLAGS_DEBUG} /Z7"")
    set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} ${CRT_FLAGS_DEBUG} /Z7"")
endif()

# ==================================================================================================
#  Paths
# ==================================================================================================
# Where our external libs are
set(EXTERNAL ${CMAKE_CURRENT_SOURCE_DIR}/third_party)

# Where our libraries are
set(LIBRARIES ${CMAKE_CURRENT_SOURCE_DIR}/libs)

# Where our filament code is
set(FILAMENT ${CMAKE_CURRENT_SOURCE_DIR})

# Where our tools are
set(TOOLS ${CMAKE_CURRENT_SOURCE_DIR}/tools)

# ==================================================================================================
# Compiler check
# ==================================================================================================
set(MIN_CLANG_VERSION ""6.0"")

if (CMAKE_C_COMPILER_ID MATCHES ""Clang"")
    if (CMAKE_C_COMPILER_VERSION VERSION_LESS MIN_CLANG_VERSION)
        message(FATAL_ERROR ""Detected C compiler Clang ${CMAKE_C_COMPILER_VERSION} < ${MIN_CLANG_VERSION}"")
    endif()
elseif (NOT MSVC)
    message(FATAL_ERROR ""Detected C compiler ${CMAKE_C_COMPILER_ID} is unsupported"")
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS MIN_CLANG_VERSION)
        message(FATAL_ERROR ""Detected CXX compiler Clang ${CMAKE_CXX_COMPILER_VERSION} < ${MIN_CLANG_VERSION}"")
    endif()
elseif (NOT MSVC)
    message(FATAL_ERROR ""Detected CXX compiler ${CMAKE_CXX_COMPILER_ID} is unsupported"")
endif()

# Detect use of the clang-cl.exe frontend, which does not support all of clangs normal options
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    if (""${CMAKE_CXX_SIMULATE_ID}"" STREQUAL ""MSVC"")
        message(FATAL_ERROR ""Building with Clang on Windows is no longer supported. Use MSVC 2019 instead."")
    endif()
endif()

# ==================================================================================================
# Link time optimizations (LTO)
# ==================================================================================================
if (FILAMENT_ENABLE_LTO)
    include(CheckIPOSupported)

    check_ipo_supported(RESULT IPO_SUPPORT)

    if (IPO_SUPPORT)
        message(STATUS ""LTO support is enabled"")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    endif()
endif()

# ==================================================================================================
# General compiler flags
# ==================================================================================================
set(CXX_STANDARD ""-std=c++14"")
if (WIN32)
    set(CXX_STANDARD ""/std:c++14"")
endif()

if (MSVC)
    set(CXX_STANDARD ""/std:c++latest"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${CXX_STANDARD} /W0 /Zc:__cplusplus"")
else()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${CXX_STANDARD} -fstrict-aliasing -Wno-unknown-pragmas -Wno-unused-function"")
endif()

if (FILAMENT_USE_EXTERNAL_GLES3)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DUSE_EXTERNAL_GLES3"")
endif()

if (FILAMENT_USE_SWIFTSHADER)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DSWIFTSHADER"")
    set(EGL TRUE)
endif()

if (WIN32)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_USE_MATH_DEFINES=1"")
endif()

if (LINUX)
    option(USE_STATIC_LIBCXX ""Link against the static runtime libraries."" ON)
    if (${USE_STATIC_LIBCXX}) 
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
        link_libraries(""-static-libgcc -static-libstdc++"")
        link_libraries(libc++.a)
        link_libraries(libc++abi.a)
    endif()
endif()

if (CYGWIN)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti"")
endif()

if (MSVC)
    # Since the ""secure"" replacements that MSVC suggests are not portable, disable
    # the deprecation warnings. Also disable warnings about use of POSIX functions (i.e. ""unlink"").
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE"")
endif()

# Add colors to ninja builds
if (UNIX AND CMAKE_GENERATOR STREQUAL ""Ninja"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fcolor-diagnostics"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fcolor-diagnostics"")
endif()

# ==================================================================================================
# Release compiler flags
# ==================================================================================================
if (NOT MSVC)
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer -ffunction-sections -fdata-sections"")
endif()

# On Android RELEASE builds, we disable exceptions and RTTI to save some space (about 75 KiB
# saved by -fno-exception and 10 KiB saved by -fno-rtti).
if (ANDROID OR WEBGL)
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-rtti"")
endif()

# With WebGL, we disable RTTI even for debug builds because we pass emscripten::val back and forth
# between C++ and JavaScript in order to efficiently access typed arrays, which are unbound.
# NOTE: This is not documented in emscripten so we should consider a different approach.
if (WEBGL)
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fno-rtti"")
endif()

# ==================================================================================================
# Debug compiler flags
# ==================================================================================================
# ASAN is deactivated for now because:
#  -fsanitize=undefined causes extremely long link times
#  -fsanitize=address causes a crash with assimp, which we can't explain for now
#set(EXTRA_SANITIZE_OPTIONS ""-fsanitize=undefined -fsanitize=address"")
if (NOT MSVC AND NOT WEBGL)
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fstack-protector"")
endif()
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} ${EXTRA_SANITIZE_OPTIONS}"")

# Disable the stack check for macOS to workaround a known issue in clang 11.0.0.
# See: https://forums.developer.apple.com/thread/121887
if (APPLE)
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}  -fno-stack-check"")
endif()

# ==================================================================================================
# Linker flags
# ==================================================================================================
# Strip unused sections
if (NOT WEBGL)
    set(GC_SECTIONS ""-Wl,--gc-sections"")
endif()
set(B_SYMBOLIC_FUNCTIONS ""-Wl,-Bsymbolic-functions"")

if (APPLE)
    set(GC_SECTIONS ""-Wl,-dead_strip"")
    set(B_SYMBOLIC_FUNCTIONS """")

    # tell ranlib to ignore empty compilation units
    set(CMAKE_C_ARCHIVE_FINISH   ""<CMAKE_RANLIB> -no_warning_for_no_symbols <TARGET>"")
    set(CMAKE_CXX_ARCHIVE_FINISH ""<CMAKE_RANLIB> -no_warning_for_no_symbols <TARGET>"")
    # prevents ar from invoking ranlib, let CMake do it
    set(CMAKE_C_ARCHIVE_CREATE   ""<CMAKE_AR> qc -S <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_ARCHIVE_CREATE ""<CMAKE_AR> qc -S <TARGET> <LINK_FLAGS> <OBJECTS>"")
endif()

set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GC_SECTIONS}"")
set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${GC_SECTIONS} ${B_SYMBOLIC_FUNCTIONS}"")

if (WEBGL)
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -s USE_WEBGL2=1"")
endif()

# ==================================================================================================
# Project flags
# ==================================================================================================
# Debug modes only
if (CMAKE_BUILD_TYPE STREQUAL ""Debug"" OR CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"")
    set(TNT_DEV true)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DTNT_DEV"")
endif()

# By default, build with Vulkan support on desktop platforms, although clients must request to use
# it at run time. On Android, the build does not include Vulkan support unless CMake is invoked
# with -DFILAMENT_SUPPORTS_VULKAN=ON.
if (ANDROID OR WIN32 OR WEBGL OR IOS OR FILAMENT_USE_SWIFTSHADER)
    option(FILAMENT_SUPPORTS_VULKAN ""Include the Vulkan backend"" OFF)
else()
    option(FILAMENT_SUPPORTS_VULKAN ""Include the Vulkan backend"" ON)
endif()
if (FILAMENT_SUPPORTS_VULKAN)
    add_definitions(-DFILAMENT_DRIVER_SUPPORTS_VULKAN)
endif()

# Build with Metal support on non-WebGL Apple platforms.
# Apple's simulator does not support Metal.
if (APPLE AND (NOT IOS OR IOS_ARCH STREQUAL ""arm64"") AND NOT WEBGL)
    option(FILAMENT_SUPPORTS_METAL ""Include the Metal backend"" ON)
else()
    option(FILAMENT_SUPPORTS_METAL ""Include the Metal backend"" OFF)
endif()
if (FILAMENT_SUPPORTS_METAL)
    add_definitions(-DFILAMENT_SUPPORTS_METAL)
endif()

# Building filamat increases build times and isn't required for web, so turn it off by default.
if (NOT WEBGL)
    option(FILAMENT_BUILD_FILAMAT ""Build filamat and JNI buildings"" ON)
else()
    option(FILAMENT_BUILD_FILAMAT ""Build filamat and JNI buildings"" OFF)
endif()

# ==================================================================================================
# Material compilation flags
# ==================================================================================================

# Target system.
if (IS_MOBILE_TARGET)
    set(MATC_TARGET mobile)
else()
    set(MATC_TARGET desktop)
endif()

set(MATC_API_FLAGS )

# TODO: Add a flag to build Filament without support for OpenGL.
set(MATC_API_FLAGS ${MATC_API_FLAGS} -a opengl)

if (FILAMENT_SUPPORTS_VULKAN)
    set(MATC_API_FLAGS ${MATC_API_FLAGS} -a vulkan)
endif()
if (FILAMENT_SUPPORTS_METAL)
    set(MATC_API_FLAGS ${MATC_API_FLAGS} -a metal)
endif()

# Only optimize materials in Release mode (so error message lines match the source code)
if (NOT CMAKE_BUILD_TYPE MATCHES Release)
    set(MATC_OPT_FLAGS -g)
endif()

set(MATC_BASE_FLAGS ${MATC_API_FLAGS} -p ${MATC_TARGET} ${MATC_OPT_FLAGS})

# ==================================================================================================
# Distribution
# ==================================================================================================
# choose where to put the objects in the dist folder
if (NOT DIST_ARCH)
    set(DIST_ARCH x86_64)
endif()
if (NOT DIST_DIR)
    set(DIST_DIR ""${DIST_ARCH}"")
endif()

# ==================================================================================================
# Functions
# ==================================================================================================
## The MSVC compiler has a limitation on literal string length which is reached when all the
## licenses are concatenated together into a large string... so split them into multiple strings.
function(list_licenses OUTPUT MODULES)
    set(STR_OPENER ""R\""FILAMENT__("")
    set(STR_CLOSER "")FILAMENT__\"""")
    set(CONTENT)
    set(_MODULES ${MODULES} ${ARGN})
    foreach(module ${_MODULES})
        set(license_path ""../../third_party/${module}/LICENSE"")
        get_filename_component(fullname ""${license_path}"" ABSOLUTE)
        string(APPEND CONTENT ""${STR_OPENER}License and copyrights for ${module}:\n${STR_CLOSER},\n"")
        file(READ ${license_path} license_long)
        string(REPLACE ""\n"" ""${STR_CLOSER},\n${STR_OPENER}"" license ${license_long})
        string(APPEND CONTENT ${STR_OPENER}${license}\n${STR_CLOSER},)
        string(APPEND CONTENT ""\n\n"")
    endforeach()
    configure_file(${FILAMENT}/build/licenses.inc.in ${OUTPUT})
endfunction(list_licenses)

set(COMBINE_SCRIPT ""${CMAKE_CURRENT_SOURCE_DIR}/build/linux/combine-static-libs.sh"")
if (WIN32)
    set(COMBINE_SCRIPT ""${CMAKE_CURRENT_SOURCE_DIR}/build/windows/combine-static-libs.bat"")
    set(CMAKE_AR ""lib.exe"")
endif()

# Add a custom command to TARGET that combines the static libraries in DEPS into a single archive.
function(combine_static_libs TARGET OUTPUT DEPS)
    # Loop through the dependent libraries and query their location on disk.
    set(DEPS_FILES )
    foreach(DEPENDENCY ${DEPS})
        list(APPEND DEPS_FILES ""$<TARGET_FILE:${DEPENDENCY}>"")
    endforeach()

    add_custom_command(
        TARGET ${TARGET} POST_BUILD
        COMMAND ""${COMBINE_SCRIPT}"" ""${CMAKE_AR}"" ""${OUTPUT}"" ${DEPS_FILES}
        COMMENT ""Combining ${target} dependencies into single shared library""
        VERBATIM
    )
endfunction()

# ==================================================================================================
# Configuration for CMAKE_CROSSCOMPILING.
# ==================================================================================================
if (WEBGL)
    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-Release.cmake)
else()
    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-${CMAKE_BUILD_TYPE}.cmake)
endif()

# ==================================================================================================
# Try to find Vulkan if the SDK is installed, otherwise fall back to the bundled version.
# This needs to stay in our top-level CMakeLists because it sets up variables that are used by the
# ""bluevk"" and ""samples"" targets.
# ==================================================================================================

if (FILAMENT_SUPPORTS_VULKAN AND APPLE)
    find_library(Vulkan_LIBRARY NAMES vulkan HINTS ""$ENV{VULKAN_SDK}/lib"" ""$ENV{VULKAN_SDK}/macOS/lib"")
    if (Vulkan_LIBRARY)
        set(Vulkan_FOUND ON)
        message(STATUS ""Found Vulkan library in SDK: ${Vulkan_LIBRARY}."")
        add_definitions(-DFILAMENT_VKLIBRARY_PATH=\""${Vulkan_LIBRARY}\"")
    endif()
endif()

if (FILAMENT_USE_SWIFTSHADER)
    find_library(SWIFTSHADER_EGL NAMES EGL HINTS ""$ENV{SWIFTSHADER_LD_LIBRARY_PATH}"")
    find_library(SWIFTSHADER_GLES NAMES GLESv3 GLESv2 HINTS ""$ENV{SWIFTSHADER_LD_LIBRARY_PATH}"")
    message(STATUS ""Found SwiftShader EGL library in: ${SWIFTSHADER_EGL}."")
    message(STATUS ""Found SwiftShader GLES library in: ${SWIFTSHADER_GLES}."")
endif()

# ==================================================================================================
# Common Functions
# ==================================================================================================

# Sets the following variables: RESGEN_HEADER, RESGEN_SOURCE, RESGEN_FLAGS, RESGEN_SOURCE_FLAGS,
# and RESGEN_OUTPUTS. Please pass in an ARCHIVE_NAME that is unique to your project, otherwise the
# incbin directive will happily consume a blob from the wrong project without warnings or errors.
# Also be sure to include the ASM language in the CMake ""project"" directive for your project.
function(get_resgen_vars ARCHIVE_DIR ARCHIVE_NAME)
    set(OUTPUTS
        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.bin
        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.S
        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.apple.S
        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.h
    )
    if (IOS)
        set(ASM_ARCH_FLAG ""-arch ${DIST_ARCH}"")
    endif()
    if (APPLE)
        set(ASM_SUFFIX "".apple"")
    endif()
    set(RESGEN_HEADER ""${ARCHIVE_DIR}/${ARCHIVE_NAME}.h"" PARENT_SCOPE)
    # Visual Studio makes it difficult to use assembly without using MASM. MASM doesn't support
    # the equivalent of .incbin, so on Windows we'll just tell resgen to output a C file.
    if (WEBGL OR WIN32 OR ANDROID_ON_WINDOWS)
        set(RESGEN_OUTPUTS ""${OUTPUTS};${ARCHIVE_DIR}/${ARCHIVE_NAME}.c"" PARENT_SCOPE)
        set(RESGEN_FLAGS -qcx ${ARCHIVE_DIR} -p ${ARCHIVE_NAME} PARENT_SCOPE)
        set(RESGEN_SOURCE ""${ARCHIVE_DIR}/${ARCHIVE_NAME}.c"" PARENT_SCOPE)
    else()
        set(RESGEN_OUTPUTS ""${OUTPUTS}"" PARENT_SCOPE)
        set(RESGEN_FLAGS -qx ${ARCHIVE_DIR} -p ${ARCHIVE_NAME} PARENT_SCOPE)
        set(RESGEN_SOURCE ""${ARCHIVE_DIR}/${ARCHIVE_NAME}${ASM_SUFFIX}.S"" PARENT_SCOPE)
        set(RESGEN_SOURCE_FLAGS ""-I${ARCHIVE_DIR} ${ASM_ARCH_FLAG}"" PARENT_SCOPE)
    endif()
endfunction()

# ==================================================================================================
# Sub-projects
# ==================================================================================================

# Common to all platforms
add_subdirectory(${EXTERNAL}/libgtest/tnt)
add_subdirectory(${LIBRARIES}/camutils)
add_subdirectory(${LIBRARIES}/filabridge)
add_subdirectory(${LIBRARIES}/filaflat)
add_subdirectory(${LIBRARIES}/filameshio)
add_subdirectory(${LIBRARIES}/geometry)
add_subdirectory(${LIBRARIES}/gltfio)
add_subdirectory(${LIBRARIES}/ibl)
add_subdirectory(${LIBRARIES}/image)
add_subdirectory(${LIBRARIES}/math)
add_subdirectory(${LIBRARIES}/mathio)
add_subdirectory(${LIBRARIES}/utils)
add_subdirectory(${FILAMENT}/filament)
add_subdirectory(${FILAMENT}/shaders)
add_subdirectory(${EXTERNAL}/robin-map/tnt)
add_subdirectory(${EXTERNAL}/smol-v/tnt)
add_subdirectory(${EXTERNAL}/benchmark/tnt)
add_subdirectory(${EXTERNAL}/meshoptimizer)
add_subdirectory(${EXTERNAL}/cgltf/tnt)
add_subdirectory(${EXTERNAL}/draco/tnt)
add_subdirectory(${EXTERNAL}/stb/tnt)
add_subdirectory(${EXTERNAL}/getopt)

if (FILAMENT_BUILD_FILAMAT)
    # spirv-tools must come before filamat, as filamat relies on the presence of the
    # spirv-tools_SOURCE_DIR variable.
    add_subdirectory(${EXTERNAL}/spirv-tools)
    add_subdirectory(${EXTERNAL}/glslang/tnt)
    add_subdirectory(${EXTERNAL}/spirv-cross/tnt)
    add_subdirectory(${LIBRARIES}/filamat)
endif()

if (FILAMENT_SUPPORTS_VULKAN)
    add_subdirectory(${LIBRARIES}/bluevk)
    add_subdirectory(${EXTERNAL}/vkmemalloc/tnt)
endif()

if (APPLE)
    add_subdirectory(${EXTERNAL}/moltenvk/tnt)
endif()

set(FILAMENT_SAMPLES_BINARY_DIR ${PROJECT_BINARY_DIR}/samples)

if (WEBGL)
    add_subdirectory(web/filament-js)
    add_subdirectory(web/samples)

    if (FILAMENT_GENERATE_JS_DOCS)
        add_subdirectory(web/docs)
    endif()

    add_subdirectory(${EXTERNAL}/imgui/tnt)
endif()

if (NOT ANDROID AND NOT WEBGL AND NOT IOS)
    add_subdirectory(${LIBRARIES}/bluegl)
    add_subdirectory(${LIBRARIES}/filamentapp)
    add_subdirectory(${LIBRARIES}/filagui)
    add_subdirectory(${LIBRARIES}/imageio)
    add_subdirectory(${LIBRARIES}/matdbg)

    add_subdirectory(${FILAMENT}/java/filamat)
    add_subdirectory(${FILAMENT}/java/filament)

    add_subdirectory(${FILAMENT}/samples)

    add_subdirectory(${EXTERNAL}/astcenc/tnt)
    add_subdirectory(${EXTERNAL}/civetweb/tnt)
    add_subdirectory(${EXTERNAL}/etc2comp)
    add_subdirectory(${EXTERNAL}/imgui/tnt)
    add_subdirectory(${EXTERNAL}/libassimp/tnt)
    add_subdirectory(${EXTERNAL}/libpng/tnt)
    add_subdirectory(${EXTERNAL}/libsdl2/tnt)
    add_subdirectory(${EXTERNAL}/libz/tnt)
    add_subdirectory(${EXTERNAL}/skylight/tnt)
    add_subdirectory(${EXTERNAL}/tinyexr/tnt)

    add_subdirectory(${TOOLS}/cmgen)
    add_subdirectory(${TOOLS}/cso-lut)
    add_subdirectory(${TOOLS}/filamesh)
    add_subdirectory(${TOOLS}/glslminifier)
    add_subdirectory(${TOOLS}/matc)
    add_subdirectory(${TOOLS}/matinfo)
    add_subdirectory(${TOOLS}/mipgen)
    add_subdirectory(${TOOLS}/normal-blending)
    add_subdirectory(${TOOLS}/resgen)
    add_subdirectory(${TOOLS}/roughness-prefilter)
    add_subdirectory(${TOOLS}/skygen)
    add_subdirectory(${TOOLS}/specular-color)
endif()

if (FILAMENT_USE_SWIFTSHADER)
    add_subdirectory(${EXTERNAL}/swiftshader/tnt)
endif()

# Generate exported executables for cross-compiled builds (Android, WebGL, and iOS)
if (NOT CMAKE_CROSSCOMPILING)
    export(TARGETS matc cmgen filamesh mipgen resgen glslminifier FILE ${IMPORT_EXECUTABLES})
endif()
",3.10,3.1
13881,Kicer86,gravity_simulator,False,False,False,False,False,3,C++,2019-08-25 20:17:06+00:00,2016-05-02 11:59:32+00:00,0,303,"
project(gravity_simulator)

cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)

include(FeatureSummary)

option(BUILD_TESTS ""Build unit tests"" OFF)
add_feature_info(""Build tests"" BUILD_TESTS ""Enables build of tests. Feature controled by BUILD_TESTS variable."")

if(BUILD_TESTS)
    enable_testing()
endif()

add_subdirectory(src)
#add_subdirectory(gravity)


if(UNIX)

    find_program(OBJ_DUMP objdump)

    if(OBJ_DUMP)

        add_custom_command(OUTPUT gravity_simulator.lst
                           COMMAND ${OBJ_DUMP} -M intel -d $<TARGET_FILE:gravity_simulator> > gravity_simulator.lst
                           DEPENDS gravity_simulator
        )

        add_custom_target(assembly_listing ALL
                          DEPENDS gravity_simulator.lst
        )


    endif()

endif()


feature_summary(WHAT ALL)

#unit tests
if(BUILD_TESTS)
    add_custom_target(RunUnitTests ALL
                      COMMAND ctest
                      DEPENDS accelerators_tests
                     )
endif()
",3.1,3.1
13892,dimaleks,uDeviceX,False,False,False,False,False,6,C++,2020-04-01 15:03:47+00:00,2016-08-08 10:26:09+00:00,17,4411,"cmake_minimum_required(VERSION 3.10)

if (""3.12.0"" VERSION_LESS_EQUAL ${CMAKE_VERSION} AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0"")
  message(FATAL_ERROR ""CUDA is broken in CMake 3.12 due to incorrect linker flags (current version is ${CMAKE_VERSION}). \
Please use another version of CMake.\n\
For more info see the following: \
https://gitlab.kitware.com/cmake/cmake/commit/e768d96c74579c79e184027775e51b08cd77fe45"")
endif()

if(POLICY CMP0060)
  cmake_policy(SET CMP0060 NEW)
endif()

if(POLICY CMP0069) # for INTERPROCEDURAL_OPTIMIZATION
  cmake_policy(SET CMP0069 NEW)
endif()

if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

# ***********************
# Options
# ***********************

option(BUILD_PYTHON_MODULE ""Build mirheo python module""        ON )
option(BUILD_TESTS         ""Build mirheo unit tests""           OFF)
option(ENABLE_LTO          ""enable link time optimization""     OFF)
option(ENABLE_SANITIZER    ""enable ub sanitizer""               OFF)
option(PROFILE_COMPILATION ""print compilation profiling info""  OFF)

include(options)
include(version)

getMirheoVersion(MIR_VERSION MIR_VERSION_CMAKE_FORMAT)
getMirheoSHA1(MIR_SHA1)

message(""Compiling libmirheo version ${MIR_VERSION_CMAKE_FORMAT}"")

project(Mirheo VERSION ${MIR_VERSION_CMAKE_FORMAT} LANGUAGES C CXX CUDA)

# ***********************
# Alias directories
# ***********************

set(MIR_BASE_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/src"")
set(CORE_DIR       ""${MIR_BASE_INCLUDE_DIR}/mirheo/core/"")
set(PYTHON_LIB_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/mirheo"")

# ***********************
# generate version files
# ***********************

configure_file(
  ""${CORE_DIR}/version.cpp.in""
  ""${CORE_DIR}/version.cpp""
  )
configure_file(
  ""${PYTHON_LIB_DIR}/version.py.in""
  ""${PYTHON_LIB_DIR}/version.py""
  )

# *************************
# add the mirheo libraries
# *************************

set(LIB_MIR_CORE ""mirheoCore"")
set(LIB_MIR_CORE_AND_PLUGINS ""mirheoCoreAndPlugins"")
set(LIB_MIR ""libmirheo"")

add_subdirectory(src)

if (ENABLE_LTO)
  set_target_properties(${LIB_MIR_CORE}             PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
  set_target_properties(${LIB_MIR_CORE_AND_PLUGINS} PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
  set_target_properties(${LIB_MIR}                  PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

# *************************
# unit tests
# *************************

if (BUILD_TESTS)
  enable_testing()
  add_subdirectory(units)
endif()

if (PROFILE_COMPILATION)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time"")
endif()
",3.10,3.1
13905,openbabel,openbabel,False,False,False,False,False,98,C++,2020-05-16 17:53:07+00:00,2008-12-26 04:52:22+00:00,381,5888,"# Please ensure that any changes remain compliant with 3.1.
if(NOT EMBED_OPENBABEL)
  cmake_minimum_required(VERSION 3.1)
endif()

project(openbabel)
set(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules)

set (CMAKE_CXX_STANDARD 11)

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
  if(POLICY CMP0042)
    cmake_policy(SET CMP0042 OLD)
  endif()
endif()

include (CheckCXXCompilerFlag)

#include (MacroEnsureVersion)

# Version numbering - should be bumped for each release
# Note that for ""beta"" releases, we should start at x.90.0 -- we've
# had too many 1.100.1 releases. :-)
set(BABEL_MAJ_VER   3)
set(BABEL_MIN_VER   1)
set(BABEL_PATCH_VER 1)

# This should be phased out in preference for just using the target name
set(BABEL_LIBRARY openbabel)

# This would be better handled with external projects...
if(EMBED_OPENBABEL)
  set(BABEL_VERSION  ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"" PARENT_SCOPE)
else()
  set(BABEL_VERSION  ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"")
endif()
set(BABEL_DATADIR  ""${CMAKE_INSTALL_PREFIX}/share/openbabel"")

option(ENABLE_VERSIONED_FORMATS
  ""Enable versioning of the format plugin directory"" ON)

# Set up our path handling, inspired by the path handling used in KDE
set(BIN_INSTALL_DIR      ""bin""
  CACHE PATH ""Install dir for binaries"")
set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64"")
if(UNIX)
  set(LIB_INSTALL_DIR    ""lib${LIB_SUFFIX}""
    CACHE PATH ""Install dir for libraries"")
  if(ENABLE_VERSIONED_FORMATS)
    set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""
      CACHE PATH ""Install dir for plugins"")
  else()
    set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""
      CACHE PATH ""Install dir for plugins"")
  endif()
else() # Windows - bin dir = lib dir to load libraries
  set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""
      CACHE PATH ""Install dir for libraries"")
  if(MSVC)
    set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""
      CACHE PATH ""Install dir for plugins"")
  else()
    if(ENABLE_VERSIONED_FORMATS)
      set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""
        CACHE PATH ""Install dir for plugins"")
    else(ENABLE_VERSIONED_FORMATS)
      set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""
        CACHE PATH ""Install dir for plugins"")
    endif(ENABLE_VERSIONED_FORMATS)
  endif()
endif()
if(NOT DEFINED OB_INCLUDE_DIRS)
  set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}"")
endif()
set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake"")
# Ensure a fresh file is made each time CMake is run
file(REMOVE ""${OB_EXPORTS_FILE}"")

# Place binaries and libraries in the root of the build directory
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""
    CACHE STRING ""Binary build output directory"")
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  if(UNIX)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""
      CACHE STRING ""Library build output directory"")
  else() # This is preferable on WIndows for example - bin = lib directory.
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""
      CACHE STRING ""Library build output directory"")
  endif()
endif()

mark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY
  CMAKE_RUNTIME_OUTPUT_DIRECTORY)

#GLIBC_2.4
option(GLIBC_24_COMPATIBLE ""Build project compatible with GLIBC 2.4"" OFF)
if(GLIBC_24_COMPATIBLE AND UNIX)
  set(WRAP_MEMCPY_SRC memcpy.c)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy"")
endif()

option(BUILD_SHARED ""enable shared build support"" ON)
option(BUILD_MIXED ""enable linux relocatable binaries support"" OFF)
option(WITH_STATIC_INCHI ""enable static inchi and related plugins"" OFF)
option(WITH_STATIC_LIBXML ""enable static libxml and xml file format plugins"" OFF)
# Static building
if(BUILD_SHARED)
  set(BUILD_TYPE SHARED)
  set(PLUGIN_TYPE MODULE)
  add_definitions(-DUSING_DYNAMIC_LIBS)
  set(CMAKE_POSITION_INDEPENDENT_CODE ON)
else()
  set(BUILD_TYPE STATIC)
  set(PLUGIN_TYPE STATIC)

  if(WITH_STATIC_INCHI)
    add_definitions(-DHAVE_STATIC_INCHI)
  endif()
  if(WITH_STATIC_LIBXML)
    add_definitions(-DHAVE_STATIC_LIBXML)
  endif()

  if(MSVC)
    # set cl flags for static compiling
    set(CMAKE_CXX_FLAGS_DEBUG ""/MTd"")
    set(CMAKE_C_FLAGS_DEBUG ""/MTd"")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT"")
    set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG"")
    set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG"")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT"")
    # note: static libraries are specified when running cmake
  else()
    set(CMAKE_FIND_LIBRARY_SUFFIXES "".a"")
  endif()
endif()

# Should we attempt to use the system inchi library?
option(WITH_INCHI   ""Build inchi support"" ON)
option(OPENBABEL_USE_SYSTEM_INCHI
  ""Use the system inchi library."" OFF)
if(OPENBABEL_USE_SYSTEM_INCHI)
  find_package(Inchi REQUIRED)
  if (NOT INCHI_FOUND)
    message(FATAL_ERROR ""Inchi library not found."")
  endif()
else()
  message(STATUS ""Using included inchi library."")
  set(INCHI_LIBRARY inchi)
endif()

if(WIN32)
  # FIXME: not used on windows... - inconsistency
  set(MODULE_EXTENSION "".obf"")
else()
  set(MODULE_EXTENSION "".so"")
endif()

# configure checks
find_package(LibXml2)
if(NOT LIBXML2_FOUND)
  message(WARNING ""libxml2 not found - disabling CML support!"")
endif()

find_package(ZLIB)
if(ZLIB_FOUND)
  add_definitions(-DHAVE_LIBZ)
  include_directories(${ZLIB_INCLUDE_DIR})
  # Longstanding unsolved problem with compression under Windows
  if(WIN32)
    add_definitions(-DDISABLE_WRITE_COMPRESSION)
  endif()
endif()

# wxWidgets instructions based on http://wiki.wxwidgets.org/CMake
#find_package(wxWidgets COMPONENTS base core REQUIRED)
find_package(wxWidgets COMPONENTS base core adv)
if(wxWidgets_FOUND)
  include(${wxWidgets_USE_FILE})
  add_definitions(-DHAVE_WXWIDGETS)
  include_directories(${wxWidgets_INCLUDE_DIRS})
endif()

if(MSVC)
  # Ensure that CharacterSet=""0"" in the project files
  add_definitions(-D_SBCS) # Single-Byte Character Set (requires CMake 2.8.8)
endif()

if(MSVC)
  option(OB_USE_PREBUILT_BINARIES
    ""Should Windows Open Babel builds use prebuilt binaries?"" ON)
	# dlhandler_win32.cpp assumes multibyte character set
	remove_definitions(-DUNICODE -D_UNICODE)
  include_directories(${openbabel_SOURCE_DIR}/windows-msvc/include)
endif()

if(MSVC AND OB_USE_PREBUILT_BINARIES)
  include_directories(${XDR_INCLUDE_DIR})
  # The following line is required for check_include_file(rpc/xdr.h ...) below
  set(CMAKE_REQUIRED_INCLUDES ${XDR_INCLUDE_DIR})
  # Force OPENBABEL_USE_SYSTEM_INCHI to ON, as this should be using the binary
  set(OPENBABEL_USE_SYSTEM_INCHI ON CACHE BOOL
    ""Forced to ON for prebuilt binaries"" FORCE)
endif()

include(CheckIncludeFile)
include(CheckIncludeFileCXX)
include(CheckSymbolExists)
include(CheckLibraryExists)
include(CheckTypeSize)
include(CheckCSourceCompiles)

check_include_file(conio.h      HAVE_CONIO_H)
check_include_file(sys/time.h   HAVE_SYS_TIME_H)
check_include_file(time.h       HAVE_TIME_H)
check_include_file(strings.h    HAVE_STRINGS_H)
check_include_file(rpc/xdr.h    HAVE_RPC_XDR_H)
check_include_file(regex.h      HAVE_REGEX_H)
check_include_file_cxx(sstream  HAVE_SSTREAM)

check_symbol_exists(rint          ""math.h""     HAVE_RINT)
check_symbol_exists(snprintf      ""stdio.h""    HAVE_SNPRINTF)
check_symbol_exists(sranddev      ""stdlib.h""   HAVE_SRANDDEV)
check_symbol_exists(strcasecmp    ""string.h""   HAVE_STRCASECMP)
check_symbol_exists(strncasecmp   ""string.h""   HAVE_STRNCASECMP)

# BSDs don't link against libdl, but rather libc
check_library_exists(dl dlopen """" HAVE_LIBDL)

set(CMAKE_EXTRA_INCLUDE_FILES time.h)
check_type_size(clock_t CLOCK_T)

# Cygwin may be missing an XDR function: https://www.gnu.org/software/gnulib/manual/html_node/xdrstdio_005fcreate.html
if(CYGWIN)
  set(HAVE_RPC_XDR_H FALSE)
  message(STATUS ""Disabling rpc/xdr.h for Cygwin"")
endif()

# Get the GCC version - from KDE4 cmake files
if(CMAKE_COMPILER_IS_GNUCXX)
  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.0.0))
    set(GCC_IS_NEWER_THAN_4_0 TRUE)
  else()
    set(GCC_IS_NEWER_THAN_4_0 FALSE)
  endif()
  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.1.0))
    set(GCC_IS_NEWER_THAN_4_1 TRUE)
  else()
    set(GCC_IS_NEWER_THAN_4_1 FALSE)
  endif()
  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.2.0))
    set(GCC_IS_NEWER_THAN_4_2 TRUE)
  else()
    set(GCC_IS_NEWER_THAN_4_2 FALSE)
  endif()
endif()

if(UNIX)
  option(ENABLE_SYMBOL_VISIBILITY
    ""Enable support for compiler symbol visibility. WARNING: Some issues reported""
    OFF)
endif()

if(NOT MSVC)
  SET(CMAKE_REQUIRED_FLAGS -Werror)
  check_c_source_compiles(""
   #include <sys/types.h>
   #include <dirent.h>
    int main(){
     extern int matchFiles (struct dirent *entry_p);
     struct dirent **entries_pp;
     int count = scandir (\""./\"", &entries_pp, matchFiles, 0);
     return count;
    }
   "" SCANDIR_NEEDS_CONST)

  set(OB_MODULE_PATH ""${CMAKE_INSTALL_PREFIX}/${OB_PLUGIN_INSTALL_DIR}"")

  # Add some visibility support when using GCC
  # note: Altough MinGW g++ 4.4 passes this test, visibility can't be used
  if(CMAKE_COMPILER_IS_GNUCXX AND NOT APPLE)
    if(CMAKE_SYSTEM_NAME MATCHES Linux)
      set (CMAKE_SHARED_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}"")
      set (CMAKE_SHARED_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}"")
      set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}"")
      set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}"")
      if(BUILD_SHARED)
        set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}"")
        set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_EXE_LINKER_FLAGS}"")
      endif()
    endif ()
    # Now check if we can use visibility to selectively export symbols
    check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY)
    set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility"")
    set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE)
    if(GCC_IS_NEWER_THAN_4_1)
      exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info)
      string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}"")
    endif()
    if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY
       AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR)
      # We have all the parts necessary - use visibility support
      add_definitions(-DHAVE_GCC_VISIBILITY)
      set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden"")
      set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")
    endif()
  endif()
endif()

# To avoid warnings when linking the plugins and exes
if(MINGW)
  set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}"")
  set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}"")
endif()

message(STATUS ""Checking available shared pointer..."")
include(CheckCXXSourceCompiles)
check_cxx_source_compiles(""#include <memory>
                           int main(){ std::shared_ptr<int> p; return 0; }""
                           HAVE_STD_SHARED_PTR)
check_cxx_source_compiles(""#include <memory>
                           int main(){ std::tr1::shared_ptr<int> p; return 0; }""
                           HAVE_STD_TR1_SHARED_PTR)
check_cxx_source_compiles(""#include <tr1/memory>
                           int main(){ std::tr1::shared_ptr<int> p; return 0; }""
                           HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)
if(HAVE_STD_SHARED_PTR)
  set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr"")
  set(OB_SHARED_PTR_HEADER ""memory"")
  set(SHARED_POINTER true)
  add_definitions(-DHAVE_SHARED_POINTER)
elseif(HAVE_STD_TR1_SHARED_PTR)
  set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr"")
  set(OB_SHARED_PTR_HEADER ""memory"")
  set(SHARED_POINTER true)
  add_definitions(-DHAVE_SHARED_POINTER)
elseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)
  set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr"")
  set(OB_SHARED_PTR_HEADER ""tr1/memory"")
  set(SHARED_POINTER true)
  add_definitions(-DHAVE_SHARED_POINTER)
else()
  find_package(Boost)
  if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
    add_definitions(-DUSE_BOOST -DHAVE_SHARED_POINTER)
    set(SHARED_POINTER true)
  else()
    message(FATAL_ERROR ""Boost is required to compile OpenBabel with GCC 3.x"")
  endif()
  set(OB_SHARED_PTR_IMPLEMENTATION ""boost::shared_ptr"")
  set(OB_SHARED_PTR_HEADER ""boost/memory"")
endif()
message(STATUS ""Use ${OB_SHARED_PTR_IMPLEMENTATION} in ${OB_SHARED_PTR_HEADER}"")

find_package(Boost COMPONENTS program_options iostreams)
  if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
 endif()

# Intel C++ Compiler
# Note: Windows version uses different options!
if(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)
  add_definitions (-D_BSD_SOURCE)
  # Set some linker flags
  if(CMAKE_SYSTEM_NAME MATCHES Linux)
    set(CMAKE_SHARED_LINKER_FLAGS
      ""-lc ${CMAKE_SHARED_LINKER_FLAGS}"")
    set(CMAKE_MODULE_LINKER_FLAGS
      ""-lc ${CMAKE_MODULE_LINKER_FLAGS}"")
    set (CMAKE_EXE_LINKER_FLAGS
      ""-lc ${CMAKE_EXE_LINKER_FLAGS}"")
  endif (CMAKE_SYSTEM_NAME MATCHES Linux)
  check_cxx_compiler_flag(-fvisibility=hidden HAVE_INTEL_VISIBILITY)
  set(HAVE_INTEL_VISIBILITY ${HAVE_INTEL_VISIBILITY} CACHE BOOL
    ""Intel Compiler support for hidden visibility"")
  if(HAVE_INTEL_VISIBILITY AND ENABLE_SYMBOL_VISIBILITY)
    add_definitions(-DHAVE_GCC_VISIBILITY)
#    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden"")
    check_cxx_compiler_flag(-fvisibility-inlines-hidden HAVE_INTEL_VISIBILITY_INLINES)
    set(HAVE_INTEL_VISIBILITY_INLINES ${HAVE_INTEL_VISIBILITY_INLINES} CACHE BOOL
      ""Intel Compiler support for -fvisibility-inlines-hidden"")
    if(HAVE_INTEL_VISIBILITY_INLINES)
      set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")
    endif()
  endif()

  set(CMAKE_C_FLAGS_RELEASE ""-O3 -ipo1 -DNDEBUG -Wl,-s"")
  set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -ipo1 -DNDEBUG -Wl,-s"")

  # define WITH_SSE2 to enable the SSE2 instruction set.
  # Available on Pentium 4, Athlon 64, and newer CPUs.
  # TODO: Remove this? Should be handled by -march=native and only enabled if OPTIMIZE_NATIVE is ON
  if(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)
    message(STATUS ""Enabling the SSE2 instruction set"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2"")
  endif(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)
endif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)

#Find if OpenMP support is enabled

option(ENABLE_OPENMP
    ""Enable support for OpenMP compilation of forcefield code""
    OFF)
if(ENABLE_OPENMP)
  find_package(OpenMP)
  if(OPENMP_FOUND)
   set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
   set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
   set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
  endif()
endif()

# Some rpath handling for Linux and Mac
if(UNIX AND BUILD_SHARED)
  if(APPLE)
    set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})
  else()
    set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}"")
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
  endif()
endif()

# Three build types are available: Release, Debug, RelWithDebInfo.
# We default to Release.
if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
endif()

#define various build types
if(CMAKE_COMPILER_IS_GNUCXX)
  set (CMAKE_CXX_FLAGS_RELEASE        ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG"")
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g"")
  set (CMAKE_CXX_FLAGS_DEBUG          ""${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline"")
endif()

file(GLOB_RECURSE headers include/openbabel/*.h)
configure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake
  ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h)
install(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h
  DESTINATION ${OB_INCLUDE_DIRS}/openbabel)
if(NOT MSVC)
  configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake
    ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY)
  install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc
    DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
endif()

include_directories(${openbabel_BINARY_DIR}/include
  ${openbabel_SOURCE_DIR}/data
  ${openbabel_SOURCE_DIR}/include
)

#cjh
find_package(Eigen3)
if(EIGEN3_FOUND)
  add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3)
  include_directories(${EIGEN3_INCLUDE_DIR})
else()
  find_package(Eigen2) # find and setup Eigen2
  if(EIGEN2_FOUND)
    add_definitions (-DHAVE_EIGEN)
    include_directories(${EIGEN2_INCLUDE_DIR})
  endif()
endif()
#cjh


find_package(Boost COMPONENTS filesystem iostreams unit_test_framework)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
  option(WITH_MAEPARSER ""Build Maestro support"" ON)
  if(BUILD_SHARED)
    option(WITH_COORDGEN ""Build Coordgen support"" ON)
  else()
    option(WITH_COORDGEN ""Build Coordgen support"" OFF)
  endif()
else()
  option(WITH_COORDGEN ""Build Coordgen support"" OFF)
endif()

if(WITH_MAEPARSER)

    find_package(maeparser MODULE QUIET)

    if (maeparser_FOUND)

      message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}."")

    else()

      set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download"")

      set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}"")

      option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED})

      # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.
      set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests"")

      if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt"")

        message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}."")

      else()

          file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""
              ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz"")

          execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""
              WORKING_DIRECTORY ""${MAEPARSER_DIR}"")

          find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH)

          if(MAEPARSER_UNPACK_DIR)
            file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser"")
            message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}."")
          else()
            message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'."")
          endif()

      endif()

      add_subdirectory(""${MAEPARSER_DIR}/maeparser"")

      set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}"")
      set(maeparser_LIBRARIES maeparser)

      message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}"")

    endif()

    include_directories(${maeparser_INCLUDE_DIRS})
    set(libs ${libs} ${maeparser_LIBRARIES})

else()
    message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats."")
endif()


if(WITH_COORDGEN)

    find_package(coordgen MODULE QUIET)

    if (coordgen_FOUND)

      message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}."")

    else()

      set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download"")

      set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}"")

      # These won't work, since openbabel relocates them to the ""bin"" dir
      set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests"")
      set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example"")

      if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt"")

        message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}."")

      else()

          file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""
              ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz"")

          execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""
              WORKING_DIRECTORY ""${COORDGEN_DIR}"")

          find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH)

          if(COORDGEN_UNPACK_DIR)
            file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen"")
            message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}."")
          else()
            message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'."")
          endif()

      endif()

      add_subdirectory(""${COORDGEN_DIR}/coordgen"")

      set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}"")
      set(coordgen_LIBRARIES coordgen)


      message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}"")

    endif()

    include_directories(${coordgen_INCLUDE_DIRS})
    set(libs ${libs} ${coordgen_LIBRARIES})

else()
    message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats."")
endif()

option(WITH_JSON ""Build JSON support"" ON)
option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON)
if(WITH_JSON)
  set(RAPIDJSON_VERSION_MIN 1.1.0)
  # First try find system rapidjson
  if(OPENBABEL_USE_SYSTEM_RAPIDJSON)
    find_package(RapidJSON ${RAPIDJSON_VERSION_MIN})
  endif()
  # Otherwise download rapidjson to openbabel source directory
  if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN})
    set(RAPIDJSON_VERSION 1.1.0)
    if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}"")
      file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""
        ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status)
      execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf
        ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz
        WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external)
      message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}."")
    endif()
    set(RAPIDJSON_FOUND TRUE)
    set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include)
  endif()
  if(RAPIDJSON_FOUND)
    message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}"")
    add_definitions(-DHAVE_RADPIJSON)
    include_directories(${RAPIDJSON_INCLUDE_DIRS})
  endif()
endif()

find_package(Cairo)
if(CAIRO_FOUND)
  message(STATUS ""Cairo found. PNG output will be supported."")
else(CAIRO_FOUND)
  message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported."")
endif(CAIRO_FOUND)

# Should we enable optimizations for the native CPU architecture?
# (this will speed up JSON handling, similarity calculations and maybe those involving Eigen)
option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF)
if(OPTIMIZE_NATIVE)
  include(OptimizeNative)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}"")
  # Tell rapidjson which extensions are available
  if(HAVE_SSE2)
    add_definitions(-DRAPIDJSON_SSE2)
  endif()
  if(HAVE_SSE4_2)
    add_definitions(-DRAPIDJSON_SSE42)
  endif()
  if(HAVE_NEON)
    add_definitions(-DRAPIDJSON_NEON)
  endif()
  add_definitions(-DOPTIMIZE_NATIVE)
  message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines."")
endif()

add_subdirectory(include)
add_subdirectory(data)
add_subdirectory(doc)
add_subdirectory(src)
add_subdirectory(tools)

# Should we build the GUI? Default is yes on Linux or Windows, not Mac.
if (APPLE OR NOT BUILD_SHARED)
  option(BUILD_GUI ""Build the GUI"" OFF)
else ()
  option(BUILD_GUI ""Build the GUI"" ON)
endif()

if(BUILD_GUI)
  message(STATUS ""Attempting to build the GUI"")
  if(wxWidgets_FOUND)
    message(STATUS ""   wxWidgets found => GUI will be built"")
    add_subdirectory(src/GUI)
  else()
    message(STATUS ""   wxWidgets not found => GUI will not be built"")
  endif()
else()
  message(STATUS ""GUI will not be built"")
endif()

# Do we want to build the tests?
option(ENABLE_TESTS ""Enable unit tests"" ON)
if(ENABLE_TESTS)
  include(CTest)
  enable_testing()
  add_subdirectory(test)
endif()

# Should the language bindings be regenereted?
option(RUN_SWIG ""Generate language bindings with SWIG"" OFF)

# Build bindings only
option(BINDINGS_ONLY ""Build bindings only"" OFF)

# Point to library if building bindings only
set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}
    CACHE PATH ""Point to openbabel library if building bindings only"")

# Should all bindings be built?
option(ALL_BINDINGS ""Build all languages bindings"" OFF)

# Should PHP bindings be built
option(PHP_BINDINGS ""Build PHP bindings"" OFF)

# Should Python bindings be built?
option(PYTHON_BINDINGS ""Build Python bindings"" OFF)

# Should Ruby bindings be built?
option(RUBY_BINDINGS ""Build Ruby bindings"" OFF)

# Should Perl bindings be built?
option(PERL_BINDINGS ""Build Perl bindings"" OFF)

# Should Java bindings be built?
option(JAVA_BINDINGS ""Build Java bindings"" OFF)

# Should R bindings be built?
option(R_BINDINGS ""Build R bindings"" OFF)

# Should CSharp bindings be built?
option(CSHARP_BINDINGS ""Build Csharp bindings"" OFF)

if(ALL_BINDINGS)
  set(PYTHON_BINDINGS ON)
  set(RUBY_BINDINGS ON)
  set(PHP_BINDINGS ON)
  set(PERL_BINDINGS ON)
  set(JAVA_BINDINGS ON)
  set(CSHARP_BINDINGS ON)
  set(R_BINDINGS ON)
endif()

add_subdirectory(scripts)

# A minimal build with just two formats (SMI, SDF) useful for developers
option(MINIMAL_BUILD ""Disable full build"" OFF)

# Create the Config and ConfigVersion files in the build directory, useful to
# build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to
# point at the build directory and call find_package(OpenBabel3)
set(OpenBabel3_INCLUDE_DIRS
  ""${openbabel_SOURCE_DIR}/include""
  ""${openbabel_BINARY_DIR}/include"")
configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""
  ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY)
configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""
  ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY)

# Now to configure the installed config file.
set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3"")
set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}"")
set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>"")

set(OB_EXPORTS_FILE
  ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake"")
set(REL_REF)
if(NOT WIN32)
  set(REL_REF ""/../../.."")
endif()
configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""
  ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY)

install(EXPORT openbabel-targets
  DESTINATION ""${OB_CONFIG_DIR}""
  FILE OpenBabel3_EXPORTS.cmake
  COMPONENT Development)
install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""
  DESTINATION ${OB_CONFIG_DIR}
  COMPONENT Development
  RENAME OpenBabel3Config.cmake)
install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""
  DESTINATION ${OB_CONFIG_DIR}
  COMPONENT Development)

# from https://cmake.org/Wiki/RecipeAddUninstallTarget
########### Add uninstall target ###############
if (NOT DEFINED EMBED_OPENBABEL)
CONFIGURE_FILE(
  ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""
  IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET(uninstall
  ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake"")
endif()
",3.1,3.1
13988,mvdevs,jk2mv,False,False,False,False,False,6,C,2020-05-17 19:40:14+00:00,2015-03-19 20:32:27+00:00,52,1105,"cmake_minimum_required(VERSION 3.1.0)

# For checks in subdirectories
set(InMV TRUE)

# Paths
set(LIBDir ""${CMAKE_SOURCE_DIR}/libs"")
set(RESDir ""${CMAKE_SOURCE_DIR}/res"")

# Custom CMake Modules
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_SOURCE_DIR}/tools"")
list(INSERT CMAKE_MODULE_PATH 0 ""${RESDir}"")

# Project & Versioning
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(ProjectName ""JK2MV"" CACHE STRING ""Project Name"")
set(ProjectURL ""https://jk2mv.org"")
project(${ProjectName})

include(GetGitRevisionDescription)
git_describe(MV_VERSION --tags)
if(NOT MV_VERSION OR MV_VERSION STREQUAL ""GIT-NOTFOUND"" OR MV_VERSION STREQUAL ""HEAD-HASH-NOTFOUND"")
	set(MV_VERSION ""UNKNOWN"")
	message(WARNING ""Could not find git or git repository. Install git and make sure you actually cloned the repository (Directory named .git must exist) for correct versioning."")
endif()

message(STATUS ""${ProjectName} Version: ${MV_VERSION}"")

# Languages
enable_language(C CXX)
if(MSVC)
	enable_language(ASM_MASM)
endif()

if(CMAKE_CONFIGURATION_TYPES)
	set(MultiConfigGenerator TRUE)
endif()

# Customizable options
option(BuildPortableVersion ""Build portable version (does not read or write files from your user/home directory"" ON)
option(BuildMVMP ""Whether to create targets for the client (jk2mvmp & jk2mvmenu)"" ON)
option(BuildMVDED ""Whether to create targets for the dedicated server (jk2mvded)"" ON)
option(BuildMVSDK ""Whether to build and integrate the mvsdk modules"" ON)

if(NOT EXISTS ""${CMAKE_SOURCE_DIR}/src/mvsdk/code/ui/CMakeLists.txt"")
	message(FATAL_ERROR ""Could not find CMakeLists.txt in \""src/mvsdk/code/ui\"". Unable to continue. Make sure you cloned jk2mv including submodules."")
endif()

if(BuildMVSDK AND NOT EXISTS ""${CMAKE_SOURCE_DIR}/src/mvsdk/CMakeLists.txt"")
    message(WARNING ""Could not find CMakeLists.txt in \""src/mvsdk\"". Make sure you cloned jk2mv including submodules. Continuing with BuildMVSDK=OFF."")
    set(BuildMVSDK OFF)
endif()

option(LegacyHTTPDownloads ""Activate this for legacy JK2MF http downloads. Bad code due to bad implementation in jk2mf"" OFF)
option(NTClientWorkaround ""Disable loading of NT-Mod pk3 files to prevent crashing the game"" ON)

# Internal Libs
if(MSVC)
	set(UseInternalPNG ON)
	set(UseInternalJPEG ON)
	set(UseInternalZLIB ON)
	set(UseInternalMiniZip ON)
	set(UseInternalSDL2 ON)
	set(UseInternalOpenAL ON)
else()
	set(UseInternalSDL2 OFF)
	set(UseInternalOpenAL OFF)

	if(UseInternalLibs)
		set(UseInternalPNGDefault ON)
		set(UseInternalJPEGDefault ON)
		set(UseInternalZLIBDefault ON)
		set(UseInternalMiniZipDefault ON)
	elseif(MINGW)
		set(UseInternalPNGDefault OFF)
		set(UseInternalJPEGDefault OFF)
		set(UseInternalZLIBDefault OFF)
		set(UseInternalMiniZipDefault OFF)
	elseif(APPLE)
		set(UseInternalPNGDefault ON)
		set(UseInternalJPEGDefault ON)
		set(UseInternalZLIBDefault ON)
		set(UseInternalMiniZipDefault ON)
	else() # Linux
		set(UseInternalPNGDefault OFF)
		set(UseInternalJPEGDefault OFF)
		set(UseInternalZLIBDefault OFF)
		set(UseInternalMiniZipDefault OFF)
		set(UseInternalSDL2 OFF)
	endif()

	option(UseInternalLibs ""Whether to use included libraries instead of locally installed ones"")
	option(UseInternalPNG ""Whether to use the included libpng instead of a locally installed one"" ${UseInternalPNGDefault})
	option(UseInternalJPEG ""Whether to use the included libjpeg instead of a locally installed one"" ${UseInternalJPEGDefault})
	option(UseInternalZLIB ""Whether to use the included zlib instead of a locally installed one"" ${UseInternalZLIBDefault})
	option(UseInternalMiniZip ""Whether to use the included minizip instead of a locally installed one"" ${UseInternalMiniZipDefault})
endif()

# Platform & Architecture
if(WIN32)
	set(ARCH_X86 ON)
	set(GlobalDefines ${GlobalDefines} ""WIN32"")
	if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86_64"" ""WIN64"")
		set(Architecture ""x64"")
		set(ARCH_X86_64 ON)
	else()
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86"")
		set(Architecture ""x86"")
		set(ARCH_X86_32 ON)
	endif()
elseif(APPLE)
	set(ARCH_X86 ON)
	set(GlobalDefines ${GlobalDefines} ""MACOS_X"")
	if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i.86$"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86"")
		set(Architecture ""i386"")
		set(ARCH_X86_32 ON)
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^x86.64$"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86_64"")
		set(Architecture ""x86_64"")
		set(ARCH_X86_64 ON)
	endif()
else()
	if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^arm"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_ARM32"")
		set(Architecture ""arm"")
		set(ARCH_ARM32 ON)
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i.86$"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86"")
		set(Architecture ""i386"")
		set(ARCH_X86 ON)
		set(ARCH_X86_32 ON)
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(x86.64|amd64)$"")
		set(GlobalDefines ${GlobalDefines} ""ARCH_X86_64"")
		set(Architecture ""amd64"")
		set(ARCH_X86 ON)
		set(ARCH_X86_64 ON)
	else()
		set(GlobalDefines ${GlobalDefines} ""NO_VM_COMPILED"")
		set(Architecture ""${CMAKE_SYSTEM_PROCESSOR}"")
		set(ARCH_UNKNOWN ON)
	endif()
endif()

message(STATUS ""Architecture is ${Architecture}"")
if(ARCH_UNKNOWN)
	message(WARNING ""Building for unsupported Architecture ${Architecture}."")
endif()

# Binary names
set(MVMP ""jk2mvmp"")
set(MVMENU ""jk2mvmenu_${Architecture}"")
set(MVDED ""jk2mvded"")

# Directories
if(MultiConfigGenerator)
	# Visual Studio, Xcode etc. support selecting build type in the IDE and automatically append
	# the configuration type to the path
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
	set(CPACK_PACKAGE_DIRECTORY ${CMAKE_BINARY_DIR}/out)

	if(APPLE)
		set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/out/bundle)
	endif()
else()
	if(NOT CMAKE_BUILD_TYPE)
		message(STATUS ""No build type selected, default to Release"")
		set(CMAKE_BUILD_TYPE ""Release"")
	endif()

	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/${CMAKE_BUILD_TYPE})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/${CMAKE_BUILD_TYPE})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/${CMAKE_BUILD_TYPE})
	set(CPACK_PACKAGE_DIRECTORY ${CMAKE_BINARY_DIR}/out)

	if(APPLE)
		set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/out/bundle/${CMAKE_BUILD_TYPE})
	endif()
endif()

# Compiler defines / settings
set(GlobalDefines ${GlobalDefines} ""BOTLIB"" ""_JK2"")
set(DebugDefines ${DebugDefines} ""DEBUG"")
set(ReleaseDefines ""FINAL_BUILD"" ""NDEBUG"")

if(MSVC)
	# Warnings
	# 4244 = conversion' conversion from 'type1' to 'type2', possible loss of data
	# 4996 = 'function': was declared deprecated
	# 4267 = 'var' : conversion from 'size_t' to 'type', possible loss of data
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /wd4244 /wd4996 /wd4267"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /wd4244 /wd4996 /wd4267"")
	
	# Multithreaded
	set(CMAKE_CXX_FLAGS_RELEASE ""/MT"" CACHE TYPE INTERNAL FORCE)
	set(CMAKE_C_FLAGS_RELEASE ""/MT"" CACHE TYPE INTERNAL FORCE)

	# Platform
	set(GlobalDefines ${GlobalDefines} ""UNICODE"" ""_UNICODE"")

	# Optimization
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /MP"") # multiprocessor compilation
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MP"")
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /O2 /Oi /Ot /Ob2"") # maximize speed
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /O2 /Oi /Ot /Ob2"")

	if(ARCH_X86_32)
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /arch:SSE2"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:SSE2"")

		# dont use safe exception handler
		# openal does not support it on X86_32
		set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /safeseh:no"")
	endif()

	# Set the same options for the build including symbols
	set(CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELEASE})
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELEASE})

	# Debugging
	# /Zi = create PDB with symbols, linenumbers etc.
	# /DEBUG:FULL = Generate Debug Information optimized for sharing and publishing (/DEBUG:FULL)
	set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} /Zi"")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Zi"")
	set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ""${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /DEBUG:FULL"")
elseif ((${CMAKE_C_COMPILER_ID} STREQUAL GNU) OR (${CMAKE_C_COMPILER_ID} MATCHES Clang|AppleClang))
	# Additional flags for debug configuration
	set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -ggdb3"")
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -ggdb3"")

	# we need sse optimizations in debug configuration, too because of the inline assembler which is sse code
	if(ARCH_X86)
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -msse2"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2"")
	endif()

	# Optimization
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -O2"")
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O2"")

	# General
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -g1 -fno-omit-frame-pointer"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g1 -fno-omit-frame-pointer"")

	# Warnings
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wsign-compare -Wno-unknown-pragmas"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-write-strings"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas -Wno-attributes"")

	if(${CMAKE_C_COMPILER_ID} STREQUAL GNU)
		if(ARCH_X86)
			set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -mfpmath=sse"")
		endif()

		# Link only libs actually needed
		set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -Wl,--as-needed"")
	endif()

	if(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
		if(ARCH_X86)
			set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -mfpmath=sse"")
		endif()

		# Link only libs actually needed
		# workaround for older gcc versions and c++11 std::thread: explicitly link lpthread
		# https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1228201
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wl,--no-as-needed -pthread -lpthread -Wl,--as-needed"")

		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")

		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wformat=2 -Wno-unused-but-set-variable"")
	elseif(""${CMAKE_CXX_COMPILER_ID}"" MATCHES Clang|AppleClang)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-char-subscripts -Wno-self-assign"")
	endif()
else()
	message(FATAL_ERROR ""Unsupported compiler"")
endif()

if(LegacyHTTPDownloads)
	set(GlobalDefines ${GlobalDefines} ""MV_MFDOWNLOADS"")
endif()

if(NTClientWorkaround)
	set(GlobalDefines ${GlobalDefines} ""NTCLIENT_WORKAROUND"")
endif()

if(BuildPortableVersion)
	set(GlobalDefines ${GlobalDefines} ""PORTABLE"")
else()
	set(GlobalDefines ${GlobalDefines} ""INSTALLED"")
endif()

# Libraries
if(UseInternalZLIB)
	set(GlobalDefines ${GlobalDefines} ""INTERNAL_ZLIB"")
	add_subdirectory(libs/zlib)
endif()

if(UseInternalMiniZip)
	set(GlobalDefines ${GlobalDefines} ""INTERNAL_MINIZIP"")
	add_subdirectory(libs/minizip)
endif()

if(UseInternalJPEG)
	set(GlobalDefines ${GlobalDefines} ""INTERNAL_JPEG"")
	add_subdirectory(libs/jpeg-9a)
endif()

if(UseInternalPNG)
	set(GlobalDefines ${GlobalDefines} ""INTERNAL_PNG"")
	add_subdirectory(libs/libpng)
endif()

add_subdirectory(libs/mongoose)

# Package
set(CPACK_PACKAGE_NAME ${ProjectName})
set(CPACK_PACKAGE_FILE_NAME ""jk2mv-v${MV_VERSION}"")
set(CPACK_PACKAGE_VENDOR ""jk2mv.org"")
set(CPACK_PACKAGE_CONTACT ""jk2mv.org <contact@jk2mv.org>"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Jedi Knight II: Multi Version"")
set(CPACK_PACKAGE_VERSION ""${MV_VERSION}"")

if(WIN32)
	set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-win32-${Architecture}"")

	if(BuildPortableVersion)
		set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-portable"")

		set(CPACK_GENERATOR ""ZIP"")
	else()
		set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-installer"")

		set(CPACK_GENERATOR ""NSIS"")
		set(CPACK_NSIS_URL_INFO_ABOUT ${ProjectURL})

		configure_file(
			${RESDir}/NSIS.definitions.nsh.in
			${CMAKE_BINARY_DIR}/res/NSIS.definitions.nsh
		)
		string(REGEX REPLACE ""/"" ""\\\\\\\\"" CPACK_NSIS_INCLFILE ""${CMAKE_BINARY_DIR}/res/NSIS.definitions.nsh"")
	endif()
elseif(APPLE)
	set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-macosx-${Architecture}"")

	if(BuildPortableVersion)
		set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-portable"")

		set(CPACK_GENERATOR ""TGZ"")
	else()
		set(CPACK_GENERATOR ""DragNDrop"")
		set(CPACK_DMG_FORMAT ""UDBZ"")
	endif()
else()
	set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-linux-${Architecture}"")

	if(BuildPortableVersion)
		set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-portable"")

		set(CPACK_GENERATOR ""TGZ"")
	else()
		set(CPACK_GENERATOR ${CPACK_GENERATOR} ""DEB"")
		set(CPACK_DEBIAN_PACKAGE_NAME ""jk2mv"") # debian packages are lowercase
		set(CPACK_DEBIAN_PACKAGE_SECTION ""games"")
		set(CPACK_DEBIAN_PACKAGE_HOMEPAGE ${ProjectURL})
		set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${Architecture})
		set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)

		set(CPACK_GENERATOR ${CPACK_GENERATOR} ""RPM"")
		set(CPACK_RPM_PACKAGE_NAME ""jk2mv"")
		set(CPACK_RPM_PACKAGE_DESCRIPTION ""JK2MV (Multi Version) is a modification for Jedi Knight II: Jedi Outcast. It supports all three game versions and comes with various features and optimizations."")
		set(CPACK_RPM_PACKAGE_URL ${ProjectURL})
		set(CPACK_RPM_PACKAGE_LICENSE ""GPLv2"")
		set(CPACK_RPM_PACKAGE_GROUP ""Amusements/Games"")
		set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
			/usr/share/applications
			/usr/share/metainfo
			/usr/share/icons /usr/share/icons/hicolor
			/usr/share/icons/hicolor/256x256 /usr/share/icons/hicolor/256x256/apps
			/usr/share/icons/hicolor/48x48 /usr/share/icons/hicolor/48x48/apps
		)

		set(CPACK_RPM_PACKAGE_REQUIRES ""glibc, libgcc, libstdc++, SDL2, openal-soft"")
		if(NOT UseInternalZLIB)
			set(CPACK_RPM_PACKAGE_REQUIRES ""${CPACK_RPM_PACKAGE_REQUIRES}, zlib"")
		endif()
		if(NOT UseInternalMiniZip)
			set(CPACK_RPM_PACKAGE_REQUIRES ""${CPACK_RPM_PACKAGE_REQUIRES}, minizip"")
		endif()
		if(NOT UseInternalJPEG)
			set(CPACK_RPM_PACKAGE_REQUIRES ""${CPACK_RPM_PACKAGE_REQUIRES}, libjpeg-turbo"")
		endif()
		if(NOT UseInternalPNG)
			set(CPACK_RPM_PACKAGE_REQUIRES ""${CPACK_RPM_PACKAGE_REQUIRES}, libpng"")
		endif()
	endif()
endif()
include(CPack)

add_subdirectory(assets)
add_subdirectory(src)
",3.1.0,3.1
14070,thebracket,rltk,False,False,False,False,False,2,C++,2020-01-29 13:43:49+00:00,2016-02-26 14:37:30+00:00,202,456,"cmake_minimum_required(VERSION 3.1)
project(""rltk"")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake_modules"")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED on)

find_package(ZLIB REQUIRED)
find_package(SFML 2 COMPONENTS system window graphics REQUIRED)
find_package(cereal REQUIRED)

add_library(rltk 	rltk/rltk.cpp
					rltk/texture_resources.cpp
					rltk/color_t.cpp
					rltk/virtual_terminal.cpp
					rltk/rng.cpp
					rltk/geometry.cpp
					rltk/input_handler.cpp
					rltk/font_manager.cpp
					rltk/gui.cpp
					rltk/layer_t.cpp
					rltk/gui_control_t.cpp
					rltk/virtual_terminal_sparse.cpp
					rltk/ecs.cpp
					rltk/xml.cpp
					rltk/perlin_noise.cpp
					rltk/rexspeeder.cpp
					rltk/scaling.cpp)
target_include_directories(rltk PUBLIC
		""$<BUILD_INTERFACE:${SFML_INCLUDE_DIR}>""
		""$<BUILD_INTERFACE:${CEREAL_INCLUDE_DIR}>""
		""$<BUILD_INTERFACE:${ZLIB_INCLUDE_DIRS}>""
		)
target_link_libraries(rltk PUBLIC ${ZLIB_LIBRARIES} ${SFML_LIBRARIES})
if(NOT MSVC) # Why was this here? I exempted the wierd linker flags
	target_compile_options(rltk PUBLIC -O3 -Wall -Wpedantic -march=native -mtune=native -g)
else()
	target_compile_options(rltk PUBLIC /W3 /EHsc)
endif()

install (TARGETS rltk
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION lib
		RUNTIME DESTINATION bin)

set(RLTK_HEADERS
		rltk/astar.hpp
		rltk/colors.hpp
		rltk/color_t.hpp
		rltk/ecs.hpp
		rltk/ecs_impl.hpp
		rltk/filesystem.hpp
		rltk/font_manager.hpp
		rltk/fsa.hpp
		rltk/geometry.hpp
		rltk/gui.hpp
		rltk/gui_control_t.hpp
		rltk/input_handler.hpp
		rltk/layer_t.hpp
		rltk/path_finding.hpp
		rltk/perlin_noise.hpp
		rltk/rexspeeder.hpp
		rltk/rltk.hpp
		rltk/rng.hpp
		rltk/scaling.hpp
		rltk/serialization_utils.hpp
		rltk/texture.hpp
		rltk/texture_resources.hpp
		rltk/vchar.hpp
		rltk/virtual_terminal.hpp
		rltk/virtual_terminal_sparse.hpp
		rltk/visibility.hpp
		rltk/xml.hpp)

install(FILES ${RLTK_HEADERS}
		DESTINATION ""include/rltk""
		)

# Examples

# Add all of the example executables and their library dependency
add_executable(ex1 examples/ex1/main.cpp)
add_executable(ex2 examples/ex2/main.cpp)
add_executable(ex3 examples/ex3/main.cpp)
add_executable(ex4 examples/ex4/main.cpp)
add_executable(ex5 examples/ex5/main.cpp)
add_executable(ex6 examples/ex6/main.cpp)
add_executable(ex7 examples/ex7/main.cpp)
add_executable(ex8 examples/ex8/main.cpp)
add_executable(ex9 examples/ex9/main.cpp)
add_executable(ex10 examples/ex10/main.cpp)
add_executable(ex11 examples/ex11/main.cpp)
target_link_libraries(ex1 rltk)
target_link_libraries(ex2 rltk)
target_link_libraries(ex3 rltk)
target_link_libraries(ex4 rltk)
target_link_libraries(ex5 rltk)
target_link_libraries(ex6 rltk)
target_link_libraries(ex7 rltk)
target_link_libraries(ex8 rltk)
target_link_libraries(ex9 rltk)
target_link_libraries(ex10 rltk)
target_link_libraries(ex11 rltk)
",3.1,3.1
14160,kinetiknz,cubeb,False,False,False,False,False,55,C++,2020-05-07 22:13:35+00:00,2011-07-08 04:20:48+00:00,218,1341,"# TODO
# - backend selection via command line, rather than simply detecting headers.

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(cubeb
  VERSION 0.0.0)

option(BUILD_SHARED_LIBS ""Build shared libraries"" OFF)
option(BUILD_TESTS ""Build tests"" ON)
option(BUILD_RUST_LIBS ""Build rust backends"" OFF)
option(BUILD_TOOLS ""Build tools"" ON)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING
      ""Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif()

if(POLICY CMP0063)
  cmake_policy(SET CMP0063 NEW)
endif()
set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT COMMAND add_sanitizers)
  list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/sanitizers-cmake/cmake"")
  find_package(Sanitizers)
  if(NOT COMMAND add_sanitizers)
    message(FATAL_ERROR ""Could not find sanitizers-cmake: run\n\tgit submodule update --init --recursive\nin base git checkout"")
  endif()
endif()

if(BUILD_TESTS)
  if(NOT TARGET gtest_main)
    if(NOT EXISTS ""${PROJECT_SOURCE_DIR}/googletest/CMakeLists.txt"")
      message(FATAL_ERROR ""Could not find googletest: run\n\tgit submodule update --init --recursive\nin base git checkout"")
    endif()
    add_definitions(-DGTEST_HAS_TR1_TUPLE=0)
    set(gtest_force_shared_crt ON CACHE BOOL """")
    add_subdirectory(googletest)
  endif()
endif()

if (BUILD_RUST_LIBS)
  if(EXISTS ""${PROJECT_SOURCE_DIR}/src/cubeb-pulse-rs"")
    set(USE_PULSE_RUST 1)
  endif()
  if(EXISTS ""${PROJECT_SOURCE_DIR}/src/cubeb-coreaudio-rs"")
    set(USE_AUDIOUNIT_RUST 1)
  endif()
endif()

# On OS/2, visibility attribute is not supported.
if(NOT OS2)
  set(CMAKE_C_VISIBILITY_PRESET hidden)
  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
endif()

set(CMAKE_CXX_WARNING_LEVEL 4)
if(NOT MSVC)
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wextra -Wno-unused-parameter"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter"")
endif()

add_library(cubeb
  src/cubeb.c
  src/cubeb_mixer.cpp
  src/cubeb_resampler.cpp
  src/cubeb_log.cpp
  src/cubeb_strings.c
  src/cubeb_utils.cpp
   $<TARGET_OBJECTS:speex>)
target_include_directories(cubeb
  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>
)
target_include_directories(cubeb PRIVATE src)
target_compile_definitions(cubeb PRIVATE OUTSIDE_SPEEX)
target_compile_definitions(cubeb PRIVATE FLOATING_POINT)
target_compile_definitions(cubeb PRIVATE EXPORT=)
target_compile_definitions(cubeb PRIVATE RANDOM_PREFIX=speex)

add_sanitizers(cubeb)

include(GenerateExportHeader)
generate_export_header(cubeb EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/exports/cubeb_export.h)
target_include_directories(cubeb
  PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/exports>
)

if(UNIX)
  include(GNUInstallDirs)
else()
  set(CMAKE_INSTALL_LIBDIR ""lib"")
  set(CMAKE_INSTALL_BINDIR ""bin"")
  set(CMAKE_INSTALL_DATADIR ""share"")
  set(CMAKE_INSTALL_DOCDIR ""${CMAKE_INSTALL_DATADIR}/doc"")
  set(CMAKE_INSTALL_INCLUDEDIR ""include"")
endif()

install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(DIRECTORY ${CMAKE_BINARY_DIR}/exports/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake""
  COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
  ""Config.cmake.in""
  ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
  INSTALL_DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}""
)

install(TARGETS cubeb
  EXPORT ""${PROJECT_NAME}Targets""
  DESTINATION ${CMAKE_INSTALL_PREFIX}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(
  FILES ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"" ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake""
  DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}""
)
install(
  EXPORT ""${PROJECT_NAME}Targets""
  NAMESPACE ""${PROJECT_NAME}::""
  DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}""
)

add_library(speex OBJECT
  src/speex/resample.c)
set_target_properties(speex PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
target_compile_definitions(speex PRIVATE OUTSIDE_SPEEX)
target_compile_definitions(speex PRIVATE FLOATING_POINT)
target_compile_definitions(speex PRIVATE EXPORT=)
target_compile_definitions(speex PRIVATE RANDOM_PREFIX=speex)

include(CheckIncludeFiles)

check_include_files(AudioUnit/AudioUnit.h USE_AUDIOUNIT)
if(USE_AUDIOUNIT)
  target_sources(cubeb PRIVATE
    src/cubeb_audiounit.cpp
    src/cubeb_osx_run_loop.cpp)
  target_compile_definitions(cubeb PRIVATE USE_AUDIOUNIT)
  target_link_libraries(cubeb PRIVATE ""-framework AudioUnit"" ""-framework CoreAudio"" ""-framework CoreServices"")
endif()

check_include_files(pulse/pulseaudio.h USE_PULSE)
if(USE_PULSE)
  target_sources(cubeb PRIVATE
    src/cubeb_pulse.c)
  target_compile_definitions(cubeb PRIVATE USE_PULSE)
  target_link_libraries(cubeb PRIVATE pthread ${CMAKE_DL_LIBS})
endif()

check_include_files(alsa/asoundlib.h USE_ALSA)
if(USE_ALSA)
  target_sources(cubeb PRIVATE
    src/cubeb_alsa.c)
  target_compile_definitions(cubeb PRIVATE USE_ALSA)
  target_link_libraries(cubeb PRIVATE pthread ${CMAKE_DL_LIBS})
endif()

check_include_files(jack/jack.h USE_JACK)
if(USE_JACK)
  target_sources(cubeb PRIVATE
    src/cubeb_jack.cpp)
  target_compile_definitions(cubeb PRIVATE USE_JACK)
  target_link_libraries(cubeb PRIVATE pthread ${CMAKE_DL_LIBS})
endif()

check_include_files(audioclient.h USE_WASAPI)
if(USE_WASAPI)
  target_sources(cubeb PRIVATE
    src/cubeb_wasapi.cpp)
  target_compile_definitions(cubeb PRIVATE USE_WASAPI)
  target_link_libraries(cubeb PRIVATE avrt ole32)
endif()

check_include_files(""windows.h;mmsystem.h"" USE_WINMM)
if(USE_WINMM)
  target_sources(cubeb PRIVATE
    src/cubeb_winmm.c)
  target_compile_definitions(cubeb PRIVATE USE_WINMM)
  target_link_libraries(cubeb PRIVATE winmm)
endif()

check_include_files(SLES/OpenSLES.h USE_OPENSL)
if(USE_OPENSL)
  target_sources(cubeb PRIVATE
    src/cubeb_opensl.c
    src/cubeb-jni.cpp)
  target_compile_definitions(cubeb PRIVATE USE_OPENSL)
  target_link_libraries(cubeb PRIVATE OpenSLES)
endif()

check_include_files(android/log.h USE_AUDIOTRACK)
if(USE_AUDIOTRACK)
  target_sources(cubeb PRIVATE
    src/cubeb_audiotrack.c)
  target_compile_definitions(cubeb PRIVATE USE_AUDIOTRACK)
  target_link_libraries(cubeb PRIVATE log)
endif()

check_include_files(sndio.h USE_SNDIO)
if(USE_SNDIO)
  target_sources(cubeb PRIVATE
    src/cubeb_sndio.c)
  target_compile_definitions(cubeb PRIVATE USE_SNDIO)
  target_link_libraries(cubeb PRIVATE pthread ${CMAKE_DL_LIBS})
endif()

check_include_files(sys/audioio.h USE_SUN)
if(USE_SUN)
  target_sources(cubeb PRIVATE
    src/cubeb_sun.c)
  target_compile_definitions(cubeb PRIVATE USE_SUN)
  target_link_libraries(cubeb PRIVATE pthread)
endif()

check_include_files(kai.h USE_KAI)
if(USE_KAI)
  target_sources(cubeb PRIVATE
    src/cubeb_kai.c)
  target_compile_definitions(cubeb PRIVATE USE_KAI)
  target_link_libraries(cubeb PRIVATE kai)
endif()

if(USE_PULSE_RUST)
  include(ExternalProject)
  set_directory_properties(PROPERTIES EP_PREFIX ${CMAKE_BINARY_DIR}/rust)
  ExternalProject_Add(
    cubeb_pulse_rs
    DOWNLOAD_COMMAND """"
    CONFIGURE_COMMAND """"
    BUILD_COMMAND cargo build COMMAND cargo build --release
    BUILD_ALWAYS ON
    BINARY_DIR ""${CMAKE_SOURCE_DIR}/src/cubeb-pulse-rs""
    INSTALL_COMMAND """"
    LOG_BUILD ON)
  add_dependencies(cubeb cubeb_pulse_rs)
  target_compile_definitions(cubeb PRIVATE USE_PULSE_RUST)
  target_link_libraries(cubeb PRIVATE
    debug ""${CMAKE_SOURCE_DIR}/src/cubeb-pulse-rs/target/debug/libcubeb_pulse.a""
    optimized ""${CMAKE_SOURCE_DIR}/src/cubeb-pulse-rs/target/release/libcubeb_pulse.a"" pulse)
endif()

if(USE_AUDIOUNIT_RUST)
  include(ExternalProject)
  set_directory_properties(PROPERTIES EP_PREFIX ${CMAKE_BINARY_DIR}/rust)
  ExternalProject_Add(
    cubeb_coreaudio_rs
    DOWNLOAD_COMMAND """"
    CONFIGURE_COMMAND """"
    BUILD_COMMAND cargo build COMMAND cargo build --release
    BUILD_ALWAYS ON
    BINARY_DIR ""${CMAKE_SOURCE_DIR}/src/cubeb-coreaudio-rs""
    INSTALL_COMMAND """"
    LOG_BUILD ON)
  add_dependencies(cubeb cubeb_coreaudio_rs)
  target_compile_definitions(cubeb PRIVATE USE_AUDIOUNIT_RUST)
  target_link_libraries(cubeb PRIVATE
    debug ""${CMAKE_SOURCE_DIR}/src/cubeb-coreaudio-rs/target/debug/libcubeb_coreaudio.a""
    optimized ""${CMAKE_SOURCE_DIR}/src/cubeb-coreaudio-rs/target/release/libcubeb_coreaudio.a"")
endif()

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile @ONLY)
  add_custom_target(doc ALL
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs
    COMMENT ""Generating API documentation with Doxygen"" VERBATIM)
endif()

if(BUILD_TESTS)
  enable_testing()

  macro(cubeb_add_test NAME)
    add_executable(test_${NAME} test/test_${NAME}.cpp)
    target_include_directories(test_${NAME} PRIVATE ${gtest_SOURCE_DIR}/include)
    target_include_directories(test_${NAME} PRIVATE src)
    target_link_libraries(test_${NAME} PRIVATE cubeb gtest_main)
    add_test(${NAME} test_${NAME})
    add_sanitizers(test_${NAME})
    install(TARGETS test_${NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
  endmacro(cubeb_add_test)

  cubeb_add_test(sanity)
  cubeb_add_test(tone)
  cubeb_add_test(audio)
  cubeb_add_test(record)
  cubeb_add_test(devices)
  cubeb_add_test(callback_ret)

  add_executable(test_resampler test/test_resampler.cpp src/cubeb_resampler.cpp $<TARGET_OBJECTS:speex>)
  target_include_directories(test_resampler PRIVATE ${gtest_SOURCE_DIR}/include)
  target_include_directories(test_resampler PRIVATE src)
  target_compile_definitions(test_resampler PRIVATE OUTSIDE_SPEEX)
  target_compile_definitions(test_resampler PRIVATE FLOATING_POINT)
  target_compile_definitions(test_resampler PRIVATE EXPORT=)
  target_compile_definitions(test_resampler PRIVATE RANDOM_PREFIX=speex)
  target_link_libraries(test_resampler PRIVATE cubeb gtest_main)
  add_test(resampler test_resampler)
  add_sanitizers(test_resampler)
  install(TARGETS test_resampler DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})

  cubeb_add_test(duplex)

  if (USE_WASAPI)
    cubeb_add_test(overload_callback)
    cubeb_add_test(loopback)
  endif()

  cubeb_add_test(latency test_latency)
  cubeb_add_test(ring_array)

  cubeb_add_test(utils)
  cubeb_add_test(ring_buffer)
  cubeb_add_test(device_changed_callback)
endif()

if(BUILD_TOOLS)
  add_executable(cubeb-test tools/cubeb-test.cpp)
  target_include_directories(cubeb-test PRIVATE src)
  target_link_libraries(cubeb-test PRIVATE cubeb)
  add_sanitizers(cubeb-test)
  install(TARGETS cubeb-test DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
endif()
",3.1,3.1
14244,rikyoz,bit7z,False,False,False,False,False,4,C++,2020-05-14 19:27:49+00:00,2014-12-14 17:36:56+00:00,118,437,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(bit7z)

# headers
set(HEADER_FILES
    ${PROJECT_SOURCE_DIR}/include/bit7z.hpp
    ${PROJECT_SOURCE_DIR}/include/bit7zlibrary.hpp
    ${PROJECT_SOURCE_DIR}/include/bitarchivecreator.hpp
    ${PROJECT_SOURCE_DIR}/include/bitarchivehandler.hpp
    ${PROJECT_SOURCE_DIR}/include/bitarchiveinfo.hpp
    ${PROJECT_SOURCE_DIR}/include/bitarchiveitem.hpp
    ${PROJECT_SOURCE_DIR}/include/bitarchiveopener.hpp
    ${PROJECT_SOURCE_DIR}/include/bitcompressionlevel.hpp
    ${PROJECT_SOURCE_DIR}/include/bitcompressionmethod.hpp
    ${PROJECT_SOURCE_DIR}/include/bitcompressor.hpp
    ${PROJECT_SOURCE_DIR}/include/bitexception.hpp
    ${PROJECT_SOURCE_DIR}/include/bitextractor.hpp
    ${PROJECT_SOURCE_DIR}/include/bitformat.hpp
    ${PROJECT_SOURCE_DIR}/include/bitguids.hpp
    ${PROJECT_SOURCE_DIR}/include/bitinputarchive.hpp
    ${PROJECT_SOURCE_DIR}/include/bitmemcompressor.hpp
    ${PROJECT_SOURCE_DIR}/include/bitmemextractor.hpp
    ${PROJECT_SOURCE_DIR}/include/bitpropvariant.hpp
    ${PROJECT_SOURCE_DIR}/include/bitstreamcompressor.hpp
    ${PROJECT_SOURCE_DIR}/include/bitstreamextractor.hpp
    ${PROJECT_SOURCE_DIR}/include/bittypes.hpp
    ${PROJECT_SOURCE_DIR}/include/bufferextractcallback.hpp
    ${PROJECT_SOURCE_DIR}/include/bufferupdatecallback.hpp
    ${PROJECT_SOURCE_DIR}/include/callback.hpp
    ${PROJECT_SOURCE_DIR}/include/cbufoutstream.hpp
    ${PROJECT_SOURCE_DIR}/include/cmultivoloutstream.hpp
    ${PROJECT_SOURCE_DIR}/include/cstdinstream.hpp
    ${PROJECT_SOURCE_DIR}/include/cstdoutstream.hpp
    ${PROJECT_SOURCE_DIR}/include/extractcallback.hpp
    ${PROJECT_SOURCE_DIR}/include/fileextractcallback.hpp
    ${PROJECT_SOURCE_DIR}/include/fileupdatecallback.hpp
    ${PROJECT_SOURCE_DIR}/include/fsindexer.hpp
    ${PROJECT_SOURCE_DIR}/include/fsitem.hpp
    ${PROJECT_SOURCE_DIR}/include/fsutil.hpp
    ${PROJECT_SOURCE_DIR}/include/opencallback.hpp
    ${PROJECT_SOURCE_DIR}/include/streamextractcallback.hpp
    ${PROJECT_SOURCE_DIR}/include/streamupdatecallback.hpp
    ${PROJECT_SOURCE_DIR}/include/updatecallback.hpp
)

# sources
set(SOURCE_FILES
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/C/Alloc.c
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Windows/FileDir.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Windows/FileFind.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Windows/FileIO.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Windows/FileName.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/7zip/Common/FileStreams.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Common/IntToString.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Common/MyString.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/Common/MyVector.cpp
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/7zip/Common/StreamObjects.cpp
    ${PROJECT_SOURCE_DIR}/src/bit7zlibrary.cpp
    ${PROJECT_SOURCE_DIR}/src/bitarchivecreator.cpp
    ${PROJECT_SOURCE_DIR}/src/bitarchivehandler.cpp
    ${PROJECT_SOURCE_DIR}/src/bitarchiveinfo.cpp
    ${PROJECT_SOURCE_DIR}/src/bitarchiveitem.cpp
    ${PROJECT_SOURCE_DIR}/src/bitarchiveopener.cpp
    ${PROJECT_SOURCE_DIR}/src/bitcompressor.cpp
    ${PROJECT_SOURCE_DIR}/src/bitexception.cpp
    ${PROJECT_SOURCE_DIR}/src/bitextractor.cpp
    ${PROJECT_SOURCE_DIR}/src/bitformat.cpp
    ${PROJECT_SOURCE_DIR}/src/bitguids.cpp
    ${PROJECT_SOURCE_DIR}/src/bitinputarchive.cpp
    ${PROJECT_SOURCE_DIR}/src/bitmemcompressor.cpp
    ${PROJECT_SOURCE_DIR}/src/bitmemextractor.cpp
    ${PROJECT_SOURCE_DIR}/src/bitpropvariant.cpp
    ${PROJECT_SOURCE_DIR}/src/bitstreamcompressor.cpp
    ${PROJECT_SOURCE_DIR}/src/bitstreamextractor.cpp
    ${PROJECT_SOURCE_DIR}/src/bufferextractcallback.cpp
    ${PROJECT_SOURCE_DIR}/src/bufferupdatecallback.cpp
    ${PROJECT_SOURCE_DIR}/src/callback.cpp
    ${PROJECT_SOURCE_DIR}/src/cbufoutstream.cpp
    ${PROJECT_SOURCE_DIR}/src/cmultivoloutstream.cpp
    ${PROJECT_SOURCE_DIR}/src/cstdinstream.cpp
    ${PROJECT_SOURCE_DIR}/src/cstdoutstream.cpp
    ${PROJECT_SOURCE_DIR}/src/extractcallback.cpp
    ${PROJECT_SOURCE_DIR}/src/fileextractcallback.cpp
    ${PROJECT_SOURCE_DIR}/src/fileupdatecallback.cpp
    ${PROJECT_SOURCE_DIR}/src/fsindexer.cpp
    ${PROJECT_SOURCE_DIR}/src/fsitem.cpp
    ${PROJECT_SOURCE_DIR}/src/fsutil.cpp
    ${PROJECT_SOURCE_DIR}/src/opencallback.cpp
    ${PROJECT_SOURCE_DIR}/src/streamextractcallback.cpp
    ${PROJECT_SOURCE_DIR}/src/streamupdatecallback.cpp
    ${PROJECT_SOURCE_DIR}/src/updatecallback.cpp
)

# enable only debug/release configurations for generated VS project file
if(CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_CONFIGURATION_TYPES Debug Release)
    set(CMAKE_CONFIGURATION_TYPES ""${CMAKE_CONFIGURATION_TYPES}"" CACHE STRING
        ""Reset the configurations to what we need""
        FORCE)
endif()

# by default, use release build
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ""Release"")
  message(STATUS ""Build type not specified: using Release by default."")
endif()

# debug library file name must end with ""_d"" (e.g. bit7z_d.lib)
set(CMAKE_DEBUG_POSTFIX ""_d"")

# per-architecture options
if (CMAKE_SIZEOF_VOID_P EQUAL 4)
    message(STATUS ""Architecture: x86"")
    set(ARCH_POSTFIX """")
    set(ARCH_DIR ""x86"")
else()
    message(STATUS ""Architecture: x64"")
    set(ARCH_POSTFIX 64)
    set(ARCH_DIR ""x64"")
    add_definitions(-DWIN64)
endif()

# forcing output directory to ${BIT7Z_DIR}/bin/${ARCH_DIR}/ (e.g. ./bin/x64/)
set(OUTPUT_DIR ${PROJECT_SOURCE_DIR}/bin/${ARCH_DIR}/)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR})
foreach( OUTPUT_CONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUT_CONFIG} OUTPUT_CONFIG )
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUT_CONFIG} ${OUTPUT_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUT_CONFIG} ${OUTPUT_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUT_CONFIG} ${OUTPUT_DIR})
endforeach()

# c++11 required
set(CMAKE_CXX_STANDARD 11)

set(TARGET_NAME bit7z${ARCH_POSTFIX})

add_library(${TARGET_NAME} STATIC ${SOURCE_FILES} ${HEADER_FILES})

# macros
target_compile_definitions(${TARGET_NAME} PUBLIC UNICODE _UNICODE _7Z_VOL _WINDOWS)
if(BIT7Z_AUTO_FORMAT)
    target_compile_definitions(${TARGET_NAME} PUBLIC BIT7Z_AUTO_FORMAT)
endif()
if(BIT7Z_REGEX_MATCHING)
    target_compile_definitions(${TARGET_NAME} PUBLIC BIT7Z_REGEX_MATCHING)
endif()

# includes
target_include_directories(${TARGET_NAME} PRIVATE 
    ${PROJECT_SOURCE_DIR}/include/
    ${PROJECT_SOURCE_DIR}/lib/7zSDK/CPP/
)

# compiler options
if(MSVC)
    # setting pdb file name for debug builds (otherwise it is not generated!)
    set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME_DEBUG ${TARGET_NAME}${CMAKE_DEBUG_POSTFIX})
    # release builds should be optimized also for size
    target_compile_options(${TARGET_NAME} PRIVATE ""$<$<CONFIG:RELEASE>:/Os>"")
    # remove default warning level
    string (REGEX REPLACE ""/W[0-4]"" """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}"")
    string (REGEX REPLACE ""/W[0-4]"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    # warning level
    target_compile_options(${TARGET_NAME} PRIVATE /W4 /WX)
    # standard conformance options of MSVC
    target_compile_options(${TARGET_NAME} PRIVATE /Zc:rvalueCast /Zc:inline)
    # standard conformance options for MSVC > 2013 (i.e. >= 2015)
    if(MSVC_VERSION GREATER 1800) 
        target_compile_options(${TARGET_NAME} PRIVATE /Zc:strictStrings /Zc:throwingNew /Zc:referenceBinding)
    endif()
    # static runtime option
    if(STATIC_RUNTIME)
        set(CompilerFlags
            CMAKE_CXX_FLAGS_DEBUG
            CMAKE_CXX_FLAGS_RELEASE
            CMAKE_C_FLAGS_DEBUG
            CMAKE_C_FLAGS_RELEASE)
        foreach(CompilerFlag ${CompilerFlags})
            string(REPLACE ""/MD"" ""/MT"" ${CompilerFlag} ""${${CompilerFlag}}"")
            set(${CompilerFlag} ""${${CompilerFlag}}"" CACHE STRING ""msvc compiler flags"" FORCE)
            message(""MSVC flags: ${CompilerFlag}:${${CompilerFlag}}"")
        endforeach()
    endif()
endif()
",3.1,3.1
14363,KDE,partitionmanager,False,False,False,False,False,24,C++,2020-03-25 05:42:48+00:00,2015-09-18 11:26:42+00:00,28,1430,"# Copyright (C) 2008 by Volker Lanz <vl@fidra.de>
# Copyright (C) 2014-2019 by Andrius Štikonas <andrius@stikonas.eu>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

project(partitionmanager)

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

# Dependencies
set(QT_MIN_VERSION ""5.10.0"")
set(KF5_MIN_VERSION ""5.56"")
set(KPMCORE_MIN_VERSION ""4.1.0"")

set(CMAKE_USE_RELATIVE_PATHS OFF)
set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
set(KDE_INSTALL_USE_QT_SYS_PATHS ON CACHE BOOL ""Install mkspecs files, Plugins and Imports to the Qt 5 install dir"" FORCE)

# Check KPMcore dependency when bumping
set(VERSION_MAJOR ""4"")
set(VERSION_MINOR ""1"")
set(VERSION_RELEASE ""0"")
set(VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_RELEASE})
add_definitions(-D'VERSION=""${VERSION}""') #""

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(ECM ${KF5_MIN_VERSION} REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_MODULE_PATH})
include(ECMInstallIcons)

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(FeatureSummary)
include(GenerateExportHeader)

find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
  Core
  Gui
  Widgets
)

# Load the frameworks we need
find_package(KF5 ${KF5_MIN_VERSION} REQUIRED
  COMPONENTS
    Config
    ConfigWidgets
    CoreAddons
    Crash
    DBusAddons
    I18n
    IconThemes
    JobWidgets
    KIO
    WidgetsAddons
    XmlGui
  OPTIONAL_COMPONENTS
    DocTools
)

# use sane compile flags
add_definitions(
  -DQT_USE_QSTRINGBUILDER
  -DQT_NO_CAST_TO_ASCII
  -DQT_NO_CAST_FROM_ASCII
  -DQT_STRICT_ITERATORS
  -DQT_NO_URL_CAST_FROM_STRING
  -DQT_NO_CAST_FROM_BYTEARRAY
  -DQT_NO_CAST_TO_BYTEARRAY
  -DQT_NO_SIGNALS_SLOTS_KEYWORDS
  -DQT_USE_FAST_OPERATOR_PLUS
  -DQT_DISABLE_DEPRECATED_BEFORE=0x050900
)

find_package(KPMcore ${KPMCORE_MIN_VERSION} REQUIRED)

include_directories(${Qt5Core_INCLUDE_DIRS} ${UUID_INCLUDE_DIRS} ${BLKID_INCLUDE_DIRS} ${KPMCORE_INCLUDE_DIR} lib/ src/)

add_subdirectory(src)
add_subdirectory(icons)
if (KF5DocTools_FOUND)
    add_subdirectory(doc)
endif()

ki18n_install(po)

message(STATUS ""KDE Partition Manager ${VERSION} will be built for install into ${CMAKE_INSTALL_PREFIX}"")

feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1,3.1
14629,DLR-SC,tixi,False,False,False,False,False,16,C++,2019-11-29 07:01:18+00:00,2015-03-16 13:17:12+00:00,22,445,"cmake_minimum_required (VERSION 3.1)

# Set a default build type if none was specified
if(NOT DEFINED CMAKE_BUILD_TYPE)
    message(STATUS ""Setting build type to 'Release' as none was specified."")
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
      ""MinSizeRel"" ""RelWithDebInfo"")
endif()

project (TIXI)

# convert path to absolute (required for some scripts)
if (NOT IS_ABSOLUTE ${CMAKE_INSTALL_PREFIX})
    set (CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_PREFIX})
endif()

set(TIXI_VERSION_MAJOR 3)
set(TIXI_VERSION_MINOR 0)
set(TIXI_VERSION_PATCH 3)
set(TIXI_VERSION ""${TIXI_VERSION_MAJOR}.${TIXI_VERSION_MINOR}.${TIXI_VERSION_PATCH}"")

# set name of the tixi library
set(TIXI_LIB_NAME tixi${TIXI_VERSION_MAJOR})

set(ADD_INCLUDE_PATH """" CACHE PATH ""Additional include path for package search"")
set(ADD_LIB_PATH """" CACHE PATH     ""Additional library path for package search"")

set(CMAKE_INCLUDE_PATH ""${CMAKE_INCLUDE_PATH}"" ${ADD_INCLUDE_PATH})
set(CMAKE_LIBRARY_PATH ""${CMAKE_LIBRARY_PATH}"" ${ADD_LIB_PATH})

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR ""lib"")
endif(NOT DEFINED CMAKE_INSTALL_LIBDIR)


if(NOT DEFINED CMAKE_INSTALL_BINDIR)
    set(CMAKE_INSTALL_BINDIR ""bin"")
endif(NOT DEFINED CMAKE_INSTALL_BINDIR)

if(NOT DEFINED CMAKE_INSTALL_INCLUDE_DIR)
    set(CMAKE_INSTALL_INCLUDE_DIR ""include/${TIXI_LIB_NAME}"")
endif(NOT DEFINED CMAKE_INSTALL_INCLUDE_DIR)

if(NOT DEFINED CONFIG_INSTALL_DIR)
    set(CONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/${TIXI_LIB_NAME}"")
endif(NOT DEFINED CONFIG_INSTALL_DIR)

if (NOT DEFINED CMAKE_DEBUG_POSTFIX)
    set(CMAKE_DEBUG_POSTFIX ""-d"")
endif (NOT DEFINED CMAKE_DEBUG_POSTFIX)

find_package(PythonInterp)

set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
# create library output path
file(MAKE_DIRECTORY ${LIBRARY_OUTPUT_PATH})

set(CMAKE_MACOSX_RPATH 1)

# code coverage analysis
IF (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
        OPTION(TIXI_ENABLE_COVERAGE ""Enable GCov coverage analysis (defines a 'coverage' target and enforces static build of tixi)"" OFF)
        IF(TIXI_ENABLE_COVERAGE)
                MESSAGE(STATUS ""Coverage enabled"")
                INCLUDE(CodeCoverage)
                SETUP_TARGET_FOR_COVERAGE(coverage ${PROJECT_NAME}-unittests coverageReport ""--gtest_output=xml"")
                MESSAGE(STATUS ""Enabeling memcheck"")
                INCLUDE(Valgrind)
                SETUP_TARGET_FOR_VALGRIND(memcheck ${PROJECT_NAME}-unittests valgrind)
        ELSE()
                MESSAGE(STATUS ""Coverage disabled"")
        ENDIF()
ENDIF()

# visual leak detector, useful for debugging under windows
if(WIN32)
    if(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
        OPTION(TIXI_USE_VLD ""Enable Visual Leak Detector."" OFF)
        if(TIXI_USE_VLD)
            find_package( VLD REQUIRED )
        endif(TIXI_USE_VLD)
    endif(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
endif(WIN32)

#create tixi library
add_subdirectory(src)

#create bindings to different languages (fortran, java ...)
add_subdirectory(bindings)


#create gtests, override gtest standard setting
option(TIXI_BUILD_TESTS ""Build TIXI Testsuite"" OFF)
if(TIXI_BUILD_TESTS)
    enable_testing() 
    option(gtest_force_shared_crt """" ON)
    mark_as_advanced(gtest_force_shared_crt gtest_build_tests gtest_build_samples gtest_disable_pthreads)
    add_subdirectory (""thirdparty/googletest"" EXCLUDE_FROM_ALL)
    add_subdirectory(tests)
endif(TIXI_BUILD_TESTS)

#demos
add_subdirectory(examples/Demo)
add_subdirectory(examples/fortran77)

# create the doc
include(createDoc)

set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""Martin Siggel"") #required for debian/ubuntu
set(CPACK_PACKAGE_VENDOR ""www.dlr.de/sc"")
set(CPACK_PACKAGE_VERSION ${TIXI_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR ${TIXI_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${TIXI_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${TIXI_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/LICENSE)
set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY ""TIXI"") 

# set path variable for installer
set(CPACK_NSIS_MODIFY_PATH ON)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(CPACK_NSIS_INSTALL_ROOT ""$PROGRAMFILES64"")
    set(CPACK_CUSTOM_INITIAL_DEFINITIONS ""!define CPACK_REQUIRIRE_64BIT"")
else()
    set(CPACK_NSIS_INSTALL_ROOT ""$PROGRAMFILES"")
endif()

include(CPack)
cpack_add_component(Runtime DISPLAY_NAME ""3rd Party Libraries"")
cpack_add_component(headers DISPLAY_NAME ""Headers"")
cpack_add_component(interfaces DISPLAY_NAME ""Interfaces/Bindings"")
cpack_add_component(docu DISPLAY_NAME ""Documentation"")
",3.1,3.1
14682,offa,danek,False,False,False,False,False,3,C++,2020-04-22 18:44:47+00:00,2017-04-25 16:29:57+00:00,2,699,"cmake_minimum_required(VERSION 3.10)

project(danek VERSION 0.0.6)
message(STATUS ""~~~ ${PROJECT_NAME} ${PROJECT_VERSION} ~~~"")

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")
include(Options)
include(GNUInstallDirs)
include(Compiler)
include(ClangFormat)

if( COVERAGE )
    include(Coverage)
endif()

if( ENABLE_CPPCHECK )
    include(CppCheck)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_compile_options(-Wall
                    -Wextra
                    -pedantic
                    -Werror
                    -Wshadow
                    -Wold-style-cast
                    )
add_compile_options_if_supported(-Wduplicated-cond
                                -Wduplicated-branches
                                -Wlogical-op
                                -Wnull-dereference
                                -Wuseless-cast
                                )

include(Templates)

include_directories(""include"")
add_subdirectory(src)


if( UNIT_TESTS )
    enable_testing()
    add_subdirectory(test)
endif()

if( BUILD_SCHEMA_TESTS )
    add_subdirectory(tests/schema-types)
endif()

if( BUILD_DEMOS )
    add_subdirectory(demos)
endif()
",3.10,3.1
14711,andy-thomason,Vookoo,False,False,False,False,False,6,C++,2020-04-14 16:37:37+00:00,2016-02-23 11:00:22+00:00,228,329,"cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)
cmake_policy(VERSION 3.1.3)

project(Vookoo)

add_subdirectory(external/glfw)
add_subdirectory(examples)",3.1.3,3.1
14740,lxde,lxqt-config,False,False,False,False,False,126,C++,2020-05-17 16:07:55+00:00,2013-08-06 10:46:10+00:00,38,1589,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-config)

set(LXQT_CONFIG_PROJECT ""${PROJECT_NAME}"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(WITH_APPEARANCE ""Build the 'lxqt-config-appearance'"" ON)
option(WITH_BRIGHTNESS ""Build the 'lxqt-config-brightness'"" ON)
option(WITH_FILE_ASSOCIATIONS ""Build the 'lxqt-config-file-associations'"" ON)
option(WITH_INPUT ""Build the 'lxqt-config-input'"" ON)
option(WITH_LOCALE ""Build the 'lxqt-config-locale'"" ON)
option(WITH_MONITOR ""Build the 'lxqt-config-monitor'"" ON)
option(WITH_TOUCHPAD ""Build touchpad settings"" ON)

include(GNUInstallDirs)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

set(KF5_MINIMUM_VERSION ""5.36.0"")
set(KF5SCREEN_MINIMUM_VERSION ""5.2.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Xml ${QT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Patch Version
set(LXQT_CONFIG_PATCH_VERSION 0)

set(LXQT_CONFIG_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_CONFIG_PATCH_VERSION})
add_definitions(
    ""-DLXQT_CONFIG_VERSION=\""${LXQT_CONFIG_VERSION}\""""
)

include(LXQtTranslate)

add_subdirectory(src)
if (WITH_INPUT OR WITH_APPEARANCE)
    add_subdirectory(liblxqt-config-cursor)
endif()
if (WITH_INPUT)
    add_subdirectory(lxqt-config-input)
endif()
if (WITH_FILE_ASSOCIATIONS)
    add_subdirectory(lxqt-config-file-associations)
endif()
if (WITH_APPEARANCE)
    add_subdirectory(lxqt-config-appearance)
endif()
if (WITH_MONITOR)
    add_subdirectory(lxqt-config-monitor)
endif()
if (WITH_BRIGHTNESS)
    add_subdirectory(lxqt-config-brightness)
endif()
if (WITH_LOCALE)
    add_subdirectory(lxqt-config-locale)
endif()

install(FILES
    man/lxqt-config.1
    DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
    COMPONENT Runtime
)
",3.1.0,3.1
14786,BelledonneCommunications,linphone-cmake-builder,False,False,False,False,False,15,CMake,2020-05-11 12:30:36+00:00,2015-01-15 09:28:39+00:00,12,1698,"############################################################################
# CMakeLists.txt
# Copyright (C) 2014-2018  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)

include(FeatureSummary)


set(LINPHONE_BUILDER_CONFIG_FILE ""configs/config-desktop.cmake"" CACHE STRING ""Path to the linphone builder configuration file."")
set(LINPHONE_BUILDER_TOP_DIR ""${PROJECT_SOURCE_DIR}"" CACHE PATH ""Top directory of the source tree."")
set(LINPHONE_BUILDER_WORK_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/WORK"" CACHE PATH ""Working directory for the build."")
set(LINPHONE_BUILDER_TARGET ""linphone"" CACHE STRING ""Target to build."")
set(LINPHONE_BUILDER_PREBUILT_URL """" CACHE STRING ""URL to download some prebuilt dependencies."")
option(LINPHONE_BUILDER_LATEST ""Build latest versions (from git)."" NO)
option(LINPHONE_BUILDER_CHECK_LASTEST ""Check that the git revisions are the latest ones."" NO)
set(LINPHONE_BUILDER_EXTERNAL_SOURCE_PATH """" CACHE PATH ""External path to source code that is available."")
set(LINPHONE_BUILDER_ALTERNATE_EXTERNAL_SOURCE_PATH """" CACHE PATH ""Alternate external path to source code that is available."")
set(LINPHONE_BUILDER_DUMMY_LIBRARIES """" CACHE STRING ""Dummy libraries to be generated."")
option(LINPHONE_BUILDER_USE_SYSTEM_DEPENDENCIES ""Use system dependencies."" NO)
option(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS ""Group external source path builders in a single external project."" NO)
set(LINPHONE_BUILDER_EXTERNAL_BUILDERS_PATH """" CACHE PATH ""Path to external builders."")
set(LINPHONE_BUILDER_SIGNING_IDENTITY """" CACHE STRING ""Signing identity used for code signing on Mac OS X"")
option(LINPHONE_BUILDER_ENABLE_RPM_PACKAGING ""Enable RPM packaging."" NO)


# Include macros definition to be used by builders
include(cmake/CMakeLists.txt)


if(LINPHONE_BUILDER_CHECK_LATEST)

	include(builders/CMakeLists.txt)

else()

	# Include toolchain definition
	if(CMAKE_TOOLCHAIN_FILE)
		get_filename_component(CMAKE_TOOLCHAIN_FILE ${CMAKE_TOOLCHAIN_FILE} ABSOLUTE)
		message(STATUS ""Using toolchain file '${CMAKE_TOOLCHAIN_FILE}'"")
	endif()


	# Include project configuration according to the toolchain
	get_filename_component(LINPHONE_BUILDER_CONFIG_FILE ${LINPHONE_BUILDER_CONFIG_FILE} ABSOLUTE)
	message(STATUS ""Using configuration file '${LINPHONE_BUILDER_CONFIG_FILE}'"")
	include(${LINPHONE_BUILDER_CONFIG_FILE})


	# Apply build flags
	linphone_builder_apply_flags()


	# Get build tools and flags for autotools projects (except for Windows Phone and Windows Store where we cannot build with MinGW)
	if(NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsPhone"" AND NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
		linphone_builder_get_autotools_configuration()
	endif()

	# Add external projects
	linphone_builder_add_projects()
	linphone_builder_add_dummy_libraries_generation()
	linphone_builder_add_package_source_check_project()


	if(LINPHONE_BUILDER_ADDITIONAL_CONFIG_STEPS)
		include(${LINPHONE_BUILDER_ADDITIONAL_CONFIG_STEPS})
	endif()

	# Give a feature summary
	feature_summary(WHAT ENABLED_FEATURES DESCRIPTION ""Enabled features:"")
	feature_summary(WHAT DISABLED_FEATURES DESCRIPTION ""Disabled features:"")

endif()
",3.1,3.1
14866,KDE,libqgit2,False,False,False,False,False,11,C++,2020-03-02 14:07:59+00:00,2015-09-18 13:26:57+00:00,27,397,"#############################################################################
# This file is part of the libqgit2 library
# Copyright (C) 2011 Laszlo Papp
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# CMake build script for the libqgit2 project
#
# Building (out of source build):
# > mkdir build && cd build
# > cmake .. [-DSETTINGS=VALUE]
# > cmake --build .
#
# Testing:
# > ctest -V
#
# Install:
# > cmake --build . --target install

cmake_minimum_required(VERSION 3.1)
project(libqgit2)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}"")

set(EXECUTABLE_OUTPUT_PATH  ${CMAKE_BINARY_DIR}/bin)
set(RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
if(WIN32) # Dll's into bin
    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
endif()

find_package(Qt5 REQUIRED Core Network)

file(STRINGS ""qgit2.h"" QGIT2_HEADER REGEX ""^#define LIBQGIT2_VERSION \""[^\""]*\""$"")
string(REGEX REPLACE ""^.*LIBQGIT2_VERSION \""([0-9]+).*$"" ""\\1"" LIBQGIT2_VERSION_MAJOR ""${QGIT2_HEADER}"")
string(REGEX REPLACE ""^.*LIBQGIT2_VERSION \""[0-9]+\\.([0-9]+).*$"" ""\\1"" LIBQGIT2_VERSION_MINOR  ""${QGIT2_HEADER}"")
string(REGEX REPLACE ""^.*LIBQGIT2_VERSION \""[0-9]+\\.[0-9]+\\.([0-9]+).*$"" ""\\1"" LIBQGIT2_VERSION_REV ""${QGIT2_HEADER}"")
set(LIBQGIT2_VERSION_STRING ""${LIBQGIT2_VERSION_MAJOR}.${LIBQGIT2_VERSION_MINOR}.${LIBQGIT2_VERSION_REV}"")

file(STRINGS ""qgit2.h"" QGIT2_HEADER_SOVERSION REGEX ""^#define LIBQGIT2_SOVERSION [0-9]+$"")
string(REGEX REPLACE ""^.*LIBQGIT2_SOVERSION ([0-9]+)$"" ""\\1"" LIBQGIT2_SOVERSION ""${QGIT2_HEADER_SOVERSION}"")

# Installation paths
set(INSTALL_BIN bin CACHE PATH ""Where to install binaries to."")
set(INSTALL_LIB lib CACHE PATH ""Where to install libraries to."")
set(INSTALL_INC include CACHE PATH ""Where to install headers to."")

# Build options
option(BUILD_TESTS ""Build Tests"" ON)

# Build Release by default
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif()

set(LIBGIT2_SRC_DIR """" CACHE PATH ""Build libgit2 source from this directory."")
option(LIBGIT2_TESTS ""Build libgit2 tests"" OFF)

if(NOT LIBGIT2_SRC_DIR STREQUAL """")
    message(STATUS ""Using libgit2 source from ${LIBGIT2_SRC_DIR}"")
    if(NOT LIBGIT2_TESTS)
        set(BUILD_CLAR OFF CACHE STRING ""libgit2 tests"" FORCE)
    endif()
    if(MSVC)
        set(STDCALL    OFF CACHE STRING ""no stdcall"" FORCE)
        set(STATIC_CRT OFF CACHE STRING ""shared runtime"" FORCE)
        # QSharedPointer on opaque libgit structures
        set(CMAKE_CXX_FLAGS_DEBUG   ""${CMAKE_CXX_FLAGS_DEBUG}   /wd4150"")
        set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /wd4150"")
    endif()
    add_subdirectory(${LIBGIT2_SRC_DIR} libgit2)
    set(LIBGIT2_INCLUDE_DIR ${LIBGIT2_SRC_DIR}/include)
    set(LIBGIT2_LIBRARIES git2)
    set(LIBGIT2_FOUND 1)
else()
    find_package(Libgit2 REQUIRED)
endif()

if(NOT LIBGIT2_FOUND)
    message(FATAL_ERROR ""No libgit2 found!
Install the libgit2 development files to your system.
Alternatively define LIBGIT2_SRC_DIR to point to a libgit2 source directory."")
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src ${LIBGIT2_INCLUDE_DIR})

# Collect files
file(GLOB_RECURSE SRC src/*.cpp)
file(GLOB QGIT2_HEADERS src/qgit*.h src/libqgit2_config.h)
file(GLOB_RECURSE QGIT2_PRIVATE_HEADERS src/*.h)
list(REMOVE_ITEM QGIT2_PRIVATE_HEADERS ${QGIT2_HEADERS})

message(STATUS)
message(STATUS ""========== LIBQGIT2 Build Information =========="")
message(STATUS ""Build Version: ${LIBQGIT2_VERSION_STRING}"")
message(STATUS ""Install Prefix: ${CMAKE_INSTALL_PREFIX}"")
message(STATUS)
message(STATUS ""To change any of these options, override them using -D{OPTION_NAME} on the commandline."")
message(STATUS ""To build and install LIBQGIT2, run \""make\"" and \""make install\"""")
message(STATUS)

# Compile and link libqgit2
add_definitions(-DMAKE_LIBQGIT2_LIB)
add_library(qgit2 ${SRC} ${QGIT2_HEADERS} ${QGIT2_PRIVATE_HEADERS})
target_link_libraries(qgit2 ${LIBGIT2_LIBRARIES} Qt5::Core Qt5::Network)
set_target_properties(qgit2 PROPERTIES VERSION ${LIBQGIT2_VERSION_STRING})
set_target_properties(qgit2 PROPERTIES SOVERSION ${LIBQGIT2_SOVERSION})
set_target_properties(qgit2 PROPERTIES AUTOMOC ON)

# Install
install(TARGETS qgit2
    RUNTIME DESTINATION ${INSTALL_BIN}
    LIBRARY DESTINATION ${INSTALL_LIB}
    ARCHIVE DESTINATION ${INSTALL_LIB}
)

install(FILES ${QGIT2_HEADERS} DESTINATION ${INSTALL_INC}/qgit2 COMPONENT Devel)
install(FILES qgit2.h DESTINATION ${INSTALL_INC} COMPONENT Devel)

#Packaging options
set(CPACK_GENERATOR ""RPM;TGZ"")
set(CPACK_PACKAGE_NAME ""LIBQGIT2"")
set(CPACK_PACKAGE_FILE_NAME ""LIBQGIT2-${LIBQGIT2_VERSION_STRING}"")
set(CPACK_PACKAGE_VERSION ""${LIBQGIT2_VERSION_MAJOR}.${LIBQGIT2_VERSION_MINOR}.${LIBQGIT2_VERSION_REV}"")
set(CPACK_PACKAGE_CONTACT ""Laszlo Papp <djszapi@archlinux.us>"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""libgit2 bindings for Qt"")
include(InstallRequiredSystemLibraries)
include(CPack)

if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    add_custom_target(doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM)
endif(DOXYGEN_FOUND)
",3.1,3.1
14936,lreis2415,AutoFuzSlpPos,False,False,False,False,False,10,C++,2019-07-22 14:08:38+00:00,2015-05-23 08:46:59+00:00,2,428,"# ----------------------------------------------------------------------------
#  Root CMake file for AutoFuzSlpPos.
#
#     Please from the off-tree build directory, invoke:
#       $ cmake <path/to/AutoFuzSlpPos>
#
#       Optional cmake options:
#         -DINSTALL_PREFIX=<path/to/install>
#         -DLLVM_ROOT_DIR Specific the root directory of brew installed LLVM, e.g., /usr/local/opt/llvm
#
#  Routine testing platforms and compilers include:
#     1. Windows 10 with Visual Studio 2010/2015, mongo-c-driver-1.5.5, GDAL-1.11.4/2.4.1
#     2. Windows 10 with msys2/mingw64 (GCC-8.2.0), mongo-c-driver-1.6.1, GDAL-2.3.2
#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0
#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)
#     5. macOS 10.14.5 with Clang-10.0 with Xcode, mongo-c-driver-1.14.0, GDAL-2.4.2 (brew installed)
#     6. Windows 10 with Visual Studio 2013+Intel C++ Compiler 17.0, mongo-c-driver-1.5.5, GDAL-1.11.4
#
#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)
#  Latest updated: Jul. 20, 2019
#  Copyright (C) 2015-2019 Lreis, IGSNRR, CAS
# ----------------------------------------------------------------------------
### Disable in-source builds to prevent source tree corruption.
IF("" ${CMAKE_SOURCE_DIR}"" STREQUAL "" ${CMAKE_BINARY_DIR}"")
  MESSAGE(FATAL_ERROR ""
FATAL: In-source builds are not allowed.
       You should create a separate directory for build files.""
)
ENDIF()
CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)

# Set initial project name with coding languages
PROJECT(AutoFuzSlpPos CXX C)

### Set default or specified installation directory.
IF (INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX} CACHE PATH ""Set specified install path"" FORCE)
ELSE()
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/bin CACHE PATH ""Set default install path"" FORCE)
ENDIF ()
SET(INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.
IF(CMAKE_GENERATOR MATCHES ""Makefiles|Ninja"" AND ""${CMAKE_BUILD_TYPE}"" STREQUAL """")
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

### Allow project folders in MSVC and Xcode.
IF(MSVC OR XCODE)
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
ENDIF()

### Break in case of popular CMake configuration mistakes.
IF(NOT CMAKE_SIZEOF_VOID_P GREATER 0)
  MESSAGE(FATAL_ERROR ""CMake fails to determine the bitness of the target platform.
  Please check your CMake and compiler installation.""
)
ENDIF()

SET(TAUDEM_ALL ${CMAKE_CURRENT_SOURCE_DIR}/autofuzslppos/taudem_ext)
ADD_SUBDIRECTORY(${TAUDEM_ALL})
",3.1,3.1
15035,rug-compling,alpinocorpus,False,False,False,False,False,7,C++,2020-05-04 12:24:00+00:00,2010-12-01 17:43:49+00:00,5,671,"cmake_minimum_required(VERSION 3.1)
project(AlpinoCorpus)

enable_testing()

set (ALPINOCORPUS_VERSION ""2.6.0"")

set (CMAKE_CXX_STANDARD 11)

if (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set (CMAKE_BUILD_TYPE Release)
endif (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread -pedantic -Wno-long-long"")

LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
IF(""${isSystemDir}"" STREQUAL ""-1"")
  SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
ENDIF(""${isSystemDir}"" STREQUAL ""-1"")

include(CheckFunctionExists)

if(APPLE)
  set (CMAKE_OSX_ARCHITECTURES ""x86_64"")
endif(APPLE)

list(APPEND CMAKE_MODULE_PATH ""${AlpinoCorpus_SOURCE_DIR}/cmake"")

include_directories(
  ${AlpinoCorpus_SOURCE_DIR}/include
  ${AlpinoCorpus_BINARY_DIR}/include
)

set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)

if(BOOST_ROOT)
  set(Boost_NO_SYSTEM_PATHS ON)
endif()

include(GNUInstallDirs REQUIRED)

find_package(Boost 1.50 COMPONENTS system filesystem REQUIRED)

if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
endif()

find_package(ZLIB REQUIRED)
if(ZLIB_FOUND)
  include_directories(${ZLIB_INCLUDE_DIRS})
endif()

option(USE_DBXML
  ""Enable the Berkeley DB XML backend"" ON)

if(USE_DBXML)
  find_package(XercesC REQUIRED)
  if (XERCESC_FOUND)
    include_directories(${XERCESC_INCLUDE_DIR})
  endif()

  find_package(XQilla REQUIRED)
  if (XQILLA_FOUND)
    include_directories(${XQILLA_INCLUDE_DIR})
  endif()

  find_package(DBXML REQUIRED)
  if (DBXML_FOUND)
    include_directories(${DBXML_INCLUDE_DIR})
  endif()
endif()

find_package(Iconv REQUIRED)
if(ICONV_FOUND)
  include_directories(${ICONV_INCLUDE_DIR})
endif()

find_package(LibXml2 REQUIRED)
if(LIBXML2_FOUND)
  include_directories(${LIBXML2_INCLUDE_DIR})
endif()

find_package(LibXslt REQUIRED)
if(LIBXSLT_FOUND)
  include_directories(${LIBXSLT_INCLUDE_DIR})
endif()

find_package(LibExslt REQUIRED)
if(LIBEXSLT_FOUND)
  include_directories(${LIBEXSLT_INCLUDE_DIR})
endif()


configure_file (
  ""${AlpinoCorpus_SOURCE_DIR}/include/config.hh.in""
  ""${AlpinoCorpus_BINARY_DIR}/include/config.hh""
)

configure_file (
  ""${AlpinoCorpus_SOURCE_DIR}/alpinocorpus.pc.in""
  ""${AlpinoCorpus_BINARY_DIR}/alpinocorpus.pc""
  @ONLY
)

set(HEADERS
  include/AlpinoCorpus/CompactCorpusWriter.hh
  include/AlpinoCorpus/CorpusInfo.hh
  include/AlpinoCorpus/CorpusReader.hh
  include/AlpinoCorpus/CorpusReaderFactory.hh
  include/AlpinoCorpus/CorpusWriter.hh
  include/AlpinoCorpus/DirectoryCorpusReader.hh
  include/AlpinoCorpus/DLLDefines.hh
  include/AlpinoCorpus/Error.hh
  include/AlpinoCorpus/IterImpl.hh
  include/AlpinoCorpus/CompactCorpusReader.hh
  include/AlpinoCorpus/LexItem.hh
  include/AlpinoCorpus/capi.h
  include/AlpinoCorpus/macros.hh
  include/AlpinoCorpus/util/Either.hh
  src/CompactCorpusWriterPrivate.hh
  src/DirectoryCorpusReaderPrivate.hh
  src/DzIstream.hh
  src/DzIstreamBuf.hh
  src/DzOstream.hh
  src/DzOstreamBuf.hh
  src/CompactCorpusReaderPrivate.hh
  src/FilterIter.hh
  src/StylesheetIter.hh
  src/XSLTransformer.hh
  src/parseMacros.hh
  src/util/InfInt.h
  src/util/NameCompare.hh
  src/util/base64.hh
  src/util/bufutil.hh
  src/util/parseString.hh
  src/util/split.hh
  src/util/textfile.hh
  src/util/url.hh
)

set(SOURCES
  src/CompactCorpusWriter.cpp
  src/CompactCorpusWriterPrivate.cpp
  src/CorpusInfo.cpp
  src/CorpusReader.cpp
  src/CorpusReaderFactory.cpp
  src/CorpusWriter.cpp
  src/DirectoryCorpusReader.cpp
  src/DirectoryCorpusReaderPrivate.cpp
  src/DzIstream.cpp
  src/DzIstreamBuf.cpp
  src/DzOstream.cpp
  src/DzOstreamBuf.cpp
  src/Error.cpp
  src/FilterIter.cpp
  src/CompactCorpusReader.cpp
  src/CompactCorpusReaderPrivate.cpp
  src/IterImpl.cpp
  src/StylesheetIter.cpp
  src/XSLTransformer.cpp
  src/capi.cpp
  src/macros.cpp
  src/parseMacros.cpp
  src/util/NameCompare.cpp
  src/util/split.cpp
  src/util/textfile.cpp
  src/util/url.cpp
)

if(USE_DBXML)
  list(APPEND HEADERS
    include/AlpinoCorpus/DbCorpusReader.hh
    include/AlpinoCorpus/DbCorpusWriter.hh
    include/AlpinoCorpus/MultiCorpusReader.hh
    include/AlpinoCorpus/RecursiveCorpusReader.hh
    src/DbCorpusReaderPrivate.hh
    src/MultiCorpusReaderPrivate.hh
  )

  list(APPEND SOURCES
    src/DbCorpusReader.cpp
    src/DbCorpusReaderPrivate.cpp
    src/DbCorpusWriter.cpp
    src/MultiCorpusReader.cpp
    src/MultiCorpusReaderPrivate.cpp
    src/RecursiveCorpusReader.cpp
  )
endif()

add_library(alpino_corpus SHARED
	${SOURCES}
	${HEADERS}
)

set_target_properties(alpino_corpus PROPERTIES VERSION ${ALPINOCORPUS_VERSION}
  SOVERSION 2.0)

target_link_libraries(alpino_corpus ${Boost_LIBRARIES})
target_link_libraries(alpino_corpus ${ZLIB_LIBRARIES})
target_link_libraries(alpino_corpus ${XERCESC_LIBRARY})
target_link_libraries(alpino_corpus ${XQILLA_LIBRARY})
if(USE_DBXML)
  target_link_libraries(alpino_corpus ${DBXML_LIBRARY})
endif(USE_DBXML)
target_link_libraries(alpino_corpus ${LIBXML2_LIBRARIES})

target_link_libraries(alpino_corpus ${LIBXSLT_LIBRARIES})
target_link_libraries(alpino_corpus ${LIBEXSLT_LIBRARIES})

install(TARGETS alpino_corpus
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

install(DIRECTORY include/AlpinoCorpus
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING REGEX ""^[^.].*\\.(hh|h)$"")

install(FILES ${AlpinoCorpus_BINARY_DIR}/alpinocorpus.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

file(GLOB MANPAGES ""${AlpinoCorpus_SOURCE_DIR}/man/*.1"")
install(FILES ${MANPAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)

# Unit tests

if(USE_DBXML)
  add_executable(writer_test test/writer.cpp)
  target_link_libraries(writer_test alpino_corpus)
  #add_test(writer writer_test)
endif()

add_executable(readers_available test/readers_available.cpp)
target_link_libraries(readers_available alpino_corpus)

add_subdirectory(util)

add_subdirectory(resources)

add_subdirectory(test)
",3.1,3.1
15063,DGtal-team,DGtal,False,False,False,False,False,28,C++,2020-05-15 20:15:49+00:00,2011-05-06 00:20:52+00:00,196,10765,"# -----------------------------------------------------------------------------
# Project definition
# -----------------------------------------------------------------------------
project (DGtal)
cmake_minimum_required (VERSION 3.1)

# -----------------------------------------------------------------------------
# By default, do not warn when built on machines using only VS Express:
# -----------------------------------------------------------------------------
IF(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)
    SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)
ENDIF()

# -----------------------------------------------------------------------------
# Define variables and cmake parameters, and display some information
# -----------------------------------------------------------------------------
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake"")
SET(DGtal_VERSION_MAJOR 1)
SET(DGtal_VERSION_MINOR 1)
SET(DGtal_VERSION_PATCH beta)
SET(DGTAL_VERSION ""${DGtal_VERSION_MAJOR}.${DGtal_VERSION_MINOR}.${DGtal_VERSION_PATCH}"")
SET(PROJECT_VERSION ""${DGtal_VERSION_MAJOR}.${DGtal_VERSION_MINOR}.${DGtal_VERSION_PATCH}"")
SET(VERSION ${DGtal_VERSION_MAJOR}.${DGtal_VERSION_MINOR}.${DGtal_VERSION_PATCH})
# -----------------------------------------------------------------------------
# Common build options/settings
# -----------------------------------------------------------------------------
INCLUDE(Common)

# -----------------------------------------------------------------------------
# Common build options/settings
# -----------------------------------------------------------------------------
INCLUDE(OSDependentSettings)

# -----------------------------------------------------------------------------
# Check Mandatory Dependencies
# -----------------------------------------------------------------------------
INCLUDE(CheckDGtalDependencies)

# -----------------------------------------------------------------------------
# Check Optional Dependencies
# -----------------------------------------------------------------------------
INCLUDE(CheckDGtalOptionalDependencies)

# -----------------------------------------------------------------------------
# Debug, Cpack and Ctest settings
# -----------------------------------------------------------------------------
INCLUDE(CpackCtest)

# -----------------------------------------------------------------------------
# Code coverage
# -----------------------------------------------------------------------------
INCLUDE(CheckCoverage)

# -----------------------------------------------------------------------------
# Custom command/targets depending on the cmake generator
# -----------------------------------------------------------------------------
INCLUDE(GeneratorSpecific)

#------------------------------------------------------------------------------
# Add subdirectories
#------------------------------------------------------------------------------
add_subdirectory(${PROJECT_SOURCE_DIR}/src)

#------------------------------------------------------------------------------
# Examples
#------------------------------------------------------------------------------
INCLUDE(BuildExamples)

# -----------------------------------------------------------------------------
# Install settings
# -----------------------------------------------------------------------------
INCLUDE(Install)

# -----------------------------------------------------------------------------
# Unzip and install topology Look up Tables.
# -----------------------------------------------------------------------------
INCLUDE(NeighborhoodTablesConfig)
",3.1,3.1
15261,BlueBrain,Fivox,False,False,False,False,False,17,C++,2019-01-16 14:55:16+00:00,2016-01-28 12:56:11+00:00,1,362,"# Copyright (c) BBP/EPFL 2014-2017
#               Stefan.Eilemann@epfl.ch
#
# This file is part of Fivox <https://github.com/BlueBrain/Fivox>
#

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(Fivox VERSION 0.7.1)
set(Fivox_VERSION_ABI 7)

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake
                              ${CMAKE_SOURCE_DIR}/CMake/common)

if(NOT EXISTS ${CMAKE_SOURCE_DIR}/CMake/common/Common.cmake)
  message(FATAL_ERROR ""CMake/common missing, run: git submodule update --init"")
endif()

include(GitExternal)

set(FIVOX_DESCRIPTION ""ITK library to sample events into regular volumes"")
set(FIVOX_MAINTAINER
  ""Blue Brain Project <bbp-open-source@googlegroups.com>"")
set(FIVOX_LICENSE LGPL)
set(FIVOXLFP_DIR ${PROJECT_SOURCE_DIR}/fivox/lfp)
set(FIVOX_DEP_DEPENDS libinsighttoolkit4-dev)

set(COMMON_PROJECT_DOMAIN ch.epfl.bluebrain)
include(Common)

set(FIVOX_DEPENDENT_LIBRARIES CUDA Lunchbox ITK vmmlib)

common_find_package(BBPTestData)
common_find_package(Boost REQUIRED COMPONENTS unit_test_framework
                                              program_options system)
common_find_package(Brion REQUIRED)
common_find_package(CUDA 4.0)
common_find_package(ITK REQUIRED SYSTEM)
common_find_package(Lexis)
common_find_package(Livre)
common_find_package(Monsteer) # for tests using streaming plugin
common_find_package(vmmlib REQUIRED)
common_find_package(ZeroEQ)

if(CUDA_FOUND)
  option(FIVOX_USE_CUDA ""Use CUDA"" ON)
  if(NOT FIVOX_USE_CUDA)
    common_find_package_disable(CUDA)
  endif()
endif()

common_find_package_post()

include(${ITK_USE_FILE})
add_subdirectory(fivox)
add_subdirectory(apps)
add_subdirectory(tests)

include(CPackConfig)
set(DOXYGEN_MAINPAGE_MD README.md)
set(DOXYGEN_EXTRA_INPUT ${PROJECT_SOURCE_DIR}/README.md)
include(DoxygenRule)
",3.1,3.1
15269,christianrauch,msp,False,False,False,False,False,4,C++,2020-03-04 10:57:05+00:00,2016-09-09 01:10:53+00:00,36,284,"cmake_minimum_required(VERSION 3.1)
project(msp
        LANGUAGES CXX
        VERSION 3.3.0
        DESCRIPTION ""Implementation of the MultiWii Serial Protocol (MSP) for MultiWii and Cleanflight flight controller"")

if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  add_compile_options(-Wall -Wextra -Wpedantic -Werror)
elseif(MSVC)
  add_compile_options(/W4 /WX)
endif()

set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/"")

find_package(ASIO REQUIRED)

if(UNIX)
    set(BUILD_SHARED_LIBS ""ON"")
endif()

add_definitions(-DASIO_STANDALONE)
add_definitions(-DASIO_HAS_STD_ADDRESSOF)
add_definitions(-DASIO_HAS_STD_ARRAY)
add_definitions(-DASIO_HAS_CSTDINT)
add_definitions(-DASIO_HAS_STD_SHARED_PTR)
add_definitions(-DASIO_HAS_STD_TYPE_TRAITS)

OPTION(BUILD_EXAMPLES ""Build Library with examples"" ON)
OPTION(BUILD_TESTS ""Build Library with tests"" OFF)

find_package(Threads)

set(MSP_SOURCE_DIR src)
set(MSP_INCLUDE_DIR inc/msp)
include_directories(${MSP_INCLUDE_DIR})


################################################################################
### libraries

# client library
add_library(mspclient ${MSP_SOURCE_DIR}/Client.cpp ${MSP_SOURCE_DIR}/PeriodicTimer.cpp)
target_link_libraries(mspclient ${CMAKE_THREAD_LIBS_INIT} ASIO::ASIO)

# high-level API
add_library(msp_fcu ${MSP_SOURCE_DIR}/FlightController.cpp)
target_link_libraries(msp_fcu mspclient)


################################################################################
### examples / tests

if(BUILD_EXAMPLES)

    # testing publish/subscribe
    add_executable(fcu_test examples/fcu_test.cpp)
    target_link_libraries(fcu_test msp_fcu)

    # test setting motors directly
    add_executable(fcu_motors examples/fcu_motor_test.cpp)
    target_link_libraries(fcu_motors msp_fcu)

    # subscribing with custom type
    add_executable(fcu_custom_type examples/fcu_custom_type.cpp)
    target_link_libraries(fcu_custom_type msp_fcu)

    # client test for asynchronous callbacks
    add_executable(client_async_test examples/client_async_test.cpp)
    target_link_libraries(client_async_test mspclient )

    # client test for blocking read
    add_executable(client_read_test examples/client_read_test.cpp)
    target_link_libraries(client_read_test mspclient )

endif()

################################################################################
### installation

#install(TARGETS msp msp_msg_print msp_fcu mspclient
install(TARGETS msp_fcu mspclient
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)
install(DIRECTORY ${MSP_INCLUDE_DIR} DESTINATION include/ FILES_MATCHING PATTERN ""*.hpp"")

SET(PKG_CONFIG_LIBDIR       ""\${prefix}/lib"" )
SET(PKG_CONFIG_INCLUDEDIR   ""\${prefix}/include/"" )
SET(PKG_CONFIG_LIBS         ""-L\${libdir} -lmsp_fcu -lmspclient"" )
SET(PKG_CONFIG_CFLAGS       ""-I\${includedir}"" )

CONFIGURE_FILE(
  ""${CMAKE_CURRENT_SOURCE_DIR}/pkg-config.pc.cmake""
  ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
)

INSTALL(FILES ""${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc""
        DESTINATION lib/pkgconfig)



###############################################################################
### testing
if(BUILD_TESTS)
    enable_testing()

    # Download and unpack googletest at configure time
    configure_file(CMakeLists.txt.in googletest/CMakeLists.txt)
    execute_process(COMMAND ${CMAKE_COMMAND} -G ""${CMAKE_GENERATOR}"" .
      RESULT_VARIABLE result
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest )
    if(result)
      message(FATAL_ERROR ""CMake step for googletest failed: ${result}"")
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} --build .
      RESULT_VARIABLE result
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest )
    if(result)
      message(FATAL_ERROR ""Build step for googletest failed: ${result}"")
    endif()

    # Prevent overriding the parent project's compiler/linker
    # settings on Windows
    set(gtest_force_shared_crt ON CACHE BOOL """" FORCE)

    # Add googletest directly to our build. This defines
    # the gtest and gtest_main targets.
    add_subdirectory(/usr/src/gtest
                     ${CMAKE_BINARY_DIR}/googletest-build
                     EXCLUDE_FROM_ALL)

    # The gtest/gtest_main targets carry header search path
    # dependencies automatically when using CMake 2.8.11 or
    # later. Otherwise we have to add them here ourselves.
    if (CMAKE_VERSION VERSION_LESS 2.8.11)
      include_directories(""${gtest_SOURCE_DIR}/include"")
    endif()

    add_executable(value_test test/value_test.cpp)
    target_link_libraries(value_test gtest_main)
    add_test(NAME value_test COMMAND value_test)

    add_executable(bytevector_test test/ByteVector_test.cpp)
    target_link_libraries(bytevector_test gtest_main)
    add_test(NAME bytevector_test COMMAND bytevector_test)

endif()
",3.1,3.1
15469,gimesketvirtadieni,slimstreamer,False,False,False,False,False,2,C++,2020-02-16 21:42:14+00:00,2017-10-03 18:55:29+00:00,44,568,"cmake_minimum_required(VERSION 3.10)

# Set policy to highest version, up to 3.13
if(${CMAKE_VERSION} VERSION_LESS 3.13)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
    cmake_policy(VERSION 3.13)
endif()


#################
# Configuration #
#################

set(LOCAL_PROJECT_VENDOR      ""Andrej Kislovskij"")
set(LOCAL_PROJECT_NAME        ""SlimStreamer"")
set(LOCAL_PROJECT_NAMESPACE   ""Slim"")
set(LOCAL_PROJECT_DESCRIPTION ""SlimStreamer is streaming system based on SlimProto protocol"")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING ""CMAKE_BUILD_TYPE may be one of: Release or Debug"" FORCE)
endif()
message(""Build Type is ${CMAKE_BUILD_TYPE}"")

execute_process(
    COMMAND git describe --dirty --always --tags
    OUTPUT_VARIABLE LOCAL_PROJECT_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

project(
    ${LOCAL_PROJECT_NAME}
    DESCRIPTION ${LOCAL_PROJECT_DESCRIPTION}
    LANGUAGES CXX
)

# defining C++ version globally
set(CMAKE_CXX_STANDARD          17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS        OFF)

# placing binaries and libraries according to GNU standards
include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

# adding sanitizers if CMAKE_BUILD_TYPE is Debug and explicitly requested as they are very costly on performance
option(SANITIZERS ""USE_SANITIZERS"" OFF)
if (CMAKE_BUILD_TYPE MATCHES Debug AND USE_SANITIZERS MATCHES ON)
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=leak"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fno-optimize-sibling-calls"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize-address-use-after-scope"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer"")
endif()

add_library(
    SlimStreamerLib OBJECT
    src/slim/alsa/Source.cpp
    src/slim/log/ConsoleSink.cpp
    src/slim/log/SinkFilter.cpp
)

target_include_directories(
    SlimStreamerLib
    PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
)

target_compile_definitions(
    SlimStreamerLib
    PUBLIC VERSION=""${LOCAL_PROJECT_VERSION}""
    PUBLIC SCOPE_GUARD_STANDALONE
)

# TODO: enable support for Clang
#if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
  # using Clang
#elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
  # using GCC
#elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Intel"")
  # using Intel C++
#elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
  # using Visual Studio C++
#endif()

target_compile_options(
    SlimStreamerLib
    PRIVATE
        $<$<CXX_COMPILER_ID:GNU>:
            -Wall
            -Wnon-virtual-dtor
            -Woverloaded-virtual
            -Wduplicated-cond
            -Wduplicated-branches
            -Wlogical-op
            -Wrestrict
            -Wnull-dereference
            -Wdouble-promotion
            -fstrict-aliasing
            -Wformat=2
# TODO: some day...
#            -Werror
#            -pedantic-errors
#            -Wextra
#            -Wconversion
#            -Wsign-conversion
#            -Wshadow
        >
)

add_executable(
    SlimStreamer
    src/SlimStreamer.cpp
)


################
# Dependencies #
################

add_subdirectory(dependencies)

target_link_libraries(
    SlimStreamerLib
    threads
    alsa
    ${CMAKE_THREAD_LIBS_INIT}
    FLAC
    FLAC++
    g3logger
    cxxopts
    type_safe
    conwrap2
    networking
    scope_guard
)

target_link_libraries(
    SlimStreamer
    SlimStreamerLib
)

###########
# Testing #
###########

option(BUILD_TESTS ""Build the tests"" OFF)
if (${BUILD_TESTS})
    include(CTest)
    enable_testing()
    add_subdirectory(test)
endif()
",3.10,3.1
15653,lxde,qtermwidget,False,False,False,False,False,80,C++,2020-05-15 08:19:47+00:00,2012-02-21 14:24:17+00:00,244,466,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(qtermwidget)

include(GNUInstallDirs)
include(GenerateExportHeader)
include(CMakePackageConfigHelpers)
include(CheckFunctionExists)
include(CheckIncludeFile)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(BUILD_EXAMPLE ""Build example application. Default OFF."" OFF)
option(QTERMWIDGET_USE_UTEMPTER ""Uses the libutempter library. Mainly for FreeBSD"" OFF)
option(QTERMWIDGET_BUILD_PYTHON_BINDING ""Build python binding"" OFF)
option(USE_UTF8PROC ""Use libutf8proc for better Unicode support. Default OFF"" OFF)


# just change version for releases
set(QTERMWIDGET_VERSION_MAJOR ""0"")
set(QTERMWIDGET_VERSION_MINOR ""15"")
set(QTERMWIDGET_VERSION_PATCH ""0"")

set(QTERMWIDGET_VERSION ""${QTERMWIDGET_VERSION_MAJOR}.${QTERMWIDGET_VERSION_MINOR}.${QTERMWIDGET_VERSION_PATCH}"")

# additional cmake files
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake"")
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Minimum Versions
set(QT_MINIMUM_VERSION ""5.10.0"")
set(LXQTBT_MINIMUM_VERSION ""0.7.0"")

find_package(Qt5Widgets ""${QT_MINIMUM_VERSION}"" REQUIRED)
find_package(Qt5LinguistTools ""${QT_MINIMUM_VERSION}"" REQUIRED)
find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)

if(USE_UTF8PROC)
    find_package(Utf8Proc REQUIRED)
endif()

include(LXQtPreventInSourceBuilds)
include(LXQtTranslateTs)
include(LXQtCompilerSettings NO_POLICY_SCOPE)
include(LXQtCreatePkgConfigFile)

if(APPLE)
    if(CMAKE_VERSION VERSION_GREATER 3.9)
        cmake_policy(SET CMP0068 NEW)
        set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
    endif()
endif()

set(QTERMWIDGET_LIBRARY_NAME qtermwidget5)


# main library

set(SRCS
    lib/BlockArray.cpp
    lib/ColorScheme.cpp
    lib/Emulation.cpp
    lib/Filter.cpp
    lib/History.cpp
    lib/HistorySearch.cpp
    lib/KeyboardTranslator.cpp
    lib/konsole_wcwidth.cpp
    lib/kprocess.cpp
    lib/kpty.cpp
    lib/kptydevice.cpp
    lib/kptyprocess.cpp
    lib/Pty.cpp
    lib/qtermwidget.cpp
    lib/Screen.cpp
    lib/ScreenWindow.cpp
    lib/SearchBar.cpp
    lib/Session.cpp
    lib/ShellCommand.cpp
    lib/TerminalCharacterDecoder.cpp
    lib/TerminalDisplay.cpp
    lib/tools.cpp
    lib/Vt102Emulation.cpp
)

# Only the Headers that need to be moc'd go here
set(HDRS
    lib/Emulation.h
    lib/Filter.h
    lib/HistorySearch.h
    lib/kprocess.h
    lib/kptydevice.h
    lib/kptyprocess.h
    lib/Pty.h
    lib/qtermwidget.h
    lib/ScreenWindow.h
    lib/SearchBar.h
    lib/Session.h
    lib/TerminalDisplay.h
    lib/Vt102Emulation.h
)

set(UI
    lib/SearchBar.ui
)

# for distribution
set(HDRS_DISTRIB
    lib/qtermwidget.h
    lib/Emulation.h
    lib/Filter.h
)

# dirs
set(KB_LAYOUT_DIR ""${CMAKE_INSTALL_FULL_DATADIR}/${QTERMWIDGET_LIBRARY_NAME}/kb-layouts"")
message(STATUS ""Keyboard layouts will be installed in: ${KB_LAYOUT_DIR}"")

set(COLORSCHEMES_DIR ""${CMAKE_INSTALL_FULL_DATADIR}/${QTERMWIDGET_LIBRARY_NAME}/color-schemes"")
message(STATUS ""Color schemes will be installed in: ${COLORSCHEMES_DIR}"" )

set(TRANSLATIONS_DIR ""${CMAKE_INSTALL_FULL_DATADIR}/${QTERMWIDGET_LIBRARY_NAME}/translations"")
message(STATUS ""Translations will be installed in: ${TRANSLATIONS_DIR}"")

set(QTERMWIDGET_INCLUDE_DIR ""${CMAKE_INSTALL_FULL_INCLUDEDIR}/${QTERMWIDGET_LIBRARY_NAME}"")

CHECK_FUNCTION_EXISTS(updwtmpx HAVE_UPDWTMPX)

qt5_wrap_cpp(MOCS ${HDRS})
qt5_wrap_ui(UI_SRCS ${UI})
set(PKG_CONFIG_REQ ""Qt5Widgets"")

lxqt_translate_ts(QTERMWIDGET_QM
    TRANSLATION_DIR ""lib/translations""
    UPDATE_TRANSLATIONS
        ${UPDATE_TRANSLATIONS}
    SOURCES
        ${SRCS} ${HDRS} ${UI}
    INSTALL_DIR
        ${TRANSLATIONS_DIR}
    COMPONENT
        Runtime
)

add_library(${QTERMWIDGET_LIBRARY_NAME} SHARED ${SRCS} ${MOCS} ${UI_SRCS} ${QTERMWIDGET_QM})
target_link_libraries(${QTERMWIDGET_LIBRARY_NAME} Qt5::Widgets)
set_target_properties( ${QTERMWIDGET_LIBRARY_NAME} PROPERTIES
                       SOVERSION ${QTERMWIDGET_VERSION_MAJOR}
                       VERSION ${QTERMWIDGET_VERSION}
                     )


if(APPLE)
    target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME}
        PRIVATE
            ""HAVE_UTMPX""
            ""UTMPX_COMPAT""
    )
endif()

if(HAVE_UPDWTMPX)
    target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME}
        PRIVATE
            ""HAVE_UPDWTMPX""
    )
endif()

if (QTERMWIDGET_USE_UTEMPTER)
    CHECK_INCLUDE_FILE(utempter.h HAVE_UTEMPTER)
    if (HAVE_UTEMPTER)
        target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME} PRIVATE
                ""HAVE_UTEMPTER""
        )
        target_link_libraries(${QTERMWIDGET_LIBRARY_NAME} ulog)
    endif()
endif()

if (UTF8PROC_FOUND)
    target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME}
        PRIVATE
            ""HAVE_UTF8PROC""
    )
    target_include_directories(${QTERMWIDGET_LIBRARY_NAME}
        INTERFACE
            ${UTF8PROC_INCLUDE_DIRS}
    )
    target_link_libraries(${QTERMWIDGET_LIBRARY_NAME}
        ${UTF8PROC_LIBRARIES}
    )
    string(APPEND PKG_CONFIG_REQ "", libutf8proc"")
endif()

if(APPLE)
    set (CMAKE_SKIP_RPATH 1)
    # this is a must to load the lib correctly
    set_target_properties(${QTERMWIDGET_LIBRARY_NAME} PROPERTIES INSTALL_NAME_DIR ${CMAKE_INSTALL_FULL_LIBDIR})
endif()

target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME}
    PRIVATE
        ""KB_LAYOUT_DIR=\""${KB_LAYOUT_DIR}\""""
        ""COLORSCHEMES_DIR=\""${COLORSCHEMES_DIR}\""""
        ""TRANSLATIONS_DIR=\""${TRANSLATIONS_DIR}\""""
        ""HAVE_POSIX_OPENPT""
        ""HAVE_SYS_TIME_H""
)


generate_export_header(${QTERMWIDGET_LIBRARY_NAME}
    EXPORT_FILE_NAME ""${CMAKE_CURRENT_BINARY_DIR}/lib/qtermwidget_export.h""
    BASE_NAME QTERMWIDGET
)

target_include_directories(${QTERMWIDGET_LIBRARY_NAME}
    PUBLIC
        ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>""
        ""$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/lib>""
    INTERFACE
        ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>""
        ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${QTERMWIDGET_LIBRARY_NAME}>""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${QTERMWIDGET_LIBRARY_NAME}-config-version.cmake""
    VERSION ${QTERMWIDGET_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTERMWIDGET_LIBRARY_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${QTERMWIDGET_LIBRARY_NAME}""
    COMPONENT Devel
)

install(EXPORT
    ""${QTERMWIDGET_LIBRARY_NAME}-targets""
    DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${QTERMWIDGET_LIBRARY_NAME}""
    COMPONENT Devel
)

install(FILES
    ${HDRS_DISTRIB} ""${CMAKE_CURRENT_BINARY_DIR}/lib/qtermwidget_export.h"" ""${CMAKE_CURRENT_BINARY_DIR}/lib/qtermwidget_version.h""
    DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}/${QTERMWIDGET_LIBRARY_NAME}""
    COMPONENT Devel
)
# keyboard layouts
install(DIRECTORY
    lib/kb-layouts/
    DESTINATION ""${KB_LAYOUT_DIR}""
    COMPONENT Runtime
    FILES_MATCHING PATTERN ""*.keytab""
)
# color schemes
install(DIRECTORY
    lib/color-schemes/
    DESTINATION ""${COLORSCHEMES_DIR}""
    COMPONENT Runtime
    FILES_MATCHING PATTERN ""*.*schem*""
)

lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${QTERMWIDGET_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${QTERMWIDGET_LIBRARY_NAME}
    DESCRIPTION ""QTermWidget library for Qt ${QTERMWIDGET_VERSION_MAJOR}.x""
    INCLUDEDIRS ${QTERMWIDGET_LIBRARY_NAME}
    LIBS ${QTERMWIDGET_LIBRARY_NAME}
    REQUIRES ${PKG_CONFIG_REQ}
    VERSION ${QTERMWIDGET_VERSION}
    INSTALL
    COMPONENT Devel
)

configure_file(
    ""${PROJECT_SOURCE_DIR}/cmake/${QTERMWIDGET_LIBRARY_NAME}-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${QTERMWIDGET_LIBRARY_NAME}-config.cmake""
    @ONLY
)

configure_file(
    ""${PROJECT_SOURCE_DIR}/lib/qtermwidget_version.h.in""
    ""${CMAKE_BINARY_DIR}/lib/qtermwidget_version.h""
    @ONLY
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTERMWIDGET_LIBRARY_NAME}-config.cmake""
    DESTINATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${QTERMWIDGET_LIBRARY_NAME}""
    COMPONENT Devel
)

install(TARGETS ${QTERMWIDGET_LIBRARY_NAME}
    DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    EXPORT ""${QTERMWIDGET_LIBRARY_NAME}-targets""
    LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    PUBLIC_HEADER
    COMPONENT Runtime
)

export(TARGETS ${QTERMWIDGET_LIBRARY_NAME}
    FILE ""${CMAKE_BINARY_DIR}/${QTERMWIDGET_LIBRARY_NAME}-targets.cmake""
    EXPORT_LINK_INTERFACE_LIBRARIES
)
# end of main library


# example application
if(BUILD_EXAMPLE)
    set(EXAMPLE_SRC example/main.cpp)
    add_executable(example ${EXAMPLE_SRC})
    target_link_libraries(example ${QTERMWIDGET_LIBRARY_NAME})
endif()
# end of example application

# python binding
if (QTERMWIDGET_BUILD_PYTHON_BINDING)
    add_subdirectory(pyqt)
endif()
# end of python binding


CONFIGURE_FILE(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY
)
ADD_CUSTOM_TARGET(uninstall
    ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
)
",3.1.0,3.1
15756,sensics,OSVR-RenderManager,False,False,False,False,False,27,C,2020-02-14 00:29:23+00:00,2016-01-26 15:06:46+00:00,41,1055,"cmake_minimum_required(VERSION 3.1.0)
project(osvrRenderManager)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(-fext-numeric-literals SUPPORTS_EXT_NUMERIC_LITERALS)
if(SUPPORTS_EXT_NUMERIC_LITERALS)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fext-numeric-literals"")
endif()

#-----------------------------------------------------------------------------
# Local CMake Modules
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(Version)

#-----------------------------------------------------------------------------
# Export libraries along with our DLLs if we want to build shared
# Allow the developer to select if Dynamic or Static libraries are built

include (GenerateExportHeader)

option(BUILD_SHARED_LIBS ""Build Shared Libraries"" ON)
option(INSTALL_EXAMPLES ""Install source code and build system for examples"" ON)

include(osvrStashMapConfig)

#-----------------------------------------------------------------------------
# This looks for an osvrConfig.cmake file - most of the time it can be
# autodetected but you might need to specify osvr_DIR to be something like
# C:/Users/Ryan/Desktop/build/OSVR-Core-vc12 or
# C:/Users/Ryan/Downloads/OSVR-Core-Snapshot-v0.1-406-gaa55515-build54-vs12-32bit
# in the CMake GUI or command line
osvr_stash_common_map_config()
find_package(osvr REQUIRED)
osvr_unstash_common_map_config()

find_package(Eigen3 REQUIRED)
find_package(JsonCpp REQUIRED)

# Check for the NDA submodules
set(HAVE_NVIDIA_NDA_SUBMODULE FALSE)
set(HAVE_AMD_NDA_SUBMODULE FALSE)
set(HAVE_SENSICS_NDA_SUBMODULE FALSE)
if(WIN32)
	set(NVIDIA_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/osvr/RenderKit/NDA/OSVR-RenderManager-NVIDIA"")
	if(EXISTS ""${NVIDIA_SRC_DIR}/RenderManagerNVidiaD3D.cpp"")
		set(HAVE_NVIDIA_NDA_SUBMODULE TRUE)
	endif()

	set(AMD_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/osvr/RenderKit/NDA/OSVR-RenderManager-AMD"")
	if(EXISTS ""${AMD_SRC_DIR}/RenderManagerAMDD3D.cpp"")
		set(HAVE_AMD_NDA_SUBMODULE TRUE)
	endif()

	set(INTEL_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/osvr/RenderKit/NDA/OSVR-RenderManager-Intel"")
	if(EXISTS ""${INTEL_SRC_DIR}/RenderManagerIntelD3D.cpp"")
		set(HAVE_INTEL_NDA_SUBMODULE TRUE)
	endif()

	set(SENSICS_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/osvr/RenderKit/NDA/OSVR-RenderManager-Sensics"")
	if(EXISTS ""${SENSICS_SRC_DIR}/RenderManagerSensicsDS_D3D11.h"")
		set(HAVE_SENSICS_NDA_SUBMODULE TRUE)
	endif()
endif()

# Add one of these libraries for each vendor that we've got a driver
# for and add a No driver that tells that it is unavailable when we
# don't find the driver library.
find_package(nvapi COMPONENTS NDA)
find_package(liquidvr)
find_package(OpenGL)
find_package(OpenGLES2)
find_package(GLEW)
find_package(SDL2)
if(WIN32)
	# Well, redistributables technically, not tools, but close enough.
	find_package(WindowsSDK REQUIRED COMPONENTS tools)
	# Find redistributable version of d3dcompiler_47 which is required for pre-Win8 systems.
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(ARCH_DIR x64)
	else()
		set(ARCH_DIR x86)
	endif()
	find_file(DIRECT3D_COMPILER_REDISTRIBUTABLE d3dcompiler_47.dll
		PATH_SUFFIXES Redist/D3D/${ARCH_DIR}
		PATHS ${WINDOWSSDK_DIRS}
		NO_DEFAULT_PATH)
endif()

# Set the debug postfix default
if(WIN32 AND NOT DEFINED CMAKE_DEBUG_POSTFIX)
	set(CMAKE_DEBUG_POSTFIX ""d"" CACHE STRING ""A string to append to the end of target filenames when built in debug mode."")
endif()

# These configurations have the tools installed.
set(TOOL_CONFIGURATIONS Release RelWithDebInfo MinSizeRel)

# Finally, vendored dependencies
add_subdirectory(vendor)
include_directories(${VRPN_INCLUDE_DIRS})

#-----------------------------------------------------------------------------
# Open (non-NDA) files
set (RenderManager_SOURCES
	osvr/RenderKit/RenderManagerBase.cpp
	osvr/RenderKit/RenderManagerC.cpp
	osvr/RenderKit/RenderKitGraphicsTransforms.cpp
	osvr/RenderKit/osvr_display_configuration.cpp
	osvr/RenderKit/DistortionParameters.cpp
	osvr/RenderKit/CleanPNPIDString.h
	osvr/RenderKit/DirectModeVendors.h
	osvr/RenderKit/VendorIdTools.h
	osvr/RenderKit/osvr_display_config_built_in_osvr_hdks.h
	osvr/RenderKit/DistortionCorrectTextureCoordinate.h
	osvr/RenderKit/DistortionParameters.h
	osvr/RenderKit/UnstructuredMeshInterpolator.cpp
	osvr/RenderKit/UnstructuredMeshInterpolator.h
	osvr/RenderKit/ComputeDistortionMesh.cpp
	osvr/RenderKit/ComputeDistortionMesh.h
	osvr/RenderKit/DistortionMesh.h
	osvr/RenderKit/Float2.h
	osvr/RenderKit/PoseStateCaching.h
	osvr/RenderKit/DeltaQuatDeadReckoning.h
)

if (WIN32)
	list(APPEND RenderManager_SOURCES
		osvr/RenderKit/RenderManagerD3D11C.cpp
		osvr/RenderKit/RenderManagerD3DBase.cpp
		osvr/RenderKit/RenderManagerD3D.cpp
		osvr/RenderKit/RenderManagerD3DBase.h
		osvr/RenderKit/RenderManagerD3D.h
		osvr/RenderKit/RenderManagerD3D11ATW.h)
endif()

###
# Graphics API support
###

set(OSVRRM_IMPL_COMMON_INCLUDE_DIRS ""${CMAKE_CURRENT_SOURCE_DIR}"" ""${CMAKE_CURRENT_BINARY_DIR}"" ${EIGEN3_INCLUDE_DIR} ""$<TARGET_PROPERTY:osvr::osvrClient,INTERFACE_INCLUDE_DIRECTORIES>"")
function(osvrrm_setup_nda_object_target _target)
	# Set up defines and includes as if we were building as a part of the main rendermanager library
	target_compile_definitions(${_target} PRIVATE osvrRenderManager_EXPORTS)
	target_include_directories(${_target} PRIVATE ""${NVAPI_INCLUDE_DIRS}"" ${OSVRRM_IMPL_COMMON_INCLUDE_DIRS})

	# Add the objects to the main library sources.
	list(APPEND RenderManager_SOURCES $<TARGET_OBJECTS:${_target}>)
	set(RenderManager_SOURCES ""${RenderManager_SOURCES}"" PARENT_SCOPE)
endfunction()

# How to build the NDA modules in ""Debug"" mode (since MSVC has a separate debug runtime) without potentially NDA-violating debug symbols
option(BUILD_WITH_NDA_DEBUG_SYMBOLS ""Should the DEBUG configuration contain symbols for the NDA components?"" OFF)

set(_debug_flags_regex ""(/Z[io07I)|(/Yd)|(/d2Zi[+])"")
if(MSVC AND NOT BUILD_WITH_NDA_DEBUG_SYMBOLS)
	macro(osvrrm_no_symbols_in_debug)
		# Backup the original flags
		set(_osvrrm_debug_flags_bak ""${CMAKE_CXX_FLAGS_DEBUG}"")
		set(_osvrrm_relwithdebinfo_flags_bak ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
		string(REGEX REPLACE ""${_debug_flags_regex}"" """" CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG}"")
		string(REGEX REPLACE ""${_debug_flags_regex}"" """" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
		#message(STATUS ""Old CMAKE_CXX_FLAGS_DEBUG: '${_osvrrm_debug_flags_bak}'  New: '${CMAKE_CXX_FLAGS_DEBUG}'"")
		#message(STATUS ""Old CMAKE_CXX_FLAGS_RELWITHDEBINFO: '${_osvrrm_relwithdebinfo_flags_bak}'  New: '${CMAKE_CXX_FLAGS_RELWITHDEBINFO}'"")
	endmacro()
	macro(osvrrm_restore_symbols_in_debug)
		set(_osvrrm_flags_bak ""${CMAKE_CXX_FLAGS_DEBUG}"")
	endmacro()
else()
	# no-ops
	macro(osvrrm_no_symbols_in_debug)
	endmacro()
	macro(osvrrm_restore_symbols_in_debug)
	endmacro()
endif()

set(OSVRRM_HAVE_OPENGL_SUPPORT OFF)
set(OSVRRM_HAVE_D3D11_SUPPORT OFF)
set(OSVRRM_USE_OPENGLES20 OFF)
if (WIN32)
	set(OSVRRM_HAVE_D3D11_SUPPORT ON)
	set(RM_USE_D3D11 TRUE)
	message(STATUS "" - D3D11 support: enabled (found WIN32)"")
endif()

#-----------------------------------------------------------------------------
# OpenGL library as a stand-alone renderer not wrapping D3D
if ( ( (OPENGL_FOUND AND GLEW_FOUND) OR OPENGLES2_FOUND ) AND (SDL2_FOUND OR ANDROID))
	list(APPEND RenderManager_SOURCES osvr/RenderKit/RenderManagerOpenGL.cpp osvr/RenderKit/RenderManagerOpenGL.h osvr/RenderKit/RenderManagerOpenGLC.cpp)
	if (ANDROID)
		list(APPEND RenderManager_Sources osvr/RenderKit/RenderManagerOpenGLATW.h)
	endif()
	message(STATUS "" - OpenGL support: enabled"")
	set(RM_USE_OPENGL TRUE)
  if(APPLE)
    add_definitions(-DGL_SILENCE_DEPRECATION)
  endif(APPLE)
	set(OSVRRM_HAVE_OPENGL_SUPPORT ON)
	if (OPENGLES2_FOUND AND ANDROID)
		message(STATUS "" - OpenGLES2 support: enabled"")
		set(RM_USE_OPENGLES20 TRUE)
		set(OSVRRM_USE_OPENGLES20 ON)
	endif()
else()
	message(STATUS "" - OpenGL support: disabled)"")
endif()

if(RM_USE_OPENGL)
	list(APPEND OSVRRM_IMPL_COMMON_INCLUDE_DIRS ${OPENGL_INCLUDE_DIRS})
endif()

if(RM_USE_OPENGLES20)
	list(APPEND OSVRRM_IMPL_COMMON_INCLUDE_DIRS ${OPENGLES2_INCLUDE_DIR})
endif()

if (NVAPI_FOUND AND HAVE_NVIDIA_NDA_SUBMODULE)
	# Usage dependencies
	add_library(osvrRM-nvidia-requirements INTERFACE)
	target_link_libraries(osvrRM-nvidia-requirements INTERFACE nvapi)
	target_include_directories(osvrRM-nvidia-requirements INTERFACE ""${NVIDIA_SRC_DIR}"")

	# nVidia NDA files - object library so we can specify different debug compile flags.
	osvrrm_no_symbols_in_debug()
	add_library(osvrRenderManager-NVIDIA OBJECT
		""${NVIDIA_SRC_DIR}/RenderManagerNVidiaD3D.cpp""
		""${NVIDIA_SRC_DIR}/RenderManagerNVidiaD3D.h"")
	target_include_directories(osvrRenderManager-NVIDIA PRIVATE ""${NVAPI_INCLUDE_DIRS}"" ""${Boost_INCLUDE_DIR}"")
	osvrrm_setup_nda_object_target(osvrRenderManager-NVIDIA)
	osvrrm_restore_symbols_in_debug()

	set(RM_USE_NVIDIA_DIRECT_D3D11 TRUE)
	message(STATUS "" - NVIDIA direct D3D11 support: enabled (found NVAPI and NVIDIA NDA submodule)"")
else()
	message(STATUS "" - NVIDIA direct support: disabled (need NVAPI and NVIDIA NDA submodule)"")
endif()

if (LIQUIDVR_FOUND AND HAVE_AMD_NDA_SUBMODULE)
	# Usage dependencies
	add_library(osvrRM-amd-requirements INTERFACE)
	target_link_libraries(osvrRM-amd-requirements INTERFACE liquidvr)
	target_include_directories(osvrRM-amd-requirements INTERFACE ""${AMD_SRC_DIR}"")

	# AMD NDA files - object library so we can specify different debug compile flags.
	osvrrm_no_symbols_in_debug()
	add_library(osvrRenderManager-AMD OBJECT
		""${AMD_SRC_DIR}/RenderManagerAMDD3D.cpp""
		""${AMD_SRC_DIR}/RenderManagerAMDD3D.h"")
	target_include_directories(osvrRenderManager-AMD PRIVATE ""${LIQUIDVR_INCLUDE_DIR}"" ""${Boost_INCLUDE_DIR}"")
	osvrrm_setup_nda_object_target(osvrRenderManager-AMD)
	osvrrm_restore_symbols_in_debug()

	set(RM_USE_AMD_DIRECT_D3D11 TRUE)
	message(STATUS "" - AMD direct D3D11 support: enabled (found LIQUIDVR and AMD NDA submodule)"")
else()
	message(STATUS "" - AMD direct support: disabled (need LIQUIDVR and AMD NDA submodule)"")
endif()

if (HAVE_INTEL_NDA_SUBMODULE)
	# Usage dependencies
	add_library(osvrRM-intel-requirements INTERFACE)
	target_include_directories(osvrRM-intel-requirements INTERFACE ""${INTEL_SRC_DIR}"")
	# Intel NDA files - object library so we can specify different debug compile flags.
	osvrrm_no_symbols_in_debug()
	add_library(osvrRenderManager-Intel OBJECT
		""${INTEL_SRC_DIR}/RenderManagerIntelD3D.cpp""
		""${INTEL_SRC_DIR}/RenderManagerIntelD3D.h"")
	target_include_directories(osvrRenderManager-Intel PRIVATE ""${INTEL_SRC_DIR}"" ""${Boost_INCLUDE_DIR}"")
	osvrrm_setup_nda_object_target(osvrRenderManager-Intel)
	osvrrm_restore_symbols_in_debug()

	set(RM_USE_INTEL_DIRECT_D3D11 TRUE)
	message(STATUS "" - Intel direct D3D11 support: enabled (found Intel NDA submodule)"")
else()
	message(STATUS "" - Intel direct support: disabled (need Intel NDA submodule)"")
endif()

if (HAVE_SENSICS_NDA_SUBMODULE)
	# Sensics is a header-only lib for now
	find_package(osvrDisplayServerClient)
	if (osvrDisplayServerClient_FOUND AND (TARGET sensics::osvrDisplayServerClient OR TARGET sensics::osvrDisplayServerClient_static))
		message(STATUS "" - Sensics support: enabled"")
		set(RM_USE_SENSICS TRUE)
		include_directories(${SENSICS_SRC_DIR})
	endif()
endif()


#-----------------------------------------------------------------------------
# SDL init/quit handler code that makes sure we only do it once.
if (SDL2_FOUND)
	list(APPEND RenderManager_SOURCES osvr/RenderKit/RenderManagerSDLInitQuit.cpp osvr/RenderKit/RenderManagerSDLInitQuit.h )
endif()

#-----------------------------------------------------------------------------
# OpenGL wrapped around Direct3D
if ((RM_USE_NVIDIA_DIRECT_D3D11 OR RM_USE_AMD_DIRECT_D3D11) AND NOT RM_USE_OPENGLES20)
	#-----------------------------------------------------------------------------
	# OpenGL library as a wrapper for D3D DirectMode
	if (OPENGL_FOUND AND GLEW_FOUND AND SDL2_FOUND)
		message(STATUS "" - D3D11+OpenGL support: enabled (found NVAPI or LIQUIDVR, OpenGL, GLEW, and SDL2)"")
		list(APPEND RenderManager_SOURCES osvr/RenderKit/RenderManagerD3DOpenGL.cpp osvr/RenderKit/RenderManagerD3DOpenGL.h)
		set(RM_USE_NVIDIA_DIRECT_D3D11_OPENGL TRUE)
	else()
		message(STATUS "" - Vendor direct D3D11+OpenGL support: disabled (need all of a vendor direct-mode D3D module, OpenGL, GLEW, and SDL2, at least one was missing)"")
	endif()
endif()

###
# Set up build product locations
###
include(GNUInstallDirs)
# Sometimes GNUInstallDirs misses this one.
if(NOT CMAKE_INSTALL_DOCDIR)
	set(CMAKE_INSTALL_DOCDIR ${CMAKE_INSTALL_DATAROOTDIR}/doc/${PROJECT_NAME})
endif()

# Win-specific: we want shared libs (dlls) in same dir as exe files.
if(WIN32)
	set(OSVRRM_SHARED_LIBRARY_DIR ""${CMAKE_INSTALL_BINDIR}"")
else()
	set(OSVRRM_SHARED_LIBRARY_DIR ""${CMAKE_INSTALL_LIBDIR}"")
endif()

# Let's build into a parallel(ish) structure as we'll install to.
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}"")
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/${OSVRRM_SHARED_LIBRARY_DIR}"")
endif()
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}"")
endif()

set(CONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/osvrRenderManager"")


###
# Helper for dependencies
###
include(CopyImportedTarget)
## Copy and install shared libraries from imported targets as required.
## Also generate a list of imported targets for clients of RM to make use of.
get_filename_component(OSVRRM_REQUIRED_LIBRARIES_DIR ""${OSVRRM_SHARED_LIBRARY_DIR}"" ABSOLUTE BASE_DIR ""${CMAKE_INSTALL_PREFIX}"")
get_filename_component(OSVRRM_CONFIG_INSTALL_DIR ""${CONFIG_INSTALL_DIR}"" ABSOLUTE BASE_DIR ""${CMAKE_INSTALL_PREFIX}"")
file(RELATIVE_PATH OSVRRM_REQUIRED_LIBRARIES_DIR ""${OSVRRM_CONFIG_INSTALL_DIR}"" ""${OSVRRM_REQUIRED_LIBRARIES_DIR}/."")

set(OSVRRM_REQUIRED_LIBRARIES_DEBUG)
set(OSVRRM_REQUIRED_LIBRARIES_RELEASE)
set(OSVRRM_REQUIRED_LIBRARIES_RELWITHDEBINFO)
set(OSVRRM_REQUIRED_LIBRARIES_MINSIZEREL)
function(osvrrm_copy_deps)
	copy_imported_targets(osvrRenderManager ${ARGN})
	foreach(_dep ${ARGN})
		install_imported_target(${_dep} DESTINATION ${OSVRRM_SHARED_LIBRARY_DIR} COMPONENT Runtime)
		foreach(_config DEBUG RELEASE RELWITHDEBINFO MINSIZEREL)
			get_target_property(_lib_location ${_dep} LOCATION_${_config})
			get_filename_component(_lib_filename ""${_lib_location}"" NAME)
			set(_lib_filename ""${OSVRRM_REQUIRED_LIBRARIES_DIR}/${_lib_filename}"")
			list(APPEND OSVRRM_REQUIRED_LIBRARIES_${_config} ""${_lib_filename}"")
			set(OSVRRM_REQUIRED_LIBRARIES_${_config} ""${OSVRRM_REQUIRED_LIBRARIES_${_config}}"" PARENT_SCOPE)
		endforeach()
	endforeach()
endfunction()

###
# Build the actual library
###

# Generate the header with the defines we need.
configure_file(RenderManagerBackends.h.in ""${CMAKE_CURRENT_BINARY_DIR}/RenderManagerBackends.h"")

set (RenderManager_PUBLIC_HEADERS
	osvr/RenderKit/Float2.h
	osvr/RenderKit/UnstructuredMeshInterpolator.h
	osvr/RenderKit/ComputeDistortionMesh.h
	osvr/RenderKit/DistortionCorrectTextureCoordinate.h
	osvr/RenderKit/DistortionMesh.h
	osvr/RenderKit/DistortionParameters.h
	osvr/RenderKit/RenderManager.h
	osvr/RenderKit/RenderManagerD3DBase.h
	osvr/RenderKit/RenderManagerC.h
    osvr/RenderKit/RenderManagerD3D.h
	osvr/RenderKit/RenderManagerD3D11C.h
	osvr/RenderKit/RenderManagerOpenGL.h
	osvr/RenderKit/RenderManagerOpenGLC.h
	osvr/RenderKit/RenderManagerOpenGLVersion.h
    osvr/RenderKit/RenderManagerD3DOpenGL.h
	osvr/RenderKit/GraphicsLibraryD3D11.h
	osvr/RenderKit/GraphicsLibraryOpenGL.h
	osvr/RenderKit/MonoPointMeshTypes.h
	osvr/RenderKit/RGBPointMeshTypes.h
	osvr/RenderKit/RenderKitGraphicsTransforms.h
	osvr/RenderKit/osvr_display_configuration.h
	osvr/RenderKit/osvr_compiler_tests.h
	""${CMAKE_CURRENT_BINARY_DIR}/osvr/RenderKit/Export.h""
)

add_library(osvrRenderManager ${RenderManager_SOURCES} ${RenderManager_PUBLIC_HEADERS})
if (NOT ANDROID)
  target_compile_features(osvrRenderManager PRIVATE cxx_range_for)
endif()

target_include_directories(osvrRenderManager PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
	$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
	PRIVATE
	${EIGEN3_INCLUDE_DIR})
if (RM_USE_NVIDIA_DIRECT_D3D11)
	target_link_libraries(osvrRenderManager
		PRIVATE
		osvrRM-nvidia-requirements)
endif()
if (RM_USE_AMD_DIRECT_D3D11)
	target_link_libraries(osvrRenderManager
		PRIVATE
		osvrRM-amd-requirements)
endif()
if (RM_USE_INTEL_DIRECT_D3D11)
	target_link_libraries(osvrRenderManager
		PRIVATE
		osvrRM-intel-requirements)
endif()
if (RM_USE_SENSICS)
		if(TARGET sensics::osvrDisplayServerClient_static)
			target_link_libraries(osvrRenderManager
				PRIVATE
				sensics::osvrDisplayServerClient_static)
		else()
			target_link_libraries(osvrRenderManager
				PRIVATE
				sensics::osvrDisplayServerClient)
		endif()
endif()
if (WIN32)
	target_link_libraries(osvrRenderManager PRIVATE D3D11 Dwmapi)
endif()

set(LIBNAME_FULL osvrRenderManager)
set(EXPORT_BASENAME OSVR_RENDERMANAGER)
configure_file(""Export.h.in""
	osvr/RenderKit/Export.h
	@ONLY NEWLINE_STYLE LF)

if(NOT BUILD_SHARED_LIBS)
	target_compile_definitions(osvrRenderManager PUBLIC OSVR_RENDERMANAGER_STATIC_DEFINE)
endif()

set_property(TARGET
	osvrRenderManager
	PROPERTY
	PUBLIC_HEADER
	${RenderManager_PUBLIC_HEADERS})

# If we are using dynamic GLEW on Windows, let's copy it.
if(GLEW_FOUND AND WIN32 AND NOT GLEW_LIBRARY MATCHES "".*s.lib"")
	osvrrm_copy_deps(GLEW::GLEW)
	set(OSVRRM_NEED_GLEW_COPIED TRUE)
else()
	set(OSVRRM_NEED_GLEW_COPIED FALSE)
endif()

if (OPENGL_FOUND)
	target_include_directories(osvrRenderManager PRIVATE ${OPENGL_INCLUDE_DIRS})
	target_link_libraries(osvrRenderManager PRIVATE ${OPENGL_LIBRARY})
endif()

if (ANDROID)
	target_include_directories(osvrRenderManager PRIVATE ${OPENGLES2_INCLUDE_DIR})
	target_link_libraries(osvrRenderManager PRIVATE ${OPENGLES2_LIBRARIES})
	target_link_libraries(osvrRenderManager PRIVATE GLESv1_CM log android EGL)
endif()

if (GLEW_FOUND)
	target_link_libraries(osvrRenderManager PRIVATE GLEW::GLEW)
	set(OSVRRM_NEED_GLEW TRUE)
else()
	set(OSVRRM_NEED_GLEW FALSE)
endif()

if (SDL2_FOUND)
	target_link_libraries(osvrRenderManager PRIVATE SDL2::SDL2)
	set(OSVRRM_NEED_SDL2 TRUE)
	set(OSVRRM_SDL2MAIN FALSE)
	if(SDL2_SDLMAIN_LIBRARY)
		set(OSVRRM_SDL2MAIN TRUE)
	endif()
else()
	set(OSVRRM_NEED_SDL2 FALSE)
	set(OSVRRM_SDL2MAIN FALSE)
endif()

if(SDL2_DYNAMIC AND WIN32)
	osvrrm_copy_deps(SDL2::SDL2)
	set(OSVRRM_NEED_SDL2_COPIED TRUE)
else()
	set(OSVRRM_NEED_SDL2_COPIED FALSE)
endif()

# This also lets it know where to find the header files.
target_link_libraries(osvrRenderManager
	PUBLIC
	osvr::osvrClientKitCpp
	PRIVATE
	JsonCpp::JsonCpp
	osvr::osvrUtil
        osvr::osvrCommon
	vendored-vrpn
	vendored-quat)
osvrrm_copy_deps(osvr::osvrClientKit osvr::osvrClient osvr::osvrCommon osvr::osvrUtil)

# Add the C++ interface target.
add_library(osvrRenderManagerCpp INTERFACE)
target_link_libraries(osvrRenderManagerCpp INTERFACE osvrRenderManager osvr::osvrClientKitCpp)

# Alias targets, so the examples can be used as-is.
add_library(osvrRenderManager::osvrRenderManager ALIAS osvrRenderManager)
add_library(osvrRenderManager::osvrRenderManagerCpp ALIAS osvrRenderManagerCpp)

if(WIN32)
	# Install d3dcompiler_47
	install(FILES ${DIRECT3D_COMPILER_REDISTRIBUTABLE}
		DESTINATION ${CMAKE_INSTALL_BINDIR})
	get_filename_component(OSVRRM_D3DCOMPILER_FILENAME ""${DIRECT3D_COMPILER_REDISTRIBUTABLE}"" NAME)
	set(OSVRRM_NEED_D3DCOMPILER_COPIED TRUE)
else()
	set(OSVRRM_NEED_D3DCOMPILER_COPIED FALSE)
endif()

# The goal with this variable is so that the same CMakeLists file that is used to build
# the examples in-tree can be shipped to build the examples out-of-tree.
set(OSVRRM_INSTALL_EXAMPLES ON)

if(NOT ANDROID)
	add_subdirectory(examples)
endif()

install(TARGETS
	osvrRenderManager
	${OSVR_RENDERMANAGER_EXPORTED_TARGETS}
	EXPORT osvrRenderManagerTargets
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
	PUBLIC_HEADER DESTINATION include/osvr/RenderKit
)

set(ENABLEDISABLE_COMMON_SOURCES osvr/RenderKit/DirectModeToolSkeleton.h osvr/RenderKit/ToolingArguments.h)

if (NVAPI_FOUND AND HAVE_NVIDIA_NDA_SUBMODULE)
	set(NVAPI_EXTRA_HEADERS ""${NVIDIA_SRC_DIR}/CheckSuccess.h"" ""${NVIDIA_SRC_DIR}/Util.h"" ""${NVIDIA_SRC_DIR}/NVAPIWrappers.h"")

	osvrrm_no_symbols_in_debug()
	#-----------------------------------------------------------------------------
	# Enable DirectMode on attached OSVR HDKs
	# TODO rename to EnableOSVRDirectModeNVIDIA
	add_executable(EnableOSVRDirectMode ${ENABLEDISABLE_COMMON_SOURCES} ""${NVIDIA_SRC_DIR}/EnableOSVRDirectMode.cpp"" ${NVAPI_EXTRA_HEADERS})
	target_link_libraries(EnableOSVRDirectMode PRIVATE osvr::osvrClientKitCpp osvrRenderManagerCpp osvrRM-nvidia-requirements)

	#-----------------------------------------------------------------------------
	# Disable DirectMode on attached OSVR HDKs
	# TODO rename to DisableOSVRDirectModeNVIDIA
	add_executable(DisableOSVRDirectMode ${ENABLEDISABLE_COMMON_SOURCES} ""${NVIDIA_SRC_DIR}/DisableOSVRDirectMode.cpp"" ${NVAPI_EXTRA_HEADERS})
	target_link_libraries(DisableOSVRDirectMode PRIVATE osvr::osvrClientKitCpp osvrRenderManagerCpp osvrRM-nvidia-requirements)

	#-----------------------------------------------------------------------------
	# Debugging/troubleshooting application for direct mode.
	add_executable(DirectModeDebugging ""${NVIDIA_SRC_DIR}/DirectModeDebugging.cpp"" ${NVAPI_EXTRA_HEADERS})
	target_link_libraries(DirectModeDebugging PRIVATE osvr::osvrClientKitCpp osvrRenderManagerCpp osvrRM-nvidia-requirements)
	osvrrm_restore_symbols_in_debug()

	install(TARGETS
		EnableOSVRDirectMode
		DisableOSVRDirectMode
		DirectModeDebugging
		EXPORT osvrRenderManagerTargets
		RUNTIME
		DESTINATION ${CMAKE_INSTALL_BINDIR}
		CONFIGURATIONS ${TOOL_CONFIGURATIONS})
endif()

if (LIQUIDVR_FOUND AND HAVE_AMD_NDA_SUBMODULE)

	osvrrm_no_symbols_in_debug()
	#-----------------------------------------------------------------------------
	# Enable DirectMode on attached OSVR HDKs
	add_executable(EnableOSVRDirectModeAMD ${ENABLEDISABLE_COMMON_SOURCES} ""${AMD_SRC_DIR}/EnableOSVRDirectModeAMD.cpp"")
	target_link_libraries(EnableOSVRDirectModeAMD PRIVATE osvr::osvrClientKitCpp osvrRenderManagerCpp osvrRM-amd-requirements)

	#-----------------------------------------------------------------------------
	# Disable DirectMode on attached OSVR HDKs
	add_executable(DisableOSVRDirectModeAMD ${ENABLEDISABLE_COMMON_SOURCES} ""${AMD_SRC_DIR}/DisableOSVRDirectModeAMD.cpp"")
	target_link_libraries(DisableOSVRDirectModeAMD PRIVATE osvr::osvrClientKitCpp osvrRenderManagerCpp osvrRM-amd-requirements)
	osvrrm_restore_symbols_in_debug()

	install(TARGETS
		EnableOSVRDirectModeAMD
		DisableOSVRDirectModeAMD
		EXPORT osvrRenderManagerTargets
		RUNTIME
		DESTINATION ${CMAKE_INSTALL_BINDIR}
		CONFIGURATIONS ${TOOL_CONFIGURATIONS})
endif()

###
# Set Up Package for External Usage
###
include(CMakePackageConfigHelpers)
include(GenerateCompatibilityVersionFile)

generate_compatibility_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfigVersion.cmake""
	VERSION ${OSVR_RENDERMANAGER_VERSION}
	COMPATIBILITY AnyNewerVersion
	C_ABI)

generate_compatibility_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerInternalConfigVersion.cmake""
	VERSION ${OSVR_RENDERMANAGER_VERSION}
	COMPATIBILITY AnyNewerVersion
	CXX_ABI)

# Export the targets we want in the build tree.
export(TARGETS
	osvrRenderManager
	${OSVR_RENDERMANAGER_EXPORTED_TARGETS}
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerTargets.cmake""
	NAMESPACE osvrRenderManager::
)

# Register the current build dir as a package search location
export(PACKAGE osvrRenderManager)

# Generate the config file for build-tree usage.
set(OSVRRM_IN_BUILD_TREE TRUE)
set(OSVRRM_D3DCOMPILER_FILE ""${DIRECT3D_COMPILER_REDISTRIBUTABLE}"")
configure_file(""cmake/osvrRenderManagerConfig.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfig.cmake""
	@ONLY)

# Path hints for build-tree usage only.
configure_file(""cmake/osvrRenderManagerConfigBuildTreeHints.cmake.in""
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfigBuildTreeHints.cmake""
	@ONLY)


# Generate the config file for installed usage.
set(OSVRRM_IN_BUILD_TREE FALSE)
set(OSVRRM_D3DCOMPILER_FILE ""\${OSVRRM_ROOT}/${CMAKE_INSTALL_BINDIR}/${OSVRRM_D3DCOMPILER_FILENAME}"")
configure_file(""cmake/osvrRenderManagerConfig.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfigInstallTree.cmake""
	@ONLY)

# Copy over the shared CMake modules for use in a build tree,
# and install for an install tree.
foreach(HELPER CMakeBoostHelper FindSDL2 FindGLEW CopyImportedTarget osvrStashMapConfig)
	configure_file(""cmake/${HELPER}.cmake"" ""${CMAKE_CURRENT_BINARY_DIR}/${HELPER}.cmake"" COPYONLY)
	install(FILES
		""cmake/${HELPER}.cmake""
		DESTINATION ${CONFIG_INSTALL_DIR}
		COMPONENT Devel)
endforeach()

if(WIN32)
	# Needed by CMakeBoostHelper
	configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/GetMSVCVersion.cmake"" ""${CMAKE_CURRENT_BINARY_DIR}/GetMSVCVersion.cmake"" COPYONLY)
	install(FILES
		""cmake/GetMSVCVersion.cmake""
		DESTINATION ${CONFIG_INSTALL_DIR}
		COMPONENT Devel)
endif()

install(EXPORT osvrRenderManagerTargets
	FILE osvrRenderManagerTargets.cmake
	NAMESPACE osvrRenderManager::
	DESTINATION ${CONFIG_INSTALL_DIR}
	COMPONENT Devel)

# Install an install-tree only helper and a generated file
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfigVersion.cmake""
	""${CMAKE_CURRENT_SOURCE_DIR}/cmake/osvrRenderManagerConfigInstalledBoost.cmake""
	DESTINATION ${CONFIG_INSTALL_DIR}
	COMPONENT Devel)

# Install the install-tree version of the CMake config file.
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/osvrRenderManagerConfigInstallTree.cmake""
	RENAME osvrRenderManagerConfig.cmake
	DESTINATION ${CONFIG_INSTALL_DIR}
	COMPONENT Devel)

# Install examples
if(INSTALL_EXAMPLES)
    install(DIRECTORY examples
        DESTINATION ${CMAKE_INSTALL_DOCDIR}
        FILES_MATCHING
        PATTERN ""*.cpp""
        PATTERN ""*.h""
        PATTERN ""*.c""
        PATTERN ""*.hlsl""
        PATTERN ""*/CMakeLists.txt"")
endif()

# Tests
option(BUILD_TESTS ""Build tests"" ON)
if(BUILD_TESTS)
	set(HEADER_BASE ""${CMAKE_CURRENT_SOURCE_DIR}/osvr"")
endif()

include(CTest)
enable_testing()

add_subdirectory(tests)
add_subdirectory(apps)
",3.1.0,3.1
15822,choishingwan,PRSice,False,False,False,False,False,8,C++,2020-05-17 15:40:44+00:00,2016-08-03 16:07:20+00:00,86,2192,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

set(PROJECT_NAME PRSice)
project(${PROJECT_NAME} CXX)

add_compile_options(-g)
add_compile_options(-Wall)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Don't use e.g. GNU extension (like -std=gnu++11) for portability
set(CMAKE_CXX_EXTENSIONS OFF)

option(march ""Use --march."" OFF)
if(march)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -march=native"")
endif()
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

find_path(EIGEN_INCLUDE_DIR
    NAME EIGEN
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/lib/eigen-git-mirror/)
if((NOT ${EIGEN_INCLUDE_DIR}) OR (NOT EXISTS ${EIGEN_INCLUDE_DIR}))
    execute_process(COMMAND git submodule update --init -- lib/eigen/
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    set(EIGEN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/eigen/)
endif()
include_directories(${EIGEN_INCLUDE_DIR})
################################
#           Add zlib
################################
find_package( ZLIB REQUIRED )
# if found, will set ${ZLIB_INCLUDE_DIRS} which can be added
################################
#          Add pthread
################################
find_package (Threads REQUIRED)
# if found, will include ${CMAKE_THREAD_LIBS_INIT}

add_library(coverage_config INTERFACE)
option(CODE_COVERAGE ""Enable coverage reporting"" OFF)
if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang"")
  # Add required flags (GCC & LLVM/Clang)
  target_compile_options(coverage_config INTERFACE
    -O0        # no optimization
    -g         # generate debug info
    --coverage # sets all required flags
  )
  if(CMAKE_VERSION VERSION_GREATER 3.13 OR CMAKE_VERSION VERSION_EQUAL 3.13)
    target_link_options(coverage_config INTERFACE --coverage)
  else()
    target_link_libraries(coverage_config INTERFACE --coverage)
  endif()
endif()

add_subdirectory(src)

option (BUILD_TESTING ""Build the testing tree."" OFF)
# Only build tests if we are the top-level project
# Allows this to be used by super projects with `add_subdirectory`
if (BUILD_TESTING AND (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR))
    enable_testing()
    add_subdirectory(test)
endif()
",3.1.0,3.1
16208,thewizardplusplus,wizard-parser,False,False,False,False,False,1,C++,2019-06-26 01:30:12+00:00,2017-02-24 04:30:43+00:00,1,424,"cmake_minimum_required(VERSION 3.10.2)

get_filename_component(PROJECT_NAME ""${CMAKE_SOURCE_DIR}"" NAME)
string(MAKE_C_IDENTIFIER ""${PROJECT_NAME}"" PROJECT_NAME)
project(${PROJECT_NAME} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(PROJECT_SOURCE_DIRECTORY ""${PROJECT_SOURCE_DIR}/source"")
file(GLOB_RECURSE PROJECT_SOURCE ""${PROJECT_SOURCE_DIRECTORY}/*.cpp"")
add_library(${PROJECT_NAME} STATIC ""${PROJECT_SOURCE}"")

set(TEST_PROJECT_NAME ""${PROJECT_NAME}_test"")
file(GLOB_RECURSE TEST_PROJECT_SOURCE ""${PROJECT_SOURCE_DIR}/tests/*.cpp"")
add_executable(${TEST_PROJECT_NAME} ""${TEST_PROJECT_SOURCE}"")
target_link_libraries(${TEST_PROJECT_NAME} ${PROJECT_NAME})

install(
	DIRECTORY ""${PROJECT_SOURCE_DIRECTORY}/""
	DESTINATION include
	FILES_MATCHING PATTERN ""*.hpp""
)
install(TARGETS ${PROJECT_NAME} ARCHIVE DESTINATION lib)

enable_testing()
add_test(NAME ${TEST_PROJECT_NAME} COMMAND ${TEST_PROJECT_NAME})
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure)
add_dependencies(check ${TEST_PROJECT_NAME})

find_package(Doxygen)
if(DOXYGEN_FOUND)
	set(DOXYGEN_INPUT ""${CMAKE_SOURCE_DIR}"")
	set(DOXYGEN_OUTPUT ""${CMAKE_SOURCE_DIR}"")
	set(DOXYFILE_PATH ""${CMAKE_SOURCE_DIR}/Doxyfile"")
	configure_file(""${DOXYFILE_PATH}.in"" ""${DOXYFILE_PATH}"")
	add_custom_target(docs COMMAND ""${DOXYGEN_EXECUTABLE}"" ""${DOXYFILE_PATH}"")
else()
	message(
		WARNING
		""Doxygen tool not found; therefore, the reference manual won't be generated.""
	)
endif()
",3.10.2,3.1
16393,protopopov1122,CalX,False,False,False,False,False,1,C++,2019-09-17 19:09:08+00:00,2017-02-05 12:17:37+00:00,1,630,"cmake_minimum_required(VERSION 3.1)
project(CalX)

# Common language standard and compiler setup
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
if (MSVC)
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
elseif(CMAKE_COMPILER_IS_GNUCXX OR ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter -Wno-overloaded-virtual -Wno-inconsistent-missing-override -pedantic"")
endif()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

# Fix linker options on MinGW
if (MINGW)
	if (MINGW_STATIC_LINKAGE)
		set(LINKAGE_OPTS ""-static-libgcc -static-libstdc++ -Wl,-Bstatic,--whole-archive -Wl,-luuid -Wl,--exclude-symbols,_Unwind_Resume -lwinpthread -Wl,-Bdynamic,--no-whole-archive"")
	elseif (MINGW_SHARED_LINKAGE)
		set(LINKAGE_OPTS ""-shared-libgcc -Wl,-Bstatic,--whole-archive -Wl,-luuid -Wl,-Bdynamic,--no-whole-archive"")
	else ()
		set(LINKAGE_OPTS ""-Wl,-Bstatic,--whole-archive -Wl,-luuid -Wl,-Bdynamic,--no-whole-archive"")
	endif ()
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LINKAGE_OPTS}"")
	set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LINKAGE_OPTS}"")
	set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${LINKAGE_OPTS}"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wa,-mbig-obj"")
endif (MINGW)

# Preparations for build
if (BUILD_CONFIGURATION)
	set(CONFIG_DIR ${CMAKE_SOURCE_DIR}/configs/${BUILD_CONFIGURATION})
else ()
	set(CONFIG_DIR ${CMAKE_SOURCE_DIR}/configs/Dev)
endif (BUILD_CONFIGURATION)
set(THIRD_PARTY ${CMAKE_SOURCE_DIR}/third-party)
set(build_directory ${CMAKE_BINARY_DIR}/build CACHE INTERNAL """")
add_custom_target(make-build-directory ALL COMMAND ${CMAKE_COMMAND} -E make_directory ${build_directory})
add_custom_target(calx-init-target ALL
	COMMAND ${CMAKE_COMMAND} -E copy ${CONFIG_DIR}/main.conf.ini ${build_directory}
	DEPENDS make-build-directory
)

# Project submodules
add_subdirectory(ctrl-lib)
add_subdirectory(device)
add_subdirectory(cli)
add_subdirectory(ui)
add_subdirectory(ext)
add_subdirectory(lua-calx)
add_subdirectory(tests)

# CPack configuration
set(CPACK_COMPONENT_CONFIG_DISPLAY_NAME ""Configuration files"" CACHE INTERNAL """")
set(CPACK_COMPONENT_CONFIG_DESCRIPTION ""Set of default configuration files"" CACHE INTERNAL """")


set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE)
include(InstallRequiredSystemLibraries)
set(CPACK_PACKAGE_NAME ""CalX"")
set(CPACK_PACKAGE_VENDOR ""Jevgenijs Protopopovs"")
set(CPACK_PACKAGE_CONTACT ""jprotopopov1122@gmail.com"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Stepper motor and instrument tool set"")
SET(CPACK_PACKAGE_VERSION_MAJOR ""0"")
SET(CPACK_PACKAGE_VERSION_MINOR ""9"")
SET(CPACK_PACKAGE_VERSION_PATCH ""8"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""CalX"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/COPYING.LESSER"")

# Create icon and shortcuts on Windows
if (WIN32)
	if (EXISTS ${CMAKE_BINARY_DIR}/icon.ico)
		set(CPACK_NSIS_MUI_ICON ${CMAKE_BINARY_DIR}/icon.ico)
		set(CPACK_NSIS_MUI_UNIICON ${CMAKE_BINARY_DIR}/icon.ico)
	endif (EXISTS ${CMAKE_BINARY_DIR}/icon.ico)

	list(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""CreateShortCut \\\""$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\CalX.lnk\\\"" \\\""$INSTDIR\\\\calx_ui.exe\\\"""")
	list(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ""Delete \\\""$SMPROGRAMS\\\\$START_MENU\\\\CalX.lnk\\\"""")
endif (WIN32)
include(CPack)
",3.1,3.1
16395,BelledonneCommunications,belle-sip,False,False,False,False,False,17,C,2020-05-14 17:20:22+00:00,2015-01-14 10:18:55+00:00,46,1989,"
# CMakeLists.txt
# Copyright (C) 2010-2019  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################


cmake_minimum_required(VERSION 3.1)
project(belle-sip VERSION 4.4.0 LANGUAGES C CXX)



set(PACKAGE ""${PROJECT_NAME}"")
set(PACKAGE_NAME ""${PROJECT_NAME}"")
set(PACKAGE_VERSION ""${PROJECT_VERSION}"")
set(PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set(PACKAGE_BUGREPORT ""jehan.monnier@linphone.org"")
set(PACKAGE_TARNAME ""${PROJECT_NAME}"")
set(PACKAGE_URL """")
set(VERSION ""${PACKAGE_VERSION}"")


option(ENABLE_SHARED ""Build shared library."" YES)
option(ENABLE_STATIC ""Build static library."" YES)
option(ENABLE_RTP_MAP_ALWAYS_IN_SDP ""Always include rtpmap in SDP."" OFF)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_TUNNEL ""Enable tunnel support"" OFF)
option(ENABLE_TESTS ""Enable compilation of tests"" ON)
option(ENABLE_MDNS ""Enable multicast DNS"" OFF)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)


include(CheckLibraryExists)
include(CheckSymbolExists)
include(CheckCSourceCompiles)
include(CMakePushCheckState)
include(GNUInstallDirs)

if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

set(MSVC_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC"")
if(MSVC)
	list(APPEND CMAKE_REQUIRED_INCLUDES ${MSVC_INCLUDE_DIR})
endif()
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

check_library_exists(""dl"" ""dlopen"" """" HAVE_LIBDL)
check_library_exists(""rt"" ""clock_gettime"" """" HAVE_LIBRT)

cmake_push_check_state(RESET)
check_symbol_exists(""res_ndestroy"" ""resolv.h"" HAVE_RES_NDESTROY)
set(CMAKE_REQUIRED_LIBRARIES resolv)
check_c_source_compiles(""#include <resolv.h>
int main(int argc, char *argv[]) {
res_getservers(NULL,NULL,0);
return 0;
}""
	HAVE_RES_GETSERVERS)
if(HAVE_RES_NDESTROY AND HAVE_RES_GETSERVERS)
	set(HAVE_RESINIT 1)
endif()
cmake_pop_check_state()

find_package(Threads)

find_package(ZLIB)

if(ENABLE_RTP_MAP_ALWAYS_IN_SDP)
	set(BELLE_SDP_FORCE_RTP_MAP 1)
endif()

find_package(bctoolbox 0.5.0 REQUIRED OPTIONAL_COMPONENTS tester)

if(ENABLE_TUNNEL)
	if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
		include(""${EP_tunnel_CONFIG_DIR}/TunnelConfig.cmake"")
	else()
		find_package(Tunnel)
	endif()
	if(TUNNEL_FOUND)
		set(HAVE_TUNNEL 1)
	else()
		message(WARNING ""Could not find the tunnel library!"")
		set(ENABLE_TUNNEL OFF CACHE BOOL ""Enable tunnel support"" FORCE)
	endif()
endif()
if(ZLIB_FOUND)
	set(HAVE_ZLIB 1)
endif()

if(ENABLE_MDNS)
	find_package(DNSSD REQUIRED)
	if(DNSSD_FOUND)
		set(HAVE_MDNS 1)
	endif()
endif()


configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)


set(prefix ${CMAKE_INSTALL_PREFIX})
set(exec_prefix ${prefix}/${CMAKE_INSTALL_BINDIR})
set(libdir ${prefix}/${CMAKE_INSTALL_LIBDIR})
set(includedir ${prefix}/include)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/belle-sip.pc.in ${CMAKE_CURRENT_BINARY_DIR}/belle-sip.pc)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/belle-sip.pc DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"")

include_directories(
	include
	src
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_BINARY_DIR}/src
)
if(TUNNEL_FOUND)
	include_directories(${TUNNEL_INCLUDE_DIRS})
endif()
if(ZLIB_FOUND)
	include_directories(${ZLIB_INCLUDE_DIRS})
endif()
if(DNSSD_FOUND)
	include_directories(${DNSSD_INCLUDE_DIRS})
endif()
if(MSVC)
	include_directories(${MSVC_INCLUDE_DIR})
endif()

add_definitions(""-DHAVE_CONFIG_H"")
set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
set(STRICT_OPTIONS_OBJC ""-fmodules"")
if(MSVC)
	list(APPEND STRICT_OPTIONS_CPP ""/wd4068"") # Disable ""unknown pragma"" warnings from antlr.
	list(APPEND STRICT_OPTIONS_CPP ""/wd4129"") # Disable ""unrecognized character escape sequence"" warnings from antlr.
	list(APPEND STRICT_OPTIONS_CPP ""/wd4996"") # Disable POSIX functions warnings from bctbx.
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""/WX"")
	endif()
else()
	list(APPEND STRICT_OPTIONS_CPP ""-Wall"" ""-Wuninitialized"" ""-Wno-error=deprecated-declarations"")
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-builtin-requires-header"" ""-Wno-unused-function"" ""-Wno-gnu-designator"" ""-Wno-array-bounds"")
	elseif(CMAKE_C_COMPILER_ID STREQUAL ""GNU"")
		list(APPEND STRICT_OPTIONS_C ""-Werror=vla"") # Forbids usage of variable length arrays since Visual Studio's compiler does not support them.
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=pragmas"")
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-Wno-error=unknown-pragmas"" ""-Wuninitialized"" ""-fno-strict-aliasing"")
		list(APPEND STRICT_OPTIONS_C "" -Wno-missing-field-initializers"" ""-Wno-error=unused-result"")
	endif()
	# this warning is generated by antlr so ignore it for now
	list(APPEND STRICT_OPTIONS_C  ""-Wno-error=sign-compare"")
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()
set(LINK_FLAGS )
if(APPLE)
	list(APPEND LINK_FLAGS ""-framework Foundation"")
	if(IOS)
		list(APPEND LINK_FLAGS ""-framework CoreFoundation"" ""-framework CFNetwork"" ""-framework UIKit"")
	endif()
endif()
string(REPLACE "";"" "" "" LINK_FLAGS_STR ""${LINK_FLAGS}"")

set(BELLESIP_CPPFLAGS ${BCTOOLBOX_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND BELLESIP_CPPFLAGS ""-DBELLESIP_STATIC"")
endif()
if(BELLESIP_CPPFLAGS)
	list(REMOVE_DUPLICATES BELLESIP_CPPFLAGS)
	add_definitions(${BELLESIP_CPPFLAGS})
endif()
add_definitions(""-DBELLESIP_EXPORTS"")

if(CMAKE_SYSTEM_NAME STREQUAL ""WindowsPhone"" OR CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
	add_definitions(
		-DHAVE_COMPILER_TLS
		-DUSE_FIXED_NAMESERVERS
		-DUSE_GETADDRINFO_FALLBACK
	)
endif()


if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
	set(EXPORT_TARGETS_NAME ""LinphoneBuilder"")
else()
	set(EXPORT_TARGETS_NAME ""BelleSIP"")
endif()


add_subdirectory(include)
add_subdirectory(src)


if(ENABLE_TESTS)
	enable_testing()
	add_subdirectory(tester)
endif()


include(CMakePackageConfigHelpers)
set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_LIBDIR}/cmake/BelleSIP"")


write_basic_package_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/BelleSIPConfigVersion.cmake""
	VERSION ${PACKAGE_VERSION}
	COMPATIBILITY AnyNewerVersion
)

export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/BelleSIPTargets.cmake""
)

configure_package_config_file(cmake/BelleSIPConfig.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/BelleSIPConfig.cmake""
  	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
  	NO_SET_AND_CHECK_MACRO
)

install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE BelleSIPTargets.cmake
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

#Yes, an install directive is necessary. The INSTALL_DESTINATION parameter of configure_package_config_file() above does NOTHING.
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/BelleSIPConfig.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/BelleSIPConfigVersion.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()
",3.1,3.1
16433,jaagr,lemonbuddy,False,False,False,False,False,98,C++,2020-05-16 21:19:13+00:00,2016-05-19 14:16:23+00:00,6749,1654,"#
# Build configuration
#
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# Enable ccache by default and as early as possible because project() performs
# checks on the compiler
option(ENABLE_CCACHE ""Enable ccache support"" ON)
if(ENABLE_CCACHE)
  message(STATUS ""Trying to enable ccache"")
  find_program(BIN_CCACHE ccache)

  string(ASCII 27 esc)
  if(NOT BIN_CCACHE)
    message(STATUS ""${esc}[33mCouldn't locate ccache, disabling ccache...${esc}[0m"")
  else()
    # Enable only if the binary is found
    message(STATUS ""${esc}[32mUsing compiler cache ${BIN_CCACHE}${esc}[0m"")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${BIN_CCACHE})
  endif()
endif()

project(polybar CXX)

# Extract version information from version.txt. The first line that looks like
# a version string is used, so the file supports comments
file(STRINGS version.txt version_txt REGEX ""^[0-9]+\\.[0-9]+\\.[0-9]+.*$"" LIMIT_COUNT 1)

# If we are in a git repo we can get the version information from git describe
execute_process(COMMAND git describe --tags --dirty=-dev
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  RESULT_VARIABLE git_result
  OUTPUT_VARIABLE git_describe
  OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)

if(git_result EQUAL ""0"")
  set(APP_VERSION ""${git_describe}"")
else()
  message(STATUS ""Could not detect version with git, falling back to built-in version information."")
  set(APP_VERSION ""${version_txt}"")
endif()

set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH}
  ${PROJECT_SOURCE_DIR}/cmake
  ${PROJECT_SOURCE_DIR}/cmake/common
  ${PROJECT_SOURCE_DIR}/cmake/modules)

include(GNUInstallDirs)
include(utils)
include(01-core)
include(02-opts)
include(03-libs)
include(04-targets)
include(05-summary)

if(BUILD_DOC)
  add_subdirectory(doc)
endif()
add_subdirectory(contrib/bash)
add_subdirectory(contrib/zsh)
add_subdirectory(include)
add_subdirectory(lib)
add_subdirectory(src bin)

# We need to enable testing in the root folder so that 'ctest' and 'make test'
# can be run in the build directory
if(BUILD_TESTS)
  enable_testing()
  add_subdirectory(tests)
endif()


#
# Generate configuration file
#

set(MODULES_LEFT ""bspwm i3"")
set(MODULES_CENTER ""mpd"")
set(MODULES_RIGHT ""filesystem xbacklight alsa pulseaudio xkeyboard memory cpu wlan eth battery temperature date powermenu"")

set(FONT_FIXED ""fixed:pixelsize=10"")
set(FONT_UNIFONT ""unifont:fontformat=truetype"")
set(FONT_SIJI ""siji:pixelsize=10"")

queryfont(FONT_FIXED ${FONT_FIXED} FIELDS family pixelsize)
queryfont(FONT_UNIFONT ${FONT_UNIFONT} FIELDS family fontformat)
queryfont(FONT_SIJI ${FONT_SIJI} FIELDS family pixelsize)

# Strip disabled modules {{{

if(NOT ENABLE_PULSEAUDIO)
  string(REPLACE "" pulseaudio"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT ENABLE_ALSA)
  string(REPLACE "" alsa"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT ENABLE_I3)
  string(REPLACE "" i3"" """" MODULES_LEFT ${MODULES_LEFT})
endif()
if(NOT ENABLE_MPD)
  string(REPLACE ""mpd"" """" MODULES_CENTER ${MODULES_CENTER})
endif()
if(NOT ENABLE_NETWORK)
  string(REPLACE "" wlan eth"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT WITH_XRANDR)
  string(REPLACE ""xbacklight "" ""backlight-acpi "" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT WITH_XKB)
  string(REPLACE ""xkeyboard "" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()

# }}}
# Get battery/adapter name {{{

string(REGEX REPLACE /%battery%.* """" PATH_BAT ${SETTING_PATH_BATTERY})
string(REGEX REPLACE /%adapter%.* """" PATH_ADP ${SETTING_PATH_ADAPTER})
file(GLOB BAT_LIST RELATIVE ${PATH_BAT} ${PATH_ADP}/B*)
file(GLOB ADP_LIST RELATIVE ${PATH_ADP} ${PATH_ADP}/A*)
if(BAT_LIST)
  list(GET BAT_LIST 0 BATTERY)
else()
  set(BATTERY BAT0)
endif()
if(ADP_LIST)
  list(GET ADP_LIST 0 ADAPTER)
else()
  set(ADAPTER ADP1)
endif()

# }}}
# Get network interfaces {{{

if(ENABLE_NETWORK)
  file(GLOB IFLIST RELATIVE /sys/class/net /sys/class/net/*)
  foreach(INTERFACE ${IFLIST})
    if(NOT ${INTERFACE} STREQUAL ""lo"")
      file(GLOB IS_WIRELESS /sys/class/net/${INTERFACE}/wireless)
      if(IS_WIRELESS)
        set(INTERFACE_WLAN ${INTERFACE})
      else()
        set(INTERFACE_ETH ${INTERFACE})
      endif()
    endif()
  endforeach()
  if(NOT INTERFACE_ETH)
    set(INTERFACE_ETH net0)
  endif()
  if(NOT INTERFACE_WLAN)
    set(INTERFACE_WLAN net1)
  endif()
endif()

# }}}
# Configure and install {{{

configure_file(
  ${CMAKE_CURRENT_LIST_DIR}/config.cmake
  ${CMAKE_CURRENT_LIST_DIR}/config
  ESCAPE_QUOTES @ONLY)

install(FILES config
  DESTINATION ${CMAKE_INSTALL_DOCDIR}
  COMPONENT config)

# }}}
",3.1.0,3.1
16499,lxde,libfm-qt,False,False,False,False,False,108,C++,2020-05-17 05:46:50+00:00,2015-11-25 03:41:47+00:00,31,1208,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(libfm-qt)

set(LIBFM_QT_LIBRARY_NAME ""fm-qt"" CACHE STRING ""fm-qt"")

set(LIBFM_QT_API_VERSION_MAJOR 0)
set(LIBFM_QT_API_VERSION_MINOR 15)
set(LIBFM_QT_API_VERSION_PATCH 1)
set(LIBFM_QT_API_VERSION ${LIBFM_QT_API_VERSION_MAJOR}.${LIBFM_QT_API_VERSION_MINOR}.${LIBFM_QT_API_VERSION_PATCH})

list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")

# We use the libtool versioning scheme for the internal so name, ""current:revision:age""
# https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html#Updating-version-info
# https://www.sourceware.org/autobook/autobook/autobook_91.html
# http://pusling.com/blog/?p=352
# Actually, libtool uses different ways on different operating systems. So there is no
# universal way to translate a libtool version-info to a cmake version.
# We use ""(current-age).age.revision"" as the cmake version.
# current: 6, revision: 0, age: 0 => version: 6.0.0
set(LIBFM_QT_ABI_VERSION ""7.0.0"")
set(LIBFM_QT_SOVERSION ""7"")

set(GLIB_MINIMUM_VERSION ""2.50.0"")
set(LIBMENUCACHE_MINIMUM_VERSION ""1.1.0"")
set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5Widgets ""${QT_MINIMUM_VERSION}"" REQUIRED)
find_package(Qt5LinguistTools ""${QT_MINIMUM_VERSION}"" REQUIRED)
find_package(Qt5X11Extras ""${QT_MINIMUM_VERSION}"" REQUIRED)

find_package(lxqt-build-tools ""${LXQTBT_MINIMUM_VERSION}"" REQUIRED)
find_package(GLIB ""${GLIB_MINIMUM_VERSION}"" REQUIRED COMPONENTS gio gio-unix gobject gthread)
find_package(MenuCache ""${LIBMENUCACHE_MINIMUM_VERSION}"" REQUIRED)
find_package(Exif REQUIRED)
find_package(XCB REQUIRED)

message(STATUS ""Building ${PROJECT_NAME} with Qt ${Qt5Core_VERSION}"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
include(GNUInstallDirs)
include(GenerateExportHeader)
include(CMakePackageConfigHelpers)
include(LXQtPreventInSourceBuilds)
include(LXQtTranslateTs)
include(LXQtTranslateDesktop)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

set(CMAKE_AUTOMOC TRUE)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${LIBFM_QT_LIBRARY_NAME}-config-version.cmake""
    VERSION ${LIBFM_QT_API_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${LIBFM_QT_LIBRARY_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${LIBFM_QT_LIBRARY_NAME}""
    COMPONENT Devel
)

add_subdirectory(src)
add_subdirectory(data)

# add Doxygen support to generate API docs
# References:
# https://majewsky.wordpress.com/2010/08/14/tip-of-the-day-cmake-and-doxygen/
option(BUILD_DOCUMENTATION ""Use Doxygen to create the HTML based API documentation"" OFF)
if(BUILD_DOCUMENTATION)
    find_package(Doxygen REQUIRED)
    configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in"" ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile"" @ONLY)
    add_custom_target(doc ALL
        ${DOXYGEN_EXECUTABLE} ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile""
        WORKING_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}""
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )
    install(DIRECTORY
        ""${CMAKE_CURRENT_BINARY_DIR}/docs""
        DESTINATION ""${CMAKE_INSTALL_DOCDIR}""
        COMPONENT Devel
    )
endif()
",3.1.0,3.1
16531,jrfonseca,drmingw,False,False,False,False,False,6,C++,2020-01-15 13:41:28+00:00,2014-04-29 22:03:44+00:00,172,619,"cmake_minimum_required (VERSION 3.1)


project (drmingw)


set (CPACK_PACKAGE_VERSION_MAJOR ""0"")
set (CPACK_PACKAGE_VERSION_MINOR ""9"")
set (CPACK_PACKAGE_VERSION_PATCH ""2"")


option (ENABLE_COVERAGE ""Enable code coverage."" OFF)


##############################################################################
# Dependencies

if (NOT MINGW OR CYGWIN)
    message (FATAL_ERROR ""MinGW toolchain required"")
endif ()

set (CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package (WinDbg)

# Ensure frame-pointer is never omitted on debug builds
set (CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -fno-omit-frame-pointer"")
set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer"")
set (CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer"")
set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer"")

include_directories (
    ${CMAKE_SOURCE_DIR}/thirdparty/elf
    ${CMAKE_SOURCE_DIR}/thirdparty/dwarf
    ${CMAKE_SOURCE_DIR}/thirdparty/libiberty
    ${CMAKE_SOURCE_DIR}/thirdparty/zlib
)

add_subdirectory (thirdparty/dwarf)
add_subdirectory (thirdparty/libiberty)
add_subdirectory (thirdparty/zlib)

if (CMAKE_VERSION VERSION_LESS 3.16)
    # Find dlltool
    get_filename_component (GCC_NAME ${CMAKE_C_COMPILER} NAME)
    string (REGEX REPLACE g?cc dlltool DLLTOOL_NAME ${GCC_NAME})
    if (NOT DLLTOOL_NAME MATCHES dlltool)
        message (FATAL_ERROR ""Best guessing the file name of dlltool failed: ${DLLTOOL_NAME}"")
    endif ()
    find_program (DLLTOOL NAMES ${DLLTOOL_NAME})
    if (DLLTOOL)
        message (STATUS ""Found dlltool: ${DLLTOOL}"")
    else ()
        message (FATAL_ERROR ""dlltool not found"")
    endif ()
else ()
    set (DLLTOOL ""${CMAKE_DLLTOOL}"")
endif ()


##############################################################################
# Set global build options

include (CheckCXXCompilerFlag)

macro (add_compiler_flags)
    string (REPLACE "";"" "" "" _FLAGS ""${ARGV}"")
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${_FLAGS}"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${_FLAGS}"")
endmacro ()

macro (add_linker_flags)
    string (REPLACE "";"" "" "" _FLAGS ""${ARGV}"")
    set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${_FLAGS}"")
    set (CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${_FLAGS}"")
    set (CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${_FLAGS}"")
endmacro ()

# We require at least GCC 4.9 for decent C++11 support
if (NOT CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" OR
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.9"")
    message (FATAL_ERROR ""GCC 4.9 or newer required"")
endif ()
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")

# Adjust warnings
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Werror=implicit-function-declaration -Werror=missing-prototypes"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")

# Disable strict aliasing rules
add_compiler_flags (-fno-strict-aliasing)

# Avoid depending on MinGW runtime DLLs
check_cxx_compiler_flag (-static-libgcc HAVE_STATIC_LIBGCC_FLAG)
if (HAVE_STATIC_LIBGCC_FLAG)
    add_linker_flags (-static-libgcc)
endif ()
check_cxx_compiler_flag (-static-libstdc++ HAVE_STATIC_LIBSTDCXX_FLAG)
if (HAVE_STATIC_LIBSTDCXX_FLAG)
    add_linker_flags (-static-libstdc++)
endif ()

# Enable stack protection
add_compiler_flags (-fstack-protector-all)
# MinGW doesn't link against libssp automatically, and furthermore
# we want static linking.
set (SSP_LIBRARY ""-Wl,-Bstatic -lssp -Wl,-Bdynamic"")
set (CMAKE_C_STANDARD_LIBRARIES ""${SSP_LIBRARY} ${CMAKE_C_STANDARD_LIBRARIES}"")
set (CMAKE_CXX_STANDARD_LIBRARIES ""${SSP_LIBRARY} ${CMAKE_CXX_STANDARD_LIBRARIES}"")

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    add_definitions (-DHAVE_WIN64=1)
else ()
    add_linker_flags (-Wl,--enable-stdcall-fixup)
    add_definitions (-DHAVE_WIN64=0)
endif ()

# Put all executables into top-level bin subdirectory
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

add_definitions (
    # minimum required OS version
    -D_WIN32_WINNT=0x0601
    -DWINVER=0x0601
    # https://msdn.microsoft.com/en-gb/library/windows/desktop/ms683198.aspx
    -DPSAPI_VERSION=1

    # version
    -DPACKAGE_VERSION_MAJOR=${CPACK_PACKAGE_VERSION_MAJOR}
    -DPACKAGE_VERSION_MINOR=${CPACK_PACKAGE_VERSION_MINOR}
    -DPACKAGE_VERSION_PATCH=${CPACK_PACKAGE_VERSION_PATCH}
)

# Macro to force using debug flags, regardless of the current build type
macro (force_debug)
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}"")
    set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_DEBUG}"")
    set (CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS_DEBUG}"")
    set (CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}"")
    foreach (build_type DEBUG RELEASE MINSIZEREL RELWITHDEBINFO)
        set (CMAKE_C_FLAGS_${build_type} """")
        set (CMAKE_CXX_FLAGS_${build_type} """")
        set (CMAKE_EXE_LINKER_FLAGS_${build_type} """")
        set (CMAKE_MODULE_LINKER_FLAGS_${build_type} """")
        set (CMAKE_SHARED_LINKER_FLAGS_${build_type} """")
    endforeach ()
endmacro ()


##############################################################################
# Targets

enable_testing ()
add_custom_target (check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure)

include_directories (${CMAKE_CURRENT_SOURCE_DIR}/include)
install (FILES include/exchndl.h DESTINATION include)

set (MGWHELP_IMPLIB ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/libmgwhelp.a)
set (EXCHNDL_IMPLIB ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/libexchndl.a)

add_subdirectory (src)
add_subdirectory (sample)
add_subdirectory (tests)


##############################################################################
# Packaging

install (
    FILES
        LICENSE.txt
        README.md
    DESTINATION doc
)

# cpack mistakenly detects Mingw-w64 as win32
if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set (CPACK_SYSTEM_NAME win64)
endif ()

set (CPACK_GENERATOR ""7Z"")

set (CPACK_STRIP_FILES ON)

include(CPack)
",3.1,3.1
16638,fukuchi,libqrencode,False,False,False,False,False,26,C,2020-02-23 06:20:02+00:00,2011-02-25 09:11:52+00:00,1520,768,"cmake_minimum_required(VERSION 3.1.0)

project(QRencode VERSION 4.1.0 LANGUAGES C)

option(WITH_TOOLS ""Build utility tools""  YES )
option(WITH_TESTS ""Build tests""  NO )
option(WITHOUT_PNG ""Disable PNG support"" NO)
option(GPROF ""Generate extra code to write profile information"" OFF)
option(COVERAGE ""Generate extra code to write coverage information"" OFF)
option(ASAN ""Use AddressSanitizer"" OFF)
option(BUILD_SHARED_LIBS ""Enable build of shared libraries"" NO)

if(BUILD_TESTING)
    set(WITH_TESTS ON)
    message(DEPRECATION ""use WITH_TESTS option instead BUILD_TESTING"")
endif()

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads)
find_package(PNG)
find_package(Iconv)

if(CMAKE_USE_PTHREADS_INIT)
    add_definitions(-DHAVE_LIBPTHREAD=1)
    # for libqrencode.pc
    set(LIBPTHREAD ${CMAKE_THREAD_LIBS_INIT})
endif()

## Check for system include files
include(CheckIncludeFile)
include(CheckFunctionExists)

check_include_file(dlfcn.h    HAVE_DLFCN_H   )
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(memory.h   HAVE_MEMORY_H  )
check_include_file(stdint.h   HAVE_STDINT_H  )
check_include_file(stdlib.h   HAVE_STDLIB_H  )
check_include_file(strings.h  HAVE_STRINGS_H )
check_include_file(string.h   HAVE_STRING_H  )
check_include_file(getopt.h   HAVE_GETOPT_H  )
check_include_file(sys/time.h HAVE_SYS_TIME_H)

check_function_exists(strdup HAVE_STRDUP)

if(HAVE_STRDUP)
    add_definitions(-DHAVE_STRDUP=1)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
endif()

if(GPROF)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pg"")
endif()

if(COVERAGE)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} --coverage"")
endif()

if(ASAN)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"")
endif()

add_definitions(-DMAJOR_VERSION=${PROJECT_VERSION_MAJOR})
add_definitions(-DMINOR_VERSION=${PROJECT_VERSION_MINOR})
add_definitions(-DMICRO_VERSION=${PROJECT_VERSION_PATCH})
add_definitions(-DVERSION=""${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"")
add_definitions(-DHAVE_SDL=0)

if(MSVC)
    set(CMAKE_DEBUG_POSTFIX ""d"")

    add_definitions(-Dstrcasecmp=_stricmp)
    add_definitions(-Dstrncasecmp=_strnicmp)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
    
    if(WITH_TOOLS)
        find_path(GETOPT_INCLUDE_DIR getopt.h PATH_SUFFIXES include)
        find_library(GETOPT_LIBRARIES wingetopt PATH_SUFFIXES lib)
        include_directories(${GETOPT_INCLUDE_DIR})
    endif(WITH_TOOLS)
endif(MSVC)

set(QRENCODE_SRCS qrencode.c
                  qrinput.c
                  bitstream.c
                  qrspec.c
                  rsecc.c
                  split.c
                  mask.c
                  mqrspec.c
                  mmask.c)

set(QRENCODE_HDRS qrencode_inner.h
                  qrinput.h
                  bitstream.h
                  qrspec.h
                  rsecc.h
                  split.h
                  mask.h
                  mqrspec.h
                  mmask.h)

if(BUILD_SHARED_LIBS)
    if(MSVC)
        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    endif()
    add_library(qrencode SHARED ${QRENCODE_SRCS} ${QRENCODE_HDRS})
    set_target_properties(qrencode PROPERTIES VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH} SOVERSION ${PROJECT_VERSION_MAJOR})
else()
    add_library(qrencode ${QRENCODE_SRCS} ${QRENCODE_HDRS})
endif()
if(CMAKE_USE_PTHREADS_INIT)
    target_link_libraries(qrencode Threads::Threads)
endif()

include(GNUInstallDirs)
set(prefix ""${CMAKE_INSTALL_PREFIX}"")
set(exec_prefix ""${CMAKE_INSTALL_FULL_BINDIR}"")
set(libdir ""${CMAKE_INSTALL_FULL_LIBDIR}"")
set(includedir ""${CMAKE_INSTALL_FULL_INCLUDEDIR}"")
set(VERSION ""${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"")

configure_file(qrencode.1.in qrencode.1 @ONLY)
configure_file(libqrencode.pc.in libqrencode.pc @ONLY)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/qrencode.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libqrencode.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
install(FILES qrencode.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(TARGETS qrencode DESTINATION ${CMAKE_INSTALL_LIBDIR})

## Build utility tools
if(WITH_TOOLS)
    if(NOT WITHOUT_PNG)
        add_definitions(-DHAVE_PNG=1)
    endif()
    add_executable(qrenc qrenc.c)
    set_target_properties(qrenc PROPERTIES OUTPUT_NAME qrencode)

    target_link_libraries(qrenc qrencode PNG::PNG)

    if(MSVC)
        target_link_libraries(qrenc ${GETOPT_LIBRARIES})
    endif(MSVC)

    install(TARGETS qrenc DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()

if(WITH_TESTS)
    enable_testing()
    add_definitions(-DWITH_TESTS=)
    add_definitions(-DSTATIC_IN_RELEASE=)
    add_subdirectory(tests)
else()
    add_definitions(-DSTATIC_IN_RELEASE=static)
endif()

## ==============================================================================
##
##  Configuration summary
##
## ==============================================================================

message(STATUS ""------------------------------------------------------------"" )
message(STATUS ""[QRencode] Configuration summary.""                            )
message(STATUS ""------------------------------------------------------------ "")
message(STATUS "" System configuration:""                                       )
message(STATUS "" .. Processor type .............. = ${CMAKE_SYSTEM_PROCESSOR}"")
message(STATUS "" .. CMake executable ............ = ${CMAKE_COMMAND}""         )
message(STATUS "" .. CMake version ............... = ${CMAKE_VERSION}""         )
message(STATUS "" .. System name ................. = ${CMAKE_SYSTEM}""          )
message(STATUS "" .. C++ compiler ................ = ${CMAKE_CXX_COMPILER}""    )
message(STATUS "" .. C compiler .................. = ${CMAKE_C_COMPILER}""      )
message(STATUS "" .. size(void*) ................. = ${CMAKE_SIZEOF_VOID_P}""   )
message(STATUS "" Dependencies:""                                               )
#message(STATUS "" .. Doxygen ..................... = ${DOXYGEN_EXECUTABLE}""    )
message(STATUS "" .. Thread library of the system  = ${CMAKE_THREAD_LIBS_INIT}"")
message(STATUS "" .. Iconv ....................... = ${ICONV_FOUND}""           )
message(STATUS "" .... Iconv includes ............ = ${ICONV_INCLUDE_DIR}""     )
message(STATUS "" .... Iconv library ............. = ${ICONV_LIBRARIES}""       )
message(STATUS "" .. ZLIB ........................ = ${ZLIB_FOUND}""            )
message(STATUS "" .. PNG ......................... = ${PNG_FOUND}""             )
message(STATUS "" .... PNG includes .............. = ${PNG_INCLUDE_DIR}""       )
message(STATUS "" .... PNG library ............... = ${PNG_LIBRARIES}""         )
#message(STATUS "" .. Memory checker .............. = ${MEMORYCHECK_COMMAND}""   )
message(STATUS "" Project configuration:""                                      )
message(STATUS "" .. Build test programs  ........ = ${WITH_TESTS}""            )
message(STATUS "" .. Build utility tools  ........ = ${WITH_TOOLS}""            )
message(STATUS "" .. Disable PNG support  ........ = ${WITHOUT_PNG}""           )
message(STATUS "" .. Installation prefix ......... = ${CMAKE_INSTALL_PREFIX}""  )
message(STATUS ""------------------------------------------------------------ "")
",3.1.0,3.1
16750,ComputationalRadiationPhysics,QonGPU,False,False,False,False,False,4,C++,2019-01-15 01:41:39+00:00,2016-03-15 08:40:43+00:00,4,213,"cmake_minimum_required(VERSION 3.10)
project(QonGPU)

set(CMAKE_CXX_STANDARD 14)

include_directories(src/QonGPU/include)
include_directories(src/QonGPU/include/dynamic)
include_directories(src/QonGPU/include/output)
include_directories(src/QonGPU/include/params)
include_directories(src/QonGPU/include/potentials)
include_directories(src/QonGPU/include/static)

add_executable(QonGPU
        src/QonGPU/include/dynamic/CNKernels.h
        src/QonGPU/include/dynamic/ComplexOperators.h
        src/QonGPU/include/dynamic/CrankNicolson1D.cpp
        src/QonGPU/include/dynamic/CrankNicolson1D.hpp
        src/QonGPU/include/dynamic/cusparse_ops.hxx
        src/QonGPU/include/dynamic/MatrixGeneration.h
        src/QonGPU/include/dynamic/MemFunctors.h
        src/QonGPU/include/dynamic/spike_kernel.hxx
        src/QonGPU/include/dynamic/ThomasSerial.h
        src/QonGPU/include/dynamic/TimeOperator.hpp
        src/QonGPU/include/dynamic/TimeOperator1D.hpp
        src/QonGPU/include/dynamic/TimeOperator2D.hpp
        src/QonGPU/include/dynamic/TimeOperator3D.hpp
        src/QonGPU/include/dynamic/TridiagMult.h
        src/QonGPU/include/output/IOHandle.hpp
        src/QonGPU/include/output/IOHandle1D.cpp
        src/QonGPU/include/output/IOHandle1D.h
        src/QonGPU/include/params/Params.hpp
        src/QonGPU/include/params/Params1D.hpp
        src/QonGPU/include/params/Params2D.hpp
        src/QonGPU/include/params/Params3D.hpp
        src/QonGPU/include/potentials/Core1D.hpp
        src/QonGPU/include/potentials/Potential.hpp
        src/QonGPU/include/potentials/Potential1D.hpp
        src/QonGPU/include/potentials/Potential2D.hpp
        src/QonGPU/include/potentials/Potential3D.hpp
        src/QonGPU/include/static/Numerov.cpp
        src/QonGPU/include/static/Numerov.hpp
        src/QonGPU/include/static/Numerov1D.hpp
        src/QonGPU/include/static/StaticSolver.hpp
        src/QonGPU/include/static/StaticSolver1D.hpp
        src/QonGPU/include/static/StaticSolver2D.hpp
        src/QonGPU/include/static/StaticSolver3D.hpp
        src/QonGPU/include/AllHeader.hpp
        src/QonGPU/include/Domain.hpp
        src/QonGPU/include/SimDef.hpp
        CMakeLists.txt)
",3.10,3.1
16843,PierreMarchand20,htool,False,False,False,False,False,4,C++,2020-05-08 16:53:33+00:00,2017-01-04 14:33:17+00:00,5,641,"#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 3.10)
if (${CMAKE_VERSION} VERSION_LESS 3.12)
	Project(Htool 
		VERSION 1.0
		LANGUAGES CXX)
else ()
	Project(Htool 
	VERSION 1.0
	DESCRIPTION ""A header only c++ library that provides Hierarchical matrices.""
	HOMEPAGE_URL ""https://github.com/PierreMarchand20/htool""
	LANGUAGES CXX)
endif ()

# To force c++11
if (${CMAKE_VERSION} VERSION_LESS 3.1)
	add_compile_options(-std=c++11)
elseif (${CMAKE_VERSION} VERSION_LESS 3.6.3 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL ""Intel"")
	add_compile_options(-std=c++11)
else()
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif ()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
	# To set default CMAKE_BUILD_TYPE
	set(default_build_type ""Release"")
	if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
		message(STATUS ""Setting build type to '${default_build_type}' as none was specified."")
		set(CMAKE_BUILD_TYPE ""${default_build_type}"" CACHE STRING ""Choose the type of build."" FORCE)
	endif()

	if (${CMAKE_BUILD_TYPE} STREQUAL Release_native)
		message(STATUS ""Setting build type to 'Release_native'."")
		set(CMAKE_BUILD_TYPE Release)
		SET(CMAKE_CXX_FLAGS  ""${CMAKE_C_FLAGS} -march=native"")
	endif()

	# Files to do find_package for some module
	list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake_modules"")

	# Information about compilation exported
	set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

	# Let's nicely support folders in IDE's
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
	
	# Testing only available if this is the main app
    # Note this needs to be done in the main CMakeLists
    # since it calls enable_testing, which must be in the
    # main CMakeLists.
	include(CTest)

    # # Docs only available if this is the main app
    # find_package(Doxygen)
    # if(Doxygen_FOUND)
	# add_subdirectory(docs)
    # else()
	# message(STATUS ""Doxygen not found, not building docs"")
    # endif()


endif()

# Options
option(HTOOL_WITH_EXAMPLES             ""Build htool examples ?"" ON)
option(HTOOL_WITH_GUI                  ""Build htool visualization tools ?"" OFF)
option(HTOOL_WITH_PYTHON_INTERFACE     ""Build htool visualization tools ?"" OFF)



#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
# MPI
find_package (MPI REQUIRED)
message(""-- MPI libraries found in "" ""${MPI_LIBRARIES}"")
message(""-- MPI include files found in "" ""${MPI_INCLUDE_PATH}"")
separate_arguments(MPIEXEC_PREFLAGS) # to support multi flags

# OPENMP
find_package(OpenMP)
if (OPENMP_FOUND)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
    message(""-- OpenMP flags are "" ""${OpenMP_CXX_FLAGS}"" )
    message(""-- OpenMP linker flags are "" ""${OpenMP_EXE_LINKER_FLAGS}"" )
else()
    message(""-- OpenMP not found"")
endif()

# BLAS
find_package(BLAS REQUIRED)
message(""-- Found Blas implementation:"" ""${BLAS_LIBRARIES}"")

# LAPACK
find_package(LAPACK)
message(""-- Found Lapack:"" ""${LAPACK_LIBRARIES}"")

# ARPACK
find_package(ARPACK)
message(""-- Found Arpack:"" ""${ARPACK_LIBRARIES}"")

# HPDDM
find_package(HPDDM)


if (HTOOL_WITH_GUI)
	# GLM
	find_package(GLM)
endif()

if (HTOOL_WITH_PYTHON_INTERFACE)
	if (${CMAKE_VERSION} VERSION_LESS 3.12)
		find_package (PythonLibs)
		set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS})
		set(Python_LIBRARIES ${PYTHON_LIBRARIES})
	else()
		find_package (Python COMPONENTS Interpreter Development)
	endif()
endif()

#=============================================================================#
#========================== Libraries ========================================#
#=============================================================================#
#=== GUI
if (HTOOL_WITH_GUI)
	#=== Nanogui and dependencies
	message(""-- Nanogui and its dependencies will be built as submodules"")
	execute_process(COMMAND git submodule update --init --recursive external/nanogui
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


	# Configuration options for nanogui
	set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL "" "" FORCE)
	set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL "" "" FORCE)
	set(NANOGUI_INSTALL       OFF CACHE BOOL "" "" FORCE)

	# Add the configurations from nanogui
	add_subdirectory(external/nanogui)

	# For reliability of parallel build, make the NanoGUI targets dependencies
	set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER ""dependencies"")

	# Various preprocessor definitions have been generated by NanoGUI
	add_definitions(${NANOGUI_EXTRA_DEFS})

	# On top of adding the path to nanogui/include, you may need extras
	include_directories(${NANOGUI_EXTRA_INCS})

	set(NANOGUI_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include"" )



	# Create an interface library
	add_library(htool_visu INTERFACE)
	target_include_directories(htool_visu INTERFACE ${NANOGUI_EXTRA_INCS} ${NANOGUI_INCLUDE_DIR} ${GLM_INCLUDE_DIRS})
	target_link_libraries(htool_visu INTERFACE
						nanogui
						${NANOGUI_EXTRA_LIBS})

endif()


#=== HTOOL as header only library
add_library(htool INTERFACE)
target_include_directories(htool INTERFACE
					$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
					$<INSTALL_INTERFACE:include>
					${MPI_INCLUDE_PATH}
					${HPDDM_INCLUDE_DIRS}
					${MKL_INC_DIR})
target_link_libraries(htool INTERFACE
					${MPI_LIBRARIES}
					${BLAS_LIBRARIES}
					${LAPACK_LIBRARIES}
					${ARPACK_LIBRARIES})

target_compile_features(htool INTERFACE cxx_std_11)

#=== HTOOL python interface as shared library
if (HTOOL_WITH_PYTHON_INTERFACE)
	add_library(htool_shared SHARED interface/htool_python.cpp)
	target_include_directories(htool_shared PRIVATE
						$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
						$<INSTALL_INTERFACE:include>
						${MPI_INCLUDE_PATH}
						${HPDDM_INCLUDE_DIRS}
						${MKL_INC_DIR}
						${Python_INCLUDE_DIRS})
	target_link_libraries(htool_shared
						${MPI_LIBRARIES}
						${BLAS_LIBRARIES}
						${LAPACK_LIBRARIES}
						${Python_LIBRARIES})
	
	target_compile_features(htool_shared PRIVATE cxx_std_11)

	add_library(htool_shared_complex SHARED interface/htool_python.cpp)
	target_include_directories(htool_shared_complex PRIVATE
						$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
						$<INSTALL_INTERFACE:include>
						${MPI_INCLUDE_PATH}
						${HPDDM_INCLUDE_DIRS}
						${MKL_INC_DIR}
						${Python_INCLUDE_DIRS})
	target_link_libraries(htool_shared_complex
						${MPI_LIBRARIES}
						${BLAS_LIBRARIES}
						${LAPACK_LIBRARIES}
						${Python_LIBRARIES})

	target_compile_features(htool_shared_complex PRIVATE cxx_std_11)
	target_compile_options(htool_shared_complex PRIVATE -DFORCE_COMPLEX)
endif()

# For headers to show in IDE
if (NOT ""${CMAKE_VERSION}"" VERSION_LESS 3.1)
	target_sources(htool INTERFACE ${htool_include_dir})
endif()

#===
#=============================================================================#
#========================== Installation =====================================#
#=============================================================================#

# Define target to install
install(TARGETS htool
		EXPORT ${PROJECT_NAME}Targets
		PUBLIC_HEADER DESTINATION include)


# Build and install CMake helpers
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	""${PROJECT_NAME}ConfigVersion.cmake""
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
	""${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in""
	""${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
	INSTALL_DESTINATION lib/cmake/${PROJECT_NAME}
)

install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake
        NAMESPACE ${PROJECT_NAME}::
		DESTINATION lib/cmake/${PROJECT_NAME})


install(FILES ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake""
				""${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
		DESTINATION lib/cmake/${PROJECT_NAME})

###### install files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)

#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
# Add examples
if (HTOOL_WITH_EXAMPLES)
	add_custom_target(build-examples)
	add_subdirectory(examples EXCLUDE_FROM_ALL)
endif()

# Add tests
if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR MODERN_CMAKE_BUILD_TESTING) AND BUILD_TESTING)
	add_custom_target(build-tests)
	add_subdirectory(tests EXCLUDE_FROM_ALL)
endif()


add_subdirectory(src EXCLUDE_FROM_ALL)

#
#
# # Testing project
# enable_testing()
# add_test(NAME lrmatrix_test COMMAND Test_lrmatrix)
# add_test(NAME hmatrix_test COMMAND Test_hmatrix)
# add_test(NAME cluster_test COMMAND Test_cluster)
# # Add documentation
# add_subdirectory(doc)
",3.10,3.1
17174,fluxroot,pulse,False,False,False,False,False,2,Java,2020-05-11 21:25:41+00:00,2013-06-28 18:52:06+00:00,40,505,"cmake_minimum_required(VERSION 3.10)
project(pulse VERSION 2.0.0)

if (CMAKE_SYSTEM_NAME STREQUAL Windows)
    set(PLATFORM_SUFFIX windows)
    set(CPACK_GENERATOR ZIP)
elseif (CMAKE_SYSTEM_NAME STREQUAL Linux)
    set(PLATFORM_SUFFIX linux)
    set(CPACK_GENERATOR TGZ)
else ()
    message(FATAL_ERROR ""Unknown platform ${CMAKE_SYSTEM_NAME}"")
endif ()

set(CPACK_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}-cpp-${PLATFORM_SUFFIX}-${pulse_VERSION}"")
include(CPack)

enable_testing()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

add_subdirectory(src/main/cpp)
add_subdirectory(src/test/cpp)

install(FILES README.md LICENSE CHANGES.md src/dist/logo.bmp DESTINATION .)
",3.10,3.1
17316,votca,tools,False,False,False,False,False,17,C++,2020-05-13 05:11:40+00:00,2014-09-09 20:18:43+00:00,2,2092,"cmake_minimum_required(VERSION 3.10)

project(votca-tools)

set(PROJECT_VERSION ""1.7-dev"")
string(REGEX REPLACE ""^[1-9]+\\.([1-9]+).*$"" ""\\1"" SOVERSION ""${PROJECT_VERSION}"")
if (NOT ${SOVERSION} MATCHES ""[1-9]+"")
  message(FATAL_ERROR ""Could not determind SOVERSION from ${PROJECT_VERSION}"")
endif (NOT ${SOVERSION} MATCHES ""[1-9]+"")

# Cmake modules/macros are in a subdirectory to keep this file cleaner
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
  #release comes with -O3 by default
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)

enable_language(CXX)



######################################################################
# compiler tests
# these need ot be done early (before further tests).
#####################################################################

include(CheckCXXCompilerFlag)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) #...without compiler extensions like gnu++11


########################################################################
# User input options                                                   #
########################################################################
option(BUILD_SHARED_LIBS ""Build shared libs"" ON)
include(GNUInstallDirs)
include(FeatureSummary)

option(ENABLE_TESTING ""Build and enable testing stuff"" OFF)
add_feature_info(ENABLE_TESTING ENABLE_TESTING ""Enable unit tests"")
if(ENABLE_TESTING)
  enable_testing()
  include(FindPackageHandleStandardArgs) 
  find_program(VALGRIND_EXECUTABLE ""valgrind"")
  find_package_handle_standard_args(VALGRIND REQUIRED_VARS VALGRIND_EXECUTABLE)
endif(ENABLE_TESTING)

########################################################################
#Find external packages
########################################################################
if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  find_package(Git)
  set_package_properties(Git PROPERTIES TYPE OPTIONAL PURPOSE ""Generates version for development version"")
endif(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)

find_package(Threads REQUIRED)
set_package_properties(Threads PROPERTIES TYPE REQUIRED PURPOSE ""Used for thread parallelization"")

find_package(Boost 1.53.0 REQUIRED COMPONENTS program_options filesystem system )
set_package_properties(Boost PROPERTIES TYPE REQUIRED PURPOSE ""Extended C++ libraries"")

option(BUILD_MANPAGES ""Build manpages (might lead to problem on system without rpath"" ON)
add_feature_info(BUILD_MANPAGES BUILD_MANPAGES ""Build manpages (disable for cross-compile)"")
#define this target here, so that individual man pages can append to it.
add_custom_target(manpages ALL)

########################################################################
# Checks what linear algebra packages are installed                    #
########################################################################
set(MKL_THREAD_LAYER ""Intel OpenMP"" CACHE STRING ""The thread layer to choose for MKL"")
find_package(MKL)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set_package_properties(MKL PROPERTIES TYPE OPTIONAL PURPOSE ""Enables accelerated performance with MKL"")
endif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)

find_package(Eigen3 3.3.0 NO_MODULE REQUIRED)
set_package_properties(Eigen3 PROPERTIES TYPE REQUIRED PURPOSE ""C++ vector data structures"")
message(STATUS ""Found Eigen3: ${Eigen3_DIR}"")

find_package(FFTW3)
set_package_properties(FFTW3 PROPERTIES TYPE RECOMMENDED PURPOSE ""Enables FFT functionality"")

########################################################################
# Basic system tests (standard libraries, headers, functions, types)   #
########################################################################
include(CheckIncludeFile)
foreach(HEADER assert.h math.h stdio.h stdlib.h string.h)
  check_include_file(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

include(CheckIncludeFileCXX)
foreach(HEADER cmath fstream functional iostream limits list map ostream sstream stack stdexcept string vector)
  check_include_file_cxx(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

set(MATH_LIBRARIES ""m"" CACHE STRING ""math library"")
mark_as_advanced( MATH_LIBRARIES )
include(CheckLibraryExists)
foreach(FUNC sqrt)
  check_library_exists(${MATH_LIBRARIES} ${FUNC} """" FOUND_${FUNC}_${MATH_LIBRARIES})
  if(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
    message(FATAL_ERROR ""Could not find needed math function - ${FUNC}"")
  endif(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
endforeach(FUNC)

######################################
# Include the following subdirectory #
######################################
add_subdirectory(src)
add_subdirectory(include/votca/tools)
add_subdirectory(scripts)
add_subdirectory(share/man)

configure_file(${PROJECT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake IMMEDIATE @ONLY)
add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  feature_summary(INCLUDE_QUIET_PACKAGES WHAT ALL)
endif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
",3.10,3.1
17495,fastogt,common,False,False,False,False,False,1,C++,2020-05-16 09:06:19+00:00,2017-06-12 12:13:54+00:00,1,610,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0 FATAL_ERROR) # CMAKE_CXX_STANDARD

PROJECT(common VERSION 1.27.0.0 LANGUAGES CXX C)
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_STANDARD_REQUIRED ON)
#SET(CMAKE_C_EXTENSIONS OFF) commented for libev

SET(PROJECT_NAME_TITLE ${PROJECT_NAME} CACHE STRING ""Title for ${PROJECT_NAME}"")
SET(PROJECT_DOMAIN ""www.fastogt.com"" CACHE STRING ""Internet domain name for ${PROJECT_NAME}"")
SET(PROJECT_COMPANYNAME ""FastoGT"" CACHE STRING ""Company name for ${PROJECT_NAME}"")
SET(PROJECT_COPYRIGHT ""Copyright (C) 2014-2020 ${PROJECT_COMPANYNAME}. All Rights Reserved."")
SET(PROJECT_COMPANYNAME_DOMAIN ""www.fastogt.com"" CACHE STRING ""Internet domain name for ${PROJECT_NAME}"")
SET(PROJECT_MAINTAINER_MAIL ""atopilski@fastogt.com"" CACHE STRING ""Internet mail address for ${PROJECT_NAME} mainteiner"")
SET(PROJECT_MAINTAINER_NAME ""Alexandr Topilski"" CACHE STRING ""Name of ${PROJECT_NAME} mainteiner"")
SET(PROJECT_GITHUB_FORK ""www.github.com/fastogt/common"" CACHE STRING ""Git fork of ${PROJECT_NAME}"")
SET(PROJECT_GITHUB_ISSUES ""www.github.com/fastogt/common/issues"" CACHE STRING ""Git issue link for ${PROJECT_NAME}"")
SET(PROJECT_BUILD_TYPE_VERSION ""release"") #alfa, beta, rc, release

STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPERRCASE)

########################## Options #########################
OPTION(QT_ENABLED ""Enable Qt support"" OFF)
OPTION(IPV6_ENABLED ""Enable IPV6 connections"" ON)
OPTION(DEVELOPER_ENABLE_TESTS ""Enable tests for ${PROJECT_NAME_TITLE} project"" OFF)
OPTION(DEVELOPER_CHECK_STYLE ""Enable check style for ${PROJECT_NAME_TITLE} project"" OFF)
OPTION(DEVELOPER_GENERATE_DOCS ""Generate docs api for ${PROJECT_NAME_TITLE} project"" OFF)
OPTION(DEVELOPER_ENABLE_COVERALLS ""Generate coveralls data"" OFF)
OPTION(DEVELOPER_COVERALLS_UPLOAD ""Upload the generated coveralls json"" ON)
OPTION(DCHECK_ALWAYS_ON ""Enable dcheck in release."" OFF)
OPTION(BUILD_WITH_RTTI ""Build library with rtti flags."" ON)
OPTION(BUILD_WITH_FPIC ""Build static library with -fPic flags."" ON)

##################################DEFAULT VALUES##########################################
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE DEBUG)
ENDIF(NOT CMAKE_BUILD_TYPE)

# If the user did not customize the install prefix,
# set it to live under build so we don't inadvertently pollute /usr/local
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE PATH ""default install path"" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

IF(""${PROJECT_SOURCE_DIR}"" STREQUAL ""${PROJECT_BINARY_DIR}"")
  MESSAGE(SendError ""In-source builds are not allowed."")
ENDIF(""${PROJECT_SOURCE_DIR}"" STREQUAL ""${PROJECT_BINARY_DIR}"")

MESSAGE(STATUS ""CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}"")

############################################################################

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_LIST_DIR}/cmake"")
INCLUDE(config) ###################
DEFINE_DEFAULT_DEFINITIONS(${BUILD_WITH_RTTI} ${BUILD_WITH_FPIC} OFF)
DEFINE_PROJECT_DEFINITIONS()

# project sources
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
SET(PROJECT_VERSION_HUMAN ""${PROJECT_VERSION} Revision: ${PROJECT_VERSION_GIT}"")
ADD_DEFINITIONS(-DPROJECT_VERSION_HUMAN=""${PROJECT_VERSION_HUMAN}"")

IF(DEVELOPER_GENERATE_DOCS)
  CREATE_DOCS(${PROJECT_NAME_LOWERCASE} ${CMAKE_SOURCE_DIR}/docs/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
ENDIF(DEVELOPER_GENERATE_DOCS)

IF(DCHECK_ALWAYS_ON)
  ADD_DEFINITIONS(-DDCHECK_ALWAYS_ON)
ENDIF(DCHECK_ALWAYS_ON)

ADD_SUBDIRECTORY(src)

IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/.git/hooks/pre-commit)
  EXECUTE_PROCESS(COMMAND ${CMAKE_SOURCE_DIR}/scripts/create_pre_commit_hook.sh)
ENDIF(NOT EXISTS ${CMAKE_SOURCE_DIR}/.git/hooks/pre-commit)
",3.1.0,3.1
17601,LiangliangNan,PolyFit,False,False,False,False,False,3,C++,2020-05-01 18:11:31+00:00,2017-07-27 23:20:01+00:00,256,291,"cmake_minimum_required(VERSION 3.1)

get_filename_component(PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
project(PolyFit)

# One shouldn't generate the BUILD project directly in the SOURCES folder!
if ( ${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR} )
        if ( NOT SAME_BUILD_AND_SOURCE_FOLDER_WARNING_ALREADY_ISSUED )
                message(FATAL_ERROR ""It is not advised to BUILD the binaries directly in the SOURCE folder!\n If you want to proceed with this option, just CONFIGURE the project once again"" )
                set( SAME_BUILD_AND_SOURCE_FOLDER_WARNING_ALREADY_ISSUED TRUE )
        endif()
endif()

################################################################################

set (CMAKE_CXX_STANDARD 11)

################################################################################

# Detects whether this is a top-level project
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
        set(POLYFIT_TOPLEVEL_PROJECT ON)
else()
        set(POLYFIT_TOPLEVEL_PROJECT OFF)
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

################################################################################

### Configuration
set(POLYFIT_ROOT         ${CMAKE_CURRENT_LIST_DIR})
set(POLYFIT_INCLUDE_DIR  ${POLYFIT_ROOT}  ${CMAKE_CURRENT_BINARY_DIR})
set(POLYFIT_SOURCE_DIR   ${POLYFIT_ROOT})


set(POLYFIT_glpk_DIR                ${POLYFIT_ROOT}/3rd_glpk)
set(POLYFIT_lpsolve_DIR             ${POLYFIT_ROOT}/3rd_lpsolve)
set(POLYFIT_qglviewer_DIR           ${POLYFIT_ROOT}/3rd_QGLViewer-2.6.3)
set(POLYFIT_scip_DIR                ${POLYFIT_ROOT}/3rd_scip)
set(POLYFIT_soplex_DIR              ${POLYFIT_ROOT}/3rd_soplex)
set(POLYFIT_glew_DIR                ${POLYFIT_ROOT}/3rd_glew)

### conditionally compile certain modules depending on libraries found on the system
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)

find_package(Boost REQUIRED)

################################################################################

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${CMAKE_BINARY_DIR}/lib CACHE
    PATH ""Directory where all the .lib files are dumped."" FORCE)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${CMAKE_BINARY_DIR}/bin CACHE
    PATH ""Directory where .exe and .dll files are dumped."" FORCE)

################################################################################

add_subdirectory(3rd_glpk)
add_subdirectory(3rd_lpsolve)
add_subdirectory(3rd_QGLViewer-2.6.3)
add_subdirectory(3rd_scip)
add_subdirectory(3rd_soplex)
add_subdirectory(3rd_glew)

add_subdirectory(basic)
add_subdirectory(math)
add_subdirectory(method)
add_subdirectory(model)
add_subdirectory(renderer)
add_subdirectory(PolyFit)


",3.1,3.1
17658,espressopp,espressopp,False,False,False,False,False,19,C++,2020-04-22 07:42:56+00:00,2014-10-07 12:44:28+00:00,31,3196,"cmake_minimum_required(VERSION 3.10)

project(espressopp LANGUAGES CXX)

# Cmake modules/macros are in a subdirectory to keep this file cleaner
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

enable_testing()

######################################################################
# compiler tests
# these need ot be done early (before further tests).
#####################################################################

include(CheckCXXCompilerFlag)

# Check for C++11 standard
set(CMAKE_CXX_STANDARD 11) # C++11...
set(CMAKE_CXX_STANDARD_REQUIRED ON) #...is required...
set(CMAKE_CXX_EXTENSIONS OFF) #...without compiler extensions like gnu++11

########################################################################
# User input options                                                   #
########################################################################
option(EXTERNAL_BOOST ""Use external boost"" ON)
option(WITH_XTC ""Build with DumpXTC class (requires libgromacs)"" OFF)
option(BUILD_SHARED_LIBS ""Build shared libs"" ON)
if(NOT BUILD_SHARED_LIBS)
  message(WARNING ""Building static libraries might lead to problems with python modules - you are on your own!"")
endif()

option(USE_GCOV ""Enable gcov support"" OFF)
if(USE_GCOV)
  message(STATUS ""Enabling gcov support"")
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} --coverage -O0"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage -O0"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} --coverage"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} --coverage"")
endif()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.""
      FORCE)
endif()

########################################################################
#VampirTrace settings
########################################################################

set(VAMPIRTRACE False)

if(VAMPIRTRACE)
   set(VAMPIRTRACE_ROOT /people/thnfs/homes/stuehn/software)
   set(VAMPIRTRACE_LIBRARIES ${VAMPIRTRACE_ROOT}/lib/libvt-mpi.so
                             ${VAMPIRTRACE_ROOT}/lib/libotf.so)
   # Attention: VampirTrace should be included before MPI
   include_directories(${VAMPIRTRACE_ROOT}/include)
   add_definitions( -DVTRACE )
endif(VAMPIRTRACE)

########################################################################
#Process MPI settings
########################################################################

find_package(MPI REQUIRED COMPONENTS CXX)

########################################################################
#Process FFTW3 settings
########################################################################

find_package(FFTW3 REQUIRED)
include_directories(${FFTW3_INCLUDES})

########################################################################
#Process GROMACS settings
########################################################################

if(WITH_XTC)
  find_package(GROMACS REQUIRED)
  include_directories(${GROMACS_INCLUDE_DIRS})
  add_definitions( -DHAS_GROMACS ${GROMACS_DEFINITIONS})
endif()


########################################################################
#Process Python settings
########################################################################

find_package(PythonInterp 2 REQUIRED)

execute_process(COMMAND ${PYTHON_EXECUTABLE}
                -c ""import distutils.sysconfig as cg; print cg.get_python_inc()""
                OUTPUT_VARIABLE PYTHON_INCLUDE_PATH
                OUTPUT_STRIP_TRAILING_WHITESPACE)

set(PYTHON_INCLUDE_PATH ${PYTHON_INCLUDE_PATH} CACHE PATH ""Python Include Directory"")
mark_as_advanced(PYTHON_INCLUDE_PATH)

message(STATUS ""PYTHON_INCLUDE_PATH = ${PYTHON_INCLUDE_PATH}"")
include_directories(${PYTHON_INCLUDE_PATH})

if(NOT PYTHON_INSTDIR)
execute_process(COMMAND ${PYTHON_EXECUTABLE}
                -c ""import distutils.sysconfig as cg; print cg.get_python_lib(1,0,prefix='${CMAKE_INSTALL_EXEC_PREFIX}')""
                OUTPUT_VARIABLE PYTHON_INSTDIR OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

execute_process(COMMAND ${PYTHON_EXECUTABLE}
                        -c ""import sys; print sys.version[:3]""
                        OUTPUT_VARIABLE PYTHON_VERSION
                        OUTPUT_STRIP_TRAILING_WHITESPACE)

message(STATUS ""PYTHON_VERSION = ${PYTHON_VERSION}"")

execute_process(COMMAND ${PYTHON_EXECUTABLE}
                -c ""import distutils.sysconfig as cg; print cg.get_config_var('LIBDIR')""
                OUTPUT_VARIABLE PYTHON_LIBDIR
                OUTPUT_STRIP_TRAILING_WHITESPACE)

message(STATUS ""PYTHON_LIBDIR = ${PYTHON_LIBDIR}"")

find_library(PYTHON_LIBRARIES
             NAMES python${PYTHON_VERSION}
             PATHS ${PYTHON_LIBDIR}  )

if(NOT PYTHON_LIBRARIES)
  message(FATAL_ERROR ""Python libraries not found!"")
endif(NOT PYTHON_LIBRARIES)
message(STATUS ""PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}"")

mark_as_advanced(PYTHON_INCLUDE_PATH PYTHON_LIBRARIES)

########################################################################
# Basic system tests (standard libraries, headers, functions, types)   #
########################################################################
list(APPEND EXTRA_LIBRARIES ${CMAKE_DL_LIBS})

# this conflicts with mpi4py-1.3 (is used to check for MPI version there)
# add_definitions( -DHAVE_CONFIG_H )

# Minimum required Boost version is set to 1.58 (only because of travis)
# but the version in contrib is 1.61;

if (EXTERNAL_BOOST)
  set(NEEDED_Boost_VERSION 1.58.0)
  find_package(Boost ${NEEDED_Boost_VERSION} REQUIRED COMPONENTS mpi serialization system filesystem)
  set(Boost_LIBS ${Boost_LIBRARIES})
  if(${Boost_VERSION} VERSION_LESS 106700)
     find_package(Boost ${NEEDED_Boost_VERSION} REQUIRED COMPONENTS python)
  else()
     find_package(Boost ${NEEDED_Boost_VERSION} REQUIRED COMPONENTS python27)
  endif()
  
  # Append Python library to the list of Boost libraries.
  list(APPEND Boost_LIBS ${Boost_LIBRARIES})
  set(Boost_LIBRARIES ${Boost_LIBS})

  if(NOT Boost_FOUND)
    message(FATAL_ERROR ""Boost (required at least version ${NEEDED_Boost_VERSION}) not found, make sure you have installed boost and it's dev packages. To hint cmake to your Boost installation, use the option -DBOOST_ROOT=/path/to/boost. As last resort you can use our internal replacement with -DEXTERNAL_BOOST=OFF"")
  endif(NOT Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
else(EXTERNAL_BOOST)
  include_directories(${CMAKE_SOURCE_DIR}/contrib/boost)
  set(Boost_LIBRARIES espressopp_boost)
endif(EXTERNAL_BOOST)
include_directories(${CMAKE_SOURCE_DIR}/src)

option(EXTERNAL_MPI4PY ""Use external mpi4py"" ON)

if(EXTERNAL_MPI4PY)
  find_package(MPI4PY 1.3.1 REQUIRED)
  include_directories(${MPI4PY_INCLUDES})
else(EXTERNAL_MPI4PY)
  include_directories(${CMAKE_SOURCE_DIR}/contrib/mpi4py/mpi4py-2.0.0/src/include)
  set(MPI4PY_LIBRARIES MPI)
endif(EXTERNAL_MPI4PY)

# Required for acconfig.h
include_directories(${CMAKE_BINARY_DIR}/src)

if (${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
  set ( RT_LIBRARIES )
else()
  set ( RT_LIBRARIES rt )
endif()

######################################
# Include the following subdirectory #
######################################
add_subdirectory(src)
add_subdirectory(contrib)
if (EXTERNAL_MPI4PY)
  set (TEST_ENV ""PYTHONPATH=${CMAKE_BINARY_DIR}:$ENV{PYTHONPATH}"")
else (EXTERNAL_MPI4PY)
  set (TEST_ENV ""PYTHONPATH=${CMAKE_BINARY_DIR}:${CMAKE_BINARY_DIR}/contrib:$ENV{PYTHONPATH}"")
endif (EXTERNAL_MPI4PY)
add_subdirectory(testsuite)

add_custom_target(symlink ALL COMMENT ""Creating symlink"")
add_custom_command(TARGET symlink COMMAND ${CMAKE_COMMAND} -E create_symlink
  ${CMAKE_SOURCE_DIR}/src espressopp)

######################################
# System documentation (Doxygen)     #
######################################

find_package( Doxygen QUIET )

if ( DOXYGEN_FOUND )

    set ( DOXYGEN_BUILD_ROOT ""${CMAKE_SOURCE_DIR}/doc/dg"" )
    file ( MAKE_DIRECTORY ${DOXYGEN_BUILD_ROOT} )

   # The initial rm command gets rid of everything previously built by this
   # custom command.

   add_custom_command(
      OUTPUT ${DOXYGEN_BUILD_ROOT}/html/index.html
      COMMAND rm -rf ${DOXYGEN_BUILD_ROOT}/html
      COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_BUILD_ROOT}/doxygen.cfg
      COMMAND echo ""HTML documentation available at ${DOXYGEN_BUILD_ROOT}/html""
      DEPENDS ${DOXYGEN_BUILD_ROOT}/doxygen.cfg
      WORKING_DIRECTORY ${DOXYGEN_BUILD_ROOT}
   )

   add_custom_target(
      doc
      DEPENDS
      ${DOXYGEN_BUILD_ROOT}/html/index.html
   )

   message ( STATUS ""Generate system documentation via ${DOXYGEN_EXECUTABLE}: make doc"")

else ( DOXYGEN_FOUND )
    message ( WARNING ""Not building system documentation because Doxygen not found."")
endif ( DOXYGEN_FOUND )

######################################
# User documentation (Sphinx)     #
######################################

find_program(SPHINX_EXECUTABLE
  NAMES sphinx-build
  DOC ""Sphinx documentation generation tool (http://www.sphinx-doc.org/)""
)

if ( SPHINX_EXECUTABLE )

   set ( SPHINX_BUILD_ROOT ""${CMAKE_SOURCE_DIR}/doc/ug"" )

   add_custom_target(ug
      COMMAND ${CMAKE_COMMAND} -E env ""${TEST_ENV}"" ""${SPHINX_EXECUTABLE}"" -b html . _build/html
      COMMENT ""HTML ug documentation available at ${SPHINX_BUILD_ROOT}/_build/html""
      DEPENDS ${SPHINX_BUILD_ROOT}/conf.py _espressopp
      WORKING_DIRECTORY ${SPHINX_BUILD_ROOT}
   )

   message ( STATUS ""Generate user documentation via ${SPHINX_EXECUTABLE}: make ug"")

   add_custom_target(ug-pdf
      COMMAND ${CMAKE_COMMAND} -E env ""${TEST_ENV}"" ""${SPHINX_EXECUTABLE}"" -b latex . _build/latex
      COMMAND make -C ""${SPHINX_BUILD_ROOT}/_build/latex"" all-pdf
      COMMENT ""TeX ug documentation available at ${SPHINX_BUILD_ROOT}/_build/latex""
      DEPENDS ${SPHINX_BUILD_ROOT}/conf.py _espressopp
      WORKING_DIRECTORY ${SPHINX_BUILD_ROOT}
   )

   message ( STATUS ""Generate LaTeX manual via ${SPHINX_EXECUTABLE}: make ug-pdf"")
else ( SPHINX_EXECUTABLE )
    message ( WARNING ""Not building user documentation because Sphinx not found."")
endif ( SPHINX_EXECUTABLE )
",3.10,3.1
17985,lexborisov,Modest,False,False,False,False,False,8,C,2020-04-14 09:41:36+00:00,2016-08-28 21:17:24+00:00,500,278,"cmake_minimum_required (VERSION 3.10)


################
## Project
#########################
project(modest LANGUAGES C)


################
## User choices
#########################
option(MODEST_BUILD_SHARED ""Build shared library"" ON)
option(MODEST_BUILD_STATIC ""Build static library"" ON)
option(MyHTML_BUILD_WITHOUT_THREADS ""Build MyHTML without POSIX Threads"" OFF)
option(MyCORE_BUILD_WITHOUT_THREADS ""Build MyCORE without POSIX Threads"" OFF)
option(MODEST_INSTALL_HEADERS ""Install header files"" ON)
set(CMAKE_C_STANDARD 99 CACHE STRING ""desired compilation C standard: 90, 99, 11"")
#set_property(CACHE CMAKE_C_STANDARD PROPERTY STRINGS 90 99 11)
option(CMAKE_C_STANDARD_REQUIRED ""don't compile using a previous C standard if the one specified is not met"" ON)
#set(CMAKE_CXX_STANDARD 11 CACHE STRING ""desired compilation C++ standard: 98, 11, 14, 17, 20"")
#set_property(CACHE CMAKE_CXX_STANDARD PROPERTY STRINGS 98 11 14 17 20)
#option(CMAKE_CXX_STANDARD_REQUIRED ""don't compile using a previous C++ standard if the one specified is not met"" ON)
#option(CMAKE_CXX_EXTENSIONS ""compile using C++ standard extensions"" FALSE)
set(CMAKE_DEBUG_POSTFIX ""d"" CACHE STRING ""Suffix for debug binaries"")


################
## Dependencies
#########################
if(NOT MyHTML_BUILD_WITHOUT_THREADS OR NOT MyCORE_BUILD_WITHOUT_THREADS)
    set(CMAKE_THREAD_PREFER_PTHREAD 1)
    find_package(Threads REQUIRED)
    if(NOT CMAKE_USE_PTHREADS_INIT)
        message(FATAL_ERROR ""Could NOT find pthreads (missing: CMAKE_USE_PTHREADS_INIT)"")
    endif()
endif()


################
## Project Version
#########################
set(PROJECT_VERSION_HEADER_FILE ""${CMAKE_CURRENT_LIST_DIR}/include/modest/myosi.h"")

file(STRINGS ${PROJECT_VERSION_HEADER_FILE} PROJECT_VERSION_PARTS
REGEX ""^#define[ \t]+MODEST_VERSION_(MAJOR|MINOR|PATCH)[ \t]+[0-9]+$"")

list(GET PROJECT_VERSION_PARTS 0 PROJECT_VERSION_MAJOR_PART)
list(GET PROJECT_VERSION_PARTS 1 PROJECT_VERSION_MINOR_PART)
list(GET PROJECT_VERSION_PARTS 2 PROJECT_VERSION_PATCH_PART)

string(REGEX REPLACE ""#define[ \t]+MODEST_VERSION_MAJOR[ \t]+([0-9]+).*"" ""\\1"" PROJECT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR_PART})
string(REGEX REPLACE ""#define[ \t]+MODEST_VERSION_MINOR[ \t]+([0-9]+).*"" ""\\1"" PROJECT_VERSION_MINOR ${PROJECT_VERSION_MINOR_PART})
string(REGEX REPLACE ""#define[ \t]+MODEST_VERSION_PATCH[ \t]+([0-9]+).*"" ""\\1"" PROJECT_VERSION_PATCH ${PROJECT_VERSION_PATCH_PART})

set(PROJECT_VERSION_STRING ""${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"")
message(STATUS ""Project version: ${PROJECT_VERSION_STRING}"")


################
## Turn on the ability to create folders to organize projects (.vcproj)
#########################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)


################
## Includes
#########################
set(PROJECT_DIR_API_HEADER ""${CMAKE_CURRENT_LIST_DIR}/include"")
#file(GLOB_RECURSE PROJECT_PUBLIC_HEADERS ${PROJECT_DIR_API_HEADER}/*.h)


################
## Sources
#########################
MACRO(GET_MODULES_LIST result curdir)
FILE(GLOB children ${curdir}/ ${curdir}/*)
    SET(dirlist """")
    FOREACH(child ${children})
        string(REGEX MATCH ""\\.[^/]+$"" MATCHSTR ${child})
        IF(IS_DIRECTORY ${child} AND MATCHSTR STREQUAL """")
            string(REGEX MATCH ""[^/]+$"" MATCHSTR ${child})
            IF(NOT MATCHSTR STREQUAL ""myport"")
                LIST(APPEND dirlist ${MATCHSTR})
            ENDIF()
        ENDIF()
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

MACRO(CREATE_MODULES_SOURCE_PATH result dirpath modules)
    SET(dirlist """")
    FOREACH(module ${modules})
        LIST(APPEND dirlist ${dirpath}/${module}/*.c)
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

set(PROJECT_SOURCE ""${CMAKE_CURRENT_LIST_DIR}/source"")

GET_MODULES_LIST(MODULES ${PROJECT_SOURCE})
CREATE_MODULES_SOURCE_PATH(MODULES_PATH ${PROJECT_SOURCE} ""${MODULES}"")

file(GLOB_RECURSE PROJECT_SOURCES ${MODULES_PATH})

message(STATUS ""Project modules: ${MODULES}"")
#message(STATUS ""${PROJECT_SOURCES}"")


################
## Include port based on OS
#########################
set(PROJECT_SOURCE_PORT_DIR ""${PROJECT_SOURCE}/myport"")

if(WIN32)
    file(GLOB_RECURSE PROJECT_SOURCES_PORT ${PROJECT_SOURCE_PORT_DIR}/windows_nt/mycore/*.c ${PROJECT_SOURCE_PORT_DIR}/windows_nt/mycore/*/*.c)
else()
    file(GLOB_RECURSE PROJECT_SOURCES_PORT ${PROJECT_SOURCE_PORT_DIR}/posix/mycore/*.c ${PROJECT_SOURCE_PORT_DIR}/posix/mycore/utils/*/*.c)
endif(WIN32)

message(STATUS ""Port sources:"")
foreach(__item IN LISTS PROJECT_SOURCES_PORT)
   message(STATUS ""${__item}"")
endforeach()


################
## Target properties
#########################
set(PROJECT_PRIVATE_COMPILE_DEFINITIONS """")
set(PROJECT_INTERFACE_COMPILE_DEFINITIONS """")
set(PROJECT_INTERFACE_COMPILE_OPTIONS """")
set(PROJECT_PRIVATE_COMPILE_OPTIONS """")

if (WIN32)
  if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS _WIN64)
  else()
    list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS _WIN32)
  endif()
endif()


if(MSVC)
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS /wd4100 /wd4255 /wd4820 /wd4668)
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS ""_CRT_SECURE_NO_WARNINGS"")
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS ""MODEST_BUILD_OS=Windows_NT"")
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS ""MODEST_PORT_NAME=windows_nt"")
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS ""MyCORE_OS_WINDOWS_NT"")

  list(APPEND PROJECT_INTERFACE_COMPILE_DEFINITIONS ""MyCORE_OS_WINDOWS_NT"")
else()
  list(APPEND PROJECT_PRIVATE_COMPILE_OPTIONS -Wall -Werror -pipe -pedantic -Wno-unused-variable -Wno-unused-function)
endif()

list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS $<$<CONFIG:Debug>:MyCORE_BUILD_DEBUG> $<$<CONFIG:RelWithDebInfo>:MyCORE_BUILD_DEBUG>)

if(MyCORE_BUILD_WITHOUT_THREADS)
  message(STATUS ""Build without POSIX Threads"")
  list(APPEND PROJECT_PRIVATE_COMPILE_DEFINITIONS ""MyCORE_BUILD_WITHOUT_THREADS"")
  list(APPEND PROJECT_INTERFACE_COMPILE_DEFINITIONS ""MyCORE_BUILD_WITHOUT_THREADS"")
else()
  message(STATUS ""Build with POSIX Threads"")
endif()

#message(STATUS ""Project private compile definitions: ${PROJECT_PRIVATE_COMPILE_DEFINITIONS}"")


################
## Define targets: static/dynamic library
#########################
set(PROJECT_LIB_SHARED ""${PROJECT_NAME}_shared"")
set(PROJECT_LIB_STATIC ""${PROJECT_NAME}_static"")
set(PROJECT_LIB_SHARED_FILE_NAME ""${PROJECT_NAME}"")
if(MSVC)
   set(PROJECT_LIB_STATIC_FILE_NAME ""${PROJECT_NAME}_a"")
else()
   set(PROJECT_LIB_STATIC_FILE_NAME ""${PROJECT_NAME}"")
endif()
set(PROJECT_LIBRARY_TARGETS """")


if(MODEST_BUILD_SHARED)
   add_library(${PROJECT_LIB_SHARED} SHARED ${PROJECT_SOURCES} ${PROJECT_SOURCES_PORT})
   set_target_properties(${PROJECT_LIB_SHARED} PROPERTIES OUTPUT_NAME ${PROJECT_LIB_SHARED_FILE_NAME})
if (MSVC)
   set_target_properties(${PROJECT_LIB_SHARED} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()
   list(APPEND PROJECT_LIBRARY_TARGETS ${PROJECT_LIB_SHARED})
endif()

if(MODEST_BUILD_STATIC)
   add_library(${PROJECT_LIB_STATIC} STATIC ${PROJECT_SOURCES} ${PROJECT_SOURCES_PORT})
   set_target_properties(${PROJECT_LIB_STATIC} PROPERTIES OUTPUT_NAME ${PROJECT_LIB_STATIC_FILE_NAME})
   list(APPEND PROJECT_LIBRARY_TARGETS ${PROJECT_LIB_STATIC})
endif()

foreach(__item IN LISTS PROJECT_LIBRARY_TARGETS)
    set_target_properties(${__item} PROPERTIES VERSION ${PROJECT_VERSION_STRING} SOVERSION ${PROJECT_VERSION_MAJOR})
#    target_compile_features(${__item} PRIVATE c_std_99)
#    target_compile_features(${__item} PRIVATE cxx_std_11)
    target_compile_definitions(${__item}
      INTERFACE ${PROJECT_INTERFACE_COMPILE_DEFINITIONS}
      PRIVATE ${PROJECT_PRIVATE_COMPILE_DEFINITIONS}
    )
    target_compile_options(${__item}
#      INTERFACE ${PROJECT_PRIVATE_COMPILE_OPTIONS}
      PRIVATE ${PROJECT_PRIVATE_COMPILE_OPTIONS}
    )
    target_include_directories(${__item}
      PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>  # <prefix>/${CMAKE_INSTALL_INCLUDEDIR}
    )
    target_link_libraries(${__item}
      PRIVATE ${CMAKE_THREAD_LIBS_INIT}
    )
endforeach()


################
## Install
#########################
if(NOT MSVC)
   include(GNUInstallDirs)
endif()

if(NOT DEFINED CMAKE_INSTALL_INCLUDEDIR)
   set(CMAKE_INSTALL_INCLUDEDIR ""include"")
endif()

if(NOT DEFINED CMAKE_INSTALL_BINDIR)
   set(CMAKE_INSTALL_BINDIR ""bin"")
endif()

if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
   set(CMAKE_INSTALL_LIBDIR ""lib"")
endif()

set(MODEST_INSTALL_CONFIGDIR ""${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake"" CACHE PATH
   ""install location of folder with project cmake config files, either relative to CMAKE_INSTALL_PREFIX, or an absolute path"")


if(MODEST_INSTALL_HEADERS)
   install(DIRECTORY ""${PROJECT_DIR_API_HEADER}/"" DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}"" FILES_MATCHING PATTERN ""*.h"")
endif()

install(TARGETS ${PROJECT_LIBRARY_TARGETS} EXPORT ${PROJECT_NAME}
   RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}""
   LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
   ARCHIVE DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
   #PUBLIC_HEADER DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""
   #INCLUDES DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""
   )

#Use this to change the exported target name to be different than the defined target name
#set_target_properties(modest_shared PROPERTIES EXPORT_NAME Modest_shared)

if(MSVC)
   install(FILES ""$<TARGET_PDB_FILE:${PROJECT_LIB_SHARED}>"" DESTINATION ""${CMAKE_INSTALL_BINDIR}"" OPTIONAL)
endif()


#this makes an IMPORTED targets definition file which is specific to the build tree, and is not relocatable
#export(EXPORT ${PROJECT_NAME} FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.cmake NAMESPACE JSONUtils::)


#this makes an IMPORTED targets definition file which is relocatable
install(
   EXPORT ${PROJECT_NAME}
   NAMESPACE ${PROJECT_NAME}::
   DESTINATION ""${MODEST_INSTALL_CONFIGDIR}""
   FILE ${PROJECT_NAME}.cmake
   CONFIGURATIONS Debug Release
   )

include(CMakePackageConfigHelpers)

configure_package_config_file(
   ${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Config.cmake.in
   ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
   INSTALL_DESTINATION ${MODEST_INSTALL_CONFIGDIR}
   PATH_VARS
      MODEST_INSTALL_CONFIGDIR
   )

write_basic_package_version_file(
   ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
   VERSION ${PROJECT_VERSION_STRING}
   COMPATIBILITY AnyNewerVersion
   )

#Install the config, configversion and custom find modules
install(FILES
#   ${CMAKE_CURRENT_LIST_DIR}/cmake/FindRapidJSON.cmake
   ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
   ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
   DESTINATION ${MODEST_INSTALL_CONFIGDIR}
   )

#Register package in user's package registry
#export(PACKAGE ${PROJECT_NAME})


#Add an alias so that library can be used inside the build tree, e.g. when testing
add_library(${PROJECT_NAME}::${PROJECT_LIB_SHARED} ALIAS ${PROJECT_LIB_SHARED})
add_library(${PROJECT_NAME}::${PROJECT_LIB_STATIC} ALIAS ${PROJECT_LIB_STATIC})


################
## Build a package
#########################
set(CPACK_PACKAGE_NAME ""${PROJECT_NAME}"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Fast C/C++ HTML 5 Renderer. Using threads."")
set(CPACK_PACKAGE_CONTACT ""lex.borisov@gmail.com (Alexander Borisov)"")
set(CPACK_PACKAGE_VENDOR ""Alexander Borisov"")

set(CPACK_PACKAGE_RELEASE 1)
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION_STRING})

if(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
  set(CPACK_RPM_PACKAGE_ARCHITECTURE i686)
else()
  set(CPACK_RPM_PACKAGE_ARCHITECTURE x86_64)
endif()

set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CPACK_RPM_PACKAGE_ARCHITECTURE}"")

include(CPack)
",3.10,3.1
18027,pymor,dune-gdt,False,False,False,False,False,6,C++,2020-05-14 18:41:18+00:00,2014-03-12 07:29:23+00:00,4,4712,"# ~~~
# This file is part of the dune-gdt project:
#   https://github.com/dune-community/dune-gdt
# Copyright 2010-2018 dune-gdt developers and contributors. All rights reserved.
# License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
#      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
#          with ""runtime exception"" (http://www.dune-project.org/license.html)
# Authors:
#   Felix Schindler (2012 - 2018)
#   René Fritze     (2014, 2016 - 2018)
#   Sven Kaulmann   (2013)
#   Tobias Leibner  (2016, 2018)
# ~~~

# set up project
project(""dune-gdt"" CXX)

cmake_minimum_required(VERSION 3.1)

if(NOT (dune-common_DIR OR dune-common_ROOT OR ""${CMAKE_PREFIX_PATH}"" MATCHES "".*dune-common.*""))
  string(REPLACE ${CMAKE_PROJECT_NAME}
                 dune-common
                 dune-common_DIR
                 ${PROJECT_BINARY_DIR})
endif()

# dune-common
find_package(dune-common REQUIRED)
list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/modules"" ""${dune-common_MODULE_PATH}"")
include(DuneMacros)

# dune-xt-common
find_package(dune-xt REQUIRED)
list(APPEND CMAKE_MODULE_PATH ""${dune-xt_MODULE_PATH}"")
include(DuneUtils)

# start a dune project with information from dune.module
dune_project()
if(DUNE_XT_WITH_PYTHON_BINDINGS)
  dune_enable_all_packages(INCLUDE_DIRS ${dune-gdt_SOURCE_DIR}/dune MODULE_LIBRARIES dunegdt)
else()
  dune_enable_all_packages(INCLUDE_DIRS ${dune-gdt_SOURCE_DIR}/dune)
endif()

add_header_listing()
make_dependent_modules_sys_included()
if(EIGEN3_FOUND)
  add_definitions(""-isystem ${EIGEN3_INCLUDE_DIR}"")
endif(EIGEN3_FOUND)

# search for spe10 data files
find_file(SPE10MODEL1DATA
          NAMES perm_case1.dat
          PATHS ""${dune-gdt_SOURCE_DIR}/../local/src/spe10/model1""
          DOC ""Location of perm_case1.dat""
          NO_DEFAULT_PATH)

add_subdirectory(doc)
add_subdirectory(dune)
add_subdirectory(cmake/modules)
add_subdirectory(examples EXCLUDE_FROM_ALL)

include(DunePybindxiInstallPythonPackage)
# this symlinks all files in python/ to the binary dir and install into the virtualenv from there thereby making the
# compiled extensions directly usable from the venv
dune_pybindxi_install_python_package(PATH python)
include_dependent_binary_python_dirs()
# do not change order here
add_subdirectory(python)
dxt_add_make_dependent_bindings(dune-xt)
make_dependent_modules_sys_included()

# enable headercheck
add_definitions(""-DENABLE_HEADERCHECK=1"")
add_format(${CMAKE_CURRENT_SOURCE_DIR})
add_tidy(${CMAKE_CURRENT_SOURCE_DIR})
add_pylicense()

# finalize the dune project, e.g., generate config.h etc.
finalize_dune_project(GENERATE_CONFIG_H_CMAKE)
",3.1,3.1
18076,grzegorzmazur,yacas,False,False,False,False,False,14,JavaScript,2020-05-17 12:55:20+00:00,2015-07-26 13:09:17+00:00,68,3964,"cmake_minimum_required (VERSION 3.10)

foreach (p CMP0048 CMP0054 CMP0071)
    if (POLICY ${p})
        cmake_policy(SET ${p} NEW)
    endif ()
endforeach ()

option (ENABLE_CYACAS_CONSOLE ""build the C++ yacas text console"" ON)
option (ENABLE_CYACAS_GUI ""build the C++ yacas GUI application"" ON)
option (ENABLE_CYACAS_GUI_PRIVATE_CODEMIRROR ""use private copy of CodeMirror in yacas GUI application"" ON)
option (ENABLE_CYACAS_GUI_PRIVATE_MATHJAX ""use private copy of MathJAX in yacas GUI application"" ON)
option (ENABLE_CYACAS_KERNEL ""build the C++ yacas Jupyter kernel"" OFF)
option (ENABLE_CYACAS_UNIT_TESTS ""build the C++ yacas engine unit tests"" OFF)
option (ENABLE_CYACAS_BENCHMARKS ""build the C++ yacas engine benchmarks"" OFF)
option (ENABLE_JYACAS ""build the Java yacas engine"" OFF)
option (ENABLE_DOCS ""generate documentation"" OFF)
option (ENABLE_CODE_COVERAGE ""enable coverage reporting"" OFF)

if (ENABLE_CYACAS_CONSOLE OR ENABLE_CYACAS_GUI OR ENABLE_CYACAS_KERNEL)
    set (ENABLE_CYACAS ON)
else ()
    set (ENABLE_CYACAS OFF)
endif()

set (CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")

set (LANGUAGES CXX C)

if (ENABLE_JYACAS)
    find_package (Java)
    include (UseJava)
    set (LANGUAGES ${LANGUAGES} Java)
endif ()

project (yacas VERSION 1.8.0 LANGUAGES ${LANGUAGES})

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_EXTENSIONS OFF)

include (GNUInstallDirs)
include (CTest)

set (YACAS_SCRIPTS
    scripts/array.rep/code.ys
    scripts/array.rep/code.ys.def
    scripts/assoc.rep/code.ys
    scripts/assoc.rep/code.ys.def
    scripts/base.rep/math.ys
    scripts/base.rep/math.ys.def
    scripts/c_form.rep/code.ys
    scripts/c_form.rep/code.ys.def
    scripts/calendar.rep/code.ys
    scripts/calendar.rep/code.ys.def
    scripts/complex.rep/code.ys
    scripts/complex.rep/code.ys.def
    scripts/complex.rep/om.ys
    scripts/constants.rep/code.ys
    scripts/constants.rep/code.ys.def
    scripts/constants.rep/om.ys
    scripts/controlflow.rep/code.ys
    scripts/controlflow.rep/code.ys.def
    scripts/cse.rep/cse.ys
    scripts/cse.rep/cse.ys.def
    scripts/debug.rep/code.ys
    scripts/debug.rep/code.ys.def
    scripts/deffunc.rep/code.ys
    scripts/deffunc.rep/code.ys.def
    scripts/deriv.rep/code.ys
    scripts/deriv.rep/code.ys.def
    scripts/example.rep/code.ys
    scripts/example.rep/code.ys.def
    scripts/factors.rep/binaryfactors.ys
    scripts/factors.rep/binaryfactors.ys.def
    scripts/factors.rep/code.ys
    scripts/factors.rep/code.ys.def
    scripts/functional.rep/code.ys
    scripts/functional.rep/code.ys.def
    scripts/functional.rep/om.ys
    scripts/graph.rep/code.ys
    scripts/graph.rep/code.ys.def
    scripts/html.rep/code.ys
    scripts/html.rep/code.ys.def
    scripts/integrate.rep/code.ys
    scripts/integrate.rep/code.ys.def
    scripts/integrate.rep/om.ys
    scripts/io.rep/code.ys
    scripts/io.rep/code.ys.def
    scripts/io.rep/defaultprint.ys
    scripts/io.rep/defaultprint.ys.def
    scripts/io.rep/errors.ys
    scripts/io.rep/formula.ys
    scripts/io.rep/print.ys
    scripts/limit.rep/code.ys
    scripts/limit.rep/code.ys.def
    scripts/limit.rep/om.ys
    scripts/linalg.rep/code.ys
    scripts/linalg.rep/code.ys.def
    scripts/lists.rep/code.ys
    scripts/lists.rep/code.ys.def
    scripts/lists.rep/scopestack.ys
    scripts/lists.rep/scopestack.ys.def
    scripts/localrules.rep/code.ys
    scripts/localrules.rep/code.ys.def
    scripts/logic.rep/code.ys
    scripts/logic.rep/code.ys.def
    scripts/logic.rep/om.ys
    scripts/multivar.rep/code.ys
    scripts/multivar.rep/code.ys.def
    scripts/multivar.rep/makemulti.ys
    scripts/multivar.rep/sparsenomial.ys
    scripts/multivar.rep/sparsetree.ys
    scripts/multivar.rep/sparsetree.ys.def
    scripts/newly.rep/code.ys
    scripts/newly.rep/code.ys.def
    scripts/nintegrate.rep/code.ys
    scripts/nintegrate.rep/code.ys.def
    scripts/numbers.rep/GaussianIntegers.ys
    scripts/numbers.rep/GaussianIntegers.ys.def
    scripts/numbers.rep/NumberTheory.ys
    scripts/numbers.rep/NumberTheory.ys.def
    scripts/numbers.rep/code.ys
    scripts/numbers.rep/code.ys.def
    scripts/numbers.rep/nthroot.ys
    scripts/numbers.rep/nthroot.ys.def
    scripts/numbers.rep/om.ys
    scripts/odesolver.rep/code.ys
    scripts/odesolver.rep/code.ys.def
    scripts/openmath.rep/code.ys
    scripts/openmath.rep/code.ys.def
    scripts/orthopoly.rep/code.ys
    scripts/orthopoly.rep/code.ys.def
    scripts/packages.ys
    scripts/padic.rep/code.ys
    scripts/padic.rep/code.ys.def
    scripts/patterns.rep/code.ys
    scripts/patterns.rep/code.ys.def
    scripts/physics.rep/quantum/clebsch-gordan.ys
    scripts/physics.rep/quantum/clebsch-gordan.ys.def
    scripts/plots.rep/backends-2d.ys
    scripts/plots.rep/backends-3d.ys
    scripts/plots.rep/code.ys
    scripts/plots.rep/code.ys.def
    scripts/plots.rep/plot2d.ys
    scripts/plots.rep/plot2d.ys.def
    scripts/plots.rep/plot3d.ys
    scripts/plots.rep/plot3d.ys.def
    scripts/predicates.rep/code.ys
    scripts/predicates.rep/code.ys.def
    scripts/probability.rep/code.ys
    scripts/probability.rep/code.ys.def
    scripts/products.rep/code.ys
    scripts/products.rep/code.ys.def
    scripts/pslq.rep/code.ys
    scripts/pslq.rep/code.ys.def
    scripts/r_form.rep/code.ys
    scripts/r_form.rep/code.ys.def
    scripts/rabinmiller.rep/code.ys
    scripts/rabinmiller.rep/code.ys.def
    scripts/radsimp.rep/code.ys
    scripts/radsimp.rep/code.ys.def
    scripts/random.rep/code.ys
    scripts/random.rep/code.ys.def
    scripts/rational.rep/code.ys
    scripts/rational.rep/code.ys.def
    scripts/simplify.rep/code.ys
    scripts/simplify.rep/code.ys.def
    scripts/simplify.rep/factorial.ys
    scripts/simplify.rep/factorial.ys.def
    scripts/solve.rep/code.ys
    scripts/solve.rep/code.ys.def
    scripts/specfunc.rep/bernou.ys
    scripts/specfunc.rep/bernou.ys.def
    scripts/specfunc.rep/bessel.ys
    scripts/specfunc.rep/bessel.ys.def
    scripts/specfunc.rep/code.ys
    scripts/specfunc.rep/code.ys.def
    scripts/specfunc.rep/gamma.ys
    scripts/specfunc.rep/gamma.ys.def
    scripts/specfunc.rep/gammaconst.ys
    scripts/specfunc.rep/gammaconst.ys.def
    scripts/specfunc.rep/om.ys
    scripts/specfunc.rep/zeta.ys
    scripts/specfunc.rep/zeta.ys.def
    scripts/standard.ys
    scripts/standard.ys.def
    scripts/statistics.rep/distributions.ys
    scripts/statistics.rep/distributions.ys.def
    scripts/statistics.rep/hypothesystest.ys
    scripts/statistics.rep/hypothesystest.ys.def
    scripts/statistics.rep/incompletegamma.ys
    scripts/statistics.rep/incompletegamma.ys.def
    scripts/statistics.rep/randomtest.ys
    scripts/statistics.rep/regression.ys
    scripts/statistics.rep/regression.ys.def
    scripts/statistics.rep/statistics.ys
    scripts/statistics.rep/statistics.ys.def
    scripts/stats.rep/code.ys
    scripts/stats.rep/code.ys.def
    scripts/stdarith.ys
    scripts/stdarith.ys.def
    scripts/stdfuncs.rep/code.ys
    scripts/stdfuncs.rep/code.ys.def
    scripts/stdfuncs.rep/elemfuncs.ys
    scripts/stdfuncs.rep/elemfuncs.ys.def
    scripts/stdfuncs.rep/numerical.ys
    scripts/stdfuncs.rep/numerical.ys.def
    scripts/stdfuncs.rep/nummethods.ys
    scripts/stdfuncs.rep/nummethods.ys.def
    scripts/stdfuncs.rep/om.ys
    scripts/stdopers.ys
    scripts/stubs.rep/code.ys
    scripts/stubs.rep/code.ys.def
    scripts/stubs.rep/om.ys
    scripts/substitute.rep/code.ys
    scripts/substitute.rep/code.ys.def
    scripts/sums.rep/code.ys
    scripts/sums.rep/code.ys.def
    scripts/sums.rep/om.ys
    scripts/trigsimp.rep/code.ys.def
    scripts/univar.rep/Cyclotomic.ys
    scripts/univar.rep/Cyclotomic.ys.def
    scripts/univar.rep/code.ys
    scripts/trigsimp.rep/code.ys.def
    scripts/univar.rep/Cyclotomic.ys
    scripts/univar.rep/Cyclotomic.ys.def
    scripts/univar.rep/code.ys
    scripts/sums.rep/taylor.ys
    scripts/sums.rep/taylor.ys.def
    scripts/sums.rep/taylor3.ys
    scripts/sums.rep/taylor3.ys.def
    scripts/tensor.rep/code.ys
    scripts/tensor.rep/code.ys.def
    scripts/testers.rep/code.ys
    scripts/testers.rep/code.ys.def
    scripts/texform.rep/code.ys
    scripts/texform.rep/code.ys.def
    scripts/transforms.rep/code.ys
    scripts/trigsimp.rep/code.ys.def
    scripts/univar.rep/Cyclotomic.ys
    scripts/univar.rep/Cyclotomic.ys.def
    scripts/univar.rep/code.ys
    scripts/transforms.rep/code.ys.def
    scripts/trigsimp.rep/code.ys
    scripts/trigsimp.rep/code.ys.def
    scripts/univar.rep/Cyclotomic.ys
    scripts/univar.rep/Cyclotomic.ys.def
    scripts/univar.rep/code.ys
    scripts/univar.rep/code.ys.def
    scripts/univar.rep/sparse.ys
    scripts/univar.rep/sparse.ys.def
    scripts/univar.rep/sturm.ys
    scripts/univar.rep/sturm.ys.def
    scripts/yacasinit.ys)

if (ENABLE_CYACAS)
    install (DIRECTORY scripts/ DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/yacas/scripts COMPONENT app)
endif ()

if (ENABLE_DOCS)
    add_subdirectory (docs)
    add_subdirectory (man)
endif()

if (ENABLE_JYACAS)
    add_subdirectory (jyacas)
endif ()

if (ENABLE_CYACAS)
    add_subdirectory (cyacas)
endif ()

if (ENABLE_CYACAS OR ENABLE_JYACAS)
    add_subdirectory (tests)
endif ()
",3.10,3.1
18088,gamepopper,Vigilante-Game-Framework,False,False,False,False,False,2,C++,2020-04-24 19:23:07+00:00,2017-04-04 20:52:40+00:00,53,300,"cmake_minimum_required(VERSION 3.1.0)
project(VigilanteGameFramework)

if(${WIN32})
	add_compile_options(/Zc:rvalueCast)
	if(${VGF_LTO})
		set(VGF_LTO_FLAGS ""/LTCG /GL"")
	endif()
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /Ox /Ot ${VGF_LTO_FLAGS}"")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Ox /Ot ${VGF_LTO_FLAGS}"")
	set(CMAKE_LINK_FLAGS_RELEASE ""${CMAKE_LINK_FLAGS_RELEASE} /Ox /Ot ${VGF_LTO_FLAGS}"")
	set(CMAKE_LINK_FLAGS_RELWITHDEBINFO ""${CMAKE_LINK_FLAGS_RELWITHDEBINFO} /Ox /Ot ${VGF_LTO_FLAGS}"")
else(${WIN32})
	add_compile_options(-std=c++14 -Wall -Wextra -Wpedantic)
	if(${VGF_LTO})
		set(VGF_LTO_FLAGS ""-flto "")
	endif()
	set(VGF_EXTRA_FLAGS ""-O3"")
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} ${VGF_EXTRA_FLAGS} ${VGF_LTO_FLAGS}"")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${VGF_EXTRA_FLAGS} ${VGF_LTO_FLAGS}"")
	set(CMAKE_LINK_FLAGS_RELEASE ""${CMAKE_LINK_FLAGS_RELEASE} ${VGF_EXTRA_FLAGS} ${VGF_LTO_FLAGS}"")
	set(CMAKE_LINK_FLAGS_RELWITHDEBINFO ""${CMAKE_LINK_FLAGS_RELWITHDEBINFO} ${VGF_EXTRA_FLAGS} ${VGF_LTO_FLAGS}"")
endif(${WIN32})
link_directories(${PROJECT_BINARY_DIR})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

add_subdirectory(VFrame)
add_subdirectory(Example)
",3.1.0,3.1
18256,magnus-gross,quickcurver,False,False,False,False,False,1,C++,2020-05-17 09:37:12+00:00,2016-09-14 14:47:47+00:00,22,339,"cmake_minimum_required(VERSION 3.1.0)

project(QuickCurver)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(Qt5 COMPONENTS Core Svg Quick QuickControls2 REQUIRED)

file(GLOB_RECURSE SRCS ""src/*.cpp"")
file(GLOB_RECURSE HDRS ""src/*.h"")
file(GLOB_RECURSE RSRC ""src/*.qrc"")

file(GLOB FLUID ""fluid/icons/icons.qrc"")

include_directories(
	""src""
)

add_executable(${PROJECT_NAME} ${SRCS} ${HDRS} ${RSRC} ${FLUID})


target_link_libraries(${PROJECT_NAME} Qt5::Core Qt5::Svg Qt5::Quick Qt5::QuickControls2)
",3.1.0,3.1
18329,erikd,libsndfile,False,False,False,False,False,48,C,2020-05-14 15:09:24+00:00,2012-01-15 09:10:10+00:00,654,2777,"cmake_minimum_required (VERSION 3.1.3)

if (POLICY CMP0091)
	cmake_policy(SET CMP0091 NEW)
endif ()

project(sndfile VERSION 1.0.29)

#
# Variables
#

set (CMAKE_C_STANDARD 99)
set (CMAKE_C_STANDARD_REQUIRED TRUE)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set (PACKAGE_NAME lib${PROJECT_NAME})
set (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set (CPACK_PACKAGE_VERSION_STAGE ""pre2"")
set (CPACK_PACKAGE_VERSION_FULL ""${PROJECT_VERSION}${CPACK_PACKAGE_VERSION_STAGE}"")

#
# System-wide includes
#

# Set proper default documentation install directory based on canonical
# package name, not CMake project name. This option can still be overridden.
if(NOT CMAKE_INSTALL_DOCDIR)
	set(CMAKE_INSTALL_DOCDIR ""${CMAKE_INSTALL_DATAROOTDIR}/doc/libsndfile"")
endif()
include (GNUInstallDirs)
include (FeatureSummary)
include (CMakeDependentOption)
include (CTest)

#
# Options
#

option (BUILD_SHARED_LIBS ""Build shared libraries"" OFF)
if (BUILD_SHARED_LIBS AND BUILD_TESTING)
	set (BUILD_TESTING OFF)
	message (""Build testing required static libraries. To prevent build errors BUILD_TESTING disabled."")
endif ()
option (BUILD_PROGRAMS ""Build programs"" ON)
option (BUILD_EXAMPLES ""Build examples"" ON)
option (ENABLE_CPACK ""Enable CPack support"" ON)
option (ENABLE_EXPERIMENTAL ""Enable experimental code"" OFF)
option (ENABLE_BOW_DOCS ""Enable black-on-white html docs"" OFF)
if (MSVC OR MINGW)
	option (ENABLE_STATIC_RUNTIME ""Enable static runtime"" OFF)
endif ()
option (ENABLE_PACKAGE_CONFIG ""Generate and install package config file"" ON)

list (APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

#
# Setup definitions
#

include(SndFileChecks)


cmake_dependent_option (BUILD_REGTEST ""Build regtest"" ON ""SQLITE3_FOUND"" OFF)
cmake_dependent_option (ENABLE_EXTERNAL_LIBS ""Enable FLAC, Vorbis, and Opus codecs"" ON ""Vorbis_FOUND;FLAC_FOUND;OPUS_FOUND"" OFF)
cmake_dependent_option (ENABLE_CPU_CLIP ""Enable tricky cpu specific clipper"" ON ""CPU_CLIPS_POSITIVE;CPU_CLIPS_NEGATIVE"" OFF)
if (NOT ENABLE_CPU_CLIP)
	set (CPU_CLIPS_POSITIVE FALSE)
	set (CPU_CLIPS_NEGATIVE FALSE)
endif ()
cmake_dependent_option (ENABLE_COMPATIBLE_LIBSNDFILE_NAME ""Set DLL name to libsndfile-1.dll (canonical name), sndfile.dll otherwise"" OFF ""WIN32;NOT MINGW;BUILD_SHARED_LIBS"" OFF)

set (HAVE_EXTERNAL_XIPH_LIBS ${ENABLE_EXTERNAL_LIBS})
set (HAVE_SQLITE3 ${BUILD_REGTEST})
set (HAVE_ALSA_ASOUNDLIB_H ${ALSA_FOUND})
set (HAVE_SNDIO_H ${SNDIO_FOUND})

set (ENABLE_EXPERIMENTAL_CODE ${ENABLE_EXPERIMENTAL})
set (HAVE_SPEEX ${ENABLE_EXPERIMENTAL})
set (HAVE_OPUS ${ENABLE_EXPERIMENTAL})

add_feature_info (BUILD_SHARED_LIBS BUILD_SHARED_LIBS ""build shared libraries"")
add_feature_info (ENABLE_EXTERNAL_LIBS ENABLE_EXTERNAL_LIBS ""enable FLAC, Vorbis, and Opus codecs"")
add_feature_info (ENABLE_EXPERIMENTAL ENABLE_EXPERIMENTAL ""enable experimental code"")
add_feature_info (BUILD_TESTING BUILD_TESTING ""build tests"")
add_feature_info (BUILD_REGTEST BUILD_REGTEST ""build regtest"")
add_feature_info (ENABLE_CPACK ENABLE_CPACK ""enable CPack support"")
add_feature_info (ENABLE_CPU_CLIP ENABLE_CPU_CLIP ""Enable tricky cpu specific clipper"")
add_feature_info (ENABLE_BOW_DOCS ENABLE_BOW_DOCS ""enable black-on-white html docs"")
add_feature_info (ENABLE_PACKAGE_CONFIG ENABLE_PACKAGE_CONFIG ""generate and install package config file"")
if (WIN32 AND (NOT MINGW) AND BUILD_SHARED_LIBS)
	add_feature_info (ENABLE_COMPATIBLE_LIBSNDFILE_NAME ENABLE_COMPATIBLE_LIBSNDFILE_NAME ""Set DLL name to libsndfile-1.dll (canonical name), sndfile.dll otherwise"")
endif ()

if (MSVC OR MINGW)
	add_feature_info (ENABLE_STATIC_RUNTIME ENABLE_STATIC_RUNTIME ""Enable static runtime"")
endif ()

set_package_properties (Ogg PROPERTIES
	TYPE RECOMMENDED
	URL ""www.xiph.org/ogg/""
	DESCRIPTION ""library for manipulating ogg bitstreams""
	PURPOSE ""Required to enable Vorbis, Speex, and Opus support""
	)
set_package_properties (Vorbis PROPERTIES
	TYPE RECOMMENDED
	URL ""www.vorbis.com/""
	DESCRIPTION ""open source lossy audio codec""
	PURPOSE ""Enables Vorbis support""
	)
set_package_properties (FLAC PROPERTIES
	TYPE RECOMMENDED
	URL ""www.xiph.org/flac/""
	DESCRIPTION ""Free Lossless Audio Codec Library""
	PURPOSE ""Enables FLAC support""
	)
set_package_properties(Opus PROPERTIES
	TYPE RECOMMENDED
	URL	""www.opus-codec.org/""
	DESCRIPTION ""Standardized open source low-latency fullband codec""
	PURPOSE	""Enables experimental Opus support""
	)
set_package_properties(Speex PROPERTIES TYPE OPTIONAL
	URL ""www.speex.org/""
	DESCRIPTION ""an audio codec tuned for speech""
	PURPOSE ""Enables experemental Speex support""
	)
set_package_properties (SQLite3 PROPERTIES
	TYPE OPTIONAL
	URL ""www.sqlite.org/""
	DESCRIPTION ""light weight SQL database engine.""
	PURPOSE ""Enables regtest""
	)
if (BUILD_SHARED_LIBS)
	set_package_properties (PythonInterp PROPERTIES
		TYPE REQUIRED
		URL ""www.python.org/""
		DESCRIPTION ""Python is a widely used high-level programming language.""
		PURPOSE ""Required to build shared libraries""
		)
endif()

feature_summary (WHAT ALL)

#
# Setup configuration
#

configure_file (src/config.h.cmake src/config.h)

configure_file (src/sndfile.h.in src/sndfile.h)

set (prefix ${CMAKE_INSTALL_PREFIX})
set (exec_prefix ""\$\{prefix\}"")
set (libdir ""\$\{prefix\}/${CMAKE_INSTALL_LIBDIR}"")
set (includedir ""\$\{prefix\}/${CMAKE_INSTALL_INCLUDEDIR}"")
set (VERSION ${PROJECT_VERSION})
if (ENABLE_EXTERNAL_LIBS)
	set (EXTERNAL_XIPH_REQUIRE ""flac ogg vorbis vorbisenc opus"")
	if (ENABLE_EXPERIMENTAL)
		set (EXTERNAL_XIPH_REQUIRE ""${EXTERNAL_XIPH_REQUIRE} speex"")
	endif ()
endif ()
configure_file (sndfile.pc.in sndfile.pc @ONLY)

#
# libsndfile
#

# Public libsndfile headers
set (sndfile_HDRS
	src/sndfile.hh
	${CMAKE_CURRENT_BINARY_DIR}/src/sndfile.h
	)

#
# libsndfile static library
#

add_library (sndfile
	src/sfconfig.h
	src/sfendian.h
	src/sf_unistd.h
	src/common.h
	src/common.c
	src/file_io.c
	src/command.c
	src/pcm.c
	src/ulaw.c
	src/alaw.c
	src/float32.c
	src/double64.c
	src/ima_adpcm.c
	src/ms_adpcm.c
	src/gsm610.c
	src/dwvw.c
	src/vox_adpcm.c
	src/interleave.c
	src/strings.c
	src/dither.c
	src/cart.c
	src/broadcast.c
	src/audio_detect.c
 	src/ima_oki_adpcm.c
	src/ima_oki_adpcm.h
	src/alac.c
	src/chunk.c
	src/ogg.h
	src/ogg.c
	src/chanmap.h
	src/chanmap.c
	src/id3.c
	$<$<BOOL:${WIN32}>:src/windows.c>
	$<$<AND:$<BOOL:${WIN32}>,$<BOOL:${WIN32}>>:src/version-metadata.rc>
	src/sndfile.c
	src/aiff.c
	src/au.c
	src/avr.c
	src/caf.c
	src/dwd.c
	src/flac.c
	src/g72x.c
	src/htk.c
	src/ircam.c
	src/macos.c
	src/mat4.c
	src/mat5.c
	src/nist.c
	src/paf.c
	src/pvf.c
	src/raw.c
	src/rx2.c
	src/sd2.c
	src/sds.c
	src/svx.c
	src/txw.c
	src/voc.c
	src/wve.c
	src/w64.c
	src/wavlike.h
	src/wavlike.c
	src/wav.c
	src/xi.c
	src/mpc2k.c
	src/rf64.c
	src/ogg_vorbis.c
	src/ogg_speex.c
	src/ogg_pcm.c
	src/ogg_opus.c
	src/ogg_vcomment.c
	src/nms_adpcm.c
	src/GSM610/config.h
	src/GSM610/gsm.h
	src/GSM610/gsm610_priv.h
	src/GSM610/add.c
	src/GSM610/code.c
	src/GSM610/decode.c
	src/GSM610/gsm_create.c
	src/GSM610/gsm_decode.c
	src/GSM610/gsm_destroy.c
	src/GSM610/gsm_encode.c
	src/GSM610/gsm_option.c
	src/GSM610/long_term.c
	src/GSM610/lpc.c
	src/GSM610/preprocess.c
	src/GSM610/rpe.c
	src/GSM610/short_term.c
	src/GSM610/table.c
	src/G72x/g72x.h
	src/G72x/g72x_priv.h
	src/G72x/g721.c
	src/G72x/g723_16.c
	src/G72x/g723_24.c
	src/G72x/g723_40.c
	src/G72x/g72x.c
	src/ALAC/ALACAudioTypes.h
	src/ALAC/ALACBitUtilities.h
	src/ALAC/EndianPortable.h
	src/ALAC/aglib.h
	src/ALAC/dplib.h
	src/ALAC/matrixlib.h
	src/ALAC/alac_codec.h
	src/ALAC/shift.h
	src/ALAC/ALACBitUtilities.c
	src/ALAC/ag_dec.c
	src/ALAC/ag_enc.c
	src/ALAC/dp_dec.c
	src/ALAC/dp_enc.c
	src/ALAC/matrix_dec.c
	src/ALAC/matrix_enc.c
	src/ALAC/alac_decoder.c
	src/ALAC/alac_encoder.c
	${sndfile_HDRS}
	${CMAKE_CURRENT_BINARY_DIR}/src/config.h
	)

target_include_directories(sndfile
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/src>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
	)
target_link_libraries (sndfile
	PRIVATE
		$<$<BOOL:${LIBM_REQUIRED}>:m>
		$<$<BOOL:${HAVE_EXTERNAL_XIPH_LIBS}>:Vorbis::vorbisenc>
		$<$<BOOL:${HAVE_EXTERNAL_XIPH_LIBS}>:FLAC::FLAC>
		$<$<AND:$<BOOL:${ENABLE_EXPERIMENTAL}>,$<BOOL:${HAVE_EXTERNAL_XIPH_LIBS}>,$<BOOL:${HAVE_SPEEX}>>:Speex::Speex>
		$<$<BOOL:${HAVE_EXTERNAL_XIPH_LIBS}>:Opus::opus>
	)
set_target_properties (sndfile PROPERTIES
	PUBLIC_HEADER ""${sndfile_HDRS}""
	)

if (ENABLE_COMPATIBLE_LIBSNDFILE_NAME)
	set_target_properties (sndfile PROPERTIES
		RUNTIME_OUTPUT_NAME ""libsndfile-1""
		)
endif ()

if (BUILD_SHARED_LIBS)

	if (WIN32)
		set (VERSION_MAJOR ${CPACK_PACKAGE_VERSION_MAJOR})
		set (GEN_TOOL cmake)
		
		set (WIN_RC_VERSION ""${CPACK_PACKAGE_VERSION_MAJOR},${CPACK_PACKAGE_VERSION_MINOR},${CPACK_PACKAGE_VERSION_PATCH}"")
		set (CLEAN_VERSION ""${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"")
		set (PACKAGE_VERSION ${CPACK_PACKAGE_VERSION})

		configure_file (src/version-metadata.rc.in src/version-metadata.rc @ONLY)
	endif ()

	set_target_properties (sndfile PROPERTIES
		SOVERSION ${PROJECT_VERSION_MAJOR}
		VERSION ${PROJECT_VERSION}
		)

	# Symbol files generation

	if (WIN32)
		set (SYMBOL_FILENAME ""sndfile.def"")
		set (SYMBOL_OS ""win32"")
	elseif ((CMAKE_SYSTEM_NAME MATCHES ""Darwin"") OR (CMAKE_SYSTEM_NAME MATCHES ""Rhapsody""))
		set (SYMBOL_FILENAME ""Symbols.darwin"")
		set (SYMBOL_OS ""darwin"")
	elseif (CMAKE_SYSTEM_NAME MATCHES ""OS2"")
		set (SYMBOL_FILENAME ""Symbols.os2"")
		set (SYMBOL_OS ""os2"")
	elseif (UNIX)
		set (SYMBOL_FILENAME ""Symbols.gnu-binutils"")
		set (SYMBOL_OS ""linux"")
	endif ()

	if (DEFINED SYMBOL_OS)
		add_custom_command (
			OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}
			COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/src/create_symbols_file.py ${SYMBOL_OS} ${PROJECT_VERSION_MAJOR} > ${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}
			COMMENT ""Generating ${SYMBOL_FILENAME}...""
			)

		add_custom_target (GENFILES DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME})
		if (SYMBOL_OS MATCHES ""win32"")
			target_sources (sndfile
				PRIVATE
					${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}
				)
		elseif (SYMBOL_OS MATCHES ""darwin"")
			add_dependencies (sndfile GENFILES)
			set_property (TARGET sndfile APPEND_STRING PROPERTY
				LINK_FLAGS "" -Wl,-exported_symbols_list -Wl,${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}""
				)
		elseif (SYMBOL_OS MATCHES ""os"")
			add_dependencies (sndfile GENFILES)
			set_property (TARGET sndfile APPEND_STRING PROPERTY
				LINK_FLAGS "" -Wl,-export-symbols ${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}""
				)
		elseif (UNIX)
			add_dependencies (sndfile GENFILES)
			set_property (TARGET sndfile APPEND_STRING PROPERTY
				LINK_FLAGS "" -Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/src/${SYMBOL_FILENAME}""
				)
		endif()
	endif()

endif ()

#
# Programs
#

if (BUILD_PROGRAMS)

# sndfile-info

	add_executable (sndfile-info
		programs/sndfile-info.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-info
		PRIVATE
			sndfile
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

# sndfile-play

	add_executable (sndfile-play
		$<$<NOT:$<BOOL:${BEOS}>>:programs/sndfile-play.c>
		$<$<NOT:$<BOOL:${BEOS}>>:programs/common.c>
		$<$<NOT:$<BOOL:${BEOS}>>:programs/sndfile-play.c>
		$<$<BOOL:${BEOS}>:programs/sndfile-play-beos.cpp>
		)
	target_link_libraries (sndfile-play PRIVATE $<$<BOOL:${LIBM_REQUIRED}>:m>)
	target_link_libraries (sndfile-play PRIVATE sndfile)
	if (WIN32)
		target_link_libraries(sndfile-play PRIVATE winmm)
	# Maybe ALSA & Sndio are present in BeOS. They are not required
	# so skip them anyway.
	elseif ((NOT BEOS) AND ALSA_FOUND)
		target_include_directories (sndfile-play PRIVATE ${ALSA_INCLUDE_DIRS})
		target_link_libraries (sndfile-play PRIVATE ${ALSA_LIBRARIES})
	elseif ((NOT BEOS) AND SNDIO_FOUND)
		target_link_libraries (sndfile-play PRIVATE Sndio::Sndio)
	endif ()

# sndfile-convert

	add_executable (sndfile-convert
		programs/sndfile-convert.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-convert PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-cmp

	add_executable (sndfile-cmp
		programs/sndfile-cmp.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-cmp PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-metadata-set

	add_executable (sndfile-metadata-set
		programs/sndfile-metadata-set.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-metadata-set PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-metadata-get

	add_executable (sndfile-metadata-get
		programs/sndfile-metadata-get.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-metadata-get PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-interleave

	add_executable (sndfile-interleave
		programs/sndfile-interleave.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-interleave PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-deinterleave

	add_executable (sndfile-deinterleave
		programs/sndfile-deinterleave.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-deinterleave PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-concat

	add_executable (sndfile-concat
		programs/sndfile-concat.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-concat PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

# sndfile-salvage

	add_executable (sndfile-salvage
		programs/sndfile-salvage.c
		programs/common.c
		programs/common.h
		)
	target_link_libraries (sndfile-salvage PRIVATE sndfile $<$<BOOL:${LIBM_REQUIRED}>:m>)

	set (SNDFILE_PROGRAM_TARGETS
		sndfile-info
		sndfile-play
		sndfile-convert
		sndfile-cmp
		sndfile-metadata-set
		sndfile-metadata-get
		sndfile-interleave
		sndfile-deinterleave
		sndfile-concat
		sndfile-salvage
		)

	set_target_properties(${SNDFILE_PROGRAM_TARGETS} PROPERTIES FOLDER Programs)

endif ()

#
# Examples
#

if (BUILD_EXAMPLES)

# sndfile-to-text

	add_executable (sndfile-to-text examples/sndfile-to-text.c)
	target_link_libraries (sndfile-to-text PRIVATE sndfile)

# sndfile-loopify

	add_executable (sndfile-loopify examples/sndfile-loopify.c)
	target_link_libraries (sndfile-loopify PRIVATE sndfile)

# make_sine

	add_executable (make_sine examples/make_sine.c)
	target_link_libraries (make_sine
		PRIVATE
			sndfile
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

# sfprocess

	add_executable (sfprocess examples/sfprocess.c)
	target_link_libraries (sfprocess
		PRIVATE
			sndfile
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

# list_formats

	add_executable (list_formats examples/list_formats.c)
	target_link_libraries (list_formats
		PRIVATE
			sndfile
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

# sndfilehandle

	add_executable (sndfilehandle examples/sndfilehandle.cc)
	target_link_libraries (sndfilehandle PUBLIC sndfile)

	set (SNDFILE_EXAMPLE_TARGETS
		sndfile-to-text
		sndfile-loopify
		make_sine
		sfprocess
		list_formats
		sndfilehandle
		)

	set_target_properties(${SNDFILE_EXAMPLE_TARGETS} PROPERTIES FOLDER Examples)


endif ()

#
# sndfile-regtest
#

if (BUILD_REGTEST)

	add_executable (sndfile-regtest
		regtest/sndfile-regtest.c
		regtest/database.c
		regtest/checksum.c
		)
	target_link_libraries(sndfile-regtest
		PRIVATE
			sndfile
			SQLite3::SQLite3
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

endif ()

#
# Installation
#

if (ENABLE_PACKAGE_CONFIG)

	if (WIN32 AND (NOT MINGW) AND (NOT CYGWIN))
		set (CMAKE_INSTALL_PACKAGEDIR cmake) 
	 else ()
	 	set (CMAKE_INSTALL_PACKAGEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/SndFile)
	 endif()


	install (TARGETS sndfile ${SNDFILE_PROGRAM_TARGETS}
		EXPORT SndFileTargets
		RUNTIME DESTINATION			${CMAKE_INSTALL_BINDIR}
		ARCHIVE DESTINATION			${CMAKE_INSTALL_LIBDIR}
		LIBRARY DESTINATION			${CMAKE_INSTALL_LIBDIR}
		PUBLIC_HEADER DESTINATION	${CMAKE_INSTALL_INCLUDEDIR}
	)

	include (CMakePackageConfigHelpers)

	if (ENABLE_EXTERNAL_LIBS)
		set (SndFile_WITH_EXTERNAL_LIBS 1)
	else ()
		set (SndFile_WITH_EXTERNAL_LIBS 0)
	endif ()

	set (INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})
	configure_package_config_file(cmake/SndFileConfig.cmake.in SndFileConfig.cmake
		INSTALL_DESTINATION ${CMAKE_INSTALL_PACKAGEDIR}
		PATH_VARS INCLUDE_INSTALL_DIR
		)
	write_basic_package_version_file (SndFileConfigVersion.cmake COMPATIBILITY SameMajorVersion)

	install(EXPORT SndFileTargets
		NAMESPACE SndFile::
		DESTINATION ${CMAKE_INSTALL_PACKAGEDIR}
		)
	install(
		FILES
			${CMAKE_CURRENT_BINARY_DIR}/SndFileConfig.cmake
			${CMAKE_CURRENT_BINARY_DIR}/SndFileConfigVersion.cmake
		DESTINATION	${CMAKE_INSTALL_PACKAGEDIR}
		)

else ()

	install (TARGETS sndfile ${sdnfile_PROGRAMS}
		RUNTIME DESTINATION			${CMAKE_INSTALL_BINDIR}
		ARCHIVE DESTINATION			${CMAKE_INSTALL_LIBDIR}
		LIBRARY DESTINATION			${CMAKE_INSTALL_LIBDIR}
		PUBLIC_HEADER DESTINATION	${CMAKE_INSTALL_INCLUDEDIR})

endif ()

if (UNIX)
	set (man_MANS
		man/sndfile-info.1
		man/sndfile-play.1
		man/sndfile-convert.1
		man/sndfile-cmp.1
		man/sndfile-metadata-get.1
		#man/sndfile-metadata-set.1
		man/sndfile-concat.1
		man/sndfile-interleave.1
		#man/sndfile-deinterleave.1
		man/sndfile-salvage.1
		)
	install (FILES ${man_MANS} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
endif ()

if (ENABLE_BOW_DOCS)
	set (HTML_BGCOLOUR ""white"")
	set (HTML_FGCOLOUR ""black"")
else ()
	set (HTML_BGCOLOUR ""black"")
	set (HTML_FGCOLOUR ""white"")
endif ()
configure_file (doc/libsndfile.css.in doc/libsndfile.css)
set (html_DATA
	doc/index.html
	doc/libsndfile.jpg
	""${CMAKE_CURRENT_BINARY_DIR}/doc/libsndfile.css""
	doc/print.css
	doc/api.html
	doc/command.html
	doc/bugs.html
	doc/sndfile_info.html
	doc/new_file_type.HOWTO
	doc/win32.html
	doc/FAQ.html
	doc/lists.html
	doc/embedded_files.html
	doc/octave.html
	doc/tutorial.html
	)
install (FILES ${html_DATA} DESTINATION ${CMAKE_INSTALL_DOCDIR})

install (FILES ${CMAKE_CURRENT_BINARY_DIR}/sndfile.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

#
# Testing
#

if (BUILD_TESTING)

	enable_testing ()

	include (CMakeAutoGen)

	# generate tests sources from autogen templates
	lsf_autogen (tests benchmark c)
	lsf_autogen (tests floating_point_test c)
	lsf_autogen (tests header_test c)
	lsf_autogen (tests pcm_test c)
	lsf_autogen (tests pipe_test c)
	lsf_autogen (tests rdwr_test c)
	lsf_autogen (tests scale_clip_test c)
	lsf_autogen (tests utils c h)
	lsf_autogen (tests write_read_test c)
	lsf_autogen (src test_endswap c)

	# utils static library
	add_library(test_utils STATIC tests/utils.c)
	target_link_libraries(test_utils PRIVATE sndfile)
	target_include_directories(test_utils PUBLIC ""${CMAKE_CURRENT_BINARY_DIR}/tests"")

	### test_main

	add_executable (test_main
		src/test_main.c
		src/test_main.h
		src/test_conversions.c
		src/test_float.c
		src/test_endswap.c
		src/test_audio_detect.c
		src/test_log_printf.c
		src/test_file_io.c
		src/test_ima_oki_adpcm.c
		src/test_strncpy_crlf.c
		src/test_broadcast_var.c
		src/test_cart_var.c
		src/test_binheader_writef.c
		src/test_nms_adpcm.c
		)
	target_link_libraries (test_main PRIVATE sndfile)
	if (MSVC)
		target_compile_definitions (test_main PRIVATE _USE_MATH_DEFINES)
	endif ()
	add_test (test_main test_main)

	### sfversion_test

	add_executable (sfversion tests/sfversion.c)
	target_link_libraries (sfversion sndfile)
	add_test (sfversion sfversion)
	set_tests_properties (sfversion PROPERTIES
		PASS_REGULAR_EXPRESSION ""${PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_FULL}""
		)

	### error_test

	add_executable (error_test tests/error_test.c)
	target_link_libraries (error_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (error_test error_test)

	### ulaw_test
	add_executable (ulaw_test tests/ulaw_test.c)
	target_link_libraries (ulaw_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (ulaw_test ulaw_test)

	### alaw_test
	add_executable (alaw_test tests/alaw_test.c)
	target_link_libraries (alaw_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (alaw_test alaw_test)

	### dwvw_test

	add_executable (dwvw_test tests/dwvw_test.c)
	target_link_libraries (dwvw_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (dwvw_test dwvw_test)

	### command_test

	add_executable (command_test tests/command_test.c)
	target_link_libraries (command_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (command_test command_test all)

	### floating_point_test

	add_executable (floating_point_test
		tests/dft_cmp.c
		tests/floating_point_test.c
		)
	target_link_libraries (floating_point_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	target_include_directories (floating_point_test PRIVATE tests)
	add_test (floating_point_test floating_point_test)

	### checksum_test

	add_executable (checksum_test tests/checksum_test.c)
	target_link_libraries (checksum_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (checksum_test checksum_test)

	### scale_clip_test

	add_executable (scale_clip_test tests/scale_clip_test.c)
	target_link_libraries (scale_clip_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (scale_clip_test scale_clip_test)

	### headerless_test

	add_executable (headerless_test tests/headerless_test.c)
	target_link_libraries (headerless_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (headerless_test headerless_test)

	### rdwr_test

	add_executable (rdwr_test tests/rdwr_test.c)
	target_link_libraries (rdwr_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (rdwr_test rdwr_test)

	### locale_test

	add_executable (locale_test tests/locale_test.c)
	target_link_libraries (locale_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (locale_test locale_test)

	### win32_ordinal_test

# Disabled because we cannot test with shared sndfile library
#	if (WIN32 AND BUILD_SHARED_LIBS)
#		add_executable (win32_ordinal_test tests/win32_ordinal_test.c)
#		target_link_libraries (win32_ordinal_test PRIVATE sndfile test_utils)
#		add_test (win32_ordinal_test win32_ordinal_test)
#	endif ()

	### cpp_test

	add_executable (cpp_test tests/cpp_test.cc)
	target_link_libraries (cpp_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (cpp_test cpp_test)

	### external_libs_test

	add_executable (external_libs_test tests/external_libs_test.c)
	target_link_libraries (external_libs_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (external_libs_test external_libs_test)

	### format_check_test

	add_executable (format_check_test tests/format_check_test.c)
	target_link_libraries (format_check_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (format_check_test format_check_test)

	### channel_test

	add_executable (channel_test tests/channel_test.c)
	target_link_libraries (channel_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (channel_test channel_test)

	### pcm_test

	add_executable (pcm_test tests/pcm_test.c)
	target_link_libraries (pcm_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (pcm_test pcm_test)

	### common test executables

	add_executable (write_read_test
		tests/generate.c
		tests/write_read_test.c
	)
	target_link_libraries (write_read_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	target_include_directories (write_read_test PRIVATE tests)

	add_executable (lossy_comp_test tests/lossy_comp_test.c)
	target_link_libraries (lossy_comp_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (peak_chunk_test tests/peak_chunk_test.c)
	target_link_libraries (peak_chunk_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (header_test tests/header_test.c)
	target_link_libraries (header_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (misc_test tests/misc_test.c)
	target_link_libraries (misc_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (string_test tests/string_test.c)
	target_link_libraries (string_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (multi_file_test tests/multi_file_test.c)
	target_link_libraries (multi_file_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (aiff_rw_test tests/aiff_rw_test.c)
	target_link_libraries (aiff_rw_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (chunk_test tests/chunk_test.c)
	target_link_libraries (chunk_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (long_read_write_test tests/long_read_write_test.c)
	target_link_libraries (long_read_write_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (raw_test tests/raw_test.c)
	target_link_libraries (raw_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (compression_size_test tests/compression_size_test.c)
	target_link_libraries (compression_size_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (ogg_test tests/ogg_test.c)
	target_link_libraries (ogg_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (ogg_opus_test tests/ogg_opus_test.c)
	target_link_libraries (ogg_opus_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (stdin_test tests/stdin_test.c)
	target_link_libraries (stdin_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	set_target_properties (stdin_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""tests"")

	add_executable (stdout_test tests/stdout_test.c)
	target_link_libraries (stdout_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	set_target_properties (stdout_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""tests"")

	add_executable (stdio_test tests/stdio_test.c)
	target_link_libraries (stdio_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (pipe_test tests/pipe_test.c)
	target_link_libraries (pipe_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	add_executable (virtual_io_test tests/virtual_io_test.c)
	target_link_libraries (virtual_io_test
		PRIVATE
			sndfile
			test_utils
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)

	### g72x_test

	add_executable (g72x_test src/G72x/g72x_test.c)
	target_link_libraries (g72x_test
		PRIVATE
			sndfile
			$<$<BOOL:${LIBM_REQUIRED}>:m>
		)
	add_test (g72x_test g72x_test all)

	### aiff-tests

	add_test (write_read_test_aiff write_read_test aiff)
	add_test (lossy_comp_test_aiff_ulaw lossy_comp_test aiff_ulaw)
	add_test (lossy_comp_test_aiff_alaw lossy_comp_test aiff_alaw)
	add_test (lossy_comp_test_aiff_gsm610 lossy_comp_test aiff_gsm610)
	add_test (peak_chunk_test_aiff peak_chunk_test aiff)
	add_test (header_test_aiff header_test aiff)
	add_test (misc_test_aiff misc_test aiff)
	add_test (string_test_aiff string_test aiff)
	add_test (multi_file_test_aiff multi_file_test aiff)
	add_test (aiff_rw_test aiff_rw_test)

	### au-tests

	add_test (write_read_test_au write_read_test au)
	add_test (lossy_comp_test_au_ulaw lossy_comp_test au_ulaw)
	add_test (lossy_comp_test_au_alaw lossy_comp_test au_alaw)
	add_test (lossy_comp_test_au_g721 lossy_comp_test au_g721)
	add_test (lossy_comp_test_au_g723 lossy_comp_test au_g723)
	add_test (header_test_au header_test au)
	add_test (misc_test_au misc_test au)
	add_test (multi_file_test_au multi_file_test au)

	### caf-tests

	add_test (write_read_test_caf write_read_test caf)
	add_test (lossy_comp_test_caf_ulaw lossy_comp_test caf_ulaw)
	add_test (lossy_comp_test_caf_alaw lossy_comp_test caf_alaw)
	add_test (header_test_caf header_test caf)
	add_test (peak_chunk_test_caf peak_chunk_test caf)
	add_test (misc_test_caf misc_test caf)
	add_test (chunk_test_caf chunk_test caf)
	add_test (string_test_caf string_test caf)
	add_test (long_read_write_test_alac long_read_write_test alac)

	# wav-tests
	add_test (write_read_test_wav write_read_test wav)
	add_test (lossy_comp_test_wav_pcm lossy_comp_test wav_pcm)
	add_test (lossy_comp_test_wav_ima lossy_comp_test wav_ima)
	add_test (lossy_comp_test_wav_msadpcm lossy_comp_test wav_msadpcm)
	add_test (lossy_comp_test_wav_ulaw lossy_comp_test wav_ulaw)
	add_test (lossy_comp_test_wav_alaw lossy_comp_test wav_alaw)
	add_test (lossy_comp_test_wav_gsm610 lossy_comp_test wav_gsm610)
	add_test (lossy_comp_test_wav_g721 lossy_comp_test wav_g721)
	add_test (lossy_comp_test_wav_nmsadpcm lossy_comp_test wav_nmsadpcm)
	add_test (peak_chunk_test_wav peak_chunk_test wav)
	add_test (header_test_wav header_test wav)
	add_test (misc_test_wav misc_test wav)
	add_test (string_test_wav string_test wav)
	add_test (multi_file_test_wav multi_file_test wav)
	add_test (chunk_test_wav chunk_test wav)

	### w64-tests

	add_test (write_read_test_w64 write_read_test w64)
	add_test (lossy_comp_test_w64_ima lossy_comp_test w64_ima)
	add_test (lossy_comp_test_w64_msadpcm lossy_comp_test w64_msadpcm)
	add_test (lossy_comp_test_w64_ulaw lossy_comp_test w64_ulaw)
	add_test (lossy_comp_test_w64_alaw lossy_comp_test w64_alaw)
	add_test (lossy_comp_test_w64_gsm610 lossy_comp_test w64_gsm610)
	add_test (header_test_w64 header_test w64)
	add_test (misc_test_w64 misc_test w64)

	### rf64-tests

	add_test (write_read_test_rf64 write_read_test rf64)
	add_test (header_test_rf64 header_test rf64)
	add_test (misc_test_rf64 misc_test rf64)
	add_test (string_test_rf64 string_test rf64)
	add_test (peak_chunk_test_rf64 peak_chunk_test rf64)
	add_test (chunk_test_rf64 chunk_test rf64)

	### raw-tests
	add_test (write_read_test_raw write_read_test raw)
	add_test (lossy_comp_test_raw_ulaw lossy_comp_test raw_ulaw)
	add_test (lossy_comp_test_raw_alaw lossy_comp_test raw_alaw)
	add_test (lossy_comp_test_raw_gsm610 lossy_comp_test raw_gsm610)
	add_test (lossy_comp_test_vox_adpcm lossy_comp_test vox_adpcm)
	add_test (raw_test raw_test)

	### paf-tests
	add_test (write_read_test_paf write_read_test paf)
	add_test (header_test_paf header_test paf)
	add_test (misc_test_paf misc_test paf)

	### svx-tests
	add_test (write_read_test_svx write_read_test svx)
	add_test (header_test_svx header_test svx)
	add_test (misc_test_svx misc_test svx)

	### nist-tests
	add_test (write_read_test_nist write_read_test nist)
	add_test (lossy_comp_test_nist_ulaw lossy_comp_test nist_ulaw)
	add_test (lossy_comp_test_nist_alaw lossy_comp_test nist_alaw)
	add_test (header_test_nist header_test nist)
	add_test (misc_test_nist misc_test nist)

	### ircam-tests
	add_test (write_read_test_ircam write_read_test ircam)
	add_test (lossy_comp_test_ircam_ulaw lossy_comp_test ircam_ulaw)
	add_test (lossy_comp_test_ircam_alaw lossy_comp_test ircam_alaw)
	add_test (header_test_ircam header_test ircam)
	add_test (misc_test_ircam misc_test ircam)

	### voc-tests
	add_test (write_read_test_voc write_read_test voc)
	add_test (lossy_comp_test_voc_ulaw lossy_comp_test voc_ulaw)
	add_test (lossy_comp_test_voc_alaw lossy_comp_test voc_alaw)
	add_test (header_test_voc header_test voc)
	add_test (misc_test_voc misc_test voc)

	### mat4-tests
	add_test (write_read_test_mat4 write_read_test mat4)
	add_test (header_test_mat4 header_test mat4)
	add_test (misc_test_mat4 misc_test mat4)

	### mat5-tests
	add_test (write_read_test_mat5 write_read_test mat5)
	add_test (header_test_mat5 header_test mat5)
	add_test (misc_test_mat5 misc_test mat5)

	### pvf-tests
	add_test (write_read_test_pvf write_read_test pvf)
	add_test (header_test_pvf header_test pvf)
	add_test (misc_test_pvf misc_test pvf)

	### xi-tests
	add_test (lossy_comp_test_xi_dpcm lossy_comp_test xi_dpcm)

	### htk-tests
	add_test (write_read_test_htk write_read_test htk)
	add_test (header_test_htk header_test htk)
	add_test (misc_test_htk misc_test htk)

	### avr-tests
	add_test (write_read_test_avr write_read_test avr)
	add_test (header_test_avr header_test avr)
	add_test (misc_test_avr misc_test avr)

	### sds-tests
	add_test (write_read_test_sds write_read_test sds)
	add_test (header_test_sds header_test sds)
	add_test (misc_test_sds misc_test sds)

	# sd2-tests
	add_test (write_read_test_sd2 write_read_test sd2)

	### wve-tests
	add_test (lossy_comp_test_wve lossy_comp_test wve)

	### mpc2k-tests
	add_test (write_read_test_mpc2k write_read_test mpc2k)
	add_test (header_test_mpc2k header_test mpc2k)
	add_test (misc_test_mpc2k misc_test mpc2k)

	### flac-tests
	add_test (write_read_test_flac write_read_test flac)
	add_test (compression_size_test_flac compression_size_test flac)
	add_test (string_test_flac string_test flac)

	### vorbis-tests
	add_test (ogg_test ogg_test)
	add_test (compression_size_test_vorbis compression_size_test vorbis)
	add_test (lossy_comp_test_ogg_vorbis lossy_comp_test ogg_vorbis)
	add_test (string_test_ogg string_test ogg)
	add_test (misc_test_ogg misc_test ogg)

	### opus-tests ###
	add_test (ogg_opus_test ogg_opus_test)
	add_test (compression_size_test_opus compression_size_test opus)
	add_test (lossy_comp_test_ogg_opus lossy_comp_test ogg_opus)
	add_test (string_test_opus string_test opus)

	### io-tests
	add_test (stdio_test stdio_test)
	add_test (pipe_test pipe_test)
	add_test (virtual_io_test virtual_io_test)

	set (SNDFILE_TEST_TARGETS
		test_utils
		test_main
		sfversion
		error_test
		ulaw_test
		alaw_test
		dwvw_test
		command_test
		floating_point_test
		checksum_test
		scale_clip_test
		headerless_test
		rdwr_test
		locale_test
		cpp_test
		external_libs_test
		format_check_test
		channel_test
		pcm_test
		write_read_test
		lossy_comp_test
		peak_chunk_test
		header_test
		misc_test
		string_test
		multi_file_test
		aiff_rw_test
		chunk_test
		long_read_write_test
		raw_test
		compression_size_test
		ogg_test
		stdin_test
		stdout_test
		stdio_test
		pipe_test
		virtual_io_test
		g72x_test
		)

#	if (WIN32 AND BUILD_SHARED_LIBS)
#		list (APPEND SNDFILE_TEST_TARGETS win32_ordinal_test)
#	endif ()

	set_target_properties(${SNDFILE_TEST_TARGETS} PROPERTIES FOLDER Tests)

endif ()
",3.1.3,3.1
18530,kennethshackleton,SpecialKEval,False,False,False,False,False,2,C++,2020-04-19 09:31:21+00:00,2011-07-19 13:55:40+00:00,174,277,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)

set(PROJECT_NAME SKPokerEval)
project(${PROJECT_NAME})

# Versioning.
set(SK_POKER_EVAL_VERSION_MAJOR 1)
set(SK_POKER_EVAL_VERSION_MINOR 9)
set(SK_POKER_EVAL_VERSION_PATCH 0)

# Get the current commit.
execute_process(
  COMMAND git log -1 --format=%H
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE SK_POKER_EVAL_GIT_COMMIT
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

configure_file (
  ""${PROJECT_SOURCE_DIR}/src/SKConfig.h.in""
  ""${PROJECT_BINARY_DIR}/generated/SKConfig.h""
)

# Includes.
include_directories(""${PROJECT_SOURCE_DIR}/generated"")

# Output directories.
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

set(CMAKE_CXX_FLAGS ""-g -Wall"")
set(CMAKE_CXX_STANDARD 11)

# Build
add_subdirectory(src)

# Testing
enable_testing()
add_subdirectory(lib/gtest-1.7.0)
include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})

add_executable(eval_tests tests/five_eval_tests.cpp tests/seven_eval_tests.cpp)

target_link_libraries(eval_tests gtest_main skpokereval)
add_test(NAME GTests COMMAND eval_tests)

",3.1.0,3.1
18611,AnotherJohnH,Zif,False,False,False,False,False,1,C++,2020-03-10 22:56:16+00:00,2017-05-13 08:25:41+00:00,0,565,"#-------------------------------------------------------------------------------
#  Copyright (c) 2019 John D. Haughton
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the ""Software""), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#-------------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.10.2)

project(Zif
        VERSION   0.6.2
        LANGUAGES C CXX ASM)

set(author      ""John D. Haughton"")

set(source      Source/zif.cpp Source/common/ConsoleImpl.cpp)
set(binary      zif)

add_compile_options(-DTERMINAL_EMULATOR)
include_directories(Source)

#-------------------------------------------------------------------------------

include(Platform/build.cmake NO_POLICY_SCOPE)

#-------------------------------------------------------------------------------

add_executable(${binary} ${source})
target_link_libraries(${binary} ${PLT_libs})

install(TARGETS ${binary} RUNTIME DESTINATION .)
install(FILES README DESTINATION .)
install(DIRECTORY Images DESTINATION .)
install(DIRECTORY Games DESTINATION .)
install(DIRECTORY Scripts DESTINATION .)
",3.10.2,3.1
18708,rncbc,qtractor,False,False,False,False,False,15,C++,2020-05-07 16:11:47+00:00,2015-09-22 14:41:33+00:00,253,5209,"project(QTRACTOR)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.9.14"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""Qtractor"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qtractor"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable libvorbis(file) availability.
option (CONFIG_LIBVORBIS ""Enable libvorbis interface (default=yes)"" 1)

# Enable libmad availability.
option (CONFIG_LIBMAD ""Enable libmad interface (default=yes)"" 1)

# Enable libsamplerate availability.
option (CONFIG_LIBSAMPLERATE ""Enable libsamplerate interface (default=yes)"" 1)

# Enable librubberband availability.
option (CONFIG_LIBRUBBERBAND ""Enable librubberband interface (default=yes)"" 1)

# Enable libaudio support.
option (CONFIG_LIBAUBIO ""Enable libaubio interface support (default=yes)"" 1)

# Enable liblo availability.
option (CONFIG_LIBLO ""Enable liblo interface (default=yes)"" 1)

# Enable libz availability.
option (CONFIG_LIBZ ""Enable libz interface (default=yes)"" 1)

# Enable LILV support.
option (CONFIG_LIBLILV ""Enable LILV interface support (default=yes)"" 1)

# Enable SUIL support.
option (CONFIG_LIBSUIL ""Enable SUIL interface support (default=yes)"" 1)

# Enable SSE optimization.
option (CONFIG_SSE ""Enable SSE optimization (default=yes)"" 1)

# Enable LADSPA support.
option (CONFIG_LADSPA ""Enable LADSPA plug-in support (default=yes)"" 1)

# Enable DSSI support.
option (CONFIG_DSSI ""Enable DSSI plug-in support (default=yes)"" 1)

# Enable VST support.
option (CONFIG_VST ""Enable VST plug-in support (default=yes)"" 1)

option (CONFIG_VESTIGE ""Enable VeSTige header support (default=yes)"" 1)

# Enable VST3 support.
option (CONFIG_VST3 ""Enable VST3 plug-in support (default=yes)"" 1)

# Enable LV2 support.
option (CONFIG_LV2 ""Enable LV2 plug-in support (default=yes)"" 1)

option (CONFIG_LV2_EVENT ""Enable LV2 plug-in MIDI/Event support (default=no)"" 0)

option (CONFIG_LV2_ATOM ""Enable LV2 plug-in MIDI/Atom support (default=yes)"" 1)

option (CONFIG_LV2_WORKER ""Enable LV2 plug-in Worker/schedule support (default=yes)"" 1)

option (CONFIG_LV2_UI ""Enable LV2 plug-in UI support (default=yes)"" 1)

option (CONFIG_LV2_EXTERNAL_UI ""Enable LV2 plug-in External UI support (default=yes)"" 1)

option (CONFIG_LV2_STATE ""Enable LV2 plug-in State support (default=yes)"" 1)

option (CONFIG_LV2_STATE_FILES ""Enable LV2 plug-in State Files support (default=yes)"" 1)

option (CONFIG_LV2_STATE_MAKE_PATH ""Enable LV2 plug-in State Make Path support (default=no)"" 0)

option (CONFIG_LV2_PROGRAMS ""Enable LV2 plug-in Programs support (default=yes)"" 1)

option (CONFIG_LV2_MIDNAM ""Enable LV2 plug-in MIDNAM support (default=yes)"" 1)

option (CONFIG_LV2_PRESETS ""Enable LV2 plug-in Presets support (default=yes)"" 1)

option (CONFIG_LV2_PATCH ""Enable LV2 plug-in Patch support (default=yes)"" 1)

option (CONFIG_LV2_PORT_EVENT ""Enable LV2 plug-in Port-eventsupport (EXPERIMENTAL) (default=no)"" 0)

option (CONFIG_LV2_TIME ""Enable LV2 plug-in Time support (default=yes)"" 1)

option (CONFIG_LV2_TIME_POSITION ""Enable LV2 plug-in Time/position support (default=yes)"" 1)

option (CONFIG_LV2_OPTIONS ""Enable LV2 plug-in Options support (default=yes)"" 1)

option (CONFIG_LV2_BUF_SIZE ""Enable LV2 plug-in Buf-size support (default=yes)"" 1)

option (CONFIG_LV2_PARAMETERS ""Enable LV2 plug-in Parameters support (default=yes)"" 1)

option (CONFIG_LV2_UI_TOUCH ""Enable LV2 plug-in UI Touch interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_REQ_VALUE ""Enable LV2 plug-in UI Request-value support (default=yes)"" 1)

option (CONFIG_LV2_UI_IDLE ""Enable LV2 plug-in UI Idle interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_SHOW ""Enable LV2 plug-in UI Show interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_GTK2 ""Enable LV2 plug-in UI GTK2 native support (default=yes)"" 1)

option (CONFIG_LV2_UI_X11 ""Enable LV2 plug-in UI X11 native support (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK latency support.
option (CONFIG_JACK_LATENCY ""Enable JACK latency support (default=yes)"" 1)

# Enable JACK metadata support.
option (CONFIG_JACK_METADATA ""Enable JACK metadata support (default=yes)"" 1)

# Enable NSM support.
option (CONFIG_NSM ""Enable NSM support (default=yes)"" 1)

# Enable unique/single instance.
option (CONFIG_XUNIQUE ""Enable unique/single instance (default=no)"" 0)

# Enable gradient eye_candy.
option (CONFIG_GRADIENT ""Enable gradient eye-candy (default=yes)"" 1)

# Enable debugger stack_trace option (assumes --enable-debug).
option (CONFIG_STACKTRACE ""Enable debugger stack-trace (default=no)"" 0)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

if (CONFIG_XUNIQUE)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckStructHasMember)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for libraries.
if (WIN32)
  check_function_exists (lroundf CONFIG_ROUND)
else ()
  find_library (MATH_LIBRARY m)
  if (MATH_LIBRARY)
    set (CMAKE_REQUIRED_LIBRARIES ""${MATH_LIBRARY};${CMAKE_REQUIRED_LIBRARIES}"")
  # link_libraries (${MATH_LIBRARY})
    check_function_exists (lroundf CONFIG_ROUND)
  else ()
    message (FATAL_ERROR ""*** math library not found."")
  endif ()
  find_library (DL_LIBRARY dl)
  if (DL_LIBRARY)
  # set (CMAKE_REQUIRED_LIBRARIES ""${DL_LIBRARY};${CMAKE_REQUIRED_LIBRARIES}"")
    link_libraries (${DL_LIBRARY})
  else ()
    message (FATAL_ERROR ""*** dl library not found."")
  endif ()
endif ()

# Check for IEEE 32bit float optimizations.
set (CONFIG_FLOAT32 1)

# Check for SSE optimization.
if (CONFIG_SSE)
  add_compile_options (-msse -mfpmath=sse -ffast-math)
endif ()

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Check for LADSPA headers.
if (CONFIG_LADSPA)
  check_include_file (ladspa.h HAVE_LADSPA_H)
  if (NOT HAVE_LADSPA_H)
    set (CONFIG_LADSPA 0)
  endif ()
endif ()

# Check for DSSI headers.
if (CONFIG_DSSI)
  check_include_file (dssi.h HAVE_DSSI_H)
  if (NOT HAVE_DSSI_H)
    set (CONFIG_DSSI 0)
  endif ()
endif ()

# Check for VST headers.
if (CONFIG_VST)
  check_include_file (aeffectx.h HAVE_AEFFECTX_H)
  if (NOT HAVE_AEFFECTX_H AND CONFIG_VESTIGE)
    set (VESTIGE_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/vestige)
    set (CMAKE_REQUIRED_INCLUDES ""${VESTIGE_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
    include_directories (${VESTIGE_INCLUDES})
    check_include_file (vestige.h HAVE_VESTIGE_H)
    if (NOT HAVE_VESTIGE_H)
      set (CONFIG_VESTIGE 0)
    endif ()
    set (CONFIG_VST ${CONFIG_VESTIGE})
  else ()
    set (CONFIG_VESTIGE 0)
  endif ()
endif ()

# Check for LV2 headers.
if (CONFIG_LV2)
  set (LV2_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/lv2)
  set (CMAKE_REQUIRED_INCLUDES ""${LV2_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
  include_directories (${LV2_INCLUDES})
endif ()

# Find package modules
find_package (PkgConfig REQUIRED)

# Check for JACK libraries.
pkg_check_modules (JACK REQUIRED jack>=0.100.0)
if (JACK_FOUND)
  set (CONFIG_LIBJACK 1)
  include_directories (${JACK_INCLUDE_DIRS})
  link_directories (${JACK_LIBRARY_DIRS})
# link_libraries (${JACK_LIBRARIES})
  set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  # Check for JACK session event callback availability.
  if (CONFIG_JACK_SESSION)
    check_function_exists (jack_set_session_callback CONFIG_JACK_SESSION)
  endif ()
  # Check for (new) JACK latency support availability.
  if (CONFIG_JACK_LATENCY)
    check_function_exists (jack_port_get_latency_range CONFIG_JACK_LATENCY)
  endif ()
  # Check for JACK metadata support availability.
  if (CONFIG_JACK_METADATA)
    check_function_exists (jack_get_property CONFIG_JACK_METADATA)
  endif ()
  # Check for jack_set_port_rename_callback.
  check_function_exists (jack_set_port_rename_callback CONFIG_JACK_PORT_RENAME)
else ()
  message (FATAL_ERROR ""*** JACK library not found."")
  set (CONFIG_LIBJACK 0)
endif ()

# Check for ALSA libraries.
pkg_check_modules (ALSA REQUIRED alsa)
if (ALSA_FOUND)
  set (CONFIG_LIBASOUND 1)
  include_directories (${ALSA_INCLUDE_DIRS})
  link_directories (${ALSA_LIBRARY_DIRS})
  link_libraries (${ALSA_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** ALSA library not found."")
  set (CONFIG_LIBASOUND 0)
endif ()

# Check for SNDFILE libraries.
pkg_check_modules (SNDFILE REQUIRED sndfile)
if (SNDFILE_FOUND)
  set (CONFIG_LIBSNDFILE 1)
  include_directories (${SNDFILE_INCLUDE_DIRS})
  link_directories (${SNDFILE_LIBRARY_DIRS})
  link_libraries (${SNDFILE_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${SNDFILE_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** SNDFILE library not found."")
  set (CONFIG_LIBSNDFILE 0)
endif ()

# Check for VORBIS libraries.
if (CONFIG_LIBVORBIS)
  pkg_check_modules (VORBIS vorbis)
  if (VORBIS_FOUND)
    include_directories (${VORBIS_INCLUDE_DIRS})
    link_directories (${VORBIS_LIBRARY_DIRS})
    link_libraries (${VORBIS_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${VORBIS_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** VORBIS library not found."")
    set (CONFIG_LIBVORBIS 0)
  endif ()
endif ()

if (CONFIG_LIBVORBIS)
  pkg_check_modules (VORBISENC vorbisenc)
  if (VORBISENC_FOUND)
    include_directories (${VORBISENC_INCLUDE_DIRS})
    link_directories (${VORBISENC_LIBRARY_DIRS})
    link_libraries (${VORBISENC_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${VORBISENC_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  endif ()
endif ()

if (CONFIG_LIBVORBIS)
  pkg_check_modules (VORBISFILE vorbisfile)
  if (VORBISFILE_FOUND)
    include_directories (${VORBISFILE_INCLUDE_DIRS})
    link_directories (${VORBISFILE_LIBRARY_DIRS})
    link_libraries (${VORBISFILE_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${VORBISFILE_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  endif ()
endif ()

if (CONFIG_LIBVORBIS)
  pkg_check_modules (OGG ogg)
  if (OGG_FOUND)
    include_directories (${OGG_INCLUDE_DIRS})
    link_directories (${OGG_LIBRARY_DIRS})
    link_libraries (${OGG_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${OGG_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  endif ()
endif ()

# Check for MAD libraries.
if (CONFIG_LIBMAD)
  pkg_check_modules (MAD mad)
  if (MAD_FOUND)
    include_directories (${MAD_INCLUDE_DIRS})
    link_directories (${MAD_LIBRARY_DIRS})
    link_libraries (${MAD_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${MAD_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** MAD library not found."")
    set (CONFIG_LIBMAD 0)
  endif ()
endif ()

# Check for SAMPLERATE libraries.
if (CONFIG_LIBSAMPLERATE)
  pkg_check_modules (SAMPLERATE samplerate)
  if (SAMPLERATE_FOUND)
    include_directories (${SAMPLERATE_INCLUDE_DIRS})
    link_directories (${SAMPLERATE_LIBRARY_DIRS})
    link_libraries (${SAMPLERATE_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${SAMPLERATE_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** SAMPLERATE library not found."")
    set (CONFIG_LIBSAMPLERATE 0)
  endif ()
endif ()

# Check for RUBBERBAND libraries.
if (CONFIG_LIBRUBBERBAND)
  pkg_check_modules (RUBBERBAND rubberband)
  if (RUBBERBAND_FOUND)
    include_directories (${RUBBERBAND_INCLUDE_DIRS})
    link_directories (${RUBBERBAND_LIBRARY_DIRS})
    link_libraries (${RUBBERBAND_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${RUBBERBAND_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** RUBBERBAND library not found."")
    set (CONFIG_LIBRUBBERBAND 0)
  endif ()
endif ()

# Check for AUBIO libraries.
if (CONFIG_LIBAUBIO)
  pkg_check_modules (AUBIO aubio>=0.4.1)
  if (AUBIO_FOUND)
    include_directories (${AUBIO_INCLUDE_DIRS})
    link_directories (${AUBIO_LIBRARY_DIRS})
    link_libraries (${AUBIO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${AUBIO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** AUBIO library not found."")
    set (CONFIG_LIBAUBIO 0)
  endif ()
endif ()

# Check for LIBLO libraries.
if (CONFIG_LIBLO)
  pkg_check_modules (LIBLO liblo)
  if (LIBLO_FOUND)
    include_directories (${LIBLO_INCLUDE_DIRS})
    link_directories (${LIBLO_LIBRARY_DIRS})
    link_libraries (${LIBLO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LIBLO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LIBLO library not found."")
    set (CONFIG_LIBLO 0)
  endif ()
endif ()

# Check for ZLIB libraries.
if (CONFIG_LIBZ)
  pkg_check_modules (ZLIB zlib)
  if (ZLIB_FOUND)
    include_directories (${ZLIB_INCLUDE_DIRS})
    link_directories (${ZLIB_LIBRARY_DIRS})
    link_libraries (${ZLIB_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${ZLIB_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** ZLIB library not found."")
    set (CONFIG_LIBZ 0)
  endif ()
endif ()

# Check for VST3 SDK.
if (CONFIG_VST3)
  pkg_check_modules (VST3SDK vst3sdk>=3.6.14)
  if (VST3SDK_FOUND)
    include_directories (${VST3SDK_INCLUDE_DIRS})
    set (CONFIG_VST3SDK ${VST3SDK_INCLUDE_DIRS})
    pkg_check_modules (XCB xcb)
    if (XCB_FOUND)
      include_directories (${XCB_INCLUDE_DIRS})
      link_directories (${XCB_LIBRARY_DIRS})
      link_libraries (${XCB_LIBRARIES})
    endif ()
  else ()
    message (WARNING ""*** VST3 SDK not found."")
    set (CONFIG_VST3 0)
  endif ()
endif ()

# Check for LV2 support.
if (CONFIG_LV2)
  pkg_check_modules (LV2 lv2)
  if (LV2_FOUND)
    include_directories (${LV2_INCLUDE_DIRS})
    link_directories (${LV2_LIBRARY_DIRS})
    link_libraries (${LV2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LV2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LV2 SDK not found."")
    set (CONFIG_LV2 0)
  endif ()
endif ()

if (NOT CONFIG_LV2)
  set (CONFIG_LIBLILV 0)
  set (CONFIG_LV2_UI 0)
endif ()

# Check for optional LILV library.
if (CONFIG_LIBLILV)
  pkg_check_modules (LILV lilv-0)
  if (LILV_FOUND)
    include_directories (${LILV_INCLUDE_DIRS})
    link_directories (${LILV_LIBRARY_DIRS})
  # link_libraries (${LILV_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${LILV_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    check_function_exists (lilv_file_uri_parse CONFIG_LILV_FILE_URI_PARSE)
    check_function_exists (lilv_world_unload_resource CONFIG_LILV_WORLD_UNLOAD_RESOURCE)
  else ()
    message (WARNING ""*** LILV library not found."")
    set (CONFIG_LIBLILV 0)
  endif ()
endif ()

if (CONFIG_LV2_UI)
  check_include_file(lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_H)
  if (NOT HAVE_LV2_UI_H)
    set (CONFIG_LV2_UI 0)
  endif ()
  if (CONFIG_LV2_UI)
    # Check for LV2 external UI instance access.
    if (CONFIG_LV2_EXTERNAL_UI)
      check_include_file (lv2/lv2plug.in/ns/ext/instance-access/instance-access.h HAVE_LV2_INSTANCE_ACCESS_H)
      if (NOT HAVE_LV2_INSTANCE_ACCESS_H)
        set (CONFIG_LV2_EXTERNAL_UI 0)
      endif ()
    endif ()
  endif ()
endif ()

if (NOT CONFIG_LV2_UI)
  set (CONFIG_LIBSUIL 0)
  set (CONFIG_LV2_EXTERNAL_UI 0)
  set (CONFIG_LV2_UI_TOUCH 0)
  set (CONFIG_LV2_UI_REQ_VALUE 0)
  set (CONFIG_LV2_UI_IDLE 0)
  set (CONFIG_LV2_UI_SHOW 0)
  set (CONFIG_LV2_UI_GTK2 0)
  set (CONFIG_LV2_UI_X11 0)
endif ()

# Check for optional SUIL library.
if (CONFIG_LIBSUIL)
  pkg_check_modules (SUIL suil-0)
  if (SUIL_FOUND)
    include_directories (${SUIL_INCLUDE_DIRS})
    link_directories (${SUIL_LIBRARY_DIRS})
  # link_libraries (${SUIL_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${SUIL_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    check_function_exists(suil_instance_get_handle CONFIG_SUIL_INSTANCE_GET_HANDLE)
    set (CONFIG_LIBSUIL_GTK2_IN_QT5 1)
    set (CONFIG_LIBSUIL_X11_IN_QT5 1)
  else ()
    message (WARNING ""*** SUIL library not found."")
    set (CONFIG_LIBSUIL 0)
  endif ()
endif ()

if (CONFIG_LV2_EVENT)
  check_include_file (lv2/lv2plug.in/ns/ext/event/event.h HAVE_LV2_EVENT_H)
  if (NOT HAVE_LV2_EVENT_H)
    set (CONFIG_LV2_EVENT 0)
  endif ()
endif ()

if (CONFIG_LV2_ATOM)
  check_include_file (lv2/lv2plug.in/ns/ext/atom/atom.h HAVE_LV2_ATOM_H)
  if (NOT HAVE_LV2_ATOM_H)
    set (CONFIG_LV2_ATOM 0)
  endif ()
  set (CONFIG_LV2_ATOM_FORGE_OBJECT ${CONFIG_LV2_ATOM})
  set (CONFIG_LV2_ATOM_FORGE_KEY ${CONFIG_LV2_ATOM})
endif ()

if (NOT CONFIG_LV2_ATOM)
  set (CONFIG_LV2_ATOM_FORGE_OBJECT 0)
  set (CONFIG_LV2_ATOM_FORGE_KEY 0)
  set (CONFIG_LV2_STATE 0)
  set (CONFIG_LV2_OPTIONS 0)
  set (CONFIG_LV2_TIME_POSITION 0)
endif ()

if (CONFIG_LV2_WORKER)
  check_include_file (lv2/lv2plug.in/ns/ext/worker/worker.h HAVE_LV2_WORKER_H)
  if (NOT HAVE_LV2_WORKER_H)
    set (CONFIG_LV2_WORKER 0)
  endif ()
endif ()

if (CONFIG_LV2_STATE)
  check_include_file (lv2/lv2plug.in/ns/ext/state/state.h HAVE_LV2_STATE_H)
  if (NOT HAVE_LV2_STATE_H)
    set (CONFIG_LV2_STATE 0)
  endif ()
endif ()

if (NOT CONFIG_LV2_STATE)
  set (CONFIG_LV2_STATE_FILES 0)
  set (CONFIG_LV2_STATE_MAKE_PATH 0)
  set (CONFIG_LV2_PRESETS 0)
  set (CONFIG_LV2_PATCH 0)
endif ()

if (CONFIG_LV2_PROGRAMS)
  check_include_file (lv2_programs.h HAVE_LV2_PROGRAMS_H)
  if (NOT HAVE_LV2_PROGRAMS_H)
    set (CONFIG_LV2_PROGRAMS 0)
  endif ()
endif ()

if (CONFIG_LV2_MIDNAM)
  check_include_file (lv2_midnam.h HAVE_LV2_MIDNAM_H)
  if (NOT HAVE_LV2_MIDNAM_H)
    set (CONFIG_LV2_MIDNAM 0)
  endif ()
endif ()

if (CONFIG_LV2_PRESETS)
  check_include_file (lv2/lv2plug.in/ns/ext/presets/presets.h HAVE_LV2_PRESETS_H)
  if (NOT HAVE_LV2_PRESETS_H)
    set (CONFIG_LV2_PRESETS 0)
  endif ()
endif ()

if (CONFIG_LV2_PATCH)
  check_include_file (lv2/lv2plug.in/ns/ext/patch/patch.h HAVE_LV2_PATCH_H)
  if (NOT HAVE_LV2_PATCH_H)
    set (CONFIG_LV2_PATCH 0)
  endif ()
endif ()

if (CONFIG_LV2_TIME)
  check_include_file (lv2/lv2plug.in/ns/ext/time/time.h HAVE_LV2_TIME_H)
  if (NOT HAVE_LV2_TIME_H)
    set (CONFIG_LV2_TIME 0)
  endif ()
endif ()

if (NOT CONFIG_LV2_TIME)
  set (CONFIG_LV2_TIME_POSITION 0)
endif ()

if (CONFIG_LV2_OPTIONS)
  check_include_file (lv2/lv2plug.in/ns/ext/options/options.h HAVE_LV2_OPTIONS_H)
  if (NOT HAVE_LV2_OPTIONS_H)
    set (CONFIG_LV2_OPTIONS 0)
  endif ()
endif ()

if (NOT CONFIG_LV2_OPTIONS)
  set (CONFIG_LV2_BUF_SIZE 0)
endif ()

if (CONFIG_LV2_BUF_SIZE)
  check_include_file (lv2/lv2plug.in/ns/ext/buf-size/buf-size.h HAVE_LV2_BUF_SIZE_H)
  if (NOT HAVE_LV2_BUF_SIZE_H)
    set (CONFIG_LV2_BUF_SIZE 0)
  endif ()
endif ()

if (CONFIG_LV2_PARAMETERS)
  check_include_file (lv2/lv2plug.in/ns/ext/parameters/parameters.h HAVE_LV2_PARAMETERS_H)
  if (NOT HAVE_LV2_PARAMETERS_H)
    set (CONFIG_LV2_PARAMETERS 0)
  endif ()
endif ()

if (CONFIG_LV2_UI_TOUCH)
  check_struct_has_member (""LV2UI_Touch"" touch lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_TOUCH)
  if (NOT HAVE_LV2_UI_TOUCH)
    set (CONFIG_LV2_UI_TOUCH 0)
  endif ()
endif ()

if (CONFIG_LV2_UI_REQ_VALUE)
  check_struct_has_member (""LV2UI_Request_Value"" request lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_REQ_VALUE)
  if (NOT HAVE_LV2_UI_REQ_VALUE)
    set (CONFIG_LV2_UI_REQ_VALUE_FAKE 1)
  endif ()
endif ()

if (CONFIG_LV2_UI_GTK2)
  pkg_check_modules (GTK2 gtk+-2.0)
  if (GTK2_FOUND)
    include_directories (${GTK2_INCLUDE_DIRS})
    link_directories (${GTK2_LIBRARY_DIRS})
    link_libraries (${GTK2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${GTK2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** GTK2 libraries not found."")
    set (CONFIG_LV2_UI_GTK2 0)
  endif ()
endif ()

# Check for VST/X11 support.
if (CONFIG_VST)
  find_package (Qt5 REQUIRED NO_MODULE COMPONENTS X11Extras)
endif ()


# Check for VST3 plug-in support.
if (CONFIG_VST3SDK)
  set (CONFIG_VST3 1)
  include_directories (${CONFIG_VST3SDK})
else ()
  set (CONFIG_VST3 0)
endif ()

add_subdirectory (src)


configure_file (qtractor.spec.in qtractor.spec IMMEDIATE @ONLY)

install (FILES qtractor.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qtractor.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qtractor.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK Audio Connection Kit support  . . . . . . . ."" CONFIG_LIBJACK)
show_option (""  ALSA MIDI Sequencer support  . . . . . . . . . . ."" CONFIG_LIBASOUND)
show_option (""  General audio file support (libsndfile)  . . . . ."" CONFIG_LIBSNDFILE)
show_option (""  Ogg Vorbis audio file support (libvorbis)  . . . ."" CONFIG_LIBVORBIS)
show_option (""  MPEG-1 Audio Layer 3 file support (libmad) . . . ."" CONFIG_LIBMAD)
show_option (""  Sample-rate conversion support (libsamplerate) . ."" CONFIG_LIBSAMPLERATE)
show_option (""  Pitch-shifting support (librubberband) . . . . . ."" CONFIG_LIBRUBBERBAND)
show_option (""  Beat-detection support (libaubio)  . . . . . . . ."" CONFIG_LIBAUBIO)
show_option (""  OSC service support (liblo)  . . . . . . . . . . ."" CONFIG_LIBLO)
show_option (""  Archive/Zip file support (zlib)  . . . . . . . . ."" CONFIG_LIBZ)
show_option (""  IEEE 32bit float optimizations . . . . . . . . . ."" CONFIG_FLOAT32)
show_option (""  SSE optimization support (x86) . . . . . . . . . ."" CONFIG_SSE)
show_option (""  LADSPA plug-in support . . . . . . . . . . . . . ."" CONFIG_LADSPA)
show_option (""  DSSI plug-in support . . . . . . . . . . . . . . ."" CONFIG_DSSI)
show_option (""  VST plug-in support  . . . . . . . . . . . . . . ."" CONFIG_VST)
show_option (""  VST3 plug-in support (EXPERIMENTAL)  . . . . . . ."" CONFIG_VST3)
show_option (""  LV2 plug-in support  . . . . . . . . . . . . . . ."" CONFIG_LV2)
show_option (""  LV2 plug-in support (liblilv)  . . . . . . . . . ."" CONFIG_LIBLILV)
show_option (""  LV2 plug-in UI support . . . . . . . . . . . . . ."" CONFIG_LV2_UI)
show_option (""  LV2 plug-in UI support (libsuil) . . . . . . . . ."" CONFIG_LIBSUIL)
show_option (""  LV2 plug-in External UI support  . . . . . . . . ."" CONFIG_LV2_EXTERNAL_UI)
show_option (""  LV2 plug-in MIDI/Event support (DEPRECATED)  . . ."" CONFIG_LV2_EVENT)
show_option (""  LV2 plug-in MIDI/Atom support  . . . . . . . . . ."" CONFIG_LV2_ATOM)
show_option (""  LV2 plug-in Worker/Schedule support  . . . . . . ."" CONFIG_LV2_WORKER)
show_option (""  LV2 plug-in State support  . . . . . . . . . . . ."" CONFIG_LV2_STATE)
show_option (""  LV2 plug-in State Files support  . . . . . . . . ."" CONFIG_LV2_STATE_FILES)
show_option (""  LV2 plug-in State Make Path support (DANGEROUS)  ."" CONFIG_LV2_STATE_MAKE_PATH)
show_option (""  LV2 plug-in Programs support . . . . . . . . . . ."" CONFIG_LV2_PROGRAMS)
show_option (""  LV2 plug-in MIDNAM support . . . . . . . . . . . ."" CONFIG_LV2_MIDNAM)
show_option (""  LV2 plug-in Presets support  . . . . . . . . . . ."" CONFIG_LV2_PRESETS)
show_option (""  LV2 plug-in Patch support  . . . . . . . . . . . ."" CONFIG_LV2_PATCH)
show_option (""  LV2 plug-in Port-event support (EXPERIMENTAL)  . ."" CONFIG_LV2_PORT_EVENT)
show_option (""  LV2 plug-in Time support . . . . . . . . . . . . ."" CONFIG_LV2_TIME)
show_option (""  LV2 plug-in Time/position support  . . . . . . . ."" CONFIG_LV2_TIME_POSITION)
show_option (""  LV2 plug-in Options support  . . . . . . . . . . ."" CONFIG_LV2_OPTIONS)
show_option (""  LV2 plug-in Buf-size support . . . . . . . . . . ."" CONFIG_LV2_BUF_SIZE)
show_option (""  LV2 plug-in Parameters support . . . . . . . . . ."" CONFIG_LV2_PARAMETERS)
show_option (""  LV2 plug-in UI Touch interface support . . . . . ."" CONFIG_LV2_UI_TOUCH)
show_option (""  LV2 plug-in UI Request-value support . . . . . . ."" CONFIG_LV2_UI_REQ_VALUE)
show_option (""  LV2 plug-in UI Idle interface support  . . . . . ."" CONFIG_LV2_UI_IDLE)
show_option (""  LV2 plug-in UI Show interface support  . . . . . ."" CONFIG_LV2_UI_SHOW)
show_option (""  LV2 plug-in UI GTK2 native support . . . . . . . ."" CONFIG_LV2_UI_GTK2)
show_option (""  LV2 plug-in UI X11 native support  . . . . . . . ."" CONFIG_LV2_UI_X11)
message     ("""")
show_option (""  JACK Session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK Latency support . . . . . . . . . . . . . . ."" CONFIG_JACK_LATENCY)
show_option (""  JACK Metadata support  . . . . . . . . . . . . . ."" CONFIG_JACK_METADATA)
message     ("""")
show_option (""  Non Session Management (NSM) support . . . . . . ."" CONFIG_NSM)
message     ("""")
show_option (""  VeSTige header support . . . . . . . . . . . . . ."" CONFIG_VESTIGE)
show_option (""  Unique/Single instance support . . . . . . . . . ."" CONFIG_XUNIQUE)
show_option (""  Gradient eye-candy . . . . . . . . . . . . . . . ."" CONFIG_GRADIENT)
show_option (""  Debugger stack-trace (gdb) . . . . . . . . . . . ."" CONFIG_STACKTRACE)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
18838,PrestoPalette,PrestoPalette,False,False,False,False,False,3,C++,2019-04-07 15:31:01+00:00,2017-02-24 13:24:44+00:00,13,201,"cmake_minimum_required(VERSION 3.1.0)

SET(VERSION_MAJOR ""0"")
SET(VERSION_MINOR ""1"")
SET(VERSION_PATCH ""30"")

project(PrestoPalette VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})

enable_testing()

include(InstallRequiredSystemLibraries)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

SET(CPACK_PACKAGE_NAME ""${CMAKE_PROJECT_NAME}"")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""An artist's tool for creating harmonious color palettes"")
SET(CPACK_PACKAGE_VENDOR ""John Cbonis and Darryl T. Agostinelli"")
SET(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
SET(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")

SET(CPACK_PACKAGE_VERSION_MAJOR ""${VERSION_MAJOR}"")
SET(CPACK_PACKAGE_VERSION_MINOR ""${VERSION_MINOR}"")
SET(CPACK_PACKAGE_VERSION_PATCH ""${VERSION_PATCH}"")

SET(CPACK_PACKAGE_INSTALL_DIRECTORY ""${CPACK_PACKAGE_NAME}"")

CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/application.rc.in"" ""${CMAKE_CURRENT_BINARY_DIR}/application.rc"" @ONLY IMMEDIATE)

find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Multimedia REQUIRED)
find_package(Qt5Network REQUIRED)

IF(MINGW)
	add_executable(${CMAKE_PROJECT_NAME} WIN32 main.cpp mainwindow.cpp resources.qrc ${CMAKE_CURRENT_BINARY_DIR}/application.rc visualpalette.cpp circlepalette.cpp clickablelabel.cpp aboutdialog.cpp lightingsliderstyle.cpp)
ELSEIF(APPLE)
	add_executable(${CMAKE_PROJECT_NAME} MACOSX_BUNDLE ""${CMAKE_SOURCE_DIR}/graphics/favicon.icns"" main.cpp mainwindow.cpp resources.qrc ${CMAKE_CURRENT_BINARY_DIR}/application.rc visualpalette.cpp circlepalette.cpp clickablelabel.cpp aboutdialog.cpp lightingsliderstyle.cpp)
ELSE()
	# Linux
	add_executable(${CMAKE_PROJECT_NAME} main.cpp mainwindow.cpp resources.qrc ${CMAKE_CURRENT_BINARY_DIR}/application.rc visualpalette.cpp circlepalette.cpp clickablelabel.cpp aboutdialog.cpp lightingsliderstyle.cpp)
ENDIF()

target_link_libraries(${CMAKE_PROJECT_NAME} Qt5::Widgets)
target_link_libraries(${CMAKE_PROJECT_NAME} Qt5::Core)
target_link_libraries(${CMAKE_PROJECT_NAME} Qt5::Gui)
target_link_libraries(${CMAKE_PROJECT_NAME} Qt5::Multimedia)

set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY CXX_STANDARD 11)
set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)

INSTALL(TARGETS ${CMAKE_PROJECT_NAME}
		BUNDLE DESTINATION .
		RUNTIME DESTINATION .
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		)

IF(MINGW)
	function(force_find_library file_name)
		SET(FOUND_LIB ""FOUND_LIB-NOTFOUND"")
		find_library(FOUND_LIB NAMES ${file_name} PATHS ${CMAKE_FIND_ROOT_PATH}/bin/ NO_DEFAULT_PATH)
		if(FOUND_LIB)
			file(COPY ${FOUND_LIB} DESTINATION ${CMAKE_BINARY_DIR}/bin/)
		else()
			message(FATAL_ERROR ""${file_name} not found"")
		endif()
	endfunction()

	force_find_library(""libgcc_s_seh-1.dll"")
	force_find_library(""libstdc++-6.dll"")
	force_find_library(""libwinpthread-1.dll"")
	force_find_library(""libpcre16-0.dll"")
	force_find_library(""libpcre2-16-0.dll"")
	force_find_library(""libpcre-1.dll"")
	force_find_library(""libGLESv2.dll"")
	force_find_library(""libharfbuzz-0.dll"")
	force_find_library(""libglib-2.0-0.dll"")
	force_find_library(""zlib1.dll"")
	force_find_library(""libintl-8.dll"")
	force_find_library(""iconv.dll"")
	force_find_library(""libpng16-16.dll"")
	force_find_library(""libEGL.dll"")

	file(COPY ${CMAKE_FIND_ROOT_PATH}/lib/qt5/plugins/platforms/ DESTINATION ${CMAKE_BINARY_DIR}/bin/platforms/)
	file(COPY ${CMAKE_FIND_ROOT_PATH}/lib/qt5/plugins/audio/ DESTINATION ${CMAKE_BINARY_DIR}/bin/audio/)

	install(DIRECTORY ${CMAKE_BINARY_DIR}/bin/ DESTINATION . FILES_MATCHING PATTERN ""*.dll"" )

	get_target_property(Qt5_Core_Location Qt5::Core LOCATION)
	get_target_property(Qt5_Gui_Location Qt5::Gui LOCATION)
	get_target_property(Qt5_Widgets_Location Qt5::Widgets LOCATION)
	get_target_property(Qt5_Multimedia_Location Qt5::Multimedia LOCATION)
	get_target_property(Qt5_Network_Location Qt5::Network LOCATION)

	INSTALL(FILES ${Qt5_Core_Location} DESTINATION . COMPONENT Libraries)
	INSTALL(FILES ${Qt5_Gui_Location} DESTINATION . COMPONENT Libraries)
	INSTALL(FILES ${Qt5_Widgets_Location} DESTINATION . COMPONENT Libraries)
	INSTALL(FILES ${Qt5_Multimedia_Location} DESTINATION . COMPONENT Libraries)
	INSTALL(FILES ${Qt5_Network_Location} DESTINATION . COMPONENT Libraries)
ENDIF()

# CPack Variable Cheetsheet
# https://github.com/mgalloy/cpack-cheatsheets/blob/master/cpack-variables.rst

# NSIS (Windows)
SET(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
SET(CPACK_NSIS_MUI_ICON ${CMAKE_CURRENT_SOURCE_DIR}/graphics/favicon.ico)
SET(CPACK_NSIS_MUI_UNIICON ${CMAKE_CURRENT_SOURCE_DIR}/graphics/favicon.ico)
SET(CPACK_NSIS_INSTALLED_ICON_NAME ${CMAKE_PROJECT_NAME}.exe)
SET(CPACK_NSIS_MENU_LINKS ${CMAKE_PROJECT_NAME}.exe;${CPACK_PACKAGE_NAME})
SET(CPACK_NSIS_DISPLAY_NAME ""${CMAKE_PROJECT_NAME}"")
SET(CPACK_NSIS_HELP_LINK ""http://www.prestopalette.com"")
SET(CPACK_NSIS_COMPONENT_INSTALL OFF)

# Bundle (OSX)
CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}.plist.in"" ""${CMAKE_CURRENT_BINARY_DIR}/Info.plist"")
SET(CPACK_BUNDLE_NAME ""${CMAKE_PROJECT_NAME}"")
#SET(CPACK_BUNDLE_STARTUP_COMMAND ""${CMAKE_CURRENT_SOURCE_DIR}/Launcher"")
SET(CPACK_BUNDLE_STARTUP_COMMAND ${CPACK_PACKAGE_NAME})
SET(CPACK_BUNDLE_PLIST ""${CMAKE_BINARY_DIR}/Info.plist"")
SET(CPACK_BUNDLE_ICON ""${CMAKE_SOURCE_DIR}/graphics/favicon.icns"")
SET(MACOSX_BUNDLE_ICON_FILE favicon.icns)

IF(APPLE)
	SET(PACKAGE_PLATFORM_TAG ""-osx"")
	SET(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/graphics/favicon.icns"")
	set_source_files_properties(""${CMAKE_SOURCE_DIR}/graphics/favicon.icns"" PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources"")
ENDIF()

# Debian related stuff
# SET(CPACK_DEBIAN_PACKAGE_DEPENDS ""libc6, libstdc++6, libgcc1, libqt (>= 5.5.0)"")
# SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""amd64"")

SET(CPACK_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}${PACKAGE_PLATFORM_TAG}"")

INCLUDE(CPack)
",3.1.0,3.1
18921,lxde,lxqt-runner,False,False,False,False,False,69,C++,2020-04-24 16:35:56+00:00,2013-08-06 10:48:24+00:00,23,374,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-runner)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

include(CMakeDependentOption)
include(GNUInstallDirs)

option(RUNNER_MATH ""Math operations support"" ON)
option(RUNNER_VBOX ""Virtual Box support"" ON)
option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(USE_MENU_CACHE ""Use libmenu-cache from LXDE to generate the app menu"" OFF)
cmake_dependent_option(RUNNER_VBOX_HEADLESS
    ""Use headless mode instead of default window"" OFF
    ""RUNNER_VBOX"" OFF
)

# Minimum Versions
set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LIBMENUCACHE_MINIMUM_VERSION ""1.1.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(LXQT_GLOBALKEYS_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10"")

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Xml ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-globalkeys-ui ${LXQT_GLOBALKEYS_MINIMUM_VERSION} REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Patch Version
set(LXQT_RUNNER_PATCH_VERSION 0)
set(LXQT_RUNNER_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_RUNNER_PATCH_VERSION})
add_definitions(
    ""-DLXQT_RUNNER_VERSION=\""${LXQT_RUNNER_VERSION}\""""
)

set(QTX_LIBRARIES Qt5::Widgets Qt5::Xml)

if (USE_MENU_CACHE OR RUNNER_MATH)
    find_package(PkgConfig REQUIRED)
endif ()

if (USE_MENU_CACHE)
    # optionally use libmenu-cache from lxde to generate the application menu
    find_package(MenuCache ""$(LIBMENUCACHE_MINIMUM_VERSION}"" REQUIRED)
endif()

if (RUNNER_MATH)
    pkg_check_modules(MUPARSER REQUIRED muparser)
endif ()

set(lxqt-runner_H_FILES
    dialog.h
    commanditemmodel.h
    widgets.h
    providers.h
    yamlparser.h
    configuredialog/configuredialog.h
)

set(lxqt-runner_CPP_FILES
    main.cpp
    dialog.cpp
    commanditemmodel.cpp
    widgets.cpp
    providers.cpp
    yamlparser.cpp
    configuredialog/configuredialog.cpp
)

set(lxqt-runner_UI_FILES
    dialog.ui
    configuredialog/configuredialog.ui
)

set(QRC_FILES

)

set(lxqt-runner_LIBRARIES
    lxqt
    lxqt-globalkeys
    lxqt-globalkeys-ui
    ${MENUCACHE_LIBRARIES}
    ${QTX_LIBRARIES}
    ${MUPARSER_LDFLAGS}
)

include(LXQtTranslate)

lxqt_translate_ts(lxqt-runner_QM_FILES
    UPDATE_TRANSLATIONS ${UPDATE_TRANSLATIONS}
    SOURCES
        ${lxqt-runner_H_FILES}
        ${lxqt-runner_CPP_FILES}
        ${lxqt-runner_UI_FILES}
    INSTALL_DIR
        ""${LXQT_TRANSLATIONS_DIR}/${PROJECT_NAME}""
)

lxqt_app_translation_loader(lxqt-runner_QM_LOADER ${PROJECT_NAME})

if (RUNNER_VBOX)
    list(APPEND QRC_FILES virtualbox-icons.qrc)
endif()

add_executable(${PROJECT_NAME}
    ${lxqt-runner_CPP_FILES}
    ${lxqt-runner_QRC_SOURCES}
    ${lxqt-runner_QM_FILES}
    ${lxqt-runner_QM_LOADER}
)

if (RUNNER_MATH)
    lxqt_enable_target_exceptions(""${PROJECT_NAME}"" PRIVATE)
endif ()

target_include_directories(${PROJECT_NAME}
    PRIVATE ""$<$<BOOL:${MENUCACHE_FOUND}>:${MENUCACHE_INCLUDE_DIRS}>""
    PRIVATE ""$<$<BOOL:${MUPARSER_FOUND}>:${MUPARSER_INCLUDE_DIRS}>""
)

target_compile_definitions(${PROJECT_NAME}
    PRIVATE ""$<$<BOOL:${RUNNER_MATH}>:MATH_ENABLED>""
    PRIVATE ""$<$<BOOL:${RUNNER_VBOX}>:VBOX_ENABLED>""
    PRIVATE ""$<$<BOOL:${RUNNER_VBOX_HEADLESS}>:VBOX_HEADLESS_ENABLED>""
    PRIVATE ""$<$<BOOL:${MENUCACHE_FOUND}>:HAVE_MENU_CACHE=1>""
)

target_link_libraries(${PROJECT_NAME}
    ${lxqt-runner_LIBRARIES}
    KF5::WindowSystem
)

install(TARGETS
    ${PROJECT_NAME}
    RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    COMPONENT Runtime
)

install(FILES
    man/lxqt-runner.1
    DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
    COMPONENT Runtime
)

add_subdirectory(autostart)
",3.1.0,3.1
19157,isazi,SNR,False,False,False,False,False,2,C++,2019-05-20 09:56:08+00:00,2013-10-28 15:48:24+00:00,0,259,"cmake_minimum_required(VERSION 3.10)
project(SNR VERSION 3.1)
include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -std=c++14"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native"")
set(TARGET_LINK_LIBRARIES snr isa_utils isa_opencl astrodata OpenCL)
if($ENV{LOFAR})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_HDF5"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} hdf5 hdf5_cpp z)
endif()
if($ENV{PSRDADA})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_PSRDADA"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} psrdada cudart)
endif()

# libsnr
add_library(snr SHARED
  src/SNR.cpp
)
set_target_properties(snr PROPERTIES
  VERSION ${PROJECT_VERSION}
  SOVERSION 1
  PUBLIC_HEADER ""include/SNR.hpp""
)
target_include_directories(snr PRIVATE include)

# SNRTesting
add_executable(SNRTesting
  src/SNRTest.cpp
)
target_include_directories(SNRTesting PRIVATE include)
target_link_libraries(SNRTesting PRIVATE ${TARGET_LINK_LIBRARIES})

# SNRTuning
add_executable(SNRTuning
  src/SNRTuning.cpp
)
target_include_directories(SNRTuning PRIVATE include)
target_link_libraries(SNRTuning PRIVATE ${TARGET_LINK_LIBRARIES})

install(TARGETS snr SNRTesting SNRTuning
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
",3.10,3.1
19182,Project-OSRM,osrm-backend,False,False,False,False,False,126,C++,2020-05-12 13:16:54+00:00,2011-09-22 10:05:08+00:00,3742,8218,"cmake_minimum_required(VERSION 3.1)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR AND NOT MSVC_IDE)
  message(FATAL_ERROR ""In-source builds are not allowed.
Please create a directory and run cmake from there, passing the path to this source directory as the last argument.
This process created the file `CMakeCache.txt' and the directory `CMakeFiles'. Please delete them."")
endif()

# detect if this is included as subproject and if so expose
# some variables to its parent scope
get_directory_property(BUILD_AS_SUBPROJECT PARENT_DIRECTORY)
if(BUILD_AS_SUBPROJECT)
  message(STATUS ""Building libosrm as subproject."")
endif()

# set OSRM_BUILD_DIR location (might be used in various scripts)
if (NOT WIN32 AND NOT DEFINED ENV{OSRM_BUILD_DIR})
  set(ENV{OSRM_BUILD_DIR} ${CMAKE_CURRENT_BINARY_DIR})
endif()

option(ENABLE_MASON ""Use mason for dependencies"" OFF)
option(ENABLE_CCACHE ""Speed up incremental rebuilds via ccache"" ON)
option(BUILD_TOOLS ""Build OSRM tools"" OFF)
option(BUILD_PACKAGE ""Build OSRM package"" OFF)
option(ENABLE_ASSERTIONS ""Use assertions in release mode"" OFF)
option(ENABLE_COVERAGE ""Build with coverage instrumentalisation"" OFF)
option(ENABLE_SANITIZER ""Use memory sanitizer for Debug build"" OFF)
option(ENABLE_STXXL ""Use STXXL library"" OFF)
option(ENABLE_LTO ""Use LTO if available"" OFF)
option(ENABLE_FUZZING ""Fuzz testing using LLVM's libFuzzer"" OFF)
option(ENABLE_GOLD_LINKER ""Use GNU gold linker if available"" ON)
option(ENABLE_NODE_BINDINGS ""Build NodeJs bindings"" OFF)
option(ENABLE_GLIBC_WORKAROUND ""Workaround GLIBC symbol exports"" OFF)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

if(ENABLE_MASON)
  # versions in use
  set(MASON_BOOST_VERSION ""1.65.1"")
  set(MASON_STXXL_VERSION ""1.4.1-1"")
  set(MASON_EXPAT_VERSION ""2.2.0"")
  set(MASON_LUA_VERSION ""5.2.4"")
  set(MASON_BZIP2_VERSION ""1.0.6"")
  set(MASON_TBB_VERSION ""2017_U7"")

  message(STATUS ""Enabling mason"")

  find_program(CURL_FOUND curl)
  if(NOT CURL_FOUND)
    message(FATAL_ERROR ""curl command required with -DENABLE_MASON"")
  endif()

  include(mason)
endif()

# be compatible with version handling before cmake 3.x
if (POLICY CMP0048)
  cmake_policy(SET CMP0048 OLD)
endif()
project(OSRM C CXX)

include(JSONParser)
file(READ ""package.json"" packagejsonraw)
sbeParseJson(packagejson packagejsonraw)

if (packagejson.version MATCHES ""^([0-9]+)\.([0-9]+)\.([0-9]+)"")
    set(OSRM_VERSION_MAJOR ${CMAKE_MATCH_1})
    set(OSRM_VERSION_MINOR ${CMAKE_MATCH_2})
    set(OSRM_VERSION_PATCH ${CMAKE_MATCH_3})

    set(OSRM_VERSION ""${OSRM_VERSION_MAJOR}.${OSRM_VERSION_MINOR}.${OSRM_VERSION_PATCH}"")
else()
    message(FATAL_ERROR ""Version from package.json cannot be parsed, expected semver compatible X.Y.Z, but found ${packagejson.version}"")
endif()

if (MSVC)
  add_definitions(""-DOSRM_PROJECT_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}\"""")
else()
  add_definitions(-DOSRM_PROJECT_DIR=""${CMAKE_CURRENT_SOURCE_DIR}"")
endif()

# these two functions build up custom variables:
#   DEPENDENCIES_INCLUDE_DIRS and OSRM_DEFINES
# These variables we want to pass to
# include_directories and add_definitions for both
# this build and for sharing externally via pkg-config

function(add_dependency_includes)
  if(${ARGC} GREATER 0)
    list(APPEND DEPENDENCIES_INCLUDE_DIRS ""${ARGV}"")
    set(DEPENDENCIES_INCLUDE_DIRS ""${DEPENDENCIES_INCLUDE_DIRS}"" PARENT_SCOPE)
  endif()
endfunction(add_dependency_includes)

function(add_dependency_defines defines)
  list(APPEND OSRM_DEFINES ""${defines}"")
  set(OSRM_DEFINES ""${OSRM_DEFINES}"" PARENT_SCOPE)
endfunction(add_dependency_defines)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
include(CheckCXXCompilerFlag)
include(FindPackageHandleStandardArgs)
include(GNUInstallDirs)

set(bitness 32)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(bitness 64)
  message(STATUS ""Building on a 64 bit system"")
else()
  message(STATUS ""Building on a 32 bit system"")
endif()

if(WIN32 AND MSVC_VERSION LESS 1900)
  message(FATAL_ERROR ""Building with Microsoft compiler needs Latest Visual Studio 2015 (Community or better)"")
endif()

# Strictly require GCC>=5.0 and Clang>=3.4 - GCC 4.8 is already too old for C++14.
if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
    message(FATAL_ERROR ""GCC>=5.0 required. In case you are on Ubuntu upgrade via ppa:ubuntu-toolchain-r/test"")
  endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.4)
    message(FATAL_ERROR ""Clang>=3.4 required. In case you are on Ubuntu upgrade via http://apt.llvm.org"")
  endif()
endif()

include_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR}/include/)
include_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/include/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/third_party/sol2/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/third_party/variant/include)

set(BOOST_COMPONENTS date_time chrono filesystem iostreams program_options regex system thread unit_test_framework)

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/include/util/version.hpp.in
  ${CMAKE_CURRENT_BINARY_DIR}/include/util/version.hpp
)
file(GLOB UtilGlob src/util/*.cpp src/util/*/*.cpp)
file(GLOB ExtractorGlob src/extractor/*.cpp src/extractor/*/*.cpp)
file(GLOB GuidanceGlob src/guidance/*.cpp src/extractor/intersection/*.cpp)
file(GLOB PartitionerGlob src/partitioner/*.cpp)
file(GLOB CustomizerGlob src/customize/*.cpp)
file(GLOB ContractorGlob src/contractor/*.cpp)
file(GLOB UpdaterGlob src/updater/*.cpp)
file(GLOB StorageGlob src/storage/*.cpp)
file(GLOB ServerGlob src/server/*.cpp src/server/**/*.cpp)
file(GLOB EngineGlob src/engine/*.cpp src/engine/**/*.cpp)
file(GLOB ErrorcodesGlob src/osrm/errorcodes.cpp)

add_library(UTIL OBJECT ${UtilGlob})
add_library(EXTRACTOR OBJECT ${ExtractorGlob})
add_library(GUIDANCE OBJECT ${GuidanceGlob})
add_library(PARTITIONER OBJECT ${PartitionerGlob})
add_library(CUSTOMIZER OBJECT ${CustomizerGlob})
add_library(CONTRACTOR OBJECT ${ContractorGlob})
add_library(UPDATER OBJECT ${UpdaterGlob})
add_library(STORAGE OBJECT ${StorageGlob})
add_library(ENGINE OBJECT ${EngineGlob})
add_library(SERVER OBJECT ${ServerGlob})

set_target_properties(UTIL PROPERTIES LINKER_LANGUAGE CXX)

add_executable(osrm-extract src/tools/extract.cpp)
add_executable(osrm-partition src/tools/partition.cpp)
add_executable(osrm-customize src/tools/customize.cpp)
add_executable(osrm-contract src/tools/contract.cpp)
add_executable(osrm-routed src/tools/routed.cpp $<TARGET_OBJECTS:SERVER> $<TARGET_OBJECTS:UTIL>)
add_executable(osrm-datastore src/tools/store.cpp $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm src/osrm/osrm.cpp $<TARGET_OBJECTS:ENGINE> $<TARGET_OBJECTS:STORAGE> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_contract src/osrm/contractor.cpp $<TARGET_OBJECTS:CONTRACTOR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_extract src/osrm/extractor.cpp $<TARGET_OBJECTS:EXTRACTOR> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_guidance $<TARGET_OBJECTS:GUIDANCE> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_partition src/osrm/partitioner.cpp $<TARGET_OBJECTS:PARTITIONER> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_customize src/osrm/customizer.cpp $<TARGET_OBJECTS:CUSTOMIZER> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_update $<TARGET_OBJECTS:UPDATER> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
add_library(osrm_store $<TARGET_OBJECTS:STORAGE> $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)

if(ENABLE_GOLD_LINKER)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -fuse-ld=gold -Wl,--version ERROR_QUIET OUTPUT_VARIABLE LD_VERSION)
    if(""${LD_VERSION}"" MATCHES ""GNU gold"")
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold -Wl,--disable-new-dtags"")
        set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold -Wl,--disable-new-dtags"")
        set(OSRM_LDFLAGS ""${OSRM_LDFLAGS} -fuse-ld=gold -Wl,--disable-new-dtags"")
        message(STATUS ""Using GNU gold as linker."")

        # Issue 2785: check gold binutils version and don't use gc-sections for versions prior 2.25
        string(REGEX REPLACE "".*\\(GNU Binutils[^\\)0-9]+([0-9]+\\.[0-9]+)[^\\)]*\\).*"" ""\\1"" GOLD_BINUTILS_VERSION ""${LD_VERSION}"")
        if (""${GOLD_BINUTILS_VERSION}"" VERSION_LESS ""2.26"")
          message(STATUS ""Disabling gc-sections on gold binutils < 2.26, see: https://sourceware.org/bugzilla/show_bug.cgi?id=17639"")
          set(LD_AVOID_GC_SECTIONS TRUE)
        endif()
    else()
        message(WARNING ""GNU gold linker isn't available."")
        set(ENABLE_GOLD_LINKER OFF)
    endif()
endif()

# Disable LTO when mason+gcc is detected before testing for / setting any flags.
# Mason builds libraries with Clang, mixing does not work in the context of lto.
if(ENABLE_MASON AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" AND ENABLE_LTO)
  set(ENABLE_LTO OFF)
  message(WARNING ""Mason and GCC's LTO not work together. Disabling LTO."")
endif()

# Explicitly set the build type to Release if no other type is specified
# on the command line.  Without this, cmake defaults to an unoptimized,
# non-debug build, which almost nobody wants.
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS ""No build type specified, defaulting to Release"")
  set(CMAKE_BUILD_TYPE Release)
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
  message(STATUS ""Configuring OSRM in debug mode"")
elseif(CMAKE_BUILD_TYPE MATCHES Release)
  message(STATUS ""Configuring OSRM in release mode"")
elseif(CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  message(STATUS ""Configuring OSRM in release mode with debug flags"")
elseif(CMAKE_BUILD_TYPE MATCHES MinRelSize)
  message(STATUS ""Configuring OSRM in release mode with minimized size"")
else()
  message(STATUS ""Unrecognized build type - will use cmake defaults"")
endif()

# Additional logic for the different build types
if(CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  message(STATUS ""Configuring debug mode flags"")
  set(ENABLE_ASSERTIONS ON)
endif()

if(NOT CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} -fno-inline -fno-omit-frame-pointer"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fno-inline -fno-omit-frame-pointer"")
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} -ggdb"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -Og -ggdb"")
endif()


if(CMAKE_BUILD_TYPE MATCHES Release OR CMAKE_BUILD_TYPE MATCHES MinRelSize OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  message(STATUS ""Configuring release mode optimizations"")
  # Check if LTO is available
  check_cxx_compiler_flag(""-Wl,-flto"" LTO_AVAILABLE)

  if(ENABLE_LTO AND LTO_AVAILABLE)
    set(OLD_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    # GCC in addition allows parallelizing LTO
    if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
      include(ProcessorCount)
      ProcessorCount(NPROC)
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -flto=${NPROC}"")
    else()
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -flto"")
    endif()
    set(CHECK_LTO_SRC ""int main(){return 0;}"")
    check_cxx_source_compiles(""${CHECK_LTO_SRC}"" LTO_WORKS)
    if(LTO_WORKS)
      message(STATUS ""LTO working"")
      set(OSRM_CXXFLAGS ""${OSRM_CXXFLAGS} -flto"")
      set(OSRM_LDFLAGS ""${OSRM_LDFLAGS} -flto"")
      set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -flto"")
      set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -flto"")
      set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -flto"")
    else()
      message(STATUS ""LTO broken"")
      set(CMAKE_CXX_FLAGS ""${OLD_CXX_FLAGS}"")
      set(ENABLE_LTO Off)
    endif()

    # Since gcc 4.9 the LTO format is non-standart ('slim'), so we need to use the build-in tools
    if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" AND NOT MINGW)
      find_program(GCC_AR gcc-ar)
      find_program(GCC_RANLIB gcc-ranlib)
      if (""${GCC_AR}"" STREQUAL ""GCC_AR-NOTFOUND"" OR ""${GCC_RANLIB}"" STREQUAL ""GCC_RANLIB-NOTFOUND"")
        message(WARNING ""GCC specific binutils not found. In case of linker issues export env vars: AR=gcc-ar, NM=gcc-nm, RANLIB=gcc-ranlib"")
      else()
        message(STATUS ""Using GCC specific binutils for LTO:"")
        message(STATUS "" ${GCC_AR}"")
        message(STATUS "" ${GCC_RANLIB}"")
        set(CMAKE_AR ${GCC_AR})
        set(CMAKE_RANLIB ${GCC_RANLIB})
      endif()
    endif()

    # Same for clang LTO requires their own toolchain
    if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
      find_program(LLVM_AR llvm-ar)
      find_program(LLVM_RANLIB llvm-ranlib)
      if (""${LLVM_AR}"" STREQUAL ""LLVM_AR-NOTFOUND"" OR ""${LLVM_RANLIB}"" STREQUAL ""LLVM_RANLIB-NOTFOUND"")
        message(WARNING ""LLVM specific binutils not found."")
      else()
        message(STATUS ""Using LLVM specific binutils for LTO:"")
        message(STATUS "" ${LLVM_AR}"")
        message(STATUS "" ${LLVM_RANLIB}"")
        set(CMAKE_AR ${LLVM_AR})
        set(CMAKE_RANLIB ${LLVM_RANLIB})
      endif()
    endif()
  endif()
endif()

if(UNIX AND NOT APPLE AND ENABLE_MASON AND (LTO_WORKS OR ENABLE_GOLD_LINKER))
  message(WARNING ""ENABLE_MASON and ENABLE_LTO/ENABLE_GOLD_LINKER may not work on all linux systems currently"")
  message(WARNING ""For more details see: https://github.com/Project-OSRM/osrm-backend/issues/3202"")
endif()

set(MAYBE_COVERAGE_LIBRARIES """")
if (ENABLE_COVERAGE)
  if (NOT CMAKE_BUILD_TYPE MATCHES ""Debug"")
    message(ERROR ""ENABLE_COVERAGE=ON only make sense with a Debug build"")
  endif()
  message(STATUS ""Enabling coverage"")
  set(MAYBE_COVERAGE_LIBRARIES ""-lgcov"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0 -ftest-coverage -fprofile-arcs"")
endif()

if (ENABLE_SANITIZER)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address"")
  set(OSRM_CXXFLAGS ""${OSRM_CXXFLAGS} -fsanitize=address"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address"")
endif()

# Configuring compilers
set(OSRM_WARNING_FLAGS ""-Werror=all -Werror=extra  -Werror=uninitialized -Werror=unreachable-code -Werror=unused-variable -Werror=unreachable-code -Wno-error=cpp -Wpedantic"")
if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OSRM_WARNING_FLAGS} -Werror=strict-overflow=2 -Wno-error=unused-local-typedef -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -fPIC -fcolor-diagnostics -ftemplate-depth=1024 -Wno-unused-command-line-argument"")
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(COLOR_FLAG ""-fdiagnostics-color=auto"")
  check_cxx_compiler_flag(""-fdiagnostics-color=auto"" HAS_COLOR_FLAG)
  if(NOT HAS_COLOR_FLAG)
    set(COLOR_FLAG """")
  endif()
  # using GCC
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OSRM_WARNING_FLAGS} -Werror=strict-overflow=1 -Wno-error=maybe-uninitialized -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 ${COLOR_FLAG} -fPIC -ftemplate-depth=1024"")

  if(WIN32) # using mingw
    add_dependency_defines(-DWIN32)
    set(OPTIONAL_SOCKET_LIBS ws2_32 wsock32)
  endif()

  # -fpermissive is required for parallel_do Intel TBB internal issue with GCC < 5
  # https://github.com/Project-OSRM/osrm-backend/pull/3603#issuecomment-277688589
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
    message(STATUS ""Adding -fpermissive for GCC version < 5 bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51048). See #3603."")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fpermissive"")
  endif()

elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Intel"")
  # using Intel C++
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-intel -wd10237 -Wall -ipo -fPIC"")
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  # using Visual Studio C++
  set(BOOST_COMPONENTS ${BOOST_COMPONENTS} zlib)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /bigobj"") # avoid compiler error C1128 from scripting_environment_lua.cpp
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /DWIN32_LEAN_AND_MEAN"") # avoid compiler error C2011 from dual #include of winsock.h and winsock2.h
  add_dependency_defines(-DBOOST_LIB_DIAGNOSTIC)
  add_dependency_defines(-D_CRT_SECURE_NO_WARNINGS)
  add_dependency_defines(-DNOMINMAX) # avoid min and max macros that can break compilation
  add_dependency_defines(-D_USE_MATH_DEFINES) #needed for M_PI with cmath.h
  add_dependency_defines(-D_WIN32_WINNT=0x0501)
  add_dependency_defines(-DXML_STATIC)
  find_library(ws2_32_LIBRARY_PATH ws2_32)
  target_link_libraries(osrm-extract wsock32 ws2_32)
endif()

# Configuring linker
execute_process(COMMAND ${CMAKE_CXX_COMPILER} ""-Wl,--version"" ERROR_QUIET OUTPUT_VARIABLE LINKER_VERSION)
# For ld.gold and ld.bfs (the GNU linkers) we optimize hard
if(""${LINKER_VERSION}"" MATCHES ""GNU gold"" OR ""${LINKER_VERSION}"" MATCHES ""GNU ld"")
  message(STATUS ""Setting linker optimizations"")
  if(NOT (CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"" OR ""${LD_AVOID_GC_SECTIONS}""))
    # Tell compiler to put every function in separate section, linker can then match sections and functions
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ffunction-sections -fdata-sections"")
    # Tell linker to do dead code and data eminination during link time discarding sections
    set(LINKER_FLAGS ""${LINKER_FLAGS} -Wl,--gc-sections"")
  endif()
  # Default linker optimization flags
  set(LINKER_FLAGS ""${LINKER_FLAGS} -Wl,-O1 -Wl,--hash-style=gnu -Wl,--sort-common"")

else()
  message(STATUS ""Using unknown linker, not setting linker optimizations"")
endif ()
set(OSRM_LDFLAGS ""${OSRM_LDFLAGS} ${LINKER_FLAGS}"")
set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LINKER_FLAGS}"")
set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LINKER_FLAGS}"")
set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${LINKER_FLAGS}"")

# Activate C++1y
if(NOT CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++14"")
  set(OSRM_CXXFLAGS ""${OSRM_CXXFLAGS} -std=c++14"")
endif()

# Configuring other platform dependencies
if(APPLE)
  set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.10"")
  execute_process(COMMAND xcrun --sdk macosx --show-sdk-path OUTPUT_VARIABLE CMAKE_OSX_SYSROOT OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(CMAKE_OSX_ARCHITECTURES ""x86_64"")
  message(STATUS ""Set Architecture to x64 on OS X"")
  exec_program(uname ARGS -v  OUTPUT_VARIABLE DARWIN_VERSION)
  string(REGEX MATCH ""[0-9]+"" DARWIN_VERSION ${DARWIN_VERSION})
  if(OSXLIBSTD)
    message(STATUS ""linking against ${OSXLIBSTD}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=${OSXLIBSTD}"")
  elseif(DARWIN_VERSION GREATER 12)
    message(STATUS ""linking against libc++"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
  endif()
endif()

if(UNIX AND NOT APPLE)
  set(MAYBE_RT_LIBRARY -lrt)
endif()

find_package(Threads REQUIRED)

# Third-party libraries
set(RAPIDJSON_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/rapidjson/include"")
include_directories(SYSTEM ${RAPIDJSON_INCLUDE_DIR})

set(MICROTAR_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/microtar/src"")
include_directories(SYSTEM ${MICROTAR_INCLUDE_DIR})

set(MBXGEOM_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/geometry.hpp-0.9.2/include"")
include_directories(SYSTEM ${MBXGEOM_INCLUDE_DIR})
set(CHEAPRULER_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/cheap-ruler-cpp-2.5.4/include"")
include_directories(SYSTEM ${CHEAPRULER_INCLUDE_DIR})

add_library(MICROTAR OBJECT ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/microtar/src/microtar.c"")
set_property(TARGET MICROTAR PROPERTY POSITION_INDEPENDENT_CODE ON)

set(PROTOZERO_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/protozero/include"")
include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})

set(VTZERO_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/vtzero/include"")
include_directories(SYSTEM ${VTZERO_INCLUDE_DIR})

set(FLATBUFFERS_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/flatbuffers"")
set(FLATBUFFERS_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/flatbuffers/include"")
include_directories(${FLATBUFFERS_INCLUDE_DIR})
add_subdirectory(${FLATBUFFERS_SRC_DIR}
        ${CMAKE_CURRENT_BINARY_DIR}/flatbuffers-build
        EXCLUDE_FROM_ALL)

# if mason is enabled no find_package calls are made
# to ensure that we are only compiling and linking against
# fully portable mason packages
if(ENABLE_MASON)
  message(STATUS ""Installing dependencies via mason"")

  set(Boost_USE_STATIC_LIBS ON)
  mason_use(boost VERSION ${MASON_BOOST_VERSION} HEADER_ONLY)
  add_dependency_includes(${MASON_PACKAGE_boost_INCLUDE_DIRS})
  mason_use(boost_libfilesystem VERSION ${MASON_BOOST_VERSION})
  set(Boost_FILESYSTEM_LIBRARY ${MASON_PACKAGE_boost_libfilesystem_STATIC_LIBS})
  mason_use(boost_libiostreams VERSION ${MASON_BOOST_VERSION})
  set(Boost_IOSTREAMS_LIBRARY ${MASON_PACKAGE_boost_libiostreams_STATIC_LIBS})
  mason_use(boost_libprogram_options VERSION ${MASON_BOOST_VERSION})
  set(Boost_PROGRAM_OPTIONS_LIBRARY ${MASON_PACKAGE_boost_libprogram_options_STATIC_LIBS})
  mason_use(boost_libregex VERSION ${MASON_BOOST_VERSION})
  set(Boost_REGEX_LIBRARY ${MASON_PACKAGE_boost_libregex_STATIC_LIBS})
  mason_use(boost_libtest VERSION ${MASON_BOOST_VERSION})
  set(Boost_UNIT_TEST_FRAMEWORK_LIBRARY ${MASON_PACKAGE_boost_libtest_STATIC_LIBS})
  mason_use(boost_libdate_time VERSION ${MASON_BOOST_VERSION})
  set(Boost_DATE_TIME_LIBRARY ${MASON_PACKAGE_boost_libdate_time_STATIC_LIBS})
  mason_use(boost_libthread VERSION ${MASON_BOOST_VERSION})
  set(Boost_THREAD_LIBRARY ${MASON_PACKAGE_boost_libthread_STATIC_LIBS})
  mason_use(boost_libsystem VERSION ${MASON_BOOST_VERSION})
  set(Boost_SYSTEM_LIBRARY ${MASON_PACKAGE_boost_libsystem_STATIC_LIBS})

  if (ENABLE_STXXL)
    mason_use(stxxl VERSION ${MASON_STXXL_VERSION})
    add_dependency_includes(${MASON_PACKAGE_stxxl_INCLUDE_DIRS})
    set(MAYBE_STXXL_LIBRARY ${MASON_PACKAGE_stxxl_STATIC_LIBS})
    add_definitions(-DUSE_STXXL_LIBRARY)
  endif()

  mason_use(expat VERSION ${MASON_EXPAT_VERSION})
  add_dependency_includes(${MASON_PACKAGE_expat_INCLUDE_DIRS})
  set(EXPAT_LIBRARIES ${MASON_PACKAGE_expat_STATIC_LIBS})

  mason_use(lua VERSION ${MASON_LUA_VERSION})
  add_dependency_includes(${MASON_PACKAGE_lua_INCLUDE_DIRS})
  set(USED_LUA_LIBRARIES ${MASON_PACKAGE_lua_STATIC_LIBS})

  mason_use(bzip2 VERSION ${MASON_BZIP2_VERSION})
  add_dependency_includes(${MASON_PACKAGE_bzip2_INCLUDE_DIRS})
  set(BZIP2_LIBRARIES ${MASON_PACKAGE_bzip2_STATIC_LIBS})

  mason_use(tbb VERSION ${MASON_TBB_VERSION})
  add_dependency_includes(${MASON_PACKAGE_tbb_INCLUDE_DIRS})
  set(TBB_LIBRARIES ${MASON_PACKAGE_tbb_LDFLAGS})

  if(NOT MASON_PACKAGE_tbb_LIBRARY_DIRS)
    message(FATAL_ERROR ""MASON_PACKAGE_tbb_LIBRARY_DIRS is empty, rpath will not work"")
  endif()
  set(TBB_LINKER_RPATHS """")
  foreach(libpath ${MASON_PACKAGE_tbb_LIBRARY_DIRS})
    set(TBB_LINKER_RPATHS ""${TBB_LINKER_RPATHS} -Wl,-rpath -Wl,${libpath}"")
    file(GLOB TBBGlob ${libpath}/*.*)
    install(FILES ${TBBGlob} DESTINATION lib)
  endforeach()
  if(APPLE)
    set(LINKER_FLAGS ""${TBB_LINKER_RPATHS} -Wl,-rpath -Wl,@loader_path"")
  elseif(UNIX)
    set(LINKER_FLAGS ""${TBB_LINKER_RPATHS} '-Wl,-rpath,$ORIGIN' -Wl,-z,origin"")
  endif()

  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LINKER_FLAGS}"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LINKER_FLAGS}"")
  set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${LINKER_FLAGS}"")

  # current mason packages target -D_GLIBCXX_USE_CXX11_ABI=0
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_CXX11_ABI=0"")

  # note: we avoid calling find_package(Osmium ...) here to ensure that the
  # expat and bzip2 are used from mason rather than the system
  include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/third_party/libosmium/include)
else()

  find_package(Boost 1.54 REQUIRED COMPONENTS ${BOOST_COMPONENTS})
  add_dependency_includes(${Boost_INCLUDE_DIRS})
  if(WIN32 AND Boost_VERSION VERSION_LESS 106200)
    message(FATAL_ERROR ""Building with MSVC needs Boost 1.62 with CXX11_CONSTEXPR support"")
  endif()

  find_package(TBB REQUIRED)
  add_dependency_includes(${TBB_INCLUDE_DIR})
  if(WIN32 AND CMAKE_BUILD_TYPE MATCHES Debug)
    set(TBB_LIBRARIES ${TBB_DEBUG_LIBRARIES})
  endif()

  find_package(EXPAT REQUIRED)
  add_dependency_includes(${EXPAT_INCLUDE_DIRS})

  if (ENABLE_STXXL)
    find_package(STXXL)
    if (STXXL_FOUND)
      add_dependency_includes(${STXXL_INCLUDE_DIR})
      set(MAYBE_STXXL_LIBRARY ${STXXL_LIBRARY})
      add_definitions(-DUSE_STXXL_LIBRARY)
    else()
      MESSAGE(STATUS ""STXXL was requested but not found, default STL will be used"")
    endif()
  endif()

  find_package(BZip2 REQUIRED)
  add_dependency_includes(${BZIP2_INCLUDE_DIR})

  find_package(Lua 5.2 REQUIRED)
  if (LUA_FOUND)
    message(STATUS ""Using Lua ${LUA_VERSION_STRING}"")
  endif()

  set(USED_LUA_LIBRARIES ${LUA_LIBRARIES})
  add_dependency_includes(${LUA_INCLUDE_DIR})

  # add a target to generate API documentation with Doxygen
  find_package(Doxygen)
  if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
  ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  COMMENT ""Generating API documentation with Doxygen"" VERBATIM
  )
  endif()

  # note libosmium depends on expat and bzip2
  list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/libosmium/cmake"")
  if(NOT OSMIUM_INCLUDE_DIR)
    set(OSMIUM_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/third_party/libosmium/include"")
  endif()
  find_package(Osmium REQUIRED COMPONENTS io)
  include_directories(SYSTEM ${OSMIUM_INCLUDE_DIR})
endif()

# prefix compilation with ccache by default if available and on clang or gcc
if(ENABLE_CCACHE AND (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" OR CMAKE_CXX_COMPILER_ID MATCHES ""GNU""))
  find_program(CCACHE_FOUND ccache)
  if(CCACHE_FOUND)
    message(STATUS ""Using ccache to speed up incremental builds"")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    set(ENV{CCACHE_CPP2} ""true"")
  endif()
endif()

# even with mason builds we want to link to system zlib
# to ensure that osrm binaries play well with other binaries like nodejs
find_package(ZLIB REQUIRED)
add_dependency_includes(${ZLIB_INCLUDE_DIRS})

if(NOT WIN32 AND NOT Boost_USE_STATIC_LIBS)
  add_dependency_defines(-DBOOST_TEST_DYN_LINK)
endif()

if(NOT WIN32 AND NOT Boost_USE_STATIC_LIBS)
  add_dependency_defines(-DBOOST_TEST_DYN_LINK)
endif()

add_dependency_defines(-DBOOST_SPIRIT_USE_PHOENIX_V3)
add_dependency_defines(-DBOOST_RESULT_OF_USE_DECLTYPE)
add_dependency_defines(-DBOOST_FILESYSTEM_NO_DEPRECATED)

if (ENABLE_STXXL)
  set(OpenMP_FIND_QUIETLY ON)
  find_package(OpenMP)
  if(OPENMP_FOUND)
    message(STATUS ""OpenMP support found. Linking just in case for stxxl"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
  endif()
endif()

add_definitions(${OSRM_DEFINES})
include_directories(SYSTEM ${DEPENDENCIES_INCLUDE_DIRS})

set(BOOST_BASE_LIBRARIES
   ${Boost_DATE_TIME_LIBRARY}
   ${Boost_CHRONO_LIBRARY}
   ${Boost_FILESYSTEM_LIBRARY}
   ${Boost_IOSTREAMS_LIBRARY}
   ${Boost_THREAD_LIBRARY}
   ${Boost_SYSTEM_LIBRARY})

set(BOOST_ENGINE_LIBRARIES
  ${Boost_ZLIB_LIBRARY}
  ${Boost_REGEX_LIBRARY}
  ${BOOST_BASE_LIBRARIES})

# Binaries
target_link_libraries(osrm-datastore osrm_store ${Boost_PROGRAM_OPTIONS_LIBRARY})
target_link_libraries(osrm-extract osrm_extract ${Boost_PROGRAM_OPTIONS_LIBRARY})
target_link_libraries(osrm-partition osrm_partition ${Boost_PROGRAM_OPTIONS_LIBRARY})
target_link_libraries(osrm-customize osrm_customize ${Boost_PROGRAM_OPTIONS_LIBRARY})
target_link_libraries(osrm-contract osrm_contract ${Boost_PROGRAM_OPTIONS_LIBRARY})
target_link_libraries(osrm-routed osrm ${Boost_PROGRAM_OPTIONS_LIBRARY} ${OPTIONAL_SOCKET_LIBS} ${ZLIB_LIBRARY})

set(EXTRACTOR_LIBRARIES
    ${BZIP2_LIBRARIES}
    ${Boost_REGEX_LIBRARY}
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${EXPAT_LIBRARIES}
    ${USED_LUA_LIBRARIES}
    ${OSMIUM_LIBRARIES}
    ${MAYBE_STXXL_LIBRARY}
    ${TBB_LIBRARIES}
    ${ZLIB_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES})
set(GUIDANCE_LIBRARIES
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${USED_LUA_LIBRARIES}
    ${TBB_LIBRARIES}
    ${MAYBE_COVERAGE_LIBRARIES})
set(PARTITIONER_LIBRARIES
    ${BOOST_ENGINE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES}
    ${ZLIB_LIBRARY})
set(CUSTOMIZER_LIBRARIES
    ${BOOST_ENGINE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES})
set(UPDATER_LIBRARIES
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES}
    ${ZLIB_LIBRARY})
set(CONTRACTOR_LIBRARIES
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${USED_LUA_LIBRARIES}
    ${MAYBE_STXXL_LIBRARY}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES})
set(ENGINE_LIBRARIES
    ${BOOST_ENGINE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES}
    ${ZLIB_LIBRARY})
set(STORAGE_LIBRARIES
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TBB_LIBRARIES}
    ${MAYBE_RT_LIBRARY}
    ${MAYBE_COVERAGE_LIBRARIES})
set(UTIL_LIBRARIES
    ${BOOST_BASE_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    ${MAYBE_STXXL_LIBRARY}
    ${TBB_LIBRARIES}
    ${MAYBE_COVERAGE_LIBRARIES}
    ${ZLIB_LIBRARY})

# Libraries
target_link_libraries(osrm ${ENGINE_LIBRARIES})
target_link_libraries(osrm_update ${UPDATER_LIBRARIES})
target_link_libraries(osrm_contract ${CONTRACTOR_LIBRARIES} osrm_update osrm_store)
target_link_libraries(osrm_extract osrm_guidance ${EXTRACTOR_LIBRARIES})
target_link_libraries(osrm_partition ${PARTITIONER_LIBRARIES})
target_link_libraries(osrm_customize ${CUSTOMIZER_LIBRARIES} osrm_update osrm_store)
target_link_libraries(osrm_store ${STORAGE_LIBRARIES})

# BUILD_COMPONENTS
add_executable(osrm-components src/tools/components.cpp $<TARGET_OBJECTS:MICROTAR> $<TARGET_OBJECTS:UTIL>)
target_link_libraries(osrm-components ${TBB_LIBRARIES} ${BOOST_BASE_LIBRARIES} ${UTIL_LIBRARIES})
install(TARGETS osrm-components DESTINATION bin)

if(BUILD_TOOLS)
  message(STATUS ""Activating OSRM internal tools"")
  add_executable(osrm-io-benchmark src/tools/io-benchmark.cpp $<TARGET_OBJECTS:UTIL>)
  target_link_libraries(osrm-io-benchmark ${BOOST_BASE_LIBRARIES})

  install(TARGETS osrm-io-benchmark DESTINATION bin)
endif()

if (ENABLE_ASSERTIONS)
  message(STATUS ""Enabling assertions"")
  add_definitions(-DBOOST_ENABLE_ASSERT_HANDLER)
endif()

# Add RPATH info to executables so that when they are run after being installed
# (i.e., from /usr/local/bin/) the linker can find library dependencies. For
# more info see http://www.cmake.org/Wiki/CMake_RPATH_handling
set_property(TARGET osrm-extract PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
set_property(TARGET osrm-partition PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
set_property(TARGET osrm-contract PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
set_property(TARGET osrm-datastore PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
set_property(TARGET osrm-routed PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)

file(GLOB VariantGlob third_party/variant/include/mapbox/*.hpp)
file(GLOB FlatbuffersGlob third_party/flatbuffers/include/flatbuffers/*.h)
file(GLOB LibraryGlob include/osrm/*.hpp)
file(GLOB ParametersGlob include/engine/api/*_parameters.hpp)
set(ApiHeader include/engine/api/base_result.hpp)
set(EngineHeader include/engine/status.hpp include/engine/engine_config.hpp include/engine/hint.hpp include/engine/bearing.hpp include/engine/approach.hpp include/engine/phantom_node.hpp)
set(UtilHeader include/util/coordinate.hpp include/util/json_container.hpp include/util/typedefs.hpp include/util/alias.hpp include/util/exception.hpp include/util/bearing.hpp)
set(ExtractorHeader include/extractor/extractor.hpp include/storage/io_config.hpp include/extractor/extractor_config.hpp include/extractor/travel_mode.hpp)
set(PartitionerHeader include/partitioner/partitioner.hpp include/partitioner/partitioner_config.hpp)
set(ContractorHeader include/contractor/contractor.hpp include/contractor/contractor_config.hpp)
set(StorageHeader include/storage/storage.hpp include/storage/io_config.hpp include/storage/storage_config.hpp)
install(FILES ${EngineHeader} DESTINATION include/osrm/engine)
install(FILES ${UtilHeader} DESTINATION include/osrm/util)
install(FILES ${StorageHeader} DESTINATION include/osrm/storage)
install(FILES ${ExtractorHeader} DESTINATION include/osrm/extractor)
install(FILES ${PartitionerHeader} DESTINATION include/osrm/partitioner)
install(FILES ${ContractorHeader} DESTINATION include/osrm/contractor)
install(FILES ${LibraryGlob} DESTINATION include/osrm)
install(FILES ${ParametersGlob} DESTINATION include/osrm/engine/api)
install(FILES ${ApiHeader} DESTINATION include/osrm/engine/api)
install(FILES ${VariantGlob} DESTINATION include/mapbox)
install(FILES ${FlatbuffersGlob} DESTINATION include/flatbuffers)
install(TARGETS osrm-extract DESTINATION bin)
install(TARGETS osrm-partition DESTINATION bin)
install(TARGETS osrm-customize DESTINATION bin)
install(TARGETS osrm-contract DESTINATION bin)
install(TARGETS osrm-datastore DESTINATION bin)
install(TARGETS osrm-routed DESTINATION bin)
install(TARGETS osrm DESTINATION lib)
install(TARGETS osrm_extract DESTINATION lib)
install(TARGETS osrm_partition DESTINATION lib)
install(TARGETS osrm_customize DESTINATION lib)
install(TARGETS osrm_update DESTINATION lib)
install(TARGETS osrm_contract DESTINATION lib)
install(TARGETS osrm_store DESTINATION lib)
install(TARGETS osrm_guidance DESTINATION lib)


# Install profiles and support library to /usr/local/share/osrm/profiles by default
set(DefaultProfilesDir profiles)
install(DIRECTORY ${DefaultProfilesDir} DESTINATION share/osrm)

# Setup exporting variables for pkgconfig and subproject
#

if(BUILD_PACKAGE)
  include(CPackConfig)
  include(CPack)
endif()

function(JOIN VALUES GLUE OUTPUT)
  string (REPLACE "";"" ""${GLUE}"" _TMP_STR ""${VALUES}"")
  set (${OUTPUT} ""${_TMP_STR}"" PARENT_SCOPE)
endfunction()

JOIN(""${OSRM_DEFINES}"" "" "" TMP_OSRM_DEFINES)
set(LibOSRM_CXXFLAGS ""${OSRM_CXXFLAGS} ${TMP_OSRM_DEFINES}"")
set(LibOSRM_LDFLAGS ""${OSRM_LDFLAGS}"")

if(BUILD_AS_SUBPROJECT)
  set(LibOSRM_CXXFLAGS ""${LibOSRM_CXXFLAGS}"" PARENT_SCOPE)
  set(LibOSRM_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include"" PARENT_SCOPE)
  set(LibOSRM_LIBRARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}"" PARENT_SCOPE)
  set(LibOSRM_LIBRARIES ""osrm"" PARENT_SCOPE)
  set(LibOSRM_DEPENDENT_LIBRARIES ""${ENGINE_LIBRARIES}"" PARENT_SCOPE)
  set(LibOSRM_INCLUDE_DIRS ""${CMAKE_CURRENT_SOURCE_DIR}/include""
                           ""${CMAKE_CURRENT_SOURCE_DIR}/include/osrm""
                           ""${CMAKE_CURRENT_SOURCE_DIR}/third_party""
                           ""${DEPENDENCIES_INCLUDE_DIRS}"" PARENT_SCOPE)
  set(LibOSRM_LIBRARY_DIRS ""${LibOSRM_LIBRARY_DIR}"" PARENT_SCOPE)
endif()

# pkgconfig defines
set(PKGCONFIG_OSRM_CXXFLAGS ""${LibOSRM_CXXFLAGS}"")
set(PKGCONFIG_OSRM_LDFLAGS ""${LibOSRM_LDFLAGS}"")
set(PKGCONFIG_LIBRARY_DIR ""${CMAKE_INSTALL_PREFIX}/lib"")
set(PKGCONFIG_INCLUDE_DIR ""${CMAKE_INSTALL_PREFIX}/include"")

list(APPEND DEPENDENCIES_INCLUDE_DIRS ""${PKGCONFIG_INCLUDE_DIR}"")
list(APPEND DEPENDENCIES_INCLUDE_DIRS ""${PKGCONFIG_INCLUDE_DIR}/osrm"")
JOIN(""-I${DEPENDENCIES_INCLUDE_DIRS}"" "" -I"" PKGCONFIG_OSRM_INCLUDE_FLAGS)
JOIN(""${ENGINE_LIBRARIES}"" "" "" PKGCONFIG_OSRM_DEPENDENT_LIBRARIES)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/pkgconfig.in libosrm.pc @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/libosrm.pc DESTINATION ${PKGCONFIG_LIBRARY_DIR}/pkgconfig)

# uninstall target
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake)


# Modular build system: each directory registered here provides its own CMakeLists.txt
add_subdirectory(unit_tests)
add_subdirectory(src/benchmarks)

if (ENABLE_GLIBC_WORKAROUND)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DGLIBC_WORKAROUND"")
endif()

if (ENABLE_NODE_BINDINGS)
  add_subdirectory(src/nodejs)
endif()


if (ENABLE_FUZZING)
  # Requires libosrm being built with sanitizers; make configurable and default to ubsan
  set(FUZZ_SANITIZER ""undefined"" CACHE STRING ""Sanitizer to be used for Fuzz testing"")
  set_property(CACHE FUZZ_SANITIZER PROPERTY STRINGS ""undefined"" ""integer"" ""address"" ""memory"" ""thread"" ""leak"")

  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize-coverage=edge,indirect-calls,8bit-counters -fsanitize=address"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
  set(OSRM_LDFLAGS ""${OSRM_LDFLAGS} -fsanitize=address"")

  message(STATUS ""Using -fsanitize=${FUZZ_SANITIZER} for Fuzz testing"")

  add_subdirectory(fuzz)
endif ()


# add headers sanity check target that includes all headers independently
# make sure we have all deps for the nodejs sub project's includes (nan, node)
if (ENABLE_NODE_BINDINGS)
  set(check_headers_dir ""${PROJECT_BINARY_DIR}/check-headers"")
  file(GLOB_RECURSE headers_to_check
    ${PROJECT_BINARY_DIR}/*.hpp
    ${PROJECT_SOURCE_DIR}/include/*.hpp)
  foreach(header ${headers_to_check})
    get_filename_component(filename ${header} NAME_WE)
    set(filename ""${check_headers_dir}/${filename}.cpp"")
    if (NOT EXISTS ${filename})
      file(WRITE ${filename} ""#include \""${header}\""\n"")
    endif()
    list(APPEND sources ${filename})
  endforeach()
  add_library(check-headers STATIC EXCLUDE_FROM_ALL ${sources})
  set_target_properties(check-headers PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${check_headers_dir})
endif()",3.1,3.1
19282,zauonlok,renderer,False,False,False,False,False,1,C,2020-04-19 17:31:10+00:00,2017-03-20 13:25:08+00:00,951,571,"cmake_minimum_required(VERSION 3.10)
project(Renderer LANGUAGES C)

# ==============================================================================
# Headers and sources
# ==============================================================================

set(HEADERS
    renderer/core/api.h
    renderer/core/camera.h
    renderer/core/darray.h
    renderer/core/draw2d.h
    renderer/core/graphics.h
    renderer/core/image.h
    renderer/core/macro.h
    renderer/core/maths.h
    renderer/core/mesh.h
    renderer/core/platform.h
    renderer/core/private.h
    renderer/core/scene.h
    renderer/core/skeleton.h
    renderer/core/texture.h
    renderer/scenes/blinn_scenes.h
    renderer/scenes/pbr_scenes.h
    renderer/scenes/scene_helper.h
    renderer/shaders/blinn_shader.h
    renderer/shaders/cache_helper.h
    renderer/shaders/pbr_shader.h
    renderer/shaders/skybox_shader.h
    renderer/tests/test_blinn.h
    renderer/tests/test_helper.h
    renderer/tests/test_pbr.h
)
set(SOURCES
    renderer/core/camera.c
    renderer/core/darray.c
    renderer/core/draw2d.c
    renderer/core/graphics.c
    renderer/core/image.c
    renderer/core/maths.c
    renderer/core/mesh.c
    renderer/core/private.c
    renderer/core/scene.c
    renderer/core/skeleton.c
    renderer/core/texture.c
    renderer/scenes/blinn_scenes.c
    renderer/scenes/pbr_scenes.c
    renderer/scenes/scene_helper.c
    renderer/shaders/blinn_shader.c
    renderer/shaders/cache_helper.c
    renderer/shaders/pbr_shader.c
    renderer/shaders/skybox_shader.c
    renderer/tests/test_blinn.c
    renderer/tests/test_helper.c
    renderer/tests/test_pbr.c
    renderer/main.c
)

if(WIN32)
    set(SOURCES ${SOURCES} renderer/platforms/win32.c)
elseif(APPLE)
    set(SOURCES ${SOURCES} renderer/platforms/macos.m)
else()
    set(SOURCES ${SOURCES} renderer/platforms/linux.c)
endif()

# ==============================================================================
# Target definition
# ==============================================================================

set(TARGET Viewer)

add_executable(${TARGET} ${HEADERS} ${SOURCES})

# ==============================================================================
# Target properties
# ==============================================================================

set_target_properties(${TARGET} PROPERTIES C_STANDARD 90)
set_target_properties(${TARGET} PROPERTIES C_EXTENSIONS OFF)
set_target_properties(${TARGET} PROPERTIES INTERPROCEDURAL_OPTIMIZATION ON)

# ==============================================================================
# Compile options
# ==============================================================================

if(MSVC)
    target_compile_options(${TARGET} PRIVATE /W4 /D_CRT_SECURE_NO_WARNINGS)
    target_compile_options(${TARGET} PRIVATE /fp:fast)
else()
    target_compile_options(${TARGET} PRIVATE -Wall -Wextra -pedantic)
    target_compile_options(${TARGET} PRIVATE -ffast-math)
endif()

if(UNIX AND NOT APPLE)
    target_compile_options(${TARGET} PRIVATE -D_POSIX_C_SOURCE=200809L)
endif()

# ==============================================================================
# Link libraries
# ==============================================================================

if(WIN32)
    # nothing to do for now
elseif(APPLE)
    target_link_libraries(${TARGET} PRIVATE ""-framework Cocoa"")
else()
    target_link_libraries(${TARGET} PRIVATE m X11)
endif()

# ==============================================================================
# Asset files
# ==============================================================================

set(ASSETS_SRC ""${CMAKE_SOURCE_DIR}/assets"")
set(ASSETS_DST ""$<TARGET_FILE_DIR:${TARGET}>/assets"")

if(WIN32)
    set(ASSETS_CMD copy_directory)
    set(ASSETS_MSG ""Copy assets"")
else()
    set(ASSETS_CMD create_symlink)
    set(ASSETS_MSG ""Link assets"")
endif()

add_custom_command(
    TARGET ${TARGET} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo
    ""${ASSETS_MSG}: ${ASSETS_SRC} to ${ASSETS_DST}""
)
add_custom_command(
    TARGET ${TARGET} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E ${ASSETS_CMD}
    ""${ASSETS_SRC}"" ""${ASSETS_DST}""
)

# ==============================================================================
# IDE support
# ==============================================================================

set_directory_properties(PROPERTIES VS_STARTUP_PROJECT ${TARGET})
source_group(TREE ""${CMAKE_SOURCE_DIR}/renderer"" FILES ${HEADERS} ${SOURCES})
",3.10,3.1
19378,evangelistalab,forte,False,False,False,False,False,12,C++,2020-05-17 17:55:58+00:00,2016-05-23 17:21:18+00:00,21,3677,"if (POLICY CMP0025)
  cmake_policy(SET CMP0025 NEW)
endif ()

cmake_policy(SET CMP0048 NEW)  # project_VERSION* variables populated from project(... VERSION x.x.x) string

project(forte
        VERSION 0.1
        LANGUAGES CXX C)
set(forte_AUTHORS      ""Francesco A. Evangelista and Group"")
set(forte_DESCRIPTION  ""Quantum Chemistry Methods for Strongly Correlated Electrons plugin to Psi4"")
set(forte_URL          ""https://github.com/evangelistalab/forte"")
set(forte_LICENSE      ""GPL-3.0+"")
set(CMAKE_CXX_STANDARD 17)
set(TargetOpenMP_FIND_COMPONENTS ""CXX"")

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

include(psi4OptionsTools)

option_with_print(ENABLE_CheMPS2 ""Enable CheMPS2 solver"" OFF)
option_with_print(ENABLE_OPENMP ""Enable threadsafe linking to OpenMP parallelized programs"" ON)
option_with_print(ENABLE_MPI ""Enable MPI parallelization"" OFF)
option_with_print(ENABLE_GA ""Enable Global Arrays"" OFF)
option_with_print(MAX_DET_ORB ""Set the maximum number of orbitals in a determinant"" OFF)
option_with_print(ENABLE_CODECOV ""Enable compilation with code coverage flags"" OFF)
option_with_print(ENABLE_UNTESTED_CODE ""Enable code not covered by code coverage"" OFF)
#option_with_print(ENABLE_GENERIC ""Enable mostly static linking in shared library"" OFF)

include(autocmake_omp)
include(autocmake_mpi)  # MPI option A
#include(custom_static_library)

#find_package(psi4 1.1 REQUIRED COMPONENTS ambit chemps2)
find_package(pybind11 REQUIRED)
find_package(psi4 1.3 REQUIRED)
find_package(TargetLAPACK REQUIRED)
find_package(ambit 0.3 REQUIRED)
if(ENABLE_CheMPS2)
    find_package(CheMPS2 1.8.3 CONFIG REQUIRED)
endif()

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost REQUIRED)

if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
#    target_link_libraries(forte ${Boost_LIBRARIES})
endif()

# Including custom cmake rules
include(cmake/clang-cxx-dev-tools.cmake)
include(cmake/git-version.cmake)

# Check if we can compile with SSE4.2
check_cxx_compiler_flag(""-msse4.2"" SSE42_FLAG)
if(SSE42_FLAG)
    message(""-- Adding SSE4.2 Flag"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse4.2"")
endif()
add_compile_options(-Wall -Wextra -pedantic) # -Werror)

if(ENABLE_CODECOV)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage"")
endif()

if(ENABLE_UNTESTED_CODE)
    add_definitions(-DENABLE_UNTESTED_CODE)
endif()

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-c++1z-extensions"") # avoid warnings for C++17

# List of CC files
pybind11_add_module(forte
src/api/ambit_api.cc
src/api/cube_file_api.cc
src/api/integrals_api.cc
src/api/rdms_api.cc
src/api/options_api.cc
src/api/orbital_api.cc
src/api/sci_api.cc
src/api/state_info_api.cc
src/api/forte_python_module.cc
src/base_classes/active_space_method.cc
src/base_classes/active_space_solver.cc
src/base_classes/dynamic_correlation_solver.cc
src/base_classes/forte_options.cc
src/base_classes/mo_space_info.cc
src/base_classes/orbital_transform.cc
src/base_classes/rdms.cc
src/base_classes/scf_info.cc
src/base_classes/state_info.cc
src/casscf/casscf.cc
src/casscf/casscf_gradient.cc
src/ci_ex_states/excited_state_solver.cc
src/ci_rdm/ci_rdms.cc
src/ci_rdm/ci_rdms_dynamic.cc
src/dmrg/dmrgscf.cc
src/dmrg/dmrgsolver.cc
src/fci/binary_graph.cc
src/fci/fci_solver.cc
src/fci/fci_vector.cc
src/fci/fci_vector_h_diag.cc
src/fci/fci_vector_hamiltonian.cc
src/fci/fci_vector_rdm.cc
src/fci/string_hole_list.cc
src/fci/string_lists.cc
src/fci/string_oo_list.cc
src/fci/string_vo_list.cc
src/fci/string_vvoo_list.cc
src/finite_temperature/finite_temperature.cc
src/forte_old_methods.cc
src/gradient_tpdm/backtransform_tpdm.cc
src/gradient_tpdm/integraltransform_sort_so_tpdm.cc
src/gradient_tpdm/integraltransform_tpdm_unrestricted.cc
src/helpers/blockedtensorfactory.cc
src/helpers/cube_file.cc
src/helpers/helpers.cc
src/helpers/iterative_solvers.cc
src/helpers/printing.cc
src/helpers/string_algorithms.cc
src/integrals/active_space_integrals.cc
src/integrals/cholesky_integrals.cc
src/integrals/conventional_integrals.cc
src/integrals/custom_integrals.cc
src/integrals/df_integrals.cc
src/integrals/diskdf_integrals.cc
src/integrals/distribute_df_integrals.cc
src/integrals/integrals.cc
src/integrals/make_integrals.cc
src/integrals/own_integrals.cc
src/integrals/parallel_ccvv_algorithms.cc
src/integrals/paralleldfmo.cc
src/main.cc
src/mrdsrg-helper/dsrg_mem.cc
src/mrdsrg-helper/dsrg_source.cc
src/mrdsrg-helper/dsrg_time.cc
src/mrdsrg-helper/dsrg_transformed.cc
src/mrdsrg-helper/run_dsrg.cc
src/mrdsrg-so/mrdsrg_so.cc
src/mrdsrg-so/so-mrdsrg.cc
src/mrdsrg-spin-adapted/dsrg_mrpt.cc
src/mrdsrg-spin-adapted/dsrg_mrpt_2nd.cc
src/mrdsrg-spin-adapted/dsrg_mrpt_amp.cc
src/mrdsrg-spin-adapted/dsrg_mrpt_comm.cc
src/mrdsrg-spin-adapted/sadsrg.cc
src/mrdsrg-spin-adapted/sadsrg_amps_analysis.cc
src/mrdsrg-spin-adapted/sadsrg_block_labels.cc
src/mrdsrg-spin-adapted/sadsrg_comm.cc
src/mrdsrg-spin-adapted/sa_dsrgpt.cc
src/mrdsrg-spin-adapted/sa_ldsrg2.cc
src/mrdsrg-spin-adapted/sa_mrdsrg.cc
src/mrdsrg-spin-adapted/sa_mrdsrg_amps.cc
src/mrdsrg-spin-adapted/sa_mrdsrg_diis.cc
src/mrdsrg-spin-adapted/sa_mrpt2.cc
src/mrdsrg-spin-adapted/sa_mrpt3.cc
src/mrdsrg-spin-integrated/active_dsrgpt2.cc
src/mrdsrg-spin-integrated/dsrg_mrpt2.cc
src/mrdsrg-spin-integrated/dsrg_mrpt2_ms.cc
src/mrdsrg-spin-integrated/dsrg_mrpt3.cc
src/mrdsrg-spin-integrated/dwms_mrpt2.cc
src/mrdsrg-spin-integrated/master_mrdsrg.cc
src/mrdsrg-spin-integrated/mcsrgpt2_mo.cc
src/mrdsrg-spin-integrated/mrdsrg.cc
src/mrdsrg-spin-integrated/mrdsrg_amplitude.cc
src/mrdsrg-spin-integrated/mrdsrg_commutator.cc
src/mrdsrg-spin-integrated/mrdsrg_diis.cc
src/mrdsrg-spin-integrated/mrdsrg_nonpt.cc
src/mrdsrg-spin-integrated/mrdsrg_pt.cc
src/mrdsrg-spin-integrated/mrdsrg_smart_s.cc
src/mrdsrg-spin-integrated/mrdsrg_srg.cc
src/mrdsrg-spin-integrated/three_dsrg_mrpt2.cc
src/orbital-helpers/ao_helper.cc
src/orbital-helpers/aosubspace.cc
src/orbital-helpers/ci-no/ci-no.cc
src/orbital-helpers/ci-no/mrci-no.cc
src/orbital-helpers/fragment_projector.cc
src/orbital-helpers/iao_builder.cc
src/orbital-helpers/localize.cc
src/orbital-helpers/mp2_nos.cc
src/orbital-helpers/orbital_embedding.cc
src/orbital-helpers/orbitaloptimizer.cc
src/orbital-helpers/pao_builder.cc
src/orbital-helpers/semi_canonicalize.cc
src/orbital-helpers/unpaired_density.cc
src/pci/pci.cc
src/pci/pci_sigma.cc
src/post_process/spin_corr.cc
src/sci/aci.cc
src/sci/aci_build_F.cc
src/sci/asci.cc
src/sci/fci_mo.cc
src/sci/mrpt2.cc
src/sci/sci.cc
src/sparse_ci/ci_reference.cc
src/sparse_ci/determinant_functions.cc
src/sparse_ci/determinant_hashvector.cc
src/sparse_ci/determinant_substitution_lists.cc
src/sparse_ci/sigma_vector.cc
src/sparse_ci/sigma_vector_dynamic.cc
src/sparse_ci/sigma_vector_sparse_list.cc
src/sparse_ci/sorted_string_list.cc
src/sparse_ci/sparse_ci_solver.cc
src/v2rdm/v2rdm.cc
)

target_link_libraries(forte PRIVATE psi4::core)
target_link_libraries(forte PRIVATE tgt::MathOpenMP)
set_target_properties(forte PROPERTIES PREFIX """")
target_link_libraries(forte PRIVATE ambit::ambit)
if(TARGET CheMPS2::chemps2)
    target_link_libraries(forte PRIVATE CheMPS2::chemps2)
    add_definitions(-DHAVE_CHEMPS2)
endif()

target_include_directories(forte PRIVATE src)

## 64bit implementation
if(MAX_DET_ORB)
    add_definitions(-DMAX_DET_ORB=${MAX_DET_ORB})
else()
    add_definitions(-DMAX_DET_ORB=64)
endif()

if(ENABLE_MPI)
    target_link_libraries(forte PRIVATE ${MPI_CXX_LIBRARIES})  # MPI option A
    #target_link_libraries(forte PRIVATE MPI::MPI_CXX)  # MPI option B
    #target_add_definitions(forte PRIVATE HAVE_MPI)  # MPI option B
endif()

if(ENABLE_GA)
    target_link_libraries(forte PRIVATE GlobalArrays::ga)
endif()

#
# Forte tests
#
option(ENABLE_ForteTests ""Enable Forte tests."" ON)


if (ENABLE_ForteTests)
  project (forte_tests)
  include_directories(${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/catch2/src/catch2/single_include)
  add_executable(forte_tests
    tests/code/test_determinant.cc
    tests/code/test_uint64.cc)

  project (forte_benchmarks)
  include_directories(${CMAKE_BINARY_DIR})
  add_executable(forte_benchmarks
    tests/benchmark/determinant_benchmark.cc)
endif (ENABLE_ForteTests)
",3.1,3.1
19416,esonghori,TinyGarbled,False,False,False,False,False,3,C++,2019-08-15 22:18:16+00:00,2014-08-27 23:11:31+00:00,70,1082,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
project (TinyGarble
  VERSION 3.0.0
  LANGUAGES CXX)

##############
if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.6.3"")
    message(FATAL_ERROR ""Insufficient gcc version, should be at least 4.6.3"")
  endif()
endif()

#############
enable_testing()
include_directories (${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR})

##############
# build type
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

if (CMAKE_BUILD_TYPE MATCHES Debug)
  message(""Debug build."")
elseif (CMAKE_BUILD_TYPE MATCHES Release)
  message(""Release build."")
else()
  message(""Some other build type."")
endif ()

###############
# Compiler flags
set(CMAKE_CXX_FLAGS
  ""${CMAKE_CXX_FLAGS} -Wall -Wno-strict-aliasing -march=native"")

# set -lrt for minunit testing lib.
if (UNIX)
  set(CMAKE_CXX_STANDARD_LIBRARIES ""-lrt -lpthread -ldl"")
endif (UNIX)

set (CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0 -g -DDEBUG"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG"")

###############
# Library

## Boost
set (Boost_USE_STATIC_LIBS OFF)
set (Boost_USE_MULTITHREADED ON)
set (Boost_USE_STATIC_RUNTIME OFF)
find_package (Boost 1.45.0
  REQUIRED
  COMPONENTS program_options)

if (Boost_FOUND)
  include_directories (${Boost_INCLUDE_DIRS})
endif (Boost_FOUND)

## OpenSSL
find_package (OpenSSL)

if (OPENSSL_FOUND)
	include_directories (${OPENSSL_INCLUDE_DIR})
endif (OPENSSL_FOUND)

###############
# Options
option (ENABLE_DUMP ""Enable dump hex feature"" OFF)
option (ENABLE_LOG ""Enable log feature"" OFF)
if (CMAKE_BUILD_TYPE MATCHES Debug)
	message(""Turn Log on."")
	SET(ENABLE_LOG ON BOOL ""Turn on logs in debug mode."")
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# configure a header file to pass some of the CMake settings
# to the source code
configure_file (
  ""util/tinygarble_config.h.in""
  ""util/tinygarble_config.h"")
###############
# Subdirectory
add_subdirectory (""a23"")
add_subdirectory (""crypto"")
add_subdirectory (""garbled_circuit"")
add_subdirectory (""scd"")
add_subdirectory (""tcpip"")
add_subdirectory (""util"")
",3.1.0,3.1
19605,jltsiren,gbwt,False,False,False,False,False,4,C++,2020-05-02 22:14:28+00:00,2017-04-11 14:34:27+00:00,34,260,"# Specify the minimum version for CMake

cmake_minimum_required(VERSION 3.1)

# Project's name
project(gbwt)
# We build using c++14
set(CMAKE_CXX_STANDARD 14)

# Use all standard-compliant optimizations
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -O3 -g"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -g"")

# Use openmp for parallelism, but it's configured differently on OSX
find_package(OpenMP)
if (OPENMP_FOUND)
  if (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -fopenmp"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -fopenmp"")
    set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
  elseif (${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
    # assumes clang build
    # we can't reliably detect when we're using clang, so for the time being we assume
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -Xpreprocessor -fopenmp"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -Xpreprocessor -fopenmp"")
    set (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS} -lomp"")
  endif()
endif()

# Set the output folder where your program will be created
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)

# The following folder will be included
include_directories(""${PROJECT_SOURCE_DIR}"")

# Add external projects
include(${CMAKE_ROOT}/Modules/ExternalProject.cmake)

# sdsl-lite (full build using its cmake config)
ExternalProject_Add(sdsl-lite
  SOURCE_DIR ""${CMAKE_SOURCE_DIR}/deps/sdsl-lite""
  CMAKE_ARGS ""${CMAKE_ARGS};-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>""
  UPDATE_COMMAND """"
  INSTALL_COMMAND """")
ExternalProject_Get_property(sdsl-lite INSTALL_DIR)
set(sdsl-lite_INCLUDE ""${INSTALL_DIR}/src/sdsl-lite-build/include"")
set(sdsl-lite-divsufsort_INCLUDE ""${INSTALL_DIR}/src/sdsl-lite-build/external/libdivsufsort/include"")
set(sdsl-lite_LIB ""${INSTALL_DIR}/src/sdsl-lite-build/lib"")
set(sdsl-lite-divsufsort_LIB ""${INSTALL_DIR}/src/sdsl-lite-build/external/libdivsufsort/lib"")

set(CMAKE_BUILD_TYPE Release)

add_library(gbwt STATIC
  ${CMAKE_SOURCE_DIR}/
  ${CMAKE_SOURCE_DIR}/algorithms.cpp
  ${CMAKE_SOURCE_DIR}/bwtmerge.cpp
  ${CMAKE_SOURCE_DIR}/cached_gbwt.cpp
  ${CMAKE_SOURCE_DIR}/dynamic_gbwt.cpp
  ${CMAKE_SOURCE_DIR}/files.cpp
  ${CMAKE_SOURCE_DIR}/gbwt.cpp
  ${CMAKE_SOURCE_DIR}/internal.cpp
  ${CMAKE_SOURCE_DIR}/metadata.cpp
  ${CMAKE_SOURCE_DIR}/support.cpp
  ${CMAKE_SOURCE_DIR}/utils.cpp
  ${CMAKE_SOURCE_DIR}/variants.cpp)
add_dependencies(gbwt sdsl-lite)

add_executable(build_gbwt ${CMAKE_SOURCE_DIR}/build_gbwt.cpp)
add_dependencies(build_gbwt gbwt)
target_include_directories(build_gbwt PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(build_gbwt
  ""${LIBRARY_OUTPUT_PATH}/libgbwt.a""
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

add_executable(merge_gbwt ${CMAKE_SOURCE_DIR}/merge_gbwt.cpp)
add_dependencies(merge_gbwt gbwt)
target_include_directories(merge_gbwt PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(merge_gbwt
  ""${LIBRARY_OUTPUT_PATH}/libgbwt.a""
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

add_executable(benchmark ${CMAKE_SOURCE_DIR}/benchmark.cpp)
add_dependencies(benchmark gbwt)
target_include_directories(benchmark PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(benchmark
  ""${LIBRARY_OUTPUT_PATH}/libgbwt.a""
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

add_executable(metadata_tool ${CMAKE_SOURCE_DIR}/metadata_tool.cpp)
add_dependencies(metadata_tool gbwt)
target_include_directories(metadata_tool PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(metadata_tool
  ""${LIBRARY_OUTPUT_PATH}/libgbwt.a""
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

add_executable(remove_seq ${CMAKE_SOURCE_DIR}/remove_seq.cpp)
add_dependencies(remove_seq gbwt)
target_include_directories(remove_seq PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(remove_seq
  ""${LIBRARY_OUTPUT_PATH}/libgbwt.a""
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

target_include_directories(gbwt PUBLIC
  ""${CMAKE_SOURCE_DIR}/include""
  ""${sdsl-lite_INCLUDE}""
  ""${sdsl-lite-divsufsort_INCLUDE}"")
target_link_libraries(gbwt
  ""${sdsl-lite_LIB}/libsdsl.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort.a""
  ""${sdsl-lite-divsufsort_LIB}/libdivsufsort64.a"")

if (APPLE)
elseif (TRUE)
  if (BUILD_STATIC)
    set(CMAKE_EXE_LINKER_FLAGS ""-static"")
  endif()
endif()
",3.1,3.1
19927,foonathan,type_safe,False,False,False,False,False,19,C++,2020-04-28 20:22:44+00:00,2016-10-08 12:04:58+00:00,753,367,"# Copyright (C) 2016-2019 Jonathan Müller <jonathanmueller.dev@gmail.com>
# This file is subject to the license terms in the LICENSE file
# found in the top-level directory of this distribution.

cmake_minimum_required(VERSION 3.1)

project(TYPE_SAFE)

include(external/external.cmake)

# options
if(CMAKE_BUILD_TYPE MATCHES Debug)
    set(_type_safe_default_assertions ON)
else()
    set(_type_safe_default_assertions OFF)
endif()

option(TYPE_SAFE_ENABLE_ASSERTIONS ""whether or not to enable internal assertions for the type_safe library"" ${_type_safe_default_assertions})
if(${TYPE_SAFE_ENABLE_ASSERTIONS})
    set(_type_safe_enable_assertions 1)
else()
    set(_type_safe_enable_assertions 0)
endif()

option(TYPE_SAFE_ENABLE_PRECONDITION_CHECKS ""whether or not to enable precondition checks"" ON)
if(${TYPE_SAFE_ENABLE_PRECONDITION_CHECKS})
    set(_type_safe_enable_precondition_checks 1)
else()
    set(_type_safe_enable_precondition_checks 0)
endif()

option(TYPE_SAFE_ENABLE_WRAPPER ""whether or not the wrappers in types.hpp are used"" ON)
if(${TYPE_SAFE_ENABLE_WRAPPER})
    set(_type_safe_enable_wrapper 1)
else()
    set(_type_safe_enable_wrapper 0)
endif()

set(TYPE_SAFE_ARITHMETIC_POLICY ""ub"" CACHE STRING ""which policy (ub/checked/default) is going to be used"")
option(TYPE_SAFE_ARITHMETIC_UB ""deprecated"" ON)

if(NOT ${TYPE_SAFE_ARITHMETIC_UB})
    set(_type_safe_arithmetic_policy 0)
    message(DEPRECATION ""option TYPE_SAFE_ARITHMETIC_UB is deprecated, use TYPE_SAFE_ARITHMETIC_POLICY instead"")
    message(STATUS ""arithmetic_policy_default is default_arithmetic"")
elseif(${TYPE_SAFE_ARITHMETIC_POLICY} STREQUAL ""ub"")
    set(_type_safe_arithmetic_policy 1)
    message(STATUS ""arithmetic_policy_default is undefined_behavior_arithmetic"")
elseif(${TYPE_SAFE_ARITHMETIC_POLICY} STREQUAL ""checked"")
    set(_type_safe_arithmetic_policy 2)
    message(STATUS ""arithmetic_policy_default is checked_arithmetic"")
else()
    set(_type_safe_arithmetic_policy 0)
    message(STATUS ""arithmetic_policy_default is default_arithmetic"")
endif()

# interface target
set(detail_header_files
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/aligned_union.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/all_of.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/assert.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/assign_or_construct.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/constant_parser.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/copy_move_control.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/force_inline.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/is_nothrow_swappable.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/map_invoke.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/detail/variant_impl.hpp)
set(header_files
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/config.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/arithmetic_policy.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/boolean.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/bounded_type.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/compact_optional.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/constrained_type.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/deferred_construction.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/downcast.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/flag.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/flag_set.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/floating_point.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/index.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/integer.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/narrow_cast.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/optional.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/optional_ref.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/output_parameter.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/reference.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/strong_typedef.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/tagged_union.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/types.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/variant.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/type_safe/visitor.hpp)

add_library(type_safe INTERFACE)
target_sources(type_safe INTERFACE ""$<BUILD_INTERFACE:${detail_header_files};${header_files}>"")
target_include_directories(type_safe INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>)
target_include_directories(type_safe SYSTEM INTERFACE $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>)
target_compile_definitions(type_safe INTERFACE
                                     TYPE_SAFE_ENABLE_ASSERTIONS=${_type_safe_enable_assertions}
                                     TYPE_SAFE_ENABLE_PRECONDITION_CHECKS=${_type_safe_enable_precondition_checks}
                                     TYPE_SAFE_ENABLE_WRAPPER=${_type_safe_enable_wrapper}
                                     TYPE_SAFE_ARITHMETIC_POLICY=${_type_safe_arithmetic_policy})
target_link_libraries(type_safe INTERFACE debug_assert)

if(MSVC)
   target_compile_options(type_safe INTERFACE /wd4800) # truncation to bool warning
endif()

# Setup package config
include( CMakePackageConfigHelpers )
set(CONFIG_PACKAGE_INSTALL_DIR lib/cmake/type_safe)

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/type_safe-config-version.cmake
  VERSION 0.2.1
  COMPATIBILITY SameMajorVersion
)

# Install target
install(DIRECTORY include/type_safe DESTINATION include)

# Only export target when using imported targets
if(TYPE_SAFE_HAS_IMPORTED_TARGETS)
    install(TARGETS type_safe
        EXPORT type_safe-targets
        DESTINATION lib)

    install( EXPORT type_safe-targets
      DESTINATION
        ${CONFIG_PACKAGE_INSTALL_DIR}
    )

    install( FILES
      ${CMAKE_CURRENT_SOURCE_DIR}/type_safe-config.cmake
      ${CMAKE_CURRENT_BINARY_DIR}/type_safe-config-version.cmake
      DESTINATION
        ${CONFIG_PACKAGE_INSTALL_DIR} )

endif()

# other subdirectories
# only add if not inside add_subdirectory()
option(TYPE_SAFE_BUILD_TEST_EXAMPLE ""build test and example"" OFF)
if(${TYPE_SAFE_BUILD_TEST_EXAMPLE} OR (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR))
    enable_testing()
    add_subdirectory(example/)
    add_subdirectory(test/)
endif()

option(TYPE_SAFE_BUILD_DOC ""generate documentation"" OFF)
if(TYPE_SAFE_BUILD_DOC)
    add_subdirectory(doc/)
endif()
",3.1,3.1
19959,kfrlib,kfr,False,False,False,False,False,11,C++,2020-04-02 03:17:11+00:00,2016-06-29 17:48:43+00:00,809,786,"# Copyright (C) 2016 D Levin (http://www.kfrlib.com)
# This file is part of KFR
#
# KFR is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KFR is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KFR.

cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_FLAGS
    "" ${CMAKE_CXX_FLAGS}""
    CACHE STRING ""compile flags"" FORCE)

project(kfr CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

if (WIN32 AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX
        """"
        CACHE STRING ""Reset install prefix on Win32"" FORCE)
endif ()

if (WIN32)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif ()

set(CMAKE_CXX_VISIBILITY_PRESET ""default"")
set(CMAKE_C_VISIBILITY_PRESET ""default"")

message(STATUS ""Install prefix = ${CMAKE_INSTALL_PREFIX}"")

message(
    STATUS
        ""C++ compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} ${CMAKE_CXX_COMPILER} ""
)
message(STATUS CMAKE_SYSTEM_PROCESSOR = ${CMAKE_SYSTEM_PROCESSOR})

if (CMAKE_SYSTEM_PROCESSOR MATCHES ""(x86)|(X86)|(amd64)|(AMD64)"")
    set(X86 TRUE)
else ()
    set(X86 FALSE)
endif ()

if (X86)
    message(STATUS X86)
endif ()

if (MSVC)
    message(STATUS MSVC)
endif ()

if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR CMAKE_CXX_COMPILER_ID STREQUAL
                                              ""AppleClang"")
    set(CLANG 1)
else ()
    set(CLANG 0)
endif ()

# Include autogenerated list of source files
include(sources.cmake)

option(ENABLE_TESTS ""Enable tests and examples"" OFF)
if (CLANG)
    option(ENABLE_DFT ""Enable DFT and related algorithms."" ON)
    option(ENABLE_DFT_NP ""Enable Non-power of 2 DFT"" ON)
    if (X86)
        option(
            ENABLE_DFT_MULTIARCH
            ""Build DFT static libraries for various architectures. Requires Clang""
            OFF)
    endif ()
else ()
    option(ENABLE_DFT ""Enable DFT and related algorithms."" OFF)
    option(ENABLE_DFT_NP ""Enable Non-power of 2 DFT"" OFF)
endif ()
option(ENABLE_ASMTEST ""Enable writing disassembly"" OFF)
option(REGENERATE_TESTS ""Regenerate auto tests"" OFF)
option(DISABLE_CLANG_EXTENSIONS ""Disable Clang vector extensions"" OFF)
option(KFR_EXTENDED_TESTS ""Extended tests (up to hour)"" OFF)
option(SKIP_TESTS ""Skip tests (only build)"" OFF)
mark_as_advanced(ENABLE_ASMTEST)
mark_as_advanced(REGENERATE_TESTS)
mark_as_advanced(DISABLE_CLANG_EXTENSIONS)

if (NOT CPU_ARCH)
    set(CPU_ARCH detect)
endif ()

if (CPU_ARCH STREQUAL ""detect"" AND X86)
    message(STATUS ""Detecting native cpu..."")
    try_run(
        RUN_RESULT COMPILE_RESULT ""${CMAKE_CURRENT_BINARY_DIR}/tmpdir""
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/detect_cpu.cpp
        CMAKE_FLAGS
            ""-DINCLUDE_DIRECTORIES=${CMAKE_CURRENT_SOURCE_DIR}/include""
            -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON
            -DCMAKE_CXX_EXTENSIONS=ON
        COMPILE_OUTPUT_VARIABLE COMPILE_OUT
        RUN_OUTPUT_VARIABLE RUN_OUT)
    if (COMPILE_RESULT AND RUN_RESULT EQUAL 0)
        message(STATUS DETECTED_CPU = ${RUN_OUT})
        set(CPU_ARCH
            ${RUN_OUT}
            CACHE STRING ""Detected CPU"" FORCE)
    else ()
        message(STATUS COMPILE_RESULT = ${COMPILE_RESULT})
        message(STATUS RUN_RESULT = ${RUN_RESULT})
        message(STATUS COMPILE_OUT = ${COMPILE_OUT})
        message(STATUS RUN_OUT = ${RUN_OUT})
    endif ()
endif ()

include(cmake/target_set_arch.cmake)

add_library(use_arch INTERFACE)
target_set_arch(use_arch INTERFACE ${CPU_ARCH})

if (WIN32)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
    add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)
endif ()

if (IOS)
    set(STD_LIB)
else ()
    set(STD_LIB stdc++)
endif ()

if (ANDROID)
    set(PTHREAD_LIB)
else ()
    set(PTHREAD_LIB pthread)
endif ()

# KFR library
add_library(kfr INTERFACE)
target_sources(kfr INTERFACE ${KFR_SRC})
target_include_directories(kfr INTERFACE include)
target_compile_options(kfr INTERFACE ""$<$<CONFIG:DEBUG>:-DKFR_DEBUG>"")
if (APPLE)
    target_compile_options(kfr INTERFACE -faligned-allocation)
endif ()
if (NOT IOS)
    if (CLANG)
        target_compile_options(kfr INTERFACE -Xclang -mstackrealign)
    elseif (NOT MSVC)
        target_compile_options(kfr INTERFACE -mstackrealign)
    endif ()
endif ()
if (MSVC)
    target_compile_options(kfr INTERFACE -bigobj -EHsc)
else ()
    target_link_libraries(kfr INTERFACE ${STD_LIB} ${PTHREAD_LIB} m)
endif ()
if (DISABLE_CLANG_EXTENSIONS)
    target_compile_definitions(kfr INTERFACE -DCMT_DISABLE_CLANG_EXT)
endif ()
if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
    target_compile_options(kfr INTERFACE -Wno-ignored-qualifiers)
endif ()
if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
    target_compile_options(kfr INTERFACE -Wno-c++1z-extensions)
endif ()

if (NOT ENABLE_DFT)
    target_compile_definitions(kfr INTERFACE -DKFR_NO_DFT)
endif ()
if (KFR_EXTENDED_TESTS)
    target_compile_definitions(kfr INTERFACE -DKFR_EXTENDED_TESTS)
endif ()

message(STATUS CPU_ARCH=${CPU_ARCH})

if (X86)
    add_executable(detect_cpu ${CMAKE_CURRENT_SOURCE_DIR}/cmake/detect_cpu.cpp)
    target_link_libraries(detect_cpu PRIVATE kfr)
    target_set_arch(detect_cpu PRIVATE generic)
endif ()

function (add_arch_library NAME ARCH SRCS DEFS)
    add_library(${NAME}_${ARCH} ${SRCS})
    target_link_libraries(${NAME}_${ARCH} kfr)
    target_set_arch(${NAME}_${ARCH} PRIVATE ${ARCH})
    target_compile_options(${NAME}_${ARCH} PRIVATE ${DEFS})
    target_link_libraries(${NAME}_all INTERFACE ${NAME}_${ARCH})
    target_compile_options(${NAME}_${ARCH} PRIVATE -flto)
endfunction ()

if (ENABLE_DFT)

    if (MSVC)
        set(KFR_DFT_DEFS -fp:fast)
    else ()
        set(KFR_DFT_DEFS -ffast-math)
    endif ()

    if (ENABLE_DFT_MULTIARCH)
        add_library(kfr_dft INTERFACE)
        add_library(kfr_dft_all INTERFACE)
        target_link_libraries(kfr_dft INTERFACE kfr kfr_dft_all)
        target_compile_definitions(
            kfr_dft
            INTERFACE -DKFR_DFT_MULTI=1
                      -DCMT_MULTI=1
                      -DCMT_MULTI_ENABLED_SSE2=1
                      -DCMT_MULTI_ENABLED_SSE41=1
                      -DCMT_MULTI_ENABLED_AVX=1
                      -DCMT_MULTI_ENABLED_AVX2=1
                      -DCMT_MULTI_ENABLED_AVX512=1)

        add_arch_library(kfr_dft sse2 ""${KFR_DFT_SRC}"" ""${KFR_DFT_DEFS}"")
        add_arch_library(kfr_dft sse41 ""${KFR_DFT_SRC}"" ""${KFR_DFT_DEFS}"")
        add_arch_library(kfr_dft avx ""${KFR_DFT_SRC}"" ""${KFR_DFT_DEFS}"")
        add_arch_library(kfr_dft avx2 ""${KFR_DFT_SRC}"" ""${KFR_DFT_DEFS}"")
        add_arch_library(kfr_dft avx512 ""${KFR_DFT_SRC}"" ""${KFR_DFT_DEFS}"")

    else ()
        add_library(kfr_dft ${KFR_DFT_SRC})
        target_link_libraries(kfr_dft kfr use_arch)
        target_compile_options(kfr_dft PRIVATE ""${KFR_DFT_DEFS}"")
        if (ENABLE_DFT_NP)
            target_compile_definitions(kfr_dft PUBLIC -DKFR_DFT_NPo2)
        else ()
            target_compile_definitions(kfr_dft PUBLIC -DKFR_DFT_NO_NPo2)
        endif ()

    endif ()

    if (ENABLE_CAPI_BUILD)
        add_subdirectory(capi)
    endif ()
endif ()

if (ENABLE_TESTS)
    add_subdirectory(examples)
    add_subdirectory(tests)
    add_subdirectory(tools)
endif ()

add_library(kfr_io ${KFR_IO_SRC})
target_link_libraries(kfr_io kfr)
target_link_libraries(kfr_io use_arch)

install(
    TARGETS kfr kfr_io
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin)

if (ENABLE_CAPI_BUILD)
    install(
        TARGETS kfr_capi
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)
endif ()

set(kfr_defines)

function(append_defines_from target)
    get_target_property(compile_defs ${target} INTERFACE_COMPILE_DEFINITIONS)
    if (compile_defs)
        list(APPEND kfr_defines ""${compile_defs}"")
    endif ()
    set(kfr_defines ${kfr_defines} PARENT_SCOPE)
endfunction()

append_defines_from(kfr)
if (ENABLE_DFT)
    append_defines_from(kfr_dft)
endif ()
append_defines_from(kfr_io)

message(STATUS kfr_defines = ""${kfr_defines}"")
string(REPLACE ""="" "" "" kfr_defines ""${kfr_defines}"")
string(REPLACE "";"" ""\n#define "" kfr_defines ""${kfr_defines}"")
set(kfr_defines ""#define ${kfr_defines}\n"")

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/kfr_config.h ""${kfr_defines}"")

if (ENABLE_DFT)
    if (ENABLE_DFT_MULTIARCH)
        install(
            TARGETS kfr_dft_sse2 kfr_dft_sse41 kfr_dft_avx kfr_dft_avx2
                    kfr_dft_avx512
            ARCHIVE DESTINATION lib
            LIBRARY DESTINATION lib
            RUNTIME DESTINATION bin)
    else ()
        install(
            TARGETS kfr_dft
            ARCHIVE DESTINATION lib
            LIBRARY DESTINATION lib
            RUNTIME DESTINATION bin)
    endif ()
endif ()

install(DIRECTORY include/kfr DESTINATION include)

install(
    FILES ${CMAKE_CURRENT_BINARY_DIR}/kfr_config.h
    DESTINATION include/kfr
    RENAME config.h
    )

# uninstall target
if (NOT TARGET uninstall)
    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake"" IMMEDIATE
        @ONLY)

    add_custom_target(
        uninstall
        COMMAND ${CMAKE_COMMAND} -P
                ${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake)
endif ()
",3.1,3.1
20044,AxioDL,amuse,False,False,False,False,False,7,C++,2020-04-22 10:41:52+00:00,2016-05-02 21:51:41+00:00,26,417,"cmake_minimum_required(VERSION 3.10 FATAL_ERROR) # because of c++17

project(amuse)

if (NOT MSVC)
  set(CMAKE_CXX_STANDARD 20)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

if(NOT MSVC)
    add_compile_options(-Wno-narrowing)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/boo AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/athena)
  message(STATUS ""Preparing standalone build"")
  add_subdirectory(boo)
  add_subdirectory(athena)
endif()

add_library(amuse
  lib/AudioGroup.cpp
  lib/AudioGroupData.cpp
  lib/AudioGroupPool.cpp
  lib/AudioGroupProject.cpp
  lib/AudioGroupSampleDirectory.cpp
  lib/Common.cpp
  lib/ContainerRegistry.cpp
  lib/DirectoryEnumerator.cpp
  lib/DSPCodec.cpp
  lib/EffectChorus.cpp
  lib/EffectDelay.cpp
  lib/EffectReverb.cpp
  lib/Emitter.cpp
  lib/Engine.cpp
  lib/Envelope.cpp
  lib/Listener.cpp
  lib/N64MusyXCodec.cpp
  lib/Sequencer.cpp
  lib/SongConverter.cpp
  lib/SongState.cpp
  lib/SoundMacroState.cpp
  lib/Studio.cpp
  lib/Submix.cpp
  lib/Voice.cpp
  lib/VolumeTable.cpp

  include/amuse/amuse.hpp
  include/amuse/AudioGroup.hpp
  include/amuse/AudioGroupData.hpp
  include/amuse/AudioGroupPool.hpp
  include/amuse/AudioGroupProject.hpp
  include/amuse/AudioGroupSampleDirectory.hpp
  include/amuse/Common.hpp
  include/amuse/ContainerRegistry.hpp
  include/amuse/DirectoryEnumerator.hpp
  include/amuse/DSPCodec.hpp
  include/amuse/EffectBase.hpp
  include/amuse/EffectChorus.hpp
  include/amuse/EffectDelay.hpp
  include/amuse/EffectReverb.hpp
  include/amuse/Emitter.hpp
  include/amuse/Engine.hpp
  include/amuse/Entity.hpp
  include/amuse/Envelope.hpp
  include/amuse/IBackendSubmix.hpp
  include/amuse/IBackendVoice.hpp
  include/amuse/IBackendVoiceAllocator.hpp
  include/amuse/Listener.hpp
  include/amuse/N64MusyXCodec.hpp
  include/amuse/Sequencer.hpp
  include/amuse/SongConverter.hpp
  include/amuse/SoundMacroState.hpp
  include/amuse/SongState.hpp
  include/amuse/Submix.hpp
  include/amuse/Studio.hpp
  include/amuse/Voice.hpp
  include/amuse/VolumeTable.hpp
)

target_atdna(amuse atdna_AudioGroupPool.cpp include/amuse/AudioGroupPool.hpp)
target_atdna(amuse atdna_AudioGroupProject.cpp include/amuse/AudioGroupProject.hpp)
target_atdna(amuse atdna_AudioGroupSampleDirectory.cpp include/amuse/AudioGroupSampleDirectory.hpp)

target_include_directories(amuse PUBLIC include)
target_link_libraries(amuse
  athena-core
  lzokay
  ${ZLIB_LIBRARIES}
)

if(NX)
  target_sources(amuse PRIVATE include/switch_math.hpp)
endif()

if(TARGET boo)
  target_sources(amuse PRIVATE lib/BooBackend.cpp include/amuse/BooBackend.hpp)
  target_link_libraries(amuse boo)
endif()

if (MSVC)
  target_compile_options(amuse PRIVATE
    # Enforce various standards compliant behavior.
    $<$<COMPILE_LANGUAGE:CXX>:/permissive->

    # Enable standard volatile semantics.
    $<$<COMPILE_LANGUAGE:CXX>:/volatile:iso>

    # Reports the proper value for the __cplusplus preprocessor macro.
    $<$<COMPILE_LANGUAGE:CXX>:/Zc:__cplusplus>

    # Use latest C++ standard.
    $<$<COMPILE_LANGUAGE:CXX>:/std:c++latest>
  )
  if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
    # Flags for MSVC (not clang-cl)
    target_compile_options(amuse PRIVATE
      # Allow constexpr variables to have explicit external linkage.
      $<$<COMPILE_LANGUAGE:CXX>:/Zc:externConstexpr>

      # Assume that new throws exceptions, allowing better code generation.
      $<$<COMPILE_LANGUAGE:CXX>:/Zc:throwingNew>
    )
  endif()
else()
  target_compile_options(amuse PRIVATE -Wno-unknown-pragmas)
endif()

if(COMMAND add_sanitizers)
  add_sanitizers(amuse)
endif()

if(TARGET boo AND NOT WINDOWS_STORE AND NOT NX)
  # AudioUnit Target (OS X only)
  add_subdirectory(AudioUnit)

  # VST Target
  add_subdirectory(VST)

  # Multi-platform CLI tools

  # Player
  add_executable(amuseplay WIN32 driver/amuseplay.cpp)
  target_link_libraries(amuseplay amuse logvisor)

  # Converter
  add_executable(amuseconv driver/amuseconv.cpp)
  target_link_libraries(amuseconv amuse logvisor)

  # Renderer
  add_executable(amuserender driver/amuserender.cpp)
  target_link_libraries(amuserender amuse logvisor)

  if(COMMAND add_sanitizers)
    add_sanitizers(amuseplay)
    add_sanitizers(amuseconv)
    add_sanitizers(amuserender)
  endif()

  # Editor
  find_package(Qt5 COMPONENTS Widgets)
  if (Qt5Widgets_FOUND)
    message(STATUS ""Qt5 found, amuse-gui will be built"")
    add_subdirectory(Editor)
  else()
    message(STATUS ""Qt5 not found, amuse-gui will not be built"")
  endif()
endif()
",3.10,3.1
20078,irtimmer,limelight-embedded,False,False,False,False,False,30,C,2020-04-30 18:55:00+00:00,2014-01-07 00:51:19+00:00,1208,543,"cmake_minimum_required(VERSION 3.1)
project(moonlight-embedded VERSION 2.4.10 LANGUAGES C)
SET(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
SET(CMAKE_C_STANDARD 99)
include(${CMAKE_ROOT}/Modules/GNUInstallDirs.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/generate_version_header.cmake)

aux_source_directory(./src SRC_LIST)
list(APPEND SRC_LIST ./src/input/evdev.c ./src/input/mapping.c ./src/input/udev.c)

set(MOONLIGHT_DEFINITIONS)

find_package(ALSA)
find_package(Opus REQUIRED)
find_package(Broadcom)
find_package(Freescale)
find_package(Amlogic)
find_package(Rockchip)

find_package(PkgConfig REQUIRED)
pkg_check_modules(EVDEV REQUIRED libevdev)
pkg_check_modules(UDEV REQUIRED libudev)
pkg_check_modules(SDL sdl2>=2.0.4)
pkg_check_modules(AVCODEC libavcodec)
pkg_check_modules(AVUTIL libavutil)
pkg_check_modules(XLIB x11)
pkg_check_modules(VDPAU vdpau)
pkg_check_modules(LIBVA libva)
pkg_check_modules(LIBVA_X11 libva-x11)
pkg_check_modules(PULSE libpulse-simple)
pkg_check_modules(CEC libcec>=4)
pkg_check_modules(EGL egl)
pkg_check_modules(GLES glesv2)

set(VDPAU_ACCEL_FOUND FALSE)
set(VA_ACCEL_FOUND FALSE)
set(SOFTWARE_FOUND FALSE)

if(AVCODEC_FOUND AND AVUTIL_FOUND)
  if(EGL_FOUND AND GLES_FOUND AND XLIB_FOUND)
    set(X11_FOUND TRUE)
    if(VDPAU_FOUND)
      set(VDPAU_ACCEL_FOUND TRUE)
    endif()
    if (LIBVA_FOUND AND LIBVA_X11_FOUND)
      set(VA_ACCEL_FOUND TRUE)
    endif()
  endif()
  if(SDL_FOUND OR X11_FOUND)
    set(SOFTWARE_FOUND TRUE)
  endif()
endif()

SET(MOONLIGHT_COMMON_INCLUDE_DIR ./third_party/moonlight-common-c/src)
SET(GAMESTREAM_INCLUDE_DIR ./libgamestream)

include_directories(""${PROJECT_BINARY_DIR}"")

add_subdirectory(libgamestream)

add_executable(moonlight ${SRC_LIST})
target_link_libraries(moonlight gamestream)

if (CEC_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_LIBCEC)
  list(APPEND MOONLIGHT_OPTIONS CEC)
  target_sources(moonlight PRIVATE ./src/input/cec.c)
  target_include_directories(moonlight PRIVATE ./third_party/libcec ${CEC_INCLUDE_DIRS})
  target_link_libraries(moonlight ${CEC_LIBRARIES})
endif()

if(AMLOGIC_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_AML)
  list(APPEND MOONLIGHT_OPTIONS AML)
  add_library(moonlight-aml SHARED ./src/video/aml.c ${ILCLIENT_SRC_LIST})
  target_include_directories(moonlight-aml PRIVATE ${AMLOGIC_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-aml gamestream ${AMLOGIC_LIBRARIES})
  set_property(TARGET moonlight-aml PROPERTY COMPILE_DEFINITIONS ${AMLOGIC_DEFINITIONS})
  install(TARGETS moonlight-aml DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(BROADCOM_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_PI)
  list(APPEND MOONLIGHT_OPTIONS PI)
  aux_source_directory(./third_party/ilclient ILCLIENT_SRC_LIST)
  add_library(moonlight-pi SHARED ./src/video/pi.c ./src/audio/omx.c ${ILCLIENT_SRC_LIST})
  target_include_directories(moonlight-pi PRIVATE ./third_party/ilclient ${BROADCOM_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR} ${OPUS_INCLUDE_DIRS})
  target_link_libraries(moonlight-pi gamestream ${BROADCOM_OMX_LIBRARIES} ${OPUS_LIBRARY})
  set_property(TARGET moonlight-pi PROPERTY COMPILE_DEFINITIONS ${BROADCOM_OMX_DEFINITIONS})
  install(TARGETS moonlight-pi DESTINATION ${CMAKE_INSTALL_LIBDIR})

  list(APPEND MOONLIGHT_DEFINITIONS HAVE_MMAL)
  list(APPEND MOONLIGHT_OPTIONS MMAL)
  add_library(moonlight-mmal SHARED ./src/video/mmal.c)
  target_include_directories(moonlight-mmal PRIVATE ${BROADCOM_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-mmal gamestream ${BROADCOM_MMAL_LIBRARIES})
  install(TARGETS moonlight-mmal DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(FREESCALE_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_IMX)
  list(APPEND MOONLIGHT_OPTIONS IMX)
  add_library(moonlight-imx SHARED ./src/video/imx.c ./src/video/imx_vpu.c)
  target_include_directories(moonlight-imx PRIVATE ${FREESCALE_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-imx gamestream ${FREESCALE_LIBRARIES})
  install(TARGETS moonlight-imx DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if(ROCKCHIP_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_ROCKCHIP)
  list(APPEND MOONLIGHT_OPTIONS ROCKCHIP)
  add_library(moonlight-rk SHARED ./src/video/rk.c)
  target_include_directories(moonlight-rk PRIVATE ${ROCKCHIP_INCLUDE_DIRS} ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR})
  target_link_libraries(moonlight-rk gamestream ${ROCKCHIP_LIBRARIES})
  set_property(TARGET moonlight-rk PROPERTY COMPILE_DEFINITIONS ${ROCKCHIP_DEFINITIONS})
  install(TARGETS moonlight-rk DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if (SOFTWARE_FOUND)
  target_sources(moonlight PRIVATE ./src/video/ffmpeg.c)
  target_include_directories(moonlight PRIVATE ${AVCODEC_INCLUDE_DIRS} ${AVUTIL_INCLUDE_DIRS})
  target_link_libraries(moonlight ${AVCODEC_LIBRARIES} ${AVUTIL_LIBRARIES})
  if(SDL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_SDL)
    list(APPEND MOONLIGHT_OPTIONS SDL)
    target_sources(moonlight PRIVATE ./src/video/sdl.c ./src/audio/sdl.c ./src/input/sdl.c)
    target_include_directories(moonlight PRIVATE ${SDL_INCLUDE_DIRS})
    target_link_libraries(moonlight ${SDL_LIBRARIES})
  endif()
  if(X11_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_X11)
    list(APPEND MOONLIGHT_OPTIONS X11)
    target_sources(moonlight PRIVATE ./src/video/x11.c ./src/video/egl.c ./src/input/x11.c)
    target_include_directories(moonlight PRIVATE ${XLIB_INCLUDE_DIRS} ${EGL_INCLUDE_DIRS} ${GLES_INCLUDE_DIRS})
    target_link_libraries(moonlight ${XLIB_LIBRARIES} ${EGL_LIBRARIES} ${GLES_LIBRARIES})
  endif()
  if(VDPAU_ACCEL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_VDPAU)
    list(APPEND MOONLIGHT_OPTIONS VDPAU)
    target_include_directories(moonlight PRIVATE ${VDPAU_INCLUDE_DIRS})
    target_link_libraries(moonlight ${VDPAU_LIBRARIES})
  endif()
  if(VA_ACCEL_FOUND)
    list(APPEND MOONLIGHT_DEFINITIONS HAVE_VAAPI)
    list(APPEND MOONLIGHT_OPTIONS VAAPI)
    target_sources(moonlight PRIVATE ./src/video/ffmpeg_vaapi.c)
    target_include_directories(moonlight PRIVATE ${LIBVA_INCLUDE_DIRS} ${LIBVA_X11_INCLUDE_DIRS})
    target_link_libraries(moonlight ${LIBVA_LIBRARIES} ${LIBVA_X11_LIBRARIES})
  endif()
endif()

if (ALSA_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_ALSA)
  list(APPEND MOONLIGHT_OPTIONS ALSA)
  target_sources(moonlight PRIVATE ./src/audio/alsa.c)
  target_include_directories(moonlight PRIVATE ${ALSA_INCLUDE_DIR})
  target_link_libraries(moonlight ${ALSA_LIBRARY})
endif()

if (PULSE_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_PULSE)
  list(APPEND MOONLIGHT_OPTIONS PULSE)
  target_sources(moonlight PRIVATE ./src/audio/pulse.c)
  target_include_directories(moonlight PRIVATE ${PULSE_INCLUDE_DIRS})
  target_link_libraries(moonlight ${PULSE_LIBRARIES})
endif()

if (AMLOGIC_FOUND OR BROADCOM_FOUND OR FREESCALE_FOUND OR ROCKCHIP_FOUND OR X11_FOUND)
  list(APPEND MOONLIGHT_DEFINITIONS HAVE_EMBEDDED)
  list(APPEND MOONLIGHT_OPTIONS EMBEDDED)
endif()

if(NOT AMLOGIC_FOUND AND NOT BROADCOM_FOUND AND NOT FREESCALE_FOUND AND NOT ROCKCHIP_FOUND AND NOT SOFTWARE_FOUND)
  message(FATAL_ERROR ""No video output available"")
endif()

configure_file(""./src/configuration.h.in"" ""${PROJECT_BINARY_DIR}/configuration.h"")

set_property(TARGET moonlight PROPERTY COMPILE_DEFINITIONS ${MOONLIGHT_DEFINITIONS})
target_include_directories(moonlight PRIVATE ${GAMESTREAM_INCLUDE_DIR} ${MOONLIGHT_COMMON_INCLUDE_DIR} ${OPUS_INCLUDE_DIRS} ${EVDEV_INCLUDE_DIRS} ${UDEV_INCLUDE_DIRS})
target_link_libraries(moonlight ${EVDEV_LIBRARIES} ${OPUS_LIBRARY} ${UDEV_LIBRARIES} ${CMAKE_DL_LIBS})

add_subdirectory(docs)

install(TARGETS moonlight DESTINATION ${CMAKE_INSTALL_BINDIR})
install(FILES gamecontrollerdb.txt DESTINATION ${CMAKE_INSTALL_DATADIR}/moonlight)
install(FILES moonlight.conf DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})
",3.1,3.1
20082,LubosD,darling,False,False,False,False,False,45,C,2020-05-16 06:56:46+00:00,2012-12-09 10:31:44+00:00,5442,3096,"SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR ""x86-64"")

# This allows setting the compiler with -DCMAKE_C_COMPILER when configuring.
if (NOT DEFINED CMAKE_C_COMPILER)
	find_program(CMAKE_C_COMPILER NAMES
		""clang""
		""clang-4.0""
		""clang-6.0""
		""clang-7""
		""clang-9""
		""clang-10""
)
endif(NOT DEFINED CMAKE_C_COMPILER)

if (NOT DEFINED CMAKE_CXX_COMPILER)
	find_program(CMAKE_CXX_COMPILER NAMES
		""clang++""
		""clang++-4.0""
		""clang++-6.0""
		""clang++-7""
		""clang++-9""
		""clang++-10""
)
endif(NOT DEFINED CMAKE_CXX_COMPILER)

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}"")
endif()

SET(CMAKE_SKIP_RPATH TRUE)

project(darling)

cmake_minimum_required(VERSION 3.10)
enable_language(ASM)

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")
include(InstallSymlink)
include(MacroEnsureOutOfSourceBuild)
include(dsym)
include(xcproj)

MACRO_ENSURE_OUT_OF_SOURCE_BUILD()

set(DARLING_TOP_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}"")
set(DARLING_NO_EXECUTABLES OFF)
set(CMAKE_C_IMPLICIT_LINK_LIBRARIES """")
set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES """")

if (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES ""i686|i386"")
	message(FATAL_ERROR ""This software can only be built on x86-64 systems"")
endif (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES ""i686|i386"")

SET(IGNORED_WARNINGS ""-Wno-nullability-completeness -Wno-deprecated-declarations"")

if (${CMAKE_C_COMPILER_ID} STREQUAL ""Clang"" AND NOT ${CMAKE_C_COMPILER_VERSION} VERSION_LESS ""3.9"")
	SET(IGNORED_WARNINGS ""${IGNORED_WARNINGS} -Wno-expansion-to-defined"")
endif (${CMAKE_C_COMPILER_ID} STREQUAL ""Clang"" AND NOT ${CMAKE_C_COMPILER_VERSION} VERSION_LESS ""3.9"")

SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${IGNORED_WARNINGS}"")
SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${IGNORED_WARNINGS}"")
SET(CMAKE_C_FLAGS_DEBUG ""-O0 -ggdb"")
SET(CMAKE_CXX_FLAGS_DEBUG ""-O0 -ggdb"")

if(CMAKE_POSITION_INDEPENDENT_CODE)
	SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fPIC"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fPIC"")
	SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pie"")
endif(CMAKE_POSITION_INDEPENDENT_CODE)

enable_language(ASM-ATT)

option(FULL_BUILD ""Include large items in the build"" ON)
option(TARGET_i386 ""Enable i386 slices"" ON)
option(TARGET_x86_64 ""Enable x86_64 slices"" ON)
option(DEBIAN_PACKAGING ""Packaging for Debian"" OFF)
option(ENABLE_TESTS ""Install in-prefix unit tests"" OFF)

FindDsymutil()
find_package(Setcap REQUIRED)

# Missing CMakeLists.txt must trigger an error
cmake_policy(SET CMP0014 NEW)

add_subdirectory(src)

install(DIRECTORY DESTINATION libexec/darling/private)
install(DIRECTORY DESTINATION libexec/darling/private/etc)
install(DIRECTORY DESTINATION libexec/darling/private/var)
install(DIRECTORY DESTINATION libexec/darling/private/tmp)
InstallSymlink(private/etc ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc)
InstallSymlink(private/var ${CMAKE_INSTALL_PREFIX}/libexec/darling/var)

install(FILES etc/resolv.conf
	DESTINATION libexec/darling/etc)
InstallSymlink(/Volumes/SystemRoot/etc/machine-id ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/machine-id)
InstallSymlink(/Volumes/SystemRoot/etc/nsswitch.conf ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/nsswitch.conf)

install(DIRECTORY DESTINATION libexec/darling/Volumes)
install(DIRECTORY DESTINATION libexec/darling/Volumes/SystemRoot)
InstallSymlink(/ ${CMAKE_INSTALL_PREFIX}/libexec/darling/Volumes/DarlingEmulatedDrive)

install(DIRECTORY DESTINATION libexec/darling/proc)

install(DIRECTORY DESTINATION libexec/darling/var/root)
install(DIRECTORY DESTINATION libexec/darling/var/run)
InstallSymlink(/dev/log ${CMAKE_INSTALL_PREFIX}/libexec/darling/var/run/syslog)

install(DIRECTORY DESTINATION libexec/darling/usr)
install(DIRECTORY DESTINATION libexec/darling/usr/local)
install(DIRECTORY DESTINATION libexec/darling/usr/local/share)

InstallSymlink(/Volumes/SystemRoot/dev ${CMAKE_INSTALL_PREFIX}/libexec/darling/dev)
InstallSymlink(private/tmp ${CMAKE_INSTALL_PREFIX}/libexec/darling/tmp)

InstallSymlink(/proc/self/mounts ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/mtab)
InstallSymlink(/Volumes/SystemRoot/etc/passwd ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/passwd)
InstallSymlink(/Volumes/SystemRoot/etc/group ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/group)
InstallSymlink(/Volumes/SystemRoot/etc/localtime ${CMAKE_INSTALL_PREFIX}/libexec/darling/etc/localtime)

InstallSymlink(/Volumes/SystemRoot/usr/share/zoneinfo ${CMAKE_INSTALL_PREFIX}/libexec/darling/usr/share/zoneinfo)

if(NOT DEBIAN_PACKAGING)
	install(CODE ""execute_process(COMMAND bash ${DARLING_TOP_DIRECTORY}/tools/shutdown-user.sh)"")
endif(NOT DEBIAN_PACKAGING)

add_custom_target(uninstall
	COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/tools/uninstall
	COMMENT ""Uninstall Darling and kernel module"")
",3.10,3.1
20292,doe300,VC4C,False,False,False,False,False,5,C,2020-05-11 14:33:05+00:00,2017-10-08 10:11:39+00:00,96,657,"cmake_minimum_required (VERSION 3.1)
include(${CMAKE_ROOT}/Modules/ExternalProject.cmake)
# XXX required as long as we need to retrieve the VC4C compiler output path for the install precompiled headers command
cmake_policy(SET CMP0026 OLD)

####
# General configuration
####
# Option to enable/disable test-program
option(BUILD_TESTING ""Build testing program"" ON)
# Option to enable/disable multi-threaded compilation
option(MULTI_THREADED ""Runs the optimization steps multi-threaded"" ON)
# Option whether to verify the output (using vc4asm)
option(VERIFY_OUTPUT ""uses the external library vc4asm to verify the output"" ON)
# Option to enable/disable cross compilation
option(CROSS_COMPILE ""Cross compile for Raspbian"" OFF)
# Option whether to include the SPIR-V front-end
option(SPIRV_FRONTEND ""Enables a second front-end for the SPIR-V intermediate language"" OFF)
# Option whether to include the LLVM library front-end. This requires the LLVM development-headers to be available for the (SPIRV-)LLVM used
option(LLVMLIB_FRONTEND ""Enables the front-end using the LLVM library to read LLVM modules"" ON)
# Option whether to enable code coverage analysis via gcov
option(ENABLE_COVERAGE ""Enables collection of code coverage via gcov"" OFF)
# Option whether to enable use of the CLang library (EXPERIMENTAL)
option(CLANG_LIBRARY ""Uses the libclang library for compilation, uses the clang executable otherwise"" OFF)
# Option whether to enable more compile-time checks
option(ADVANCED_CHECKS ""Enable advanced compile-time checks"" OFF)

# Path to the VC4CL standard library
# NOTE: Resolving ~ (for home directory) is currently not supported
if(NOT VC4CL_STDLIB_DIR)
	find_file(VC4CL_STDLIB_FOUND ""VC4CLStdLib/include/VC4CLStdLib.h"")
	if(VC4CL_STDLIB_FOUND)
		get_filename_component(VC4CL_STDLIB_DIR ${VC4CL_STDLIB_FOUND} DIRECTORY)
		message(STATUS ""VC4CL standard library headers found: ${VC4CL_STDLIB_DIR}"")
	elseif(EXISTS ""${CMAKE_SOURCE_DIR}/../VC4CLStdLib/include/VC4CLStdLib.h"")
		set(VC4CL_STDLIB_DIR ""${CMAKE_SOURCE_DIR}/../VC4CLStdLib/include/"")
		message(STATUS ""VC4CL standard library headers found: ${VC4CL_STDLIB_DIR}"")
	else()
		message(WARNING ""No development version of VC4CL standard-library headers found, will not automatically generate the precompiled files!"")
	endif()
endif()

if(CROSS_COMPILE)
	include(cmake/crosscompile.cmake)
	message(STATUS ""Cross compiling for Raspbian with compiler: ${CMAKE_CXX_COMPILER}"")
endif()

if(NOT BUILD_NUMBER)
	set(BUILD_NUMBER 9999)
endif()

project (VC4C VERSION 0.4.${BUILD_NUMBER})

# Set C++ standard to C++14 without any extensions (e.g. GNU)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")

# Set default build type to Debug
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE ""Debug"" CACHE STRING ""Choose the type of build."" FORCE)
endif()

if(""${CMAKE_BUILD_TYPE}"" STREQUAL ""Release"")
	# Only allow coverage for debug builds
	set(ENABLE_COVERAGE OFF)
else()
	set(BUILD_DEBUG ON)
endif()

# Set optimization and warning flags for the build types
include(cmake/flags.cmake)

if(MULTI_THREADED)
	message(STATUS ""Enabling multi-threaded optimizations"")
	find_package(Threads)
endif()

# clang-tidy
find_program(CLANG_TIDY NAMES clang-tidy clang-tidy-5.0 clang-tidy-6.0 clang-tidy-7 clang-tidy-8)
if(ADVANCED_CHECKS AND CLANG_TIDY)
    message(STATUS ""Enabling clang-tidy compile time checks: ${CLANG_TIDY}"")
    set(CMAKE_CXX_CLANG_TIDY ""${CLANG_TIDY}"")
endif()

####
# Dependencies
####

if((CMAKE_MAJOR_VERSION VERSION_GREATER 3) OR ((CMAKE_MAJOR_VERSION VERSION_EQUAL 3) AND (CMAKE_MINOR_VERSION VERSION_GREATER_EQUAL 14)))
	# CMake 3.14 introduces https://cmake.org/cmake/help/latest/module/FetchContent.html which allows us to run the configuration step
	# of the downloaded dependencies at CMake configuration step and therefore, we have the proper targets available.
	message(STATUS ""Using CMake 3.14+ FetchContent to include dependencies..."")
	set(DEPENDENCIES_USE_FETCH_CONTENT ON)
else()
	message(STATUS ""Using CMake <3.14 ExternalProject to include dependencies..."")
	set(DEPENDENCIES_USE_FETCH_CONTENT OFF)
endif()

if(BUILD_OFFLINE)
	# A result of != 0 is an error, so disable updating
	set_property(DIRECTORY ${VC4C_SOURCE_DIR} PROPERTY EP_UPDATE_DISCONNECTED 1)
	message(WARNING ""Building in off-line mode, some dependencies might not be up-to-date!"")
else()
	set_property(DIRECTORY ${VC4C_SOURCE_DIR} PROPERTY EP_UPDATE_DISCONNECTED 0)
endif()

####
# Determine Clang version and configure front-ends
###

# Prefer Khronos OpenCL to LLVM IR (to SPIR-V) compiler
if(SPIRV_FRONTEND)
  include(cmake/spirv.cmake)
endif()

# Fall back to ""standard"" CLang
include(cmake/clang.cmake)

# If enabled, check whether the LLVM library front-end can be built
if(LLVMLIB_FRONTEND)
	include(cmake/libllvm.cmake)
endif()

if(NOT ((SPIRV_LLVM_SPIR_FOUND AND SPIRV_FRONTEND) OR (LLVMLIB_FRONTEND AND LLVM_LIBS_PATH)))
	message(WARNING "" Neither SPIR-V nor LLVM library front-end are configured!"")
endif()

if(NOT SPIRV_CLANG_FOUND AND NOT CLANG_FOUND)
	message(FATAL_ERROR ""No supported OpenCL compiler found!"")
endif()

if(VERIFY_OUTPUT)
	include(cmake/vc4asm.cmake)
endif()
include(cmake/cpplog.cmake)
# Variant backport for C++ < 17
include(cmake/variant.cmake)

####
# Additional configuration
####
include(cmake/sanitizers.cmake)

####
# Main files
####
#build all from ./src into ./build
add_subdirectory(src)
add_subdirectory(tools)

if (BUILD_TESTING)
	enable_testing()
	include(cmake/cpptest-lite.cmake)
    add_subdirectory(test)
endif (BUILD_TESTING)

include(cmake/packaging.cmake)
",3.1,3.1
20371,beached,header_libraries,False,False,False,False,False,1,C++,2020-05-04 22:48:40+00:00,2015-02-08 23:05:51+00:00,9,2432,"cmake_minimum_required( VERSION 3.10 )

project( header_libraries )

find_package( Threads )

include( ""${CMAKE_SOURCE_DIR}/dependent_projects/CMakeListsCompiler.txt"" )

set( HEADER_FOLDER ""include"" )
set( TEST_FOLDER ""tests"" )

option( GLEAN_INSTALL_ROOT """" )
if( EXISTS ""${GLEAN_INSTALL_ROOT}"" ) 
	message( ""using glean dependencies"" )
	message( ""installing to ${GLEAN_INSTALL_ROOT}"" )

	include_directories( SYSTEM ""${GLEAN_INSTALL_ROOT}/include"" )
	link_directories( ""${GLEAN_INSTALL_ROOT}/lib"" )
endif( )

include_directories( ${HEADER_FOLDER} )

# These tests crash MSVC
set( NOTWIN_TESTED_HEADERS_PREFIXES_NB
 	daw_bounded_graph
	daw_bounded_hash_map
	daw_bounded_hash_set
	daw_parser_helper
	daw_piecewise_factory
)

set( TESTED_HEADERS_PREFIXES_NB
	cpp_17
	daw_algorithm
	daw_array
	daw_benchmark
	daw_bit
	daw_bit_queues
	daw_bounded_array
	daw_bounded_string
	daw_bounded_vector
	daw_carray
	daw_checked_expected
	daw_clumpy_sparsy
	daw_container_algorithm
	daw_copiable_unique_ptr
	daw_cxmath
	daw_endian
	daw_exception
	daw_expected
	daw_fixed_lookup
	daw_fnv1a_hash
	daw_function
	daw_function_table
	daw_generic_hash
	daw_graph
	daw_graph_algorithm
	daw_hash_set
	daw_heap_array
	daw_heap_value
	daw_keep_n
	daw_math
	daw_memory_mapped_file
	daw_metro_hash
	daw_natural
	daw_overload
	daw_optional
	daw_optional_poly
	daw_ordered_map
	daw_parse_to
	daw_parser_helper_sv
	daw_poly_value
	daw_poly_var
	daw_poly_vector
	daw_random
	daw_read_file
	daw_read_only
	daw_safe_string
	daw_scope_guard
	daw_sip_hash
	daw_size_literals
	daw_sort_n
	daw_stack_function
#	daw_static_bitset
	daw_string
	daw_string_split_range
	daw_string_view
	daw_span
	daw_traits
	daw_tuple_helper
	daw_uninitialized_storage
	daw_union_pair
	daw_unique_array
	daw_utility
	daw_validated
	daw_value_ptr
	daw_variant_cast
	daw_view
	daw_virtual_base
	daw_visit
	not_null
)

set( UNTESTED_HEADER_IMPL
	daw_int_to_iterator
	daw_math_impl
	daw_string_impl
	daw_traits_concepts
	daw_traits_impl
)

set( TESTED_PARALLEL_HEADERS_PREFIXES_NB
	daw_copy_mutex
	daw_counter
	daw_latch
	daw_locked_value
	daw_scoped_multilock
	daw_semaphore
)

set( DEV_PARALLEL_HEADERS_PREFIXES_NB
	daw_observable_ptr
	daw_observable_ptr_pair
	daw_spin_lock
)

set( TESTED_ITERATOR_HEADERS_PREFIXES_NB
	daw_argument_iterator
	daw_back_inserter
	daw_checked_iterator_proxy
	daw_circular_iterator
	daw_counting_iterators
	daw_indexed_iterator
	daw_inserter
	daw_end_inserter
	daw_integer_iterator
	daw_output_stream_iterator
	daw_repeat_n_char_iterator
	daw_reverse_iterator
	daw_sorted_insert_iterator
#	daw_split_iterator
#	daw_zipiter
	InputIterator
)

set( DEV_HEADER_FILES_NB
	daw_cstring
	daw_hash_table2
	daw_range
	daw_min_perfect_hash
	daw_stack_quick_sort
	daw_range_algorithm
	daw_range_collection
)

#set( DEV_ITERATOR_HEADER_FILES
#)

set( UNTESTED_HEADER_FILES
	daw_bit_stream.h
	daw_cfile.h
	daw_common_mixins.h
	daw_do_n.h
	daw_do_not_optimize.h
	daw_enable_if.h
	daw_exchange.h
	daw_function.h
	daw_hash_table.h
	daw_move.h
	daw_newhelper.h
	daw_operators.h
	daw_parser_addons.h
	daw_range_common.h
	daw_range_operators.h
	daw_range_reference.h
	daw_range_type.h
	daw_reference.h
	daw_string_fmt.h
	daw_string_view_fwd.h
	daw_swap.h
	daw_zipcontainer.h
)

set( UNTESTED_ITERATOR_HEADER_FILES
	daw_iterator.h
	daw_function_iterator.h
	daw_random_iterator.h
)
set( UNTESTED_PARALLEL_HEADER_FILES
	daw_atomic_unique_ptr.h
	concurrent_queue.h
	daw_condition_variable.h
	daw_locked_stack.h
	daw_shared_mutex.h
	daw_unique_mutex.h
)

enable_testing( )

#set( CMAKE_CTEST_COMMAND ctest -V )
add_custom_target( check COMMAND ${CMAKE_CTEST_COMMAND} )
add_custom_target( full )

foreach( CUR_PREFIX ${NOTWIN_TESTED_HEADERS_PREFIXES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/${CUR_PREFIX}.h"" DESTINATION include/daw )
	if( MSVC )
		message( ""Excluding ${CUR_PREFIX} from testing"" )
	else( ) 
		add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/${CUR_PREFIX}.h ${TEST_FOLDER}/${CUR_PREFIX}_test.cpp )
		add_test( ${CUR_PREFIX}_test ${CUR_PREFIX}_test_bin )
		add_dependencies( full ${CUR_PREFIX}_test_bin )
	endif( )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${TESTED_HEADERS_PREFIXES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/${CUR_PREFIX}.h"" DESTINATION include/daw )
	add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/${CUR_PREFIX}.h ${TEST_FOLDER}/${CUR_PREFIX}_test.cpp )
	add_test( ${CUR_PREFIX}_test ${CUR_PREFIX}_test_bin )
	add_dependencies( full ${CUR_PREFIX}_test_bin )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${TESTED_ITERATOR_HEADERS_PREFIXES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/iterator/${CUR_PREFIX}.h"" DESTINATION include/daw/iterator )
	add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/iterator/${CUR_PREFIX}.h ${TEST_FOLDER}/iterator/${CUR_PREFIX}_test.cpp )
	add_test( ${CUR_PREFIX}_test ${CUR_PREFIX}_test_bin )
	add_dependencies( full ${CUR_PREFIX}_test_bin )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${TESTED_PARALLEL_HEADERS_PREFIXES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/parallel/${CUR_PREFIX}.h"" DESTINATION include/daw/parallel )
	add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/parallel/${CUR_PREFIX}.h ${TEST_FOLDER}/parallel/${CUR_PREFIX}_test.cpp )
	target_link_libraries( ${CUR_PREFIX}_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT} )
	add_test( ${CUR_PREFIX}_test ${CUR_PREFIX}_test_bin )
	add_dependencies( full ${CUR_PREFIX}_test_bin )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${DEV_PARALLEL_HEADERS_PREFIXES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/parallel/${CUR_PREFIX}.h"" DESTINATION include/daw/parallel )
	add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/parallel/${CUR_PREFIX}.h ${TEST_FOLDER}/parallel/${CUR_PREFIX}_test.cpp )
	target_link_libraries( ${CUR_PREFIX}_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT} )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${DEV_HEADER_FILES_NB} )
	install( FILES ""${HEADER_FOLDER}/daw/${CUR_PREFIX}.h"" DESTINATION include/daw )
	add_executable( ${CUR_PREFIX}_test_bin EXCLUDE_FROM_ALL ${HEADER_FOLDER}/daw/${CUR_PREFIX}.h ${TEST_FOLDER}/${CUR_PREFIX}_test.cpp )
	target_link_libraries( ${CUR_PREFIX}_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT} )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${UNTESTED_HEADER_IMPL} )
	install( FILES ""${HEADER_FOLDER}/daw/impl/${CUR_PREFIX}.h"" DESTINATION include/daw/impl )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${UNTESTED_HEADER_FILES} )
	install( FILES ""${HEADER_FOLDER}/daw/${CUR_PREFIX}"" DESTINATION include/daw )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${UNTESTED_ITERATOR_HEADER_FILES} )
	install( FILES ""${HEADER_FOLDER}/daw/iterator/${CUR_PREFIX}"" DESTINATION include/daw/iterator )
endforeach( CUR_PREFIX )

foreach( CUR_PREFIX ${UNTESTED_PARALLEL_HEADER_FILES} )
	install( FILES ""${HEADER_FOLDER}/daw/parallel/${CUR_PREFIX}"" DESTINATION include/daw/parallel )
endforeach( CUR_PREFIX )

",3.10,3.1
20381,etola,kortex,False,False,False,False,False,2,C++,2020-05-01 17:08:36+00:00,2013-08-05 08:09:08+00:00,0,375,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

PROJECT(kortex VERSION 1.2.3 )

# # fix CMake IntDir variable
# if(MSVC AND ""${MSVC_VERSION}"" STRGREATER ""1500"")
	# SET(CMAKE_CFG_INTDIR ""$(Platform)/$(Configuration)"")
# endif()
# # SET(COTIRE_INTDIR ""cotire"")

# # Define helper functions and macros.
# # cmake_policy(SET CMP0011 OLD)
# INCLUDE(cmake/utils.cmake)
# if(ENABLE_PRECOMPILED_HEADERS)
	# INCLUDE(cmake/cotire.cmake)
# endif()

# # Init session with macros defined in Utils.cmake
# GetOperatingSystemArchitectureBitness(SYSTEM)
# ComposePackageLibSuffix()
# ConfigCompilerAndLinker()
# ConfigLibrary()

set(CMAKE_CXX_STANDARD 17)
if(MSVC)
  set(CMAKE_INSTALL_PREFIX     ""C:/usr"")
  set(CMAKE_INSTALL_INCLUDEDIR ""include/"" )
  set(CMAKE_INSTALL_LIBDIR     ""lib/"" )
  set(CMAKE_INSTALL_BINDIR     ""bin/"" )
else()
  include(GNUInstallDirs)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-unused-variable -Wno-unused-parameter"")
  set(EXTERNAL_LIBS ""-lstdc++fs"")
endif()

# List configuration options
SET(PROJECT_WITH_SSE ON CACHE BOOL ""Enable SSE optimizations"")
SET(PROJECT_WITH_PNG ON CACHE BOOL ""Enable PNG file support"")
SET(PROJECT_WITH_JPEG ON CACHE BOOL ""Enable JPEG file support"")
SET(PROJECT_WITH_BLAS ON CACHE BOOL ""Enable BLAS support"")
SET(PROJECT_WITH_LAPACK ON CACHE BOOL ""Enable LAPACK support"")
SET(PROJECT_WITH_OPENMP ON CACHE BOOL ""Enable OpenMP library"")

SET(PROJECT_CONFIG_INCLUDE_DIR ""${CMAKE_BINARY_DIR}/"" CACHE PATH ""Where to create the build/platform specific header"")

INCLUDE_DIRECTORIES(""${PROJECT_SOURCE_DIR}"")

# Find required packages
# experimental/filesystem : remove_all 

if(PROJECT_WITH_OPENMP)
  find_package(OpenMP)
  if(OPENMP_FOUND)
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    SET(WITH_OPENMP TRUE)
  else()
    message(""-- Can't find OpenMP. Continuing without it."")
    set(PROJECT_WITH_OPENMP FALSE)
  endif()
endif()


if(PROJECT_WITH_PNG)
  find_package(PNG REQUIRED)
  if(PNG_FOUND)
    message(""-- PNG found"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${PNG_CXX_FLAGS}"")
    include_directories(${PNG_INCLUDE_DIRS})
    link_directories(${PNG_LIBRARY_DIRS})
    set(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${PNG_LIBRARIES})
    set(WITH_PNG TRUE)
  else()
    message(""-- Can't find libpng. Continuing without it."")
    set(PROJECT_WITH_PNG FALSE)
  endif()
endif()

if(PROJECT_WITH_JPEG)
  find_package(JPEG REQUIRED)
  if(JPEG_FOUND)
    message(""-- JPEG found"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${JPEG_CXX_FLAGS}"")
    include_directories(${JPEG_INCLUDE_DIR})
    link_directories(${JPEG_LIBRARY_DIRS})
    set(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${JPEG_LIBRARIES})
    set(WITH_JPEG TRUE)
  else()
    message(""-- Can't find libjpeg. Continuing without it."")
    set(PROJECT_WITH_JPEG FALSE)
  endif()
endif()

if(PROJECT_WITH_BLAS)
  find_package(BLAS REQUIRED)
  if(BLAS_FOUND)
    message(""-- BLAS found"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${BLAS_CXX_FLAGS}"")
    include_directories(${BLAS_INCLUDE_DIRS})
    link_directories(${BLAS_LIBRARY_DIRS})
    set(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${BLAS_LIBRARIES})
    set(WITH_BLAS TRUE)
  else()
    message(""-- Can't find blas. Continuing without it."")
    set(PROJECT_WITH_BLAS FALSE)
  endif()
endif()

if(PROJECT_WITH_LAPACK)
  find_package(LAPACK REQUIRED)
  if(LAPACK_FOUND)
    message(""-- LAPACK found"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${LAPACK_CXX_FLAGS}"")
    include_directories(${LAPACK_INCLUDE_DIRS})
    link_directories(${LAPACK_LIBRARY_DIRS})
    set(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${LAPACK_LIBRARIES})
    set(WITH_LAPACK TRUE)
  else()
    message(""-- Can't find blas. Continuing without it."")
    set(PROJECT_WITH_LAPACK FALSE)
  endif()
endif()

# Set defines
SET(PROJECT_DEFINITIONS """")
if(PROJECT_WITH_SSE)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_SSE)
	SET(WITH_SSE TRUE)
endif()
if(PROJECT_WITH_PNG)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_LIBPNG)
	SET(WITH_LIBPNG TRUE)
endif()
if(PROJECT_WITH_JPEG)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_LIBJPEG)
	SET(WITH_LIBJPEG TRUE)
endif()
if(PROJECT_WITH_LAPACK)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_LAPACK)
	SET(WITH_LAPACK TRUE)
endif()
if(PROJECT_WITH_BLAS)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_BLAS)
	SET(WITH_BLAS TRUE)
endif()
if(PROJECT_WITH_OPENMP)
	LIST(APPEND PROJECT_DEFINITIONS -DWITH_OPENMP)
	SET(WITH_OPENMP TRUE)
endif()
add_definitions(${PROJECT_DEFINITIONS})



# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE ${PROJECT_NAME})

include(cmake/sources.cmake)

add_library( ${PROJECT_NAME} STATIC ${PROJECT_SOURCES})

set_target_properties( ${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY lib)

# causes issues in windows
# target_link_libraries( ${PROJECT_NAME} ""${EXTERNAL_LIBS}"")
target_include_directories(
    ${PROJECT_NAME} PUBLIC
    ""$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>""
    ""$<BUILD_INTERFACE:${generated_headers}>""
)

configure_file(${CMAKE_SOURCE_DIR}/cmake/${PROJECT_NAME}.pc.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)
install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION lib/pkgconfig)

set(config_install_dir ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"")
set(generated_dir ""${CMAKE_CURRENT_BINARY_DIR}/generated"")

# Configuration
set(version_config ""${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake"")
set(project_config ""${generated_dir}/${PROJECT_NAME}Config.cmake"")
set(TARGETS_EXPORT_NAME ""${PROJECT_NAME}Targets"")
set(namespace ""${PROJECT_NAME}::"")

# Include module with fuction 'write_basic_package_version_file'
include(CMakePackageConfigHelpers)

# Configure '<PROJECT-NAME>ConfigVersion.cmake'
write_basic_package_version_file(
    ""${version_config}"" COMPATIBILITY SameMajorVersion
)

# Configure '<PROJECT-NAME>Config.cmake'
set(CONF_INCLUDE_DIRS ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}"")
set(CONF_LIB_DIR ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set(CONF_EXTERNAL_LIBS ""${EXTERNAL_LIBS}"" )
set(CONF_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"" )
get_directory_property( CONF_COMP_DEFINITIONS DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )

configure_package_config_file(
    ""cmake/config.cmake.in""
    ""${project_config}""
    INSTALL_DESTINATION ""${config_install_dir}""
)

# Targets:
install(
    TARGETS ${PROJECT_NAME}
    EXPORT ""${TARGETS_EXPORT_NAME}""
    LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    ARCHIVE DESTINATION ""${CMAKE_INSTALL_LIBDIR}""
    RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    INCLUDES DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""
)

# Headers:
install(
    DIRECTORY ""include/kortex""
    DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""
)

# Config
install(
    FILES ""${project_config}"" ""${version_config}""
    DESTINATION ""${config_install_dir}""
)

# Config
install(
    EXPORT ""${TARGETS_EXPORT_NAME}""
    NAMESPACE ""${namespace}""
    DESTINATION ""${config_install_dir}""
)


# uninstall target
configure_file(
  ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
  IMMEDIATE @ONLY)

add_custom_target(uninstall
  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
",3.1.0,3.1
20456,morozovvl,qbalance,False,False,False,False,False,2,PLpgSQL,2020-05-12 15:16:18+00:00,2015-04-09 14:17:55+00:00,6,390,"cmake_minimum_required(VERSION 3.10)
set(CMAKE_BUILD_TYPE ""Release"")

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

file(READ ""src/qbalance/version.h"" ver)
string(REPLACE ""#define BUILD_NUMBER "" """" ver ${ver})
set(VERSION ver)
set(CPACK_PACKAGE_VERSION ${VERSION})

set(CPACK_PACKAGE_RELEASE 1)

set (PROJECT0 qbalance)
set (PROJECT1 qb_main)

SET (CMAKE_CXX_FLAGS ""-ludev"" )

find_package (Qt4 REQUIRED)
include(${QT_USE_FILE})

add_subdirectory(src/qbalance/bankterminal)
add_subdirectory(src/qbalance/barcodereader)
add_subdirectory(src/qbalance/cardcodereader)
add_subdirectory(src/qbalance/driverfr)
add_subdirectory(src/qbalance/emailclient)
add_subdirectory(src/qbalance)

set(CMAKE_AUTOMOC OFF)
add_subdirectory(src/qbalance/plugins)

#set(CPACK_BINARY_RPM ON)
#set(CPACK_RPM_COMPONENT_INSTALL ON)
set(CPACK_GENERATOR ""RPM"")
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""amd64"")
set(CPACK_PACKAGE_NAME ${PROJECT0})
set(CPACK_PACKAGE_CONTACT ""NoName"")
set(CPACK_PACKAGE_VENDOR ""Some Vendor"")
#set(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
set(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}"")

#install(TARGETS ${PROJECT0} ${PROJECT1} DESTINATION applications/${PROJECT0})
#install(FILES qt.conf resources.qrc DESTINATION applications/${PROJECT0})
#install(DIRECTORY plugins DESTINATION applications/${PROJECT0} FILES_MATCHING PATTERN ""*.so*"")
#install(DIRECTORY resources DESTINATION applications/${PROJECT0} FILES_MATCHING PATTERN ""*.*"")

include(CPack)


",3.10,3.1
20532,bangerth,mcmc,False,False,False,False,False,3,C++,2020-05-13 20:21:26+00:00,2014-11-24 17:51:17+00:00,1,215,"# ---------------------------------------------------------------------
#
# Copyright (C) 2019 by the SampleFlow authors.
#
# This file is part of the SampleFlow library.
#
# The deal.II library is free software; you can use it, redistribute
# it, and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# The full text of the license can be found in the file LICENSE.md at
# the top level directory of deal.II.
#
# ---------------------------------------------------------------------


CMAKE_MINIMUM_REQUIRED (VERSION 3.1)
PROJECT (SampleFlow CXX)

#########################################
### Set up compiler flags and input paths

# Compile everything with C++11 and with debug flags
SET (CMAKE_CXX_STANDARD 11)
SET (CMAKE_CXX_STANDARD_REQUIRED ON)
SET (CMAKE_CXX_EXTENSIONS OFF)
ADD_DEFINITIONS(""-ggdb"")

# Source files need to know where headers are:
INCLUDE_DIRECTORIES(include ${CMAKE_BINARY_DIR}/include)

# Set paths correctly to take BOOST from wherever it is
# installed on the current system
FIND_PACKAGE(Boost)
INCLUDE(CheckIncludeFileCXX)
CHECK_INCLUDE_FILE_CXX(""boost/signals2.hpp"" SF_HAVE_SIGNALS2)
IF (NOT SF_HAVE_SIGNALS2)
  MESSAGE(FATAL_ERROR ""Could not find boost/signals2.hpp"")
ENDIF()
CHECK_INCLUDE_FILE_CXX(""boost/numeric/ublas/matrix.hpp"" SF_HAVE_MATRIX)
IF (NOT SF_HAVE_MATRIX)
  MESSAGE(FATAL_ERROR ""Could not find boost/numeric/ublas/matrix.hpp"")
ENDIF()


#########################################
### Describe what is currently the only executable
ADD_EXECUTABLE (mcmc_test mcmc_test.cc)


#########################################
### Provide ""indent"" target for indenting all headers and source files
ADD_CUSTOM_TARGET(indent
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  COMMAND ./doc/indent
  COMMENT ""Indenting all SampleFlow header and source files...""
  )



#########################################
### Next, set up the testsuite

ENABLE_TESTING()
ADD_SUBDIRECTORY(tests)
",3.1,3.1
20693,Huessenbergnetz,Skaffari,False,False,False,False,False,1,C++,2020-05-14 12:36:06+00:00,2017-04-13 11:36:35+00:00,5,814,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
cmake_policy(SET CMP0048 NEW)

project(skaffari VERSION 1.0.0)

find_package(Qt5 5.6.0 REQUIRED COMPONENTS Core Network Sql Xml)
find_package(Cutelyst2Qt5 2.10.0 REQUIRED)
find_package(Cutelee5 5.2.0 REQUIRED)
find_package(PkgConfig REQUIRED)

# Auto generate moc files
set(CMAKE_AUTOMOC ON)

# As moc files are generated in the binary dir, tell CMake
# to always look for includes there:
set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX ""/usr/local"" CACHE PATH ""Skaffari default install prefix"" FORCE)
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

set(CMAKE_INSTALL_BINDIR ""${CMAKE_INSTALL_PREFIX}/bin"" CACHE PATH ""Directory to install skaffarictl"")
set(CMAKE_INSTALL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share"" CACHE PATH ""Data install directory"")
set(CMAKE_INSTALL_LIBDIR ""${CMAKE_INSTALL_PREFIX}/lib"" CACHE PATH ""Library install directory"")
set(SKAFFARI_APP_FILE ""${CMAKE_INSTALL_LIBDIR}/cutelyst${Cutelyst2Qt5_VERSION_MAJOR}-apps/libskaffari.so"")
set(APPDIR ""${CMAKE_INSTALL_DATADIR}/skaffari"")
set(CMAKE_INSTALL_LOCALEDIR ""${APPDIR}/l10n"" CACHE PATH ""Directory to install core translations"")
set(TEMPLATES_INSTALL_DIR ""${APPDIR}/templates"" CACHE PATH ""Directory to install templates"")
set(SKAFFARI_STATIC_INSTALL_DIR ""${APPDIR}/static"" CACHE PATH ""Directory to install general static template files"")
set(CMAKE_INSTALL_SYSCONFDIR ""/etc"" CACHE PATH ""Directory to install configuration files"")
set(SKAFFARI_INI_FILE ""${CMAKE_INSTALL_SYSCONFDIR}/skaffari.ini"")
set(SQL_INSTALL_DIR ""${APPDIR}/sql"" CACHE PATH ""Directory to install SQL files"")
set(CMAKE_INSTALL_DOCDIR ""${CMAKE_INSTALL_DATADIR}/doc/skaffari"" CACHE PATH ""Directory to install documentation"")
set(CMAKE_INSTALL_MANDIR ""${CMAKE_INSTALL_DATADIR}/man"" CACHE PATH ""Directory to install man pages"")
set(SKAFFARI_RUNTIME_DIR ""/run/skaffari"" CACHE PATH ""Directory for runtime files (pid and socket)"")
set(SKAFFARI_SOCKET_FILE ""${SKAFFARI_RUNTIME_DIR}/skaffari.sock"")
set(SKAFFARI_PID_FILE ""${SKAFFARI_RUNTIME_DIR}/skaffari.pid"")
set(SKAFFARI_USER ""skaffari"" CACHE STRING ""System user for Skaffari"")
set(SKAFFARI_GROUP ""skaffari"" CACHE STRING ""System group for Skaffari"")
set(SKAFFARI_SOCKET_USER ""${SKAFFARI_USER}"" CACHE STRING ""User for the Skaffari FastCGI socket file"")
set(SKAFFARI_SOCKET_GROUP ""www"" CACHE STRING ""Group for the Skaffari FastCGI Socket file"")
set(SKAFFARI_CMD_PATH ""${CMAKE_INSTALL_BINDIR}/skaffaricmd"")
set(CUTELYST_WSGI_EXECUTABLE ""${CMAKE_INSTALL_BINDIR}/cutelyst-wsgi2"" CACHE FILEPATH ""Path to the cutelyst-wsgi2 executable"")
set(SYSTEMD_UNIT_DIR ""${CMAKE_INSTALL_PREFIX}/lib/systemd/system"" CACHE PATH ""Systemd unit directory"")
set(APACHE_VHOSTS_DIR ""${CMAKE_INSTALL_SYSCONFDIR}/apache2/vhosts.d"" CACHE PATH ""Apache virtual hosts config directory"")

option(INSTALL_SUPPLEMENTARY_FILES ""Install systemd service and timer files as well as apache example config"" OFF)

option(ENABLE_WKD ""Enable support for Web Key Directory"" OFF)
if (ENABLE_WKD)
    find_package(Qca-qt5 CONFIG REQUIRED)
endif (ENABLE_WKD)

option(BUILD_TESTS ""Build the Skaffari tests"" OFF)
if (BUILD_TESTS)
    enable_testing()
endif (BUILD_TESTS)

# set default configuration values
set(DEFVAL_ACC_PWMETHOD 1 CACHE INTERNAL ""Default accounts password method"")
set(DEFVAL_ACC_PWALGORITHM 0 CACHE INTERNAL ""Default accounts password algorithm"")
set(DEFVAL_ACC_PWROUNDS 32000 CACHE INTERNAL ""Default accounts password iteration count"")
set(DEFVAL_ACC_PWMINLENGTH 8 CACHE INTERNAL ""Default accounts password minimum length"")
set(DEFVAL_ACC_PWTHRESHOLD 30 CACHE INTERNAL ""Default accounts password quality threshold"")
set(DEFVAL_ADM_PWALGORITHM 4 CACHE INTERNAL ""Default admin password algorithm"")
set(DEFVAL_ADM_PWROUNDS 32000 CACHE INTERNAL ""Default admin password iteration count"")
set(DEFVAL_ADM_PWMINLENGTH 8 CACHE INTERNAL ""Default admin password minimum length"")
set(DEFVAL_ADM_PWTHRESHOLD 50 CACHE INTERNAL ""Default admin password quality threshold"")
set(DEFVAL_DEF_DOMAINQUOTA 0 CACHE INTERNAL ""Default domain quota for new domains in KiB"")
set(DEFVAL_DEF_LANGUAGE ""en_US"" CACHE INTERNAL ""Default language"")
set(DEFVAL_DEF_MAXACCOUNTS 1000 CACHE INTERNAL ""Default maximum accounts for new domains"")
set(DEFVAL_DEF_QUOTA 102400 CACHE INTERNAL ""Default quota for new accounts in KiB"")
set(DEFVAL_DEF_TIMEZONE ""UTC"" CACHE INTERNAL ""Default timezone"")
set(DEFVAL_DEF_WARNLEVEL 90 CACHE INTERNAL ""Default warn level for domain quota in percent"")
set(DEFVAL_DEF_MAXDISPLAY 25 CACHE INTERNAL ""Default value for displaying list entries"")
set(DEFVAL_IMAP_PROTOCOL 2 CACHE INTERNAL ""Default protocol for the IMAP connection"")
set(DEFVAL_IMAP_ENCRYPTION 1 CACHE INTERNAL ""Encryption layer for the IMAP connection"")
set(DEFVAL_IMAP_CREATEMAILBOX 3 CACHE INTERNAL ""Strategy to create new mailboxes on the IMAP server"")
set(DEFVAL_IMAP_UNIXHIERARCHYSEP false CACHE INTERNAL ""Default value for unix hierarchy separator"")
set(DEFVAL_IMAP_DOMAINASPREFIX false CACHE INTERNAL ""Default value for domain as prefix"")
set(DEFVAL_IMAP_FQUN false CACHE INTERNAL ""Default value for fqun"")
set(DEFVAL_IMAP_AUTHMECH 0 CACHE INTERNAL ""Default value for authmech"")
set(DEFVAL_TMPL_ASYNCACCOUNTLIST false CACHE INTERNAL ""Default value for async account list"")

configure_file(common/config.h.in ${CMAKE_BINARY_DIR}/common/config.h)

find_program(LRELEASE_CMD_PATH NAMES lrelease-qt5 lrelease)
set(LRELEASE_CMD ${LRELEASE_CMD_PATH})
if(LRELEASE_CMD)
    message(STATUS ""Found lrelease at ${LRELEASE_CMD}"")
    message(STATUS ""Translations are enabled"")

    set(LANGS de)

else(LRELEASE_CMD)
    message(WARNING ""lrelease executable cannot be found"")
    message(WARNING ""Translations are disabled"")
endif(LRELEASE_CMD)

install(FILES contribute.json DESTINATION ${APPDIR}/static)

add_subdirectory(src)
add_subdirectory(sql)
add_subdirectory(cmd)
add_subdirectory(templates)
add_subdirectory(doc)
add_subdirectory(l10n)
add_subdirectory(supplementary)

if (BUILD_TESTS)
    add_subdirectory(tests)
endif (BUILD_TESTS)
",3.1.0,3.1
20735,lxde,lxqt-sudo,False,False,False,False,False,79,C++,2020-04-24 16:32:13+00:00,2015-05-22 07:28:24+00:00,20,298,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-sudo)

include(GNUInstallDirs)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

# Minimum Versions
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

# Patch version 0

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

set ( LINK_LXSU ""lxsu"")
set ( LINK_LXSUDO ""lxsudo"")

set ( HDRS
    passworddialog.h
)

set ( SRCS
    passworddialog.cpp
    sudo.cpp
    main.cpp
)

set ( MOCS
    passworddialog.h
)

set( UIS
    passworddialog.ui
)

# Translations **********************************
include(LXQtTranslate)

lxqt_translate_ts(QM_FILES
    UPDATE_TRANSLATIONS
        ${UPDATE_TRANSLATIONS}
    SOURCES
        ${HDRS}
        ${SRCS}
        ${UIS}
    INSTALL_DIR
        ""${LXQT_TRANSLATIONS_DIR}/${PROJECT_NAME}""
)

lxqt_app_translation_loader(SRCS ${PROJECT_NAME})
#************************************************

add_executable(lxqt-sudo
    ${SRCS}
    ${DESKTOP_FILES}
    ${QM_FILES}
)

target_link_libraries(lxqt-sudo
    Qt5::Widgets
    util
    lxqt
    -pthread
)

target_compile_definitions(lxqt-sudo
    PRIVATE ""LXQTSUDO_SUDO=\""sudo\""""
    PRIVATE ""LXQTSUDO_SU=\""su\""""
    PRIVATE ""LXQTSUDO=\""lxqt-sudo\""""
    PRIVATE ""LXQTSUDO_LXSU=\""${LINK_LXSU}\""""
    PRIVATE ""LXQTSUDO_LXSUDO=\""${LINK_LXSUDO}\""""
    PRIVATE ""LXQT_VERSION=\""${LXQT_VERSION}\""""
)

add_custom_command(TARGET lxqt-sudo POST_BUILD
    COMMAND ln -f -s lxqt-sudo ""${LINK_LXSU}""
    WORKING_DIRECTORY .
    COMMENT ""Creating ${LINK_LXSU} symlink""
)

add_custom_command(TARGET lxqt-sudo POST_BUILD
    COMMAND ln -f -s lxqt-sudo ""${LINK_LXSUDO}""
    WORKING_DIRECTORY .
    COMMENT ""Creating ${LINK_LXSUDO} symlink""
)

install(TARGETS
    lxqt-sudo
    RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    COMPONENT Runtime
)
install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/${LINK_LXSU}"" ""${CMAKE_CURRENT_BINARY_DIR}/${LINK_LXSUDO}""
    DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    COMPONENT Runtime
)
install(FILES
    ${DESKTOP_FILES}
    DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/applications""
    COMPONENT Runtime
)
install(FILES
    man/lxqt-sudo.1 ""man/${LINK_LXSU}.1"" ""man/${LINK_LXSUDO}.1""
    DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
    COMPONENT Runtime
)
",3.1.0,3.1
20862,cse-sim,cse,False,False,False,False,False,6,C++,2020-05-11 15:45:00+00:00,2016-09-15 14:28:53+00:00,6,918,"project(CSE)

cmake_minimum_required(VERSION 3.10.0)

set (CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")

# Only create Release and Debug configuration types
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release"" CACHE STRING """" FORCE)

include(BuildFlags)
#include(cotire)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

find_package(Git QUIET)

add_subdirectory(vendor)
add_subdirectory(src)

enable_testing()

add_subdirectory(test)
",3.10.0,3.1
20908,real-logic,benchmarks,False,False,False,False,False,6,Java,2020-05-16 12:33:55+00:00,2015-08-08 14:46:19+00:00,54,375,"#
# Copyright 2015-2020 Real Logic Limited.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)
cmake_policy(VERSION 3.1.3)

if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    message(FATAL_ERROR ""In-source builds not allowed. Please make a new directory (called a build directory)""
        ""and run CMake from there. You may need to remove CMakeCache.txt."")
endif ()

include(ExternalProject)

project(""benchmarks"")

# default build type is Release
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build"" FORCE)
endif (NOT CMAKE_BUILD_TYPE)

set(AERON_THIRDPARTY_BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/thirdparty"")

##########################################################
# Google benchmark

ExternalProject_Add(
    google_benchmark
    URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/benchmark-1.5.zip
    URL_MD5 eec90889668c3b9908fe4110a0940eed
    CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};
    -DBENCHMARK_ENABLE_TESTING=OFF;-DBENCHMARK_ENABLE_GTEST_TESTS=OFF;-DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF;
    -DCMAKE_BUILD_TYPE=Release
    PREFIX ""${AERON_THIRDPARTY_BINARY_DIR}/google_benchmark""
    BUILD_BYPRODUCTS ""${AERON_THIRDPARTY_BINARY_DIR}/google_benchmark/src/google_benchmark-build/src/${CMAKE_STATIC_LIBRARY_PREFIX}benchmark${CMAKE_STATIC_LIBRARY_SUFFIX}""
    INSTALL_COMMAND """"
)

ExternalProject_Get_Property(google_benchmark source_dir)
set(GOOGLE_BENCHMARK_SOURCE_DIR ${source_dir})
ExternalProject_Get_Property(google_benchmark binary_dir)
set(GOOGLE_BENCHMARK_BINARY_DIR ${binary_dir})

set(
    GOOGLE_BENCHMARK_LIBS
    ${GOOGLE_BENCHMARK_BINARY_DIR}/src/${CMAKE_STATIC_LIBRARY_PREFIX}benchmark${CMAKE_STATIC_LIBRARY_SUFFIX}
)

##########################################################
# HDR Histogram

ExternalProject_Add(
    hdr_histogram
    URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/HdrHistogram_c-0.9.13.zip
    URL_MD5 75954aba7caf5d4bbdb70bcbcef15a8a
    CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};-DCMAKE_C_STANDARD=99;-DCMAKE_PREFIX_PATH=${CMAKE_CURRENT_BINARY_DIR}/zlib64
    PREFIX ""${AERON_THIRDPARTY_BINARY_DIR}/hdr_histogram""
    BUILD_BYPRODUCTS ""${AERON_THIRDPARTY_BINARY_DIR}/hdr_histogram/src/hdr_histogram-build/src/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}hdr_histogram_static${CMAKE_STATIC_LIBRARY_SUFFIX}""
    INSTALL_COMMAND """"
)

ExternalProject_Get_Property(hdr_histogram source_dir)
set(HDRHISTOGRAM_SOURCE_DIR ${source_dir})
ExternalProject_Get_Property(hdr_histogram binary_dir)
set(HDRHISTOGRAM_BINARY_DIR ${binary_dir})

set(
    HDRHISTOGRAM_LIBS
    ${HDRHISTOGRAM_BINARY_DIR}/src/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}hdr_histogram_static${CMAKE_STATIC_LIBRARY_SUFFIX}
)

##########################################################
# Aeron from github or local git

if (NOT AERON_GIT_URL)
    set(AERON_GIT_URL ""https://github.com/real-logic/aeron.git"" CACHE STRING ""Location of the Aeron git repo"" FORCE)
endif (NOT AERON_GIT_URL)

if (NOT AERON_GIT_TAG)
    set(AERON_GIT_TAG ""origin/HEAD"" CACHE STRING ""Tag in the Aeron git repo"" FORCE)
endif (NOT AERON_GIT_TAG)

ExternalProject_Add(
    aeron
    GIT_REPOSITORY ${AERON_GIT_URL}
    GIT_TAG ${AERON_GIT_TAG}
    GIT_SHALLOW TRUE
    CMAKE_ARGS ""-DAERON_TESTS=OFF"" ""-DAERON_SYSTEM_TESTS=OFF"" ""-DAERON_SLOW_SYSTEM_TESTS=OFF"" ""-DCMAKE_BUILD_TYPE=Release""
    INSTALL_COMMAND """"
)

ExternalProject_Get_Property(aeron source_dir)
set(AERON_SOURCE_DIR ${source_dir})
ExternalProject_Get_Property(aeron binary_dir)
set(AERON_BINARY_DIR ${binary_dir})

set(
    AERON_LIBS
    ${AERON_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}aeron_client${CMAKE_STATIC_LIBRARY_SUFFIX}
    ${AERON_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}aeron_driver${CMAKE_SHARED_LIBRARY_SUFFIX}
)

##########################################################
# Platform flags, etc.

find_package(Threads)

if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_CXX_EXTENSIONS)
    set(CMAKE_CXX_EXTENSIONS OFF)
endif ()

if (NOT DEFINED CMAKE_C_STANDARD)
    set(CMAKE_C_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_C_EXTENSIONS)
    set(CMAKE_C_EXTENSIONS OFF)
endif ()

# all UNIX-based platform compiler flags
if (UNIX)
    add_compile_options(-Wall -Wpedantic -Wextra -Wno-unused-parameter)
    #    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -Ofast -DDISABLE_BOUNDS_CHECKS"")
    add_compile_options($<$<CONFIG:Release>:-Ofast>)
endif ()

# platform specific flags
if (APPLE)
    add_compile_options(-Wsign-compare)
    add_definitions(-DDarwin)
    add_compile_options(-Wno-deprecated-register)
elseif (CYGWIN)
    add_definitions(-DWIN32)
    #add_definitions(-DGTEST_HAS_PTHREAD)
    string(REPLACE ""-std=c++11"" ""-std=gnu++11"" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
elseif (MSVC)
    add_definitions(-DWIN32)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DNOMINMAX)

    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd /Od /Zi"")
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
endif ()

##########################################################
# Project variables, etc.

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/binaries"")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/lib"")

# google benchmark
include_directories(${GOOGLE_BENCHMARK_SOURCE_DIR}/include)
# Hdr Histogram
include_directories(${HDRHISTOGRAM_SOURCE_DIR}/src)
include_directories(${AERON_SOURCE_DIR}/aeron-client/src/main/cpp)
include_directories(${AERON_SOURCE_DIR}/aeron-client/src/main/c)
include_directories(${AERON_SOURCE_DIR}/aeron-driver/src/main/c)

include_directories(${CMAKE_SOURCE_DIR}/benchmarks-aeron/src/main/cpp)

##########################################################

add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/benchmarks-aeron/src/main/cpp"")
",3.1.3,3.1
21001,cpputest,cpputest,False,False,False,False,False,95,C++,2020-05-14 09:18:17+00:00,2012-08-02 07:32:25+00:00,759,3864,"project(CppUTest)

set(CppUTest_version_major 3)
set(CppUTest_version_minor 8)

# 2.6.3 is needed for ctest support
# 3.1 is needed for target_sources
cmake_minimum_required(VERSION 3.1)

###############
# Conan support
###############
if (EXISTS ""${CMAKE_BINARY_DIR}/conanbuildinfo.cmake"")
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    message(STATUS ""conan_basic_setup()"")
    conan_basic_setup()
endif()

# Check for functions before setting a lot of stuff
include(CheckFunctionExists)
set (CMAKE_REQUIRED_INCLUDES ""unistd.h"")
check_function_exists(fork HAVE_FORK)
if(HAVE_FORK)
  add_definitions(-DCPPUTEST_HAVE_FORK)
endif(HAVE_FORK)

check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)
if(HAVE_GETTIMEOFDAY)
  add_definitions(-DCPPUTEST_HAVE_GETTIMEOFDAY=1)
endif(HAVE_GETTIMEOFDAY)

check_function_exists(pthread_mutex_lock HAVE_PTHREAD_MUTEX_LOCK)
if(HAVE_PTHREAD_MUTEX_LOCK)
  add_definitions(-DCPPUTEST_HAVE_PTHREAD_MUTEX_LOCK=1)
endif(HAVE_PTHREAD_MUTEX_LOCK)

check_function_exists(strdup HAVE_STRDUP)
if(HAVE_STRDUP)
  add_definitions(-DCPPUTEST_HAVE_STRDUP=1)
endif(HAVE_STRDUP)

if (MINGW)
    # Apply workaround for MinGW timespec redefinition (pthread.h / time.h)
    include(CheckStructHasMember)
    check_struct_has_member(""struct timespec"" tv_sec time.h HAVE_STRUCT_TIMESPEC)
    if (HAVE_STRUCT_TIMESPEC)
        add_definitions(-D_TIMESPEC_DEFINED=1)
    endif()

    if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
        # Apply workaround for static/shared libraries on MinGW C/C++ compiler
        # Issue occurs with CMake >= 3.9.0, it doesn't filter out gcc,gcc_s,gcc_eh from
        # the implicit library list anymore, so the C++ linker is getting passed the static
        # gcc_eh library since that's what the C linker uses by default. Only solution appears
        # to be to force static linkage.
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static"")
    endif()
endif()

option(STD_C ""Use the standard C library"" ON)
option(STD_CPP ""Use the standard C++ library"" ON)
option(CPPUTEST_FLAGS ""Use the CFLAGS/CXXFLAGS/LDFLAGS set by CppUTest"" ON)
option(MEMORY_LEAK_DETECTION ""Enable memory leak detection"" ON)
option(EXTENSIONS ""Use the CppUTest extension library"" ON)
option(LONGLONG ""Support long long"" OFF)
option(MAP_FILE ""Enable the creation of a map file"" OFF)
option(COVERAGE ""Enable running with coverage"" OFF)
option(C++11 ""Compile with C++11 support"" OFF)
option(WERROR ""Compile with warnings as errors"" OFF)

option(TESTS ""Compile and make tests for the code?"" ON)
option(TESTS_DETAILED ""Run each test separately instead of grouped?"" OFF)
option(TESTS_BUILD_DISCOVER ""Build time test discover"" ON)

option(EXAMPLES ""Compile and make exaples?"" OFF)

option(VERBOSE_CONFIG ""Print configuration to stdout during generation"" ON)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""What kind of build this is"" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

# Pkg-config file
include(FindPkgConfig)
set(CppUTest_PKGCONFIG_FILE cpputest.pc)

set(CppUTestRootDirectory ${PROJECT_SOURCE_DIR})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CppUTestRootDirectory}/cmake/Modules)

include(""${CppUTestRootDirectory}/cmake/Modules/CppUTestConfigurationOptions.cmake"")
include(CTest)
#include(""${CppUTestRootDirectory}/cmake/Modules/CheckFunctionExists.cmake"")
include(""${CppUTestRootDirectory}/cmake/Modules/CppUTestBuildTimeDiscoverTests.cmake"")
include(""${CppUTestRootDirectory}/cmake/Modules/CppUTestNormalizeTestOutputLocation.cmake"")
include(GNUInstallDirs)

enable_testing()

configure_file (
    ""${PROJECT_SOURCE_DIR}/config.h.cmake""
    ""${PROJECT_BINARY_DIR}/generated/CppUTestGeneratedConfig.h""
    )
include_directories(${PROJECT_BINARY_DIR})
add_definitions(-DHAVE_CONFIG_H)

include_directories(${CppUTestRootDirectory}/include)
add_subdirectory(src/CppUTest)

if (EXTENSIONS)
    add_subdirectory(src/CppUTestExt)
endif (EXTENSIONS)

if (TESTS)
    add_subdirectory(tests/CppUTest)
    if (EXTENSIONS)
        add_subdirectory(tests/CppUTestExt)
    endif (EXTENSIONS)
endif (TESTS)

if (EXAMPLES)
  add_subdirectory(examples)
endif(EXAMPLES)

set (INCLUDE_INSTALL_DIR ""${CMAKE_INSTALL_INCLUDEDIR}"")
set (LIB_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")
set (INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include"")

# Pkg-config file.
set (prefix ""${CMAKE_INSTALL_PREFIX}"")
set (exec_prefix ""\${prefix}"")
set (libdir ""\${exec_prefix}/${LIB_INSTALL_DIR}"")
set (includedir ""\${prefix}/${INCLUDE_INSTALL_DIR}"")
set (PACKAGE_VERSION ""${CppUTest_version_major}.${CppUTest_version_minor}"")

configure_file (cpputest.pc.in
    ${CMAKE_CURRENT_BINARY_DIR}/${CppUTest_PKGCONFIG_FILE} @ONLY)

install(FILES  ${CMAKE_CURRENT_BINARY_DIR}/${CppUTest_PKGCONFIG_FILE}
    DESTINATION ${LIB_INSTALL_DIR}/pkgconfig
    )

install(FILES  ""${CMAKE_CURRENT_BINARY_DIR}/generated/CppUTestGeneratedConfig.h""
    DESTINATION ""${INCLUDE_INSTALL_DIR}/CppUTest""
    )

# Try to include helper module
include(CMakePackageConfigHelpers OPTIONAL
  RESULT_VARIABLE PkgHelpers_AVAILABLE)
# guard against older versions of cmake which do not provide it
if(PkgHelpers_AVAILABLE)
  configure_package_config_file(CppUTestConfig.cmake.install.in
    ${CMAKE_CURRENT_BINARY_DIR}/install/CppUTestConfig.cmake
    INSTALL_DESTINATION ${LIB_INSTALL_DIR}/CppUTest/cmake
    PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR)
  write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/install/CppUTestConfigVersion.cmake
    VERSION ${CppUTest_version_major}.${CppUTest_version_minor}
    COMPATIBILITY SameMajorVersion )
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/install/CppUTestConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/install/CppUTestConfigVersion.cmake
    DESTINATION ${LIB_INSTALL_DIR}/CppUTest/cmake )
  install(EXPORT CppUTestTargets
    DESTINATION ${LIB_INSTALL_DIR}/CppUTest/cmake)
  install(FILES  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Scripts/CppUTestBuildTimeDiscoverTests.cmake
    DESTINATION ${LIB_INSTALL_DIR}/CppUTest/cmake/Scripts)
  install(FILES  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/CppUTestBuildTimeDiscoverTests.cmake
    DESTINATION ${LIB_INSTALL_DIR}/CppUTest/cmake/Modules)
  configure_package_config_file(CppUTestConfig.cmake.build.in
    ${CMAKE_CURRENT_BINARY_DIR}/CppUTestConfig.cmake
    INSTALL_DESTINATION ${CMAKE_CURRENT_BINARY_DIR}
    PATH_VARS INCLUDE_DIR CMAKE_CURRENT_BINARY_DIR)
  if (EXTENSIONS)
    export(TARGETS CppUTest CppUTestExt
      FILE ""${CMAKE_CURRENT_BINARY_DIR}/CppUTestTargets.cmake"")
  else()
    export(TARGETS CppUTest
      FILE ""${CMAKE_CURRENT_BINARY_DIR}/CppUTestTargets.cmake"")
  endif()
  write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/CppUTestConfigVersion.cmake
    VERSION ${CppUTest_version_major}.${CppUTest_version_minor}
    COMPATIBILITY SameMajorVersion )
  set(CppUTest_DIR ""${CMAKE_CURRENT_BINARY_DIR}"" CACHE PATH ""The directory containing a CMake configuration file for CppUTest."")
else()
  message(""If you wish to use find_package(CppUTest) in your own project to find CppUTest library""
    "" please update cmake to version which provides CMakePackageConfighelpers module""
    "" or write generators for CppUTestConfig.cmake by yourself."")
endif()

if(VERBOSE_CONFIG)
  message(""
-------------------------------------------------------
CppUTest Version ${CppUTest_version_major}.${CppUTest_version_minor}

Current compiler options:
    CC:                                 ${CMAKE_C_COMPILER}
    CXX:                                ${CMAKE_CXX_COMPILER}
    CppUTest CFLAGS:                    ${CPPUTEST_C_FLAGS}
    CppUTest CXXFLAGS:                  ${CPPUTEST_CXX_FLAGS}
    CppUTest LDFLAGS:                   ${CPPUTEST_LD_FLAGS}

Features configured in CppUTest:
    Memory Leak Detection:              ${MEMORY_LEAK_DETECTION}
    Compiling Extensions:               ${EXTENSIONS}
    Support Long Long:                  ${LONGLONG}
    Use CppUTest flags:                 ${CPPUTEST_FLAGS}

    Using Standard C library:           ${STD_C}
    Using Standard C++ library:         ${STD_CPP}
    Using C++11 library:                ${C++11}

    Generating map file:                ${MAP_FILE}
    Compiling with coverage:            ${COVERAGE}

    Compile and run self-tests          ${TESTS}
    Run self-tests separately           ${TESTS_DETAILED}

-------------------------------------------------------
"")
endif()
",3.1,3.1
21009,newser,TitanSDK,False,False,False,False,False,1,C,2019-05-16 11:38:38+00:00,2013-12-16 11:41:02+00:00,2,522,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.    See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.    You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

project(TitanSDK)

cmake_minimum_required(VERSION 3.1.3)

#
# definition
#

# set paths
set(ROOT_PATH ${CMAKE_CURRENT_LIST_DIR})

# BUILD_PATH is the directory storing cmake helpers
set(BUILD_PATH ${ROOT_PATH}/build)
include(${BUILD_PATH}/environment.cmake)
include(${BUILD_PATH}/${PLATFORM_ENV}.cmake)

# applications to build
set(PROGRAM_UNIT_TEST 1 CACHE BOOL ""app: unit test"")
set(PROGRAM_COMMAND_LINE 0 CACHE BOOL ""app: command line"")

set(SANITIZE_ADDRESS 0 CACHE BOOL ""enable address sanitizer"")

#
# component
#

# platform
set(PLATFORM_PATH ${ROOT_PATH}/platform)
add_subdirectory(${PLATFORM_PATH}/build platform)

# program: unit test
if (PROGRAM_UNIT_TEST)
    if (PLATFORM_ENV STREQUAL ios-xcode)
        add_subdirectory(${ROOT_PATH}/program/ios_unit_test unit_test)
    elseif (PLATFORM_ENV STREQUAL android-ndk)
        
    else ()
        add_subdirectory(${ROOT_PATH}/program/unit_test unit_test)
    endif()
endif ()

#
# header file path
#

#
# source file
#

#
# build
#

#
# link
#

#
# package
#
",3.1.3,3.1
21122,mheily,relaunchd,False,False,False,False,False,1,C,2020-05-09 23:45:26+00:00,2015-10-19 00:38:57+00:00,141,208,"# Experimental -- use the Makefile instead

cmake_minimum_required(VERSION 3.10)
project(jobd C)

set(jobd_VERSION_MAJOR 0)
set(jobd_VERSION_MINOR 9)
set(jobd_VERSION_PATCH 0)
set(CMAKE_C_STANDARD 11)

include(GNUInstallDirs)

set(CMAKE_C_FLAGS_DEBUG   ""-O0 -g3 -Wall -Wextra -Werror"")
set(CMAKE_C_FLAGS_RELEASE ""-O3 -Wall"")

include_directories(.)
include_directories(vendor)
include_directories(vendor/freebsd-init-r338454)
include_directories(vendor/sqlite-amalgamation-3240000)

#vendor/freebsd-init-r338454/getmntopts.c
#vendor/freebsd-init-r338454/init.c
#vendor/freebsd-init-r338454/mntopts.h
#vendor/freebsd-init-r338454/pathnames.h

#jobadm.c

#if(LINUX)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_GNU_SOURCE"") # for asprintf()
#endif()

add_library(static_sqlite STATIC
    vendor/sqlite-amalgamation-3240000/shell.c
    vendor/sqlite-amalgamation-3240000/sqlite3.c
    vendor/sqlite-amalgamation-3240000/sqlite3.h
    vendor/sqlite-amalgamation-3240000/sqlite3ext.h)

set_target_properties(static_sqlite
        PROPERTIES
        COMPILE_FLAGS ""-DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_ENABLE_JSON1 -w"")

#
# Local sources
#
add_executable(init init.c)

add_executable(jobd
        vendor/flopen.c
        vendor/pidfile.c
        vendor/pidfile.h
        array.h
        config.h
        database.c
        database.h
        event_loop.c
        event_loop.h
        ipc.c
        ipc.h
        job.c
        job.h
        job_table.c
        job_table.h
        jobd.c
        jsonrpc.c
        jsonrpc.h
        logger.c
        logger.h
        memory.h
        parser.c
        parser.h
        queue.h
        toml.c
        toml.h)

target_link_libraries(jobd static_sqlite)

add_executable(jobadm
        database.c
        ipc.c
        jobadm.c
        jsonrpc.c
        jsonrpc.h
        logger.c)

target_link_libraries(jobadm static_sqlite)

add_executable(jobcfg
        database.c
        ipc.c
        job.c
        jobcfg.c
        jsonrpc.c
        jsonrpc.h
        logger.c
        parser.c
        toml.c)

target_link_libraries(jobcfg static_sqlite)

add_executable(jobstat
        database.c
        ipc.c
        jobstat.c
        jsonrpc.c
        jsonrpc.h
        logger.c)

target_link_libraries(jobstat static_sqlite)

add_executable(jobprop
        jobprop.c
        database.c
        ipc.c
        job.c
        jsonrpc.c
        jsonrpc.h
        logger.c
        )

target_link_libraries(jobprop static_sqlite)

#
# Installation
#
install(TARGETS init
        RUNTIME
        DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/${CMAKE_PROJECT_NAME})

install(TARGETS jobadm jobcfg jobprop jobstat
        RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR})

install(TARGETS jobd
        RUNTIME
        DESTINATION ${CMAKE_INSTALL_SBINDIR})

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/jobd.8
        DESTINATION ${CMAKE_INSTALL_MANDIR}/man8)

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/job.5
        DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)

install(FILES schema.sql DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME})

install(DIRECTORY DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/manifests)

install(DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/db/${PROJECT_NAME})

install(DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/log)
install(DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/log/${PROJECT_NAME})

install(DIRECTORY DESTINATION ${CMAKE_INSTALL_RUNSTATEDIR}/${PROJECT_NAME})
install(DIRECTORY DESTINATION ${CMAKE_INSTALL_RUNSTATEDIR}/${PROJECT_NAME}/ipc)

enable_testing()

add_test(NAME run
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMAND ./test/run.sh )

configure_file(config.h.in config.h @ONLY)
configure_file(config.inc.in config.inc @ONLY)
",3.10,3.1
21156,dosimont,alya-mpio-tools,False,False,False,False,False,2,C++,2020-04-29 17:30:51+00:00,2017-03-27 09:38:33+00:00,0,498,"cmake_minimum_required(VERSION 3.1)
include( ExternalProject )

set(CMAKE_VERBOSE_MAKEFILE OFF)

option(ALYA_MPIO_READER_OPT ""Library to read Alya MPIO binary files"" ON)
option(ALYA_MPIO2VTK_OPT ""Alya MPIO/IO mesh and post process files to VTK converter"" ON)
option(ALYA_MPIO2TXT_OPT ""Alya MPIO/IO mesh and post process files to textual"" ON)
option(ALYA_MPIO2GID_OPT ""Alya MPIO/IO mesh and post process files to textual"" ON)
option(ALYA_MPIO_DIFF_OPT ""Alya MPIO/IO diff: compare two files"" ON)
option(ALYA_MPIO_DUMP_OPT ""Alya MPIO/IO dump: print the content of a binary file"" ON)
option(ALYA_MPIO_HEADER_OPT ""Alya MPIO/IO header manager: modify the header of a binary file"" ON)
option(ALYA_MPIO_MERGER_OPT ""Alya MPIO/IO merger: merge a MPIO binary file with subdomains"" ON)
option(ALYA_ASCII2MPIO_OPT ""Alya ASCII to MPIO/IO-compliant binary converter"" ON)
option(STATIC_OPT ""Generate static libraries"" OFF)
option(USE_MPI_OPT ""Use MPI"" ON)
option(GPROF_OPT ""Compile with gprof"" OFF)
option(BOOST_AUTO_OPT ""Enable Boost auto local installation (requires an internet connection)"" OFF)
option(BOOST_AL_URL_OPT ""Download Boost from alternate url"" ON)

if (NOT BOOST_AUTO_OPT)
    find_package(Boost)
    if (NOT Boost_FOUND)
        #override option
        message(WARNING ""Boost not found, enabling Boost auto local installation"")
        set(BOOST_AUTO_OPT ON)
    endif()
endif()

if (USE_MPI_OPT)
    find_package(MPI)
    if (NOT MPI_CXX_FOUND)
        #override option
        message(WARNING ""MPI not found, compiling using the sequential version"")
        set(USE_MPI_OPT OFF)
    endif()
endif()

if (ALYA_MPIO2VTK_OPT)
    find_package(VTK)
    if (NOT VTK_FOUND)
        #override option
        message(WARNING ""VTK not found, disabling mpio2vtk building"")
        set(ALYA_MPIO2VTK_OPT OFF)
    endif()
    if (NOT USE_MPI_OPT)
        #override option
        message(WARNING ""MPI not available, disabling mpio2vtk building"")
        set(ALYA_MPIO2VTK_OPT OFF)
    endif()
endif()

if (GPROF_OPT)
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ""-pg"")
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ""-pg"")
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

set(MESSAGE_LEVEL ""MESSAGE_INFO"")

set(CMAKE_CXX_FLAGS ""-Wall -Wextra -Wsign-conversion -Wold-style-cast -D${MESSAGE_LEVEL}"")
set(CMAKE_CXX_FLAGS_DEBUG ""-g"")
set(CMAKE_CXX_FLAGS_RELEASE ""-O3"")

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")

set(ALYATOOLS_VERSION_MAJOR ""7"")
set(ALYATOOLS_VERSION_MINOR ""3"")
set(ALYATOOLS_VERSION_PATCH ""0"")
set(ALYATOOLS_VERSION ""${ALYATOOLS_VERSION_MAJOR}.${ALYATOOLS_VERSION_MINOR}.${ALYATOOLS_VERSION_PATCH}"")

set (CMAKE_CXX_STANDARD 11)

# use, i.e. don't skip the full RPATH for the build tree
set(CMAKE_SKIP_BUILD_RPATH FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 

set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# the RPATH to be used when installing, but only if it's not a system directory
list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
if(""${isSystemDir}"" STREQUAL ""-1"")
     set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
endif(""${isSystemDir}"" STREQUAL ""-1"")

enable_testing()

if (BOOST_ALT_URL_OPT)
    set(BOOST_URL ""https://fossies.org/linux/misc/boost_1_70_0.tar.bz2"" CACHE STRING """" FORCE)
endif()

if (${CMAKE_VERSION} VERSION_GREATER ""3.12"" AND ${BOOST_AUTO_OPT})
    if (NOT EXISTS ""${CMAKE_SOURCE_DIR}/external/boost-cmake/CMakeLists.txt"")
        message(""-- Boost: using automatic fetch"")
        message(""-- Fetching..."")
        include(FetchContent)
        FetchContent_Declare(
            boostcmake
            GIT_REPOSITORY https://github.com/Orphis/boost-cmake.git
            GIT_TAG master
        )
        FetchContent_GetProperties(boostcmake)
        if(NOT boostcmake_POPULATED)
            FetchContent_Populate(boostcmake)
            add_subdirectory(${boostcmake_SOURCE_DIR} ${boostcmake_BINARY_DIR})
        endif()
        set(SUBMODULE_BOOST ON)
    else()
        message(""-- Boost: using git submodule"")
        message(""-- Fetching..."")
        ADD_SUBDIRECTORY(external/boost-cmake)
        set(SUBMODULE_BOOST ON)
    endif()
else()
    message(""-- Boost: using system version"")
    set(SUBMODULE_BOOST OFF)
endif()

#set(SUBMODULE_VTK OFF)
#if (USE_MPI_OPT)
#    if (EXISTS ""${CMAKE_SOURCE_DIR}/external/VTK/CMakeLists.txt"")
#          ExternalProject_Add(VTK
#          DOWNLOAD_COMMAND """"
#          CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR} -DVTK_USE_MPI=ON -DVTK_GROUP_ENABLE_MPI=WANT -DVTK_BUILD_TESTING=OFF -DVTK_ENABLE_Qt=NO -DVTK_GROUP_ENABLE_StandAlone=YES -DVTK_GROUP_ENABLE_Web=NO
#          SOURCE_DIR ""${CMAKE_SOURCE_DIR}/external/VTK""
#        )
#        set(SUBMODULE_VTK ON)
#    endif()
#endif()
#
#if (SUBMODULE_VTK)
#    message(""Using VTK git submodule"")
#else()
#    message(""Using system VTK"")
#endif()

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)

file(GLOB SCRIPTS ${CMAKE_SOURCE_DIR}/scripts/*)
file(GLOB ROMIO   ${CMAKE_SOURCE_DIR}/hints/*)
install(PROGRAMS ${SCRIPTS} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(PROGRAMS ${ROMIO} DESTINATION ${CMAKE_INSTALL_PREFIX}/hints)
add_custom_target(uninstall ""${CMAKE_COMMAND}"" -P ""${CMAKE_MODULE_PATH}/uninstall.cmake"")

if(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git/hooks AND EXISTS ${CMAKE_SOURCE_DIR}/.hooks/set-hooks)
    message(""-- Installing hooks..."")
    execute_process(COMMAND ${CMAKE_SOURCE_DIR}/.hooks/set-hooks)
endif()
",3.1,3.1
21175,woodem,woo,False,False,False,False,False,8,C++,2020-05-14 16:12:25+00:00,2015-08-21 09:19:47+00:00,22,4387,"CMAKE_MINIMUM_REQUIRED(VERSION 3.10 FATAL_ERROR)
PROJECT(woo VERSION 1.2)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

OPTION(WOO_DEBUG ""Include debugging information"" OFF)
OPTION(WOO_PYBIND11 ""Use pybind11 instead of boost::python"" ON)
OPTION(WOO_VTK ""Use VTK, enable related functionality"" ON)
OPTION(WOO_HDF5 ""Use HDF5, enable related functionality"" ON)
OPTION(WOO_GTS ""Use GTS (and build internal pygts), enable related functionality"" ON)
OPTION(WOO_QT5 ""Build Qt5-based user interface (implies also OpenGL)"" ON)
OPTION(WOO_OPENMP ""Enable parallel computing based on OpenMP"" ON)
SET(WOO_FLAVOR """" CACHE STRING ""Named configuration flavor; flavors may be installed in parallel."")
OPTION(WOO_CLANG ""Use clang instead of the system-default compiler (usually gcc)"" OFF)
SET(WOO_INSTALL_SCHEME ""posix_user"" CACHE STRING ""Python installation scheme, see https://docs.python.org/3/library/sysconfig.html#installation-paths"")
SET(WOO_BUILD_JOBS 0 CACHE STRING ""Set default number of parallel build level, when building with woo -R; 0 is to use the default (all cores)"")
OPTION(WOO_CCACHE ""Use ccache when compiling"" ON)
OPTION(WOO_CEREAL ""Use cereal instead of boost::serialization (experimental!)"" OFF)
SET(PYTHON_EXECUTABLE ""/usr/bin/python3"" CACHE FILEPATH ""The version of Python to build."")

if(DEFINED ENV{VIRTUAL_ENV})
	if(""${WOO_INSTALL_SCHEME}"" STREQUAL ""posix_user"")
		message(STATUS ""Setting WOO_INSTALL_SCHEME to posix_prefix (in virtual environment)"")
		set(WOO_INSTALL_SCHEME ""posix_prefix"")
	endif()
endif()


if(WOO_CLANG)
	set(CMAKE_C_COMPILER clang-9)
	set(CMAKE_CXX_COMPILER clang++-9)
	# https://github.com/pybind/pybind11/issues/1604#issuecomment-459796241
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsized-deallocation"")
else()
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKED_FLAGS} -fuse-ld=gold"")
endif(WOO_CLANG)

# https://stackoverflow.com/a/24305849/761090
if(WOO_CCACHE)
	find_program(CCACHE_FOUND ""ccache"" REQUIRED)
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
	# set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(WOO_CCACHE)

# https://medium.com/@alasher/colored-c-compiler-output-with-ninja-clang-gcc-10bfe7f2b949
option(FORCE_COLORED_OUTPUT ""Always produce ANSI-colored output (GNU/Clang only)."" ON)
if (${FORCE_COLORED_OUTPUT})
    if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
       add_compile_options (-fdiagnostics-color=always)
    elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
       add_compile_options (-fcolor-diagnostics)
    endif ()
endif ()

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_INSTALL_MESSAGE LAZY)

find_package(Eigen3 REQUIRED)
find_package(Boost REQUIRED COMPONENTS serialization iostreams system)
find_package(Threads REQUIRED)
find_package(PkgConfig REQUIRED)
#include(FindPython3)
#find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
# set(Python_ADDITIONAL_VERSIONS 3.6 3.7 3.8)
find_package(PythonInterp REQUIRED)
find_package(PythonLibs REQUIRED)
if(""${PYTHON_VERSION_MAJOR}"" STREQUAL ""2"")
	message(FATAL_ERROR ""Python 2.x is not supported."")
endif()

set(Backward_DIR ${PROJECT_SOURCE_DIR}/lib/backward/cmake)
find_package(Backward REQUIRED)

if(WOO_VTK)
	find_package(VTK REQUIRED)
	add_definitions(-DWOO_VTK)
endif()

if(WOO_DEBUG)
	add_definitions(-DWOO_DEBUG)
	set(CMAKE_BUILD_TYPE Debug)
else()
	add_definitions(-DNDEBUG)
	set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif()
if(WOO_PYBIND11)
	add_definitions(-DWOO_PYBIND11)
	find_package(pybind11 2.4 REQUIRED)
else()
	set(BP_VERSION_SUFFIX ""${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}"")
	# set(BP_VERSION_SUFFIX """")
	find_package(Boost REQUIRED COMPONENTS ""python${BP_VERSION_SUFFIX}"")
	# otherwise boost::python would happily include version 2.7 headers?!
	include_directories(${PYTHON_INCLUDE_DIRS})
endif()

find_path(DOUBLECONVERSION_INCLUDE_DIR NAMES double-conversion/double-conversion.h PATHS /usr/include /usr/local/include)
find_library(DOUBLECONVERSION_LIB NAMES double-conversion)
if(DOUBLECONVERSION_INCLUDE_DIR AND DOUBLECONVERSION_LIB)
	# create interface: https://foonathan.net/2016/07/cmake-dependency-handling/
	add_library(DOUBLECONVERSION INTERFACE)
	target_include_directories(DOUBLECONVERSION INTERFACE ${DOUBLECONVERSION_INCLUDE_DIR})
	target_link_libraries(DOUBLECONVERSION INTERFACE ${DOUBLECONVERSION_LIB})
else()
	message(FATAL_ERROR ""double-conversion library/headers not found."")
endif()

if(WOO_CEREAL)
	# requires -DWOO_NOXML but that is set by default already
	add_definitions(-DWOO_CEREAL)
	# TODO: check headers and version
endif()
if(WOO_OPENMP)
	add_definitions(-DWOO_OPENMP)
	find_package(OpenMP REQUIRED)
endif()
if(WOO_GTS)
	add_definitions(-DWOO_GTS)
	find_package(PkgConfig REQUIRED)
	pkg_check_modules(GTS REQUIRED gts)
	# create interface: https://foonathan.net/2016/07/cmake-dependency-handling/
	add_library(GTS INTERFACE)
	target_include_directories(GTS INTERFACE ${GTS_INCLUDE_DIRS})
	target_link_libraries(GTS INTERFACE ${GTS_LIBRARIES})
	set(WOO_CXX_GTS_SOURCES
		py/3rd-party/pygts-0.3.1/cleanup.cpp
		py/3rd-party/pygts-0.3.1/edge.cpp
		py/3rd-party/pygts-0.3.1/face.cpp
		py/3rd-party/pygts-0.3.1/object.cpp
		py/3rd-party/pygts-0.3.1/point.cpp
		py/3rd-party/pygts-0.3.1/pygts.cpp
		py/3rd-party/pygts-0.3.1/segment.cpp
		py/3rd-party/pygts-0.3.1/surface.cpp
		py/3rd-party/pygts-0.3.1/triangle.cpp
		py/3rd-party/pygts-0.3.1/vertex.cpp
	)
	add_definitions(-DPYGTS_HAS_NUMPY)
endif()
if(WOO_VTK)
	find_package(VTK REQUIRED)
	add_definitions(-DWOO_VTK)
endif()
if(WOO_HDF5)
	find_package(HDF5 REQUIRED COMPONENTS CXX HL)
	add_definitions(-DWOO_HDF5)
	set(HDF5_PREFER_PARALLEL false)
	include_directories(SYSTEM PUBLIC ${HDF5_CXX_INCLUDE_DIRS})
endif()
if(WOO_QT5)
	find_package(Qt5 COMPONENTS Widgets Core OpenGL Xml REQUIRED)
	add_definitions(-DWOO_QT5 -DWOO_OPENGL)
	set(CMAKE_AUTOMOC ON)
	set(CMAKE_AUTOUIC ON)
	set(CMAKE_AUTORCC ON)
	set(OpenGL_GL_PREFERENCE GLVND)
	find_package(OpenGL REQUIRED)
	find_package(GLUT REQUIRED)
	find_package(GLEW REQUIRED)
	# GLE
	find_path(GLE_INCLUDE_DIR NAMES GL/gle.h PATHS /usr/include /usr/local/include)
	find_library(GLE_LIB NAMES gle)
	if(GLE_INCLUDE_DIR AND GLE_LIB)
		# create interface: https://foonathan.net/2016/07/cmake-dependency-handling/
		add_library(GLE INTERFACE)
		target_include_directories(GLE INTERFACE ${GLE_INCLUDE_DIR})
		target_link_libraries(GLE INTERFACE ${GLE_LIB})
	else()
		message(FATAL_ERROR ""GLE library/headers not found."")
	endif()
	# QGLViewer
	find_path(QGLVIEWER_INCLUDE_DIR NAMES qglviewer.h PATHS /usr/include/QGLViewer /usr/local/include/QGLViewer /usr/include/qglviewer /usr/local/include/qglviewer)
	find_library(QGLVIEWER_LIB NAMES QGLViewer QGLViewer-qt5 qglviewer-qt5)
	if(QGLVIEWER_INCLUDE_DIR AND QGLVIEWER_LIB)
		add_library(QGLViewer INTERFACE)
		target_include_directories(QGLViewer INTERFACE ${QGLVIEWER_INCLUDE_DIR})
		target_link_libraries(QGLViewer INTERFACE ${QGLVIEWER_LIB})
	else()
		message(FATAL_ERROR ""QGLViewer library/headers not found (headers: ${QGLVIEWER_INCLUDE_DIR}, lib: ${QGLVIEWER_LIBS})."")
	endif()
	set(WOO_CXX_GUI_SOURCES
		gui/qt4/GLViewer.qrc
		gui/qt4/GLViewer.cpp
		gui/qt4/_GLViewer.cpp
		gui/qt4/OpenGLManager.cpp
	)
endif(WOO_QT5)
if(WOO_OPENMP)
	find_package(OpenMP REQUIRED)
	add_definitions(-DWOO_OPENMP)
	set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
endif()

# don't compile XML serialization, binary works better
add_definitions(-DWOO_NOXML)

execute_process(COMMAND git log -1 --format=%h
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	OUTPUT_VARIABLE WOO_GIT_REVISION_HASH
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
	COMMAND ${PYTHON_EXECUTABLE} ""-cimport sysconfig;print(sysconfig.get_path('platlib','${WOO_INSTALL_SCHEME}'))""
	OUTPUT_VARIABLE WOO_TOP_MODULEDIR
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
set(WOO_MODULEDIR ""${WOO_TOP_MODULEDIR}/woo"")
message(STATUS ""Python modules to be installed in ${WOO_MODULEDIR} (scheme: ${WOO_INSTALL_SCHEME})"")
execute_process(
	COMMAND ${PYTHON_EXECUTABLE} ""-cimport sysconfig;print(sysconfig.get_path('scripts','${WOO_INSTALL_SCHEME}'))""
	OUTPUT_VARIABLE WOO_BIN_DIR
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
message(STATUS ""Executables to be installed in ${WOO_BIN_DIR} (scheme: ${WOO_INSTALL_SCHEME})"")

## prepare header directories (symlink)
macro(create_symlink target linkname)
	message(STATUS ""Symlinking ${linkname} → ${target}"")
	execute_process(
		COMMAND ln -sf ""${target}"" ""${linkname}""
		RESULT_VARIABLE HEADER_LINK_STATUS
		ERROR_VARIABLE HEADER_LINK_ERROR
	)
	if(NOT ""${HEADER_LINK_STATUS}"" EQUAL 0)
		message(FATAL_ERROR ""Symlinking headers failed:\n${HEADER_LINK_ERROR}"")
	endif()
endmacro()
MESSAGE(STATUS ""Symlinking headers …"")
FILE(MAKE_DIRECTORY ""${CMAKE_BINARY_DIR}/include/woo"")
create_symlink(""${CMAKE_SOURCE_DIR}/pkg"" ""${CMAKE_BINARY_DIR}/include/woo"")
create_symlink(""${CMAKE_SOURCE_DIR}/lib"" ""${CMAKE_BINARY_DIR}/include/woo"")
create_symlink(""${CMAKE_SOURCE_DIR}/core"" ""${CMAKE_BINARY_DIR}/include/woo"")

add_library(spdlog_local STATIC
	lib/spdlog/src/async.cpp
	lib/spdlog/src/color_sinks.cpp
	lib/spdlog/src/file_sinks.cpp
	lib/spdlog/src/fmt.cpp
	lib/spdlog/src/spdlog.cpp
	lib/spdlog/src/stdout_sinks.cpp
)
target_include_directories(spdlog_local PUBLIC lib/)
target_compile_definitions(spdlog_local PUBLIC SPDLOG_COMPILED_LIB)
add_definitions(-DWOO_SPDLOG)

if(NOT ""${WOO_FLAVOR}"" STREQUAL """")
	set(WOO_MAIN_SCRIPT ""woo-${WOO_FLAVOR}"")
	string(REGEX REPLACE ""([^a-zA-Z0-9_])"" ""_"" WOO_CXX_FLAVOR ""_${WOO_FLAVOR}"")
	set(CXX_INTERNAL ""_cxxInternal${WOO_CXX_FLAVOR}"")
else()
	set(WOO_MAIN_SCRIPT ""woo"")
	set(WOO_CXX_FLAVOR """")
	set(CXX_INTERNAL ""_cxxInternal"")
endif()

add_definitions(-DWOO_CXX_FLAVOR=${WOO_CXX_FLAVOR})
if(WOO_DEBUG)
	set(CXX_INTERNAL ""${CXX_INTERNAL}_debug"")
endif()

if(WOO_PYBIND11)
	set(WOO_EIGEN_WRAPPER_SRCS lib/eigen/pybind11/register.cpp)
else()
	set(WOO_EIGEN_WRAPPER_SRCS
		lib/eigen/boost-python/expose-boxes.cpp
		lib/eigen/boost-python/expose-complex.cpp
		lib/eigen/boost-python/expose-converters.cpp
		lib/eigen/boost-python/expose-matrices.cpp
		lib/eigen/boost-python/expose-quaternion.cpp
		lib/eigen/boost-python/expose-vectors.cpp
		lib/eigen/boost-python/minieigen.cpp
	)
endif()


set(WOO_CXX_SOURCES
	# python
	py/config.cxx
	py/comp.cpp
	py/_customConverters.cpp
	py/_cxxInternal.cpp
	py/log.cpp
	py/_packObb.cpp
	py/_packPredicates.cpp
	py/_packSpheres.cpp
	py/_triangulated.cpp
	py/_utils2.cpp
	py/WeightedAverage2d.cpp
	# core
	core/Cell.cpp
	core/Dispatcher.cpp
	core/DisplayParameters.cpp
	core/EnergyTracker.cpp
	core/Engine.cpp
	core/Field.cpp
	core/Functor.cpp
	core/LabelMapper.cpp
	core/Master.cpp
	core/MatchMaker.cpp
	core/Plot.cpp
	core/Preprocessor.cpp
	core/ScalarRange.cpp
	core/Scene.cpp
	core/Test.cpp
	core/Timing.cpp
	# lib
	lib/backward/backward.cpp
	lib/base/CompUtils.cpp
	lib/base/Math.cpp
	lib/base/Volumetric.cpp
	lib/multimethods/Indexable.cpp
	lib/object/Object.cpp
	lib/opengl/GLUtils.cpp
	lib/pyutil/except.cpp
	lib/pyutil/gil.cpp
	lib/pyutil/pickle.cpp
	lib/spdlog/src/async.cpp
	lib/spdlog/src/color_sinks.cpp
	lib/spdlog/src/file_sinks.cpp
	lib/spdlog/src/fmt.cpp
	lib/spdlog/src/spdlog.cpp
	lib/spdlog/src/stdout_sinks.cpp
	lib/sphere-pack/SpherePack.cpp
	lib/voro++/voro++.cc
	${WOO_EIGEN_WRAPPER_SRCS}
	# pkg
	pkg/clDem/CLDemField.cpp
	pkg/dem/Buoyancy.cpp
	pkg/dem/Capsule.cpp
	pkg/dem/Clump.cpp
	pkg/dem/Clustering.cpp
	pkg/dem/Collision.cpp
	pkg/dem/Concrete.cpp
	pkg/dem/ContactContainer.cpp
	pkg/dem/Contact.cpp
	pkg/dem/ContactHook.cpp
	pkg/dem/ContactLoop.cpp
	pkg/dem/Conveyor.cpp
	pkg/dem/CrossAnisotropy.cpp
	pkg/dem/DynDt.cpp
	pkg/dem/Ellipsoid.cpp
	pkg/dem/Facet.cpp
	pkg/dem/FlowAnalysis.cpp
	pkg/dem/FrictMat.cpp
	pkg/dem/Funcs.cpp
	pkg/dem/G3Geom.cpp
	pkg/dem/Gl1_CPhys.cpp
	pkg/dem/Gl1_DemField.cpp
	pkg/dem/Gravity.cpp
	pkg/dem/GridBound.cpp
	pkg/dem/GridCollider.cpp
	pkg/dem/GridStore.cpp
	pkg/dem/Hdf5Export.cpp
	pkg/dem/Hertz.cpp
	pkg/dem/Ice.cpp
	pkg/dem/IdealElPl.cpp
	pkg/dem/Impose.cpp
	pkg/dem/InfCylinder.cpp
	pkg/dem/Inlet.cpp
	pkg/dem/InsertionSortCollider.cpp
	pkg/dem/IntraForce.cpp
	pkg/dem/L6Geom.cpp
	pkg/dem/LawTester.cpp
	pkg/dem/Leapfrog.cpp
	pkg/dem/Luding.cpp
	pkg/dem/MeshVolume.cpp
	pkg/dem/OpenCLCollider.cpp
	pkg/dem/Outlet.cpp
	pkg/dem/ParticleContainer.cpp
	pkg/dem/Particle.cpp
	pkg/dem/Pellet.cpp
	pkg/dem/PeriIsoCompressor.cpp
	pkg/dem/Porosity.cpp
	pkg/dem/Potential.cpp
	pkg/dem/POVRayExport.cpp
	pkg/dem/Psd.cpp
	pkg/dem/ShapePack.cpp
	pkg/dem/Sphere.cpp
	pkg/dem/SteadyState.cpp
	pkg/dem/Suspicious.cpp
	pkg/dem/Tracer.cpp
	pkg/dem/Truss.cpp
	pkg/dem/VtkExport.cpp
	pkg/dem/Wall.cpp
	pkg/fem/Membrane.cpp
	pkg/fem/Tetra.cpp
	pkg/gl/Functors.cpp
	pkg/gl/Gl1_Node.cpp
	pkg/gl/GlData.cpp
	pkg/gl/GlSetup.cpp
	pkg/gl/GlWooLogo.cpp
	pkg/gl/NodeGlRep.cpp
	pkg/gl/Renderer.cpp
	pkg/mesh/Mesh.cpp
	pkg/sparc/SparcField.cpp
	pkg/voro/VoroField.cpp
)


set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}"")

message(STATUS ""All sources are ${WOO_CXX_SOURCES};;"")
INCLUDE(wooCombineSources)
COMBINE_SOURCES(""${CMAKE_BINARY_DIR}/srcs"";
	""${WOO_CXX_SOURCES}"";
	1;
	WOO_CXX_SOURCES_COMBINED
)
message(STATUS ""Combined sources are ${WOO_INTERNAL_SOURCES}"")

if(WOO_PYBIND11)
	pybind11_add_module(${CXX_INTERNAL} NO_EXTRAS
		${WOO_CXX_SOURCES_COMBINED}
		${WOO_CXX_GUI_SOURCES}
		${WOO_CXX_GTS_SOURCES}
	)
	target_link_libraries(${CXX_INTERNAL} PUBLIC DOUBLECONVERSION)
else()
	add_library(${CXX_INTERNAL} SHARED
		${WOO_CXX_SOURCES_COMBINED}
		${WOO_CXX_GUI_SOURCES}
		${WOO_CXX_GTS_SOURCES}
	)
	set_target_properties(${CXX_INTERNAL} PROPERTIES PREFIX """")
	target_link_libraries(${CXX_INTERNAL} PUBLIC Boost::python${BP_VERSION_SUFFIX} DOUBLECONVERSION)
endif(WOO_PYBIND11)

target_include_directories(${CXX_INTERNAL} PRIVATE ${CMAKE_BINARY_DIR}/include)
if(WOO_QT5)
	target_link_libraries(${CXX_INTERNAL} PUBLIC Qt5::Core Qt5::Widgets Qt5::OpenGL Qt5::Xml OpenGL::OpenGL GLUT::GLUT GLEW::GLEW QGLViewer GLE)
endif(WOO_QT5)
if(WOO_OPENMP)
	target_link_libraries(${CXX_INTERNAL} PUBLIC OpenMP::OpenMP_CXX)
endif(WOO_OPENMP)

if(WOO_GTS)
	target_link_libraries(${CXX_INTERNAL} PUBLIC GTS)
endif(WOO_GTS)

if(WOO_HDF5)
	target_link_libraries(${CXX_INTERNAL} PUBLIC ${HDF5_CXX_LIBRARIES} ${HDF5_HL_LIBRARIES})
endif(WOO_HDF5)

set_source_files_properties(py/config.cxx
	PROPERTIES
	COMPILE_DEFINITIONS ""WOO_REVISION=${WOO_GIT_REVISION_HASH};WOO_VERSION=${PROJECT_VERSION};WOO_SOURCE_ROOT=${CMAKE_SOURCE_DIR};WOO_BUILD_ROOT=${CMAKE_BINARY_DIR};WOO_FLAVOR=${WOO_FLAVOR};WOO_BUILD_PROGRAM=${CMAKE_MAKE_PROGRAM};WOO_BUILD_JOBS=${WOO_BUILD_JOBS}""
)
target_link_libraries(${CXX_INTERNAL} PRIVATE spdlog_local Backward::Backward)
target_link_libraries(${CXX_INTERNAL} PUBLIC
	Eigen3::Eigen
	Boost::serialization
	Boost::iostreams
	Boost::boost
	Boost::system
	stdc++fs
	${VTK_LIBRARIES}
)
target_include_directories(${CXX_INTERNAL} SYSTEM PUBLIC ${VTK_INCLUDE_DIRS})
install(TARGETS ${CXX_INTERNAL}
	LIBRARY DESTINATION ${WOO_MODULEDIR}
)

FILE(MAKE_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
file(WRITE ""${CMAKE_BINARY_DIR}/bin/${WOO_MAIN_SCRIPT}"" ""\#!${PYTHON_EXECUTABLE}\nimport wooMain,sys; sys.exit(wooMain.main())\n"")
file(WRITE ""${CMAKE_BINARY_DIR}/bin/${WOO_MAIN_SCRIPT}-batch"" ""\#!${PYTHON_EXECUTABLE}\nimport wooMain,sys; sys.exit(wooMain.batch())\n"")


install(PROGRAMS ""${CMAKE_BINARY_DIR}/bin/${WOO_MAIN_SCRIPT}"" ""${CMAKE_BINARY_DIR}/bin/${WOO_MAIN_SCRIPT}-batch""
	DESTINATION ${WOO_BIN_DIR}
)

install(FILES
	core/main/wooMain.py
	DESTINATION ${WOO_TOP_MODULEDIR}
)
install(FILES
	py/apiversion.py
	py/batch.py
	py/document.py
	py/eudoxos.py
	py/__init__.py
	py/ipythonintegration.py
	py/linterpolation.py
	py/manpage.py
	py/models.py
	py/objectlibrary.py
	py/pack.py
	py/paraviewscript.py
	py/plot.py
	py/post2d.py
	py/pyderived.py
	py/remote.py
	py/runtime.py
	py/system.py
	py/timing.py
	py/triangulated.py
	py/_units.py
	py/utils.py
	DESTINATION ${WOO_MODULEDIR}
)
install(FILES
	py/tests/batch.py
	py/tests/clump.py
	py/tests/clustering.py
	py/tests/core.py
	py/tests/demfield.py
	py/tests/ellipsoid.py
	py/tests/energy.py
	py/tests/grid.py
	py/tests/hertz.py
	py/tests/__init__.py
	py/tests/io.py
	py/tests/labels.py
	py/tests/pbc.py
	py/tests/psd.py
	py/tests/shapepack.py
	py/tests/tetra.py
	py/tests/volumetric.py
	DESTINATION ${WOO_MODULEDIR}/tests
)
install(FILES
	py/pre/chute.py
	py/pre/cylTriax.py
	py/pre/depot.py
	py/pre/ell2d.py
	py/pre/horse.py
	py/pre/__init__.py
	py/pre/psdrender.py
	py/pre/toys.py
	py/pre/triax.py
	DESTINATION ${WOO_MODULEDIR}/pre
)
install(FILES
	py/_monkey/aliases.py
	py/_monkey/compat.py
	py/_monkey/extraDocs.py
	py/_monkey/gts.py
	py/_monkey/__init__.py
	py/_monkey/io.py
	DESTINATION ${WOO_MODULEDIR}/_monkey
)
install(FILES
	py/data/horse.coarse.gts
	py/data/woodem-6.small.svg
	py/data/woodem-6.woodem.svg
	py/data/woodem-6.woo.svg
	py/data/woo-favicon.ico
	py/data/woo-icon.128.png
	py/data/woo-icon.256.png
	DESTINATION ${WOO_MODULEDIR}/data
)

if(WOO_GTS)
	install(FILES
		py/3rd-party/pygts-0.3.1/__init__.py
		py/3rd-party/pygts-0.3.1/pygts.py
		DESTINATION ${WOO_MODULEDIR}/gts
	)
endif(WOO_GTS)

if(WOO_QT5)
	macro(PYQT_QRC SRC DST)
		add_custom_target(""${DST}"" ALL
		#add_custom_command(OUTPUT ""${DST}"" ALL
			COMMAND pyrcc5 -o ${DST} ${SRC}
			DEPENDS ${SRC}
			VERBATIM
		)
	endmacro()
	macro(PYQT_UI SRC DST)
		add_custom_target(""${DST}"" ALL
		#add_custom_command(OUTPUT ""${DST}"" ALL
			COMMAND pyuic5 --from-imports -o ${DST} ${SRC}
			DEPENDS ${SRC}
			VERBATIM
		)
	endmacro()
	PYQT_QRC(${CMAKE_SOURCE_DIR}/gui/qt4/img.qrc img_rc.py)
	PYQT_UI(${CMAKE_SOURCE_DIR}/gui/qt4/controller.ui ui_controller.py)
	#add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/ui_controller.py
	#	COMMAND pyuic5 --from-imports -o ${CMAKE_BINARY_DIR}/ui_controller.py gui/qt4/controller.ui
	#	DEPENDS gui/qt4/controller.ui
	#	VERBATIM
	#)
	install(FILES
		${CMAKE_BINARY_DIR}/img_rc.py
		${CMAKE_BINARY_DIR}/ui_controller.py
		gui/qt4/DisplayProfiles.py
		gui/qt4/ExceptionDialog.py
		gui/qt4/img_rc.py
		gui/qt4/__init__.py
		gui/qt4/Inspector.py
		gui/qt4/ObjectEditor.py
		gui/qt4/ui_controller.py
		DESTINATION ${WOO_MODULEDIR}/qt
	)
endif()


##
## run setup.py for wooExtra modules
##
configure_file(wooExtra.cmake ${CMAKE_BINARY_DIR}/wooExtra.cmake @ONLY)
install(SCRIPT ${CMAKE_BINARY_DIR}/wooExtra.cmake)
",3.10,3.1
21260,lxde,lxqt-panel,False,False,False,False,False,183,C++,2020-05-15 19:23:01+00:00,2013-08-06 10:48:38+00:00,98,3561,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-panel)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(WITH_SCREENSAVER_FALLBACK ""Include support for converting the deprecated 'screensaver' plugin to 'quicklaunch'. This requires the lxqt-leave (lxqt-session) to be installed in runtime."" ON)
# plugin-mainmenu
option(USE_MENU_CACHE ""Use menu-cached (no noticable penalty even on a 2004 single core pentium if not used)"" OFF)


# additional cmake files
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

macro(setByDefault VAR_NAME VAR_VALUE)
  if(NOT DEFINED ${VAR_NAME})
    set (${VAR_NAME} ${VAR_VALUE})
  endif(NOT DEFINED ${VAR_NAME})
endmacro()

include(GNUInstallDirs)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

set(REQUIRED_QT_VERSION ""5.10"")
set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_GLOBALKEYS_MINIMUM_VERSION ""0.15.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")

find_package(Qt5DBus ${REQUIRED_QT_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${REQUIRED_QT_VERSION} REQUIRED)
find_package(Qt5Widgets ${REQUIRED_QT_VERSION} REQUIRED)
find_package(Qt5X11Extras ${REQUIRED_QT_VERSION} REQUIRED)
find_package(Qt5Xml ${REQUIRED_QT_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-globalkeys-ui ${LXQT_GLOBALKEYS_MINIMUM_VERSION} REQUIRED)

# Patch Version
set(LXQT_PANEL_PATCH_VERSION 0)
set(LXQT_PANEL_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_PANEL_PATCH_VERSION})
add_definitions(""-DLXQT_PANEL_VERSION=\""${LXQT_PANEL_VERSION}\"""")

include(LXQtPreventInSourceBuilds)
include(LXQtTranslate)

# All LXQtCompilerSettings except CMAKE_MODULE_LINKER_FLAGS work just fine
# So we reset only these Flags after loading LXQtCompilerSettings
# lxqt-build-tools:
#  set(CMAKE_MODULE_LINKER_FLAGS ""-Wl,--no-undefined ${SYMBOLIC_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}"")
message(STATUS ""==OLD== CMAKE_MODULE_LINKER_FLAGS: ${CMAKE_MODULE_LINKER_FLAGS}"")
set( OLD_CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS}"")
include(LXQtCompilerSettings NO_POLICY_SCOPE)
set(CMAKE_MODULE_LINKER_FLAGS ""${OLD_CMAKE_MODULE_LINKER_FLAGS} ${SYMBOLIC_FLAGS}"")

# Warning: This must be before add_subdirectory(panel). Move with caution.
set(PLUGIN_DIR ""${CMAKE_INSTALL_FULL_LIBDIR}/lxqt-panel"")
add_definitions(
    -DPLUGIN_DIR=\""${PLUGIN_DIR}\""
)

message(STATUS ""CMAKE Module linker flags: ${CMAKE_MODULE_LINKER_FLAGS}"")
message(STATUS ""Panel plugins location: ${PLUGIN_DIR}"")

#########################################################################
# Plugin system
# You can enable/disable building of the plugin using cmake options.
#    cmake -DWORLDCLOCK_PLUGIN=Yes .. # Enable worldclock plugin
#    cmake -DWORLDCLOCK_PLUGIN=No ..  # Disable worldclock plugin

include(""cmake/BuildPlugin.cmake"")

set(ENABLED_PLUGINS) # list of enabled plugins
set(STATIC_PLUGINS) # list of statically linked plugins

setByDefault(COLORPICKER_PLUGIN Yes)
if(COLORPICKER_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Color Picker"")
    add_subdirectory(plugin-colorpicker)
endif()

setByDefault(CPULOAD_PLUGIN Yes)
if(CPULOAD_PLUGIN)
    find_library(STATGRAB_LIB statgrab)

    if(NOT STATGRAB_LIB)
        message(FATAL_ERROR ""CPU Load plugin requires libstatgrab"")
    endif()
    list(APPEND ENABLED_PLUGINS ""Cpu Load"")
    add_subdirectory(plugin-cpuload)
endif()

setByDefault(DIRECTORYMENU_PLUGIN Yes)
if(DIRECTORYMENU_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Directory menu"")
    add_subdirectory(plugin-directorymenu)
endif()

setByDefault(DOM_PLUGIN No)
if(DOM_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""DOM"")
    add_subdirectory(plugin-dom)
endif(DOM_PLUGIN)

setByDefault(DESKTOPSWITCH_PLUGIN Yes)
if(DESKTOPSWITCH_PLUGIN)
    list(APPEND STATIC_PLUGINS ""desktopswitch"")
    add_definitions(-DWITH_DESKTOPSWITCH_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Desktop Switcher"")
    add_subdirectory(plugin-desktopswitch)
endif()

setByDefault(KBINDICATOR_PLUGIN Yes)
if(KBINDICATOR_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Keyboard Indicator"")
    add_subdirectory(plugin-kbindicator)
endif(KBINDICATOR_PLUGIN)

setByDefault(MAINMENU_PLUGIN Yes)
if(MAINMENU_PLUGIN)
    list(APPEND STATIC_PLUGINS ""mainmenu"")
    add_definitions(-DWITH_MAINMENU_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Application menu"")
    add_subdirectory(plugin-mainmenu)
endif()

setByDefault(MOUNT_PLUGIN Yes)
if(MOUNT_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Mount"")
    add_subdirectory(plugin-mount)
endif(MOUNT_PLUGIN)

setByDefault(QUICKLAUNCH_PLUGIN Yes)
if(QUICKLAUNCH_PLUGIN)
    list(APPEND STATIC_PLUGINS ""quicklaunch"")
    add_definitions(-DWITH_QUICKLAUNCH_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Quicklaunch"")
    add_subdirectory(plugin-quicklaunch)
endif()

setByDefault(SENSORS_PLUGIN Yes)
if(SENSORS_PLUGIN)
    find_library(SENSORS_LIB sensors)

    if(NOT SENSORS_LIB)
        message(FATAL_ERROR ""Sensors plugin requires lm_sensors"")
    endif()
    list(APPEND ENABLED_PLUGINS ""Sensors"")
    add_subdirectory(plugin-sensors)
endif()

setByDefault(SHOWDESKTOP_PLUGIN Yes)
if(SHOWDESKTOP_PLUGIN)
    list(APPEND STATIC_PLUGINS ""showdesktop"")
    add_definitions(-DWITH_SHOWDESKTOP_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Show Desktop"")
    add_subdirectory(plugin-showdesktop)
endif()

setByDefault(NETWORKMONITOR_PLUGIN Yes)
if(NETWORKMONITOR_PLUGIN)
    find_library(STATGRAB_LIB statgrab)

    if(NOT STATGRAB_LIB)
        message(FATAL_ERROR ""Network Monitor plugin requires libstatgrab"")
    endif()
    list(APPEND ENABLED_PLUGINS ""Network Monitor"")
    add_subdirectory(plugin-networkmonitor)
endif()

setByDefault(SYSSTAT_PLUGIN Yes)
if(SYSSTAT_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""System Stats"")
    add_subdirectory(plugin-sysstat)
endif(SYSSTAT_PLUGIN)

setByDefault(TASKBAR_PLUGIN Yes)
if(TASKBAR_PLUGIN)
  list(APPEND STATIC_PLUGINS ""taskbar"")
  add_definitions(-DWITH_TASKBAR_PLUGIN)
  list(APPEND ENABLED_PLUGINS ""Taskbar"")
  add_subdirectory(plugin-taskbar)
endif()

setByDefault(STATUSNOTIFIER_PLUGIN Yes)
if(STATUSNOTIFIER_PLUGIN)
    list(APPEND STATIC_PLUGINS ""statusnotifier"")
    add_definitions(-DWITH_STATUSNOTIFIER_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Status Notifier"")
    add_subdirectory(plugin-statusnotifier)
endif()

setByDefault(TRAY_PLUGIN Yes)
if(TRAY_PLUGIN)
    list(APPEND STATIC_PLUGINS ""tray"")
    add_definitions(-DWITH_TRAY_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""System Tray"")
    add_subdirectory(plugin-tray)
endif()

setByDefault(VOLUME_PLUGIN Yes)
setByDefault(VOLUME_USE_PULSEAUDIO Yes)
setByDefault(VOLUME_USE_ALSA Yes)
if(VOLUME_PLUGIN)
    if (VOLUME_USE_PULSEAUDIO)
        find_package(PulseAudio)
        if (NOT PULSEAUDIO_FOUND)
            message(FATAL_ERROR ""PulseAudio not found, but required (VOLUME_USE_PULSEAUDIO) for Volume plugin!"")
        endif ()
    endif(VOLUME_USE_PULSEAUDIO)

    if(VOLUME_USE_ALSA)
        find_package(ALSA)
        if (NOT ALSA_FOUND)
            message(FATAL_ERROR ""ALSA not found, but required (VOLUME_USE_ALSA) for Volume plugin!"")
        endif ()
    endif()

    list(APPEND ENABLED_PLUGINS   ""Volume"")
    message(STATUS """")
    message(STATUS ""Volume plugin will be built"")
    message(STATUS ""    ALSA: ${ALSA_FOUND}"")
    message(STATUS ""    PulseAudio: ${PULSEAUDIO_FOUND}"")
    message(STATUS """")
    add_subdirectory(plugin-volume)
endif()

setByDefault(WORLDCLOCK_PLUGIN Yes)
if(WORLDCLOCK_PLUGIN)
    list(APPEND STATIC_PLUGINS ""worldclock"")
    add_definitions(-DWITH_WORLDCLOCK_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""World Clock"")
    add_subdirectory(plugin-worldclock)
endif(WORLDCLOCK_PLUGIN)

setByDefault(SPACER_PLUGIN Yes)
if(SPACER_PLUGIN)
    list(APPEND STATIC_PLUGINS ""spacer"")
    add_definitions(-DWITH_SPACER_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Spacer"")
    add_subdirectory(plugin-spacer)
endif()

setByDefault(BACKLIGHT_PLUGIN Yes)
if(BACKLIGHT_PLUGIN)
    list(APPEND ENABLED_PLUGINS ""Backlight"")
    add_subdirectory(plugin-backlight)
endif()

#########################################################################

message(STATUS  ""**************** The following plugins will be built ****************"")
foreach (PLUGIN_STR ${ENABLED_PLUGINS})
    message(STATUS ""  ${PLUGIN_STR}"")
endforeach()
message(STATUS ""*********************************************************************"")

add_subdirectory(panel)

# merged from lxqt-common
add_subdirectory(autostart)
add_subdirectory(menu)
",3.1.0,3.1
21343,votca,xtp,False,False,False,False,False,20,C++,2020-05-15 06:09:22+00:00,2016-01-20 17:47:47+00:00,20,6701,"cmake_minimum_required(VERSION 3.10)
project(votca-xtp)

set(PROJECT_VERSION ""1.7-dev"")

set(PROJECT_CONTACT ""bugs@votca.org"")
string(REGEX REPLACE ""^[1-9]+\\.([1-9]+).*$"" ""\\1"" SOVERSION ""${PROJECT_VERSION}"")
if (NOT ${SOVERSION} MATCHES ""[1-9]+"")
  message(FATAL_ERROR ""Could not determind SOVERSION from ${PROJECT_VERSION}"")
endif (NOT ${SOVERSION} MATCHES ""[1-9]+"")

# Cmake modules/macros are in a subdirectory to keep this file cleaner
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
  #Release comes with -O3 by default
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
if(CMAKE_BUILD_TYPE STREQUAL Debug)
  add_definitions(-DDEBUG)
endif()

enable_language(CXX)

######################################################################
# compiler tests
# these need ot be done early (before further tests).
#####################################################################

include(FeatureSummary)
include(CheckCXXCompilerFlag)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) #...without compiler extensions like gnu++11

find_package(OpenMP)
set_package_properties(OpenMP PROPERTIES TYPE RECOMMENDED PURPOSE ""Used for thread parallelization in xtp"")
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
endif()

########################################################################
# User input options                                                   #
########################################################################

find_package(LIBXC REQUIRED)
set_package_properties(LIBXC PROPERTIES TYPE REQUIRED PURPOSE ""Used for exchange-correlation calculations"")
find_package(HDF5 1.8 REQUIRED COMPONENTS CXX)
set_package_properties(HDF5 PROPERTIES TYPE REQUIRED PURPOSE ""Used to read/write HDF5 data files"")

if(HDF5_VERSION VERSION_GREATER 1.8)
  message(WARNING ""HDF5 will be used such that it is compatible with version 1.8."")
endif()

# https://github.com/votca/xtp/issues/436, hdf5-1.10.4 generates a implicitly-declared operator warning
if(HDF5_VERSION VERSION_EQUAL 1.10.4)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-deprecated-copy"")
endif()

option(BUILD_SHARED_LIBS ""Build shared libs"" ON)
include(GNUInstallDirs)

option(USE_CUDA ""Use a Nvidia GPU to speed up computations"" OFF)
add_feature_info(USE_CUDA USE_CUDA ""Use CUDA for GPU acceleration"")

option(ENABLE_TESTING ""Build and enable testing stuff"" OFF)
add_feature_info(ENABLE_TESTING ENABLE_TESTING ""Enable unit tests"")
if(ENABLE_TESTING)
  enable_testing()
endif(ENABLE_TESTING)

########################################################################
#Find external packages
########################################################################
if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  find_package(Git)
  set_package_properties(Git PROPERTIES TYPE OPTIONAL PURPOSE ""Generated version for development version"")
endif(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)

find_package(Boost 1.57.0 REQUIRED COMPONENTS program_options filesystem system timer)
find_package(Eigen3 3.3.0 REQUIRED NO_MODULE)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set_package_properties(Boost PROPERTIES TYPE REQUIRED PURPOSE ""Extended C++ libraries"")
  set_package_properties(Eigen3 PROPERTIES TYPE REQUIRED PURPOSE ""C++ vector data structures"")
endif()
message(STATUS ""Found Eigen3: ${Eigen3_DIR}"")

option(BUILD_MANPAGES ""Build manpages (might lead to problem on system without rpath"" OFF)
add_feature_info(BUILD_MANPAGES BUILD_MANPAGES ""Build manpages (disable for cross-compile)"")
#define this target here, so that individual man pages can append to it.
if(NOT TARGET manpages)
  add_custom_target(manpages ALL)
endif()

find_package(VOTCA_TOOLS REQUIRED NO_MODULE)
set_package_properties(VOTCA_TOOLS PROPERTIES TYPE REQUIRED PURPOSE ""Votca base library"")
if(DEFINED VOTCA_TOOLS_VERSION AND NOT VOTCA_TOOLS_VERSION STREQUAL PROJECT_VERSION)
  message(FATAL_ERROR ""Incompatible VOTCA Tools version found (needed ${PROJECT_VERSION}, found ${VOTCA_TOOLS_VERSION})"")
endif()
message(STATUS ""Found VOTCA_TOOLS: ${VOTCA_TOOLS_DIR}"")
find_package(VOTCA_CSG REQUIRED NO_MODULE)
set_package_properties(VOTCA_TOOLS PROPERTIES TYPE REQUIRED PURPOSE ""Votca csg library"")
if(DEFINED VOTCA_CSG_VERSION AND NOT VOTCA_CSG_VERSION STREQUAL PROJECT_VERSION)
  message(FATAL_ERROR ""Incompatible VOTCA CSG version found (needed ${PROJECT_VERSION}, found ${VOTCA_CSG_VERSION})"")
endif()
message(STATUS ""Found VOTCA_CSG: ${VOTCA_CSG_DIR}"")

if(USE_CUDA)
  find_package(CUDA REQUIRED)
  set_package_properties(CUDA PROPERTIES TYPE REQUIRED PURPOSE ""Used for GPU acceleration"")
endif(USE_CUDA)

find_package(Kokkos 3.0 CONFIG)
set_package_properties(Kokkos PROPERTIES TYPE OPTIONAL PURPOSE ""Used to Ewald solver"")

########################################################################
# Checks what linear algebra packages are installed                    #
########################################################################



########################################################################
# Basic system tests (standard libraries, headers, functions, types)   #
########################################################################
include(CheckIncludeFile)
foreach(HEADER assert.h)
  check_include_file(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

include(CheckIncludeFileCXX)
foreach(HEADER algorithm)
  check_include_file_cxx(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

set(MATH_LIBRARIES ""m"" CACHE STRING ""math library"")
mark_as_advanced( MATH_LIBRARIES )
include(CheckLibraryExists)
foreach(FUNC sqrt)
  check_library_exists(${MATH_LIBRARIES} ${FUNC} """" FOUND_${FUNC}_${MATH_LIBRARIES})
  if(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
    message(FATAL_ERROR ""Could not find needed math function - ${FUNC}"")
  endif(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
endforeach(FUNC)

######################################
# Include the following subdirectory #
######################################
add_subdirectory(include/votca/xtp)
add_subdirectory(scripts)
add_subdirectory(src)
add_subdirectory(share)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  feature_summary(INCLUDE_QUIET_PACKAGES WHAT ALL)
endif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
",3.10,3.1
21367,BelledonneCommunications,bzrtp,False,False,False,False,False,14,C,2020-05-11 12:30:42+00:00,2015-01-19 09:19:42+00:00,12,243,"############################################################################
# CMakeLists.txt
# Copyright (C) 2010-2019  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)

project(bzrtp VERSION 4.4.0 LANGUAGES C CXX)

option(ENABLE_SHARED ""Build shared library."" YES)
option(ENABLE_STATIC ""Build static library."" YES)
option(ENABLE_ZIDCACHE ""Turn on compilation of ZID cache, request sqlite"" YES)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_TESTS ""Enable compilation of unit tests."" NO)
option(ENABLE_EXPORTEDKEY_V1_0_RETROCOMPATIBILITY ""Enable support for Limev1 with older version of bzrtp(before v1.06)"" YES)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)


if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

set(MSVC_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC"")
if(MSVC)
	list(APPEND CMAKE_REQUIRED_INCLUDES ${MSVC_INCLUDE_DIR})
endif()

include(GNUInstallDirs)
include(CheckLibraryExists)
check_library_exists(""m"" ""sqrt"" """" HAVE_SQRT)

find_package(bctoolbox 0.0.3 REQUIRED OPTIONAL_COMPONENTS tester CONFIG)

if(ENABLE_ZIDCACHE)
	find_package(Sqlite3 REQUIRED)
	# Also check if we have libxml2, as we need it for migration purpose
	find_package(XML2)
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/config.h PROPERTIES GENERATED ON)
add_definitions(""-DHAVE_CONFIG_H"")

set(STRICT_OPTIONS_CPP )
if(NOT MSVC)
	list(APPEND STRICT_OPTIONS_CPP ""-Wall"")
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Qunused-arguments"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-Wno-missing-field-initializers"")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
	string(REPLACE "";"" "" "" STRICT_OPTIONS_CPP ""${STRICT_OPTIONS_CPP}"")
endif()

set(BZRTP_CPPFLAGS ${BCTOOLBOX_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND BZRTP_CPPFLAGS ""-DBZRTP_STATIC"")
endif()
if(BZRTP_CPPFLAGS)
	list(REMOVE_DUPLICATES BZRTP_CPPFLAGS)
	add_definitions(${BZRTP_CPPFLAGS})
endif()

include_directories(
	include
	${CMAKE_CURRENT_BINARY_DIR}
)

if(MSVC)
	include_directories(${MSVC_INCLUDE_DIR})
endif()

if(ENABLE_ZIDCACHE)
	add_definitions(""-DZIDCACHE_ENABLED"")
	if(XML2_FOUND)
		add_definitions(""-DHAVE_LIBXML2"")
	endif()
endif()

if (ENABLE_EXPORTEDKEY_V1_0_RETROCOMPATIBILITY)
	add_definitions(""-DSUPPORT_EXPORTEDKEY_V010000"")
endif()

set(EXPORT_TARGETS_NAME ""bzrtp"")

add_subdirectory(include)
add_subdirectory(src)
if(ENABLE_TESTS)
	enable_testing()
	add_subdirectory(test)
endif()


include(CMakePackageConfigHelpers)
set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/cmake"")

write_basic_package_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}ConfigVersion.cmake""
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY AnyNewerVersion
)
export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Targets.cmake""
)

configure_package_config_file(cmake/BZRTPConfig.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Config.cmake""
	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
	NO_SET_AND_CHECK_MACRO
)

install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ${EXPORT_TARGETS_NAME}Targets.cmake
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}Config.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGETS_NAME}ConfigVersion.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()
",3.1,3.1
21571,TeXworks,texworks,False,False,False,False,False,30,C++,2020-05-16 10:36:01+00:00,2015-03-14 09:56:21+00:00,393,2062,"# Top-level build file for [TeXworks][tw], a simple editor for TeX and friends.
#
# This buildsystem uses [CMake][cmake] and consists of the following files:
#
# <pre>
#   TeXworks
#   ├── <a href=""CMakeLists.html"">CMakeLists.txt</a>
#   ├── src
#   │   └── <a href=""src/CMakeLists.html"">CMakeLists.txt</a>
#   ├── modules
#   │   ├── <a href=""modules/CMakeLists.html"">CMakeLists.txt</a>
#   │   ├── synctex
#   │   │   └── <a href=""modules/synctex/CMakeLists.html"">CMakeLists.txt</a>
#   │   └── QtPDF (documented separately)
#   ├── plugins-src
#   │   ├── TWLuaPlugin
#   │   │   └── <a href=""plugins-src/TWLuaPlugin/CMakeLists.html"">CMakeLists.txt</a>
#   │   └── TWPythonPlugin
#   │       └── <a href=""plugins-src/TWPythonPlugin/CMakeLists.html"">CMakeLists.txt</a>
#   ├── unit-tests
#   │   └── <a href=""unit-tests/CMakeLists.html"">CMakeLists.txt</a>
#   └── CMake
#       └── packaging
#           ├── <a href=""CMake/packaging/CMakeLists.html"">CMakeLists.txt</a>
#           └── mac
#               └── <a href=""CMake/packaging/mac/MacPackagingTasks.cmake.html"">MacPackagingTasks.cmake.in</a>
# </pre>
#
# Using CMake as a buildsystem offers some nice advantages:
#
#   * Supports component discovery and configuration for all three major
#     operating systems and can set TeXworks up to be built using GNU
#     Makefiles, XCode or Visual Studio.
#
#   * Includes CPack, a tool which simplifies the task of packaging the
#     TeXworks app for release after it has been built. CPack can generate
#     Drag N' Drop installers for the Mac, Nullsoft installers for Windows and
#     `.deb` or `.rpm` packages for Linux.
#
# Comments in the CMake files follow [Markdown][md] formatting conventions.
# This convention allows the `CMakeLists.txt` files to be passed through a tool
# such as [Docco][docco] to create a nicely annotated README for the benefit of
# future developers and maintainers.
#
#   [cmake]: http://www.cmake.org
#   [docco]: http://jashkenas.github.com/docco
#   [md]: http://daringfireball.net/projects/markdown/
#   [tw]: https://github.com/TeXworks/texworks


# Setup and User Options
# ======================

# Set project name.
PROJECT(TeXworks)

# CMake 3.1 significantly improves support for imported targets, Qt5, c++11, etc.
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
CMAKE_POLICY(VERSION 3.1)

# Silence warning about linking to qtmain.lib statically on Windows
IF(POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
ENDIF()

# Silence warning about using @rpath on OS X.
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

# Silence warning about ninja custom command byproducts
if(POLICY CMP0058)
  cmake_policy(SET CMP0058 NEW)
endif()

# Silence warning about option() treating variables differently on the first run
if(POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif()

SET(CMAKE_COLOR_MAKEFILE ON)
# Always add the current source and binary directories to the header include
# path when compiling.
SET(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(CMAKE_AUTOMOC TRUE)
SET(CMAKE_AUTORCC TRUE)
SET(CMAKE_AUTOUIC TRUE)

# Make the contents of `CMake/Modules` available. Among other things, this
# directory contains scripts that locate project components such as hunspell.
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/Modules ${PROJECT_SOURCE_DIR}/modules/QtPDF/CMake/Modules ${CMAKE_MODULE_PATH})

IF(WIN32 AND MINGW)
  # Ensure that no cpp flags are passed to windres, the Windows resource compiler.
  # At least with MinGW 4 on Windows, that would cause problems
  SET(CMAKE_RC_COMPILE_OBJECT ""<CMAKE_RC_COMPILER> -O coff <DEFINES> <SOURCE> <OBJECT>"")
ENDIF()

if (MSVC)
	set(WARNING_OPTIONS /W4)
else ()
	set(WARNING_OPTIONS -Wall -Wpedantic -Wextra -Wconversion -Wold-style-cast -Woverloaded-virtual -Wzero-as-null-pointer-constant)
endif ()


# Determine Version Numbers
# -------------------------

# The values recovered here are used in the filenames of packaged builds and
# influence parts of the application such as the ""About"" dialog.

#include(TeXworksVersion)
#
#GetTeXworksVersion()
#UpdateGitRevInfo()
#GetGitRevInfo()

# Recover canonical (x.y.z) version number from `src/TWVersion.h`.
FILE(STRINGS ${PROJECT_SOURCE_DIR}/src/TWVersion.h TeXworks_VER_MAJOR REGEX ""VER_MAJOR"")
STRING(REGEX MATCH ""([0-9]+)"" TeXworks_VER_MAJOR ${TeXworks_VER_MAJOR})
FILE(STRINGS ${PROJECT_SOURCE_DIR}/src/TWVersion.h TeXworks_VER_MINOR REGEX ""VER_MINOR"")
STRING(REGEX MATCH ""([0-9]+)"" TeXworks_VER_MINOR ${TeXworks_VER_MINOR})
FILE(STRINGS ${PROJECT_SOURCE_DIR}/src/TWVersion.h TeXworks_VER_PATCH REGEX ""VER_BUGFIX"")
STRING(REGEX MATCH ""([0-9]+)"" TeXworks_VER_PATCH ${TeXworks_VER_PATCH})
SET(TeXworks_VERSION ${TeXworks_VER_MAJOR}.${TeXworks_VER_MINOR}.${TeXworks_VER_PATCH})

# Make sure we have up-to-date git commit infos
execute_process(COMMAND ""${CMAKE_COMMAND}"" ""-DOUTPUT_DIR=${CMAKE_CURRENT_BINARY_DIR}/src"" -P ""${PROJECT_SOURCE_DIR}/CMake/Modules/getGitRevInfo.cmake"" WORKING_DIRECTORY ""${PROJECT_SOURCE_DIR}"")
add_custom_target(GitRev ALL ""${CMAKE_COMMAND}"" ""-DOUTPUT_DIR=${CMAKE_CURRENT_BINARY_DIR}/src"" -P ""${PROJECT_SOURCE_DIR}/CMake/Modules/getGitRevInfo.cmake"" WORKING_DIRECTORY ""${PROJECT_SOURCE_DIR}"" COMMENT ""Update git commit info"")

# Recover git commit info from `src/GitRev.h`.
FILE(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/src/GitRev.h TeXworks_GIT_INFO)
LIST(GET TeXworks_GIT_INFO 1 TeXworks_GIT_COMMIT)
STRING(REGEX REPLACE ""#define GIT_COMMIT_HASH \""([a-f0-9]+\\*?)\"""" ""\\1"" TeXworks_GIT_HASH ""${TeXworks_GIT_COMMIT}"")
LIST(GET TeXworks_GIT_INFO 2 TeXworks_GIT_COMMIT)
STRING(REGEX REPLACE ""#define GIT_COMMIT_DATE \""([-+:0-9 Z]+)\"""" ""\\1"" TeXworks_GIT_DATE ""${TeXworks_GIT_COMMIT}"")


# Declare Project Options
# -----------------------

# These are options that users can set at configure-time to determine how the
# application is built and what functionalities it will have. Here we declare
# these options by setting default values.

SET(TW_BUILD_ID ""personal"" CACHE STRING ""A distribution-specific identifier for TeXworks"")

# Build with shared libs by default
OPTION(BUILD_SHARED_LIBS ""Build with shared libs?"" ON)
MARK_AS_ADVANCED(BUILD_SHARED_LIBS)

# Build shared plugins by default
OPTION(BUILD_SHARED_PLUGINS ""Build shared plugins?"" ${BUILD_SHARED_LIBS})
MARK_AS_ADVANCED(BUILD_SHARED_PLUGINS)

OPTION(PREFER_BUNDLED_SYNCTEX ""Use SyncTeX bundled with TeXworks even if a shared library is found?"" OFF)
MARK_AS_ADVANCED(PREFER_BUNDLED_SYNCTEX)

OPTION(WITH_TESTS ""build unit tests"" ON)
IF (WITH_TESTS)
  ENABLE_TESTING(TRUE)
ENDIF (WITH_TESTS)

OPTION(WITH_COVERAGE ""build with lcov coverage support"" OFF)
IF (WITH_COVERAGE)
  IF (NOT (CMAKE_BUILD_TYPE STREQUAL ""Debug"" AND WITH_TESTS))
    MESSAGE(WARNING ""Coverage support is intended to be used with Debug builds and testing enabled"")
  ENDIF ()
  INCLUDE(CodeCoverage)
  APPEND_COVERAGE_COMPILER_FLAGS()
  IF (UNIX)
    SET(COVERAGE_LCOV_EXCLUDES '/usr/*')
  ENDIF (UNIX)
  SETUP_TARGET_FOR_COVERAGE_LCOV(NAME coverage EXECUTABLE ""${CMAKE_CTEST_COMMAND}"")
ENDIF (WITH_COVERAGE)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR} CACHE PATH ""Path to place libraries in"")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR} CACHE PATH ""Path to place programs in"")
MARK_AS_ADVANCED(CMAKE_LIBRARY_OUTPUT_DIRECTORY CMAKE_RUNTIME_OUTPUT_DIRECTORY)

# On UNIX, CMake installs to `/usr/local` by default. However, Mac users
# will probably find `/Applications` a more convenient default.
IF( APPLE AND CMAKE_INSTALL_PREFIX MATCHES ""/usr/local"" )
  SET( CMAKE_INSTALL_PREFIX ""/Applications"" )
ENDIF()

# Do an optimized release build by default
IF ( NOT CMAKE_BUILD_TYPE )
  SET(CMAKE_BUILD_TYPE ""Release"")
ENDIF ()

# Options controlling the creation of scripting language plugins.
OPTION(WITH_LUA ""Build TeXworks Lua plugin?"" ON)
OPTION(WITH_PYTHON ""Build TeXworks Python plugin?"" OFF)

# On OS X we default to linking against the Python libraries provided by Apple
# even if other Pythons are available. This helps when building
# re-distributable `.app` packages. By disabling this option, a Mac user can
# link against whatever Python they wish for a personal build.
IF ( APPLE )
  OPTION(USE_SYSTEM_PYTHON ""Link against Python Framework distributed with OS X?"" ON)
ENDIF ()

IF (UNIX AND NOT APPLE)
  SET(TeXworks_HELP_DIR share/doc/texworks-help CACHE PATH ""Path where TeXworks looks for help files"")
  SET(TeXworks_DIC_DIR /usr/share/hunspell:/usr/share/myspell/dicts CACHE PATH ""Path where TeXworks looks for spellchecking dictionaries"")
  SET(TeXworks_DOCS_DIR share/doc/texworks CACHE PATH ""Path in which documentation files are installed"")
  SET(TeXworks_ICON_DIR share/icons/hicolor CACHE PATH ""Path in which icons are installed"")
  SET(TeXworks_MAN_DIR share/man/man1 CACHE PATH ""Path in which manpages are installed"")
  SET(TeXworks_DESKTOP_DIR share/applications CACHE PATH ""Path in which .desktop files are installed"")
  SET(TeXworks_APPDATA_DIR share/metainfo CACHE PATH ""Path in which .appdata.xml files are installed"")
  MARK_AS_ADVANCED(TeXworks_HELP_DIR)
  MARK_AS_ADVANCED(TeXworks_DIC_DIR)
  MARK_AS_ADVANCED(TeXworks_DOCS_DIR)
  MARK_AS_ADVANCED(TeXworks_ICON_DIR)
  MARK_AS_ADVANCED(TeXworks_MAN_DIR)
  MARK_AS_ADVANCED(TeXworks_DESKTOP_DIR)
  MARK_AS_ADVANCED(TeXworks_APPDATA_DIR)
  IF (EXISTS ${TeXworks_SOURCE_DIR}/manual/)
    INSTALL(DIRECTORY ${TeXworks_SOURCE_DIR}/manual/ DESTINATION ${CMAKE_INSTALL_PREFIX}/${TeXworks_HELP_DIR}/ OPTIONAL)
  ENDIF()
ENDIF()

# Source: https://stackoverflow.com/a/31010221
macro(use_cxx11)
  if (CMAKE_VERSION VERSION_LESS ""3.1"")
    if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
      set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")
    endif ()
  else ()
    set (CMAKE_CXX_STANDARD 11)
  endif ()
endmacro(use_cxx11)

use_cxx11()

# Dependency Configuration
# ========================

# Check for Qt5
find_package(Qt5 REQUIRED COMPONENTS Core Widgets Gui UiTools Concurrent Script ScriptTools Xml LinguistTools)
set(QT_LIBRARIES Qt5::Core Qt5::Widgets Qt5::Gui Qt5::UiTools Qt5::Concurrent Qt5::ScriptTools Qt5::Script Qt5::Xml)

if (UNIX AND NOT APPLE)
  find_package(Qt5 REQUIRED COMPONENTS DBus)
  list(APPEND QT_LIBRARIES Qt5::DBus)
endif ()

if (WITH_TESTS)
  find_package(Qt5 OPTIONAL_COMPONENTS Test QUIET)
  if (NOT Qt5Test_FOUND)
    set(WITH_TESTS OFF)
  else ()
    list(APPEND QT_LIBRARIES Qt5::Test)
  endif ()
endif ()

if (WIN32 AND NOT BUILD_SHARED_LIBS)
  find_package(Qt5WindowsPlatformSupport)
  list(APPEND QT_LIBRARIES Qt5::WindowsPlatformSupport)
endif ()

# Note: Qt5 only sets Qt5Widgets_VERSION, etc., but not QT_VERSION_MAJOR,
# etc. which is used here.
string(REGEX REPLACE ""^([0-9]+).*$"" ""\\1"" QT_VERSION_MAJOR ""${Qt5Widgets_VERSION}"")
string(REGEX REPLACE ""^[0-9]+\\.([0-9]+).*$"" ""\\1"" QT_VERSION_MINOR  ""${Qt5Widgets_VERSION}"")
string(REGEX REPLACE ""^[0-9]+\\.[0-9]+\\.([0-9]+).*$"" ""\\1"" QT_VERSION_PATCH ""${Qt5Widgets_VERSION}"")


# Expose the major version number of Qt to the preprocessor. This is necessary
# to include the correct Qt headers (as QTVERSION is not defined before any Qt
# headers are included)
ADD_DEFINITIONS(-DQT_VERSION_MAJOR=${QT_VERSION_MAJOR})



FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(Hunspell REQUIRED)
FIND_PACKAGE(Synctex QUIET)

# Aggregate library names and include directories into variables for easy
# access.

SET(TeXworks_LIBS
  SyncTeX::synctex
  Hunspell::hunspell
  ${QT_LIBRARIES}
  ZLIB::ZLIB
  ${TEXWORKS_ADDITIONAL_LIBS}
)



# Configure Optional Dependencies
# -------------------------------

IF ( WITH_LUA )
  FIND_PACKAGE(Lua)
ENDIF()

IF ( WITH_PYTHON )
  IF ( USE_SYSTEM_PYTHON )
    SET(PYTHON_LIBRARIES ""-F/System/Library/Frameworks -framework Python"" CACHE PATH ""Python library."")
    SET(PYTHON_INCLUDE_DIR ""/System/Library/Framework/Python.framework/Headers"" CACHE PATH ""Python framework."")
    MARK_AS_ADVANCED(PYTHON_LIBRARIES)
    MARK_AS_ADVANCED(PYTHON_INCLUDE_DIR)
    SET(PYTHONLIBS_FOUND TRUE)
  ELSE ()
    # **NOTE**
    # In order to find the correct version of 'PythonLibs', it seems that we need to run 'FIND_PACKAGE(PythonInterp)' firstly.
    # In order to find the correct version of 'PythonInterp', we need to set 'PYTHONHOME' environment variable
    FIND_PACKAGE(PythonInterp)
    FIND_PACKAGE(PythonLibs)
  ENDIF ()
ENDIF()

IF ( LUA_FOUND AND WITH_LUA AND NOT ${BUILD_SHARED_PLUGINS})
  ADD_DEFINITIONS(-DQT_STATICPLUGIN -DSTATIC_LUA_SCRIPTING_PLUGIN)
ENDIF ()

IF ( PYTHONLIBS_FOUND AND WITH_PYTHON AND NOT ${BUILD_SHARED_PLUGINS})
  ADD_DEFINITIONS(-DQT_STATICPLUGIN -DSTATIC_PYTHON_SCRIPTING_PLUGIN)
ENDIF ()


# Update Header Templates
# -----------------------

include(GenerateDefaultBinPaths)
GenerateDefaultBinPaths()

# Building
# ========

# Build modules
ADD_SUBDIRECTORY(modules)

# Build Plugins
# -------------

# On OS X, the plugins should live inside the application bundle.
IF ( APPLE )
  SET(TeXworks_PLUGIN_DIR ${PROJECT_NAME}.app/Contents/PlugIns)
  # Plugins are build as shared libraries that contain undefined symbols.
  # Pass `-undefined dynamic_lookup` so that the Apple linker does not
  # freak out about this.
  SET(CMAKE_MODULE_LINKER_FLAGS
    ""${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup"")
ELSEIF (WIN32)
  # Put plugins alongside the main app in the root installation folder on Windows
  SET(TeXworks_PLUGIN_DIR . CACHE PATH ""Path where TeXworks looks for plugins"")
  MARK_AS_ADVANCED(TeXworks_PLUGIN_DIR)
ELSE ()
  # Set the plugin installation path. This is a good default for UNIX-like
  # systems, but is not appropriate for Windows.
  SET(TeXworks_PLUGIN_DIR lib/texworks CACHE PATH ""Path where TeXworks looks for plugins"")
  MARK_AS_ADVANCED(TeXworks_PLUGIN_DIR)
ENDIF ()

# Build main TeXworks application
# -------------------------------
ADD_SUBDIRECTORY(src)

# Build Plugins
# -------------

# Build scripting language plugins if the required libraries are available.
IF ( LUA_FOUND AND WITH_LUA )
  ADD_SUBDIRECTORY(${TeXworks_SOURCE_DIR}/plugins-src/TWLuaPlugin)
ENDIF ()

IF ( PYTHONLIBS_FOUND AND WITH_PYTHON )
  ADD_SUBDIRECTORY(${TeXworks_SOURCE_DIR}/plugins-src/TWPythonPlugin)
ENDIF ()

# Tests
# -----
IF (WITH_TESTS)
  ADD_SUBDIRECTORY(unit-tests)
ENDIF (WITH_TESTS)


# Packaging
# =========

# This section is responsible for executing all tasks that run when a user
# invokes `cpack` or `make package` after executing their platform's equivalent
# of of `make`. The packaging tasks are responsible for two things:
#
#  * Applying transformations to the compiled binaries such that they can be
#    distributed to another machine.
#
#  * Gathering all binaries and libraries and packaging them into an archive
#    suitable for distribution such as a Windows installer or Mac disk image
#    file.

# Gather all libraries related to Qt plugins used by TeXworks so that they can
# be bundled into packages.
if (WIN32)
  get_target_property(QT_QPLATFORM_PLUGIN_RELEASE Qt5::QWindowsIntegrationPlugin LOCATION_Release)
elseif (APPLE)
  get_target_property(QT_QPLATFORM_PLUGIN_RELEASE Qt5::QCocoaIntegrationPlugin LOCATION_Release)
endif ()
SET(QT_PLUGINS ""${QT_QPLATFORM_PLUGIN_RELEASE}"")

# The file `CMake/packaging/CMakeLists.txt` controls the execution of tasks
# specific to preparing binaries for packaging on a given platform. This script
# is invoked via `ADD_SUBDIRECTORY` so that it executes after TeXworks and its
# components are built and installed. You cannot fixup an application bundle
# before it has been created...
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/CMake/packaging)

# Set CPack variables.
SET(CPACK_PACKAGE_VERSION_MAJOR ${TeXworks_VER_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${TeXworks_VER_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${TeXworks_VER_PATCH})
SET(CPACK_PACKAGE_VERSION ${TeXworks_VERSION})

SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})
SET(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}.${CPACK_PACKAGE_VERSION}-${TeXworks_GIT_HASH}"")

# Configure Drag N' Drop installer.
IF ( APPLE )
  SET(MAC_PACK_BITS ""${CMAKE_SOURCE_DIR}/CMake/packaging/mac"")
  SET(CPACK_GENERATOR DragNDrop)
  SET( CPACK_DMG_BACKGROUND_IMAGE ""${MAC_PACK_BITS}/texworks_dmg_background.png"" )

  # Configure an AppleScript for applying a nice window layout to Drag N' Drop disk
  # image.
  CONFIGURE_FILE( ${MAC_PACK_BITS}/set_dmg_layout.scpt.in
    ${PROJECT_BINARY_DIR}/set_dmg_layout.scpt
    @ONLY
  )
ENDIF ()

INCLUDE(CPack)


# Summary
# =======

# This section displays a nice configuration summary for the user.

# These macros borrowed from the Poppler CMake scripts. They add some nice
# formatting to configuration info.
MACRO(CONFIG_INFO what value)
  STRING(LENGTH ${what} length_what)
  MATH(EXPR left_char ""35 - ${length_what}"")
  SET(blanks)
  FOREACH(_i RANGE 1 ${left_char})
    SET(blanks ""${blanks} "")
  ENDFOREACH()

  MESSAGE(""  ${what}:${blanks} ${value}"")
ENDMACRO()

MACRO(CONFIG_YESNO what enabled)
  IF(${enabled})
    SET(enabled_string ""yes"")
  ELSE(${enabled})
    SET(enabled_string ""no"")
  ENDIF()

  CONFIG_INFO(""${what}"" ""${enabled_string}"")
ENDMACRO()

# Print out configuration summary.
MESSAGE(""TeXworks has been configured:\n"")

CONFIG_INFO(""Version"" ${TeXworks_VERSION})
CONFIG_INFO(""Git Commit"" ""${TeXworks_GIT_HASH} (${TeXworks_GIT_DATE})"")
CONFIG_INFO(""Build ID"" ${TW_BUILD_ID})
CONFIG_INFO(""Qt version"" ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH})
CONFIG_INFO(""Compiler optimization"" ${CMAKE_BUILD_TYPE})
MESSAGE("""")

CONFIG_YESNO(""Lua scripting plugin"" LUA_FOUND)
CONFIG_YESNO(""Python scripting plugin"" PYTHONLIBS_FOUND)
IF( APPLE )
  CONFIG_YESNO(""  OS X system python"" USE_SYSTEM_PYTHON)
ENDIF()
MESSAGE("""")

MESSAGE(""  TeXworks will be installed to:"")
MESSAGE(""      ${CMAKE_INSTALL_PREFIX}"")
MESSAGE("""")
",3.1,3.1
21615,derselbst,ANMP,False,False,False,False,False,1,C++,2020-05-06 15:24:46+00:00,2016-02-19 20:27:56+00:00,8,1311,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR) # because of CMAKE_CXX_STANDARD
project (ANMP)

### setup binary output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build)


### Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS """")
  message(STATUS ""Setting build type to 'RelWithDebInfo' as none was specified."")
  message(STATUS """")
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()


# Global setting: build everything position independent
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# by default, force c++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# in case we have any c code, use the best c standard ever
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

if(${CMAKE_VERSION} VERSION_GREATER ""3.6.0"")
find_program(CLANG_TIDY
  NAMES ""clang-tidy""
  DOC ""Path to clang-tidy executable"")
  
    if(CLANG_TIDY)
        # whenever clang-tidy is available, use it to automatically add braces after ever ""make""
        set(CMAKE_CXX_CLANG_TIDY ""clang-tidy;-checks=-*,readability-braces-around-statements;-fix"")
#         set(CMAKE_CXX_CLANG_TIDY ""clang-tidy;-fix"")
    endif(CLANG_TIDY)
endif(${CMAKE_VERSION} VERSION_GREATER ""3.6.0"")


### set compile flags
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wall -Warray-bounds -Wstack-protector"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -g3 -O0 -Wextra -fstack-check -fstack-protector-all -fno-inline-functions -fsanitize=address,undefined -D_GLIBCXX_DEBUG"")
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    if(USE_LIBCXX)
        set(STDCXX ""libc++"")
    else(USE_LIBCXX)
        set(STDCXX ""libstdc++"")
    endif(USE_LIBCXX)
    
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wall -stdlib=${STDCXX}"")
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -g3 -O0 -Wextra -Wdocumentation -fstack-protector-all -fno-inline-functions -fsanitize=address,undefined"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -g3 -Rpass=loop-vectorize -Rpass-analysis=loop-vectorize"")
endif()

### setup project include dirs
set(PROJECT_LOCAL_INCLUDE_DIRS
        ${CMAKE_SOURCE_DIR}/include
        ${CMAKE_SOURCE_DIR}/include/cereal/include
        ${CMAKE_SOURCE_DIR}/src/Common
        ${CMAKE_SOURCE_DIR}/src/PlayerLogic
        ${CMAKE_SOURCE_DIR}/src/InputLibraryWrapper
        ${CMAKE_SOURCE_DIR}/src/AudioOutput)


### Search in the `cmake' directory for additional CMake modules.
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
include(utils)
include(FindPkgConfig)
include(summary)
include(GNUInstallDirs)

#############################
### SCAN FOR DEPENDENCIES ###
#############################
find_package (Threads REQUIRED)
set(LD_FLAGS ${LD_FLAGS} ${CMAKE_THREAD_LIBS_INIT})

find_package ( OpenMP QUIET )
if ( OpenMP_FOUND OR OpenMP_C_FOUND )
    message(STATUS ""Found OpenMP ${OpenMP_C_SPEC_DATE}"")
    # require at least OMP 3.0
    if ( ( NOT OpenMP_C_SPEC_DATE LESS ""200805"" ) OR NOT ( OpenMP_C_VERSION VERSION_LESS ""3.0"" ) )
        set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"" )
        set ( CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"" )
        set ( CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"" )
        set ( LD_FLAGS ""${OpenMP_C_LIBRARIES};${LD_FLAGS}"" )
    endif()
endif()

###################################
### HANDLE AUDIO OUTPUT SUPPORT ###
###################################
option(ENABLE_ALSA ""Compile with support to use ALSA for playback"" ON)
option(ENABLE_JACK ""Compile with support to use Jack for playback"" ON)
option(ENABLE_PORTAUDIO ""Compile with support to use PortAudio for playback"" ON)
option(ENABLE_EBUR128 ""Enable support for noise normalization through libebur128"" ON)

if(ENABLE_ALSA)
  find_package(ALSA)
  HANDLE_FOUND(ALSA)
  
  if(ALSA_FOUND)
        add_definitions(-DUSE_ALSA)
        set(USE_ALSA TRUE)
        
  endif(ALSA_FOUND)
  
  summary_add(""ALSA support"" USE_ALSA)
endif(ENABLE_ALSA)


if(ENABLE_JACK)
  find_package(Jack)
  HANDLE_FOUND(JACK)
  
  find_package(LibSamplerate)
  HANDLE_FOUND(LIBSAMPLERATE)
  
  if(JACK_FOUND AND LIBSAMPLERATE_FOUND)
        add_definitions(-DUSE_JACK)
        set(USE_JACK TRUE)
        
  endif(JACK_FOUND AND LIBSAMPLERATE_FOUND)
  
  
  summary_add(""Jack support"" USE_JACK)
        
endif(ENABLE_JACK)


if(ENABLE_PORTAUDIO)
  PKG_CHECK_MODULES(PORTAUDIO portaudio-2.0)
  
  if(PORTAUDIO_FOUND)
        add_definitions(-DUSE_PORTAUDIO)
        set(USE_PORTAUDIO TRUE)
        set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${PORTAUDIO_INCLUDE_DIRS})
        set(LD_FLAGS ${LD_FLAGS} ${PORTAUDIO_LIBRARIES})
        
        MY_PRINT(PORTAUDIO)
  endif(PORTAUDIO_FOUND)
        
    summary_add(""PortAudio support"" USE_PORTAUDIO)
endif(ENABLE_PORTAUDIO)


if(ENABLE_EBUR128)
  # previous versions neither provided pkgconfig, nor did true peak calc work
  PKG_CHECK_MODULES(EBUR128 libebur128>=1.2.3)
  
  if(EBUR128_FOUND)
        add_definitions(-DUSE_EBUR128)
        set(USE_EBUR128 TRUE)
        set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${EBUR128_INCLUDE_DIRS})
        set(LD_FLAGS ${LD_FLAGS} ${EBUR128_LIBRARIES})
        
        MY_PRINT(EBUR128)
  endif(EBUR128_FOUND)
  
  summary_add(""ebur128 support"" EBUR128_FOUND)
endif(ENABLE_EBUR128)

############################
### HANDLE CODEC SUPPORT ###
############################
option(ENABLE_LIBGME ""Use blargg's game-music-emu to support several video game emulated music formats"" ON)
option(ENABLE_LIBMAD ""Use MAD to support MPEG audio formats"" ON)
option(ENABLE_LIBSND ""Use sndfile to support common audio formats (FLAC, WAVE, OGG, etc.)"" ON)
option(ENABLE_LAZYUSF ""Use lazyusf to support USF (Ultra64 Sound Format)"" ON)
option(ENABLE_AOPSF ""Use aopsf to support PSF1 and PSF2 files (Portable Sound Format)"" ON)
option(ENABLE_VGMSTREAM ""Use vgmstream to support innumerable streamed audio formats from video games."" ON)
option(ENABLE_FFMPEG ""Use ffmpeg to support innumerable streamed audio formats, also from video streams."" ON)
option(ENABLE_FLUIDSYNTH ""Use fluidsynth to synthesize MIDI files."" ON)
option(ENABLE_MODPLUG ""Use libmodplug to support multiple tracker formats."" ON)
option(ENABLE_OPENMPT ""A better libmodplug to support multiple tracker formats."" ON)

if(ENABLE_LIBGME)
    MY_FIND_LIB(LIBGME gme)
    
    summary_add(""libgme support"" LIBGME_FOUND)
endif(ENABLE_LIBGME)


if(ENABLE_LIBMAD)
    PKG_CHECK_MODULES(ID3TAG id3tag)
  
  if(ID3TAG_FOUND)
        
        set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${ID3TAG_INCLUDE_DIRS})
        set(LD_FLAGS ${LD_FLAGS} ${ID3TAG_LIBRARIES})
        MY_PRINT(ID3TAG)
        
        MY_FIND_LIB(LIBMAD mad)
        
        if(LIBMAD_FOUND)
            set(USE_MAD TRUE)
        endif(LIBMAD_FOUND)
  
  endif(ID3TAG_FOUND)
  
  summary_add(""libmad support"" USE_MAD)
endif(ENABLE_LIBMAD)


if(ENABLE_LIBSND)
    MY_FIND_LIB(LIBSND sndfile)
  
    summary_add(""libsndfile support"" LIBSND_FOUND)
endif(ENABLE_LIBSND)


if(ENABLE_LAZYUSF)
    MY_FIND_LIB(LAZYUSF lazyusf)
    MY_FIND_LIB(PSFLIB psflib)
    MY_FIND_PKG(ZLIB ZLIB)
    
    # TODO: this is very ugly, any easier way??
    if(${LAZYUSF_FOUND})
        if(${PSFLIB_FOUND})
            if(${ZLIB_FOUND})
                set(USE_LAZYUSF TRUE)
            endif(${ZLIB_FOUND})
        endif(${PSFLIB_FOUND})
    endif(${LAZYUSF_FOUND})
    
    summary_add(""lazyusf support"" USE_LAZYUSF)
endif(ENABLE_LAZYUSF)


if(ENABLE_AOPSF)
    MY_FIND_LIB(AOPSF aopsf)
    MY_FIND_LIB(PSFLIB psflib)
    
    if(${AOPSF_FOUND} AND ${PSFLIB_FOUND})
        set(USE_AOPSF TRUE)
    endif(${AOPSF_FOUND} AND ${PSFLIB_FOUND})
    
    summary_add(""aopsf support"" USE_AOPSF)
endif(ENABLE_AOPSF)


if(ENABLE_VGMSTREAM)
  MY_FIND_LIB(VGMSTREAM vgmstream)
  MY_FIND_LIB(VORBISFILE vorbisfile)
  MY_FIND_LIB(VORBIS vorbis)
  MY_FIND_LIB(MPG123 mpg123)
  MY_FIND_LIB(M m)
  MY_FIND_PKG(ZLIB ZLIB)
  
  summary_add(""vgmstream support"" VGMSTREAM_FOUND)
endif(ENABLE_VGMSTREAM)


if(ENABLE_FFMPEG)
  find_package(FFmpeg)
  HANDLE_FOUND(FFMPEG)
  
  if(FFMPEG_FOUND)
    set(USE_FFMPEG TRUE)
    add_definitions(-DUSE_FFMPEG)
  endif(FFMPEG_FOUND)
  
  summary_add(""FFmpeg support"" USE_FFMPEG)
endif(ENABLE_FFMPEG)


if(ENABLE_FLUIDSYNTH)
  PKG_CHECK_MODULES(FLUIDSYNTH fluidsynth>=2.2.0)
  PKG_CHECK_MODULES(LIBSMF smf)
  
  if(LIBSMF_FOUND AND FLUIDSYNTH_FOUND)
    add_definitions(-DUSE_FLUIDSYNTH)
    add_definitions(-DUSE_SMF)
    if(DEFINED FLUIDSYNTH_DEFAULT_SF2)
        add_definitions(-DFLUIDSYNTH_DEFAULT_SF2=""${FLUIDSYNTH_DEFAULT_SF2}"")
    endif()

    set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${FLUIDSYNTH_INCLUDE_DIRS})
    set(LD_FLAGS ${LD_FLAGS} ${FLUIDSYNTH_LIBRARIES})

    MY_PRINT(FLUIDSYNTH)

    set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${LIBSMF_INCLUDE_DIRS})
    set(LD_FLAGS ${LD_FLAGS} ${LIBSMF_LIBRARIES})

    MY_PRINT(LIBSMF)

    set(USE_FLUIDSYNTH TRUE)
    set(USE_SMF TRUE)
  endif(LIBSMF_FOUND AND FLUIDSYNTH_FOUND)

  summary_add(""fluidsynth support"" USE_FLUIDSYNTH)
endif(ENABLE_FLUIDSYNTH)


if(ENABLE_MODPLUG)
  PKG_CHECK_MODULES(LIBMODPLUG libmodplug)

  if(LIBMODPLUG_FOUND)
    add_definitions(-DUSE_MODPLUG)

# modplug ships an sndfile.h, which conflicts with libsndfile's sndfile.h
# so dont include modplugs include path in compiler search list to avoid wrong includes
#    set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${LIBMODPLUG_INCLUDE_DIRS})
    set(LD_FLAGS ${LD_FLAGS} ${LIBMODPLUG_LIBRARIES})

    MY_PRINT(LIBMODPLUG)

    set(USE_MODPLUG TRUE)
  endif(LIBMODPLUG_FOUND)

  summary_add(""modplug support"" USE_MODPLUG)
endif(ENABLE_MODPLUG)

if(ENABLE_OPENMPT)
  PKG_CHECK_MODULES(LIBOPENMPT libopenmpt)

  if(LIBOPENMPT_FOUND)
    add_definitions(-DUSE_OPENMPT)
    set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${LIBOPENMPT_INCLUDE_DIRS})
    set(LD_FLAGS ${LD_FLAGS} ${LIBOPENMPT_LIBRARIES})

    MY_PRINT(LIBOPENMPT)

    set(USE_OPENMPT TRUE)
  endif(LIBOPENMPT_FOUND)

  summary_add(""openmpt support"" USE_OPENMPT)
endif(ENABLE_OPENMPT)

##################################
### miscellaneous dependencies ###
##################################
option(ENABLE_CUE ""Enable support for loading cue sheets"" ON)
option(ENABLE_GUI ""Enable building the QT GUI"" ON)
option(ENABLE_VISUALIZER ""Enable nice blinky audio visualizers"" ON)

if(ENABLE_CUE)
  PKG_CHECK_MODULES(LIBCUE libcue)
  
  if(LIBCUE_FOUND)
        add_definitions(-DUSE_CUE)
        set(PROJECT_SYSTEM_INCLUDE_DIRS ${PROJECT_SYSTEM_INCLUDE_DIRS} ${LIBCUE_INCLUDE_DIRS})
        set(LD_FLAGS ${LD_FLAGS} ${LIBCUE_LIBRARIES})
        
        MY_PRINT(LIBCUE)
  endif(LIBCUE_FOUND)
        
    summary_add(""libcue support"" LIBCUE_FOUND)
endif(ENABLE_CUE)


if(ENABLE_GUI)

    find_package(Qt5Widgets)
    HANDLE_FOUND(Qt5Widgets)
    
    find_package(Qt5DBus)
    HANDLE_FOUND(Qt5DBus)
   
    if(${Qt5Widgets_FOUND} AND ${Qt5DBus_FOUND})
        set(USE_GUI TRUE)
        add_definitions(-DUSE_GUI)
        
        # We need add -DQT_WIDGETS_LIB when using QtWidgets in Qt 5.
        add_definitions(${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS})
        
        MY_PRINT(QT5CORE)

    endif(${Qt5Widgets_FOUND} AND ${Qt5DBus_FOUND})
    
    summary_add(""QT GUI support"" USE_GUI)
endif(ENABLE_GUI)


if(ENABLE_VISUALIZER)

  if(NOT USE_GUI)
     message(STATUS ""cannot use visualizers when not building gui"")
     
  else(NOT USE_GUI)
  
    find_package(Qt5OpenGL)
    HANDLE_FOUND(Qt5OpenGL)

    # OpenGL & GLEW library
    find_package(OpenGL)
    HANDLE_FOUND(OPENGL)
    
    if(Qt5OpenGL_FOUND AND OPENGL_FOUND)
        set(USE_VISUALIZER TRUE)
        add_definitions(-DUSE_VISUALIZER)
    endif(Qt5OpenGL_FOUND AND OPENGL_FOUND)
    
  endif(NOT USE_GUI)
  
  
    summary_add(""Audio Visualizer support"" USE_VISUALIZER)
  
endif(ENABLE_VISUALIZER)


message("""")
### Show a summary of what we got
summary_show()

include_directories(${PROJECT_LOCAL_INCLUDE_DIRS})
include_directories(SYSTEM ${PROJECT_SYSTEM_INCLUDE_DIRS})

# anmp-core
add_subdirectory(src)

# anmp-qt
add_subdirectory(gui)

# anmp-normalize
add_subdirectory(utils)

ENABLE_TESTING()
add_subdirectory(test)

# Additional targets to perform clang-format/clang-tidy
# Get all project files
file(GLOB_RECURSE
     ALL_SOURCE_FILES
     LIST_DIRECTORIES false
     ${CMAKE_SOURCE_DIR}/*.[chi]
     ${CMAKE_SOURCE_DIR}/*.[chi]pp
     ${CMAKE_SOURCE_DIR}/*.[chi]xx
     ${CMAKE_SOURCE_DIR}/*.cc
     ${CMAKE_SOURCE_DIR}/*.hh
     ${CMAKE_SOURCE_DIR}/*.ii
     ${CMAKE_SOURCE_DIR}/*.[CHI]
     )

# Adding clang-format target if executable is found
find_program(CLANG_FORMAT ""clang-format"")
if(CLANG_FORMAT)
  add_custom_target(
    format
    COMMAND ${CLANG_FORMAT}
    -i
    -style=file
    ${ALL_SOURCE_FILES}
    )
endif(CLANG_FORMAT)

",3.1.0,3.1
21616,tedfelix,rosegarden,False,False,False,False,False,4,C++,2020-05-17 12:26:04+00:00,2015-07-18 16:06:11+00:00,2,1376,"# CMake version required. This must be the very first line, because it sets default policies affecting everything else
cmake_minimum_required(VERSION 3.1)

# Project name
project(rosegarden)

# Version
set(ROSEGARDEN_VERSION ""20.06"")
set(ROSEGARDEN_CODENAME ""Zepherine Drouhin"")
#set(ROSEGARDEN_CODENAME ""Altissimo"")
#set(ROSEGARDEN_CODENAME ""Bouquet d'Or"")
#set(ROSEGARDEN_CODENAME ""Cloud Nine"")
#set(ROSEGARDEN_CODENAME ""Distant Drums"")
#set(ROSEGARDEN_CODENAME ""Enchantress"")
#set(ROSEGARDEN_CODENAME ""Flutterbye"")
#set(ROSEGARDEN_CODENAME ""Grace Note"")
#set(ROSEGARDEN_CODENAME ""Hermosa"")
#set(ROSEGARDEN_CODENAME ""Incredible"")
#set(ROSEGARDEN_CODENAME ""Joyfulness"")
#set(ROSEGARDEN_CODENAME ""Keepsake"")
#set(ROSEGARDEN_CODENAME ""Let Freedom Ring"")
#set(ROSEGARDEN_CODENAME ""Mountain Music"")
#set(ROSEGARDEN_CODENAME ""Night Owl"")
#set(ROSEGARDEN_CODENAME ""Orange Flame"")
#set(ROSEGARDEN_CODENAME ""Purple Rain"")
#set(ROSEGARDEN_CODENAME ""Quietness"")
#set(ROSEGARDEN_CODENAME ""Raphaela"")
#set(ROSEGARDEN_CODENAME ""Sagesse de Lune"")
#set(ROSEGARDEN_CODENAME ""Tangerine Dream"")
#set(ROSEGARDEN_CODENAME ""Uncle Buck"")
#set(ROSEGARDEN_CODENAME ""Van Gogh"")
#set(ROSEGARDEN_CODENAME ""Waterlily"")
#set(ROSEGARDEN_CODENAME ""Xenophon"")
#set(ROSEGARDEN_CODENAME ""Yellow Brick Road"")
#set(ROSEGARDEN_CODENAME ""Zaïd"")

# Make the build type default to ""Release""
if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

# Make it possible to use cmake files from the cmake subdir
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# Enable the really useful automoc feature from cmake
set(CMAKE_AUTOMOC TRUE)

# Find headers in ""."" as well
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Used to set installation paths
# This takes care of installing into ""lib64"" on distros that use that, for instance,
# by setting CMAKE_INSTALL_FULL_LIBDIR.
include(GNUInstallDirs)

# Tweak RPATH handling so that installed debug builds work out of the box
include(RPathHandling)

# Activate unit tests (this enables `make test`)
enable_testing()
# then define the BUILD_TESTING option, with the default value that we want
# We'll set it to OFF in release mode, and let users (developers) choose in debug mode.
# include(CTest) would make it ON by default in all cases, so we don't use that

if(CMAKE_BUILD_TYPE STREQUAL ""Release"")
    option(BUILD_TESTING ""Build the testing tree."" OFF)
else()
    option(BUILD_TESTING ""Build the testing tree."" ON)
endif()

# Compiler defines

if(CMAKE_BUILD_TYPE STREQUAL ""Release"")
    add_definitions(-DNDEBUG -DBUILD_RELEASE -DNO_TIMING)
else()
    add_definitions(-DDEBUG -DBUILD_DEBUG -DWANT_TIMING)
endif()

add_definitions(-DQT_NO_URL_CAST_FROM_STRING)
add_definitions(-DUNSTABLE) # this is changed to STABLE by the release script

# Compiler flags

set(CMAKE_CXX_STANDARD 11) # Enable C++11

if(CMAKE_COMPILER_IS_GNUCXX)
   if(CMAKE_SYSTEM_NAME MATCHES Linux OR CMAKE_SYSTEM_NAME STREQUAL GNU)
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Woverloaded-virtual -Wextra -Wformat-nonliteral -Wformat-security -Winit-self -Wswitch-enum -Wnon-virtual-dtor -Wno-long-long -ansi -Wundef -Wcast-align -Wchar-subscripts -W -Wpointer-arith -fno-check-new -fno-common -Werror=return-type"")
      add_definitions(-DQT_NO_EXCEPTIONS)
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden"")
      if (CMAKE_COMPILER_IS_GNUCC AND (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.7))
          # Too many left, someone needs to finish this...
          #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant"") # suggest using nullptr where applicable
      endif()
      if (CMAKE_COMPILER_IS_GNUCC AND (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.1))
         set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wsuggest-override"")
      endif()
   endif()
endif()

# Looking for dependencies

find_package(PkgConfig REQUIRED)
include(FeatureSummary)

# Required dependencies ---------------------------------------

# Qt5 is required.
find_package(Qt5 ""5.1.0"" REQUIRED COMPONENTS Core Gui Widgets Xml Network PrintSupport Test)

set(QT_QTCORE_LIBRARY Qt5::Core)
set(QT_QTGUI_LIBRARY Qt5::Widgets Qt5::PrintSupport)
set(QT_QTXML_LIBRARY Qt5::Xml)
set(QT_QTNETWORK_LIBRARY Qt5::Network)
set(QT_QTTEST_LIBRARY Qt5::Test)

set(QT_RCC_EXECUTABLE ${Qt5Core_RCC_EXECUTABLE})


find_path(LADSPA_INCLUDE_DIR ladspa.h)
if(NOT LADSPA_INCLUDE_DIR)
    message(FATAL_ERROR ""Failed to find required LADSPA header ladspa.h"")
endif()

pkg_check_modules(ALSA alsa>=0.9)
add_feature_info(ALSA ALSA_FOUND ""Alsa library (Advanced Linux Sound Architecture), used for MIDI support"")
if(NOT ALSA_FOUND)
    # This little bit of juggling is to enable DSSI to be included even on
    # systems without ALSA (dssi.h includes an ALSA header, but we can
    # fill in the gap if ALSA itself is not present)
    message(WARNING ""No ALSA library found: MIDI will be unavailable!"")
    message(STATUS ""Using compatibility code for DSSI event types"")
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/sound/dssi-compatibility)
endif()

find_path(DSSI_INCLUDE_DIRS dssi.h)
if(NOT DSSI_INCLUDE_DIRS)
    message(FATAL_ERROR ""Failed to find required DSSI header dssi.h"")
endif()

find_package(ZLIB REQUIRED)

find_package(X11 REQUIRED) # for XSetErrorHandler & XGetErrorText

pkg_check_modules(LIBLO REQUIRED liblo>=0.7)

pkg_check_modules(LRDF REQUIRED lrdf>=0.2)

pkg_check_modules(FFTW3F REQUIRED fftw3f>=3.0.0)

pkg_check_modules(SAMPLERATE REQUIRED samplerate>=0.1.2)

# Optional dependencies ---------------------------------------

pkg_check_modules(SNDFILE sndfile>=1.0.16)
add_feature_info(SNDFILE SNDFILE_FOUND ""Better support for WAV files"")

pkg_check_modules(JACK jack)
if(JACK_FOUND)
    add_feature_info(JACK JACK_FOUND ""Library for accessing the JACK server (http://jackaudio.org)."")
else()
    add_feature_info(JACK JACK_FOUND ""WARNING: the library for accessing the JACK server (http://jackaudio.org) was not found. Audio will be unavailable!"")
endif()

# Build with LIRC support if LIRC detected, unless DISABLE_LIRC is set
if(NOT DISABLE_LIRC)
    find_path(LIRCCLIENT_INCLUDE_DIR lirc/lirc_client.h)
    if(NOT LIRCCLIENT_INCLUDE_DIR)
        message(WARNING ""Failed to find LIRC header lirc/lirc_client.h"")
    endif()
    find_library(LIRCCLIENT_LIBRARY lirc_client)
    if(NOT LIRCCLIENT_LIBRARY)
        message(WARNING ""Failed to find LIRC library lirc_client"")
    endif()
    if(LIRCCLIENT_INCLUDE_DIR AND LIRCCLIENT_LIBRARY)
        set(LIRCCLIENT_FOUND TRUE)
    endif()
endif()
add_feature_info(LIRCCLIENT LIRCCLIENT_FOUND ""The LIRC client library, for remote control support"")

# --------------------------------------------------------

# Print out a summary of what was found and what is missing
feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)

# --------------------------------------------------------


# Unit tests disabled: use a static lib
# Unit tests enabled: use shared libs, to speed up linking
if(BUILD_TESTING)
    set(RG_LIBRARY_TYPE SHARED)
    message(STATUS ""Building unit tests, using shared libraries"")
else()
    set(RG_LIBRARY_TYPE STATIC)
    set(ROSEGARDENPRIVATE_STATIC_BUILD TRUE) # for generating rosegardenprivate-export.h
    message(STATUS ""Not building unit tests, using a static library for rosegarden"")
endif()


# --------------------------------------------------------

add_subdirectory(src)
add_subdirectory(data)

if(BUILD_TESTING)
    add_subdirectory(test)
endif()
",3.1,3.1
21624,darrenjs,wampcc,False,False,False,False,False,10,C++,2019-12-24 16:20:11+00:00,2016-02-23 06:20:20+00:00,45,1141,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

set (WAMPCC_VERSION_MAJOR 1)
set (WAMPCC_VERSION_MINOR 6)
set (WAMPCC_VERSION ""${WAMPCC_VERSION_MAJOR}.${WAMPCC_VERSION_MINOR}"")
project(wampcc VERSION ${WAMPCC_VERSION})

# Version number
# Include extra cmake modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_LIST_DIR}/cmake"")


##
## Platform based options defaults
##
if(CMAKE_HOST_UNIX)
  set(DEFAULT_BUILD_SHARED_LIBS ""ON"")
  set(DEFAULT_BUILD_UTILS ""ON"")
else()
  set(DEFAULT_BUILD_SHARED_LIBS ""OFF"")
  set(DEFAULT_BUILD_UTILS ""OFF"")
endif()

##
## Build options
##
option (BUILD_SHARED_LIBS ""Use shared libraries"" ${DEFAULT_BUILD_SHARED_LIBS})
option (BUILD_STATIC_LIBS ""Use static libraries"" ON)
option (BUILD_EXAMPLES    ""Build example apps""   ON)
option (BUILD_UTILS       ""Build utility apps""   ${DEFAULT_BUILD_UTILS})
option (BUILD_TESTS       ""Build test apps""      OFF)
set(LIBUV_DIR   """" CACHE STRING ""libuv installation directory"")
set(JANSSON_DIR """" CACHE STRING ""Jansson installation directory"")

include(GNUInstallDirs)
set(INSTALL_BIN_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH ""Installation directory for executables"")
set(INSTALL_LIB_DIR ""${CMAKE_INSTALL_LIBDIR}"" CACHE PATH  ""Installation directory for libraries"")
set(INSTALL_INC_DIR ""${CMAKE_INSTALL_INCLUDEDIR}"" CACHE PATH ""Installation directory for headers"")
set(INSTALL_PKGCONFIG_DIR ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"" CACHE PATH ""Installation directory for pkgconfig (.pc) files"")

# Allow settin of RPATH for install
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

##
## Platform checks, and generate config.h
##
include(PlatformCheck)
include(CheckLibraryExists)

##
## Compiler settings
##

# Only enable warning flags for Linux, since there are too many warning
# generated by Visual Studio
if(CMAKE_HOST_UNIX)
  include(CheckCXXCompilerFlag)
  check_cxx_compiler_flag(-Wall temp)
  if(temp)
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
  endif()
endif()

##
## Try to find libssl
##
find_package(OpenSSL REQUIRED)


##
## Try to find libuv
##
find_package(Libuv REQUIRED)
set(HAVE_LIBUV ON)

##
## Try to find jansson
##
find_package(Jansson REQUIRED)
set(HAVE_JANSSON ON)

message(STATUS ""OpenSSL_INCLUDE_DIR:      "" ${OPENSSL_INCLUDE_DIR})
message(STATUS ""OpenSSL_LIBRARIES:        "" ${OPENSSL_LIBRARIES})
message(STATUS ""LIBUV_INCLUDE_DIRS:       "" ${LIBUV_INCLUDE_DIRS})
message(STATUS ""LIBUV_LIBRARIES:          "" ${LIBUV_LIBRARIES})
message(STATUS ""JANSSON_INCLUDE_DIR:      "" ${JANSSON_INCLUDE_DIR})
message(STATUS ""JANSSON_LIBRARY:          "" ${JANSSON_LIBRARY})
message(STATUS ""JANSSON_VERSION:          "" ${JANSSON_VERSION})

# configure a header file to pass some of the CMake settings
# to the source code
configure_file (
  ""${PROJECT_SOURCE_DIR}/cmake/config.h.incmake""
  ""${PROJECT_BINARY_DIR}/config.h""
  )

# pkg-config
configure_file(
  ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/wampcc.pc.incmake""
  ""${CMAKE_CURRENT_BINARY_DIR}/wampcc.pc"" @ONLY)
configure_file(
  ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/wampcc_json.pc.incmake""
  ""${CMAKE_CURRENT_BINARY_DIR}/wampcc_json.pc"" @ONLY)


# check websocketpp is available in the source tree
set(websocketpp ""${PROJECT_SOURCE_DIR}/3rdparty/websocketpp/websocketpp/message_buffer/message.hpp"")
message(STATUS ""checking for ${websocketpp}"")
if(NOT EXISTS ""${websocketpp}"")
  message(FATAL_ERROR ""websocketpp header not found! Check that websocketpp is unzipped under 3rdparty/"")
endif()

# check msgpack is available in the source tree
set(msgpackfile ""${PROJECT_SOURCE_DIR}/3rdparty/msgpack-c/include/msgpack.h"")
message(STATUS ""checking for ${msgpackfile}"")
if(NOT EXISTS ""${msgpackfile}"")
  message(FATAL_ERROR ""msgpack header not found! Check that msgpack is unzipped under 3rdparty/"")
endif()


# add the binary tree to the search path for include files
# so that we will find config.h
include_directories(""${PROJECT_BINARY_DIR}"")
include_directories(""${PROJECT_SOURCE_DIR}/include"")
include_directories(""${PROJECT_SOURCE_DIR}/3rdparty/websocketpp"")
include_directories(""${PROJECT_SOURCE_DIR}/3rdparty"")

# add external dependencies after the wampcc includes
include_directories(${OPENSSL_INCLUDE_DIR})

# include sub directories
add_subdirectory(libs/json)
add_subdirectory(libs/wampcc)
add_subdirectory(utils)
add_subdirectory(tests)
add_subdirectory(examples)

install(FILES ${PROJECT_BINARY_DIR}/wampcc.pc DESTINATION ""${INSTALL_PKGCONFIG_DIR}"" COMPONENT dev)
install(FILES ${PROJECT_BINARY_DIR}/wampcc_json.pc DESTINATION ""${INSTALL_PKGCONFIG_DIR}"" COMPONENT dev)

include(cmake/MakeDebPackages.cmake)
",3.1.0,3.1
21706,nak,pyllars,False,False,False,False,False,1,C++,2020-02-09 00:40:16+00:00,2015-06-17 16:41:42+00:00,1,362,"cmake_minimum_required(VERSION 3.10)
project(pyllars)

set(GCC_COVERAGE_COMPILE_FLAGS ""-fprofile-arcs -ftest-coverage --coverage -O0 -fno-inline"")
set(GCC_COVERAGE_LINK_FLAGS    ""--coverage -lgcov"")
SET(CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}"")
SET(CMAKE_EXE_LINKER_FLAGS  ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}"")
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 17)
if (EXISTS ""/usr/local/include/python3.7dm"")
	set (PYTHON_LD ""-L/usr/local/lib64 -lpython3.7dm"")
    set (PYTHON_INCLUDE ""/usr/local/include/python3.7dm"")
else()
    set (PYTHON_LD ""-lpython3.6m"")
    set (PYTHON_INCLUDE ""/usr/include/python3.6m"")
endif()
add_subdirectory(src/cpp)
add_subdirectory(test/cpp)
",3.10,3.1
21722,hjabird,HBTK,False,False,False,False,False,1,C++,2019-07-18 21:43:46+00:00,2017-08-27 19:59:54+00:00,0,237,"cmake_minimum_required(VERSION 3.1)
project(hbtk CXX)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(HBTK_MAJOR 0)
set(HBTK_MINOR 1)
set(HBTK_PATCHLEVEL 0)
set(HBTK_VERSION ${HBTK_MAJOR}.${HBTK_MINOR}.${HBTK_PATCHLEVEL})
 
option(BUILD_DEMO_PROGRAMS ""Builds demo programs"" OFF)
option(BUILD_UNIT_TESTS ""Builds the unit tests"" OFF)
 
# Enable folders in Visual studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

file (GLOB hbtk_INCLUDE ""include/hbtk/*.h"")
file (GLOB hbtk_SOURCE  ""src/*.cpp"")
source_group("""" FILES ${hbtk})
source_group(""include"" FILES ${hbtk_INCLUDE})
source_group(""source"" FILES ${hbtk_SOURCE})
 
include_directories(include/hbtk)
add_library(hbtk  ${hbtk_INCLUDE} 
                  ${hbtk_SOURCE})
				  
if (${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"")
    link_libraries(hbtk m)   # Maths std library.
endif()
 

include(GNUInstallDirs)
set_target_properties(hbtk PROPERTIES
                      RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin
                      PUBLIC_HEADER ""${hbtk_INCLUDE}"")
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(TARGETS hbtk
    EXPORT hbtk-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
install(EXPORT hbtk-targets
  FILE
    hbtk-config.cmake
  DESTINATION
    ${CMAKE_INSTALL_LIBDIR}/cmake/hbtk
)

if(BUILD_DEMO_PROGRAMS)
    add_subdirectory(demo)
endif(BUILD_DEMO_PROGRAMS)
if(BUILD_UNIT_TESTS)
    add_subdirectory(test)
endif(BUILD_UNIT_TESTS)
",3.1,3.1
21813,TzuChieh,Photon-v2,False,False,False,False,False,2,C++,2020-05-07 06:26:26+00:00,2016-10-12 18:07:46+00:00,70,1164,"# Main build script for Photon-v2 renderer.

###############################################################################
# General Settings
#

cmake_policy(SET CMP0054 NEW)

cmake_minimum_required(VERSION 3.1)
project(Photon-v2)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${PROJECT_BINARY_DIR}/bin/"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${PROJECT_BINARY_DIR}/bin/"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${PROJECT_BINARY_DIR}/bin/"")

# HACK: to eliminate extra ""Release"" folder on MSVC
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ""${PROJECT_BINARY_DIR}/bin/"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ""${PROJECT_BINARY_DIR}/bin/"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ""${PROJECT_BINARY_DIR}/bin/"")

#get_filename_component(PROJECT_DIR ""./"" ABSOLUTE)
#set(PROJECT_DIR ""${PROJECT_DIR}/"")

###############################################################################
# Build Options
#

if(WIN32)
    set(BUILD_ENGINE_TEST_DEFAULT ON)
    set(BUILD_EDITOR_JNI_DEFAULT  ON)
else()
    set(BUILD_ENGINE_TEST_DEFAULT OFF)
    set(BUILD_EDITOR_JNI_DEFAULT  OFF)
endif()


option(BUILD_ENGINE_TEST ""Build unit tests for core engine."" ${BUILD_ENGINE_TEST_DEFAULT})
option(BUILD_EDITOR_JNI ""Build JNI for GUI.""                 ${BUILD_EDITOR_JNI_DEFAULT})

###############################################################################
# Compiler Settings
#

# using Visual Studio C++
if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")

    set(THIRD_PARTY_PLATFORM ""windows"")

    # TODO: more standard ways exist, but requires newer CMake version
    set(CMAKE_CXX_FLAGS         ""${CMAKE_CXX_FLAGS} /std:c++17 /Zi /MP"")

    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
    set(CMAKE_CXX_FLAGS_DEBUG   ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")

# using GCC
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")

    set(THIRD_PARTY_PLATFORM ""linux"")

    if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_CXX11_ABI=0"")
    endif()

    # compile with c++17 standard enabled
    set(CMAKE_CXX_STANDARD          17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)

    # as a fallback when CMake version < 3.8.0 or whatever reasons
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++17"")

# using regular Clang or AppleClang
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    
    set(THIRD_PARTY_PLATFORM ""osx"")

    # compile with c++17 standard enabled
    set(CMAKE_CXX_STANDARD          17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)

endif()

# TODO: add g++ MT MD equivalent flags?

###############################################################################
# Gather Third-party Libraries Required by Photon-v2
#

set(THIRD_PARTY_DIR ""${PROJECT_BINARY_DIR}/Photon-v2-ThirdParty-master/"")

if(BUILD_ENGINE_TEST)
    set(GOOGLETEST_INCLUDE_DIR ""${THIRD_PARTY_DIR}googletest/include/"")
    set(GOOGLETEST_BINARY_DIR  ""${THIRD_PARTY_DIR}googletest/lib/${THIRD_PARTY_PLATFORM}/"")
    find_library(GOOGLETEST_LIB_GTEST gtest
        PATHS ${GOOGLETEST_BINARY_DIR}
        NO_DEFAULT_PATH
    )
    find_library(GOOGLETEST_LIB_GMOCK gmock
        PATHS ${GOOGLETEST_BINARY_DIR}
        NO_DEFAULT_PATH
    )
    set(GOOGLETEST_LIBS ""${GOOGLETEST_LIB_GMOCK};${GOOGLETEST_LIB_GTEST}"")
endif()

set(STB_INCLUDE_DIR ""${THIRD_PARTY_DIR}stb/include/"")

# TODO: debug build?
if(WIN32)
    set(STACKWALKER_INCLUDE_DIR ""${THIRD_PARTY_DIR}StackWalker/include/"")
    set(STACKWALKER_BINARY_DIR  ""${THIRD_PARTY_DIR}StackWalker/lib/"")
    find_library(STACKWALKER_LIB StackWalker
        PATHS ${STACKWALKER_BINARY_DIR}
        NO_DEFAULT_PATH
    )
endif()

###############################################################################
# Add Subdirectories
#

add_subdirectory(""./Engine/"")

if(BUILD_ENGINE_TEST)
    add_subdirectory(""./EngineTest/"")
endif()

if(BUILD_EDITOR_JNI)
    add_subdirectory(""./JNI/"")
endif()

add_subdirectory(""./PhotonCLI/"")


",3.1,3.1
21838,rncbc,qjackctl,False,False,False,False,False,15,C++,2020-04-12 13:29:34+00:00,2015-09-22 14:21:05+00:00,76,1401,"project(QJACKCTL)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""QjackCtl"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qjackctl"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Disable system tray argument option.
option (CONFIG_SYSTEM_TRAY ""Enable system tray (default=yes)"" 1)

# Disable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK port aliases support.
option (CONFIG_JACK_PORT_ALIASES ""Enable JACK port aliases support (default=yes)"" 1)

# Enable JACK metadata support.
option (CONFIG_JACK_METADATA ""Enable JACK metadata support (default=yes)"" 1)

# Enable JACK version support.
option (CONFIG_JACK_VERSION ""Enable JACK version support (default=no)"" 0)

# Enable ALSA sequencer support option.
option (CONFIG_ALSA_SEQ ""Enable ALSA/MIDI sequencer support (default=yes)"" 1)

# Enable PortAudio argument option.
option (CONFIG_PORTAUDIO ""Enable PortAudio interface (default=yes)"" 1)

# Enable D-Bus argument option.
option (CONFIG_DBUS ""Enable D-Bus interface (default=yes)"" 1)

# Enable unique/single instance.
option (CONFIG_XUNIQUE ""Enable unique/single instance (default=yes)"" 1)

# Enable debugger stack-trace option (assumes --enable-debug).
option (CONFIG_STACKTRACE ""Enable debugger stack-trace (default=no)"" 0)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

if (CONFIG_XUNIQUE)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

if (CONFIG_DBUS)
  find_package (Qt5 REQUIRED COMPONENTS DBus)
endif ()

find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)


# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for JACK libraries.
pkg_check_modules (JACK REQUIRED jack>=0.100.0)
if (JACK_FOUND)
  set (CONFIG_JACK 1)
  include_directories (${JACK_INCLUDE_DIRS})
  link_directories (${JACK_LIBRARY_DIRS})
# link_libraries (${JACK_LIBRARIES})
  set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  # Check for jack/statistics.h header.
  check_include_file (jack/statistics.h HAVE_JACK_STATISTICS_H)
  if (NOT HAVE_JACK_STATISTICS_H)
    set (CONFIG_JACK_STATISTICS 0)
  else ()
    set (CONFIG_JACK_STATISTICS 1)
  endif ()
  # Check for JACK MIDI headers availability.
  if (CONFIG_JACK_MIDI)
    check_include_file (jack/midiport.h HAVE_JACK_MIDIPORT_H)
    if (NOT HAVE_JACK_MIDIPORT_H)
      set (CONFIG_JACK_MIDI 0)
    endif ()
  endif ()
  # Check for JACK session headers availability.
  if (CONFIG_JACK_SESSION)
    check_include_file (jack/session.h HAVE_JACK_SESSION_H)
    if (NOT HAVE_JACK_SESSION_H)
      set (CONFIG_JACK_SESSION 0)
    endif ()
  endif ()
  # Check for JACK metadata headers availability.
  if (CONFIG_JACK_METADATA)
    check_include_file (jack/metadata.h HAVE_JACK_METADATA_H)
    if (NOT HAVE_JACK_METADATA_H)
      set (CONFIG_JACK_METADATA 0)
    endif ()
  endif ()
  # Check for jack_transport_query function.
  check_function_exists (jack_transport_query CONFIG_JACK_TRANSPORT)
  # Check for jack_is_realtime function.
  check_function_exists (jack_is_realtime CONFIG_JACK_REALTIME)
  # Check for jack_get_xrun_delayed_usecs function.
  check_function_exists (jack_get_xrun_delayed_usecs CONFIG_JACK_XRUN_DELAY)
  # Check for jack_get_max_delayed_usecs function.
  check_function_exists (jack_get_max_delayed_usecs CONFIG_JACK_MAX_DELAY)
  # Check for jack_set_port_rename_callback
  check_function_exists (jack_set_port_rename_callback CONFIG_JACK_PORT_RENAME)
  # Check for jack_port_get_aliases function.
  if (CONFIG_JACK_PORT_ALIASES)
    check_function_exists (jack_port_get_aliases CONFIG_JACK_PORT_ALIASES)
  endif ()
  # Check for jack_get_version_string function.
  if (CONFIG_JACK_VERSION)
    check_function_exists (jack_get_version_string CONFIG_JACK_VERSION)
  endif ()
  # Check for jack_free function.
  check_function_exists (jack_free CONFIG_JACK_FREE)
else ()
  message (FATAL_ERROR ""*** JACK library not found."")
  set (CONFIG_JACK 0)
endif ()

# Check for ALSA libraries.
if (CONFIG_ALSA_SEQ)
  pkg_check_modules (ALSA alsa)
  if (ALSA_FOUND)
    include_directories (${ALSA_INCLUDE_DIRS})
    link_directories (${ALSA_LIBRARY_DIRS})
    link_libraries (${ALSA_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** ALSA library not found."")
    set (CONFIG_ALSA_SEQ 0)
  endif ()
endif ()

# Check for PORTAUDIO libraries.
if (CONFIG_PORTAUDIO)
  pkg_check_modules (PORTAUDIO portaudio-2.0)
  if (PORTAUDIO_FOUND)
    include_directories (${PORTAUDIO_INCLUDE_DIRS})
    link_directories (${PORTAUDIO_LIBRARY_DIRS})
    link_libraries (${PORTAUDIO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${PORTAUDIO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** PORTAUDIO library not found."")
    set (CONFIG_PORTAUDIO 0)
  endif ()
endif ()


if (APPLE AND CONFIG_COREAUDIO)
  check_include_file (CoreAudio/CoreAudio.h HAVE_COREAUDIO_H)
  if (NOT HAVE_COREAUDIO_H)
    set (CONFIG_COREAUDIO 0)
  endif ()
endif ()


add_subdirectory (src)

configure_file (qjackctl.spec.in qjackctl.spec IMMEDIATE @ONLY)

install (FILES qjackctl.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qjackctl.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qjackctl.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK Audio Connection Kit support  . . . . . . . ."" CONFIG_JACK)
show_option (""  JACK Realtime support  . . . . . . . . . . . . . ."" CONFIG_JACK_REALTIME)
show_option (""  JACK Transport support . . . . . . . . . . . . . ."" CONFIG_JACK_TRANSPORT)
show_option (""  JACK XRUN delay support  . . . . . . . . . . . . ."" CONFIG_JACK_XRUN_DELAY)
show_option (""  JACK Maximum scheduling delay support  . . . . . ."" CONFIG_JACK_MAX_DELAY)
show_option (""  JACK Port aliases support  . . . . . . . . . . . ."" CONFIG_JACK_PORT_ALIASES)
show_option (""  JACK Metadata support  . . . . . . . . . . . . . ."" CONFIG_JACK_METADATA)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
show_option (""  JACK Session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK Version support (JACK2) . . . . . . . . . . ."" CONFIG_JACK_VERSION)
show_option (""  ALSA MIDI Sequencer support  . . . . . . . . . . ."" CONFIG_ALSA_SEQ)
show_option (""  System tray icon support . . . . . . . . . . . . ."" CONFIG_SYSTEM_TRAY)
show_option (""  D-Bus interface support  . . . . . . . . . . . . ."" CONFIG_DBUS)
show_option (""  PortAudio interface support  . . . . . . . . . . ."" CONFIG_PORTAUDIO)
show_option (""  CoreAudio interface support  . . . . . . . . . . ."" CONFIG_COREAUDIO)
message     ("""")
show_option (""  System tray icon support . . . . . . . . . . . . ."" CONFIG_SYSTEM_TRAY)
show_option (""  Unique/Single instance support . . . . . . . . . ."" CONFIG_XUNIQUE)
show_option (""  Debugger stack-trace (gdb) . . . . . . . . . . . ."" CONFIG_STACKTRACE)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
21863,KDE,juk,False,False,False,False,False,88,C++,2020-05-15 12:59:23+00:00,2015-09-18 13:03:11+00:00,10,3013,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

# KDE Application Version, managed by KDE release team automatically
# https://community.kde.org/Guidelines_and_HOWTOs/Application_Versioning
set (RELEASE_SERVICE_VERSION_MAJOR ""20"")
set (RELEASE_SERVICE_VERSION_MINOR ""07"")
set (RELEASE_SERVICE_VERSION_MICRO ""70"")
set (RELEASE_SERVICE_VERSION ""${RELEASE_SERVICE_VERSION_MAJOR}.${RELEASE_SERVICE_VERSION_MINOR}.${RELEASE_SERVICE_VERSION_MICRO}"")

project(juk VERSION ${RELEASE_SERVICE_VERSION})

set(QT_MIN_VERSION ""5.6.0"")
set(KF5_MIN_VERSION ""5.35.0"")

find_package(ECM ${KF5_MIN_VERSION} REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(CMakePushCheckState)
include(CheckIncludeFileCXX)
include(KDEInstallDirs)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(KDECMakeSettings NO_POLICY_SCOPE)
include(FeatureSummary)
include(ECMInstallIcons)
include(ECMAddAppIcon)
include(ECMQtDeclareLoggingCategory)

find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS Concurrent Gui Svg Network Test Widgets)
find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS
    CoreAddons
    Completion
    Config
    Crash
    GlobalAccel
    I18n
    IconThemes
    DBusAddons
    DocTools
    KIO
    JobWidgets
    Notifications
    TextWidgets
    XmlGui
    Wallet
    WidgetsAddons
    WindowSystem
)
find_package(Phonon4Qt5 4.6.60 REQUIRED NO_MODULE)

find_package(Taglib 1.6 REQUIRED)

include_directories(${CMAKE_BINARY_DIR} ${PHONON_INCLUDES})

add_subdirectory( doc )
add_subdirectory( tests )
add_subdirectory( pics )

#set_package_properties(FEATURE PROPERTIES DESCRIPTION ""A library for developing MusicBrainz enabled tagging applications"" URL ""https://wiki.musicbrainz.org/History:libtunepimp"" TYPE OPTIONAL PURPOSE ""Provides MusicBrainz tagging in Juk."")

# TODO: tunepimp is fully unsupported, replace this when tunepimp is replaced
# with whatever is actually current this decade.
set(HAVE_TUNEPIMP 0)

########### next target ###############

include_directories( SYSTEM ${TAGLIB_INCLUDES} )
add_definitions(-DQT_STL -DQT_NO_URL_CAST_FROM_STRING)

# Look for Ogg Opus support in taglib (not released yet)
cmake_push_check_state()
set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${TAGLIB_INCLUDES})
check_include_file_cxx(opusfile.h TAGLIB_HAS_OPUSFILE)
cmake_pop_check_state()

configure_file (config-juk.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-juk.h )

set(juk_SRCS
   advancedsearchdialog.cpp
   slider.cpp
   svghandler.cpp
   volumepopupbutton.cpp
   actioncollection.cpp
   cache.cpp
   categoryreaderinterface.cpp
   collectionlist.cpp
   coverdialog.cpp
   covericonview.cpp
   coverinfo.cpp
   covermanager.cpp
   coverproxy.cpp
   dbuscollectionproxy.cpp
   deletedialog.cpp
   directorylist.cpp
   directoryloader.cpp
   dynamicplaylist.cpp
   exampleoptions.cpp
   folderplaylist.cpp
   filehandle.cpp
   filerenamer.cpp
   filerenameroptions.cpp
   filerenamerconfigdlg.cpp
   webimagefetcher.cpp
   historyplaylist.cpp
   juk.cpp
   juktag.cpp
   keydialog.cpp
   lyricswidget.cpp
   main.cpp
   mediafiles.cpp
   mpris2/mediaplayer2.cpp
   mpris2/mediaplayer2player.cpp
   mpris2/mpris2.cpp
   nowplaying.cpp
   playermanager.cpp
   playlist.cpp
   playlistbox.cpp
   playlistcollection.cpp
   playlistinterface.cpp
   playlistitem.cpp
   playlistsearch.cpp
   playlistsharedsettings.cpp
   playlistsplitter.cpp
   scrobbler.cpp
   scrobbleconfigdlg.cpp
   searchplaylist.cpp
   searchwidget.cpp
   slideraction.cpp
   statuslabel.cpp
   stringshare.cpp
   systemtray.cpp
   tageditor.cpp
   tagguesser.cpp
   tagguesserconfigdlg.cpp
   tagrenameroptions.cpp
   tagtransactionmanager.cpp
   tracksequenceiterator.cpp
   tracksequencemanager.cpp
   treeviewitemplaylist.cpp
   upcomingplaylist.cpp
   viewmode.cpp )

ecm_qt_declare_logging_category(juk_SRCS HEADER juk_debug.h
                                IDENTIFIER JUK_LOG CATEGORY_NAME org.kde.juk)

qt5_add_dbus_adaptor( juk_SRCS org.kde.juk.collection.xml
    dbuscollectionproxy.h DBusCollectionProxy )
qt5_add_dbus_adaptor( juk_SRCS org.kde.juk.player.xml playermanager.h PlayerManager)
qt5_add_dbus_adaptor( juk_SRCS org.kde.juk.search.xml searchwidget.h SearchWidget)


ki18n_wrap_ui(juk_SRCS
    filerenamerbase.ui
    filerenameroptionsbase.ui
    directorylistbase.ui
    tagguesserconfigdlgwidget.ui
    exampleoptionsbase.ui
    coverdialogbase.ui
    deletedialogbase.ui
    tageditor.ui
)

file(GLOB ICONS_SRCS ""${CMAKE_CURRENT_SOURCE_DIR}/*-apps-juk.png"")
ecm_add_app_icon(juk_SRCS ICONS ${ICONS_SRCS})
add_executable(juk ${juk_SRCS})

kde_target_enable_exceptions(juk PRIVATE)
target_compile_definitions(juk PRIVATE QT_USE_QSTRINGBUILDER)

if(NOT MSVC AND NOT ( WIN32 AND ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Intel"" ) )
    set( LIBMATH m )
endif()

target_link_libraries(juk ${LIBMATH}
    Qt5::Gui
    Qt5::Svg
    Qt5::Widgets
    Qt5::Network
    KF5::ConfigCore
    KF5::CoreAddons
    KF5::Completion
    KF5::Crash
    KF5::DBusAddons
    KF5::GlobalAccel
    KF5::KIOCore
    KF5::KIOWidgets
    KF5::KIOFileWidgets
    KF5::JobWidgets
    KF5::Notifications
    KF5::I18n
    KF5::IconThemes
    KF5::TextWidgets
    KF5::XmlGui
    KF5::WindowSystem
    KF5::WidgetsAddons
    KF5::Wallet
    Phonon::phonon4qt5
    ${TAGLIB_LIBRARIES}
)

if(TUNEPIMP_FOUND)
    target_link_libraries(juk ${TUNEPIMP_LIBRARIES})
endif(TUNEPIMP_FOUND)

feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)

install(TARGETS juk  ${INSTALL_TARGETS_DEFAULT_ARGS} )

if(Qt5Widgets_VERSION VERSION_LESS ""5.13.0"")
    find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS ItemModels)
    target_link_libraries(juk KF5::ItemModels)
endif(Qt5Widgets_VERSION VERSION_LESS ""5.13.0"")

########### install files ###############

install( PROGRAMS org.kde.juk.desktop  DESTINATION  ${XDG_APPS_INSTALL_DIR} )
install( FILES jukui.rc jukui-rtl.rc  DESTINATION  ${KXMLGUI_INSTALL_DIR}/juk )
install(
    FILES juk.notifyrc
    DESTINATION ${KNOTIFYRC_INSTALL_DIR}
)

install( FILES org.kde.juk.appdata.xml DESTINATION ${KDE_INSTALL_METAINFODIR} )
install( FILES jukservicemenu.desktop  DESTINATION
${SERVICES_INSTALL_DIR}/ServiceMenus )
install( FILES org.kde.juk.collection.xml org.kde.juk.player.xml org.kde.juk.search.xml DESTINATION ${DBUS_INTERFACES_INSTALL_DIR} )

ecm_install_icons(ICONS
    128-apps-juk.png
    16-apps-juk.png
    32-apps-juk.png
    48-apps-juk.png
    64-apps-juk.png
    DESTINATION ${ICON_INSTALL_DIR}
    THEME hicolor
)
",3.1,3.1
21938,ProjectSkyfire,SkyFire.548,False,False,False,False,False,250,C++,2020-05-16 22:08:09+00:00,2013-11-29 19:40:33+00:00,291,24330,"# Copyright (C) 2011-2020 Project SkyFire <http://www.projectskyfire.org/>
# Copyright (C) 2008-2020 TrinityCore <http://www.trinitycore.org/>
#
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

# Set projectname (must be done AFTER setting configurationtypes)
project(Project_Skyfire)

if( UNIX )
  cmake_minimum_required(VERSION 3.10.2)
else()
  cmake_minimum_required(VERSION 3.17.0)
endif()

# CMake policies (can not be handled elsewhere)
cmake_policy(SET CMP0005 OLD)

# add this options before PROJECT keyword
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

# Set RPATH-handing (CMake parameters)
set(CMAKE_SKIP_BUILD_RPATH 0)
set(CMAKE_BUILD_WITH_INSTALL_RPATH 0)
set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH 1)
	   
# set macro-directory
set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/macros"")

# Set a default build type if none was specified
if( NOT CMAKE_BUILD_TYPE )
  message(STATUS ""Setting build type to 'Release' as none was specified."")
  set(CMAKE_BUILD_TYPE ""Release"")
endif()

include(CheckCXXSourceRuns)
include(CheckIncludeFiles)

# set default buildoptions and print them
include(cmake/options.cmake)

# turn off PCH totally if enabled (hidden setting, mainly for devs)
if( NOPCH )
  set(USE_COREPCH 0)
  set(USE_SCRIPTPCH 0)
endif()

include(CheckPlatform)

set(OPENSSL_EXPECTED_VERSION 1.1.1)
set(ACE_EXPECTED_VERSION 6.4.5)

find_package(PCHSupport)
find_package(ACE REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(Threads REQUIRED)
find_package(MySQL REQUIRED)

if( UNIX )
  find_package(Readline)
  find_package(ZLIB)
  find_package(BZip2)
endif()

if(NOT WITHOUT_GIT)
  find_package(Git)
endif()

# Find revision ID and hash of the sourcetree
include(cmake/genrev.cmake)

# print out the results before continuing
include(cmake/showoptions.cmake)

# add dependencies
add_subdirectory(dep)

# add core sources
add_subdirectory(src)
",3.10.2,3.1
21941,trolando,sylvan,False,False,False,False,False,6,C,2019-09-07 08:06:51+00:00,2014-08-01 19:35:39+00:00,23,809,"cmake_minimum_required(VERSION 3.1)

project(sylvan VERSION 1.5.0)

set(PROJECT_DESCRIPTION ""Sylvan, a parallel decision diagram library"")
set(PROJECT_URL ""https://github.com/trolando/sylvan"")

message(STATUS ""CMake build configuration for Sylvan ${PROJECT_VERSION}"")
enable_language(C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Some info
message(STATUS ""OS: ${CMAKE_SYSTEM_NAME}"")
message(STATUS ""Compiler: ${CMAKE_CXX_COMPILER_ID}"")

set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/"")

set(CMAKE_C_FLAGS ""-O2 -Wextra -Wall -Werror -fno-strict-aliasing ${CMAKE_C_FLAGS}"")
set(CMAKE_CXX_FLAGS ""-O2 -Wextra -Wall -Werror -fno-strict-aliasing -Wno-deprecated ${CMAKE_CXX_FLAGS}"")

option(WITH_COVERAGE ""Add generation of test coverage"" OFF)
if(WITH_COVERAGE)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -O0 -g -coverage"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O0 -g -coverage"")

    find_program(GCOV_PATH gcov)
    find_program(LCOV_PATH lcov)
    find_program(GENHTML_PATH genhtml)

    add_custom_target(coverage
        # Cleanup lcov
        ${LCOV_PATH} --directory . --zerocounters
        # Run tests
        COMMAND make test
        # Capture counters
        COMMAND ${LCOV_PATH} --gcov-tool ${GCOV_PATH} --directory . --capture --output-file coverage.info
        COMMAND ${LCOV_PATH} --remove coverage.info 'test/*' '/usr/*' 'examples/*' 'src/lace*' 'src/sha2.c' --output-file coverage.info.cleaned
        COMMAND ${GENHTML_PATH} -o coverage coverage.info.cleaned
        COMMAND ${CMAKE_COMMAND} -E remove coverage.info coverage.info.cleaned
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include(GNUInstallDirs)
include(CTest)

add_subdirectory(src)
add_subdirectory(test)

option(SYLVAN_BUILD_EXAMPLES ""Build example tools"" OFF)
if(SYLVAN_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

option(SYLVAN_BUILD_DOCS ""Build documentation"" OFF)
if(SYLVAN_BUILD_DOCS)
    configure_file(""docs/conf.py.in"" ""docs/conf.py"" @ONLY)
    find_package(Sphinx REQUIRED)
    Sphinx_add_targets(sylvan ${CMAKE_CURRENT_BINARY_DIR}/docs ${CMAKE_CURRENT_SOURCE_DIR}/docs ${CMAKE_CURRENT_BINARY_DIR})
    add_custom_target(update_gh_pages
        COMMAND ""${CMAKE_COMMAND}"" -P ""${CMAKE_MODULE_PATH}/UpdateGHPages.cmake"")
    add_dependencies(update_gh_pages sylvan_html)
endif()

set(CPACK_GENERATOR ""DEB"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Multi-core implementation of decision diagrams"")
set(CPACK_PACKAGE_VENDOR ""Tom van Dijk"")
set(CPACK_PACKAGE_CONTACT ""Tom van Dijk <tom@tvandijk.nl>"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATCH_VERSION})
include(CPack)

# pkg-config
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/sylvan.pc.cmake.in"" ""${CMAKE_CURRENT_BINARY_DIR}/sylvan.pc"" @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/sylvan.pc"" DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"")
",3.1,3.1
22213,rug-compling,dact,False,False,False,False,False,7,C++,2020-03-15 10:53:41+00:00,2010-12-01 17:46:53+00:00,12,1060,"cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0025 NEW)

project(DACT CXX)

set (CMAKE_CXX_STANDARD 11)

set(CMAKE_CXX_FLAGS ""-pthread"")

LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
IF(""${isSystemDir}"" STREQUAL ""-1"")
  SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
ENDIF(""${isSystemDir}"" STREQUAL ""-1"")

if(APPLE)
  set(CMAKE_OSX_ARCHITECTURES ""x86_64"")
  set(ENABLE_BUNDLE OFF CACHE BOOL ""Compile an application bundle"")
  if(ENABLE_BUNDLE AND ENABLE_CODESIGN)
    set(ENABLE_SANDBOXING OFF CACHE BOOL ""Build a sandboxed application"")
  endif(ENABLE_BUNDLE AND ENABLE_CODESIGN)
  set(ENABLE_CODESIGN OFF CACHE BOOL ""Sign the application bundle"")
  if(ENABLE_CODESIGN)
    set(CODESIGN_IDENTITY ""John Doe"" CACHE STRING ""Code signing identity"")
  endif(ENABLE_CODESIGN)
else(APPLE)
  set(ENABLE_BUNDLE OFF)
endif(APPLE)

if(ENABLE_BUNDLE)
  set(PROGNAME Dact)
else()
  set(PROGNAME dact)
endif()

if(APPLE AND EXISTS /usr/local/opt/qt5)
  list(APPEND CMAKE_PREFIX_PATH ""/usr/local/opt/qt5"")
endif()

set(VERSION ""0.0.1"")

set(GIT_REVISION ""unknown"")
exec_program(git
  ARGS ""log --pretty=format:\""%ad (commit: %h)\"" --date=iso -1""
  OUTPUT_VARIABLE GIT_REVISION 
)

message(STATUS ""Building revision: ${GIT_REVISION}"")

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/include/config.hh.cmake 
  ${CMAKE_SOURCE_DIR}/include/config.hh)

if (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set (CMAKE_BUILD_TYPE Release)
endif (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

list(APPEND CMAKE_MODULE_PATH ""${DACT_SOURCE_DIR}/cmake"")

include_directories(${DACT_SOURCE_DIR}/include)
include_directories(${DACT_BINARY_DIR})

if(NOT DEFINED DATA_INSTALL_DIR)
  set(DATA_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/share"")
endif(NOT DEFINED DATA_INSTALL_DIR)

find_package(Boost 1.46.1)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
endif()

find_package(AlpinoCorpus REQUIRED)
if(ALPINOCORPUS_FOUND)
	INCLUDE_DIRECTORIES(${ALPINOCORPUS_INCLUDE_DIR})
endif(ALPINOCORPUS_FOUND)

find_package(ZLIB REQUIRED)
if(ZLIB_FOUND)
  include_directories(${ZLIB_INCLUDE_DIRS})
endif()

find_package(Iconv REQUIRED)
if(ICONV_FOUND)
  include_directories(${ICONV_INCLUDE_DIR})
endif()

find_package(LibXml2 REQUIRED)
if(LIBXML2_FOUND)
  include_directories(${LIBXML2_INCLUDE_DIR})
endif()

find_package(LibXslt REQUIRED)
if(LIBXSLT_FOUND)
  include_directories(${LIBXSLT_INCLUDE_DIR})
endif()

find_package(LibExslt REQUIRED)
if(LIBEXSLT_FOUND)
  include_directories(${LIBEXSLT_INCLUDE_DIR})
endif()

find_package(XercesC REQUIRED)
if (XERCESC_FOUND)
  include_directories(${XERCESC_INCLUDE_DIR})
endif()

find_package(XQilla REQUIRED)
if (XQILLA_FOUND)
  include_directories(${XQILLA_INCLUDE_DIR})
endif()

find_package(Qt5Core REQUIRED)
include_directories(${Qt5Core_INCLUDE_DIRS})

find_package(Qt5Concurrent REQUIRED)
include_directories(${Qt5Concurrent_INCLUDE_DIRS})

find_package(Qt5Network REQUIRED)
include_directories(${Qt5Network_INCLUDE_DIRS})

find_package(Qt5PrintSupport REQUIRED)
include_directories(${Qt5PrintSupport_INCLUDE_DIRS})

find_package(Qt5Widgets REQUIRED)
include_directories(${Qt5Widgets_INCLUDE_DIRS})

if(APPLE)
  get_target_property(_qcocoa_dylib Qt5::QCocoaIntegrationPlugin LOCATION)
  if(NOT Qt5Core_VERSION STRLESS ""5.10"")
    get_target_property(_qmacstyle_dylib Qt5::QMacStylePlugin LOCATION)
  endif()
endif(APPLE)

option(USE_WEBSERVICE ""Enable Alpino webservice client"" OFF)

# Dact sources
SET(dact_SRCS
  src/AboutWindow.cpp
  src/ArchiveModel.cpp
  src/ArchiveListItemDelegate.cpp
  src/ArchiveListItemWidget.cpp
  src/DactColorWell.cpp
  src/BracketedDelegates/BracketedDelegate.cpp
  src/BracketedDelegates/BracketedColorDelegate.cpp
  src/BracketedDelegates/BracketedVisibilityDelegate.cpp
  src/BracketedDelegates/BracketedKeywordInContextDelegate.cpp
  src/BracketedSentenceWidget.cpp
  src/BracketedWindow.cpp
  src/DependencyTreeWidget.cpp
  src/DactApplication.cpp
  src/DactApplicationEvent.cpp
  src/HistoryComboBox.cpp
  src/DactListView.cpp
  src/DactMacrosFile.cpp
  src/DactMacrosMenu.cpp
  src/DactMacrosModel.cpp
  src/DactSettings.cpp
  src/DactTableView.cpp
  src/DactTool.cpp
  src/DactToolsMenu.cpp
  src/DactToolsModel.cpp
  src/DelayedLoadFileCallback.cpp
  src/DactMenuBar.cpp
  src/Edge.cpp
  src/QueryModel.cpp
  src/QueryScope.cpp
  src/QtIOCompressor.cpp
  src/SimpleDTD.cpp
  src/SimpleDTDAttribute.cpp
  src/DactTreeScene.cpp
  src/DactTreeView.cpp
  src/FilterModel.cpp
  src/GlobalCopyCommand.cpp
  src/GlobalCutCommand.cpp
  src/GlobalEditCommand.cpp
  src/GlobalPasteCommand.cpp
  src/HumanReadableSize.cpp
  src/MainWindow.cpp
  src/OpenCorpusDialog.cpp
  src/PercentageCellDelegate.cpp
  src/PopupItem.cpp
  src/PreferencesWindow.cpp
  src/ProgramOptions.cpp
  src/QtLocalPeer.cpp
  src/QtSingleApplication.cpp
  src/RecentFilesMenu.cpp
  src/SecEdge.cpp
  src/StatisticsWindow.cpp
  src/TreeNode.cpp
  src/TreeNodeInspector.cpp
  src/XPathValidator.cpp
  src/XSLTransformer.cpp
  src/generateQuery.cpp
  src/main.cpp
  src/validityColor.cpp
)

SET(dact_HDRS
  include/AboutWindow.hh
  include/AppleUtils.hh
  include/ArchiveModel.hh
  include/ArchiveListItemDelegate.hh
  include/ArchiveListItemWidget.hh
  include/AutoUpdater.hh
  include/BracketedColorDelegate.hh
  include/BracketedDelegate.hh
  include/BracketedKeywordInContextDelegate.hh
  include/BracketedSentenceWidget.hh
  include/BracketedVisibilityDelegate.hh
  include/BracketedWindow.hh
  include/CorpusWidget.hh
  include/DependencyTreeWidget.hh
  include/config.hh
  include/DactApplication.hh
  include/DactApplicationEvent.hh
  include/DactColorWell.hh
  include/DactListView.hh
  include/DactMacro.hh
  include/DactMacrosFile.hh
  include/DactMacrosMenu.hh
  include/DactMacrosModel.hh
  include/DactSettings.hh
  include/DactTableView.hh
  include/DactTool.hh
  include/DactToolsMenu.hh
  include/DactToolsModel.hh
  include/DactTreeScene.hh
  include/DactTreeView.hh
  include/DelayedLoadFileCallback.hh
  include/Edge.hh
  include/FilterModel.hh
  include/GlobalCopyCommand.hh
  include/GlobalCutCommand.hh
  include/GlobalEditCommand.hh
  include/GlobalPasteCommand.hh
  include/HistoryComboBox.hh
  include/HumanReadableSize.hh
  include/OpenCorpusDialog.hh
  include/MainWindow.hh
  include/PercentageCellDelegate.hh
  include/PopupItem.hh
  include/PreferencesWindow.hh
  include/ProgramOptions.hh
  include/QtIOCompressor.hh
  include/QtLocalPeer.hh
  include/QtLockedFile.hh
  include/QtSingleApplication.hh
  include/Query.hh
  include/QueryModel.hh
  include/QueryScope.hh
  include/RecentFilesMenu.hh
  include/SecEdge.hh
  include/SimpleDTD.hh
  include/SimpleDTDAttribute.hh
  include/StatisticsWindow.hh
  include/TreeNode.hh
  include/TreeNodeInspector.hh
  include/ValidityColor.hh
  include/XPathValidator.hh
  include/XSLTransformer.hh
)  

SET(dact_MOC_HDRS
  include/AboutWindow.hh
  include/ArchiveModel.hh
  include/ArchiveListItemDelegate.hh
  include/ArchiveListItemWidget.hh
  include/DactApplication.hh
  include/DactColorWell.hh
  include/BracketedDelegate.hh
  include/BracketedColorDelegate.hh
  include/BracketedKeywordInContextDelegate.hh
  include/BracketedSentenceWidget.hh
  include/BracketedVisibilityDelegate.hh
  include/BracketedWindow.hh
  include/CorpusWidget.hh
  include/DependencyTreeWidget.hh
  include/DactListView.hh
  include/DactMacrosFile.hh
  include/DactMacrosMenu.hh
  include/DactMacrosModel.hh
  include/DactSettings.hh
  include/DactTableView.hh
  include/DactTool.hh
  include/DactToolsModel.hh
  include/DactTreeScene.hh
  include/DactTreeView.hh
  include/DelayedLoadFileCallback.hh
  include/DactMenuBar.hh
  include/HistoryComboBox.hh
  include/QtIOCompressor.hh
  include/QueryModel.hh
  include/FilterModel.hh
  include/GlobalCopyCommand.hh
  include/GlobalCutCommand.hh
  include/GlobalEditCommand.hh
  include/GlobalPasteCommand.hh
  include/MainWindow.hh
  include/OpenCorpusDialog.hh
  include/PercentageCellDelegate.hh
  include/PreferencesWindow.hh
  include/QtLocalPeer.hh
  include/QtSingleApplication.hh
  include/RecentFilesMenu.hh
  include/StatisticsWindow.hh
  include/TreeNodeInspector.hh
  include/XPathValidator.hh
)

SET(dact_UI
  ui/AboutWindow.ui
  ui/ArchiveListItemWidget.ui
  ui/BracketedWindow.ui
  ui/DependencyTreeWidget.ui
  ui/DactMenuBar.ui
  ui/MainWindow.ui
  ui/OpenCorpusDialog.ui
  ui/PreferencesWindow.ui
  ui/StatisticsWindow.ui
  ui/TreeNodeInspector.ui
)

SET(dact_RCS
  resources/dact.qrc
)

if(USE_WEBSERVICE)
  list(APPEND dact_HEADERS
    include/WebserviceWindow.hh)
  list(APPEND dact_MOC_HDRS
    include/WebserviceWindow.hh)
  list(APPEND dact_SRCS
    src/WebserviceWindow.cpp)
  list(APPEND dact_UI
    ui/WebserviceWindow.ui)
endif()

# OS X Full Screen support
if(APPLE)
  list(APPEND dact_SRCS
    src/AppleUtils.mm)
  set_source_files_properties(
    src/AppleUtils.mm
    PROPERTIES COMPILE_FLAGS ""-x objective-c++"")
  set(CMAKE_EXE_LINKER_FLAGS ""-framework AppKit"")
endif(APPLE)

# Sparkle Auto updater
if(APPLE)
  option(USE_SPARKLE ""Enable Sparkle updates"" OFF)

  if(USE_SPARKLE)
    list(APPEND dact_HEADERS
      include/SparkleAutoUpdater.hh)
    list(APPEND dact_SRCS
      src/SparkleAutoUpdater.mm)
    set_source_files_properties(
      src/SparkleAutoUpdater.mm
      PROPERTIES COMPILE_FLAGS ""-x objective-c++"")
    set(CMAKE_EXE_LINKER_FLAGS ""-framework AppKit -framework Sparkle"")
  endif(USE_SPARKLE)

  set(dact_MACOSX_RESOURCE_FILES
    ${DACT_SOURCE_DIR}/resources/dact-espresso.icns
    ${DACT_SOURCE_DIR}/resources/dact-corpus.icns)
endif(APPLE)

set_source_files_properties(
  ${dact_MACOSX_RESOURCE_FILES}
  PROPERTIES
  MACOSX_PACKAGE_LOCATION Resources
)

qt5_add_resources(dact_SRCS ${dact_RCS})
qt5_wrap_ui(dact_UI_HDRS ${dact_UI})
qt5_wrap_cpp(dact_MOC_SRCS ${dact_MOC_HDRS})

if(ENABLE_BUNDLE)
  add_executable(${PROGNAME} MACOSX_BUNDLE
    ${dact_SRCS}
    ${dact_HDRS}
    ${dact_MOC_SRCS}
    ${dact_UI_HDRS}
    ${dact_MACOSX_RESOURCE_FILES})
else()
  add_executable(${PROGNAME}
    ${dact_SRCS}
    ${dact_HDRS}
    ${dact_MOC_SRCS}
    ${dact_UI_HDRS}
    ${dact_MACOSX_RESOURCE_FILES})
endif()

target_link_libraries(${PROGNAME} ${Qt5Core_LIBRARIES})
target_link_libraries(${PROGNAME} ${Qt5Concurrent_LIBRARIES})
target_link_libraries(${PROGNAME} ${Qt5Network_LIBRARIES})
target_link_libraries(${PROGNAME} ${Qt5PrintSupport_LIBRARIES})
target_link_libraries(${PROGNAME} ${Qt5Widgets_LIBRARIES})
target_link_libraries(${PROGNAME} ${ALPINOCORPUS_LIBRARIES})
target_link_libraries(${PROGNAME} ${DBXML_LIBRARY})
target_link_libraries(${PROGNAME} ${ZLIB_LIBRARIES})
#target_link_libraries(${PROGNAME} ${DBCXX_LIBRARY})
#target_link_libraries(${PROGNAME} ${XQILLA_LIBRARY})
#target_link_libraries(${PROGNAME} ${XERCES_LIBRARY})
target_link_libraries(${PROGNAME} ${LIBXML2_LIBRARIES})
target_link_libraries(${PROGNAME} ${LIBXSLT_LIBRARIES})
target_link_libraries(${PROGNAME} ${LIBEXSLT_LIBRARIES})
target_link_libraries(${PROGNAME} ${XERCESC_LIBRARY})
target_link_libraries(${PROGNAME} ${XQILLA_LIBRARY})

if(APPLE)
  target_link_libraries(${PROGNAME} ${Qt5MacExtras_LIBRARIES})
endif(APPLE)

install(TARGETS ${PROGNAME} 
  BUNDLE DESTINATION . COMPONENT Runtime
  RUNTIME DESTINATION bin COMPONENT Runtime) 

if(UNIX AND NOT APPLE)
  install(FILES ${DACT_SOURCE_DIR}/resources/unix/dact.desktop DESTINATION ${DATA_INSTALL_DIR}/applications)
  install(FILES ${DACT_SOURCE_DIR}/resources/dact-espresso.svg DESTINATION ${DATA_INSTALL_DIR}/icons/hicolor/scalable/apps RENAME dact.svg)
endif(UNIX AND NOT APPLE)

if(UNIX)
  install(FILES ${DACT_SOURCE_DIR}/man/dact.1 DESTINATION ${DATA_INSTALL_DIR}/man/man1)
endif(UNIX)

# OS X bundle creation
if(APPLE)
  if(ENABLE_BUNDLE)
    set(APP ${CMAKE_INSTALL_PREFIX}/${PROGNAME}.app)

    get_filename_component(ALPINOCORPUS_LIBRARY_DIR
      ${ALPINOCORPUS_LIBRARIES} PATH)

    set(DIRS
      ${QT_LIBRARY_DIR}
      ${ALPINOCORPUS_LIBRARY_DIR})

    set(MACOSX_BUNDLE_GUI_IDENTIFIER ""nl.rug.Dact"")
    set(MACOSX_BUNDLE_ICON_FILE ""dact-espresso.icns"")
    set(MACOSX_BUNDLE_BUNDLE_NAME ${PROGNAME} )
    set(MACOSX_BUNDLE_BUNDLE_VERSION ${VERSION} )

    set_target_properties(${PROGNAME}
      PROPERTIES
      MACOSX_BUNDLE_INFO_PLIST ${DACT_SOURCE_DIR}/resources/Info.plist)

    get_target_property(QT_LIBRARY_DIR Qt5::Core LOCATION)
    get_filename_component(QT_LIBRARY_DIR ${QT_LIBRARY_DIR} PATH)
    get_filename_component(QT_LIBRARY_DIR ${QT_LIBRARY_DIR} PATH)

    # Qt Platform Plugin
    #
    # And yet again, completely u(nder)documented Qt/CMake hacks
    # to get the Mac styling plugin. Thanks to the openconnect
    # project for this snippet!
    install(FILES
        ${_qcocoa_dylib}
        DESTINATION ${APP}/Contents/plugins/platforms
        COMPONENT Runtime
    )
    set(additionalLib ${APP}/Contents/plugins/platforms/libqcocoa.dylib)
    if(NOT Qt5Core_VERSION STRLESS ""5.10"")
        install(FILES
            ${_qmacstyle_dylib}
            DESTINATION ${APP}/Contents/plugins/styles
            COMPONENT Runtime
        )
        set(additionalLib 
            ${additionalLib}
            ${APP}/Contents/plugins/styles/libqmacstyle.dylib
        )
    endif()

    INSTALL(CODE ""
      file(WRITE \""${APP}/Contents/Resources/qt.conf\"")
      file(MAKE_DIRECTORY \""${APP}/Contents/Resources/qt_menu.nib\"")
      execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory
        \""${QT_LIBRARY_DIR}/QtGui.framework/Resources/qt_menu.nib\""
        \""${APP}/Contents/Resources/qt_menu.nib\"")
      file(MAKE_DIRECTORY \""${APP}/Contents/plugins/platforms\"")
      include(BundleUtilities)
      fixup_bundle(\""${APP}\"" \""${additionalLib}\"" \""\"" \""${DIRS}\"")
    "" COMPONENT Runtime)

    # XXX - Automatically find frameworks?
    if(ENABLE_CODESIGN)
      if(ENABLE_SANDBOXING)
        INSTALL(CODE ""
          execute_process(COMMAND codesign --verbose --verify --deep --sign \""${CODESIGN_IDENTITY}\"" --entitlements ${DACT_SOURCE_DIR}/resources/entitlements.plist \""${APP}\"")
        "" COMPONENT Runtime)
      else(ENABLE_SANDBOXING)
        INSTALL(CODE ""
          execute_process(COMMAND codesign --verbose --verify --deep --sign \""${CODESIGN_IDENTITY}\"" \""${APP}\"")
        "" COMPONENT Runtime)
      endif(ENABLE_SANDBOXING)
    endif(ENABLE_CODESIGN)

    set(CPACK_BINARY_DRAGNDROP ON)
    include(CPack)
  endif(ENABLE_BUNDLE)
endif(APPLE)
",3.1,3.1
22287,ppwwyyxx,OpenPano,False,False,False,False,False,4,C++,2019-03-27 19:34:33+00:00,2013-04-24 03:56:02+00:00,1144,439,"cmake_minimum_required (VERSION 3.1)
project (OpenPano LANGUAGES CXX)

# set a default build type if none was provided
# this has to be done before the project() instruction!
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build (Debug or Release)"" FORCE)
endif()

if (MSVC)
	if(MSVC_VERSION LESS 1800) # 1700 = VS 2013
		message(FATAL_ERROR ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
	endif()
	set(OBJ_EXT obj)
else()
	include(CheckCXXCompilerFlag)
	CHECK_CXX_COMPILER_FLAG(""-std=c++11"" COMPILER_SUPPORTS_CXX11)
	CHECK_CXX_COMPILER_FLAG(""-std=c++0x"" COMPILER_SUPPORTS_CXX0X)
	if(COMPILER_SUPPORTS_CXX11)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
	elseif(COMPILER_SUPPORTS_CXX0X)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
	else()
		message(FATAL_ERROR ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
	endif()
	set(OBJ_EXT o)
endif()
if (WIN32)
	add_definitions( -DUNICODE -D_UNICODE)
endif()


# compiler options:
if(MSVC)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN -DMSVC)
	# /Zo makes debug symbol in pdb in release mode in VS2015
	add_definitions(/fp:fast /GR- /Os /Zo /arch:AVX /openmp)
else()
	add_definitions(-O3 -march=native -Wall -Wextra)
endif()
add_definitions(-DDEBUG)


add_subdirectory(src)
",3.1,3.1
22369,xournalpp,xournalpp,False,False,False,False,False,90,C++,2020-05-17 19:48:40+00:00,2013-08-08 20:58:27+00:00,1765,4090,"cmake_minimum_required(VERSION 3.10)

project (""Xournal++"" CXX C)

## Project related Variables
## Also update changelog in debian folder!
set (CPACK_PACKAGE_VERSION_MAJOR ""1"")
set (CPACK_PACKAGE_VERSION_MINOR ""1"")
set (CPACK_PACKAGE_VERSION_PATCH ""0"")
set (CPACK_DEBIAN_PACKAGE_RELEASE 1)
set (VERSION_SUFFIX ""+dev"")
set (PROJECT_VERSION ""${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}${VERSION_SUFFIX}"")
set (PROJECT_PACKAGE ""xournalpp"")
set (PROJECT_STRING ""${PROJECT_NAME} ${PROJECT_VERSION}"")
set (PROJECT_URL ""https://github.com/xournalpp/xournalpp"")

## CMAKE_Variables
set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/find"" ""${PROJECT_SOURCE_DIR}/cmake/include"")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_definitions(-D_USE_MATH_DEFINES)

# package version
include (Version)
core_find_git_rev(RELEASE_IDENTIFIER)
string(TIMESTAMP PACKAGE_TIMESTAMP ""%Y%m%d.%H%M"" UTC)
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION}~git${PACKAGE_TIMESTAMP}-${RELEASE_IDENTIFIER}-${DISTRO_CODENAME})

include(TargetArch)
target_architecture(PACKAGE_ARCH)

configure_file(cmake/VERSION.in VERSION)

configure_file (
    cmake/postinst.in
    cmake/postinst
    @ONLY
)

include (FindPkgConfig)

set (PACKAGE_DATA_DIR ""${CMAKE_INSTALL_PREFIX}/share"")

# Git repo info
include (GitRepo)

################################
# CMake os-fixups
# this section should decrease in size for newer CMake versions.
################################

################################
# Project compiler flags
################################
set(xournalpp_CXX_FLAGS ${CMAKE_CXX_FLAGS})

if (MSVC)
	set(xournalpp_CXX_FLAGS ${xournalpp_CXX_FLAGS} -DNOMINMAX -DWIN32_LEAN_AND_MEAN)
else ()
    set(LIB_ENDING ""so"")
endif ()

## For touch workaround, may need to be disabled for a Wayland Build
if (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"" OR ${CMAKE_SYSTEM_NAME} MATCHES ""FreeBSD"")
    set (xournalpp_LDFLAGS ${xournalpp_LDFLAGS} ""-lX11 -lXi"")
endif ()

## Libraries ##

macro(add_includes_ldflags LDFLAGS INCLUDES)
	set(xournalpp_LDFLAGS ${xournalpp_LDFLAGS} ""${LDFLAGS}"")
    include_directories(SYSTEM ${INCLUDES})
    # Do not add system headers and external libraries to the additional include paths
    # set(xournalpp_INCLUDE_DIRS ${xournalpp_INCLUDE_DIRS} ""${INCLUDES}"")
endmacro (add_includes_ldflags LDFLAGS INCLUDES)

find_package(CXX17 REQUIRED COMPONENTS optional)
find_package(Filesystem REQUIRED COMPONENTS Boost Final Experimental)

# libexec
if (WIN32)
	set(xournalpp_LDFLAGS ${xournalpp_LDFLAGS} ""-mwindows"")
else ()
	find_package(Backtrace REQUIRED)
	add_includes_ldflags(""${Backtrace_LIBRARIES}"" ""${Backtrace_INCLUDE_DIRS}"")
endif ()

# GLIB
pkg_check_modules (Glib REQUIRED ""glib-2.0 >= 2.32.0"")
add_definitions (-DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_32)
add_includes_ldflags (""${Glib_LDFLAGS}"" ""${Glib_INCLUDE_DIRS}"")

# GTK+
pkg_check_modules (GTK REQUIRED ""gtk+-3.0 >= 3.18.9"")
add_definitions (-DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_18)
add_includes_ldflags (""${GTK_LDFLAGS}"" ""${GTK_INCLUDE_DIRS}"")

# GThread
pkg_check_modules (GThread REQUIRED ""gthread-2.0 >= 2.4.0"")
add_includes_ldflags (""${GThread_LDFLAGS}"" ""${GThread_INCLUDE_DIRS}"")

# LibXML
pkg_check_modules (Libxml REQUIRED ""libxml-2.0 >= 2.0.0"")
add_includes_ldflags (""${Libxml_LDFLAGS}"" ""${Libxml_INCLUDE_DIRS}"")

# Poppler
pkg_check_modules (PopplerGlib REQUIRED ""poppler-glib >= 0.41.0"")
add_includes_ldflags (""${PopplerGlib_LDFLAGS}"" ""${PopplerGlib_INCLUDE_DIRS}"")
set(POPPLER_INCLUDE_DIR, ""${PopplerGlib_INCLUDE_DIRS}"")

# zlib
find_package (ZLIB REQUIRED)
add_includes_ldflags (""${ZLIB_LIBRARIES}"" ""${ZLIB_INCLUDE_DIRS}"")

# libzip
pkg_check_modules (ZIP REQUIRED ""libzip >= 1.0.1"")
add_includes_ldflags (""${ZIP_LDFLAGS}"" ""${ZIP_INCLUDE_DIRS}"")

# pthreads
find_package (Threads REQUIRED)
set (xournalpp_LDFLAGS ${xournalpp_LDFLAGS} ${CMAKE_THREAD_LIBS_INIT})

# portaudio
pkg_check_modules(PORTAUDIOCPP REQUIRED ""portaudiocpp >= 12"")
add_includes_ldflags (""${PORTAUDIOCPP_LDFLAGS}"" ""${PORTAUDIOCPP_INCLUDE_DIRS}"")

# sndfile
pkg_check_modules(SNDFILE REQUIRED ""sndfile >= 1.0.25"")
add_includes_ldflags (""${SNDFILE_LDFLAGS}"" ""${SNDFILE_INCLUDE_DIRS}"")

## Additional features ##

# CppUnit
option (ENABLE_CPPUNIT ""Build CppUnit test instead of xournalpp application"" OFF)
if (ENABLE_CPPUNIT)
	pkg_check_modules(CppUnit REQUIRED ""cppunit >= 1.12-0"")
	enable_testing()
endif (ENABLE_CPPUNIT)

# Mac integration
pkg_check_modules (MacIntegration ""gtk-mac-integration"")
if (MacIntegration_FOUND)
	message(""Enable Mac integration"")
	add_includes_ldflags (""${MacIntegration_LDFLAGS}"" ""${MacIntegration_INCLUDE_DIRS}"")
	add_definitions (-DMAC_INTEGRATION)
endif ()

# Plugins / scripting
pkg_check_modules (Lua ""lua5.3"")
if (NOT Lua_FOUND)
	pkg_check_modules (Lua ""lua >= 5.3"")
endif()

if (Lua_FOUND)
	message(""Enable Xournal++ Plugins"")
	add_includes_ldflags(""${Lua_LDFLAGS}"" ""${Lua_INCLUDE_DIRS}"")
	set(ENABLE_PLUGINS ""true"")
endif ()

unset(add_includes_ldflags)

#
# DO NOT INCLUDE LIBRARIES WITH pkg_check_modules AFTER THIS LINE!!!
#
if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
	# Fix linker flag handling for MacOS builds where frameworks are separated from their flag
	string(REPLACE ""-framework;"" ""-framework "" xournalpp_LDFLAGS ""${xournalpp_LDFLAGS}"")
endif()

configure_file(
		src/config-features.h.in
		src/config-features.h
		ESCAPE_QUOTES @ONLY
)
configure_file (
		src/filesystem.h.in
		src/filesystem.h
)

## I18n ##
add_subdirectory (po)

## Configuration headers and developement options ##

# Development options
option (DEV_CALL_LOG ""Call log"" OFF)

# Debug options
option (DEBUG_INPUT ""Input debugging, e.g. eraser events etc"" OFF)
option (DEBUG_INPUT_PRINT_ALL_MOTION_EVENTS ""Input debugging, print all motion events"" OFF)
option (DEBUG_INPUT_GDK_PRINT_EVENTS ""Input debugging, print all GDK events"" OFF)
option (DEBUG_RECOGNIZER ""Shape recognizer debug: output score etc"" OFF)
option (DEBUG_SHEDULER ""Scheduler debug: show jobs etc"" OFF)
option (DEBUG_SHOW_ELEMENT_BOUNDS ""Draw a surrounding border to all elements"" OFF)
option (DEBUG_SHOW_REPAINT_BOUNDS ""Draw a border around all repaint rects"" OFF)
option (DEBUG_SHOW_PAINT_BOUNDS ""Draw a border around all painted rects"" OFF)
mark_as_advanced (FORCE
		DEBUG_INPUT DEBUG_RECOGNIZER DEBUG_SHEDULER DEBUG_SHOW_ELEMENT_BOUNDS DEBUG_SHOW_REPAINT_BOUNDS DEBUG_SHOW_PAINT_BOUNDS
)

# Advanced development config
set (DEV_TOOLBAR_CONFIG ""toolbar.ini"" CACHE STRING ""Toolbar config file name"")
set (DEV_SETTINGS_XML_FILE ""settings.xml"" CACHE STRING ""Settings file name"")
set (DEV_PRINT_CONFIG_FILE ""print-config.ini"" CACHE STRING ""Print config file name"")
set (DEV_METADATA_FILE ""metadata.ini"" CACHE STRING ""Metadata file name"")
set (DEV_METADATA_MAX_ITEMS 50 CACHE STRING ""Maximal amount of metadata elements"")
set (DEV_ERRORLOG_DIR ""errorlogs"" CACHE STRING ""Directory where errorlogfiles will be placed"")

option(DEV_ENABLE_GCOV ""Build with gcov support"" OFF) # Enabel gcov support – expanded in src/
option (DEV_CHECK_GTK3_COMPAT ""Adds a few compiler flags to check basic GTK3 upgradeability support (still compiles for GTK2!)"")
if (DEV_CHECK_GTK3_COMPAT)
	add_definitions(-DGTK_DISABLE_SINGLE_INCLUDES -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGSEAL_ENABLE)
endif ()

mark_as_advanced (FORCE
		DEV_TOOLBAR_CONFIG DEV_SETTINGS_XML_FILE DEV_PRINT_CONFIG_FILE DEV_METADATA_FILE DEV_METADATA_MAX_ITEMS
		DEV_ENABLE_GCOV DEV_CHECK_GTK3_COMPAT
)

configure_file(
		src/config.h.in
		src/config.h
		ESCAPE_QUOTES @ONLY
)

configure_file(
		src/config-debug.h.in
		src/config-debug.h
		ESCAPE_QUOTES @ONLY
)

configure_file(
		src/config-dev.h.in
		src/config-dev.h
		ESCAPE_QUOTES @ONLY
)

configure_file(
		src/config-paths.h.in
		src/config-paths.h
		ESCAPE_QUOTES @ONLY
)

option(xournalpp_LINT ""enable lint (clang-tidy) target"" OFF)
if (xournalpp_LINT)
	include(clang-tidy)
endif ()

## Source building ##
add_subdirectory (src)

## Final targets and installing ##

# Install resources
install (DIRECTORY ui
		DESTINATION ""share/xournalpp""
		COMPONENT xournalpp
)
install (DIRECTORY plugins
		DESTINATION ""share/xournalpp""
		COMPONENT xournalpp
)

# Install desktop shortcuts for Linux
if (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
	message (""Installing desktop files"")

	# Install icons
	install(FILES ui/pixmaps/com.github.xournalpp.xournalpp.svg
			DESTINATION share/icons/hicolor/scalable/apps)

	# Symlink are not easy to use with CMake, therefor simple install a copy...
	install(FILES ui/pixmaps/application-x-xopp.svg
			DESTINATION share/icons/hicolor/scalable/mimetypes/)
	install(FILES ui/pixmaps/application-x-xopt.svg
			DESTINATION share/icons/hicolor/scalable/mimetypes/)
	install(FILES ui/pixmaps/application-x-xojpp.svg
			DESTINATION share/icons/hicolor/scalable/mimetypes/)

	install(FILES ui/pixmaps/gnome-mime-application-x-xopp.svg
			DESTINATION share/icons/hicolor/scalable/mimetypes/)
	install(FILES ui/pixmaps/gnome-mime-application-x-xopt.svg
			DESTINATION share/icons/hicolor/scalable/mimetypes/)

	install(FILES desktop/com.github.xournalpp.xournalpp.xml
			DESTINATION share/mime/packages)
	install(FILES desktop/com.github.xournalpp.xournalpp.desktop
			DESTINATION share/applications)
	install(FILES desktop/x-xojpp.desktop
			DESTINATION share/mimelnk/application)
	install(FILES desktop/x-xopp.desktop
			DESTINATION share/mimelnk/application)
	install(FILES desktop/x-xopt.desktop
			DESTINATION share/mimelnk/application)

	install(FILES desktop/com.github.xournalpp.xournalpp.thumbnailer
			DESTINATION share/thumbnailers)

	install(FILES desktop/com.github.xournalpp.xournalpp.appdata.xml
			DESTINATION share/metainfo)
endif ()

# Uninstall target
configure_file (
		cmake/cmake_uninstall.cmake.in
		cmake/cmake_uninstall.cmake
		@ONLY
)

add_custom_target(uninstall
		COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake

		COMMENT ""Uninstall entire Xournal++""
		)

message(""
Configuration:
	Compiler:                   ${CMAKE_CXX_COMPILER}
	CppUnit enabled:            ${ENABLE_CPPUNIT}
"")

option(CMAKE_DEBUG_INCLUDES_LDFLAGS ""List include dirs and ldflags for xournalpp target"" OFF)
mark_as_advanced (FORCE CMAKE_DEBUG_INCLUDES_LDFLAGS)
if (CMAKE_DEBUG_INCLUDES_LDFLAGS)
	message(""Include directories: ${xournalpp_INCLUDE_DIRS}"")
	message(""LDFLAGS/LIBRARIES: ${xournalpp_LDFLAGS}"")
endif (CMAKE_DEBUG_INCLUDES_LDFLAGS)


# Packaging options
set (CPACK_OUTPUT_FILE_PREFIX packages)
set (CPACK_PACKAGE_NAME ""${PROJECT_PACKAGE}"")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Xournal++ - Open source hand note-taking program"")
set (CPACK_RESOURCE_FILE_LICENSE ""${PROJECT_SOURCE_DIR}/LICENSE"")
set (CPACK_PACKAGE_INSTALL_DIRECTORY ""Xournal++"")
set (CPACK_PACKAGE_FILE_NAME ""xournalpp-${PROJECT_VERSION}-${DISTRO_NAME}-${DISTRO_CODENAME}-${PACKAGE_ARCH}"")

# .deb package options
set (CPACK_DEBIAN_PACKAGE_VERSION ""${CPACK_PROJECT_VERSION}"")
set (CPACK_DEBIAN_PACKAGE_HOMEPAGE ${PACKAGE_URL})
set (CPACK_DEBIAN_PACKAGE_MAINTAINER ""Andreas Butti <andreasbutti@gmail.com>"")
set (CPACK_DEBIAN_PACKAGE_SECTION ""graphics"")
set (CPACK_DEBIAN_PACKAGE_DEPENDS
		""libglib2.0-0 (>= 2.32), libgtk-3-0 (>= 3.18), libpoppler-glib8 (>= 0.41.0), libxml2 (>= 2.0.0), libportaudiocpp0 (>= 12), libsndfile1 (>= 1.0.25), liblua5.3-0, libzip4 (>= 1.0.1), zlib1g"")
set (CPACK_DEBIAN_PACKAGE_SUGGESTS ""texlive-base, texlive-latex-extra"")  # Latex tool
# Use debian's arch scheme; we only care about x86/amd64 for now but feel free to add more
if (${PACKAGE_ARCH} STREQUAL ""x86_64"")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""amd64"")
endif()

if (NOT DEFINED CPACK_GENERATOR)
	set(CPACK_GENERATOR ""TGZ"")
endif ()

include(CPack)
",3.10,3.1
22477,Fxrh,libqmatrixclient,False,False,False,False,False,26,C++,2020-04-22 19:52:19+00:00,2016-04-09 00:12:50+00:00,73,1726,"cmake_minimum_required(VERSION 3.10)
if (POLICY CMP0092)
cmake_policy(SET CMP0092 NEW)
endif()

set(API_VERSION ""0.6"")
project(Quotient VERSION ""${API_VERSION}.0"" LANGUAGES CXX)

option(${PROJECT_NAME}_INSTALL_TESTS ""install quotest (former qmc-example) application"" ON)
# https://github.com/quotient-im/libQuotient/issues/369
option(${PROJECT_NAME}_ENABLE_E2EE ""end-to-end encryption (E2EE) support"" OFF)

include(CheckCXXCompilerFlag)
if (WIN32)
    if (NOT CMAKE_INSTALL_LIBDIR)
        set(CMAKE_INSTALL_LIBDIR ""."")
    endif ()

    if (NOT CMAKE_INSTALL_BINDIR)
        set(CMAKE_INSTALL_BINDIR ""."")
    endif ()

    if (NOT CMAKE_INSTALL_INCLUDEDIR)
        set(CMAKE_INSTALL_INCLUDEDIR ""include"")
    endif ()
else()
    include(GNUInstallDirs)
    set(INCLUDEDIR_INIT ${PROJECT_NAME})
endif(WIN32)
set(${PROJECT_NAME}_INSTALL_INCLUDEDIR
        ""${CMAKE_INSTALL_INCLUDEDIR}/${INCLUDEDIR_INIT}"" CACHE PATH
        ""directory to install ${PROJECT_NAME} include files to"")

# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Debug' as none was specified"")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING ""Choose the type of build"" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

if (MSVC)
    add_compile_options(/EHsc /W4
        /wd4100 /wd4127 /wd4242 /wd4244 /wd4245 /wd4267 /wd4365 /wd4456 /wd4459
        /wd4464 /wd4505 /wd4514 /wd4571 /wd4619 /wd4623 /wd4625 /wd4626 /wd4706
        /wd4710 /wd4774 /wd4820 /wd4946 /wd5026 /wd5027)
else()
    foreach (FLAG all """" pedantic extra error=return-type no-unused-parameter
                  no-gnu-zero-variadic-macro-arguments)
        CHECK_CXX_COMPILER_FLAG(""-W${FLAG}"" WARN_${FLAG}_SUPPORTED)
        if ( WARN_${FLAG}_SUPPORTED AND NOT CMAKE_CXX_FLAGS MATCHES ""(^| )-W?${FLAG}($| )"")
            add_compile_options(-W${FLAG})
        endif ()
    endforeach ()
endif()

find_package(Qt5 5.9 REQUIRED Network Gui Multimedia Test)
get_filename_component(Qt5_Prefix ""${Qt5_DIR}/../../../.."" ABSOLUTE)

if (${PROJECT_NAME}_ENABLE_E2EE)
    if ((NOT DEFINED USE_INTREE_LIBQOLM OR USE_INTREE_LIBQOLM)
            AND EXISTS ${PROJECT_SOURCE_DIR}/3rdparty/libQtOlm/lib/utils.h)
        add_subdirectory(3rdparty/libQtOlm)
        include_directories(3rdparty/libQtOlm)
        if (NOT DEFINED USE_INTREE_LIBQOLM)
            set (USE_INTREE_LIBQOLM 1)
        endif ()
    endif ()
    if (NOT USE_INTREE_LIBQOLM)
        set(SAVED_CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})
        set(CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})
        find_package(QtOlm 3.0.1 REQUIRED)
        if (NOT QtOlm_FOUND)
            message( WARNING ""libQtOlm not found; configuration will most likely fail."")
            message( WARNING ""Make sure you have installed libQtOlm development files"")
            message( WARNING ""as a package or checked out the library sources in lib/."")
            message( WARNING ""See also BUILDING.md"")
        endif ()
    endif ()
else ()
    message( STATUS ""End-to-end encryption (E2EE) support is turned off."")
endif ()

if (GTAD_PATH)
    get_filename_component(ABS_GTAD_PATH ""${GTAD_PATH}"" REALPATH)
endif ()
if (MATRIX_DOC_PATH)
    get_filename_component(ABS_API_DEF_PATH ""${MATRIX_DOC_PATH}/api"" REALPATH)
endif ()
if (ABS_GTAD_PATH AND ABS_API_DEF_PATH)
    if (NOT CLANG_FORMAT)
        set(CLANG_FORMAT clang-format)
    endif()
    get_filename_component(ABS_CLANG_FORMAT ""${CLANG_FORMAT}"" PROGRAM)
endif()

message( STATUS )
message( STATUS ""============================================================================="" )
message( STATUS ""                       ${PROJECT_NAME} Build Information"" )
message( STATUS ""============================================================================="" )
message( STATUS ""Version: ${PROJECT_VERSION}, API version: ${API_VERSION}"")
if (CMAKE_BUILD_TYPE)
    message( STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
endif(CMAKE_BUILD_TYPE)
message( STATUS ""Using compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}"" )
message( STATUS ""Install Prefix: ${CMAKE_INSTALL_PREFIX}"" )
message( STATUS ""  Header files will be installed to ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDEDIR}"" )
message( STATUS ""Using Qt ${Qt5_VERSION} at ${Qt5_Prefix}"" )
if (ABS_API_DEF_PATH AND ABS_GTAD_PATH)
    message( STATUS ""Generating API stubs enabled (use --target update-api)"" )
    message( STATUS ""  Using GTAD at ${ABS_GTAD_PATH}"" )
    message( STATUS ""  Using API files at ${ABS_API_DEF_PATH}"" )
    if (ABS_CLANG_FORMAT)
        message( STATUS ""clang-format is at ${ABS_CLANG_FORMAT}"")
    else ()
        message( STATUS ""${CLANG_FORMAT} is NOT FOUND; API files won't be reformatted"")
    endif ()
endif ()
find_package(Git)
if (${PROJECT_NAME}_ENABLE_E2EE)
    if (USE_INTREE_LIBQOLM)
        message( STATUS ""Using in-tree libQtOlm"")
        if (GIT_FOUND)
            execute_process(COMMAND
                ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
                WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/3rdparty/libQtOlm
                OUTPUT_VARIABLE QTOLM_GIT_SHA1
                OUTPUT_STRIP_TRAILING_WHITESPACE)
            message( STATUS ""  Library git SHA1: ${QTOLM_GIT_SHA1}"")
        endif (GIT_FOUND)
    else ()
        message( STATUS ""Using libQtOlm ${QtOlm_VERSION} at ${QtOlm_DIR}"")
    endif ()
endif ()
message( STATUS ""============================================================================="" )
message( STATUS )

# Set up source files
set(lib_SRCS
    lib/networkaccessmanager.cpp
    lib/connectiondata.cpp
    lib/connection.cpp
    lib/ssosession.cpp
    lib/logging.cpp
    lib/room.cpp
    lib/user.cpp
    lib/avatar.cpp
    lib/syncdata.cpp
    lib/settings.cpp
    lib/networksettings.cpp
    lib/converters.cpp
    lib/util.cpp
    lib/encryptionmanager.cpp
    lib/eventitem.cpp
    lib/events/event.cpp
    lib/events/roomevent.cpp
    lib/events/stateevent.cpp
    lib/events/eventcontent.cpp
    lib/events/roomcreateevent.cpp
    lib/events/roomtombstoneevent.cpp
    lib/events/roommessageevent.cpp
    lib/events/roommemberevent.cpp
    lib/events/roompowerlevelsevent.cpp
    lib/events/typingevent.cpp
    lib/events/receiptevent.cpp
    lib/events/reactionevent.cpp
    lib/events/callanswerevent.cpp
    lib/events/callcandidatesevent.cpp
    lib/events/callhangupevent.cpp
    lib/events/callinviteevent.cpp
    lib/events/directchatevent.cpp
    lib/events/encryptionevent.cpp
    lib/events/encryptedevent.cpp
    lib/events/roomkeyevent.cpp
    lib/jobs/requestdata.cpp
    lib/jobs/basejob.cpp
    lib/jobs/syncjob.cpp
    lib/jobs/mediathumbnailjob.cpp
    lib/jobs/downloadfilejob.cpp
)

set(CSAPI_DIR csapi)
set(ASAPI_DEF_DIR application-service/definitions)
set(ISAPI_DEF_DIR identity/definitions)

foreach (D ${CSAPI_DIR} ${CSAPI_DIR}/definitions
         ${CSAPI_DIR}/definitions/wellknown ${ASAPI_DEF_DIR} ${ISAPI_DEF_DIR})
    aux_source_directory(lib/${D} api_SRCS)
endforeach()

# Make no mistake: CMake cannot run gtad first and then populate the list of
# resulting api_SRCS files. In other words, placing the above foreach after
# the custom targets definition won't bring the desired result:
# CMake will execute it at cmake invocation and gtad will only run later
# when building the update-api target. If you see that gtad has created
# new files you have to re-run cmake.
# TODO: check `file(GLOB_RECURSE ... CONFIGURE_DEPENDS)` (from CMake 3.14)
if (MATRIX_DOC_PATH AND GTAD_PATH)
    set(FULL_CSAPI_DIR lib/${CSAPI_DIR})
    set(FULL_CSAPI_SRC_DIR ${ABS_API_DEF_PATH}/client-server)
    file(GLOB_RECURSE API_DEFS RELATIVE ${PROJECT_SOURCE_DIR}
        ${FULL_CSAPI_SRC_DIR}/*.yaml
        ${ABS_API_DEF_PATH}/${ASAPI_DEF_DIR}/*.yaml
        ${ABS_API_DEF_PATH}/${ISAPI_DEF_DIR}/*.yaml
    )
    add_custom_target(update-api
        ${ABS_GTAD_PATH} --config ${CSAPI_DIR}/gtad.yaml --out ${CSAPI_DIR}
            ${FULL_CSAPI_SRC_DIR}
            old_sync.yaml- room_initial_sync.yaml- # deprecated
            search.yaml- # current GTAD is limited in handling move-only data
            sync.yaml- # we have a better handcrafted implementation
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/lib
        SOURCES ${FULL_CSAPI_DIR}/gtad.yaml
                ${FULL_CSAPI_DIR}/{{base}}.h.mustache
                ${FULL_CSAPI_DIR}/{{base}}.cpp.mustache
                ${API_DEFS}
        VERBATIM
    )
    if (ABS_CLANG_FORMAT)
        # TODO: list(TRANSFORM) is available from CMake 3.12
        foreach (S ${api_SRCS})
            string (REGEX REPLACE "".cpp$"" "".h"" H ${S})
            list(APPEND api_HDRS ${H})
        endforeach()
        set(CLANG_FORMAT_ARGS -i -sort-includes ${CLANG_FORMAT_ARGS})
        add_custom_command(TARGET update-api POST_BUILD
            COMMAND ${ABS_CLANG_FORMAT} ${CLANG_FORMAT_ARGS} ${api_SRCS}
            COMMAND ${ABS_CLANG_FORMAT} ${CLANG_FORMAT_ARGS} ${api_HDRS}
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            VERBATIM
            COMMENT Formatting files
        )
    endif()
endif()

set(tests_SRCS tests/quotest.cpp)

add_library(${PROJECT_NAME} ${lib_SRCS} ${api_SRCS})
if (${PROJECT_NAME}_ENABLE_E2EE)
    target_compile_definitions(${PROJECT_NAME} PUBLIC ${PROJECT_NAME}_E2EE_ENABLED)
endif()
set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION ""${PROJECT_VERSION}""
    SOVERSION ${API_VERSION}
    INTERFACE_${PROJECT_NAME}_MAJOR_VERSION ${API_VERSION}
)
set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY
             COMPATIBLE_INTERFACE_STRING ${PROJECT_NAME}_MAJOR_VERSION)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)

target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
    $<INSTALL_INTERFACE:${${PROJECT_NAME}_INSTALL_INCLUDEDIR}>
)
if (${PROJECT_NAME}_ENABLE_E2EE)
    target_link_libraries(${PROJECT_NAME} QtOlm)
    set(FIND_DEPS ""find_dependency(QtOlm)"") # For QuotientConfig.cmake.in
endif()
target_link_libraries(${PROJECT_NAME} Qt5::Core Qt5::Network Qt5::Gui Qt5::Multimedia)

set(TEST_BINARY quotest)
add_executable(${TEST_BINARY} ${tests_SRCS})
target_link_libraries(${TEST_BINARY} Qt5::Core Qt5::Test ${PROJECT_NAME})

configure_file(${PROJECT_NAME}.pc.in ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY NEWLINE_STYLE UNIX)

# Installation

install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        INCLUDES DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDEDIR}
)
install(DIRECTORY lib/ DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN ""*.h"")

include(CMakePackageConfigHelpers)
# NB: SameMajorVersion doesn't really work yet, as we're within 0.x trail.
# Maybe consider jumping the gun and releasing 1.0, as semver advises?
write_basic_package_version_file(
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake""
    COMPATIBILITY SameMajorVersion
)

export(PACKAGE ${PROJECT_NAME})
export(EXPORT ${PROJECT_NAME}Targets
       FILE ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Targets.cmake"")
configure_file(cmake/${PROJECT_NAME}Config.cmake.in
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake""
    @ONLY
)

set(ConfigFilesLocation ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"")
install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake DESTINATION ${ConfigFilesLocation})

install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake""
    ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake""
    DESTINATION ${ConfigFilesLocation}
)
install(EXPORT_ANDROID_MK ${PROJECT_NAME}Targets DESTINATION share/ndk-modules)

if (WIN32)
    install(FILES mime/packages/freedesktop.org.xml DESTINATION mime/packages)
endif (WIN32)

if (${PROJECT_NAME}_INSTALL_TESTS)
    install(TARGETS ${TEST_BINARY} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endif ()

if (UNIX AND NOT APPLE)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()
",3.10,3.1
22492,xorz57,forest,False,False,False,False,False,6,C++,2020-04-20 03:29:34+00:00,2017-09-14 01:22:01+00:00,119,1097,"﻿cmake_minimum_required(VERSION 3.10)

project(forest LANGUAGES CXX VERSION 12.0.4)

# CMake Options

option(FOREST_BUILD_TESTS OFF)
option(FOREST_BUILD_EXAMPLES OFF)

# Increase Stack on Windows

if(MSVC)
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /STACK:10000000"")
endif()

# Add Library

add_library(${PROJECT_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
target_include_directories(${PROJECT_NAME} INTERFACE
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
	$<INSTALL_INTERFACE:include>)
target_compile_features(${PROJECT_NAME} INTERFACE cxx_std_17)

# Build Tests

if(FOREST_BUILD_TESTS)
	add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/vendor/Catch2"")
	enable_testing()
	macro(forest_add_test TESTNAME)
		add_executable(${TESTNAME} ${ARGN})
		target_link_libraries(${TESTNAME} PRIVATE ${PROJECT_NAME}::${PROJECT_NAME})
		target_link_libraries(${TESTNAME} PRIVATE Catch2)
		add_test(NAME ${TESTNAME} COMMAND ${TESTNAME})
		set_target_properties(${TESTNAME} PROPERTIES FOLDER tests)
	endmacro()
	add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/tests"")
endif()

# Build Examples

if(FOREST_BUILD_EXAMPLES)
	macro(forest_add_example EXAMPLENAME)
		add_executable(${EXAMPLENAME} ${ARGN})
		target_link_libraries(${EXAMPLENAME} PRIVATE ${PROJECT_NAME}::${PROJECT_NAME})
		set_target_properties(${EXAMPLENAME} PROPERTIES FOLDER examples)
	endmacro()
	add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/examples"")
endif()

# Install Library

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
        DESTINATION include
        FILES_MATCHING PATTERN ""*.hpp"")

# Package Library

set(CPACK_PACKAGE_VENDOR ""George Fotopoulos"")
set(CPACK_PACKAGE_CONTACT ""xorz57@protonmail.com"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Template Library of Tree Data Structures"")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_RESOURCE_FILE_README ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")

set(CPACK_SOURCE_GENERATOR ""TGZ;ZIP"")

include(CPack)
",3.10,3.1
22575,OpenSpace,OpenSpace,False,False,False,False,False,42,C++,2020-05-15 15:22:31+00:00,2015-07-01 15:59:54+00:00,270,6912,"##########################################################################################
#                                                                                        #
# OpenSpace                                                                              #
#                                                                                        #
# Copyright (c) 2014-2020                                                                #
#                                                                                        #
# Permission is hereby granted, free of charge, to any person obtaining a copy of this   #
# software and associated documentation files (the ""Software""), to deal in the Software  #
# without restriction, including without limitation the rights to use, copy, modify,     #
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to     #
# permit persons to whom the Software is furnished to do so, subject to the following    #
# conditions:                                                                            #
#                                                                                        #
# The above copyright notice and this permission notice shall be included in all copies  #
# or substantial portions of the Software.                                               #
#                                                                                        #
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    #
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A          #
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT     #
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF   #
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE   #
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                          #
##########################################################################################

cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

project(OpenSpace)

set(OPENSPACE_VERSION_MAJOR 0)
set(OPENSPACE_VERSION_MINOR 15)
set(OPENSPACE_VERSION_PATCH 1)
set(OPENSPACE_VERSION_STRING ""Beta-5"")


set(OPENSPACE_BASE_DIR ""${PROJECT_SOURCE_DIR}"")
set(OPENSPACE_CMAKE_EXT_DIR ""${OPENSPACE_BASE_DIR}/support/cmake"")
set(GHOUL_BASE_DIR ""${OPENSPACE_BASE_DIR}/ext/ghoul"")

include(${OPENSPACE_CMAKE_EXT_DIR}/module_common.cmake)
include(${OPENSPACE_CMAKE_EXT_DIR}/global_variables.cmake)
include(${OPENSPACE_CMAKE_EXT_DIR}/handle_applications.cmake)
include(${OPENSPACE_CMAKE_EXT_DIR}/handle_modules.cmake)
include(${GHOUL_BASE_DIR}/support/cmake/copy_shared_libraries.cmake)
include(${GHOUL_BASE_DIR}/support/cmake/handle_external_library.cmake)
include(${GHOUL_BASE_DIR}/support/cmake/message_macros.cmake)

begin_header(""Configuring OpenSpace project"")
message(STATUS ""CMake version: ${CMAKE_VERSION}"")

# Bail out if the user tries to generate a 32 bit project.
if (NOT ${CMAKE_SIZEOF_VOID_P} EQUAL 8)
  message(FATAL_ERROR ""OpenSpace can only be generated for 64 bit architectures."")
endif ()

##########################################################################################
# Cleanup project                                                                        #
##########################################################################################
set(OPENSPACE_APPS_DIR ""${OPENSPACE_BASE_DIR}/apps"")
set(OPENSPACE_EXT_DIR ""${OPENSPACE_BASE_DIR}/ext"")

if (NOT EXISTS ${OPENSPACE_EXT_DIR}/ghoul/CMakeLists.txt)
  message(FATAL_ERROR ""Git submodules are missing. Please run \n""
    ""git submodule update --init --recursive \n""
    ""to download the missing dependencies.""
  )
endif ()

set_property(GLOBAL PROPERTY USE_FOLDERS On)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER CMake)

mark_as_advanced(CMAKE_BACKWARDS_COMPATIBILITY CMAKE_BUILD_TYPE CMAKE_DEBUG_POSTFIX
  CMAKE_INSTALL_PREFIX CMAKE_OSX_ARCHITECTURES CMAKE_OSX_DEPLOYMENT_TARGET
  CMAKE_OSX_SYSROOT CMAKE_RELEASE_POSTFIX)

# Set build output directories
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${OPENSPACE_CMAKE_EXT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OPENSPACE_BASE_DIR}/bin)

##########################################################################################
# Main                                                                                   #
##########################################################################################

# Get the current working branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE OPENSPACE_GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the latest abbreviated commit hash of the working branch
execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE OPENSPACE_GIT_COMMIT
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# See if working directory is clean or not
execute_process(
  COMMAND git diff-index --quiet HEAD --
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  RESULT_VARIABLE OPENSPACE_GIT_STATUS_RETURN
)
if (NOT OPENSPACE_GIT_STATUS_RETURN EQUAL 0)
  set(OPENSPACE_GIT_STATUS ""uncommitted changes"")
else()
  set(OPENSPACE_GIT_STATUS """")
endif ()

option(OPENSPACE_WARNINGS_AS_ERRORS ""Treat warnings as errors"" OFF)

if (MSVC)
  option(OPENSPACE_OPTIMIZATION_ENABLE_AVX ""Enable AVX instruction set for compilation"" OFF)
  option(OPENSPACE_OPTIMIZATION_ENABLE_AVX2 ""Enable AVX2 instruction set for compilation"" OFF)
  option(OPENSPACE_OPTIMIZATION_ENABLE_AVX512 ""Enable AVX2 instruction set for compilation"" OFF)
  option(OPENSPACE_OPTIMIZATION_ENABLE_OTHER_OPTIMIZATIONS ""Enable other optimizations, like LTCG, intrinsics, etc"")

  if (OPENSPACE_OPTIMIZATION_ENABLE_AVX AND OPENSPACE_OPTIMIZATION_ENABLE_AVX2)
    message(FATAL_ERROR ""Cannot enable AVX and AVX2 instructions simultaneously"")
  endif ()

  if (OPENSPACE_OPTIMIZATION_ENABLE_AVX AND OPENSPACE_OPTIMIZATION_ENABLE_AVX512)
    message(FATAL_ERROR ""Cannot enable AVX and AVX512 instructions simultaneously"")
  endif ()

  if (OPENSPACE_OPTIMIZATION_ENABLE_AVX2 AND OPENSPACE_OPTIMIZATION_ENABLE_AVX512)
    message(FATAL_ERROR ""Cannot enable AVX2 and AVX512 instructions simultaneously"")
  endif ()

  set(GHOUL_OPTIMIZATION_ENABLE_AVX ${OPENSPACE_OPTIMIZATION_ENABLE_AVX} CACHE BOOL """" FORCE)
  set(GHOUL_OPTIMIZATION_ENABLE_AVX2 ${OPENSPACE_OPTIMIZATION_ENABLE_AVX2} CACHE BOOL """" FORCE)
  set(GHOUL_OPTIMIZATION_ENABLE_AVX512 ${OPENSPACE_OPTIMIZATION_ENABLE_AVX512} CACHE BOOL """" FORCE)
  set(GHOUL_OPTIMIZATION_ENABLE_OTHER_OPTIMIZATIONS ${OPENSPACE_OPTIMIZATION_ENABLE_OTHER_OPTIMIZATIONS} CACHE BOOL """" FORCE)
endif ()

include(src/CMakeLists.txt)

##########################################################################################
# Add external dependencies                                                              #
##########################################################################################
# System libraries
if (APPLE)
  begin_dependency(""Core Libraries"")
  target_include_directories(openspace-core PUBLIC ""/Developer/Headers/FlatCarbon"")
  find_library(COREFOUNDATION_LIBRARY CoreFoundation)
  find_library(CARBON_LIBRARY Carbon)
  find_library(COCOA_LIBRARY Carbon)
  find_library(APP_SERVICES_LIBRARY ApplicationServices)
  mark_as_advanced(CARBON_LIBRARY COCOA_LIBRARY APP_SERVICES_LIBRARY)
  target_link_libraries(openspace-core ${CARBON_LIBRARY} ${COREFOUNDATION_LIBRARY}
    ${COCOA_LIBRARY} ${APP_SERVICES_LIBRARY})
  end_dependency()
endif ()

# Ghoul
add_subdirectory(${OPENSPACE_EXT_DIR}/ghoul)
target_link_libraries(openspace-core Ghoul)
set_openspace_compile_settings(Ghoul)
set_folder_location(Lua ""External"")
set_folder_location(lz4 ""External"")
set_folder_location(GhoulTest ""Unit Tests"")
link_directories(""${GHOUL_LIBRARY_DIRS}"")

# Spice
begin_dependency(""Spice"")
add_subdirectory(${OPENSPACE_EXT_DIR}/spice)
target_link_libraries(openspace-core Spice)
set_folder_location(Spice ""External"")
end_dependency()

# Curl
begin_dependency(""CURL"")
if (WIN32)
  set(CURL_ROOT_DIR ""${OPENSPACE_EXT_DIR}/curl"")
  target_include_directories(openspace-core SYSTEM PUBLIC ${CURL_ROOT_DIR}/include)
  target_link_libraries(openspace-core ${CURL_ROOT_DIR}/lib/libcurl.lib)
  target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_CURL_ENABLED"" ""CURL_STATICLIB"")
else ()
  find_package(CURL)
  if (CURL_FOUND)
    target_include_directories(openspace-core SYSTEM PUBLIC ${CURL_INCLUDE_DIRS})
    target_link_libraries(openspace-core ${CURL_LIBRARIES})
    target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_CURL_ENABLED"")
  endif ()
endif ()
end_dependency()

# Qt
# Unfortunately, we have to set this value manually; sigh
# In the future, if the Qt version is updated, just add to this variable ---abock
if (APPLE)
  set(CMAKE_PREFIX_PATH
    ""~/Qt/5.6/clang_64/lib/cmake""
    ""~/Qt/5.7/clang_64/lib/cmake""
    ""~/Qt/5.8/clang_64/lib/cmake""
    ""~/Qt/5.9/clang_64/lib/cmake""
    ""~/Qt/5.10/clang_64/lib/cmake""
    ""~/Qt/5.11/clang_64/lib/cmake""
    ""~/Qt/5.12/clang_64/lib/cmake""
  )
endif ()

if (MSVC)
  option(OPENSPACE_ENABLE_VLD ""Enable the Visual Leak Detector"" OFF)
  if (OPENSPACE_ENABLE_VLD)
    begin_dependency(""Visual Leak Detector"")
    target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_ENABLE_VLD"")
    target_link_libraries(openspace-core ${OPENSPACE_EXT_DIR}/vld/lib/vld.lib)
    target_include_directories(openspace-core PUBLIC ${OPENSPACE_EXT_DIR}/vld)
    end_dependency()
  endif ()

  option(OPENSPACE_VTUNE_ENABLED ""Include VTune support"" OFF)
  set(OPENSPACE_VTUNE_PATH ""C:/Program Files (x86)/IntelSWTools/VTune Amplifier 2019"" CACHE STRING ""Path to VTune installation"")
  if (OPENSPACE_VTUNE_ENABLED)
    begin_dependency(""Intel VTune"")
    target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_HAS_VTUNE"")
    target_include_directories(openspace-core PUBLIC ""${OPENSPACE_VTUNE_PATH}/include"")
    target_link_libraries(openspace-core ""${OPENSPACE_VTUNE_PATH}/lib64/libittnotify.lib"")
    end_dependency()
  endif ()

  option(OPENSPACE_NVTOOLS_ENABLED ""Include support for Nvidia Tools Extensions"" OFF)
  set(OPENSPACE_NVTOOLS_PATH ""C:/Program Files/NVIDIA Corporation/NvToolsExt"")
  if (OPENSPACE_NVTOOLS_ENABLED)
    begin_dependency(""Nvidia Tools Extension"")
    target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_HAS_NVTOOLS"")
    target_include_directories(openspace-core PUBLIC ""${OPENSPACE_NVTOOLS_PATH}/include"")
    end_dependency()
  endif ()
endif ()

begin_header(""Configuring Modules"")
set(OPENSPACE_EXTERNAL_MODULES_PATHS """" CACHE STRING ""List of external modules"")
handle_modules(""${OPENSPACE_BASE_DIR}/modules"" ""${OPENSPACE_EXTERNAL_MODULES_PATHS}"")
end_header(""End: Configuring Modules"")
message(STATUS """")

begin_header(""Configuring Applications"")
handle_applications()
end_header(""End: Configuring Applications"")
message(STATUS """")

option(OPENSPACE_HAVE_TESTS ""Activate the OpenSpace unit tests"" ON)
if (OPENSPACE_HAVE_TESTS)
  begin_header(""Generating OpenSpace unit test"")
  add_subdirectory(""${OPENSPACE_BASE_DIR}/tests"")
  end_header()
endif (OPENSPACE_HAVE_TESTS)


# Web Browser and Web gui
# Why not put these in the module's path? Because they do not have access to the
# target as of July 2017, which is needed.
if (OPENSPACE_MODULE_WEBBROWSER AND CEF_ROOT)
  # wanted by CEF
  set(CMAKE_BUILD_TYPE Debug CACHE STRING ""CMAKE_BUILD_TYPE"")

  set(PROJECT_ARCH ""x86_64"")

  if (WIN32)
    set(RESOURCE_FILE ${OPENSPACE_APPS_DIR}/OpenSpace/openspace.rc)
  endif ()

  # Add the CEF binary distribution's cmake/ directory to the module path and
  # find CEF to initialize it properly.
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${WEBBROWSER_MODULE_PATH}/cmake"")
  include(webbrowser_helpers)
elseif (OPENSPACE_MODULE_WEBBROWSER)
  message(WARNING ""Web configured to be included, but no CEF_ROOT was found, please try configuring CMake again."")
endif ()

##########################################################################################
# Misc settings                                                                          #
##########################################################################################
option(OPENSPACE_WITH_ABUFFER_RENDERER ""Compile ABuffer Renderer"" OFF)
if (OPENSPACE_WITH_ABUFFER_RENDERER)
  target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_WITH_ABUFFER_RENDERER"")
endif ()

option(OPENSPACE_WITH_INSTRUMENTATION ""Add instrumentation options"" OFF)
if (OPENSPACE_WITH_INSTRUMENTATION)
  target_compile_definitions(openspace-core PUBLIC ""OPENSPACE_WITH_INSTRUMENTATION"")
endif ()


# Just in case, create the bin directory
add_custom_command(
  TARGET openspace-core
  PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
)

# Manage the CPack packaging
include(${OPENSPACE_CMAKE_EXT_DIR}/packaging.cmake)

end_header(""End: Configuring OpenSpace project"")
",3.10,3.1
22764,bigfug,Fugio,False,False,False,False,False,5,C++,2020-01-30 13:36:48+00:00,2016-03-27 07:40:04+00:00,91,1524,"cmake_minimum_required( VERSION 3.1 )

list( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake )

project( Fugio )

include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/include )

set( CMAKE_CXX_STANDARD 11 )
set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_CXX_EXTENSIONS OFF )

# Instruct CMake to run moc automatically when needed.
set( CMAKE_AUTOMOC ON )
set( CMAKE_AUTOUIC ON )
set( CMAKE_AUTORCC OFF )

set( CMAKE_INCLUDE_CURRENT_DIR ON )

set( PKG_CONFIG_USE_CMAKE_PREFIX_PATH ON )

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    message(STATUS ""*** Have SIZEOF void * = 8, so 64-bit"")
    set( IS_64_BIT 1 )
else ()
    message(STATUS ""*** SIZEOF void * != 8, so not 64-bit"")
endif ()

# There must be a better way to do this...

if( EXISTS /opt/vc/include/bcm_host.h )
	set( Q_OS_RASPBERRY_PI TRUE )

	add_definitions( -DQ_OS_RASPBERRY_PI )

	message( ""RASPBERRY PI BUILD"" )
endif()

#------------------------------------------------------------------------------
# Enable Unit Testing

include( CTest )

set( CTEST_OUTPUT_ON_FAILURE ON )

#------------------------------------------------------------------------------

file( READ FugioApp/version.txt FUGIO_VERSION )

string( STRIP ${FUGIO_VERSION} FUGIO_VERSION )

message( ""FUGIO VERSION ${FUGIO_VERSION}"" )

#------------------------------------------------------------------------------

if( WIN32 )
	set( CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1 )
endif( WIN32 )

set( PATH_APP . )
set( PATH_INCLUDE include )
set( PATH_SHARE share )
set( PATH_PLUGIN plugins )

if( UNIX AND NOT APPLE )
	set( PATH_APP		bin )
	set( PATH_INCLUDE	include )
	set( PATH_SHARE		share/fugio )
	set( PATH_PLUGIN	lib/fugio )
	
	install( FILES FugioApp/fugio.desktop	DESTINATION share/applications )
	install( FILES FugioApp/fugio.png		DESTINATION share/icons/hicolor/256x256/apps )
endif()

#------------------------------------------------------------------------------
# Lua (minimum 5.2)

find_package( Lua 5.2 )

if( NOT LUA_FOUND )
	find_path( LUA_INCLUDE_DIR lua.hpp )

	find_library( LUA_LIBRARY
	  NAMES lua
	)

	set( LUA_INCLUDE_DIRS ${LUA_INCLUDE_DIR} )
	set( LUA_LIBRARIES ${LUA_LIBRARY} )

	if( LUA_INCLUDE_DIR AND LUA_LIBRARY )
		set( LUA_FOUND ON )
	endif()
endif()

#------------------------------------------------------------------------------

add_subdirectory( FugioLib )
add_subdirectory( FugioApp )
add_subdirectory( FugioShow )
add_subdirectory( plugins )

#------------------------------------------------------------------------------

install( DIRECTORY include/ DESTINATION ${PATH_INCLUDE} )
install( DIRECTORY share/ DESTINATION ${PATH_SHARE} )

#------------------------------------------------------------------------------
# CPack

set( CPACK_PACKAGE_NAME ""Fugio"" )
set( CPACK_PACKAGE_VENDOR ""bigfug.com"" )
set( CPACK_PACKAGE_CONTACT ""fugio@bigfug.com"" )
set( CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Fugio is a free, cross platform, creative visual programming system"" )
set( CPACK_PACKAGE_EXECUTABLES ""Fugio;Fugio"" )
set( CPACK_PACKAGE_INSTALL_DIRECTORY ""Fugio"" )
set( CPACK_PACKAGE_INSTALL_REGISTRY_KEY ""Fugio"" )
set( CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE"" )

if( WIN32 AND NOT UNIX )
	set( CPACK_NSIS_EXECUTABLES_DIRECTORY ""${PATH_APP}"" )
	#set( CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""ExecWait '\\\""$INSTDIR\\\\vcredist_x86.exe\\\"" /q:a'"" )
	#set( CPACK_NSIS_HELP_LINK ""http:\\\\\\\\wiki.bigfug.com"" )
endif()

# Set the output package filename

set( CPACK_PACKAGE_FILE_NAME ""Fugio-${FUGIO_VERSION}"" )

# If we're running on a UNIX system, try to ascertain the type and version

if( UNIX )
	execute_process( COMMAND lsb_release -is
		OUTPUT_VARIABLE UNIX_ID
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process( COMMAND lsb_release -rs
		OUTPUT_VARIABLE UNIX_RELEASE
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process( COMMAND lsb_release -cs
		OUTPUT_VARIABLE UNIX_CODENAME
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	if( ""${UNIX_ID}"" STREQUAL """" )
		set( UNIX_ID ""unknown"" )
	else()
		message( ""UNIX ID: ${UNIX_ID}"" )
	endif()

	if( ""${UNIX_RELEASE}"" STREQUAL """" )
		set( UNIX_RELEASE ""unknown"" )
	else()
		message( ""UNIX RELEASE: ${UNIX_RELEASE}"" )
	endif()

	if( ""${UNIX_CODENAME}"" STREQUAL """" )
		set( UNIX_CODENAME ""unknown"" )
	else()
		message( ""UNIX CODENAME: ${UNIX_CODENAME}"" )
	endif()
endif( UNIX )

# Set the output package extension

if( WIN32 AND IS_64_BIT )
	set( CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-win64"" )
elseif( WIN32 )
	set( CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-win32"" )
elseif( APPLE )
	set( CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-macOS"" )
elseif( UNIX AND IS_64_BIT )
	set( CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-${UNIX_CODENAME}-x64"" )
elseif( UNIX )
	set( CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_FILE_NAME}-${UNIX_CODENAME}-i386"" )
endif()

if( Q_OS_RASPBERRY_PI )
	set( CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf )
elseif( IS_64_BIT )
	set( CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64 )
else()
	set( CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386 )
endif()

# The dependencies for various UNIX packages

if( Q_OS_RASPBERRY_PI )
	set( CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5concurrent5, libqt5core5a, libqt5gui5, libqt5opengl5, libqt5network5, libqt5widgets5,
		libgles2-mesa, libicu57, libavcodec57, libavdevice57, libavformat57, libavutil55, libswscale4,
		libswresample2, libavfilter6, libfftw3-single3, libportmidi0, liblua5.3-0, libportaudio2, pigpio,
		libqt5serialport5, libqt5quickcontrols2-5, libqt5quickwidgets5, libqt5websockets5,
		libopencv-photo2.4v5"" )
elseif( UNIX )
	if( ""${UNIX_ID}"" STREQUAL ""Ubuntu"" AND ""${UNIX_RELEASE}"" STREQUAL ""16.04"" )
		set( CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5concurrent5, libqt5core5a, libqt5gui5, libqt5opengl5, libqt5network5, libqt5widgets5,
			libicu55, libavcodec-ffmpeg56, libavdevice-ffmpeg56, libavformat-ffmpeg56, libavutil-ffmpeg54, libswscale-ffmpeg3,
			libswresample-ffmpeg1, libavfilter-ffmpeg5, libfftw3-single3, libportmidi0, liblua5.3-0, libportaudio2,
			libqt5serialport5"" )
	else()
		set( CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5concurrent5, libqt5core5a, libqt5gui5, libqt5opengl5, libqt5network5, libqt5widgets5,
			libicu57, libavcodec57, libavdevice57, libavformat57, libavutil55, libswscale4,
			libswresample2, libavfilter6, libfftw3-single3, libportmidi0, liblua5.3-0, libportaudio2,
			libqt5serialport5, libqt5quickcontrols2-5, libqt5quickwidgets5, libqt5websockets5,
			libdlib18, libopencv-calib3d3.1, libopencv-core3.1, libopencv-features2d3.1,
			libopencv-highgui3.1, libopencv-imgproc3.1, libopencv-objdetect3.1, libopencv-videoio3.1"" )
	endif()
endif()

if( APPLE )
	set( CPACK_INCLUDE_TOPLEVEL_DIRECTORY ON )
endif()

string( REPLACE ""."" "";"" FUGIO_VERSION_LIST ${FUGIO_VERSION} )

list( GET FUGIO_VERSION_LIST 0 CPACK_PACKAGE_VERSION_MAJOR )
list( GET FUGIO_VERSION_LIST 1 CPACK_PACKAGE_VERSION_MINOR )
list( GET FUGIO_VERSION_LIST 2 CPACK_PACKAGE_VERSION_PATCH )

include( CPack )
",3.1,3.1
22774,beached,daw_json_link,False,False,False,False,False,1,C++,2020-05-17 18:50:37+00:00,2017-07-03 04:47:10+00:00,53,1252,"cmake_minimum_required(VERSION 3.10)

project(daw_json_link_prj)
set(CMAKE_CXX_STANDARD 17 CACHE STRING ""The C++ standard whose features are requested."")

message(""CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}"")
enable_testing()

include(""${CMAKE_SOURCE_DIR}/dependent_projects/CMakeListsCompiler.txt"")

include_directories(""./include"")
#set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)

set(DAW_JSON_DONT_USE_EXCEPTIONS OFF CACHE STRING ""Don't throw exceptions when json errors occur"")
if (DAW_JSON_DONT_USE_EXCEPTIONS)
    if (DAW_JSON_DONT_USE_EXCEPTIONS=OFF)
        message(""DAW_USE_JSON_EXCEPTIONS=ON: Errors throw json_exception"")
        add_definitions(-DDAW_USE_JSON_EXCEPTIONS=true)
    else ()
        message(""DAW_USE_JSON_EXCEPTIONSON_DONT_USE_EXCEPTIONS=ON: Errors abort program"")
    endif ()
else ()
    message(""DAW_JSON_DONT_USE_EXCEPTIONS=OFF: Errors throw json_exception"")
    add_definitions(-DDAW_USE_JSON_EXCEPTIONS=true)
endif ()

set(DAW_JSON_CHECK_DEBUG_ONLY OFF CACHE STRING ""Only check for json errors in debug"")
if (DAW_JSON_CHECK_DEBUG_ONLY)
    if (DAW_JSON_CHECK_DEBUG_ONLY=OFF)
        message(""DAW_JSON_CHECK_DEBUG_ONLY=OFF: Always checking for valid json"")
    else ()
        message(""DAW_JSON_CHECK_DEBUG_ONLY=ON: Only checking for valid json in debug"")
        add_definitions(-DDAW_JSON_CHECK_DEBUG_ONLY=true)
    endif ()
else ()
    message(""DAW_JSON_CHECK_DEBUG_ONLY=OFF: Always checking for valid json"")
    add_definitions(-DDAW_JSON_CHECK_ALWAYS=true)
endif ()

#if (CMAKE_SYSTEM_PROCESSOR MATCHES ""(x86)|(X86)|(amd64)|(AMD64)"")
#    set(DAW_ALLOW_SSE3 ON CACHE STRING ""Allow SSE3 Modes"")
#else ()
#Experimental
set(DAW_ALLOW_SSE3 OFF CACHE STRING ""Allow SSE3 Modes"")
#endif ()
if (DAW_ALLOW_SSE3)
    message(""DAW_ALLOW_SSE3=ON: Allow SSE3 Modes"")
    add_definitions(-DDAW_ALLOW_SSE3=true)
else ()
    message(""DAW_ALLOW_SSE3=OFF: Do not allow SSE3 Modes"")
endif ()

set(DAW_ALLOW_COMMENTS OFF CACHE STRING ""Allow single line # comments that comment to end of line"")
if (DAW_ALLOW_COMMENTS)
    message(""DAW_ALLOW_COMMENTS=ON: Allow # comments"")
    add_definitions(-DDAW_ALLOW_COMMENTS=true)
else ()
    message(""DAW_ALLOW_COMMENTS=OFF: Do not allow # comments"")
endif ()

if (""${CMAKE_BUILD_TYPE}"" STREQUAL ""Debug"")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/debug"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/release"")
elseif (""${CMAKE_BUILD_TYPE}"" STREQUAL ""Release"")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/release"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/debug"")
elseif (""${CMAKE_BUILD_TYPE}"" STREQUAL """")
    set(GLEAN_CACHE ""${CMAKE_SOURCE_DIR}/.glean/release"")
    set(GLEAN_CACHE2 ""${CMAKE_SOURCE_DIR}/.glean/debug"")
endif ()

message(""Building for: ${CMAKE_BUILD_TYPE}"")
message(""Checking for glean cache: '${GLEAN_CACHE}'"")

option(GLEAN_INSTALL_ROOT """")
if (EXISTS ""${GLEAN_INSTALL_ROOT}"")
    message(""using glean dependencies @ ${GLEAN_INSTALL_ROOT}"")
    message(""installing to ${GLEAN_INSTALL_ROOT}"")
    add_custom_target(dependency_stub)
    include_directories(SYSTEM ""${GLEAN_INSTALL_ROOT}/include"")
    link_directories(""${GLEAN_INSTALL_ROOT}/lib"")
elseif (EXISTS ""${GLEAN_CACHE}"")
    message(""using glean dependencies at ${GLEAN_CACHE}"")
    add_custom_target(dependency_stub)
    include_directories(SYSTEM ""${GLEAN_CACHE}/include"")
    link_directories(""${GLEAN_CACHE}/lib"")
elseif (EXISTS ""${GLEAN_CACHE2}"")
    message(""looks like glean is in use but missing ${GLEAN_CACHE}"")
elseif (EXISTS ""${CMAKE_SOURCE_DIR}/glean.cmake"")
    message(""glean.cmake detected"")
    include(""${CMAKE_SOURCE_DIR}/glean.cmake"")
    add_library(dependency_stub STATIC ""${CMAKE_SOURCE_DIR}/dependent_projects/stub.cpp"")
    add_dependencies(dependency_stub ${DEP_PROJECT_DEPS})
    include_directories(SYSTEM ""${CMAKE_BINARY_DIR}/install/include"")
    link_directories(""${CMAKE_BINARY_DIR}/install/lib"")
endif ()

set(HEADER_FOLDER ""include"")
set(TEST_FOLDER ""tests"")
set(SOURCE_FOLDER ""src"")

include_directories(${HEADER_FOLDER})

set(HEADER_FILES
        ${HEADER_FOLDER}/daw/json/daw_json_link.h
        ${HEADER_FOLDER}/daw/json/daw_json_iterator.h
        ${HEADER_FOLDER}/daw/json/impl/daw_iterator_range.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_assert.h
        ${HEADER_FOLDER}/daw/json/impl/daw_iso8601_utils.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_link_types_fwd.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_array_iterator.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_common.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_name.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_real.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_string_quote.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_unsigned_int.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_value.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_parse_value_fwd.h
        ${HEADER_FOLDER}/daw/json/impl/daw_json_to_string.h
        )

add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})
add_custom_target(full)
add_dependencies(check full)

add_executable(daw_json_link_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/daw_json_link_test.cpp)
add_dependencies(daw_json_link_test_bin dependency_stub)
add_test(NAME daw_json_link_test COMMAND daw_json_link_test_bin)
add_dependencies(full daw_json_link_test_bin)

add_executable(city_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/city_test.cpp)
add_dependencies(city_test_bin dependency_stub)
#add_test( NAME city_test COMMAND city_test_bin)
add_dependencies(full city_test_bin)

add_executable(int_array_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/int_array_test.cpp)
add_dependencies(int_array_test_bin dependency_stub)
add_test(NAME int_array_test COMMAND int_array_test_bin)
add_dependencies(full int_array_test_bin)

add_executable(int_array_basic_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/int_array_basic_test.cpp)
add_dependencies(int_array_basic_test_bin dependency_stub)
add_test(NAME int_array_basic_test COMMAND int_array_basic_test_bin)
add_dependencies(full int_array_basic_test_bin)

add_executable(float_array_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/float_array_test.cpp)
add_dependencies(float_array_test_bin dependency_stub)
add_test(NAME float_array_test COMMAND float_array_test_bin)
add_dependencies(full float_array_test_bin)

add_executable(float_array_basic_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/float_array_basic_test.cpp)
add_dependencies(float_array_basic_test_bin dependency_stub)
add_test(NAME float_array_basic_test COMMAND float_array_basic_test_bin)
add_dependencies(full float_array_basic_test_bin)

add_executable(simple_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/simple_test.cpp)
add_dependencies(simple_test_bin dependency_stub)
#add_test( NAME simple_test COMMAND simple_test_bin)
add_dependencies(full simple_test_bin)

add_executable(coords_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/coords_test.cpp)
add_dependencies(coords_test_bin dependency_stub)
target_link_libraries(coords_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
#add_test( NAME coords_test COMMAND coords_test_bin)
add_dependencies(full coords_test_bin)

add_executable(kostya_bench_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/kostya_bench.cpp)
add_dependencies(kostya_bench_bin dependency_stub)
target_link_libraries(kostya_bench_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
#add_test( NAME kostya_bench COMMAND kostya_bench_bin)
add_dependencies(full kostya_bench_bin)

add_executable(coords_test2_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/coords_test2.cpp)
add_dependencies(coords_test2_bin dependency_stub)
target_link_libraries(coords_test2_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
#add_test( NAME coords_test2 COMMAND coords_test2_bin)
add_dependencies(full coords_test2_bin)

add_executable(nativejson_bench_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/twitter_test.h ${TEST_FOLDER}/citm_test.h ${TEST_FOLDER}/geojson.h ${TEST_FOLDER}/nativejson_bench.cpp)
add_dependencies(nativejson_bench_bin dependency_stub)
target_link_libraries(nativejson_bench_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME nativejson_bench COMMAND nativejson_bench_bin ./twitter.json ./citm_catalog.json ./canada.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full nativejson_bench_bin)

add_executable(nativejson_bench_basic_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/twitter_test.h ${TEST_FOLDER}/citm_test.h ${TEST_FOLDER}/geojson.h ${TEST_FOLDER}/nativejson_bench_basic.cpp)
add_dependencies(nativejson_bench_basic_bin dependency_stub)
target_link_libraries(nativejson_bench_basic_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME nativejson_bench_basic COMMAND nativejson_bench_basic_bin ./twitter.json ./citm_catalog.json ./canada.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full nativejson_bench_basic_bin)

add_executable(citm_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/citm_test.h ${TEST_FOLDER}/citm_test.cpp)
add_dependencies(citm_test_bin dependency_stub)
target_link_libraries(citm_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME citm_test COMMAND citm_test_bin ./citm_catalog.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full citm_test_bin)

add_executable(citm_test_basic_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/citm_test.h ${TEST_FOLDER}/citm_test_basic.cpp)
add_dependencies(citm_test_basic_bin dependency_stub)
target_link_libraries(citm_test_basic_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME citm_test_basic COMMAND citm_test_basic_bin ./citm_catalog.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full citm_test_basic_bin)

add_executable(twitter_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/twitter_test.h ${TEST_FOLDER}/twitter_test.cpp)
add_dependencies(twitter_test_bin dependency_stub)
target_link_libraries(twitter_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME twitter_test COMMAND twitter_test_bin ./twitter.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full twitter_test_bin)

add_executable(twitter_test_basic_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/twitter_test.h ${TEST_FOLDER}/twitter_test_basic.cpp)
add_dependencies(twitter_test_basic_bin dependency_stub)
target_link_libraries(twitter_test_basic_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME twitter_test_basic COMMAND twitter_test_basic_bin ./twitter.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full twitter_test_basic_bin)

add_executable(canada_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/geojson.h ${TEST_FOLDER}/canada_test.cpp)
add_dependencies(canada_test_bin dependency_stub)
target_link_libraries(canada_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME canada_test COMMAND canada_test_bin ./canada.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full canada_test_bin)

add_executable(canada_test_basic_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/geojson.h ${TEST_FOLDER}/canada_test_basic.cpp)
add_dependencies(canada_test_basic_bin dependency_stub)
target_link_libraries(canada_test_basic_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME canada_test_basic COMMAND canada_test_basic_bin ./canada.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full canada_test_basic_bin)

add_executable(kv_map_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/kv_map_test.cpp)
add_dependencies(kv_map_test_bin dependency_stub)
add_test(NAME kv_map_test COMMAND kv_map_test_bin)
add_dependencies(full kv_map_test_bin)

add_executable(cookbook_kv1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_kv1_test.cpp)
add_dependencies(cookbook_kv1_test_bin dependency_stub)
add_test(NAME cookbook_kv1_test COMMAND cookbook_kv1_test_bin ./cookbook_kv1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_kv1_test_bin)

add_executable(cookbook_kv2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_kv2_test.cpp)
add_dependencies(cookbook_kv2_test_bin dependency_stub)
add_test(NAME cookbook_kv2_test COMMAND cookbook_kv2_test_bin ./cookbook_kv2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_kv2_test_bin)

add_executable(cookbook_class1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_class1_test.cpp)
add_dependencies(cookbook_class1_test_bin dependency_stub)
add_test(NAME cookbook_class1_test COMMAND cookbook_class1_test_bin ./cookbook_class1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_class1_test_bin)

add_executable(cookbook_class2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_class2_test.cpp)
add_dependencies(cookbook_class2_test_bin dependency_stub)
add_test(NAME cookbook_class2_test COMMAND cookbook_class2_test_bin ./cookbook_class2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_class2_test_bin)

add_executable(cookbook_class3_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_class3_test.cpp)
add_dependencies(cookbook_class3_test_bin dependency_stub)
add_test(NAME cookbook_class3_test COMMAND cookbook_class3_test_bin ./cookbook_class3.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_class3_test_bin)

add_executable(cookbook_array1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_array1_test.cpp)
add_dependencies(cookbook_array1_test_bin dependency_stub)
add_test(NAME cookbook_array1_test COMMAND cookbook_array1_test_bin ./cookbook_array1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_array1_test_bin)

add_executable(cookbook_array2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_array2_test.cpp)
add_dependencies(cookbook_array2_test_bin dependency_stub)
add_test(NAME cookbook_array2_test COMMAND cookbook_array2_test_bin ./cookbook_array2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_array2_test_bin)

add_executable(cookbook_array3_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_array3_test.cpp)
add_dependencies(cookbook_array3_test_bin dependency_stub)
add_test(NAME cookbook_array3_test COMMAND cookbook_array3_test_bin ./cookbook_array3.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_array3_test_bin)

add_executable(cookbook_escaped_strings1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_escaped_strings1_test.cpp)
add_dependencies(cookbook_escaped_strings1_test_bin dependency_stub)
add_test(NAME cookbook_escaped_strings1_test COMMAND cookbook_escaped_strings1_test_bin ./cookbook_escaped_strings1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_escaped_strings1_test_bin)

add_executable(full_unicode_roundtrip_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/full_unicode_roundtrip_test.cpp)
add_dependencies(full_unicode_roundtrip_test_bin dependency_stub)
add_test(NAME full_unicode_roundtrip_test COMMAND full_unicode_roundtrip_test_bin ./full_unicode.json ./full_unicode_escaped.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full full_unicode_roundtrip_test_bin)

add_executable(make_full24_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/make_full24.cpp)
add_dependencies(make_full24_bin dependency_stub)
add_dependencies(full make_full24_bin)

add_executable(cookbook_enums1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_enums1_test.cpp)
add_dependencies(cookbook_enums1_test_bin dependency_stub)
add_test(NAME cookbook_enums1_test COMMAND cookbook_enums1_test_bin ./cookbook_enums1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_enums1_test_bin)

add_executable(cookbook_enums2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_enums2_test.cpp)
add_dependencies(cookbook_enums2_test_bin dependency_stub)
add_test(NAME cookbook_enums2_test COMMAND cookbook_enums2_test_bin ./cookbook_enums2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_enums2_test_bin)

add_executable(cookbook_graphs1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_graphs1_test.cpp)
add_dependencies(cookbook_graphs1_test_bin dependency_stub)
add_test(NAME cookbook_graphs1_test COMMAND cookbook_graphs1_test_bin ./cookbook_graphs1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_graphs1_test_bin)

add_executable(cookbook_optional_values1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_optional_values1_test.cpp)
add_dependencies(cookbook_optional_values1_test_bin dependency_stub)
add_test(NAME cookbook_optional_values1_test COMMAND cookbook_optional_values1_test_bin ./cookbook_optional_values1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_optional_values1_test_bin)

add_executable(cookbook_variant1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_variant1_test.cpp)
add_dependencies(cookbook_variant1_test_bin dependency_stub)
add_test(NAME cookbook_variant1_test COMMAND cookbook_variant1_test_bin ./cookbook_variant1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_variant1_test_bin)

add_executable(small_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/small_test.cpp)
add_dependencies(small_test_bin dependency_stub)
add_test(NAME small_test COMMAND small_test_bin ./small_test.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full small_test_bin)

add_executable(should_fail_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/should_fail_001.cpp)
add_dependencies(should_fail_bin dependency_stub)
add_test(should_fail_test should_fail_bin)
add_dependencies(full should_fail_bin)

add_executable(trailing_commas_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/trailing_commas.cpp)
add_dependencies(trailing_commas_bin dependency_stub)
add_test(trailing_commas_test trailing_commas_bin)
add_dependencies(full trailing_commas_bin)

add_executable(cookbook_parsing_individual_members1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_parsing_individual_members1_test.cpp)
add_dependencies(cookbook_parsing_individual_members1_test_bin dependency_stub)
add_test(NAME cookbook_parsing_individual_members1_test COMMAND cookbook_parsing_individual_members1_test_bin ./cookbook_parsing_individual_members1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_parsing_individual_members1_test_bin)

add_executable(cookbook_parsing_individual_members2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_parsing_individual_members2_test.cpp)
add_dependencies(cookbook_parsing_individual_members2_test_bin dependency_stub)
add_test(NAME cookbook_parsing_individual_members2_test COMMAND cookbook_parsing_individual_members2_test_bin ./cookbook_parsing_individual_members2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_parsing_individual_members2_test_bin)

add_executable(cookbook_parsing_individual_members3_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_parsing_individual_members3_test.cpp)
add_dependencies(cookbook_parsing_individual_members3_test_bin dependency_stub)
add_test(NAME cookbook_parsing_individual_members3_test COMMAND cookbook_parsing_individual_members3_test_bin ./cookbook_parsing_individual_members3.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_parsing_individual_members3_test_bin)

add_executable(cookbook_variant2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_variant2_test.cpp)
add_dependencies(cookbook_variant2_test_bin dependency_stub)
add_test(NAME cookbook_variant2_test COMMAND cookbook_variant2_test_bin ./cookbook_variant2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_variant2_test_bin)

add_executable(optional_tagged_variant_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/optional_tagged_variant_test.cpp)
add_dependencies(optional_tagged_variant_test_bin dependency_stub)
add_test(NAME optional_tagged_variant_test COMMAND optional_tagged_variant_test_bin ./optional_tagged_variant.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full optional_tagged_variant_test_bin)

add_executable(optional_variant_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/optional_variant_test.cpp)
add_dependencies(optional_variant_test_bin dependency_stub)
add_test(NAME optional_variant_test COMMAND optional_variant_test_bin ./optional_variant.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full optional_variant_test_bin)

add_executable(daw_murmur3_test_bin EXCLUDE_FROM_ALL ${TEST_FOLDER}/daw_murmur3_test.cpp)
add_dependencies(daw_murmur3_test_bin dependency_stub)
add_test(NAME daw_murmur3_test COMMAND daw_murmur3_test_bin)
add_dependencies(full daw_murmur3_test_bin)

add_executable(apache_builds_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/apache_builds.h ${TEST_FOLDER}/apache_builds_test.cpp)
add_dependencies(apache_builds_test_bin dependency_stub)
target_link_libraries(apache_builds_test_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME apache_builds_test COMMAND apache_builds_test_bin ./apache_builds.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full apache_builds_test_bin)

add_executable(cookbook_dates1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_dates1_test.cpp)
add_dependencies(cookbook_dates1_test_bin dependency_stub)
add_test(NAME cookbook_dates1_test COMMAND cookbook_dates1_test_bin ./cookbook_dates1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_dates1_test_bin)

add_executable(cookbook_dates2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_dates2_test.cpp)
add_dependencies(cookbook_dates2_test_bin dependency_stub)
add_test(NAME cookbook_dates2_test COMMAND cookbook_dates2_test_bin ./cookbook_dates2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_dates2_test_bin)

add_executable(cookbook_dates3_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_dates3_test.cpp)
add_dependencies(cookbook_dates3_test_bin dependency_stub)
add_test(NAME cookbook_dates3_test COMMAND cookbook_dates3_test_bin ./cookbook_dates3.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_dates3_test_bin)

add_executable(no_move_or_copy_cls_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/no_move_or_copy_cls_test.cpp)
add_dependencies(no_move_or_copy_cls_test_bin dependency_stub)
add_test(NAME no_move_or_copy_cls_test COMMAND no_move_or_copy_cls_test_bin)
add_dependencies(full no_move_or_copy_cls_test_bin)

add_executable(cookbook_class_from_array1_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_class_from_array1_test.cpp)
add_dependencies(cookbook_class_from_array1_test_bin dependency_stub)
add_test(NAME cookbook_class_from_array1_test COMMAND cookbook_class_from_array1_test_bin ./cookbook_class_from_array1.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_class_from_array1_test_bin)

add_executable(cookbook_class_from_array2_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/cookbook_class_from_array2_test.cpp)
add_dependencies(cookbook_class_from_array2_test_bin dependency_stub)
add_test(NAME cookbook_class_from_array2_test COMMAND cookbook_class_from_array2_test_bin ./cookbook_class_from_array2.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full cookbook_class_from_array2_test_bin)

add_executable(stream_output_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/stream_output_test.cpp)
add_dependencies(stream_output_test_bin dependency_stub)
add_test(NAME stream_output_test COMMAND stream_output_test_bin)
add_dependencies(full stream_output_test_bin)

add_executable(int_sanity_test_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/int_sanity_test.cpp)
add_dependencies(int_sanity_test_bin dependency_stub)
add_test(NAME int_sanity_test COMMAND int_sanity_test_bin)
add_dependencies(full int_sanity_test_bin)

add_executable(nativejson_roundtrip_bin EXCLUDE_FROM_ALL ${HEADER_FILES} ${TEST_FOLDER}/twitter_test.h ${TEST_FOLDER}/citm_test.h ${TEST_FOLDER}/geojson.h ${TEST_FOLDER}/nativejson_roundtrip.cpp)
add_dependencies(nativejson_roundtrip_bin dependency_stub)
target_link_libraries(nativejson_roundtrip_bin ${COMPILER_SPECIFIC_LIBS} ${CMAKE_THREAD_LIBS_INIT})
add_test(NAME nativejson_roundtrip COMMAND nativejson_roundtrip_bin ./twitter.json ./citm_catalog.json ./canada.json WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}/test_data/"")
add_dependencies(full nativejson_roundtrip_bin)


install(DIRECTORY ${HEADER_FOLDER}/daw/json/ DESTINATION include/daw/json/)
install(DIRECTORY ${HEADER_FOLDER}/third_party/ DESTINATION include/third_party/)

set(CMAKE_CXX_STANDARD 17 CACHE STRING ""The C++ standard whose features are requested."")


",3.10,3.1
22847,votca,csg,False,False,False,False,False,23,C++,2020-05-17 21:37:25+00:00,2015-08-18 23:49:07+00:00,21,4343,"cmake_minimum_required(VERSION 3.10)

project(votca-csg)

set(PROJECT_VERSION ""1.7-dev"")
set(PROJECT_CONTACT ""bugs@votca.org"")
string(REGEX REPLACE ""^[1-9]+\\.([1-9]+).*$"" ""\\1"" SOVERSION ""${PROJECT_VERSION}"")
if (NOT ${SOVERSION} MATCHES ""[1-9]+"")
  message(FATAL_ERROR ""Could not determind SOVERSION from ${PROJECT_VERSION}"")
endif (NOT ${SOVERSION} MATCHES ""[1-9]+"")

# Cmake modules/macros are in a subdirectory to keep this file cleaner
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
  #Release comes with -O3 by default
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
if(CMAKE_BUILD_TYPE STREQUAL Debug)
  add_definitions(-DDEBUG)
endif(CMAKE_BUILD_TYPE STREQUAL Debug)

enable_language(CXX)

######################################################################
# compiler tests
# these need ot be done early (before further tests).
#####################################################################

include(CheckCXXCompilerFlag)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) #...without compiler extensions like gnu++11

########################################################################
# User input options                                                   #
########################################################################
option(BUILD_SHARED_LIBS ""Build shared libs"" ON)
include(GNUInstallDirs)
include(FeatureSummary)

option(ENABLE_TESTING ""Build and enable testing stuff"" OFF)
add_feature_info(ENABLE_TESTING ENABLE_TESTING ""Enable unit tests"")
if(ENABLE_TESTING)
  enable_testing()
endif(ENABLE_TESTING)

########################################################################
#Find external packages
########################################################################
if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  find_package(Git)
  set_package_properties(Git PROPERTIES TYPE OPTIONAL PURPOSE ""Generated version for development version"")
endif(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)

option(BUILD_MANPAGES ""Build manpages"" ON)
add_feature_info(BUILD_MANPAGES BUILD_MANPAGES ""Build manpages (disable for cross-compile)"")
if (BUILD_MANPAGES)
  find_package(TXT2TAGS)
  set_package_properties(TXT2TAGS PROPERTIES TYPE OPTIONAL PURPOSE ""Used to build manpages"")
  find_package(UnixCommands)
  set_package_properties(UnixCommands PROPERTIES TYPE OPTIONAL PURPOSE ""Used to build manpages"")
else (BUILD_MANPAGES)
  #we use TXT2TAGS_FOUND conditionals in other CMakeLists.txt
  #so that TXT2TAGS is never required
  set(TXT2TAGS_FOUND)
endif (BUILD_MANPAGES)

find_package(Boost 1.53.0 REQUIRED COMPONENTS program_options filesystem system )
find_package(Eigen3 3.3.0 NO_MODULE REQUIRED)
find_package(Threads REQUIRED)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set_package_properties(Threads PROPERTIES TYPE REQUIRED PURPOSE ""Used for thread parallelization"")
  set_package_properties(Boost PROPERTIES TYPE REQUIRED PURPOSE ""Extended C++ libraries"")
  set_package_properties(Eigen3 PROPERTIES TYPE REQUIRED PURPOSE ""C++ vector data structures"")
endif()
message(STATUS ""Found Eigen3: ${Eigen3_DIR}"")

find_package(VOTCA_TOOLS NO_MODULE REQUIRED)
set_package_properties(VOTCA_TOOLS PROPERTIES TYPE REQUIRED PURPOSE ""Votca base library"")
message(STATUS ""Found VOTCA_TOOLS: ${VOTCA_TOOLS_DIR}"")
if(DEFINED VOTCA_TOOLS_VERSION AND NOT VOTCA_TOOLS_VERSION STREQUAL PROJECT_VERSION)
  message(FATAL_ERROR ""Incompatible VOTCA Tools version found (needed ${PROJECT_VERSION}, found ${VOTCA_TOOLS_VERSION})"")
endif()

find_package(GROMACS 2021 QUIET CONFIG NAMES gromacs gromacs_d)
set_package_properties(GROMACS PROPERTIES TYPE RECOMMENDED PURPOSE ""Used to read/write gromacs data files"")
if(NOT GROMACS_FOUND)
  find_package(GROMACS 2019 MODULE)
endif()
if(GROMACS_FOUND AND DEFINED GROMACS_VERSION AND GROMACS_VERSION VERSION_GREATER_EQUAL ""2020"")
  message(WARNING ""Gromacs-2020 and above have no support for tabulated interactions, that are needed for coarse-graining (see and comment on https://gitlab.com/gromacs/gromacs/-/issues/1347)"")
endif()

find_program(GMX_EXECUTABLE gmx_d gmx)
find_package_handle_standard_args(GMX REQUIRED_VARS GMX_EXECUTABLE)

if(ENABLE_TESTING)
  set(REGRESSIONTEST_TOLERANCE ""5e-5"" CACHE STRING ""Tolerance for the regression tests"")
  mark_as_advanced(REGRESSIONTEST_TOLERANCE)
  find_package(UnixCommands)
  set_package_properties(UnixCommands PROPERTIES TYPE OPTIONAL PURPOSE ""Used in testing"")
endif(ENABLE_TESTING)

########################################################################
# Basic system tests (standard libraries, headers, functions, types)   #
########################################################################
include(CheckIncludeFile)
foreach(HEADER assert.h)
  check_include_file(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

include(CheckIncludeFileCXX)
foreach(HEADER algorithm fstream iomanip iostream list map numeric sstream stdexcept string vector cstdlib)
  check_include_file_cxx(${HEADER} FOUND_${HEADER})
  if(NOT FOUND_${HEADER})
    message(FATAL_ERROR ""Could not find needed header - ${HEADER}"")
  endif(NOT FOUND_${HEADER})
endforeach(HEADER)

set(MATH_LIBRARIES ""m"" CACHE STRING ""math library"")
mark_as_advanced( MATH_LIBRARIES )
include(CheckLibraryExists)
foreach(FUNC sqrt)
  check_library_exists(${MATH_LIBRARIES} ${FUNC} """" FOUND_${FUNC}_${MATH_LIBRARIES})
  if(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
    message(FATAL_ERROR ""Could not find needed math function - ${FUNC}"")
  endif(NOT FOUND_${FUNC}_${MATH_LIBRARIES})
endforeach(FUNC)

######################################
# Include the following subdirectory # 
######################################
if(NOT TARGET manpages)
  add_custom_target(manpages ALL)
endif()
add_subdirectory(src)
add_subdirectory(scripts)
add_subdirectory(include/votca/csg)
add_subdirectory(share)

# needs to happen after src and scripts subdir
get_property(VOTCA_BINARIES TARGET votca_csg PROPERTY BINARIES)
list(SORT VOTCA_BINARIES)
configure_file(src/libcsg/VOTCA_CSGConfig.cmake.in ""${CMAKE_CURRENT_BINARY_DIR}/src/libcsg/VOTCA_CSGConfig.cmake"" @ONLY)
# for >=cmake-3.12 use list(JOIN VOTCA_BINARIES "" "" VOTCA_BINARIES)
string(REPLACE "";"" "" "" VOTCA_BINARIES ""${VOTCA_BINARIES}"")
configure_file(scripts/csg-completion.bash.in ""${CMAKE_CURRENT_BINARY_DIR}/scripts/csg-completion.bash"" @ONLY)

configure_file(${PROJECT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake IMMEDIATE @ONLY)
add_custom_target(uninstall-csg COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
if(NOT TARGET uninstall)
  add_custom_target(uninstall)
endif()
add_dependencies(uninstall uninstall-csg)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  feature_summary(INCLUDE_QUIET_PACKAGES WHAT ALL)
endif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
",3.10,3.1
22998,rieske,trans,False,False,False,False,False,1,C++,2020-05-17 15:10:48+00:00,2014-04-03 05:10:21+00:00,0,472,"cmake_minimum_required(VERSION 3.10)
project(trans)

#set(CMAKE_CXX_COMPILER ""/usr/bin/clang++"")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS ""-g -O0 -Wall -fprofile-arcs -ftest-coverage"")
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_subdirectory(libs/gmock)
add_subdirectory(test/src)
enable_testing()

add_executable(trans src/trans.cpp)

add_subdirectory(src/driver)
set(DRIVER_OBJECTS ${CMAKE_BINARY_DIR}/src/driver/CMakeFiles/driver.dir)

add_subdirectory(src/translation_unit)
set(TRANSLATION_UNIT_OBJECTS ${CMAKE_BINARY_DIR}/src/translation_unit/CMakeFiles/translation_unit.dir)

add_subdirectory(src/scanner)
set(SCANNER_OBJECTS ${CMAKE_BINARY_DIR}/src/scanner/CMakeFiles/scanner.dir)

add_subdirectory(src/semantic_analyzer)
set(SEMANTIC_ANALYZER_OBJECTS ${CMAKE_BINARY_DIR}/src/semantic_analyzer/CMakeFiles/semantic_analyzer.dir)

add_subdirectory(src/parser)
set(PARSER_OBJECTS ${CMAKE_BINARY_DIR}/src/parser/CMakeFiles/parser.dir)

add_subdirectory(src/ast)
set(AST_OBJECTS ${CMAKE_BINARY_DIR}/src/ast/CMakeFiles/ast.dir)

add_subdirectory(src/types)
set(TYPES_OBJECTS ${CMAKE_BINARY_DIR}/src/types/CMakeFiles/types.dir)

add_subdirectory(src/codegen)
set(CODEGEN_OBJECTS ${CMAKE_BINARY_DIR}/src/codegen/CMakeFiles/codegen.dir)

add_subdirectory(src/util)
set(UTIL_OBJECTS ${CMAKE_BINARY_DIR}/src/util/CMakeFiles/util.dir)

target_link_libraries(trans driver translation_unit scanner parser ast semantic_analyzer types codegen util)


add_custom_target(coverage
    COMMAND mkdir -p coverage
    COMMAND ${CMAKE_MAKE_PROGRAM} test
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )
add_custom_command(TARGET coverage
    COMMAND lcov -c -d ${DRIVER_OBJECTS} -o driver.info
    COMMAND lcov -c -d ${TRANSLATION_UNIT_OBJECTS} -o translation_unit.info
    COMMAND lcov -c -d ${SCANNER_OBJECTS} -o scanner.info
    COMMAND lcov -c -d ${PARSER_OBJECTS} -o parser.info
    COMMAND lcov -c -d ${AST_OBJECTS} -o ast.info
    COMMAND lcov -c -d ${SEMANTIC_ANALYZER_OBJECTS} -o semantic_analyzer.info
    COMMAND lcov -c -d ${TYPES_OBJECTS} -o types.info
    COMMAND lcov -c -d ${CODEGEN_OBJECTS} -o codegen.info
    COMMAND lcov -c -d ${UTIL_OBJECTS} -o util.info
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/coverage
    )
add_dependencies(coverage trans)
set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES coverage)

add_custom_target(scrub
    COMMAND ${CMAKE_MAKE_PROGRAM} clean
    COMMAND rm -f ${DRIVER_OBJECTS}/*.gcno
    COMMAND rm -f ${DRIVER_OBJECTS}/*.gcno
    COMMAND rm -f ${TRANSLATION_UNIT_OBJECTS}/*.gcno
    COMMAND rm -f ${TRANSLATION_UNIT_OBJECTS}/*.gcno
    COMMAND rm -f ${SCANNER_OBJECTS}/*.gcno
    COMMAND rm -f ${SCANNER_OBJECTS}/*.gcno
    COMMAND rm -f ${PARSER_OBJECTS}/*.gcno
    COMMAND rm -f ${PARSER_OBJECTS}/*.gcno
    COMMAND rm -f ${AST_OBJECTS}/*.gcda
    COMMAND rm -f ${AST_OBJECTS}/*.gcda
    COMMAND rm -f ${SEMANTIC_ANALYZER_OBJECTS}/*.gcda
    COMMAND rm -f ${SEMANTIC_ANALYZER_OBJECTS}/*.gcda
    COMMAND rm -f ${TYPES_OBJECTS}/*.gcno
    COMMAND rm -f ${TYPES_OBJECTS}/*.gcda
    COMMAND rm -f ${CODEGEN_OBJECTS}/*.gcda
    COMMAND rm -f ${CODEGEN_OBJECTS}/*.gcda
    COMMAND rm -f ${UTIL_OBJECTS}/*.gcda
    COMMAND rm -f ${UTIL_OBJECTS}/*.gcda
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )

",3.10,3.1
23140,KDE,kwin,False,False,False,False,False,253,C++,2020-05-17 17:02:35+00:00,2015-09-18 12:06:00+00:00,145,17972,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

project(KWin)
set(PROJECT_VERSION ""5.19.80"")
set(PROJECT_VERSION_MAJOR 5)

set(QT_MIN_VERSION ""5.14.0"")
set(KF5_MIN_VERSION ""5.70.0"")

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH})

find_package(ECM 5.38 REQUIRED NO_MODULE)

include(FeatureSummary)
include(WriteBasicConfigVersionFile)
include(GenerateExportHeader)

# where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH} ${ECM_KDE_MODULE_DIR})

find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
    Concurrent
    Core
    DBus
    Quick
    QuickWidgets
    Script
    Sensors
    UiTools
    Widgets
    X11Extras
)

find_package(Qt5Test ${QT_MIN_VERSION} CONFIG QUIET)
set_package_properties(Qt5Test PROPERTIES
    PURPOSE ""Required for tests""
    TYPE OPTIONAL
)
add_feature_info(""Qt5Test"" Qt5Test_FOUND ""Required for building tests"")
if (NOT Qt5Test_FOUND)
    set(BUILD_TESTING OFF CACHE BOOL ""Build the testing tree."")
endif()

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(KDEClangFormat)

include(ECMInstallIcons)
include(ECMOptionalAddSubdirectory)

add_definitions(-DQT_DISABLE_DEPRECATED_BEFORE=0 -DQT_USE_QSTRINGBUILDER -DQT_NO_URL_CAST_FROM_STRING)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt5Multimedia QUIET)
set_package_properties(Qt5Multimedia PROPERTIES
    PURPOSE ""Runtime-only dependency for effect video playback""
    TYPE RUNTIME
)

# required frameworks by Core
find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS
    Config
    ConfigWidgets
    CoreAddons
    Crash
    GlobalAccel
    I18n
    IconThemes
    IdleTime
    Notifications
    Package
    Plasma
    Wayland
    WidgetsAddons
    WindowSystem
)
# required frameworks by config modules
find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS
    Completion
    Declarative
    KCMUtils
    KIO
    NewStuff
    Service
    TextWidgets
    XmlGui
)

find_package(Threads)
set_package_properties(Threads PROPERTIES
    PURPOSE ""Needed for VirtualTerminal support in KWin Wayland""
    TYPE REQUIRED
)

# optional frameworks
find_package(KF5Activities ${KF5_MIN_VERSION} CONFIG)
set_package_properties(KF5Activities PROPERTIES
    PURPOSE ""Enable building of KWin with kactivities support""
    TYPE OPTIONAL
)
add_feature_info(""KF5Activities"" KF5Activities_FOUND ""Enable building of KWin with kactivities support"")

find_package(KF5DocTools ${KF5_MIN_VERSION} CONFIG)
set_package_properties(KF5DocTools PROPERTIES
    PURPOSE ""Enable building documentation""
    TYPE OPTIONAL
)
add_feature_info(""KF5DocTools"" KF5DocTools_FOUND ""Enable building documentation"")

find_package(KF5Kirigami2 ${KF5_MIN_VERSION} CONFIG)
set_package_properties(KF5Kirigami2 PROPERTIES
    DESCRIPTION ""A QtQuick based components set""
    PURPOSE ""Required at runtime for Virtual desktop KCM and the virtual keyboard""
    TYPE RUNTIME
)

find_package(KDecoration2 5.18.0 CONFIG REQUIRED)

find_package(KScreenLocker CONFIG REQUIRED)
set_package_properties(KScreenLocker PROPERTIES
    TYPE REQUIRED
    PURPOSE ""For screenlocker integration in kwin_wayland""
)

find_package(KWaylandServer CONFIG REQUIRED)
set_package_properties(KWaylandServer PROPERTIES
    TYPE REQUIRED
    PURPOSE ""For Wayland integration""
)

find_package(Breeze 5.9.0 CONFIG)
set_package_properties(Breeze PROPERTIES
    TYPE OPTIONAL
    PURPOSE ""For setting the default window decoration plugin""
)
if (${Breeze_FOUND})
    if (${BREEZE_WITH_KDECORATION})
        set(HAVE_BREEZE_DECO true)
    else()
        set(HAVE_BREEZE_DECO FALSE)
    endif()
else()
    set(HAVE_BREEZE_DECO FALSE)
endif()
add_feature_info(""Breeze-Decoration"" HAVE_BREEZE_DECO ""Default decoration plugin Breeze"")

find_package(EGL)
set_package_properties(EGL PROPERTIES
    TYPE RUNTIME
    PURPOSE ""Required to build KWin with EGL support""
)

find_package(epoxy)
set_package_properties(epoxy PROPERTIES
    DESCRIPTION ""libepoxy""
    URL ""https://github.com/anholt/libepoxy""
    TYPE REQUIRED
    PURPOSE ""OpenGL dispatch library""
)

set(HAVE_DL_LIBRARY FALSE)
if (epoxy_HAS_GLX)
    find_library(DL_LIBRARY dl)
    if (DL_LIBRARY)
        set(HAVE_DL_LIBRARY TRUE)
    endif()
endif()

find_package(Wayland 1.2 REQUIRED COMPONENTS Cursor OPTIONAL_COMPONENTS Egl)
set_package_properties(Wayland PROPERTIES
    TYPE REQUIRED
    PURPOSE ""Required for building KWin with Wayland support""
)
add_feature_info(""Wayland::EGL"" Wayland_Egl_FOUND ""Enable building of Wayland backend and QPA with EGL support."")
set(HAVE_WAYLAND_EGL FALSE)
if (Wayland_Egl_FOUND)
    set(HAVE_WAYLAND_EGL TRUE)
endif()

find_package(XKB 0.7.0)
set_package_properties(XKB PROPERTIES
    TYPE REQUIRED
    PURPOSE ""Required for building KWin with Wayland support""
)

find_package(Libinput 1.9)
set_package_properties(Libinput PROPERTIES TYPE REQUIRED PURPOSE ""Required for input handling on Wayland."")

find_package(UDev)
set_package_properties(UDev PROPERTIES
    URL ""https://www.freedesktop.org/wiki/Software/systemd/""
    DESCRIPTION ""Linux device library.""
    TYPE REQUIRED
    PURPOSE ""Required for input handling on Wayland.""
)

find_package(Libdrm 2.4.62)
set_package_properties(Libdrm PROPERTIES TYPE OPTIONAL PURPOSE ""Required for drm output on Wayland."")
set(HAVE_DRM FALSE)
if (Libdrm_FOUND)
    set(HAVE_DRM TRUE)
endif()

find_package(gbm)
set_package_properties(gbm PROPERTIES TYPE OPTIONAL PURPOSE ""Required for egl output of drm backend."")
set(HAVE_GBM FALSE)
if (HAVE_DRM AND gbm_FOUND)
    set(HAVE_GBM TRUE)
endif()

option(KWIN_BUILD_EGL_STREAM_BACKEND ""Enable building of EGLStream based DRM backend"" ON)
if (HAVE_DRM AND KWIN_BUILD_EGL_STREAM_BACKEND)
    set(HAVE_EGL_STREAMS TRUE)
endif()

find_package(libhybris)
set_package_properties(libhybris PROPERTIES TYPE OPTIONAL PURPOSE ""Required for libhybris backend"")
set(HAVE_LIBHYBRIS ${libhybris_FOUND})

find_package(X11)
set_package_properties(X11 PROPERTIES
    DESCRIPTION ""X11 libraries""
    URL ""https://www.x.org""
    TYPE REQUIRED
)
add_feature_info(""XInput"" X11_Xinput_FOUND ""Required for poll-free mouse cursor updates"")
set(HAVE_X11_XINPUT ${X11_Xinput_FOUND})

# All the required XCB components
find_package(XCB 1.10 REQUIRED COMPONENTS
    COMPOSITE
    CURSOR
    DAMAGE
    GLX
    ICCCM
    IMAGE
    KEYSYMS
    RANDR
    RENDER
    SHAPE
    SHM
    SYNC
    XCB
    XFIXES
)
set_package_properties(XCB PROPERTIES TYPE REQUIRED)

# and the optional XCB dependencies
if (XCB_ICCCM_VERSION VERSION_LESS ""0.4"")
    set(XCB_ICCCM_FOUND FALSE)
endif()
add_feature_info(""XCB-ICCCM"" XCB_ICCCM_FOUND ""Required for building test applications for KWin"")

find_package(X11_XCB)
set_package_properties(X11_XCB PROPERTIES
    PURPOSE ""Required for building X11 windowed backend of kwin_wayland""
    TYPE OPTIONAL
)

# dependencies for QPA plugin
find_package(Qt5FontDatabaseSupport REQUIRED)
find_package(Qt5ThemeSupport REQUIRED)
find_package(Qt5EventDispatcherSupport REQUIRED)

find_package(Freetype REQUIRED)
set_package_properties(Freetype PROPERTIES
    DESCRIPTION ""A font rendering engine""
    URL ""https://www.freetype.org""
    TYPE REQUIRED
    PURPOSE ""Needed for KWin's QPA plugin.""
)
find_package(Fontconfig REQUIRED)
set_package_properties(Fontconfig PROPERTIES
    TYPE REQUIRED
    PURPOSE ""Needed for KWin's QPA plugin.""
)

find_package(Xwayland)
set_package_properties(Xwayland PROPERTIES
    URL ""https://x.org""
    DESCRIPTION ""Xwayland X server""
    TYPE RUNTIME
    PURPOSE ""Needed for running kwin_wayland""
)

find_package(Libcap)
set_package_properties(Libcap PROPERTIES
    TYPE OPTIONAL
    PURPOSE ""Needed for running kwin_wayland with real-time scheduling policy""
)
set(HAVE_LIBCAP ${Libcap_FOUND})

find_package(hwdata)
set_package_properties(hwdata PROPERTIES
    TYPE RUNTIME
    PURPOSE ""Runtime-only dependency needed for mapping monitor hardware vendor IDs to full names""
    URL ""https://github.com/vcrhonek/hwdata""
)

include(ECMQMLModules)
ecm_find_qmlmodule(QtQuick 2.3)
ecm_find_qmlmodule(QtQuick.Controls 1.2)
ecm_find_qmlmodule(QtQuick.Layouts 1.3)
ecm_find_qmlmodule(QtQuick.VirtualKeyboard 2.1)
ecm_find_qmlmodule(QtQuick.Window 2.1)
ecm_find_qmlmodule(QtMultimedia 5.0)
ecm_find_qmlmodule(org.kde.kquickcontrolsaddons 2.0)
ecm_find_qmlmodule(org.kde.plasma.core 2.0)
ecm_find_qmlmodule(org.kde.plasma.components 2.0)

########### configure tests ###############
include(CMakeDependentOption)

option(KWIN_BUILD_DECORATIONS ""Enable building of KWin decorations."" ON)
option(KWIN_BUILD_KCMS ""Enable building of KWin configuration modules."" ON)
option(KWIN_BUILD_TABBOX ""Enable building of KWin Tabbox functionality"" ON)
option(KWIN_BUILD_XRENDER_COMPOSITING ""Enable building of KWin with XRender Compositing support"" ON)
cmake_dependent_option(KWIN_BUILD_ACTIVITIES ""Enable building of KWin with kactivities support"" ON ""KF5Activities_FOUND"" OFF)

# Binary name of KWin
set(KWIN_NAME ""kwin"")
set(KWIN_INTERNAL_NAME_X11 ""kwin_x11"")
set(KWIN_INTERNAL_NAME_WAYLAND ""kwin_wayland"")

# KWIN_HAVE_XRENDER_COMPOSITING - whether XRender-based compositing support is available: may be disabled
if (KWIN_BUILD_XRENDER_COMPOSITING)
    set(KWIN_HAVE_XRENDER_COMPOSITING 1)
endif()

include_directories(${XKB_INCLUDE_DIR})

include_directories(${epoxy_INCLUDE_DIR})
set(HAVE_EPOXY_GLX ${epoxy_HAS_GLX})

# for things that are also used by kwin libraries
configure_file(libkwineffects/kwinconfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/libkwineffects/kwinconfig.h )
# for kwin internal things
set(HAVE_X11_XCB ${X11_XCB_FOUND})

include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckSymbolExists)
check_include_files(unistd.h HAVE_UNISTD_H)
check_include_files(malloc.h HAVE_MALLOC_H)

check_include_file(""sys/prctl.h"" HAVE_SYS_PRCTL_H)
check_symbol_exists(PR_SET_DUMPABLE ""sys/prctl.h"" HAVE_PR_SET_DUMPABLE)
check_symbol_exists(PR_SET_PDEATHSIG ""sys/prctl.h"" HAVE_PR_SET_PDEATHSIG)
check_include_file(""sys/procctl.h"" HAVE_SYS_PROCCTL_H)
check_symbol_exists(PROC_TRACE_CTL ""sys/procctl.h"" HAVE_PROC_TRACE_CTL)
if (HAVE_PR_SET_DUMPABLE OR HAVE_PROC_TRACE_CTL)
    set(CAN_DISABLE_PTRACE TRUE)
endif()
add_feature_info(""prctl/procctl tracing control""
                 CAN_DISABLE_PTRACE
                 ""Required for disallowing ptrace on kwin_wayland process"")

check_include_file(""sys/sysmacros.h"" HAVE_SYS_SYSMACROS_H)

check_include_file(""linux/vt.h"" HAVE_LINUX_VT_H)
add_feature_info(""linux/vt.h""
                 HAVE_LINUX_VT_H
                 ""Required for virtual terminal support under wayland"")
check_include_file(""linux/fb.h""    HAVE_LINUX_FB_H)
add_feature_info(""linux/fb.h""
                 HAVE_LINUX_FB_H
                 ""Required for the fbdev backend"")

check_symbol_exists(SCHED_RESET_ON_FORK ""sched.h"" HAVE_SCHED_RESET_ON_FORK)
add_feature_info(""SCHED_RESET_ON_FORK""
                 HAVE_SCHED_RESET_ON_FORK
                 ""Required for running kwin_wayland with real-time scheduling"")

configure_file(config-kwin.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-kwin.h)

########### global ###############
set(kwin_effects_dbus_xml ${CMAKE_CURRENT_SOURCE_DIR}/org.kde.kwin.Effects.xml)
qt5_add_dbus_interface(effects_interface_SRCS ${kwin_effects_dbus_xml} kwineffects_interface)
add_library(KWinEffectsInterface STATIC ${effects_interface_SRCS})
target_link_libraries(KWinEffectsInterface Qt5::DBus)

include_directories(BEFORE
    ${CMAKE_CURRENT_BINARY_DIR}/libkwineffects
    ${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/libkwineffects
    ${CMAKE_CURRENT_SOURCE_DIR}/effects
    ${CMAKE_CURRENT_SOURCE_DIR}/tabbox
    ${CMAKE_CURRENT_SOURCE_DIR}/platformsupport
)

add_subdirectory(libkwineffects)
if (KWIN_BUILD_KCMS)
    add_subdirectory(kcmkwin)
endif()

add_subdirectory(data)

add_subdirectory(effects)
add_subdirectory(scripts)
add_subdirectory(tabbox)
add_subdirectory(scripting)
add_subdirectory(helpers)

########### next target ###############

set(kwin_SRCS
    abstract_client.cpp
    abstract_opengl_context_attribute_builder.cpp
    abstract_output.cpp
    abstract_wayland_output.cpp
    activation.cpp
    appmenu.cpp
    atoms.cpp
    client_machine.cpp
    colorcorrection/clockskewnotifier.cpp
    colorcorrection/clockskewnotifierengine.cpp
    colorcorrection/colorcorrectdbusinterface.cpp
    colorcorrection/manager.cpp
    colorcorrection/suncalc.cpp
    composite.cpp
    cursor.cpp
    dbusinterface.cpp
    debug_console.cpp
    decorations/decoratedclient.cpp
    decorations/decorationbridge.cpp
    decorations/decorationpalette.cpp
    decorations/decorationrenderer.cpp
    decorations/decorations_logging.cpp
    decorations/settings.cpp
    deleted.cpp
    effectloader.cpp
    effects.cpp
    egl_context_attribute_builder.cpp
    events.cpp
    focuschain.cpp
    geometrytip.cpp
    gestures.cpp
    globalshortcuts.cpp
    group.cpp
    idle_inhibition.cpp
    input.cpp
    input_event.cpp
    input_event_spy.cpp
    internal_client.cpp
    keyboard_input.cpp
    keyboard_layout.cpp
    keyboard_layout_switching.cpp
    keyboard_repeat.cpp
    killwindow.cpp
    layers.cpp
    libinput/connection.cpp
    libinput/context.cpp
    libinput/device.cpp
    libinput/events.cpp
    libinput/libinput_logging.cpp
    linux_dmabuf.cpp
    logind.cpp
    main.cpp
    modifier_only_shortcuts.cpp
    moving_client_x11_filter.cpp
    netinfo.cpp
    onscreennotification.cpp
    options.cpp
    osd.cpp
    outline.cpp
    outputscreens.cpp
    overlaywindow.cpp
    placement.cpp
    platform.cpp
    pointer_input.cpp
    popup_input_filter.cpp
    rootinfo_filter.cpp
    rules.cpp
    rulebooksettings.cpp
    scene.cpp
    screenedge.cpp
    screenlockerwatcher.cpp
    screens.cpp
    scripting/dbuscall.cpp
    scripting/meta.cpp
    scripting/screenedgeitem.cpp
    scripting/scriptedeffect.cpp
    scripting/scripting.cpp
    scripting/scripting_logging.cpp
    scripting/scripting_model.cpp
    scripting/scriptingutils.cpp
    scripting/timer.cpp
    scripting/workspace_wrapper.cpp
    shadow.cpp
    sm.cpp
    subsurfacemonitor.cpp
    syncalarmx11filter.cpp
    thumbnailitem.cpp
    toplevel.cpp
    touch_hide_cursor_spy.cpp
    tablet_input.cpp
    touch_input.cpp
    udev.cpp
    unmanaged.cpp
    useractions.cpp
    utils.cpp
    virtualdesktops.cpp
    virtualdesktopsdbustypes.cpp
    virtualkeyboard.cpp
    virtualkeyboard_dbus.cpp
    was_user_interaction_x11_filter.cpp
    wayland_cursor_theme.cpp
    wayland_server.cpp
    window_property_notify_x11_filter.cpp
    workspace.cpp
    x11client.cpp
    x11eventfilter.cpp
    xcbutils.cpp
    xdgshellclient.cpp
    xkb.cpp
    xwaylandclient.cpp
    xwl/xwayland_interface.cpp
)

if (CMAKE_SYSTEM_NAME MATCHES ""Linux"")
    set(kwin_SRCS
        ${kwin_SRCS}
        colorcorrection/clockskewnotifierengine_linux.cpp
    )
endif()

include(ECMQtDeclareLoggingCategory)
ecm_qt_declare_logging_category(kwin_SRCS
    HEADER
        colorcorrect_logging.h
    IDENTIFIER
        KWIN_COLORCORRECTION
    CATEGORY_NAME
        kwin_colorcorrection
    DEFAULT_SEVERITY
        Critical
)

if (KWIN_BUILD_TABBOX)
    include_directories(${Qt5Gui_PRIVATE_INCLUDE_DIRS})
    set(kwin_SRCS ${kwin_SRCS}
        tabbox/clientmodel.cpp
        tabbox/desktopchain.cpp
        tabbox/desktopmodel.cpp
        tabbox/switcheritem.cpp
        tabbox/tabbox.cpp
        tabbox/tabbox_logging.cpp
        tabbox/tabboxconfig.cpp
        tabbox/tabboxhandler.cpp
        tabbox/x11_filter.cpp
    )
endif()

if (KWIN_BUILD_ACTIVITIES)
    set(kwin_SRCS ${kwin_SRCS}
        activities.cpp
    )
endif()

if (HAVE_LINUX_VT_H)
    set(kwin_SRCS ${kwin_SRCS}
        virtual_terminal.cpp
    )
endif()

kconfig_add_kcfg_files(kwin_SRCS settings.kcfgc)
kconfig_add_kcfg_files(kwin_SRCS colorcorrection/colorcorrect_settings.kcfgc)
kconfig_add_kcfg_files(kwin_SRCS rulesettings.kcfgc)
kconfig_add_kcfg_files(kwin_SRCS rulebooksettingsbase.kcfgc)

qt5_add_dbus_adaptor(kwin_SRCS org.kde.KWin.xml dbusinterface.h KWin::DBusInterface)
qt5_add_dbus_adaptor(kwin_SRCS org.kde.kwin.Compositing.xml dbusinterface.h KWin::CompositorDBusInterface)
qt5_add_dbus_adaptor(kwin_SRCS org.kde.kwin.ColorCorrect.xml colorcorrection/colorcorrectdbusinterface.h KWin::ColorCorrect::ColorCorrectDBusInterface)
qt5_add_dbus_adaptor(kwin_SRCS ${kwin_effects_dbus_xml} effects.h KWin::EffectsHandlerImpl)
qt5_add_dbus_adaptor(kwin_SRCS org.kde.KWin.VirtualDesktopManager.xml dbusinterface.h KWin::VirtualDesktopManagerDBusInterface)
qt5_add_dbus_adaptor(kwin_SRCS org.kde.KWin.Session.xml sm.h KWin::SessionManager)

qt5_add_dbus_interface(kwin_SRCS ${KSCREENLOCKER_DBUS_INTERFACES_DIR}/kf5_org.freedesktop.ScreenSaver.xml screenlocker_interface)
qt5_add_dbus_interface(kwin_SRCS ${KSCREENLOCKER_DBUS_INTERFACES_DIR}/org.kde.screensaver.xml kscreenlocker_interface)
qt5_add_dbus_interface(kwin_SRCS org.kde.kappmenu.xml appmenu_interface)

ki18n_wrap_ui(kwin_SRCS
    debug_console.ui
    shortcutdialog.ui
)

########### target link libraries ###############

set(kwin_OWN_LIBS
    kwineffects
    kwin4_effect_builtins
)

set(kwin_QT_LIBS
    Qt5::Concurrent
    Qt5::DBus
    Qt5::Quick
    Qt5::Script
    Qt5::Sensors
)

set(kwin_KDE_LIBS
    KF5::ConfigCore
    KF5::ConfigWidgets
    KF5::CoreAddons
    KF5::GlobalAccel
    KF5::GlobalAccelPrivate
    KF5::I18n
    KF5::Notifications
    KF5::Package
    KF5::Plasma
    KF5::QuickAddons
    KF5::WindowSystem

    KDecoration2::KDecoration
    KDecoration2::KDecoration2Private

    PW::KScreenLocker
)

set(kwin_XLIB_LIBS
    ${X11_ICE_LIB}
    ${X11_SM_LIB}
    ${X11_X11_LIB}
)

set(kwin_XCB_LIBS
    XCB::COMPOSITE
    XCB::DAMAGE
    XCB::GLX
    XCB::ICCCM
    XCB::KEYSYMS
    XCB::RANDR
    XCB::RENDER
    XCB::SHAPE
    XCB::SHM
    XCB::SYNC
    XCB::XCB
    XCB::XFIXES
)

set(kwin_WAYLAND_LIBS
    KF5::WaylandClient
    Plasma::KWaylandServer
    Wayland::Cursor
    XKB::XKB
    ${CMAKE_THREAD_LIBS_INIT}
)

if (KWIN_BUILD_ACTIVITIES)
    set(kwin_KDE_LIBS ${kwin_KDE_LIBS} KF5::Activities)
endif()

set(kwinLibs
    ${kwin_OWN_LIBS}
    ${kwin_QT_LIBS}
    ${kwin_KDE_LIBS}
    ${kwin_XLIB_LIBS}
    ${kwin_XCB_LIBS}
    ${kwin_WAYLAND_LIBS}
    ${UDEV_LIBS}
    Libinput::Libinput
)

add_library(kwin SHARED ${kwin_SRCS})
if (Libinput_VERSION_STRING VERSION_GREATER 1.14)
    target_compile_definitions(kwin PRIVATE -DLIBINPUT_HAS_TOTEM)
endif ()

set_target_properties(kwin PROPERTIES
   VERSION ${PROJECT_VERSION}
   SOVERSION ${PROJECT_VERSION_MAJOR}
)

target_link_libraries(kwin ${kwinLibs})
generate_export_header(kwin EXPORT_FILE_NAME kwin_export.h)

target_link_libraries(kwin kwinglutils ${epoxy_LIBRARY})

add_executable(kwin_x11 main_x11.cpp)
target_link_libraries(kwin_x11 kwin KF5::Crash Qt5::X11Extras)

install(TARGETS kwin ${INSTALL_TARGETS_DEFAULT_ARGS} LIBRARY NAMELINK_SKIP)
install(TARGETS kwin_x11 ${INSTALL_TARGETS_DEFAULT_ARGS})

set(kwin_XWAYLAND_SRCS
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/clipboard.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/databridge.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/dnd.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/drag.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/drag_wl.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/drag_x.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/selection.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/selection_source.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/transfer.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/xwl/xwayland.cpp
)
include(ECMQtDeclareLoggingCategory)
ecm_qt_declare_logging_category(kwin_XWAYLAND_SRCS
    HEADER
        xwayland_logging.h
    IDENTIFIER
        KWIN_XWL
    CATEGORY_NAME
        kwin_xwl
    DEFAULT_SEVERITY
        Critical
)

set(kwin_WAYLAND_SRCS
   main_wayland.cpp
   tabletmodemanager.cpp
)

add_executable(kwin_wayland ${kwin_WAYLAND_SRCS} ${kwin_XWAYLAND_SRCS})
target_link_libraries(kwin_wayland kwin KF5::Crash)
if (HAVE_LIBCAP)
    target_link_libraries(kwin_wayland ${Libcap_LIBRARIES})
endif()

install(TARGETS kwin_wayland ${INSTALL_TARGETS_DEFAULT_ARGS})
if (HAVE_LIBCAP)
    install(
    CODE ""execute_process(
            COMMAND
                ${SETCAP_EXECUTABLE}
                CAP_SYS_NICE=+ep
                \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_BINDIR}/kwin_wayland)""
    )
endif()

add_subdirectory(platformsupport)
add_subdirectory(plugins)

########### install files ###############

install(FILES kwin.kcfg DESTINATION ${KCFG_INSTALL_DIR} RENAME ${KWIN_NAME}.kcfg)
install(FILES colorcorrection/colorcorrect_settings.kcfg DESTINATION ${KCFG_INSTALL_DIR} RENAME ${KWIN_NAME}_colorcorrect.kcfg)
install(FILES kwin.notifyrc DESTINATION ${KNOTIFYRC_INSTALL_DIR} RENAME ${KWIN_NAME}.notifyrc)
install(
    FILES
        org.kde.KWin.VirtualDesktopManager.xml
        org.kde.KWin.xml
        org.kde.kwin.ColorCorrect.xml
        org.kde.kwin.Compositing.xml
        org.kde.kwin.Effects.xml
    DESTINATION
        ${KDE_INSTALL_DBUSINTERFACEDIR}
)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/kwin_export.h DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)

# Install the KWin/Script service type
install(FILES scripting/kwinscript.desktop DESTINATION ${SERVICETYPES_INSTALL_DIR})

add_subdirectory(qml)

if (BUILD_TESTING)
    add_subdirectory(autotests)
    add_subdirectory(tests)
endif()

if (KF5DocTools_FOUND)
    add_subdirectory(doc)
endif()

add_subdirectory(kconf_update)

# add clang-format target for all our real source files
file(GLOB_RECURSE ALL_CLANG_FORMAT_SOURCE_FILES *.cpp *.h)
kde_clang_format(${ALL_CLANG_FORMAT_SOURCE_FILES})

feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)

include(CMakePackageConfigHelpers)
set(CMAKECONFIG_INSTALL_DIR ""${CMAKECONFIG_INSTALL_PREFIX}/KWinDBusInterface"")
configure_package_config_file(KWinDBusInterfaceConfig.cmake.in
    ""${CMAKE_CURRENT_BINARY_DIR}/KWinDBusInterfaceConfig.cmake""
    PATH_VARS KDE_INSTALL_DBUSINTERFACEDIR
    INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/KWinDBusInterfaceConfig.cmake
    DESTINATION ${CMAKECONFIG_INSTALL_DIR})
",3.1,3.1
23291,DO-CV,sara,False,False,False,False,False,5,C++,2020-04-26 16:20:25+00:00,2013-04-17 03:35:11+00:00,38,2807,"cmake_minimum_required(VERSION 3.10)

project(Sara LANGUAGES CXX)


# Set the version major and minor manually.
set(DO_Sara_VERSION_MAJOR 1)
set(DO_Sara_VERSION_MINOR 2)

if (APPLE)
  set (CMAKE_MACOSX_RPATH ON)
endif ()

# Check that vcpkg toolchain is specified when running CMake!
if (WIN32 AND NOT CMAKE_TOOLCHAIN_FILE)
  message(FATAL_ERROR
    ""[Sara] Could not find vpkg toolchain file: ""
    ""please specify it to build Sara on Windows!"")
endif ()

# Set default build type to Release mode.
set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING
  ""Build type options are: Debug, Release"")

# Set options.
option(SARA_USE_VLD ""Enable Visual Leak Detector for unit tests"" OFF)
option(SARA_USE_HALIDE ""Enable Halide"" OFF)
option(SARA_BUILD_VIDEOIO ""Build Sara's Video I/O module"" OFF)
option(SARA_BUILD_PYTHON_BINDINGS ""Build Python bindings"" OFF)
option(SARA_BUILD_TESTS ""Build unit tests for DO-Sara libraries"" OFF)
option(SARA_BUILD_SAMPLES ""Build sample programs using DO-Sara libraries"" OFF)
option(SARA_BUILD_SHARED_LIBS ""Build shared libraries for DO-Sara libraries"" OFF)
option(SARA_SELF_CONTAINED_INSTALLATION
  ""Install C++ and Python libraries in a single self contained directory"" OFF)


# Set the following internal switches to build Sara.
set(SARA_USE_FROM_SOURCE TRUE CACHE INTERNAL ""Build Sara libraries"")
set(BUILD_SHARED_LIBS ${SARA_BUILD_SHARED_LIBS})

# Add Sara to the CMake module path.
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)


# We are in 2020 now: let's all look to the future please.
set(CMAKE_CXX_STANDARD 14)

# Use CUDA if available.
include(CheckLanguage)
check_language(CUDA)
if (CMAKE_CUDA_COMPILER)
  enable_language(CUDA)

  find_package(CUDA 10.0)

  # set(CMAKE_CUDA_FLAGS -arch=sm_75)
  set(CUDA_VERBOSE_BUILD OFF)
  set(CUDA_LINK_LIBRARIES_KEYWORD PUBLIC)
  # Since we are still using the old CMake way style to compile CUDA code.
  if (UNIX)
    set (CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -Xcompiler=-Wno-unknown-pragmas)
  endif ()

  include(shakti_macros)
else ()
  message(STATUS ""No CUDA support!"")
endif()



# Import macros and configure Sara library version.
include(sara_macros)
sara_dissect_version()

# Use CCache if available to speed up builds.
include(sara_use_ccache)

# We are ready to build Sara.
find_package(DO_Sara REQUIRED)

# Group projects by category.
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Set installation settings.
include(sara_installation_settings)

# Enable testing before building the library.
if (SARA_BUILD_TESTS)
  include(sara_configure_code_coverage)
  include(CTest)
  enable_testing()
endif ()

# Build the libraries.
add_subdirectory(cpp)
if (SARA_BUILD_PYTHON_BINDINGS)
  add_subdirectory(python)
endif ()

# Make documentation
add_subdirectory(doc)

# To create Windows installer and Linux packages.
include(CPack)
",3.10,3.1
23380,JACoders,OpenJK,False,False,False,False,False,63,C++,2020-05-06 16:24:21+00:00,2013-04-04 09:12:04+00:00,1429,3645,"#============================================================================
# Copyright (C) 2013 - 2018, OpenJK contributors
# 
# This file is part of the OpenJK source code.
# 
# OpenJK is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#============================================================================

cmake_minimum_required(VERSION 3.1)
set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.9"" CACHE STRING ""Minimum OS X deployment version"")

# For checks in subdirectories
set(InOpenJK TRUE)



# Project name
set(ProjectName ""OpenJK"" CACHE STRING ""Project Name"")
project(${ProjectName})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})



# Customizable options
option(BuildPortableVersion ""Build portable version (does not read or write files from your user/home directory"" OFF)

option(BuildMPEngine ""Whether to create projects for the MP client (openjk.exe)"" ON)
option(BuildMPRdVanilla ""Whether to create projects for the MP default renderer (rd-vanilla_x86.dll)"" ON)
option(BuildMPDed ""Whether to create projects for the MP dedicated server (openjkded.exe)"" ON)
option(BuildMPGame ""Whether to create projects for the MP server-side gamecode (jampgamex86.dll)"" ON)
option(BuildMPCGame ""Whether to create projects for the MP clientside gamecode (cgamex86.dll)"" ON)
option(BuildMPUI ""Whether to create projects for the MP UI code (uix86.dll)"" ON)
option(BuildSPEngine ""Whether to create projects for the SP engine (openjk_sp.exe)"" ON)
option(BuildSPGame ""Whether to create projects for the SP gamecode (jagamex86.dll)"" ON)
option(BuildSPRdVanilla ""Whether to create projects for the SP default renderer (rdsp-vanilla_x86.dll)"" ON)

option(BuildJK2SPEngine ""Whether to create projects for the jk2 SP engine (openjo_sp.exe)"" OFF)
option(BuildJK2SPGame ""Whether to create projects for the jk2 sp gamecode mod (jk2gamex86.dll)"" OFF)
option(BuildJK2SPRdVanilla ""Whether to create projects for the jk2 sp renderer (rdjosp-vanilla_x86.dll)"" OFF)

option(BuildTests ""Whether to build automatic unit tests (requires Boost)"" OFF)

Include(CMakeDependentOption)
CMAKE_DEPENDENT_OPTION(BuildSymbolServer ""Build WIP Windows Symbol Server (experimental and unused)"" OFF ""NOT WIN32 OR NOT MSVC"" OFF)

# Configure the use of bundled libraries.  By default, we assume the user is on
# a platform that does not require any bundling.
#
# Note that we always use the bundled copy of minizip, since it is modified to
# use Z_Malloc.

set(UseInternalOpenALDefault OFF)
set(UseInternalZlibDefault   OFF)
set(UseInternalPNGDefault    OFF)
set(UseInternalJPEGDefault   OFF)
set(UseInternalSDL2Default   OFF)

if(WIN32)
  set(UseInternalOpenALDefault ON)
  set(UseInternalZlibDefault   ON)
  set(UseInternalPNGDefault    ON)
  set(UseInternalJPEGDefault   ON)
  set(UseInternalSDL2Default   ON)
endif()

if(APPLE)
  set(UseInternalJPEGDefault ON)
endif()

if(CMAKE_SYSTEM_NAME MATCHES ""BSD"")
  add_definitions(-DIOAPI_NO_64)
endif()

option(UseInternalOpenAL ""If set, use bundled OpenAL.""  ${UseInternalOpenALDefault})
option(UseInternalZlib   ""If set, use bundled zlib.""    ${UseInternalZlibDefault})
option(UseInternalPNG    ""If set, use bundled libpng.""  ${UseInternalPNGDefault})
option(UseInternalJPEG   ""If set, use bundled libjpeg."" ${UseInternalJPEGDefault})
option(UseInternalSDL2   ""If set, use bundled SDL2.""    ${UseInternalSDL2Default})

# This option won't appear on non-Apple platforms.
if(APPLE)
  option(MakeApplicationBundles ""Whether to build .app application bundles for engines built"" ON)
endif()

# Custom CMake Modules needed
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_SOURCE_DIR}/CMakeModules"")

Include(CheckTypeSize)
check_type_size(""void*"" CMAKE_SIZEOF_VOID_P)



# ${Architecture} must match ARCH_STRING in q_platform.h,
# and is used in DLL names (jagamex86.dll, jagamex86.dylib, jagamei386.so).
if(WIN32)
	set(X86 ON)
	if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
		set(Architecture ""x86_64"")
		set(WIN64 TRUE)
	else()
		set(Architecture ""x86"")
		set(WIN64 FALSE)
	endif()
else()
	set(X86 OFF)
	if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^arm"")
		set(Architecture ""arm"")
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i.86$"")
		set(X86 ON)
		if(APPLE)
			set(Architecture ""x86"")
		else()
			# e.g. Linux
			set(Architecture ""i386"")
		endif()
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^x86.64$"")
		set(X86 ON)
		set(Architecture ""x86_64"")
	elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ""powerpc"")
		set(Architecture ""ppc"")
	elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ""powerpc64"")
		set(Architecture ""ppc64"")
	else()
		set(Architecture ""${CMAKE_SYSTEM_PROCESSOR}"")
	endif()
endif()

message(STATUS ""Architecture is ${Architecture}"")

if(WIN32 AND CMAKE_VERSION VERSION_LESS ""3.4"")
message(WARNING ""Building on Windows platform with CMake version less than 3.4 is deprecated. Manifest file will fail to be included."")
endif()

# Current Git SHA1 hash
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
message(STATUS ""Git revision is ${GIT_SHA1}"")



# Binary names
set(SPEngine ""openjk_sp.${Architecture}"")
set(SPGame ""jagame${Architecture}"")
set(SPRDVanillaRenderer ""rdsp-vanilla_${Architecture}"")
set(MPEngine ""openjk.${Architecture}"")
set(MPVanillaRenderer ""rd-vanilla_${Architecture}"")
set(MPDed ""openjkded.${Architecture}"")
set(MPGame ""jampgame${Architecture}"")
set(MPCGame ""cgame${Architecture}"")
set(MPUI ""ui${Architecture}"")
set(JK2SPEngine ""openjo_sp.${Architecture}"")
set(JK2SPGame ""jospgame${Architecture}"")
set(JK2SPVanillaRenderer ""rdjosp-vanilla_${Architecture}"")
set(AssetsPk3 ""openjk-${Architecture}.pk3"")
# Library names
set(MPBotLib ""botlib"")
set(SharedLib ""shared"")



# Paths
set(SPDir ""${CMAKE_SOURCE_DIR}/code"")
set(MPDir ""${CMAKE_SOURCE_DIR}/codemp"")
set(JK2SPDir ""${CMAKE_SOURCE_DIR}/codeJK2"")
set(SharedDir ${CMAKE_SOURCE_DIR}/shared)
set(OpenJKLibDir ""${CMAKE_SOURCE_DIR}/lib"")
set(GSLIncludeDirectory ""${OpenJKLibDir}/gsl-lite/include"")

include(InstallConfig)



# Operating settings
if(WIN64)
	set(SharedDefines ${SharedDefines} ""WIN64"")
endif()

if (APPLE)
	set(SharedDefines ""MACOS_X"")
endif()

if (NOT WIN32 AND NOT APPLE)
	set(SharedDefines ""ARCH_STRING=\""${Architecture}\"""")
endif()



# Compiler settings
if(MSVC)

	set(SharedDefines ${SharedDefines} ""NOMINMAX"")
	set(SharedDefines ${SharedDefines} ""_CRT_SECURE_NO_WARNINGS"")
	set(SharedDefines ${SharedDefines} ""_SCL_SECURE_NO_WARNINGS"")
	set(SharedDefines ${SharedDefines} ""_CRT_NONSTDC_NO_DEPRECATE"")

	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /arch:SSE2"")
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /MP"")

	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:SSE2"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")

	# We don't try to control symbol visibility under MSVC.
	set(OPENJK_VISIBILITY_FLAGS """")

elseif ((""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"") OR (""${CMAKE_C_COMPILER_ID}"" MATCHES ""Clang""))
	# I hope this doesn't come back to bite me in the butt later on.
	# Realistically though, can the C and CXX compilers be different?

	# Visibility can't be set project-wide -- it needs to be specified on a
	# per-target basis.  This is primarily due to the bundled copy of ZLib.
	# ZLib explicitly declares symbols hidden, rather than defaulting to hidden.
	#
	# Note that -fvisibility=hidden is stronger than -fvisibility-inlines-hidden.
	set(OPENJK_VISIBILITY_FLAGS ""-fvisibility=hidden"")

	# removes the -rdynamic flag at linking (which causes crashes for some reason)
	set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS """")
	set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """")

	# additional flags for debug configuration
	set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -ggdb"")
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -ggdb"")

	if (X86)
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -msse2"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2"")
	endif()

	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -O3"")
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3"")

	# enable somewhat modern C++
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
	
	if(""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-comment"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsigned-char"")
		if (X86)
			# ""x86 vm will crash without -mstackrealign since MMX
			# instructions will be used no matter what and they
			# corrupt the frame pointer in VM calls""
			# -ioquake3 Makefile
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -mstackrealign"")
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -mfpmath=sse"")
		endif()

		if(WIN32)
			# Link libgcc and libstdc++ statically
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -static-libgcc"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libgcc"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++"")
		endif()
	elseif(""${CMAKE_C_COMPILER_ID}"" MATCHES ""Clang"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-comment"")
	endif()

	if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-write-strings"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-comment"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsigned-char"")
		if (X86)
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mstackrealign"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mfpmath=sse"")
		endif()
	elseif(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-write-strings"")
		#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-deprecated-writable-strings"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-comment"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof"")
	endif()
else()
	message(ERROR ""Unsupported compiler"")
endif()

if (NOT CMAKE_BUILD_TYPE)
	message(STATUS ""No build type selected, default to RELEASE"")
	set(CMAKE_BUILD_TYPE ""RELEASE"")
endif()

if(CMAKE_BUILD_TYPE MATCHES ""DEBUG"" OR CMAKE_BUILD_TYPE MATCHES ""Debug"")
	# CMake already defines _DEBUG for MSVC.
	if (NOT MSVC)
		set(SharedDefines ${SharedDefines} ""_DEBUG"")
	endif()
else()
	set(SharedDefines ${SharedDefines} ""FINAL_BUILD"")
endif()



# Settings
if(BuildPortableVersion)
	set(SharedDefines ${SharedDefines} ""_PORTABLE_VERSION"")
endif()

# https://reproducible-builds.org/specs/source-date-epoch/
if (NOT (""$ENV{SOURCE_DATE_EPOCH}"" STREQUAL """"))
	execute_process(COMMAND ""date""
		""--date=@$ENV{SOURCE_DATE_EPOCH}"" ""+%b %_d %Y""
		OUTPUT_VARIABLE source_date
		ERROR_QUIET
		OUTPUT_STRIP_TRAILING_WHITESPACE)
	set(SharedDefines ${SharedDefines} ""SOURCE_DATE=\""${source_date}\"""")
endif()



# Files shared across all projects
set(SharedCommonFiles
	""${SharedDir}/qcommon/q_color.h""
	""${SharedDir}/qcommon/q_color.c""
	""${SharedDir}/qcommon/q_math.h""
	""${SharedDir}/qcommon/q_math.c""
	""${SharedDir}/qcommon/q_string.h""
	""${SharedDir}/qcommon/q_string.c""
	""${SharedDir}/qcommon/q_platform.h""
	)
set(SharedCommonSafeFiles
	""${SharedDir}/qcommon/safe/gsl.h""
	""${SharedDir}/qcommon/safe/string.cpp""
	""${SharedDir}/qcommon/safe/string.h""
	""${SharedDir}/qcommon/safe/sscanf.h""
	""${SharedDir}/qcommon/safe/limited_vector.h""
	)


if(UseInternalJPEG)
  add_subdirectory(lib/jpeg-9a)
else()
  find_package(JPEG REQUIRED)
endif()

if(UseInternalZlib)
  add_subdirectory(lib/zlib)
else()
  find_package(ZLIB REQUIRED)
endif()

if(UseInternalPNG)
  add_subdirectory(lib/libpng)
else()
  find_package(PNG REQUIRED)
endif()

# Always use bundled minizip (sets MINIZIP_{LIBRARIES,INCLUDE_DIR})
add_subdirectory(lib/minizip)

# Add projects
add_subdirectory(${SPDir})
if(BuildJK2SPGame)
	add_subdirectory(""${JK2SPDir}/game"")
endif()
add_subdirectory(${MPDir})
# Windows Symbol Server tools
if(BuildSymbolServer)
	add_subdirectory(""tools/WinSymbol"")
endif()
if(BuildTests)
	enable_testing()
	add_subdirectory(""tests"")
endif()
",3.1,3.1
23514,odamex,odamex,False,False,False,False,False,19,C++,2020-05-17 20:18:17+00:00,2015-03-11 19:20:36+00:00,51,5633,"# use unquoted #defines
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0005 NEW)
endif(COMMAND cmake_policy)

include(CMakeDependentOption)

# CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_DATADIR will be changed if GNUInstallDirs is availible
set(CMAKE_INSTALL_BINDIR ""bin"")
set(CMAKE_INSTALL_DATADIR ""share"")
include(GNUInstallDirs OPTIONAL)

add_definitions(-DINSTALL_BINDIR=""${CMAKE_INSTALL_BINDIR}"")
add_definitions(-DINSTALL_DATADIR=""${CMAKE_INSTALL_DATADIR}"")

# options
option(BUILD_CLIENT ""Build client target"" 1)
option(BUILD_SERVER ""Build server target"" 1)
option(BUILD_MASTER ""Build master server target"" 1)
option(BUILD_ODALAUNCH ""Build odalaunch target"" 1)
cmake_dependent_option( ENABLE_PORTMIDI ""Enable portmidi support"" 1 BUILD_CLIENT 0 )
cmake_dependent_option( USE_MINIUPNP ""Build with UPnP support"" 1 BUILD_SERVER 0 )

project(Odamex)
cmake_minimum_required(VERSION 3.1)

set(PROJECT_VERSION 0.8.3)
set(PROJECT_COPYRIGHT ""2006-2020"")

# Use C++ 98/03 for all targets
set(CMAKE_CXX_STANDARD 98)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# identify the target CPU
# adapted from the FindJNI.cmake module included with the CMake distribution
if(CMAKE_SYSTEM_PROCESSOR STREQUAL ""x86_64"")
  set(target_arch ""amd64"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i[3-9]86$"")
  set(target_arch ""i386"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^alpha"")
  set(target_arch ""alpha"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^arm"")
  set(target_arch ""arm"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)64"")
  set(target_arch ""ppc64"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)"")
  set(target_arch ""ppc"")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^sparc"")
  # Both flavors can run on the same processor
  set(target_arch ""${CMAKE_SYSTEM_PROCESSOR}"" ""sparc"" ""sparcv9"")
else()
  set(target_arch ""${CMAKE_SYSTEM_PROCESSOR}"")
endif()

list(REMOVE_DUPLICATES target_arch)
message(""Using target architecture "" ${target_arch})

# Default build type
if(NOT MSVC)
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
      ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.""
      FORCE)
  endif()
endif()

# Global compile options as shown in a GUI.
if(NOT MSVC)
  set(USE_STATIC_STDLIB ""No"" CACHE STRING
    ""Statically link against the C and C++ Standard Library."")
  set_property(CACHE USE_STATIC_STDLIB PROPERTY STRINGS Yes No)

  set(USE_SANITIZE_ADDRESS ""No"" CACHE STRING
    ""Turn on Address Sanitizer in Debug builds, requires GCC >= 4.8 or Clang >= 3.1"")
  set_property(CACHE USE_SANITIZE_ADDRESS PROPERTY STRINGS Yes No)
endif()

# Global compile options.  Useful defines for any Odamex project.
macro(global_compile_options)
  if(NOT MSVC)
    set(GLOBAL_CXX_FLAGS ""-Wall"")
	if(USE_GPROF)
	  set(GLOBAL_CXX_FLAGS ""${GLOBAL_CXX_FLAGS} -p"")
	endif()

    set(CMAKE_CXX_FLAGS_DEBUG ""${GLOBAL_CXX_FLAGS} -g"")
    set(CMAKE_CXX_FLAGS_RELEASE ""${GLOBAL_CXX_FLAGS} -DNDEBUG"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${GLOBAL_CXX_FLAGS} -g -DNDEBUG -O2"")
    set(CMAKE_CXX_FLAGS_MINSIZEREL ""${GLOBAL_CXX_FLAGS} -DNDEBUG -Os"")

    if(USE_STATIC_STDLIB)
      set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++"")
    endif()
    if(USE_SANITIZE_ADDRESS)
      set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls"")
    endif()
    if(${CMAKE_BUILD_TYPE} STREQUAL ""Debug"")
      add_definitions(-DODAMEX_DEBUG)
	endif()
  endif()
endmacro(global_compile_options)

# Output the G++ CXX flags
macro(print_cxx_flags)
  if(NOT MSVC)
    if(${CMAKE_BUILD_TYPE} STREQUAL ""Debug"")
      message(STATUS ""CXX Flags: ${CMAKE_CXX_FLAGS_DEBUG}"")
    elseif(${CMAKE_BUILD_TYPE} STREQUAL ""Release"")
      message(STATUS ""CXX Flags: ${CMAKE_CXX_FLAGS_RELEASE}"")
    elseif(${CMAKE_BUILD_TYPE} STREQUAL ""RelWithDebInfo"")
      message(STATUS ""CXX Flags: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
    elseif(${CMAKE_BUILD_TYPE} STREQUAL ""MinSizeRel"")
      message(STATUS ""CXX Flags: ${CMAKE_CXX_FLAGS_MINSIZEREL}"")
    endif()
  endif()
endmacro(print_cxx_flags)

# jsd: hide warnings about using insecure crt functions:
if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES SunOS )
  set(SOLARIS 1)
endif()

# Platform definitions
# [AM] TODO: Eliminate redundant defines
macro(define_platform)
  if(APPLE)
    add_definitions(-DOSX -DUNIX )
  elseif(SOLARIS)
    add_definitions(-DSOLARIS -DUNIX -DBSD_COMP -gstabs+)
  elseif(UNIX)
    add_definitions(-DUNIX)
    find_package(X11)
    if(X11_FOUND)
      add_definitions(-DX11)
      INCLUDE_DIRECTORIES ( ${X11_INCLUDE_DIR} )
      LINK_LIBRARIES ( ${X11_LIBRARIES} )
      MESSAGE ( STATUS "" X11_INCLUDE_DIR: "" ${X11_INCLUDE_DIR} )
      MESSAGE ( STATUS "" X11_LIBRARIES: "" ${X11_LIBRARIES} )
    endif()
  endif()
endmacro(define_platform)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

# git describe
include(GetGitRevisionDescription)
git_describe(GIT_DESCRIBE --tags --always)

# MiniUPnPc
if (USE_MINIUPNP)
  set(UPNPC_BUILD_STATIC ON CACHE INTERNAL """" FORCE)
  set(UPNPC_BUILD_SHARED OFF CACHE INTERNAL """" FORCE)
  set(UPNPC_BUILD_TESTS OFF CACHE INTERNAL """" FORCE)
  set(UPNPC_INSTALL OFF CACHE INTERNAL """" FORCE)
  mark_as_advanced(FORCE UPNPC_INSTALL)
  add_subdirectory(libraries/libminiupnpc)
endif()

# Subdirectories for Odamex projects
if(BUILD_CLIENT)
	add_subdirectory(client)
endif()
if(BUILD_SERVER)
	add_subdirectory(server)
endif()
if(BUILD_MASTER)
	add_subdirectory(master)
endif()
if(BUILD_ODALAUNCH)
	add_subdirectory(odalaunch)
endif()
if(NOT BUILD_CLIENT AND NOT BUILD_SERVER AND NOT BUILD_MASTER)
	message(FATAL_ERROR ""No target chosen, doing nothing."")
endif()

# Disable the ag-odalaunch target completely: -DNO_AG-ODALAUNCH_TARGET
# This is only really useful when setting up a universal build.
if(NOT NO_AG-ODALAUNCH_TARGET)
  add_subdirectory(ag-odalaunch)
endif()

# Packaging options.
# TODO: Integrate OSX stuff into here.
if(NOT APPLE)
  set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
  set(CPACK_PACKAGE_INSTALL_DIRECTORY Odamex)
  set(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/LICENSE)

  set(CPACK_COMPONENTS_ALL client server odalaunch common)
  set(CPACK_COMPONENT_CLIENT_DEPENDS common)
  set(CPACK_COMPONENT_CLIENT_DISPLAY_NAME ""Odamex"")
  set(CPACK_COMPONENT_SERVER_DEPENDS common)
  set(CPACK_COMPONENT_SERVER_DISPLAY_NAME ""Odamex Dedicated Server"")
  set(CPACK_COMPONENT_ODALAUNCH_DEPENDS client)
  set(CPACK_COMPONENT_ODALAUNCH_DISPLAY_NAME ""Odalaunch Odamex Server Browser and Launcher"")
  set(CPACK_COMPONENT_COMMON_DISPLAY_NAME ""Support files"")

  add_subdirectory(wad)

  file(GLOB CONFIG_SAMPLES config-samples/*.cfg)
  if(WIN32)
    install(FILES LICENSE README
      DESTINATION .
      COMPONENT common)
    install(FILES ${CONFIG_SAMPLES}
      DESTINATION config-samples
      COMPONENT common)

    # Windows ZIP packages are ""tarbombs"" by default.
    set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
  else()
    install(FILES LICENSE README
      DESTINATION ${CMAKE_INSTALL_DATADIR}/odamex
      COMPONENT common)
    install(FILES ${CONFIG_SAMPLES}
      DESTINATION ${CMAKE_INSTALL_DATADIR}/odamex/config-samples
      COMPONENT common)

    option(ODAMEX_COMPONENT_PACKAGES ""Create several rpm/deb packages for repository maintainers."" OFF)
    if(ODAMEX_COMPONENT_PACKAGES)
      set(CPACK_RPM_COMPONENT_INSTALL YES)
      # TODO: RPM Dependencies

      set(CPACK_DEB_COMPONENT_INSTALL YES)
      # TODO: DEB Dependencies
    else()
      # TODO: RPM Dependencies

      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libc6, libstdc++6, libsdl1.2debian, libsdl-mixer1.2, libwxbase2.8-0, libwxgtk2.8-0"")
      set(CPACK_DEBIAN_PACKAGE_SUGGESTS ""boom-wad | doom-wad, libportmidi0"")
    endif()

    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""A free, cross-platform modification of the Doom engine that allows players to easily join servers dedicated to playing Doom online."")
    set(CPACK_PACKAGE_VENDOR ""Odamex Development Team"")
    set(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})

    set(CPACK_RPM_PACKAGE_LICENSE ""GPLv2+"")

    set(CPACK_DEBIAN_PACKAGE_HOMEPAGE ""https://odamex.net"")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""Alex Mayfield <alexmax2742@gmail.com>"")
    set(CPACK_DEBIAN_PACKAGE_SECTION Games)
  endif()
endif()

include(CPack)
",3.1,3.1
23577,CCPPETMR,SIRF-SuperBuild,False,False,False,False,False,12,CMake,2020-05-15 12:26:58+00:00,2017-01-19 17:17:53+00:00,7,975,"#========================================================================
# Author: Benjamin A Thomas
# Author: Kris Thielemans
# Copyright 2017, 2020 University College London
#
# This file is part of the CCP SyneRBI (formerly PETMR) Synergistic Image Reconstruction Framework (SIRF) SuperBuild.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#=========================================================================
if (WIN32)
  cmake_minimum_required( VERSION 3.10.0 FATAL_ERROR)
else()
  cmake_minimum_required( VERSION 3.10.0 FATAL_ERROR)
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/CMake"" ${CMAKE_MODULE_PATH})
include(ExternalProject)
include(ExternalProjectDependency)

set(PRIMARY_PROJECT_NAME SyneRBI)
option(${PRIMARY_PROJECT_NAME}_SUPERBUILD ""Build ${PRIMARY_PROJECT_NAME} and the projects it depends on via SuperBuild.cmake."" ON)

if(${PRIMARY_PROJECT_NAME}_SUPERBUILD)

    project(SuperBuild_${PRIMARY_PROJECT_NAME})
    include(""${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild.cmake"")
    return()
else()
    project(${PRIMARY_PROJECT_NAME})
    include(""${CMAKE_CURRENT_SOURCE_DIR}/${PRIMARY_PROJECT_NAME}.cmake"")
    return()
endif()

message(FATAL_ERROR ""Something has gone horribly wrong!"")
",3.10.0,3.1
23641,thomasmoelhave,tpie,False,False,False,False,False,18,C++,2020-05-13 11:14:28+00:00,2010-01-10 20:16:54+00:00,87,5079,"# doc/CMakeLists.txt uses configure_file behavior from CMake 2.8
cmake_minimum_required(VERSION 3.1)

project(tpie)


#### CONFIG.H Checks:
include(CheckIncludeFiles)

set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/"")
#### Dependencies
## Boost
set(Boost_ADDITIONAL_VERSIONS ""1.40.0"" ""1.40"" ""1.41"" ""1.41.0"" ""1.42"" ""1.42.0"" ""1.43"" ""1.43.0"" ""1.44"" ""1.44.0"" ""1.45"" ""1.45.0"")
set(Boost_USE_MULTITHREADED ON)
if(WIN32)
	set(Boost_USE_STATIC_LIBS    ON)
endif(WIN32)
find_package(Boost COMPONENTS date_time filesystem system REQUIRED)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if(TPIE_FRACTIONDB_DIR_INL) 
  include_directories(${TPIE_FRACTIONDB_DIR_INL})
endif(TPIE_FRACTIONDB_DIR_INL)

check_include_files(""unistd.h"" TPIE_HAVE_UNISTD_H)
check_include_files(""sys/unistd.h"" TPIE_HAVE_SYS_UNISTD_H)

# Ryan Pavlik's Git revision description helper
# http://stackoverflow.com/a/4318642
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_COMMIT)

## Snappy
option(TPIE_USE_SNAPPY ""Use Snappy, a fast compressor/decompressor"" ON)
if(TPIE_USE_SNAPPY)
	find_package(Snappy)
	if(${SNAPPY_FOUND})
		message(STATUS ""Snappy found"")
		set(TPIE_HAS_SNAPPY ON)
	else(${SNAPPY_FOUND})
		message(WARNING ""Snappy NOT found, TPIE will NOT compress intermediate sort streams"")
		set(TPIE_HAS_SNAPPY OFF)
	endif(${SNAPPY_FOUND})
endif(TPIE_USE_SNAPPY)

## LZ4
option(TPIE_USE_LZ4 ""Use LZ4, Extremely Fast Compression algorithm"" ON)
if(TPIE_USE_LZ4)
	find_package(LZ4)
	if(${LZ4_FOUND})
		set(TPIE_HAS_LZ4 ON)
	else(${LZ4_FOUND})
		set(TPIE_HAS_LZ4 OFF)
	endif(${LZ4_FOUND})
endif(TPIE_USE_LZ4)


## ZSTD
option(TPIE_USE_ZSTD ""Use ZSTD, Compression algorithm"" ON)
if(TPIE_USE_ZSTD)
	find_package(ZSTD)
	if(${ZSTD_FOUND})
		set(TPIE_HAS_ZSTD ON)
	else(${ZSTD_FOUND})
		set(TPIE_HAS_ZSTD OFF)
	endif(${ZSTD_FOUND})
endif(TPIE_USE_ZSTD)


option(TPIE_SHARED ""Build tpie as a shared library"" OFF)

#### Installation paths
#Default paths
set(BIN_INSTALL_DIR bin)
set(LIB_INSTALL_DIR lib)
set(HEADERS_INSTALL_DIR include/tpie)
if (WIN32)
	set(DOC_INSTALL_DIR doc)
else(WIN32)
	set(DOC_INSTALL_DIR ""share/doc/tpie"")
endif(WIN32)

set(INSTALL_TARGETS_DEFAULT_ARGS
	RUNTIME DESTINATION ${BIN_INSTALL_DIR}
	LIBRARY DESTINATION ${LIB_INSTALL_DIR}
	ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
)

if (CMAKE_BUILD_TYPE) 
  string(TOUPPER ${CMAKE_BUILD_TYPE} bt)
  string(REGEX MATCH "" -DNDEBUG "" TPIE_NDEBUG "" ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${bt}} "")
else()
  option(TPIE_NDEBUG ""Disable debugging information"" ON)
endif()

set(TPIE_S ${CMAKE_CURRENT_SOURCE_DIR})
set(TPIE_B ${CMAKE_CURRENT_BINARY_DIR})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/tpie/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/tpie/config.h)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/tpie/config.h DESTINATION ${HEADERS_INSTALL_DIR})
add_subdirectory(tpie)

add_subdirectory(doc)

option(COMPILE_TEST ""Compile test programs"" ON)
option(TPL_LOGGING ""Enable tpie logging."" ON)
option(TPIE_DEPRECATED_WARNINGS ""Enable warnings for deprecated classes, methods and typedefs"" OFF)
option(TPIE_PARALLEL_SORT ""Enable parallel quick sort implementation"" ON)

if (COMPILE_TEST)
	ENABLE_TESTING()
	add_subdirectory(test)
	add_subdirectory(apps)
endif (COMPILE_TEST)

include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_CONTACT ""rav@cs.au.dk"")
set(CPACK_GENERATOR TGZ)

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""TPIE"")
set(CPACK_PACKAGE_VENDOR ""The TPIE maintainers"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/COPYING.md"")
set(CPACK_PACKAGE_VERSION_MAJOR ""1"")
set(CPACK_PACKAGE_VERSION_MINOR ""1"")
set(CPACK_PACKAGE_VERSION_PATCH ""0"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""TPIE ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}"")
if(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  #set(CPACK_PACKAGE_ICON ""${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp"")
  set(CPACK_NSIS_DISPLAY_NAME ""${CPACK_PACKAGE_INSTALL_DIRECTORY} ${CPACK_PACKAGE_DESCRIPTION_SUMMARY}"")
  set(CPACK_NSIS_HELP_LINK ""http:\\\\\\\\thomasmoelhave.github.com/tpie/"")
  set(CPACK_NSIS_URL_INFO_ABOUT ""http:\\\\\\\\thomasmoelhave.github.com/tpie/"")
  set(CPACK_NSIS_CONTACT ${CPACK_PACKAGE_CONTACT})
  set(CPACK_NSIS_MODIFY_PATH ON)
  list(APPEND CPACK_GENERATOR NSIS)
else(WIN32 AND NOT UNIX)
  list(APPEND CPACK_GENERATOR DEB)
endif(WIN32 AND NOT UNIX)

install(DIRECTORY tpie
	DESTINATION include
	FILES_MATCHING REGEX ""\\.h$|\\.inl$""
	PATTERN ""deadcode"" EXCLUDE)

install(DIRECTORY share/tpie
	DESTINATION share)

include(CPack)
",3.1,3.1
23776,acmepjz,meandmyshadow,False,False,False,False,False,27,C++,2020-02-23 09:33:13+00:00,2016-02-16 16:38:03+00:00,13,1752,"Project (meandmyshadow)
CMake_Minimum_Required (VERSION 3.1)
Set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

#Path options
Set (BINDIR ""bin"" CACHE STRING ""Where to install binaries"")
Set (DATAROOTDIR ""${CMAKE_INSTALL_PREFIX}/share"" CACHE STRING ""Sets the root of data directories to a non-default location"")
Set (ICONDIR ""${DATAROOTDIR}/icons"" CACHE STRING ""Sets the icon directory for desktop entry to a non-default location."")
Set (DESKTOPDIR ""${DATAROOTDIR}/applications"" CACHE STRING ""Sets the desktop file directory for desktop entry to a non-default location."")

#Options
Option (DEBUG_MODE ""Compile the game with debug mode enabled"" OFF)
Option (DISABLED_DEBUG_STUFF ""Enable this you'll see a lot of annoying script debug messages which will lag the game."" OFF)

#Find the required libraries.
Find_Package (SDL2 REQUIRED)
Find_Package (SDL2_image REQUIRED)
Find_Package (Freetype REQUIRED)
Find_Package (SDL2_mixer REQUIRED)
Find_Package (CURL REQUIRED)
Find_Package (LibArchive REQUIRED)
Find_Package (Lua 5.3 REQUIRED)

if (NOT SDL2_FOUND)
	message (FATAL_ERROR ""SDL2 library could not be found!"")
endif (NOT SDL2_FOUND)

if (NOT SDL2_IMAGE_FOUND)
	message (FATAL_ERROR ""SDL2_image library could not be found!"")
endif (NOT SDL2_IMAGE_FOUND)

if (NOT FREETYPE_FOUND)
	message (FATAL_ERROR ""Freetype library could not be found!"")
endif (NOT FREETYPE_FOUND)

if (NOT SDL2_MIXER_FOUND)
	message (FATAL_ERROR ""SDL2_mixer library could not be found!"")
endif (NOT SDL2_MIXER_FOUND)

if (NOT CURL_FOUND)
	message(FATAL_ERROR ""CURL library could not be found!"")
endif (NOT CURL_FOUND)

if (NOT LibArchive_FOUND)
	message (FATAL_ERROR ""LibArchive library could not be found!"")
endif (NOT LibArchive_FOUND)

if (NOT LUA_FOUND)
	message (FATAL_ERROR ""Lua library could not be found!"")
endif (NOT LUA_FOUND)

if (LUA_VERSION_STRING VERSION_LESS ""5.3"")
	message (FATAL_ERROR ""Lua version too old ${LUA_VERSION_STRING}, expected at least 5.3!"")
endif ()

# check version from Globals.h
file(READ ""${PROJECT_SOURCE_DIR}/src/Globals.h"" GLOBALS_H)
string(REGEX MATCH ""version[ ]*=[ ]*\""[^\""]*\"""" MNMS_VERSION_STR ${GLOBALS_H})
string(REGEX REPLACE ""^[^\""]*\""([^\""]*)\"".*$"" ""\\1"" MNMS_VERSION_STR ${MNMS_VERSION_STR})
message(STATUS ""The version read from Globals.h is: ${MNMS_VERSION_STR}"")

string(REGEX REPLACE ""^V([0-9.]+).*$"" ""\\1"" MNMS_VERSION_NUM ${MNMS_VERSION_STR})
set(MNMS_VERSION_NUM ""${MNMS_VERSION_NUM}.0.0.0.0"")
string(REGEX REPLACE ""^([0-9]+)[.]([0-9]+)[.]([0-9]+)[.]([0-9]+).*$"" ""\\1,\\2,\\3,\\4"" MNMS_VERSION_NUM ${MNMS_VERSION_NUM})
message(STATUS ""which is: ${MNMS_VERSION_NUM}"")

# check version from git
find_package(Git)
if(GIT_FOUND)
	exec_program(${GIT_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR} ARGS ""describe --tags""
		OUTPUT_VARIABLE MNMS_GIT_VERSION RETURN_VALUE GIT_RETURN_VALUE)
	if(GIT_RETURN_VALUE STREQUAL ""0"")
		set(MNMS_VERSION_STR ""${MNMS_VERSION_STR} (${MNMS_GIT_VERSION})"")
		message(STATUS ""The version read from git is: ${MNMS_GIT_VERSION}"")
	else()
		# possibly there are no any tags
		exec_program(${GIT_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR} ARGS ""rev-parse --short HEAD""
			OUTPUT_VARIABLE MNMS_GIT_VERSION RETURN_VALUE GIT_RETURN_VALUE)
		if(GIT_RETURN_VALUE STREQUAL ""0"")
			set(MNMS_VERSION_STR ""${MNMS_VERSION_STR} (git ${MNMS_GIT_VERSION})"")
			message(STATUS ""The version read from git is: ${MNMS_GIT_VERSION}"")
		endif()
	endif()
endif()

# show version information on Windows
Set(WIN32_RESOURCES )
if(WIN32)
	Configure_File (
		""${PROJECT_SOURCE_DIR}/icons/windows-icon/res.rc.in""
		""${PROJECT_BINARY_DIR}/res.rc""
	)
	Set(WIN32_RESOURCES ${PROJECT_BINARY_DIR}/res.rc)
	Include_Directories(${PROJECT_SOURCE_DIR}/icons/windows-icon/)
	SOURCE_GROUP(""Source Files\\Resources"" FILES ${WIN32_RESOURCES})
endif()

#Parse the configure file.
Configure_File (
	""${PROJECT_SOURCE_DIR}/src/config.h.in""
	""${PROJECT_BINARY_DIR}/config.h""
)

#Add some missing libraries to Windows.
if(WIN32)
	include_directories(${PROJECT_SOURCE_DIR}/src/libs/dirent)
endif(WIN32)

#Disable some annoying warnings.
if(MSVC)
	# warning C4996: '***': This function or variable may be unsafe
	add_definitions(/wd4996)

	# force the source code encoding to UTF-8 (which is available since VC2015)
	if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.0))
		add_definitions(-utf-8)
	endif()
else()
	# Assume it's gcc or clang
	# warning: '***' overrides a member function but is not marked 'override'
	add_definitions(-Wno-inconsistent-missing-override)
endif()

#Define some debug stuff.
if(DEBUG_MODE)
	add_definitions(-DDEBUG)
	add_definitions(-D_DEBUG)
endif(DEBUG_MODE)
if(DISABLED_DEBUG_STUFF)
	add_definitions(-DDISABLED_DEBUG_STUFF)
endif(DISABLED_DEBUG_STUFF)

#Add the include directories of the (found) libraries.
Include_Directories(
	${PROJECT_BINARY_DIR}
	${PROJECT_SOURCE_DIR}/src/libs
	${PROJECT_SOURCE_DIR}/src/libs/SDL2_ttf
	${SDL2_INCLUDE_DIR}
	${SDL2_IMAGE_INCLUDE_DIR}
	${FREETYPE_INCLUDE_DIRS}
	${SDL2_MIXER_INCLUDE_DIR}
	${CURL_INCLUDE_DIR}
	${LibArchive_INCLUDE_DIR}
	${LUA_INCLUDE_DIR}
)

#Set the output path and the source path.
Set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
Set (SRC_DIR ${PROJECT_SOURCE_DIR}/src)

#List the source files.
File (GLOB SOURCES ${SRC_DIR}/*.cpp)
File (GLOB TINYFORMAT ${SRC_DIR}/libs/tinyformat/*.cpp)
File (GLOB TINYGETTEXT ${SRC_DIR}/libs/tinygettext/*.cpp)
File (GLOB FINDLOCALE ${SRC_DIR}/libs/findlocale/*.cpp)
File (GLOB SDL2TTF ${SRC_DIR}/libs/SDL2_ttf/*.c)

#Always use SDL_iconv in tinygettext
add_definitions(-DHAVE_SDL)

SOURCE_GROUP(""Source Files\\tinyformat"" FILES ${TINYFORMAT})
SOURCE_GROUP(""Source Files\\tinygettext"" FILES ${TINYGETTEXT})
SOURCE_GROUP(""Source Files\\findlocale"" FILES ${FINDLOCALE})
SOURCE_GROUP(""Source Files\\SDL2_ttf"" FILES ${SDL2TTF})

Add_Executable (meandmyshadow ${SOURCES} ${TINYFORMAT} ${TINYGETTEXT} ${FINDLOCALE} ${WIN32_RESOURCES} ${SDL2TTF})

set_property(TARGET meandmyshadow PROPERTY CXX_STANDARD 11)

Target_Link_Libraries (
	meandmyshadow
	${SDL2_LIBRARY}
	${SDL2_IMAGE_LIBRARY}
	${FREETYPE_LIBRARIES}
	${SDL2_MIXER_LIBRARY}
	${SDL2MAIN_LIBRARY}
	${CURL_LIBRARY}
	${LibArchive_LIBRARY}
	${LUA_LIBRARIES}
)

#Install locations
Install (DIRECTORY ${PROJECT_SOURCE_DIR}/data DESTINATION ${DATAROOTDIR}/meandmyshadow/)
Install (FILES AUTHORS DESTINATION ${DATAROOTDIR}/meandmyshadow/)
Install (TARGETS meandmyshadow RUNTIME DESTINATION ${BINDIR})

if (""${CMAKE_SYSTEM_NAME}"" MATCHES ""Linux"")
	Install (FILES meandmyshadow.desktop DESTINATION ${DESKTOPDIR})
	Install (FILES icons/16x16/meandmyshadow.png DESTINATION ${ICONDIR}/hicolor/16x16/apps/)
	Install (FILES icons/32x32/meandmyshadow.png DESTINATION ${ICONDIR}/hicolor/32x32/apps/)
	Install (FILES icons/48x48/meandmyshadow.png DESTINATION ${ICONDIR}/hicolor/48x48/apps/)
	Install (FILES icons/64x64/meandmyshadow.png DESTINATION ${ICONDIR}/hicolor/64x64/apps/)
endif (""${CMAKE_SYSTEM_NAME}"" MATCHES ""Linux"")
",3.1,3.1
23959,gunrock,gunrock,False,False,False,False,False,35,Cuda,2020-05-12 20:56:40+00:00,2013-11-03 04:08:40+00:00,637,2721,"project(gunrock)

set(gunrock_VERSION_MAJOR 1)
set(gunrock_VERSION_MINOR 1)
set(gunrock_VERSION_PATCH 0)
add_definitions(""-DGUNROCKVERSION=${gunrock_VERSION_MAJOR}.${gunrock_VERSION_MINOR}.${gunrock_VERSION_PATCH}"")

cmake_minimum_required(VERSION 3.10)

# enable @rpath in the install name for any shared library being built
# note: it is planned that a future version of CMake will enable this by default
set(CMAKE_MACOSX_RPATH 1)

# begin /* Added make check target to improve ctest command */
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure)
# end /* Added make check target to improve ctest command */

# begin /* Dependencies directory */
set(PROJECT_DEPS_DIR externals)
# end /* Dependencies directory */

# begin /* Suppress all warnings from gcc */
option(ENABLE_WARNINGS ""Deprecated declarations warning flag."" OFF)
if (ENABLE_WARNINGS)
  # moderngpu will give auto_ptr warning.
else (ENABLE_WARNINGS)
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -w"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -w"")
  add_definitions (""-w"")
endif (ENABLE_WARNINGS)
# end /* Suppress all warnings from gcc */

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --std=c++11 -fPIC"")

option(CMAKE_VERBOSE_MAKEFILE OFF)

# begin /* Find and set CUDA arch */
set(gunrock_REQUIRED_CUDA_VERSION 9.0)
FIND_PACKAGE(CUDA ${gunrock_REQUIRED_CUDA_VERSION} REQUIRED)
# /* enables relocatable device code linking */
SET(CUDA_SEPARABLE_COMPILATION ON)
if(CUDA_64_BIT_DEVICE_CODE)
  set(gunrock_arch_suffix x86_64)
else()
  set(gunrock_arch_suffix i386)
endif()
# end /* Find and set CUDA arch */

# begin /* Include Boost, OpenMP & Metis */
include(${CMAKE_SOURCE_DIR}/cmake/FindBoostHeaders.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/FindBoost.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/FindOpenMP.cmake)
if (METIS_LIBRARY)
  include(${CMAKE_SOURCE_DIR}/cmake/FindMetis.cmake)
endif()
# end /* Include Boost, OpenMP & Metis */

# begin /* How can I pass git SHA1 to compiler as definition using cmake? */
# http://stackoverflow.com/questions/1435953/how-can-i-pass-git-sha1-to-compiler-as-definition-using-cmake/4318642#4318642
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/"")
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
# end /* How can I pass git SHA1 to compiler as definition using cmake? */

# begin /* Include gunrock directories ./ */
set(gunrock_INCLUDE_DIRS
  ${CMAKE_SOURCE_DIR})
include_directories(${gunrock_INCLUDE_DIRS})
# end /* Include gunrock directories ./ */

# begin /* Include moderngpu & cub */
include(${CMAKE_SOURCE_DIR}/cmake/FindRapidJson.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/FindModernGPU.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/FindCUB.cmake)
# end /* Include moderngpu & cub */

# begin /* Include googletest & googlemock */
option(GUNROCK_GOOGLE_TESTS ""Use Googletest as testing framework (default: OFF)."" OFF)

if (GUNROCK_GOOGLE_TESTS)
  include(${CMAKE_SOURCE_DIR}/cmake/FindGoogleTest.cmake)
endif (GUNROCK_GOOGLE_TESTS)
# end /* Include googletest & googlemock */

# begin /* Include CodeCoverage */
option(GUNROCK_CODE_COVERAGE ""Use CodeCoverage, requires lcov (default: OFF)."" OFF)

if (GUNROCK_CODE_COVERAGE)
include(CodeCoverage)
# setup_target_for_coverage(${PROJECT_NAME}_coverage ctest coverage)
SETUP_TARGET_FOR_COVERAGE(${PROJECT_NAME}_coverage unit_test coverage)
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage"")
endif (GUNROCK_CODE_COVERAGE)
# end /* Include CodeCoverage */

## Set the directory where the binaries will be stored
set(EXECUTABLE_OUTPUT_PATH
  ${PROJECT_BINARY_DIR}/bin
  CACHE PATH
  ""Directory where all executables will be stored"")

## Set the directory where the libraries will be stored
set(LIBRARY_OUTPUT_PATH
  ${PROJECT_BINARY_DIR}/lib
  CACHE PATH
  ""Directory where all the libraries will be stored"")

## Export compile commands
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE OFF)

# begin /* SET GENCODE_SM */
set(GENCODE_SM10
  -gencode=arch=compute_10,code=sm_10 -gencode=arch=compute_10,code=compute_10)
set(GENCODE_SM13
  -gencode=arch=compute_13,code=sm_13 -gencode=arch=compute_13,code=compute_13)
set(GENCODE_SM20
  -gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_20,code=compute_20)
set(GENCODE_SM30
  -gencode=arch=compute_30,code=sm_30 -gencode=arch=compute_30,code=compute_30)
set(GENCODE_SM35
  -gencode=arch=compute_35,code=sm_35 -gencode=arch=compute_35,code=compute_35)
set(GENCODE_SM37
  -gencode=arch=compute_37,code=sm_37 -gencode=arch=compute_37,code=compute_37)
set(GENCODE_SM50
  -gencode=arch=compute_50,code=sm_50 -gencode=arch=compute_50,code=compute_50)
set(GENCODE_SM52
  -gencode=arch=compute_52,code=sm_52 -gencode=arch=compute_52,code=compute_52)
set(GENCODE_SM60
  -gencode=arch=compute_60,code=sm_60 -gencode=arch=compute_60,code=compute_60)
set(GENCODE_SM61
  -gencode=arch=compute_61,code=sm_61 -gencode=arch=compute_61,code=compute_61)
set(GENCODE_SM70
  -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70)
set(GENCODE_SM72
  -gencode=arch=compute_72,code=sm_72 -gencode=arch=compute_72,code=compute_72)
set(GENCODE_SM75
  -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_75,code=compute_75)

#set(GENCODE -gencode=arch=compute_10,code=compute_10) # at least generate PTX
# end /* SET GENCODE_SM */

# begin /* Configure GUNROCK build options */
option(GUNROCK_BUILD_LIB
  ""On to build library""
  ON)

option(GUNROCK_BUILD_SHARED_LIBS
  ""On to build shared libraries, off for static libraries.""
  ON)

option(GUNROCK_BUILD_APPLICATIONS
  ""If on, builds the sample applications.""
  ON)

option(GUNROCK_APP_BC
  ""If on, builds only BC application.""
  OFF)

option(GUNROCK_APP_BFS
  ""If on, builds only BFS application.""
  OFF)

option(GUNROCK_APP_CC
  ""If on, builds only CC application.""
  OFF)

option(GUNROCK_APP_PR
  ""If on, builds only PR application.""
  OFF)

option(GUNROCK_APP_SSSP
  ""If on, builds only SSSP application.""
  OFF)

option(GUNROCK_APP_HITS
  ""If on, builds only HITS application.""
  OFF)

option(GUNROCK_APP_SALSA
  ""If on, builds only SALSA application.""
  OFF)

option(GUNROCK_APP_MST
  ""If on, builds only MST application.""
  OFF)

option(GUNROCK_APP_WTF
  ""If on, builds only WTF application.""
  OFF)

option(GUNROCK_APP_TOPK
  ""If on, builds only TOPK application.""
  OFF)

option(GUNROCK_APP_GRMAT
  ""If on, builds only GRMAT application.""
  OFF)

option(GUNROCK_APP_LOUVAIN
  ""If on, builds only LOUVAIN application.""
  OFF)

option(GUNROCK_APP_COLOR
  ""If on, builds only COLOR application.""
  OFF)

#option(GUNROCK_APP_SAMPLE
#  ""If on, builds only SAMPLE application.""
#  OFF)

option(GUNROCK_BUILD_TESTS
  ""If on, tests graph primitives with ctest""
  ON)

option(GUNROCK_MGPU_TESTS
  ""If on, tests multi GPU primitives with ctest""
  OFF)

option(GUNROCK_GENCODE_SM10
  ""ON to generate code for Compute Capability 1.0 devices (e.g. Tesla C870)""
  OFF)

option(GUNROCK_GENCODE_SM13
  ""ON to generate code for Compute Capability 1.3 devices (e.g. Tesla C1060)""
  OFF)

option(GUNROCK_GENCODE_SM20
  ""ON to generate code for Compute Capability 2.0 devices (e.g. Tesla C2050)""
  OFF)

option(GUNROCK_GENCODE_SM30
  ""ON to generate code for Compute Capability 3.0 devices (e.g. Tesla K10)""
  OFF)

option(GUNROCK_GENCODE_SM35
  ""ON to generate code for Compute Capability 3.5 devices (e.g. Tesla K40)""
  OFF)

option(GUNROCK_GENCODE_SM37
  ""ON to generate code for Compute Capability 3.7 devices (e.g. Tesla K80)""
  OFF)

option(GUNROCK_GENCODE_SM50
  ""ON to generate code for Compute Capability 5.0 devices (e.g. GeForce GTX 750 TI)""
  OFF)

option(GUNROCK_GENCODE_SM52
  ""ON to generate code for Compute Capability 5.2 devices (e.g. GeForce Titan X)""
  OFF)

#Pascal Architecture: CUDA 8
if (CUDA_VERSION VERSION_EQUAL ""8.0"" OR CUDA_VERSION VERSION_GREATER ""8.0"")
  option(GUNROCK_GENCODE_SM60
    ""ON to generate code for Compute Capability 6.0 devices (e.g. Tesla P100)""
    OFF)
  option(GUNROCK_GENCODE_SM61
    ""ON to generate code for Compute Capability 6.1 devices (e.g. GeForce GTX 1080)""
    OFF)
endif ()

#Volta Architecture: CUDA 9
if (CUDA_VERSION VERSION_EQUAL ""9.0"" OR CUDA_VERSION VERSION_GREATER ""9.0"")
  option(GUNROCK_GENCODE_SM70
    ""ON to generate code for Compute Capability 7.0 devices (e.g. Volta V100)""
    OFF)
  option(GUNROCK_GENCODE_SM72
    ""ON to generate code for Compute Capability 7.2 devices (e.g. Jetson AGX Xavier)""
    OFF)
endif ()

#Turing Architecture: CUDA 10
if (CUDA_VERSION VERSION_EQUAL ""10.0"" OR CUDA_VERSION VERSION_GREATER ""10.0"")
  option(GUNROCK_GENCODE_SM75
    ""ON to generate code for Compute Capability 7.5 devices (e.g. GTX 1160 or RTX 2080)""
    OFF)
endif ()

option (CUDA_AUTODETECT_GENCODE
  ""On to enable autodetection of appropriate gencode=X options for each detected device""
  ON)

option(CUDA_VERBOSE_PTXAS
  ""On to enable verbose output from the PTXAS assembler.""
  OFF)

if (CUDA_AUTODETECT_GENCODE)
  include(${CMAKE_SOURCE_DIR}/cmake/AutoDetectCudaArch.cmake)
  set(GENCODE ${GENCODE} ${CUDA_ARCHS})
endif ()

if (GUNROCK_GENCODE_SM10)
  set(GENCODE ${GENCODE} ${GENCODE_SM10})
endif(GUNROCK_GENCODE_SM10)

if (GUNROCK_GENCODE_SM13)
  set(GENCODE ${GENCODE} ${GENCODE_SM13})
endif(GUNROCK_GENCODE_SM13)

if (GUNROCK_GENCODE_SM20)
  set(GENCODE ${GENCODE} ${GENCODE_SM20})
endif(GUNROCK_GENCODE_SM20)

if (GUNROCK_GENCODE_SM30)
  set(GENCODE ${GENCODE} ${GENCODE_SM30})
endif(GUNROCK_GENCODE_SM30)

if (GUNROCK_GENCODE_SM35)
  set(GENCODE ${GENCODE} ${GENCODE_SM35})
endif(GUNROCK_GENCODE_SM35)

if (GUNROCK_GENCODE_SM37)
  set(GENCODE ${GENCODE} ${GENCODE_SM37})
endif(GUNROCK_GENCODE_SM37)

if (GUNROCK_GENCODE_SM50)
  set(GENCODE ${GENCODE} ${GENCODE_SM50})
endif(GUNROCK_GENCODE_SM50)

if (GUNROCK_GENCODE_SM52)
  set(GENCODE ${GENCODE} ${GENCODE_SM52})
endif(GUNROCK_GENCODE_SM52)

if (GUNROCK_GENCODE_SM60)
  set(GENCODE ${GENCODE} ${GENCODE_SM60})
endif(GUNROCK_GENCODE_SM60)

if (GUNROCK_GENCODE_SM61)
  set(GENCODE ${GENCODE} ${GENCODE_SM61})
endif(GUNROCK_GENCODE_SM61)

if (GUNROCK_GENCODE_SM70)
  set(GENCODE ${GENCODE} ${GENCODE_SM70})
endif(GUNROCK_GENCODE_SM70)

if (GUNROCK_GENCODE_SM72)
  set(GENCODE ${GENCODE} ${GENCODE_SM72})
endif(GUNROCK_GENCODE_SM72)

if (GUNROCK_GENCODE_SM75)
  set(GENCODE ${GENCODE} ${GENCODE_SM75})
endif(GUNROCK_GENCODE_SM75)

message(STATUS ""Listing chosen GENCODE commands"")
foreach(code IN LISTS GENCODE)
    message(STATUS ""${code}"")
endforeach() 

if (CUDA_VERBOSE_PTXAS)
  set(VERBOSE_PTXAS --ptxas-options=-v)
endif (CUDA_VERBOSE_PTXAS)
# end /* Configure GUNROCK build options */

# c++11 is required
# Already set above. Causes build error on Ubuntu 18.04.1 LTS
set(CUDA_NVCC_FLAGS --expt-extended-lambda -rdc=true -lcudadevrt)
set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_curand_LIBRARY})

# begin /* Suppress all warnings from nvcc */
if (NOT ENABLE_WARNINGS)
  set(CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} -w"")
endif (NOT ENABLE_WARNINGS)
# end /* Suppress all warnings from nvcc */

if(GUNROCK_BUILD_LIB)
  if(GUNROCK_BUILD_SHARED_LIBS)
    set(LIB_TYPE SHARED)
  else()
    set(LIB_TYPE STATIC)
    set(GUNROCK_STATIC_LIB 1)
  endif(GUNROCK_BUILD_SHARED_LIBS)

  #configure_file(
  #    ${CMAKE_CURRENT_SOURCE_DIR}/gunrock/gunrock_config.h.in
  #    ${CMAKE_CURRENT_SOURCE_DIR}/gunrock/gunrock_config.h)

  configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/gunrock/util/gitsha1.c.in""
    ""${CMAKE_CURRENT_SOURCE_DIR}/gunrock/util/gitsha1.c""
    @ONLY)
  add_subdirectory(gunrock)
endif(GUNROCK_BUILD_LIB)

# Subdirectories for examples, testing and documentation
if(GUNROCK_BUILD_TESTS)
  # Enables testing for this directory and below.
  # Note that ctest expects to find a test file
  # in the build directory root. Therefore,
  # this command should be in the source directory root.
  # https://cmake.org/cmake/help/v3.0/command/enable_testing.html
  # Note: For gunrock, use ctest or make check to run the tests
  enable_testing()

  add_subdirectory(examples)
  if(GUNROCK_GOOGLE_TESTS)
    add_subdirectory(unittests)
  endif(GUNROCK_GOOGLE_TESTS)
endif(GUNROCK_BUILD_TESTS)
",3.10,3.1
23981,oktal,rest,False,False,False,False,False,78,C++,2020-05-14 18:58:02+00:00,2015-08-12 19:44:15+00:00,1969,1254,"cmake_minimum_required (VERSION 3.1.3)
project (pistache)

include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -Wall -Wconversion -pedantic -Wextra -Wno-missing-field-initializers"")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if(CMAKE_BUILD_TYPE MATCHES ""Debug"")
    set(CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage -fstack-protector-all --param=ssp-buffer-size=4"")
endif()

option(PISTACHE_BUILD_TESTS ""build tests alongside the project"" OFF)
option(PISTACHE_ENABLE_NETWORK_TESTS ""if tests are built, run ones needing network access"" ON)
option(PISTACHE_BUILD_EXAMPLES ""build examples alongside the project"" OFF)
option(PISTACHE_BUILD_DOCS ""build docs alongside the project"" OFF)
option(PISTACHE_INSTALL ""add pistache as install target (recommended)"" ON)
option(PISTACHE_USE_SSL ""add support for SSL server"" OFF)

# require fat LTO objects in static library
if(CMAKE_CXX_FLAGS MATCHES ""-flto"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ffat-lto-objects"")
endif()

if (PISTACHE_BUILD_TESTS)
    find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
    find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
    find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)

    if (CMAKE_CXX_CPPCHECK)
        message(""-- Cppcheck found "" ${CMAKE_CXX_CPPCHECK})
        list(
            APPEND CMAKE_CXX_CPPCHECK
                ""--enable=all""
                ""-DCPPCHECK""
                ""--suppress=*:${PROJECT_SOURCE_DIR}/third-party*""
                ""--suppress=*:${PROJECT_SOURCE_DIR}/tests*""
                ""--suppress=noExplicitConstructor:include/pistache/optional.h""
        )
    else()
        message(""-- Cppcheck not found"")
        set(CMAKE_CXX_CPPCHECK """")
    endif()

    INCLUDE(Dart)

    add_custom_target(test_memcheck COMMAND ${CMAKE_CTEST_COMMAND}  --force-new-ctest-process --test-action memcheck)
    add_custom_target(coverage COMMAND ${CMAKE_CTEST_COMMAND}  --force-new-ctest-process --test-action coverage)
endif()

# CMAKE Pin cxx compiler to CXX14 until update to CXX17
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(""-std=c++14"" COMPILER_SUPPORTS_CXX14)
set(CMAKE_CXX_STANDARD 14)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if (PISTACHE_USE_SSL)
    add_definitions(-DPISTACHE_USE_SSL)
    link_libraries(-lssl -lcrypto)
endif (PISTACHE_USE_SSL)

link_libraries(-latomic)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set version...

    # Retrieve from external file...
    file(READ ""version.txt"" VERSION_FILE)

    # Extract version...

        # Major...
        string(REGEX MATCH ""VERSION_MAJOR *([0-9]*)"" _ ${VERSION_FILE})
        set(VERSION_MAJOR ${CMAKE_MATCH_1})

        # Minor...
        string(REGEX MATCH ""VERSION_MINOR *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_MINOR ${CMAKE_MATCH_1})

        # Patch...
        string(REGEX MATCH ""VERSION_PATCH *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_PATCH ${CMAKE_MATCH_1})

        # Git date...
        string(REGEX MATCH ""VERSION_GIT_DATE *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_GIT_DATE ${CMAKE_MATCH_1})

    # Make available in a header file...
    configure_file (
        ""include/pistache/version.h.in""
        ""include/pistache/version.h""
        @ONLY
    )

    # Install version header...
    if(PISTACHE_INSTALL)
        install (
            FILES
            ${CMAKE_CURRENT_BINARY_DIR}/include/pistache/version.h
            DESTINATION
            ${CMAKE_INSTALL_INCLUDEDIR}/pistache/
        )
    endif()

# Set libraries...

    # Minimum...
    set(LIBS ""-lpistache -lpthread -latomic"")

    # If building with OpenSSL support...
    if(PISTACHE_USE_SSL)
        set(LIBS ""${LIBS} -lssl -lcrypto"")
    endif(PISTACHE_USE_SSL)

# Configure the pkg-config metadata...

    # Initialize the metadata variables and to support remote builds...
    set(prefix         ${CMAKE_INSTALL_PREFIX})
    set(exec_prefix    ${CMAKE_INSTALL_PREFIX}/bin)
    set(libdir         ${CMAKE_INSTALL_FULL_LIBDIR}/)
    set(libs           ${LIBS})
    set(includedir     ${CMAKE_INSTALL_FULL_INCLUDEDIR}/)
    set(version        ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-git${VERSION_GIT_DATE})

    # Perform substitutions...
    configure_file (
        ""libpistache.pc.in""
        ""libpistache.pc""
        @ONLY
    )

    # Install pkg-config metadata into standard location within the prefix...
    if(PISTACHE_INSTALL)
        install (
            FILES
            ${CMAKE_CURRENT_BINARY_DIR}/libpistache.pc
            DESTINATION
            ${CMAKE_INSTALL_LIBDIR}/pkgconfig/
        )
    endif()

add_subdirectory (src)

if (PISTACHE_BUILD_EXAMPLES)
    add_subdirectory (examples)
endif()

if (PISTACHE_BUILD_TESTS)
    find_package(GTest)
    if (GTEST_FOUND)
        include_directories(${GTEST_INCLUDE_DIRS})
    else()
        ADD_SUBDIRECTORY (third-party/googletest)
        include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})
    endif()

    enable_testing()
    add_subdirectory(tests)
endif()

if (PISTACHE_BUILD_DOCS)

    find_package(Doxygen
            REQUIRED dot
            OPTIONAL_COMPONENTS mscgen dia)

    if (DOXYGEN_FOUND)

        set(DOXYGEN_IN ${CMAKE_SOURCE_DIR}/docs/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile)

        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)

        add_custom_target(docs
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs
            COMMENT ""Generating doxygen documentation""
            VERBATIM)

        message(""-- Adding doxygen documentation done"")

    else(DOXYGEN_FOUND)
        message(FATAL_ERROR ""Doxygen need to be installed to generate the doxygen documentation"")
    endif(DOXYGEN_FOUND)

endif()

# Generate source tarball...

    # Define version of source archive...
    set(CPACK_PACKAGE_VERSION_MAJOR     ${VERSION_MAJOR})
    set(CPACK_PACKAGE_VERSION_MINOR     ${VERSION_MINOR})
    set(CPACK_PACKAGE_VERSION_PATCH     ${VERSION_PATCH})

    # Generate a .tar.bz2
    set(CPACK_SOURCE_GENERATOR ""TBZ2"")

    # Set filename...
    set(CPACK_SOURCE_PACKAGE_FILE_NAME
        ""${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"")

    # Don't include these files in the archive...
    set(CPACK_SOURCE_IGNORE_FILES
      ""/build/;/debian/;/prefix/;/.git*;~$;${CPACK_SOURCE_IGNORE_FILES}"")

    # Include the CPack module for generating the archive and add the standard
    #  dist target to the generated makefile...
    include(CPack)
    add_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)

",3.1.3,3.1
24076,jarro2783,cxxopts,False,False,False,False,False,43,C++,2020-05-12 04:59:48+00:00,2014-10-03 05:21:29+00:00,1909,294,"# Copyright (c) 2014 Jarryd Beck
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
cmake_minimum_required(VERSION 3.1)

# parse the current version from the cxxopts header
file(STRINGS ""${CMAKE_CURRENT_SOURCE_DIR}/include/cxxopts.hpp"" cxxopts_version_defines
     REGEX ""#define CXXOPTS__VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${cxxopts_version_defines})
    if(ver MATCHES ""#define CXXOPTS__VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(CXXOPTS__VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(VERSION ${CXXOPTS__VERSION_MAJOR}.${CXXOPTS__VERSION_MINOR}.${CXXOPTS__VERSION_PATCH})
message(STATUS ""cxxopts version ${VERSION}"")

project(cxxopts VERSION ""${VERSION}"" LANGUAGES CXX)

enable_testing()

option(CXXOPTS_BUILD_EXAMPLES ""Set to ON to build examples"" ON)
option(CXXOPTS_BUILD_TESTS ""Set to ON to build tests"" ON)
option(CXXOPTS_ENABLE_INSTALL ""Generate the install target"" ON)

# request c++11 without gnu extension for the whole project and enable more warnings
if (CXXOPTS_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD ${CXXOPTS_CXX_STANDARD})
else()
  set(CMAKE_CXX_STANDARD 11)
endif()

set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W2"")
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""[Cc]lang"" OR CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -Wshadow"")
endif()

add_library(cxxopts INTERFACE)
add_library(cxxopts::cxxopts ALIAS cxxopts)

# optionally, enable unicode support using the ICU library
set(CXXOPTS_USE_UNICODE_HELP FALSE CACHE BOOL ""Use ICU Unicode library"")
if(CXXOPTS_USE_UNICODE_HELP)
    find_package(PkgConfig)
    pkg_check_modules(ICU REQUIRED icu-uc)

    target_link_libraries(cxxopts INTERFACE ${ICU_LDFLAGS})
    target_compile_options(cxxopts INTERFACE ${ICU_CFLAGS})
    target_compile_definitions(cxxopts INTERFACE CXXOPTS_USE_UNICODE)
endif()

target_include_directories(cxxopts INTERFACE
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
    )

if(CXXOPTS_ENABLE_INSTALL)
    include(CMakePackageConfigHelpers)
    set(CXXOPTS_CMAKE_DIR ""lib/cmake/cxxopts"" CACHE STRING
      ""Installation directory for cmake files, relative to ${CMAKE_INSTALL_PREFIX}."")
    set(version_config ""${PROJECT_BINARY_DIR}/cxxopts-config-version.cmake"")
    set(project_config ""${PROJECT_BINARY_DIR}/cxxopts-config.cmake"")
    set(targets_export_name cxxopts-targets)

    # Generate the version, config and target files into the build directory.
    write_basic_package_version_file(
        ${version_config}
        VERSION ${VERSION}
        COMPATIBILITY AnyNewerVersion)
    configure_package_config_file(
        ${PROJECT_SOURCE_DIR}/cxxopts-config.cmake.in
        ${project_config}
        INSTALL_DESTINATION ${CXXOPTS_CMAKE_DIR})
    export(TARGETS cxxopts NAMESPACE cxxopts::
        FILE ${PROJECT_BINARY_DIR}/${targets_export_name}.cmake)

    # Install version, config and target files.
    install(
        FILES ${project_config} ${version_config}
        DESTINATION ${CXXOPTS_CMAKE_DIR})
    install(EXPORT ${targets_export_name} DESTINATION ${CXXOPTS_CMAKE_DIR}
        NAMESPACE cxxopts::)

    # Install the header file and export the target
    install(TARGETS cxxopts EXPORT ${targets_export_name} DESTINATION lib)
    install(FILES ${PROJECT_SOURCE_DIR}/include/cxxopts.hpp DESTINATION include)
endif()

add_subdirectory(src)
add_subdirectory(test)
",3.1,3.1
24190,alliedtelesis,buildsyspp,False,False,False,False,False,7,C++,2020-05-15 03:18:05+00:00,2013-06-25 23:49:48+00:00,1,518,"cmake_minimum_required(VERSION 3.1...3.15)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()

project(Buildsys++ LANGUAGES CXX)

include(FetchContent)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

file(GLOB_RECURSE SOURCE_FILES 
    ${CMAKE_SOURCE_DIR}/src/*.cpp 
    ${CMAKE_SOURCE_DIR}/src/*.hpp
    ${CMAKE_SOURCE_DIR}/src/*.h)

include(cpplint)
include(clang-format)
include(clang-tidy)

enable_testing()

add_subdirectory(unit-test)",3.1...3.15,3.1
24197,lightstep,lightstep-tracer-cpp,False,False,False,False,False,73,C++,2020-05-15 22:09:08+00:00,2016-04-26 16:55:47+00:00,32,654,"cmake_minimum_required(VERSION 3.1)

# ==============================================================================
# Set policies

# Allows us to control options via normal variables
# this is used for the windows build
# See https://cmake.org/cmake/help/git-stage/policy/CMP0077.html
if(NOT (${CMAKE_VERSION} VERSION_LESS ""3.13.0""))
  cmake_policy(SET CMP0077 NEW)
endif()

# Allows us to specify the MSVC runtime via cmake variables
# See https://cmake.org/cmake/help/git-stage/policy/CMP0091.html
if(NOT (${CMAKE_VERSION} VERSION_LESS ""3.15.0""))
  cmake_policy(SET CMP0091 NEW)
endif()

project(lightstep-tracer)

# ==============================================================================
# Version information

set(LIGHTSTEP_VERSION_MAJOR ""0"")
set(LIGHTSTEP_VERSION_MINOR ""12"")
set(LIGHTSTEP_VERSION_PATCH ""0"")
set(LIGHTSTEP_VERSION_STRING
  ""${LIGHTSTEP_VERSION_MAJOR}.${LIGHTSTEP_VERSION_MINOR}.${LIGHTSTEP_VERSION_PATCH}"")

# ==============================================================================
# Set up cpack

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY 
                  ""A LightStep implementation of the C++ OpenTracing API"")
set(CPACK_PACKAGE_VENDOR ""lightstep.com"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")

set(CPACK_PACKAGE_VERSION_MAJOR ${LIGHTSTEP_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${LIGHTSTEP_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${LIGHTSTEP_VERSION_PATCH})
include(CPack)

# ==============================================================================
# Set up options

# Introduce variables:
# * CMAKE_INSTALL_LIBDIR
# * CMAKE_INSTALL_BINDIR
# * CMAKE_INSTALL_INCLUDEDIR
include(GNUInstallDirs)

option(WITH_GRPC ""Build with support for gRPC."" ON)
option(WITH_LIBEVENT ""Build with support for libevent."" OFF)
option(WITH_CARES ""Build with support for dns resolution using c-ares."" OFF)
option(WITH_DYNAMIC_LOAD ""Build support for dynamic loading."" ON)
option(HEADERS_ONLY ""Only generate version.h."" OFF)

# Allow a user to specify an optional default roots.pem file to embed into the 
# library. 
#
# This is useful if the library is distributed to an environment where gRPC
# hasn't been installed.
#
# To use, invoke cmake with 
#   cmake -DDEFAULT_SSL_ROOTS_PEM:STRING=/path/to/roots.pem ...
#
# See also discussion on https://github.com/grpc/grpc/issues/4834
set(DEFAULT_SSL_ROOTS_PEM """" CACHE STRING ""Path to a default roots.pem file to embed"")

if (WITH_GRPC)
  set(LIGHTSTEP_USE_GRPC 1)
elseif(WITH_DYNAMIC_LOAD AND NOT WITH_LIBEVENT)
  message(WARNING ""WITH_GRPC is not set; building without dynamic loading support."")
  set(WITH_DYNAMIC_LOAD 0)
endif()

option(BUILD_SHARED_LIBS ""Build as a shared library"" ON)
option(BUILD_STATIC_LIBS ""Build as a static library"" ON)

if (NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)
    message(FATAL_ERROR ""One or both of BUILD_SHARED_LIBS or BUILD_STATIC_LIBS must be set to ON to build"")
endif()

# ==============================================================================
# Set up generated header files config.h and version.h

configure_file(version.h.in include/lightstep/version.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/lightstep 
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

if(HEADERS_ONLY)
  return()
endif()

# ==============================================================================
# Configure compiler warnings

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ==============================================================================
# Find packages

set(LIGHTSTEP_LINK_LIBRARIES """")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

# Newer protobuf versions use cmake config files so try that first
#
# Note: The non-config protobuf module doesn't find PROTOBUF_PROTOC_EXECUTABLE properly on windows.
set(protobuf_MODULE_COMPATIBLE ON)
find_package(Protobuf CONFIG NAMES protobuf)
if (protobuf_FOUND)
  list(APPEND LIGHTSTEP_LINK_LIBRARIES protobuf::libprotobuf)
else()
  # Fall back to the old style protobuf module
  find_package(Protobuf REQUIRED)
  list(APPEND LIGHTSTEP_LINK_LIBRARIES ${PROTOBUF_LIBRARIES})
endif()

if (NOT DEFINED OPENTRACING_INCLUDE_DIR)
  find_path(OPENTRACING_INCLUDE_DIR NAMES opentracing/tracer.h)
endif()

if (NOT DEFINED OPENTRACING_LIBRARY)
  find_library(OPENTRACING_LIBRARY opentracing)
endif()

include_directories(SYSTEM ${OPENTRACING_INCLUDE_DIR})
list(APPEND LIGHTSTEP_LINK_LIBRARIES ${OPENTRACING_LIBRARY})

if (WITH_GRPC)                           
  find_package(gRPC CONFIG)
  # First attempt to set up gRPC via cmake; but if cmake config files aren't
  # available, fallback to pkg-config.
  if (gRPC_FOUND)
    set(GRPC_CPP_PLUGIN $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
    list(APPEND LIGHTSTEP_LINK_LIBRARIES gRPC::grpc++)
    include_directories(SYSTEM
          $<TARGET_PROPERTY:gRPC::grpc++,INTERFACE_INCLUDE_DIRECTORIES>)
  else()
    message(""Falling back to finding gRPC with pkg-config"")
    find_program(GRPC_CPP_PLUGIN grpc_cpp_plugin)
    if (NOT GRPC_CPP_PLUGIN)
      message(FATAL_ERROR ""grpc_cpp_plugin not found!"")
    endif()
    find_package(PkgConfig REQUIRED)
    pkg_search_module(GRPC REQUIRED grpc)
    pkg_search_module(GRPCPP REQUIRED grpc++)
    list(APPEND LIGHTSTEP_LINK_LIBRARIES ${GRPCPP_LDFLAGS} ${GRPC_LDFLAGS})  
    include_directories(SYSTEM ${GRPC_INCLUDE_DIRS} ${GRPCPP_INCLUDE_DIRS})
  endif()
endif()

if (WITH_LIBEVENT)
  find_package(Libevent REQUIRED)
  list(APPEND LIGHTSTEP_LINK_LIBRARIES   ${LIBEVENT_LIBRARIES})
  include_directories(SYSTEM ${LIBEVENT_INCLUDE_DIRS})
endif()

if (WITH_CARES)
  find_package(CARES REQUIRED)
  list(APPEND LIGHTSTEP_LINK_LIBRARIES   ${CARES_LIBRARIES})
  include_directories(SYSTEM ${CARES_INCLUDE_DIR})
endif()

if (WITH_LIBEVENT AND WITH_CARES)
  set(LIGHTSTEP_USE_STREAMING 1)
endif()

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
list(APPEND LIGHTSTEP_LINK_LIBRARIES Threads::Threads)

if (WIN32) 
  list(APPEND LIGHTSTEP_LINK_LIBRARIES ""wsock32"" ""ws2_32"")
endif()


# ==============================================================================
# Build LightStep tracer library

add_subdirectory(3rd_party)
include_directories(SYSTEM ${LIGHTSTEP_THIRD_PARTY_INCLUDES})

include_directories(include)
include_directories(src)
install(DIRECTORY include/lightstep DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules)
include(LightStepTracerCommon)
include(LightStepTracerConfiguration)

set(LIGHTSTEP_SRCS src/common/utility.cpp
                   src/common/buffer_chain.cpp
                   src/common/fragment_input_stream.cpp
                   src/common/fragment_array_input_stream.cpp
                   src/common/protobuf.cpp
                   src/common/hex_conversion.cpp
                   src/common/in_memory_stream.cpp
                   src/common/logger.cpp
                   src/common/random.cpp
                   src/common/random_traverser.cpp
                   src/common/serialization.cpp
                   src/common/chunked_http_framing.cpp
                   src/common/report_request_framing.cpp
                   src/common/composable_fragment_input_stream.cpp
                   src/common/chained_stream.cpp
                   src/common/timestamp.cpp
                   src/recorder/report_builder.cpp
                   src/recorder/auto_recorder.cpp
                   src/recorder/fork_aware_recorder.cpp
                   src/recorder/legacy_manual_recorder.cpp
                   src/recorder/manual_recorder.cpp
		   src/recorder/metrics_tracker.cpp
                   src/recorder/transporter.cpp
                   src/recorder/serialization/report_request.cpp
                   src/recorder/serialization/report_request_header.cpp
                   src/recorder/serialization/embedded_metrics_message.cpp
                   src/tracer/binary_carrier.cpp
                   src/tracer/json_options.cpp
                   src/tracer/propagation/b3_propagator.cpp
                   src/tracer/propagation/baggage_propagator.cpp
                   src/tracer/propagation/binary_propagation.cpp
                   src/tracer/propagation/envoy_propagator.cpp
                   src/tracer/propagation/trace_context.cpp
                   src/tracer/propagation/trace_context_propagator.cpp
                   src/tracer/propagation/lightstep_propagator.cpp
                   src/tracer/propagation/multiheader_propagator.cpp
                   src/tracer/propagation/propagation.cpp
                   src/tracer/propagation/propagation_options.cpp
                   src/tracer/immutable_span_context.cpp
                   src/tracer/legacy/legacy_span.cpp
                   src/tracer/legacy/legacy_tracer_impl.cpp
                   src/tracer/lightstep_span_context.cpp
                   src/tracer/lightstep_tracer_factory.cpp
                   src/tracer/serialization.cpp
                   src/tracer/span.cpp
                   src/tracer/tracer_impl.cpp
                   src/tracer/tracer.cpp
                   src/tracer/tag.cpp
                   src/tracer/utility.cpp
                   )

if (WIN32)
  list(APPEND LIGHTSTEP_SRCS src/common/platform/error_windows.cpp
                             src/common/platform/network_windows.cpp
                             src/common/platform/network_environment_windows.cpp
                             src/common/platform/utility_windows.cpp
                             src/common/platform/string_windows.cpp
                             src/common/platform/fork_windows.cpp)
else()
  list(APPEND LIGHTSTEP_SRCS src/common/platform/error_unix.cpp
                             src/common/platform/network_unix.cpp
                             src/common/platform/network_environment_unix.cpp
                             src/common/platform/utility_unix.cpp
                             src/common/platform/string_unix.cpp
                             src/common/platform/fork_unix.cpp)
endif()

if (WITH_GRPC)
  list(APPEND LIGHTSTEP_SRCS src/recorder/grpc_transporter/grpc_transporter.cpp)
else()
  list(APPEND LIGHTSTEP_SRCS src/recorder/no_grpc_transporter.cpp)
endif()

if (WITH_LIBEVENT)
  list(APPEND LIGHTSTEP_SRCS src/recorder/stream_recorder/stream_recorder.cpp
                             src/recorder/stream_recorder/stream_recorder_impl.cpp
                             src/recorder/stream_recorder/satellite_dns_resolution_manager.cpp
                             src/recorder/stream_recorder/satellite_endpoint_manager.cpp
                             src/recorder/stream_recorder/satellite_connection.cpp
                             src/recorder/stream_recorder/satellite_streamer.cpp
                             src/recorder/stream_recorder/span_stream.cpp
                             src/recorder/metrics_tracker.cpp
                             src/recorder/stream_recorder/connection_stream.cpp
                             src/recorder/stream_recorder/host_header.cpp
                             src/recorder/stream_recorder/status_line_parser.cpp
                             src/recorder/stream_recorder/utility.cpp
                             src/network/event.cpp
                             src/network/event_base.cpp
                             src/network/timer_event.cpp
                             src/network/ip_address.cpp
                             src/network/socket.cpp
                             src/network/vector_write.cpp
  )
  if (WITH_CARES)
    list(APPEND LIGHTSTEP_SRCS src/network/ares_dns_resolver/ares_dns_resolver.cpp
                               src/network/ares_dns_resolver/ares_library_handle.cpp
    )
  else()
    list(APPEND LIGHTSTEP_SRCS src/network/no_dns_resolver.cpp)
  endif()
else()
  list(APPEND LIGHTSTEP_SRCS src/recorder/no_stream_recorder.cpp)
endif()

if (WITH_DYNAMIC_LOAD)
  list(APPEND LIGHTSTEP_SRCS src/tracer/dynamic_load.cpp)
endif()

if (DEFAULT_SSL_ROOTS_PEM STREQUAL """")
  list(APPEND LIGHTSTEP_SRCS src/tracer/no_default_ssl_roots_pem.cpp)
else()
  # Follows the approach described in https://stackoverflow.com/a/11814544/4447365
  set(EMBED_SSL_ROOTS_PEM_CPP_FILE ${CMAKE_BINARY_DIR}/default_ssl_roots_pem.cpp)
  add_custom_command(
    OUTPUT ${EMBED_SSL_ROOTS_PEM_CPP_FILE}
    COMMAND embedfile default_ssl_roots_pem ${DEFAULT_SSL_ROOTS_PEM}
    DEPENDS ${DEFAULT_ROOT_PEM}
  )
  list(APPEND LIGHTSTEP_SRCS ${EMBED_SSL_ROOTS_PEM_CPP_FILE})
endif()

if (BUILD_SHARED_LIBS)  
  add_library(lightstep_tracer SHARED $<TARGET_OBJECTS:lightstep_tracer_common>
                                      $<TARGET_OBJECTS:lightstep_tracer_configuration>
                                      $<TARGET_OBJECTS:lightstep_3rd_party>
                                      ${LIGHTSTEP_SRCS})
  target_compile_options(lightstep_tracer PUBLIC ${WARNING_CXX_FLAGS})
  target_link_libraries(lightstep_tracer ${LIGHTSTEP_LINK_LIBRARIES})
  set_target_properties(lightstep_tracer PROPERTIES SOVERSION ${LIGHTSTEP_VERSION_MAJOR})
  install(TARGETS lightstep_tracer
          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if (BUILD_STATIC_LIBS)  
  add_library(lightstep_tracer-static STATIC $<TARGET_OBJECTS:lightstep_tracer_common>
                                             $<TARGET_OBJECTS:lightstep_tracer_configuration>
                                             $<TARGET_OBJECTS:lightstep_3rd_party>
                                             ${LIGHTSTEP_SRCS})
  set_target_properties(lightstep_tracer-static PROPERTIES OUTPUT_NAME lightstep_tracer)
  target_compile_options(lightstep_tracer-static PUBLIC ${WARNING_CXX_FLAGS})
  target_link_libraries(lightstep_tracer-static ${LIGHTSTEP_LINK_LIBRARIES})
  install(TARGETS lightstep_tracer-static
          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

# ==============================================================================
# Build tests and examples
if (BUILD_SHARED_LIBS)
  set(LIGHTSTEP_LIBRARY ""lightstep_tracer"")
else()
  set(LIGHTSTEP_LIBRARY ""lightstep_tracer-static"")
endif()

include(CTest)
if (BUILD_TESTING)
  add_subdirectory(test/cmake)
  add_subdirectory(example)
endif()
",3.1,3.1
24284,frabert,libdmusic,False,False,False,False,False,6,C,2019-04-14 15:14:46+00:00,2017-06-21 20:00:32+00:00,19,302,"cmake_minimum_required (VERSION 3.10)
project (dmusic VERSION 0.1.6 LANGUAGES CXX)

option(DMUSIC_BUILD_UTILS ""Build various DirectMusic utilities"" ON)
option(DMUSIC_TRACE ""Enable tracing messages"" OFF)
option(DMUSIC_TRACE_VERBOSE ""Enable verbose tracing messages"" OFF)

option(DMUSIC_FORCE_STATIC_CRT ""Force the use of static runtime on Windows"" OFF)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

if(DMUSIC_FORCE_STATIC_CRT)
  set(CompilerFlags
          CMAKE_CXX_FLAGS
          CMAKE_CXX_FLAGS_DEBUG
          CMAKE_CXX_FLAGS_RELEASE
          CMAKE_C_FLAGS
          CMAKE_C_FLAGS_DEBUG
          CMAKE_C_FLAGS_RELEASE
          )
  foreach(CompilerFlag ${CompilerFlags})
    string(REPLACE ""/MD"" ""/MT"" ${CompilerFlag} ""${${CompilerFlag}}"")
  endforeach()
endif()

find_package(sf2cute CONFIG REQUIRED)

add_library(dmusic """")
target_sources(dmusic
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Articulator.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/decode.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/DlsPlayer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/DownloadableSound.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/DummyPlayer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Exceptions.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Instrument.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/MusicMessages.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/PlayingContext.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Region.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Riff.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/SoundFontPlayer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Wave.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/Band.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/Chordmap.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/ReferenceList.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/Segment.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/Style.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Forms/Tracks.cpp)

target_compile_features(dmusic PUBLIC cxx_std_14)
target_link_libraries(dmusic PRIVATE sf2cute::sf2cute)

set_target_properties(dmusic PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)

if(DMUSIC_TRACE)
  target_compile_definitions(dmusic PRIVATE DMUSIC_TRACE=1)
  if(DMUSIC_TRACE_VERBOSE)
    target_compile_definitions(dmusic PRIVATE DMUSIC_TRACE_VERBOSE=1)
  endif()
endif()

target_include_directories(dmusic
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

add_library(dmusic::dmusic ALIAS dmusic)

include(GNUInstallDirs)

set(UTILS_DESTINATION ""bin"" CACHE ""PATH"" ""Utilities install directory"")

# install library files needed for linking
install(
  TARGETS dmusic
  EXPORT dmusic-targets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# install the public header files
install(
  DIRECTORY ${CMAKE_SOURCE_DIR}/include/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

if (DMUSIC_BUILD_UTILS)
  add_subdirectory(utils)
endif ()

# installs the *cmake files in share directory
install(
  EXPORT dmusic-targets
  FILE dmusic-targets.cmake
  NAMESPACE dmusic::
  DESTINATION share/dmusic
)

include(CMakePackageConfigHelpers)

write_basic_package_version_file(
  ${CMAKE_BINARY_DIR}/cmake/dmusic-config-version.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
  ${CMAKE_CURRENT_LIST_DIR}/cmake/dmusic-config.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/cmake/dmusic-config.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/dmusic
)

install(
  FILES
    ${CMAKE_BINARY_DIR}/cmake/dmusic-config.cmake
    ${CMAKE_BINARY_DIR}/cmake/dmusic-config-version.cmake
  DESTINATION share/dmusic
)",3.10,3.1
24343,jaagr,polybar,False,False,False,False,False,98,C++,2020-05-16 21:19:13+00:00,2016-05-19 14:16:23+00:00,6749,1654,"#
# Build configuration
#
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# Enable ccache by default and as early as possible because project() performs
# checks on the compiler
option(ENABLE_CCACHE ""Enable ccache support"" ON)
if(ENABLE_CCACHE)
  message(STATUS ""Trying to enable ccache"")
  find_program(BIN_CCACHE ccache)

  string(ASCII 27 esc)
  if(NOT BIN_CCACHE)
    message(STATUS ""${esc}[33mCouldn't locate ccache, disabling ccache...${esc}[0m"")
  else()
    # Enable only if the binary is found
    message(STATUS ""${esc}[32mUsing compiler cache ${BIN_CCACHE}${esc}[0m"")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${BIN_CCACHE})
  endif()
endif()

project(polybar CXX)

# Extract version information from version.txt. The first line that looks like
# a version string is used, so the file supports comments
file(STRINGS version.txt version_txt REGEX ""^[0-9]+\\.[0-9]+\\.[0-9]+.*$"" LIMIT_COUNT 1)

# If we are in a git repo we can get the version information from git describe
execute_process(COMMAND git describe --tags --dirty=-dev
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  RESULT_VARIABLE git_result
  OUTPUT_VARIABLE git_describe
  OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)

if(git_result EQUAL ""0"")
  set(APP_VERSION ""${git_describe}"")
else()
  message(STATUS ""Could not detect version with git, falling back to built-in version information."")
  set(APP_VERSION ""${version_txt}"")
endif()

set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH}
  ${PROJECT_SOURCE_DIR}/cmake
  ${PROJECT_SOURCE_DIR}/cmake/common
  ${PROJECT_SOURCE_DIR}/cmake/modules)

include(GNUInstallDirs)
include(utils)
include(01-core)
include(02-opts)
include(03-libs)
include(04-targets)
include(05-summary)

if(BUILD_DOC)
  add_subdirectory(doc)
endif()
add_subdirectory(contrib/bash)
add_subdirectory(contrib/zsh)
add_subdirectory(include)
add_subdirectory(lib)
add_subdirectory(src bin)

# We need to enable testing in the root folder so that 'ctest' and 'make test'
# can be run in the build directory
if(BUILD_TESTS)
  enable_testing()
  add_subdirectory(tests)
endif()


#
# Generate configuration file
#

set(MODULES_LEFT ""bspwm i3"")
set(MODULES_CENTER ""mpd"")
set(MODULES_RIGHT ""filesystem xbacklight alsa pulseaudio xkeyboard memory cpu wlan eth battery temperature date powermenu"")

set(FONT_FIXED ""fixed:pixelsize=10"")
set(FONT_UNIFONT ""unifont:fontformat=truetype"")
set(FONT_SIJI ""siji:pixelsize=10"")

queryfont(FONT_FIXED ${FONT_FIXED} FIELDS family pixelsize)
queryfont(FONT_UNIFONT ${FONT_UNIFONT} FIELDS family fontformat)
queryfont(FONT_SIJI ${FONT_SIJI} FIELDS family pixelsize)

# Strip disabled modules {{{

if(NOT ENABLE_PULSEAUDIO)
  string(REPLACE "" pulseaudio"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT ENABLE_ALSA)
  string(REPLACE "" alsa"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT ENABLE_I3)
  string(REPLACE "" i3"" """" MODULES_LEFT ${MODULES_LEFT})
endif()
if(NOT ENABLE_MPD)
  string(REPLACE ""mpd"" """" MODULES_CENTER ${MODULES_CENTER})
endif()
if(NOT ENABLE_NETWORK)
  string(REPLACE "" wlan eth"" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT WITH_XRANDR)
  string(REPLACE ""xbacklight "" ""backlight-acpi "" MODULES_RIGHT ${MODULES_RIGHT})
endif()
if(NOT WITH_XKB)
  string(REPLACE ""xkeyboard "" """" MODULES_RIGHT ${MODULES_RIGHT})
endif()

# }}}
# Get battery/adapter name {{{

string(REGEX REPLACE /%battery%.* """" PATH_BAT ${SETTING_PATH_BATTERY})
string(REGEX REPLACE /%adapter%.* """" PATH_ADP ${SETTING_PATH_ADAPTER})
file(GLOB BAT_LIST RELATIVE ${PATH_BAT} ${PATH_ADP}/B*)
file(GLOB ADP_LIST RELATIVE ${PATH_ADP} ${PATH_ADP}/A*)
if(BAT_LIST)
  list(GET BAT_LIST 0 BATTERY)
else()
  set(BATTERY BAT0)
endif()
if(ADP_LIST)
  list(GET ADP_LIST 0 ADAPTER)
else()
  set(ADAPTER ADP1)
endif()

# }}}
# Get network interfaces {{{

if(ENABLE_NETWORK)
  file(GLOB IFLIST RELATIVE /sys/class/net /sys/class/net/*)
  foreach(INTERFACE ${IFLIST})
    if(NOT ${INTERFACE} STREQUAL ""lo"")
      file(GLOB IS_WIRELESS /sys/class/net/${INTERFACE}/wireless)
      if(IS_WIRELESS)
        set(INTERFACE_WLAN ${INTERFACE})
      else()
        set(INTERFACE_ETH ${INTERFACE})
      endif()
    endif()
  endforeach()
  if(NOT INTERFACE_ETH)
    set(INTERFACE_ETH net0)
  endif()
  if(NOT INTERFACE_WLAN)
    set(INTERFACE_WLAN net1)
  endif()
endif()

# }}}
# Configure and install {{{

configure_file(
  ${CMAKE_CURRENT_LIST_DIR}/config.cmake
  ${CMAKE_CURRENT_LIST_DIR}/config
  ESCAPE_QUOTES @ONLY)

install(FILES config
  DESTINATION ${CMAKE_INSTALL_DOCDIR}
  COMPONENT config)

# }}}
",3.1.0,3.1
24345,precice,precice,False,False,False,False,False,31,C++,2020-05-17 20:29:08+00:00,2015-05-22 14:05:22+00:00,196,3368,"cmake_minimum_required (VERSION 3.10.2)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/XSDKCompilerDetect.cmake)

project(preCICE VERSION 2.0.2 LANGUAGES CXX)
set(preCICE_SOVERSION ${preCICE_VERSION_MAJOR})

#
# Overview of this configuration
# 
# PREAMBLE
# Setup Options
# Find Mandatory Dependencies
# Find Configurable Dependencies
# Configuration of Target precice
# Configuration of Target binprecice
# Configuration of Target testprecice
# Install Targets for precice
# CPack
#


#
# PREAMBLE
#

# Make our cmake modules visible to CMake
list (APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
list (APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/modules"")

include(CheckCXX11Library)
include(CopyTargetProperty)
include(XSDKMacros)
include(Validation)

# CMake Policies

# CMP0074: find_package() uses <PackageName>_ROOT variables.
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()
# CMP0075 Include file check macros honor CMAKE_REQUIRED_LIBRARIES
if(POLICY CMP0075)
  cmake_policy(SET CMP0075 NEW)
endif()

#
# Setup Options
#

if(NOT CMAKE_BUILD_TYPE)
  message(WARNING ""You did not specify a CMAKE_BUILD_TYPE.

  We will assume you asked for a Debug build."")
  set(CMAKE_BUILD_TYPE Debug CACHE STRINGS ""The type of this build"" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel)
endif()

option(PRECICE_MPICommunication ""Enables MPI-based communication and running coupling tests."" ON)
option(PRECICE_PETScMapping ""Enable use of the PETSc linear algebra library."" ON)
option(PRECICE_PythonActions ""Python support"" ON)
option(PRECICE_Packages ""Configure package generation."" ON)
option(PRECICE_InstallTest ""Add test binary and necessary files to install target."" OFF)
option(BUILD_SHARED_LIBS ""Build shared libraries by default"" OFF)
option(PRECICE_ALWAYS_VALIDATE_LIBS ""Validate libraries even after the validatation succeeded."" OFF)
option(PRECICE_ENABLE_C ""Enable the native C bindings"" ON)
option(PRECICE_ENABLE_FORTRAN ""Enable the native Fortran bindings"" ON)

xsdk_tpl_option_override(PRECICE_MPICommunication TPL_ENABLE_MPI)
xsdk_tpl_option_override(PRECICE_PETScMapping TPL_ENABLE_PETSC)
xsdk_tpl_option_override(PRECICE_PythonActions TPL_ENABLE_PYTHON)

if(PRECICE_PETScMapping AND NOT PRECICE_MPICommunication)
  message(FATAL_ERROR ""Please enable MPI to use PETSC."")
endif()

set(PRECICE_CTEST_MPI_FLAGS """" CACHE STRING ""Add additional flags to mpiexec for running tests via CTest."")

include(XSDKOptions)

# Print information about this configuration
include(PrintHelper)
print_configuration(
  ADDITIONAL
  ""PRECICE_Packages;Configure package generation""
  ""PRECICE_InstallTest;Install tests/testfiles""
  ""PRECICE_CTEST_MPI_FLAGS;Additional CTest MPI Flags""
  )
print_empty()

include(FeatureSummary)
add_feature_info(MPICommunication PRECICE_MPICommunication
  ""Enables the MPI communication back-end.

   This enables the MPI communication back-end which is highly recommended on multi-node systems.
   See the documentation of the CMake module FindMPI to control its functionality.

   Set PRECICE_MPICommunication to enable.
"")
add_feature_info(PETScMapping PRECICE_PETScMapping
  ""Enables the PETSc-powered radial basic function mappings.

   The radial basis function mappings require MPI and PETSc to work in parallel.

   Set PRECICE_PETScMapping to enable.
   Requires MPICommunication.
  "")
add_feature_info(PythonActions PRECICE_PythonActions
  ""Enables the support for user-defined python actions.

   preCICE allows to manipulate coupling data at runtime using configurable actions.
   This feature enables the support for user-defined actions written in Python based on numpy.

   Set PRECICE_PythonActions to enable.
  "")
add_feature_info(CBindings PRECICE_ENABLE_C
  ""Enables the native Fortran bindings.

   preCICE provides native bindings for C, which are compiled into the library.
   This feature enables the compilation and installation of the bindings into the library.
   Note that we strongly recommend to compile with C bindings enabled for compatibility reasons.

   Set PRECICE_ENABLE_C to enable.
  "")
add_feature_info(FortranBindings PRECICE_ENABLE_FORTRAN
  ""Enables the native Fortran bindings.

   preCICE provides native bindings for Fortran, which are compiled into the library.
   This feature enables the compilation and installation of the bindings into the library.
   Note that we strongly recommend to compile with Fortran bindings enabled for compatibility reasons.

   Set PRECICE_ENABLE_FORTRAN to enable.
  "")

feature_summary(WHAT ENABLED_FEATURES  DESCRIPTION ""=== ENABLED FEATURES ==="" QUIET_ON_EMPTY)
feature_summary(WHAT DISABLED_FEATURES DESCRIPTION ""=== DISABLED FEATURES ==="" QUIET_ON_EMPTY)



#
# Find Mandatory Dependencies
#
print_section(""DEPENDENCIES"")

find_package (Threads REQUIRED)

if(TPL_ENABLE_BOOST)
  xsdk_tpl_require(BOOST BOOST_ROOT)
  # Use BOOST_ROOT to set the directory
  set(Boost_NO_SYSTEM_PATHS ON CACHE BOOL """" FORCE)
  unset(ENV{BOOST_ROOT})
endif()
find_package(Boost 1.65.1 REQUIRED
  COMPONENTS filesystem log log_setup program_options system thread unit_test_framework
  )

# Eigen
if(TPL_ENABLE_EIGEN3)
  # Use EIGEN3_ROOT to set the directory
  xsdk_tpl_require(EIGEN3 EIGEN3_INCLUDE_DIR)
endif()
find_package(Eigen3 3.2 REQUIRED)
precice_validate_eigen()

# LibXML2
if(TPL_ENABLE_LIBXML2)
  xsdk_tpl_require(LIBXML2 LIBXML2_LIBRARIES LIBXML2_INCLUDE_DIRS)
endif()
find_package(LibXml2 REQUIRED)
precice_validate_libxml2()

# nlohmann/JSON
if(TPL_ENABLE_JSON)
  xsdk_tpl_require(JSON JSON_INCLUDE_DIR)
  add_library(JSON INTERFACE IMPORTED)
  set_property(TARGET JSON PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${JSON_INCLUDE_DIR}"")
else()
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/json)
endif()
precice_validate_json()

# prettyprint
if(TPL_ENABLE_PRETTYPRINT)
  xsdk_tpl_require(PRETTYPRINT PRETTYPRINT_INCLUDE_DIR)
  add_library(prettyprint INTERFACE IMPORTED)
  set_property(TARGET prettyprint PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${PRETTYPRINT_INCLUDE_DIR}"")
else()
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/prettyprint)
endif()
precice_validate_prettyprint()


#
# Find Configurable Dependencies
#

# Option: PRECICE_MPICommunication
if (PRECICE_MPICommunication)
  find_package(MPI REQUIRED)
endif()

# Option: PETSC
if (PRECICE_PETScMapping)
  if (TPL_ENABLE_PETSC)
    xsdk_tpl_require(PETSC PETSC_DIR PETSC_ARCH)
    # PETSc detection uses primarily these ENVs
    unset(ENV{PETSC_DIR})
    unset(ENV{PETSC_ARCH})
  endif()
  find_package(PETSc 3.6 REQUIRED)
  # No validation required as PETSc does this internally

  set(PETSC_VERSIONS """")
  set(PETSC_VERSION_MAJOR """")
  set(PETSC_VERSION_MINOR """")
  string(REGEX MATCHALL ""[0-9]+"" PETSC_VERSIONS ${PETSC_VERSION})
  list(GET PETSC_VERSIONS 0 PETSC_VERSION_MAJOR)
  list(GET PETSC_VERSIONS 1 PETSC_VERSION_MINOR)
else()
  message(STATUS ""PETSc support disabled"")
endif()

# Option Python
if (PRECICE_PythonActions)
  if (TPL_ENABLE_PYTHON)
    xsdk_tpl_require(PYTHON PYTHON_LIBRARY PYTHON_INCLUDE_DIR NumPy_INCLUDE_DIR)
    find_package(PythonLibs REQUIRED)

    # Override NumPy
    # TODO: Incorporate into the FindNumPy module
    set(NumPy_FOUND True CACHE BOOL ""NumPy found?"" FORCE)
    if(NOT TARGET NumPy::NumPy)
      add_library(NumPy::NumPy INTERFACE IMPORTED)
      set_property(TARGET NumPy::NumPy PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${NumPy_INCLUDE_DIR}"")
    endif()
  else()
    find_package(PythonLibs REQUIRED)
    find_package(NumPy REQUIRED)
  endif()
  if(PYTHONLIBS_VERSION_STRING VERSION_LESS 2.7)
    message(FATAL_ERROR ""The selected Python Version is too old: ${PYTHONLIBS_VERSION_STRING} (minimum 2.7)"")
  endif()
  precice_validate_libpython()
  precice_validate_numpy()
else()
  message(STATUS ""Python support disabled"")
endif()


#
# Configuration of Target precice
#

print_empty()
print_section(""TARGETS & PACKAGES"")

# Add a dummy to silence add_library warning for cmake < 3.11.
set(preCICE_DUMMY """")
if(CMAKE_VERSION VERSION_LESS ""3.11"")
  set(preCICE_DUMMY ""${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp"")
  if(NOT EXISTS ""${preCICE_DUMMY}"")
    file(WRITE ""${preCICE_DUMMY}"" """")
  endif()
endif()

# Add precice as an empty target 
add_library(precice ${preCICE_DUMMY})
set_target_properties(precice PROPERTIES
  # precice is a C++11 project
  CXX_STANDARD 11
  CXX_STANDARD_REQUIRED Yes
  CXX_EXTENSIONS No
  VERSION ${preCICE_VERSION}
  SOVERSION ${preCICE_SOVERSION}
  )

# Setup Boost
target_compile_definitions(precice PRIVATE BOOST_ALL_DYN_LINK BOOST_ASIO_ENABLE_OLD_SERVICES)
target_link_libraries(precice PRIVATE
  Boost::boost
  Boost::filesystem
  Boost::log
  Boost::log_setup
  Boost::program_options
  Boost::system
  Boost::thread
  Boost::unit_test_framework
  )
if(UNIX OR APPLE OR MINGW)
  target_link_libraries(precice PRIVATE ${CMAKE_DL_LIBS})
endif()

# Setup Eigen3
target_link_libraries(precice PRIVATE Eigen3::Eigen)
target_compile_definitions(precice PRIVATE ""$<$<CONFIG:DEBUG>:EIGEN_INITIALIZE_MATRICES_BY_NAN>"")

# Setup LIBXML2
target_include_directories(precice PRIVATE ${LIBXML2_INCLUDE_DIR})
target_link_libraries(precice PRIVATE ${LIBXML2_LIBRARIES})

# Setup Prettyprint
target_link_libraries(precice PRIVATE prettyprint)

# Setup JSON
target_link_libraries(precice PRIVATE JSON)

# Setup MPI
if (PRECICE_MPICommunication)
  target_link_libraries(precice PRIVATE MPI::MPI_CXX)
else()
  target_compile_definitions(precice PRIVATE PRECICE_NO_MPI)
endif()

# Setup PETSC
if (PRECICE_PETScMapping AND PRECICE_MPICommunication)
  target_include_directories(precice PRIVATE ${PETSC_INCLUDES})
  target_link_libraries(precice PRIVATE ${PETSC_LIBRARIES})
else()
  target_compile_definitions(precice PRIVATE PRECICE_NO_PETSC)
endif()

# Option Python
if (PRECICE_PythonActions)
  target_link_libraries(precice PRIVATE NumPy::NumPy)
  target_include_directories(precice PRIVATE ${PYTHON_INCLUDE_DIRS})
  target_compile_definitions(precice PRIVATE NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)
  target_link_libraries(precice PRIVATE ${PYTHON_LIBRARIES})
else()
  target_compile_definitions(precice PRIVATE PRECICE_NO_PYTHON)
endif()


# File Configuration
include(GenerateVersionInformation)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/DetectGitRevision.cmake)
configure_file(""${PROJECT_SOURCE_DIR}/src/precice/impl/versions.hpp.in"" ""${PROJECT_BINARY_DIR}/src/precice/impl/versions.hpp"" @ONLY)

# Includes Configuration
target_include_directories(precice PUBLIC 
  $<BUILD_INTERFACE:${preCICE_SOURCE_DIR}/src>
  $<BUILD_INTERFACE:${preCICE_BINARY_DIR}/src>
  $<INSTALL_INTERFACE:include>
  )

# Sources Configuration
include(${CMAKE_CURRENT_LIST_DIR}/src/sources.cmake)


#
# Configuration of Target binprecice
#

add_executable(binprecice ""src/drivers/main.cpp"")
target_link_libraries(binprecice 
  PRIVATE
  Threads::Threads
  precice
  prettyprint
  Eigen3::Eigen
  Boost::boost
  Boost::filesystem
  Boost::log
  Boost::log_setup
  Boost::program_options
  Boost::system
  Boost::thread
  Boost::unit_test_framework
  )
set_target_properties(binprecice PROPERTIES
  # precice is a C++11 project
  CXX_STANDARD 11
  )
# Copy needed properties from the lib to the executatble. This is necessary as
# this executable uses the library source, not only the interface.
copy_target_property(precice binprecice COMPILE_DEFINITIONS)
copy_target_property(precice binprecice COMPILE_OPTIONS)
if(PRECICE_MPICommunication)
  target_link_libraries(binprecice PRIVATE MPI::MPI_CXX)
endif()
if(PRECICE_MPICommunication AND PRECICE_PETScMapping)
  target_include_directories(binprecice PRIVATE ${PETSC_INCLUDES})
  target_link_libraries(binprecice PRIVATE ${PETSC_LIBRARIES})
endif()


#
# Configuration of Target testprecice
#

add_executable(testprecice ""src/testing/main.cpp"")
target_link_libraries(testprecice
  PRIVATE
  Threads::Threads
  precice
  Eigen3::Eigen
  prettyprint
  Boost::boost
  Boost::filesystem
  Boost::log
  Boost::log_setup
  Boost::program_options
  Boost::system
  Boost::thread
  Boost::unit_test_framework
  )
set_target_properties(testprecice PROPERTIES
  # precice is a C++11 project
  CXX_STANDARD 11
  )
# Copy needed properties from the lib to the executatble. This is necessary as
# this executable uses the library source, not only the interface.
copy_target_property(precice testprecice COMPILE_DEFINITIONS)
copy_target_property(precice testprecice COMPILE_OPTIONS)

# Testprecice fully depends on MPI and PETSc.
if(PRECICE_MPICommunication)
  target_link_libraries(testprecice PRIVATE MPI::MPI_CXX)
endif()
if(PRECICE_MPICommunication AND PRECICE_PETScMapping)
  target_include_directories(testprecice PRIVATE ${PETSC_INCLUDES})
  target_link_libraries(testprecice PRIVATE ${PETSC_LIBRARIES})
endif()

# Test Sources Configuration
include(${CMAKE_CURRENT_LIST_DIR}/src/tests.cmake)


# Include Native C Bindings
if (PRECICE_ENABLE_C)
  # include(${CMAKE_CURRENT_LIST_DIR}/extras/bindings/c/CMakeLists.txt)
  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/extras/bindings/c)
endif()

# Include Native Fortran Bindings
if (PRECICE_ENABLE_FORTRAN)
  # include((${CMAKE_CURRENT_LIST_DIR}/extras/bindings/fortran/CMakeLists.txt)
  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/extras/bindings/fortran)
endif()
#
# Install Targets for precice
#

# Setup General Install for:
# precice - the library
# binprecice - the precice binary
include(GNUInstallDirs)
install(TARGETS precice binprecice
  EXPORT preciceTargets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/precice
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/precice
  )

if(PRECICE_InstallTest)
  # Install the testprecice target
  install(TARGETS testprecice
    EXPORT preciceTargets
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )

  # Install the resources necessary for the tests
  install(DIRECTORY src
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/precice
    FILES_MATCHING
    PATTERN ""*.xml""
    )
  install(DIRECTORY src/action/tests/
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/precice/src/action/tests
    FILES_MATCHING
    PATTERN ""*.py""
    )
endif()

# Install examples
install(DIRECTORY examples
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/precice
  PATTERN "".gitignore"" EXCLUDE
  )

# Export the Targets to install
install(EXPORT preciceTargets
  FILE preciceTargets.cmake
  NAMESPACE precice::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/precice
  )

# Generate a Package Config File for precice
include(CMakePackageConfigHelpers)
write_basic_package_version_file(""preciceConfigVersion.cmake""
  VERSION ${preCICE_VERSION}
  COMPATIBILITY SameMajorVersion
  )

# Install the Config and the ConfigVersion files
install(FILES ""cmake/preciceConfig.cmake"" ""${preCICE_BINARY_DIR}/preciceConfigVersion.cmake""
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/precice
  )

# Setup the config in the build directory
export(EXPORT preciceTargets
  NAMESPACE precice::
  FILE ""preciceTargets.cmake"")
file(COPY ""cmake/preciceConfig.cmake""
  DESTINATION ""${preCICE_BINARY_DIR}"")

# Add an alias to allow subprojects to use the namespaced name
add_library(precice::precice ALIAS precice)


# Set the directory used to prepare files for packaging
set(PRECICE_PACKAGING_DIR ""${CMAKE_CURRENT_BINARY_DIR}/packaging"")
mark_as_advanced(PRECICE_PACKAGING_DIR)

# Compress and install the manpages
find_program(GZIP_EXE gzip DOC ""The gzip executable"")
if(GZIP_EXE)
  # Process manpages for binaries
  file(COPY docs/man/man1/binprecice.1 DESTINATION packaging/man1)
  if(PRECICE_InstallTest)
    file(COPY docs/man/man1/testprecice.1 DESTINATION packaging/man1)
  endif()
  file(GLOB PRECICE_MAN_PAGES ""${PRECICE_PACKAGING_DIR}/man1/*.1"")
  foreach(manpage ${PRECICE_MAN_PAGES})
    message(STATUS ""Compressing manpage: ${manpage}"")
    execute_process(COMMAND ""${GZIP_EXE}"" ""-9nf"" ""${manpage}"")
  endforeach()

  # Install compressed manpages
  install(DIRECTORY ${PRECICE_PACKAGING_DIR}/man1
    DESTINATION ${CMAKE_INSTALL_MANDIR}
    )
else()
  message(WARNING ""Installing uncompressed manpages"")
  # Install uncompressed manpages
  install(DIRECTORY docs/man/man1
    DESTINATION ${CMAKE_INSTALL_MANDIR}
    )
  if(PRECICE_InstallTest)
    install(FILES docs/man/man1/testprecice.1
      DESTINATION share/man
      )
  endif()
endif()

# Configure a pkg-config file
configure_file(
  ""${PROJECT_SOURCE_DIR}/tools/releasing/packaging/debian/precice.pc.in""
  ""lib/pkgconfig/libprecice.pc""
  @ONLY
  )
install(DIRECTORY ""${preCICE_BINARY_DIR}/lib/pkgconfig"" 
  DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

#
# Add uninstall
#

include(${CMAKE_CURRENT_LIST_DIR}/cmake/Uninstall.cmake)


#
# CPack
#

if (PRECICE_Packages)
  include(${CMAKE_CURRENT_LIST_DIR}/cmake/CPackConfig.cmake)
endif()


#
# CTest
#

print_empty()
print_section(""TESTS"")

include(${CMAKE_CURRENT_LIST_DIR}/cmake/CTestConfig.cmake)


#
# Add test_install
#

include(${CMAKE_CURRENT_LIST_DIR}/cmake/TestInstall.cmake)
",3.10.2,3.1
24363,rdnvndr,raindrop,False,False,False,False,False,1,C++,2020-05-14 07:13:27+00:00,2015-10-18 09:24:34+00:00,0,908,"cmake_minimum_required(VERSION 3.10)
project(raindrop VERSION 1.0.0)

add_subdirectory(src)
add_subdirectory(doc)

if ( ${CMAKE_TESTING_ENABLED} )
    add_subdirectory(tests)
endif()
",3.10,3.1
24379,ngtcp2,ngtcp2,False,False,False,False,False,19,C,2020-05-17 10:11:44+00:00,2017-06-25 08:28:58+00:00,475,2067,"# ngtcp2
#
# Copyright (c) 2016 ngtcp2 contributors
# Copyright (c) 2012 nghttp2 contributors
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# ""Software""), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 3.1)

# Allow setting VISIBILITY_PRESET on static library targets without warning.
cmake_policy(SET CMP0063 NEW)

# XXX using 0.1.90 instead of 0.1.0-DEV
project(ngtcp2 VERSION 0.1.90)

# See versioning rule:
#  http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
set(LT_CURRENT  0)
set(LT_REVISION 0)
set(LT_AGE      0)

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"" ""${CMAKE_MODULE_PATH}"")
include(Version)

math(EXPR LT_SOVERSION ""${LT_CURRENT} - ${LT_AGE}"")
set(LT_VERSION ""${LT_SOVERSION}.${LT_AGE}.${LT_REVISION}"")
set(PACKAGE_VERSION     ""${PROJECT_VERSION}"")
HexVersion(PACKAGE_VERSION_NUM ${PROJECT_VERSION_MAJOR} ${PROJECT_VERSION_MINOR} ${PROJECT_VERSION_PATCH})

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the build type"" FORCE)

  # Include ""None"" as option to disable any additional (optimization) flags,
  # relying on just CMAKE_C_FLAGS and CMAKE_CXX_FLAGS (which are empty by
  # default). These strings are presented in cmake-gui.
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    ""None"" ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()

include(GNUInstallDirs)

include(CMakeOptions.txt)

# Do not disable assertions based on CMAKE_BUILD_TYPE.
foreach(_build_type ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
  foreach(_lang C CXX)
    string(TOUPPER ""CMAKE_${_lang}_FLAGS_${_build_type}"" _var)
    string(REGEX REPLACE ""(^| )[/-]D *NDEBUG($| )"" """" ${_var} ""${${_var}}"")
  endforeach()
endforeach()


if(ENABLE_GNUTLS)
  find_package(GnuTLS 3.6.12)
endif()
if(ENABLE_OPENSSL)
  find_package(OpenSSL 1.1.1)
endif()
find_package(Libev 4.11)
find_package(Libnghttp3 0.0.0)
find_package(CUnit 2.1)
enable_testing()
set(HAVE_CUNIT      ${CUNIT_FOUND})
if(HAVE_CUNIT)
  add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})
endif()

# openssl (for examples)
include(CMakePushCheckState)
include(CheckSymbolExists)
if(ENABLE_OPENSSL AND OPENSSL_FOUND)
  # Until OpenSSL gains mainline support for QUIC, check for a patched version.
  cmake_push_check_state()
  set(CMAKE_REQUIRED_INCLUDES   ""${OPENSSL_INCLUDE_DIR}"")
  set(CMAKE_REQUIRED_LIBRARIES  ""${OPENSSL_LIBRARIES}"")
  check_symbol_exists(SSL_is_quic ""openssl/ssl.h"" HAVE_SSL_IS_QUIC)
  if(NOT HAVE_SSL_IS_QUIC)
    message(WARNING ""Disabling OpenSSL due to lack of QUIC support in ${OPENSSL_LIBRARIES}"")
  endif()
  cmake_pop_check_state()
endif()
if(ENABLE_OPENSSL AND HAVE_SSL_IS_QUIC)
  set(OPENSSL_INCLUDE_DIRS  ${OPENSSL_INCLUDE_DIR})
  set(HAVE_OPENSSL 1)
  set(HAVE_CRYPTO 1)
else()
  set(OPENSSL_INCLUDE_DIRS  """")
  set(OPENSSL_LIBRARIES     """")
endif()

# libev (for examples)
set(HAVE_LIBEV      ${LIBEV_FOUND})
# libnghttp3 (for examples)
set(HAVE_LIBNGHTTP3 ${LIBNGHTTP3_FOUND})

# GnuTLS (required for external https://github.com/ueno/ngtcp2-gnutls-examples)
if(ENABLE_GNUTLS AND GNUTLS_FOUND)
  # Until GnuTLS gains mainline support for QUIC, check for a patched version.
  cmake_push_check_state()
  set(CMAKE_REQUIRED_INCLUDES   ""${GNUTLS_INCLUDE_DIR}"")
  set(CMAKE_REQUIRED_LIBRARIES  ""${GNUTLS_LIBRARIES}"")
  check_symbol_exists(gnutls_handshake_write ""gnutls/gnutls.h"" HAVE_GNUTLS_HANDSHAKE_WRITE)
  if(NOT HAVE_GNUTLS_HANDSHAKE_WRITE)
    message(WARNING ""Disabling GnuTLS due to lack of QUIC support in ${GNUTLS_LIBRARIES}"")
  endif()
  cmake_pop_check_state()
endif()
if(ENABLE_GNUTLS AND HAVE_GNUTLS_HANDSHAKE_WRITE)
  set(GNUTLS_INCLUDE_DIRS  ${GNUTLS_INCLUDE_DIR})
  set(HAVE_GNUTLS 1)
  set(HAVE_CRYPTO 1)
else()
  set(GNUTLS_INCLUDE_DIRS  """")
  set(GNUTLS_LIBRARIES     """")
endif()

# Checks for header files.
include(CheckIncludeFile)
check_include_file(""arpa/inet.h""   HAVE_ARPA_INET_H)
check_include_file(""netinet/in.h""  HAVE_NETINET_IN_H)
check_include_file(""stddef.h""      HAVE_STDDEF_H)
check_include_file(""stdint.h""      HAVE_STDINT_H)
check_include_file(""stdlib.h""      HAVE_STDLIB_H)
check_include_file(""string.h""      HAVE_STRING_H)
check_include_file(""unistd.h""      HAVE_UNISTD_H)
check_include_file(""sys/endian.h""  HAVE_SYS_ENDIAN_H)
check_include_file(""endian.h""      HAVE_ENDIAN_H)

include(CheckTypeSize)
# Checks for typedefs, structures, and compiler characteristics.
# AC_TYPE_SIZE_T
check_type_size(""ssize_t"" SIZEOF_SSIZE_T)
if(SIZEOF_SSIZE_T STREQUAL """")
  # ssize_t is a signed type in POSIX storing at least -1.
  # Set it to a pointer-size int.
  set(ssize_t ptrdiff_t)
endif()

# Checks for symbols.
if(HAVE_ENDIAN_H)
  check_symbol_exists(be64toh ""endian.h"" HAVE_BE64TOH)
endif()
if(HAVE_SYS_ENDIAN_H)
  check_symbol_exists(be64toh ""sys/endian.h"" HAVE_BE64TOH)
endif()

include(ExtractValidFlags)
set(WARNCFLAGS)
set(WARNCXXFLAGS)
if(CMAKE_C_COMPILER_ID MATCHES ""MSVC"")
  if(ENABLE_WERROR)
    set(WARNCFLAGS    /WX)
    set(WARNCXXFLAGS  /WX)
  endif()
else()
  if(ENABLE_WERROR)
    extract_valid_c_flags(WARNCFLAGS    -Werror)
    extract_valid_c_flags(WARNCXXFLAGS  -Werror)
  endif()

  # For C compiler
  extract_valid_c_flags(WARNCFLAGS
    -Wall
    -Wextra
    -Wmissing-prototypes
    -Wstrict-prototypes
    -Wmissing-declarations
    -Wpointer-arith
    -Wdeclaration-after-statement
    -Wformat-security
    -Wwrite-strings
    -Wshadow
    -Winline
    -Wnested-externs
    -Wfloat-equal
    -Wundef
    -Wendif-labels
    -Wempty-body
    -Wcast-align
    -Wclobbered
    -Wvla
    -Wpragmas
    -Wunreachable-code
    -Waddress
    -Wattributes
    -Wdiv-by-zero
    -Wshorten-64-to-32

    -Wconversion
    -Wextended-offsetof
    -Wformat-nonliteral
    -Wlanguage-extension-token
    -Wmissing-field-initializers
    -Wmissing-noreturn
    -Wmissing-variable-declarations
    # Not used because we cannot change public structs
    # -Wpadded
    -Wsign-conversion
    # Not used because this basically disallows default case
    # -Wswitch-enum
    -Wunreachable-code-break
    -Wunused-macros
    -Wunused-parameter
    -Wredundant-decls
    # Only work with Clang for the moment
    -Wheader-guard
    -Wsometimes-uninitialized

    # Only work with gcc7 for the moment
    -Wduplicated-branches
    # This is required because we pass format string as ""const char*.
    -Wno-format-nonliteral
  )

  extract_valid_cxx_flags(WARNCXXFLAGS
    # For C++ compiler
    -Wall
    -Wformat-security
    -Wsometimes-uninitialized
    # Disable noexcept-type warning of g++-7.  This is not harmful as
    # long as all source files are compiled with the same compiler.
    -Wno-noexcept-type
  )

  if(ENABLE_ASAN)
    cmake_push_check_state()
    set(CMAKE_REQUIRED_LIBRARIES ""-fsanitize=address"")
    check_c_compiler_flag(-fsanitize=address C__fsanitize_address_VALID)
    check_cxx_compiler_flag(-fsanitize=address CXX__fsanitize_address_VALID)
    cmake_pop_check_state()
    if(NOT C__fsanitize_address_VALID OR NOT CXX__fsanitize_address_VALID)
      message(WARNING ""ENABLE_ASAN was requested, but not supported!"")
    else()
      set(CMAKE_C_FLAGS ""-fsanitize=address ${CMAKE_C_FLAGS}"")
      set(CMAKE_CXX_FLAGS ""-fsanitize=address ${CMAKE_CXX_FLAGS}"")
    endif()
  endif()
endif()

if(ENABLE_DEBUG)
  set(DEBUGBUILD 1)
endif()

add_definitions(-DHAVE_CONFIG_H)
configure_file(cmakeconfig.h.in config.h)
# autotools-compatible names
# Sphinx expects relative paths in the .rst files. Use the fact that the files
# below are all one directory level deep.
file(RELATIVE_PATH top_srcdir   ""${CMAKE_CURRENT_BINARY_DIR}/dir"" ""${CMAKE_CURRENT_SOURCE_DIR}"")
file(RELATIVE_PATH top_builddir ""${CMAKE_CURRENT_BINARY_DIR}/dir"" ""${CMAKE_CURRENT_BINARY_DIR}"")
set(abs_top_srcdir  ""${CMAKE_CURRENT_SOURCE_DIR}"")
set(abs_top_builddir ""${CMAKE_CURRENT_BINARY_DIR}"")
# libngtcp2.pc (pkg-config file)
set(prefix          ""${CMAKE_INSTALL_PREFIX}"")
set(exec_prefix     ""${CMAKE_INSTALL_PREFIX}"")
set(libdir          ""${CMAKE_INSTALL_FULL_LIBDIR}"")
set(includedir      ""${CMAKE_INSTALL_FULL_INCLUDEDIR}"")
set(VERSION         ""${PACKAGE_VERSION}"")
# For init scripts and systemd service file (in contrib/)
set(bindir          ""${CMAKE_INSTALL_FULL_BINDIR}"")
set(sbindir         ""${CMAKE_INSTALL_FULL_SBINDIR}"")
foreach(name
  lib/libngtcp2.pc
  lib/includes/ngtcp2/version.h
)
  configure_file(""${name}.in"" ""${name}"" @ONLY)
endforeach()

include_directories(
  ""${CMAKE_CURRENT_BINARY_DIR}"" # for config.h
)
# For use in src/CMakeLists.txt
set(PKGDATADIR ""${CMAKE_INSTALL_FULL_DATADIR}/${CMAKE_PROJECT_NAME}"")

install(FILES README.rst DESTINATION ""${CMAKE_INSTALL_DOCDIR}"")

add_subdirectory(lib)
add_subdirectory(tests)
add_subdirectory(crypto)
add_subdirectory(third-party)
add_subdirectory(examples)


string(TOUPPER ""${CMAKE_BUILD_TYPE}"" _build_type)
message(STATUS ""summary of build options:

    Package version: ${VERSION}
    Library version: ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}
    Install prefix:  ${CMAKE_INSTALL_PREFIX}
    Target system:   ${CMAKE_SYSTEM_NAME}
    Compiler:
      Build type:     ${CMAKE_BUILD_TYPE}
      C compiler:     ${CMAKE_C_COMPILER}
      CFLAGS:         ${CMAKE_C_FLAGS_${_build_type}} ${CMAKE_C_FLAGS}
      C++ compiler:   ${CMAKE_CXX_COMPILER}
      CXXFLAGS:       ${CMAKE_CXX_FLAGS_${_build_type}} ${CMAKE_CXX_FLAGS}
      WARNCFLAGS:     ${WARNCFLAGS}
      WARNCXXFLAGS:   ${WARNCXXFLAGS}
    Library:
      Shared:         ${BUILD_SHARED_LIBS}
    Test:
      CUnit:          ${HAVE_CUNIT} (LIBS='${CUNIT_LIBRARIES}')
    Libs:
      OpenSSL:        ${HAVE_OPENSSL} (LIBS='${OPENSSL_LIBRARIES}')
      Libev:          ${HAVE_LIBEV} (LIBS='${LIBEV_LIBRARIES}')
      Libnghttp3:     ${HAVE_LIBNGHTTP3} (LIBS='${LIBNGHTTP3_LIBRARIES}')
      GnuTLS:         ${HAVE_GNUTLS} (LIBS='${GNUTLS_LIBRARIES}')
"")
",3.1,3.1
24514,lxde,lxqt-session,False,False,False,False,False,100,C++,2020-05-03 11:30:22+00:00,2014-01-05 08:16:16+00:00,30,899,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-session)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(GNUInstallDirs)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(WITH_LIBUDEV ""Build with libudev support"" ON)

# Minimum Versions
set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10"")

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
find_package(X11 REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

# Please don't move, must be after lxqt
find_package(XdgUserDirs REQUIRED)

# Patch Version
set(LXQT_SESSION_PATCH_VERSION 0)

set(LXQT_SESSION_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_SESSION_PATCH_VERSION})
add_definitions(
    ""-DLXQT_SESSION_VERSION=\""${LXQT_SESSION_VERSION}\""""
)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Translations **********************************
include(LXQtTranslate)

add_subdirectory(lxqt-session)
add_subdirectory(lxqt-config-session)
add_subdirectory(lxqt-leave)

# merged from lxqt-common
include(LXQtConfigVars)

# startlxqt script
set(PREDEF_XDG_DATA_DIRS ""$XDG_DATA_HOME"")
if(NOT(""${LXQT_DATA_DIR}"" MATCHES ""^/usr(/local)?/share$""))
    set(PREDEF_XDG_DATA_DIRS ""${PREDEF_XDG_DATA_DIRS}:${LXQT_DATA_DIR}"")
endif()
set(PREDEF_XDG_DATA_DIRS ""${PREDEF_XDG_DATA_DIRS}:/usr/local/share:/usr/share"")
set(PREDEF_XDG_CONFIG_DIRS ""/etc:${LXQT_ETC_XDG_DIR}:/usr/share"")
configure_file(startlxqt.in startlxqt @ONLY)
install(PROGRAMS
    ""${CMAKE_CURRENT_BINARY_DIR}/startlxqt""
    DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    COMPONENT Runtime
)
install(FILES
    startlxqt.1
    DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
    COMPONENT Runtime
)

# default config files
add_subdirectory(config)
add_subdirectory(autostart)

# xsession *.desktop file for display managers
add_subdirectory(xsession)

",3.1.0,3.1
24532,rncbc,padthv1,False,False,False,False,False,2,C++,2020-05-05 08:11:41+00:00,2017-07-20 17:58:15+00:00,10,353,"project(PADTHV1)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.9.14"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
else ()
  set (VERSION ""${VERSION}"")
endif ()

set (PACKAGE_NAME ""padthv1"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""padthv1"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable JACK standalone build.
option (CONFIG_JACK ""Enable JACK stand-alone build (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable ALSA MIDI support option.
option (CONFIG_ALSA_MIDI ""Enable ALSA MIDI support (default=yes)"" 1)

# Enable LV2 plugin build.
option (CONFIG_LV2 ""Enable LV2 plug-in build (default=yes)"" 1)

option (CONFIG_LV2_UI_X11 ""Enable LV2 plug-in X11 UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_EXTERNAL ""Enable LV2 plug-in External UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_IDLE ""Enable LV2 UI Idle interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_SHOW ""Enable LV2 UI Show interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_RESIZE ""Enable LV2 UI Resize interface support (default=yes)"" 1)

option (CONFIG_LV2_PROGRAMS ""Enable LV2 plug-in Programs support (default=yes)"" 1)

option (CONFIG_LV2_PATCH ""Enable LV2 plug-in Patch support (default=yes)"" 1)

option (CONFIG_LV2_PORT_EVENT ""Enable LV2 plug-in Port-event support (EXPERIMENTAL) (default=no)"" 0)


# Enable liblo availability.
option (CONFIG_LIBLO ""Enable liblo interface (default=yes)"" 1)

# Enable NSM support.
option (CONFIG_NSM ""Enable NSM support (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Make sure we get some subtle optimizations out there...
add_compile_options (-ffast-math)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for FFTW3 libraries.
pkg_check_modules (FFTW3 REQUIRED fftw3)
if (FFTW3_FOUND)
  set (CONFIG_FFTW3 1)
  include_directories (${FFTW3_INCLUDE_DIRS})
  link_directories (${FFTW3_LIBRARY_DIRS})
  link_libraries (${FFTW3_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${FFTW3_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** FFTW3 library not found."")
  set (CONFIG_FFTW3 0)
endif ()

# Check for JACK libraries.
if (CONFIG_JACK)
  pkg_check_modules (JACK jack>=0.100.0)
  if (JACK_FOUND)
    include_directories (${JACK_INCLUDE_DIRS})
    link_directories (${JACK_LIBRARY_DIRS})
  # link_libraries (${JACK_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for JACK MIDI headers availability.
    if (CONFIG_JACK_MIDI)
      check_include_file (jack/midiport.h HAVE_JACK_MIDIPORT_H)
      if (NOT HAVE_JACK_MIDIPORT_H)
        set (CONFIG_JACK_MIDI 0)
      endif ()
    endif ()
    # Check for JACK session headers availability.
    if (CONFIG_JACK_SESSION)
      check_include_file (jack/session.h HAVE_JACK_SESSION_H)
      if (NOT HAVE_JACK_SESSION_H)
        set (CONFIG_JACK_SESSION 0)
      endif ()
    endif ()
    # Check for JACK session event callback availability.
    if (CONFIG_JACK_SESSION)
      check_function_exists (jack_set_session_callback CONFIG_JACK_SESSION)
    endif ()
    # Check for ALSA libraries.
    if (CONFIG_ALSA_MIDI)
      pkg_check_modules (ALSA alsa)
      set (CONFIG_ALSA_MIDI ${ALSA_FOUND})
      if (CONFIG_ALSA_MIDI)
        include_directories (${ALSA_INCLUDE_DIRS})
        link_directories (${ALSA_LIBRARY_DIRS})
        link_libraries (${ALSA_LIBRARIES})
      # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
      else ()
        message (WARNING ""*** ALSA library not found."")
      endif ()
    endif ()
  else ()
    message (WARNING ""*** JACK library not found."")
    set (CONFIG_JACK 0)
  endif ()
endif ()

if (NOT CONFIG_JACK)
  set (CONFIG_JACK_SESSION 0)
  set (CONFIG_JACK_MIDI 0)
  set (CONFIG_ALSA_MIDI 0)
  set (CONFIG_LIBLO 0)
  set (CONFIG_NSM 0)
endif ()

# Check for LIBLO libraries.
if (CONFIG_LIBLO)
  pkg_check_modules (LIBLO liblo)
  if (LIBLO_FOUND)
    include_directories (${LIBLO_INCLUDE_DIRS})
    link_directories (${LIBLO_LIBRARY_DIRS})
    link_libraries (${LIBLO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LIBLO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LIBLO library not found."")
    set (CONFIG_LIBLO 0)
  endif ()
endif ()

# Check for LV2 support.
if (CONFIG_LV2)
  pkg_check_modules (LV2 lv2)
  if (LV2_FOUND)
    include_directories (${LV2_INCLUDE_DIRS})
    link_directories (${LV2_LIBRARY_DIRS})
    link_libraries (${LV2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LV2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for LV2 Atom support.
    check_include_file (lv2/lv2plug.in/ns/ext/atom/atom.h HAVE_LV2_ATOM_H)
    if (NOT HAVE_LV2_ATOM_H)
      set (CONFIG_LV2_ATOM 0)
    else ()
      set (CONFIG_LV2_ATOM 1)
    endif ()
    set (CONFIG_LV2_ATOM_FORGE_OBJECT ${CONFIG_LV2_ATOM})
    set (CONFIG_LV2_ATOM_FORGE_KEY ${CONFIG_LV2_ATOM})
    # Check for LV2 UI support.
    check_include_file (lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_H)
    if (NOT HAVE_LV2_UI_H)
      set (CONFIG_LV2_UI 0)
    else ()
      set (CONFIG_LV2_UI 1)
    endif ()
    if (NOT CONFIG_LV2_UI)
      set (CONFIG_LV2_UI_X11 0)
      set (CONFIG_LV2_UI_EXTERNAL 0)
      set (CONFIG_LV2_UI_IDLE 0)
      set (CONFIG_LV2_UI_SHOW 0)
      set (CONFIG_LV2_UI_RESIZE 0)
    endif ()
  else ()
    message (WARNING ""*** LV2 SDK not found."")
    set (CONFIG_LV2 0)
  endif ()
endif ()

# Check for LV2 headers.
if (CONFIG_LV2)
  set (LV2_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/lv2)
  set (CMAKE_REQUIRED_INCLUDES ""${LV2_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
  include_directories (${LV2_INCLUDES})
else ()
  set (CONFIG_LV2_UI_X11 0)
  set (CONFIG_LV2_UI_EXTERNAL 0)
  set (CONFIG_LV2_UI_IDLE 0)
  set (CONFIG_LV2_UI_SHOW 0)
  set (CONFIG_LV2_UI_RESIZE 0)
  set (CONFIG_LV2_PROGRAMS 0)
  set (CONFIG_LV2_PATCH 0)
endif ()

if (CONFIG_LV2_UI_EXTERNAL)
  check_include_file (lv2_external_ui.h HAVE_LV2_EXTERNAL_UI_H)
  if (NOT HAVE_LV2_EXTERNAL_UI_H)
    set (CONFIG_LV2_UI_EXTERNAL 0)
  endif ()
endif ()

if (CONFIG_LV2_PROGRAMS)
  check_include_file (lv2_programs.h HAVE_LV2_PROGRAMS_H)
  if (NOT HAVE_LV2_PROGRAMS_H)
    set (CONFIG_LV2_PROGRAMS 0)
  endif ()
endif ()

if (CONFIG_LV2_PATCH)
  check_include_file (lv2/lv2plug.in/ns/ext/patch/patch.h HAVE_LV2_PATCH_H)
  if (NOT HAVE_LV2_PATCH_H)
    set (CONFIG_LV2_PATCH 0)
  endif ()
endif ()


add_subdirectory (src)


configure_file (padthv1.spec.in padthv1.spec IMMEDIATE @ONLY)

install (FILES padthv1.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES padthv1.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME padthv1.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK stand-alone build . . . . . . . . . . . . . ."" CONFIG_JACK)
show_option (""  JACK session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
show_option (""  ALSA MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_ALSA_MIDI)
show_option (""  LV2 plug-in build  . . . . . . . . . . . . . . . ."" CONFIG_LV2)
show_option (""  LV2 plug-in X11 UI support   . . . . . . . . . . ."" CONFIG_LV2_UI_X11)
show_option (""  LV2 plug-in External UI support  . . . . . . . . ."" CONFIG_LV2_UI_EXTERNAL)
show_option (""  LV2 plug-in UI Idle interface support  . . . . . ."" CONFIG_LV2_UI_IDLE)
show_option (""  LV2 plug-in UI Show interface support  . . . . . ."" CONFIG_LV2_UI_SHOW)
show_option (""  LV2 plug-in UI Resize interface support  . . . . ."" CONFIG_LV2_UI_RESIZE)
show_option (""  LV2 plug-in Programs support . . . . . . . . . . ."" CONFIG_LV2_PROGRAMS)
show_option (""  LV2 plug-in Patch support  . . . . . . . . . . . ."" CONFIG_LV2_PATCH)
show_option (""  LV2 plug-in Port-event support (EXPERIMENTAL)  . ."" CONFIG_LV2_PORT_EVENT)
show_option (""  OSC service support (liblo)  . . . . . . . . . . ."" CONFIG_LIBLO)
show_option (""  NSM (Non Session Management) support . . . . . . ."" CONFIG_NSM)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
24684,PADrend,MinSG,False,False,False,False,False,6,C++,2020-02-11 20:27:03+00:00,2013-10-31 08:24:48+00:00,6,365,"#
# This file is part of the MinSG library.
# Copyright (C) 2009-2013 Benjamin Eikel <benjamin@eikel.org>
# Copyright (C) 2014-2019 Sascha Brandt <sascha@brandt.graphics>
#
# This library is subject to the terms of the Mozilla Public License, v. 2.0.
# You should have received a copy of the MPL along with this library; see the 
# file LICENSE. If not, you can obtain one at http://mozilla.org/MPL/2.0/.
#
cmake_minimum_required(VERSION 3.1.0)
project(MinSG VERSION 0.3.0)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set up install directories
include(GNUInstallDirs)
set(CMAKE_INSTALL_CMAKECONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/MinSG)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(SubdirectoryProperties)
include(SubdirectorySources)
include(MinSGHelper)

if(${CMAKE_VERSION} VERSION_LESS ""3.11.0"") 
	include(FetchContentFallback)
else()
	include(FetchContent)
endif()

add_subdirectory(Core)
add_subdirectory(Ext)
add_subdirectory(Helper)
add_subdirectory(SceneManagement)

get_property(MinSG_SOURCES GLOBAL PROPERTY MinSG_SRCS)
add_library(MinSG SHARED ${MinSG_SOURCES})

# --- Required dependencies ---

# Dependency to Geometry
if(NOT TARGET Geometry)
	find_package(Geometry 0.3.0 REQUIRED NO_MODULE)
endif()
target_link_libraries(MinSG LINK_PUBLIC Geometry)

# Dependency to Rendering
if(NOT TARGET Rendering)
	find_package(Rendering 0.3.0 REQUIRED NO_MODULE)
endif()
target_link_libraries(MinSG LINK_PUBLIC Rendering)

# Dependency to Util
if(NOT TARGET Util)
	find_package(Util 0.3.0 REQUIRED NO_MODULE)
endif()
target_link_libraries(MinSG LINK_PUBLIC Util)

# Dependency to Sound
if(NOT TARGET Sound)
	find_package(Sound 0.2.0 QUIET NO_MODULE)
endif()
if(TARGET Sound)
	append_property(MINSG_COMPILE_DEFINITIONS MINSG_HAVE_LIB_SOUND)
	target_link_libraries(MinSG LINK_PUBLIC Sound)
endif()

option(MINSG_PROFILING ""Defines if profiling information is generated and output in MinSG."")
if(MINSG_PROFILING)
	append_property(MINSG_COMPILE_DEFINITIONS MINSG_PROFILING)
endif()

# Dependency to OpenMP
find_package(OpenMP QUIET)
if(OPENMP_FOUND)
	set_property(TARGET MinSG APPEND_STRING PROPERTY COMPILE_FLAGS ""${OpenMP_CXX_FLAGS} "")
	set_property(TARGET MinSG APPEND_STRING PROPERTY LINK_FLAGS ""${OpenMP_CXX_FLAGS} "")
endif()

# Process the global property storing compile definitions
get_property(MINSG_DEFINITIONS GLOBAL PROPERTY MINSG_COMPILE_DEFINITIONS)
target_compile_definitions(MinSG PUBLIC ${MINSG_DEFINITIONS})

# Process the global property storing extended include dirs
get_property(MINSG_EXT_INCLUDE_DIR GLOBAL PROPERTY MINSG_EXT_INCLUDE_DIRS)
target_include_directories(MinSG PRIVATE ${MINSG_EXT_INCLUDE_DIR})

# Process the global property storing extended link libraries
get_property(MINSG_EXT_LIBRARY GLOBAL PROPERTY MINSG_EXT_LIBRARIES)
target_link_libraries(MinSG LINK_PRIVATE ${MINSG_EXT_LIBRARY})

# Process the global property storing dependencies
get_property(MINSG_DEPENDENCIES_SET GLOBAL PROPERTY MINSG_DEPENDENCIES SET)
if(MINSG_DEPENDENCIES_SET)
	get_property(MINSG_DEPENDENCIES GLOBAL PROPERTY MINSG_DEPENDENCIES)
	list(REMOVE_DUPLICATES MINSG_DEPENDENCIES)
	foreach(MINSG_DEPENDENCY ${MINSG_DEPENDENCIES})
		list(FIND MINSG_DEFINITIONS ${MINSG_DEPENDENCY} LIST_INDEX)
		if(LIST_INDEX EQUAL -1)
			message(SEND_ERROR ""The required dependency ${MINSG_DEPENDENCY} is missing."")
		endif()
	endforeach()
endif()

# Set version of library
set_target_properties(MinSG PROPERTIES VERSION ${MinSG_VERSION}
																			 SOVERSION ${MinSG_VERSION_MAJOR}
																			 LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")

# Install the header files
file(GLOB MINSG_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/*.h"")
install(FILES ${MINSG_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MinSG COMPONENT headers)
install(DIRECTORY Core
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MinSG COMPONENT headers
	FILES_MATCHING PATTERN ""*.h""
	PATTERN "".svn"" EXCLUDE
	PATTERN "".git"" EXCLUDE
	PATTERN ""CMakeFiles"" EXCLUDE
)
install(DIRECTORY Ext
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MinSG COMPONENT headers
	FILES_MATCHING PATTERN ""*.h""
	PATTERN "".svn"" EXCLUDE
	PATTERN "".git"" EXCLUDE
	PATTERN ""CMakeFiles"" EXCLUDE
)
install(DIRECTORY Helper
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MinSG COMPONENT headers
	FILES_MATCHING PATTERN ""*.h""
	PATTERN "".svn"" EXCLUDE
	PATTERN "".git"" EXCLUDE
	PATTERN ""CMakeFiles"" EXCLUDE
)
install(DIRECTORY SceneManagement
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MinSG COMPONENT headers
	FILES_MATCHING PATTERN ""*.h""
	PATTERN "".svn"" EXCLUDE
	PATTERN "".git"" EXCLUDE
	PATTERN ""CMakeFiles"" EXCLUDE
)

# Set MinSG's data directory to the directory inside the sources
target_compile_definitions(MinSG PRIVATE COMPILE_DEFINITIONS MINSG_DATA_DIR=""${CMAKE_CURRENT_SOURCE_DIR}/data"")

# Install the data directory and rename it to MinSG
install(DIRECTORY data/
	DESTINATION ${CMAKE_INSTALL_DATADIR}/MinSG COMPONENT data
)

# Install the library
install(TARGETS MinSG EXPORT LibraryExport
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT runtimelibraries
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT runtimelibraries
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT developmentlibraries
)

# Set include directories for users of this library
target_include_directories(MinSG
													 INTERFACE
													 ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>""
													 ""$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>"")

# Library export
install(EXPORT LibraryExport DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} FILE MinSGTargets.cmake COMPONENT developmentlibraries)

add_subdirectory(examples)
add_subdirectory(tests)

# Create the configuration files
include(CMakePackageConfigHelpers)
configure_package_config_file(MinSGConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/MinSGConfig.cmake
															INSTALL_DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR}
															PATH_VARS CMAKE_INSTALL_CMAKECONFIGDIR
															NO_SET_AND_CHECK_MACRO
															NO_CHECK_REQUIRED_COMPONENTS_MACRO)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/MinSGConfigVersion.cmake
																 VERSION ${MinSG_VERSION}
																 COMPATIBILITY SameMajorVersion)

# Install the configuration files
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/MinSGConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/MinSGConfigVersion.cmake
				DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} COMPONENT developmentlibraries)

# Packaging
include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_NAME ""libminsg${MinSG_VERSION_MAJOR}"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""MinSG library"")
set(CPACK_PACKAGE_VENDOR ""Benjamin Eikel; Claudius Jaehn; Ralf Petring; Sascha Brandt"")
set(CPACK_PACKAGE_CONTACT ""Benjamin Eikel <benjamin@eikel.org>"")
set(CPACK_PACKAGE_VERSION_MAJOR ${MinSG_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${MinSG_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${MinSG_VERSION_PATCH})
set(CPACK_PACKAGE_FILE_NAME ""libMinSG"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_STRIP_FILES ON)

include(CPack)
",3.1.0,3.1
24700,KitwareMedical,ITKMorphologicalContourInterpolation,False,False,False,False,False,20,C++,2020-02-20 17:47:57+00:00,2015-04-24 18:24:27+00:00,10,244,"cmake_minimum_required(VERSION 3.10.2)
project(MorphologicalContourInterpolation)

if(NOT ITK_SOURCE_DIR)
  find_package(ITK 4.9 REQUIRED)
  list(APPEND CMAKE_MODULE_PATH ${ITK_CMAKE_DIR})
  include(ITKModuleExternal)
else()
  itk_module_impl()
endif()

itk_module_examples()
",3.10.2,3.1
24740,lxde,qterminal,False,False,False,False,False,117,C++,2020-05-15 09:57:37+00:00,2012-02-21 14:19:12+00:00,301,739,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(qterminal)

include(GNUInstallDirs)

# qterminal version
set(QTERMINAL_VERSION ""0.15.0"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

if(APPLE)
    option(APPLEBUNDLE ""Build as qterminal.app bundle"" ON)
endif()

# we need qpa/qplatformnativeinterface.h for global shortcut

# Minimum Versions
set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QTERMWIDGET_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5Gui ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
if(UNIX)
    find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
    if (NOT APPLE)
        find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
    endif (NOT APPLE)
endif()
find_package(QTermWidget5 ${QTERMWIDGET_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)

include(LXQtPreventInSourceBuilds)
include(LXQtTranslateTs)
include(LXQtCompilerSettings NO_POLICY_SCOPE)
message(STATUS ""Qt version: ${Qt5Core_VERSION}"")

# TODO remove Qxt
message(STATUS ""Using bundled Qxt..."")
set(QXT_INCLUDE_DIRS ""${CMAKE_CURRENT_SOURCE_DIR}/src/third-party"")


if(APPLE)
   find_library(CARBON_LIBRARY Carbon REQUIRED)
   message(STATUS ""CARBON_LIBRARY: ${CARBON_LIBRARY}"")
elseif(UNIX)
   find_package(X11 REQUIRED)
   message(STATUS ""X11_X11_LIB: ${X11_X11_LIB}"")
endif()

add_definitions(
    -DQTERMINAL_VERSION=\""${QTERMINAL_VERSION}\""
)

set(EXE_NAME qterminal)

set(QTERM_SRC
    src/main.cpp
    src/mainwindow.cpp
    src/tabbar.cpp
    src/tabwidget.cpp
    src/termwidget.cpp
    src/termwidgetholder.cpp
    src/terminalconfig.cpp
    src/properties.cpp
    src/propertiesdialog.cpp
    src/bookmarkswidget.cpp
    src/fontdialog.cpp
    src/dbusaddressable.cpp
    src/tab-switcher.cpp
)

set(QTERM_MOC_SRC
    src/qterminalapp.h
    src/mainwindow.h
    src/tabbar.h
    src/tabwidget.h
    src/termwidget.h
    src/termwidgetholder.h
    src/propertiesdialog.h
    src/bookmarkswidget.h
    src/fontdialog.h
    src/tab-switcher.h
)

if (Qt5DBus_FOUND)
    add_definitions(-DHAVE_QDBUS)
    QT5_ADD_DBUS_ADAPTOR(QTERM_SRC src/org.lxqt.QTerminal.Window.xml mainwindow.h MainWindow)
    QT5_ADD_DBUS_ADAPTOR(QTERM_SRC src/org.lxqt.QTerminal.Tab.xml termwidgetholder.h TermWidgetHolder)
    QT5_ADD_DBUS_ADAPTOR(QTERM_SRC src/org.lxqt.QTerminal.Terminal.xml termwidget.h TermWidget)
    QT5_ADD_DBUS_ADAPTOR(QTERM_SRC src/org.lxqt.QTerminal.Process.xml qterminalapp.h QTerminalApp)
    set(QTERM_MOC_SRC ${QTERM_MOC_SRC} src/dbusaddressable.h)
    message(STATUS ""Building with Qt5DBus support"")
endif()

if(NOT QXT_FOUND)
    set(QTERM_SRC ${QTERM_SRC} src/third-party/qxtglobalshortcut.cpp)
    set(QTERM_MOC_SRC ${QTERM_MOC_SRC} src/third-party/qxtglobalshortcut.h)

    if(WIN32)
        set(QTERM_SRC ${QTERM_SRC} src/third-party/qxtglobalshortcut_win.cpp)
    elseif(APPLE)
        set(QTERM_SRC ${QTERM_SRC} src/third-party/qxtglobalshortcut_mac.cpp)
    else()
        set(QTERM_SRC ${QTERM_SRC} src/third-party/qxtglobalshortcut_x11.cpp)
    endif()
endif()

set(QTERM_UI_SRC
    src/forms/qterminal.ui
    src/forms/propertiesdialog.ui
    src/forms/bookmarkswidget.ui
    src/forms/fontdialog.ui
)

set(QTERM_RCC_SRC
    src/icons.qrc
)

qt5_wrap_ui( QTERM_UI ${QTERM_UI_SRC} )
qt5_wrap_cpp( QTERM_MOC ${QTERM_MOC_SRC} )
qt5_add_resources( QTERM_RCC ${QTERM_RCC_SRC} )
lxqt_translate_ts(QTERM_QM
    UPDATE_TRANSLATIONS
        ${UPDATE_TRANSLATIONS}
    SOURCES
        ${QTERM_SRC}
        ${QTERM_UI_SRC}
        ${QTERM_MOC_SRC}
    TRANSLATION_DIR ""src/translations""
)

include_directories(
    ""${PROJECT_SOURCE_DIR}""
    ""${PROJECT_SOURCE_DIR}/src""
    ""${PROJECT_BINARY_DIR}""
    ${QXT_INCLUDE_DIRS}
)
if(X11_FOUND)
    include_directories(""${X11_INCLUDE_DIR}"")
endif()


# TODO/FIXME: apple bundle
set(GUI_TYPE """")
set(APPLE_BUNDLE_SOURCES """")
if(APPLEBUNDLE)
    add_definitions(-DAPPLE_BUNDLE)
    set(GUI_TYPE MACOSX_BUNDLE)

    # create Info.plist file
    set(MACOSX_BUNDLE_ICON_FILE qterminal.icns)
    set(MACOSX_BUNDLE_INFO_STRING ""QTerminal ${QTERMINAL_VERSION}"")
    set(MACOSX_BUNDLE_GUI_IDENTIFIER ""com.qterminal"")
    set(MACOSX_BUNDLE_LONG_VERSION_STRING ""${QTERMINAL_VERSION}"")
    set(MACOSX_BUNDLE_BUNDLE_NAME ""${EXE_NAME}"")
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ""${QTERMINAL_VERSION}"")
    set(MACOSX_BUNDLE_BUNDLE_VERSION ""${QTERMINAL_VERSION}"")
    set(MACOSX_BUNDLE_COPYRIGHT ""(c) Petr Vanek &lt;petr@yarpen.cz&gt;"")

    set_source_files_properties(""${CMAKE_CURRENT_SOURCE_DIR}/src/macosx/qterminal.icns""
        PROPERTIES MACOSX_PACKAGE_LOCATION Resources
    )
    # use icon for app bundle to be visible in finder
    set(APPLE_BUNDLE_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}/src/macosx/qterminal.icns"")
else()
    set(TRANSLATIONS_DIR ""${CMAKE_INSTALL_FULL_DATADIR}/qterminal/translations"")
    add_definitions(-DTRANSLATIONS_DIR=\""${TRANSLATIONS_DIR}\"")
endif()

add_executable(${EXE_NAME} ${GUI_TYPE}
    ${QTERM_SRC}
    ${QTERM_UI}
    ${QTERM_MOC}
    ${QTERM_RCC}
    ${APPLE_BUNDLE_SOURCES}
    ${QTERM_QM}
)

target_link_libraries(${EXE_NAME}
    Qt5::Gui
    qtermwidget5
    util
)
if(QXT_FOUND)
    target_link_libraries(${EXE_NAME} ${QXT_CORE_LIB} ${QXT_GUI_LIB})
endif()

if (Qt5DBus_FOUND)
    target_link_libraries(${EXE_NAME} ${Qt5DBus_LIBRARIES})
endif()

if(APPLE)
    target_link_libraries(${EXE_NAME} ${CARBON_LIBRARY})
elseif(UNIX)
    target_link_libraries(${EXE_NAME} Qt5::X11Extras)
endif()

if(X11_FOUND)
    target_link_libraries(${EXE_NAME} ${X11_X11_LIB})
endif()


install(FILES
    qterminal.desktop
    qterminal_drop.desktop
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/applications""
)

install(FILES
    qterminal.appdata.xml
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/appdata""
)

if(NOT APPLEBUNDLE)
    install(TARGETS ${EXE_NAME} RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}"")
    install(FILES ${QTERM_QM} DESTINATION ${TRANSLATIONS_DIR})
    install(FILES src/icons/qterminal.png DESTINATION ""${CMAKE_INSTALL_DATADIR}/icons/hicolor/64x64/apps"")
else()
    message(STATUS ""Building qterminal.app bundle"")

    install(CODE ""message(STATUS \""Cleaning previously installed bundle (rm -r)\"")"")
    install(CODE ""execute_process(COMMAND rm -r ${CMAKE_INSTALL_PREFIX}/${EXE_NAME}.app)"")

    install(TARGETS ${EXE_NAME} DESTINATION ""${CMAKE_INSTALL_PREFIX}"")

    # helper stuff to create real apple bundle.
    # Black magic is summoned here...
    if(APPLEBUNDLE_STANDALONE)
        message(STATUS ""APPLEBUNDLE_STANDALONE"")
        configure_file(""${CMAKE_SOURCE_DIR}/bundle.cmake.in"" ""${CMAKE_CURRENT_BINARY_DIR}/bundle.cmake"" @ONLY)
        install(SCRIPT ""${CMAKE_SOURCE_DIR}/bundle.cmake"")
    endif()

    # bundle required keytabs from the qtermwidget package as well
    install(CODE ""message(STATUS \""Bundling (cp) keytab files from ${QTERMWIDGET_SHARE}/qtermwidget/\"")"")
    install(CODE ""execute_process(COMMAND cp -r ${QTERMWIDGET_SHARE}/qtermwidget/ ${CMAKE_INSTALL_PREFIX}/${EXE_NAME}.app/Contents/Resources)"")

    install(FILES ${QTERM_QM} DESTINATION ${CMAKE_INSTALL_PREFIX}/${EXE_NAME}.app/Contents/Resources/translations)

    # Workaround https://bugreports.qt.io/browse/QTBUG-63324
    add_custom_command(TARGET ${EXE_NAME} POST_BUILD
        COMMAND ""${CMAKE_COMMAND}"" -E touch ""${CMAKE_CURRENT_BINARY_DIR}/${EXE_NAME}.app/Contents/Resources/empty.lproj""
        COMMENT ""Creating Resources/empty.lproj"")
endif()
",3.1.0,3.1
24827,tsdgeos,poppler_mirror,False,False,False,False,False,190,C++,2020-04-27 20:53:23+00:00,2016-05-24 22:20:22+00:00,7,6543,"project(poppler)

cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

include(PopplerDefaults)
include(PopplerMacros)
include(MacroOptionalFindPackage)
find_package(PkgConfig)
include(MacroEnsureVersion)
include(MacroBoolTo01)
if (WIN32)
  message(""-- Using win32 threads"")
else()
  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
  find_package(Threads)
endif()
include(TestBigEndian)
test_big_endian(WORDS_BIGENDIAN)
include(CheckFileOffsetBits)
CHECK_FILE_OFFSET_BITS()

include(GNUInstallDirs)

set(ENABLE_FUZZER FALSE)

find_package (ECM 1.6.0 QUIET NO_MODULE)
if (ECM_FOUND)
    include(""${ECM_MODULE_DIR}/ECMEnableSanitizers.cmake"")

    if(ECM_ENABLE_SANITIZERS MATCHES fuzzer)
        set(ENABLE_FUZZER TRUE)
    endif()
endif()

set(POPPLER_MAJOR_VERSION ""0"")
set(POPPLER_MINOR_VERSION ""87"")
set(POPPLER_MICRO_VERSION ""0"")
set(POPPLER_VERSION ""${POPPLER_MAJOR_VERSION}.${POPPLER_MINOR_VERSION}.${POPPLER_MICRO_VERSION}"")

set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_EXTENSIONS OFF)

# command line switches
option(ENABLE_UNSTABLE_API_ABI_HEADERS ""Install API/ABI unstable xpdf headers."" OFF)
option(BUILD_GTK_TESTS ""Whether to compile the GTK+ test programs."" ON)
option(BUILD_QT5_TESTS ""Whether to compile the Qt5 test programs."" ON)
option(BUILD_CPP_TESTS ""Whether to compile the CPP test programs."" ON)
option(ENABLE_SPLASH ""Build the Splash graphics backend."" ON)
option(ENABLE_UTILS ""Compile poppler command line utils."" ON)
option(ENABLE_CPP ""Compile poppler cpp wrapper."" ON)
option(ENABLE_GLIB ""Compile poppler glib wrapper."" ON)
option(ENABLE_GOBJECT_INTROSPECTION ""Whether to generate GObject introspection."" ON)
option(ENABLE_GTK_DOC ""Whether to generate glib API documentation."" OFF)
option(ENABLE_QT5 ""Compile poppler qt5 wrapper."" ON)
set(ENABLE_LIBOPENJPEG ""openjpeg2"" CACHE STRING ""Use libopenjpeg for JPX streams. Possible values: openjpeg2, unmaintained, none. 'unmaintained' gives you the internal unmaintained decoder. Use at your own risk. 'none' compiles no JPX decoder at all. Default: openjpeg2"")
set(ENABLE_CMS ""lcms2"" CACHE STRING ""Use color management system. Possible values: lcms2, none. 'none' disables color management system."")
set(ENABLE_DCTDECODER ""libjpeg"" CACHE STRING ""Use libjpeg for DCT streams. Possible values: libjpeg, unmaintained, none. will use libjpeg if available or fail if not. 'unmaintained' gives you the internal unmaintained decoder. Use at your own risk. 'none' compiles no DCT decoder at all. Default: libjpeg"")
option(ENABLE_LIBCURL ""Build libcurl based HTTP support."" ON)
option(ENABLE_ZLIB ""Build with zlib."" ON)
option(ENABLE_ZLIB_UNCOMPRESS ""Use zlib to uncompress flate streams (not totally safe)."" OFF)
option(USE_FLOAT ""Use single precision arithmetic in the Splash backend"" OFF)
option(BUILD_SHARED_LIBS ""Build poppler as a shared library"" ON)
option(RUN_GPERF_IF_PRESENT ""Run gperf if it is found"" ON)
if(WIN32)
  option(ENABLE_RELOCATABLE ""Do not hardcode the poppler library location (on Windows)."" ON)
else()
  set(ENABLE_RELOCATABLE OFF)
endif()
option(EXTRA_WARN ""Enable extra compile warnings"" OFF)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

set(TESTDATADIR ""${CMAKE_SOURCE_DIR}/../test"" CACHE STRING ""Specify test data dir."")
if(NOT (EXISTS ${TESTDATADIR} AND EXISTS ${TESTDATADIR}/test-poppler.c))
  message(WARNING ""
 No test data found in $testdatadir.
 You will not be able to run 'make test' successfully.

 The test data is not included in the source packages
 and is also not part of the main git repository. Instead,
 you can checkout the test data from its own git
 repository with:

   git clone git://git.freedesktop.org/git/poppler/test

 You should checkout the test data as a sibling of your
 poppler source folder or specify the location of your
 checkout with -DTESTDATADIR=/path/to/checkoutdir/test.
  "")
endif()

if(WIN32)
  set(_default_fontconfiguration ""win32"")
elseif(ANDROID)
  # on android we don't have fontconfig and we don't want windows-specific code
  set(_default_fontconfiguration ""generic"")
else()
  set(_default_fontconfiguration ""fontconfig"")
endif()
set(FONT_CONFIGURATION ""${_default_fontconfiguration}"" CACHE STRING ""The font configuration backend (win32|generic|fontconfig)."")
string(TOLOWER ""${FONT_CONFIGURATION}"" font_configuration)
set(WITH_FONTCONFIGURATION_WIN32 OFF)
set(WITH_FONTCONFIGURATION_FONTCONFIG OFF)
if(font_configuration STREQUAL ""win32"")
  set(WITH_FONTCONFIGURATION_WIN32 ON)
elseif(font_configuration STREQUAL ""fontconfig"")
  set(WITH_FONTCONFIGURATION_FONTCONFIG ON)
elseif(font_configuration STREQUAL ""generic"")
  message(STATUS ""no fontconfig or win32 specific code"")
else()
  message(FATAL_ERROR ""Invalid font configuration setting: ${FONT_CONFIGURATION}"")
endif()

# Enable these unconditionally.
set(OPI_SUPPORT ON)
set(TEXTOUT_WORD_LIST ON)

# setting the minimum required versions for some components
set(CAIRO_VERSION ""1.10.0"")
set(GLIB_REQUIRED ""2.41"")

macro_bool_to_01(ENABLE_SPLASH HAVE_SPLASH)
find_package(Freetype REQUIRED)
if(WITH_FONTCONFIGURATION_FONTCONFIG)
  find_package(Fontconfig REQUIRED)
endif()
macro_optional_find_package(JPEG)
macro_optional_find_package(PNG)
macro_optional_find_package(TIFF)
macro_optional_find_package(NSS3)
if(ENABLE_DCTDECODER STREQUAL ""libjpeg"")
  if(JPEG_FOUND)
    set(ENABLE_LIBJPEG ${JPEG_FOUND})
  else()
    message(FATAL_ERROR ""Install libjpeg before trying to build poppler. You can also decide to use the internal unmaintained DCT decoder or none at all."")
  endif()
  set(HAVE_DCT_DECODER ON)
elseif(ENABLE_DCTDECODER STREQUAL ""unmaintained"")
  set(ENABLE_LIBJPEG OFF)
  set(HAVE_DCT_DECODER ON)
elseif(ENABLE_DCTDECODER STREQUAL ""none"")
  set(ENABLE_LIBJPEG OFF)
  set(HAVE_DCT_DECODER OFF)
else()
  message(FATAL_ERROR ""Invalid ENABLE_DCTDECODER value."")
endif()

if (ENABLE_QT5)
  find_package(Qt5Core)
  find_package(Qt5Gui)
  find_package(Qt5Xml)
  find_package(Qt5Widgets)
  find_package(Qt5Test)
  if (NOT (Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Xml_FOUND AND Qt5Widgets_FOUND AND Qt5Test_FOUND))
    message(""-- Package Qt5Core or Qt5Gui or Qt5Xml or Qt5Widgets or Qt5Test not found"")
    set(ENABLE_QT5 OFF)
  endif()
endif()

macro_optional_find_package(Cairo ${CAIRO_VERSION})
if(CAIRO_FOUND)
  set(HAVE_CAIRO ${CAIRO_FOUND})
  set(CAIRO_FEATURE ""#define POPPLER_HAS_CAIRO 1"")
  set(CAIRO_REQ ""cairo"")
  set(POPPLER_GLIB_DISABLE_DEPRECATED """")
  set(POPPLER_GLIB_DISABLE_SINGLE_INCLUDES """")
  if(ENABLE_GLIB)
    macro_optional_find_package(GLIB)
    if(NOT GLIB_FOUND)
      set(ENABLE_GLIB OFF)
    endif()
  endif()
  if(ENABLE_GLIB)
    if(ENABLE_GOBJECT_INTROSPECTION)
      # Check for introspection
      macro_optional_find_package(GObjectIntrospection 0.9.12)
      set(HAVE_INTROSPECTION ${INTROSPECTION_FOUND})
    endif()
    set(POPPLER_GLIB_DISABLE_DEPRECATED ""${POPPLER_GLIB_DISABLE_DEPRECATED} -DG_DISABLE_DEPRECATED"")
    set(POPPLER_GLIB_DISABLE_SINGLE_INCLUDES ""${POPPLER_GLIB_DISABLE_SINGLE_INCLUDES} -DG_DISABLE_SINGLE_INCLUDES"")
    macro_optional_find_package(GTK)
  endif()
else()
  set(CAIRO_FEATURE ""#undef POPPLER_HAS_CAIRO"")
  set(ENABLE_GLIB OFF)
endif()
if(ENABLE_CPP)
  macro_optional_find_package(Iconv)
  set(ENABLE_CPP ${ICONV_FOUND})
  set(HAVE_ICONV ${ICONV_FOUND})
endif()
if(ENABLE_ZLIB)
  find_package(ZLIB)
  set(ENABLE_ZLIB ${ZLIB_FOUND})
endif()
if(ENABLE_ZLIB_UNCOMPRESS AND NOT ENABLE_ZLIB)
  message(""Warning: ENABLE_ZLIB_UNCOMPRESS requires ENABLE_ZLIB"")
  set(ENABLE_ZLIB_UNCOMPRESS FALSE)
endif()
set(WITH_OPENJPEG FALSE)
if(ENABLE_LIBOPENJPEG STREQUAL ""openjpeg2"")
  find_package(OpenJPEG)
  set(WITH_OPENJPEG ${OpenJPEG_FOUND})
  if(NOT OpenJPEG_FOUND OR OPENJPEG_MAJOR_VERSION VERSION_LESS 2)
    message(FATAL_ERROR ""Install libopenjpeg2 before trying to build poppler. You can also decide to use the internal unmaintained JPX decoder or none at all."")
  endif()
  set(HAVE_JPX_DECODER ON)
elseif(ENABLE_LIBOPENJPEG STREQUAL ""unmaintained"")
  set(WITH_OPENJPEG OFF)
  set(HAVE_JPX_DECODER ON)
elseif(ENABLE_LIBOPENJPEG STREQUAL ""none"")
  set(WITH_OPENJPEG OFF)
  set(HAVE_JPX_DECODER OFF)
else()
  message(FATAL_ERROR ""Invalid ENABLE_LIBOPENJPEG value: ${ENABLE_LIBOPENJPEG}"")
endif()
set(ENABLE_LIBOPENJPEG ""${WITH_OPENJPEG}"")
if(ENABLE_CMS STREQUAL ""lcms2"")
  find_package(LCMS2)
  set(USE_CMS ${LCMS2_FOUND})
elseif(NOT ENABLE_CMS STREQUAL ""none"")
  message(FATAL_ERROR ""Invalid ENABLE_CMS value: ${ENABLE_CMS}"")
endif()
if(ENABLE_LIBCURL)
  find_package(CURL)
  if(CURL_FOUND)
    include_directories(SYSTEM ${CURL_INCLUDE_DIR})
    set(POPPLER_HAS_CURL_SUPPORT ON)
  else()
    set(ENABLE_LIBCURL OFF)
  endif()
endif()

if(MINGW)
  # Use mingw's ansi stdio extensions
  add_definitions(-D__USE_MINGW_ANSI_STDIO=1)
endif()
if(FONTCONFIG_FOUND)
  add_definitions(${FONTCONFIG_DEFINITIONS})
  include_directories(SYSTEM ${FONTCONFIG_INCLUDE_DIR})
endif()
if(WITH_FONTCONFIGURATION_WIN32)
  if(MINGW)
    # Set the minimum required Internet Explorer version to 5.0
    add_definitions(-D_WIN32_IE=0x0500)
  endif()
endif()
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/fofi
  ${CMAKE_CURRENT_SOURCE_DIR}/goo
  ${CMAKE_CURRENT_SOURCE_DIR}/poppler
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}/poppler
  SYSTEM
  ${FREETYPE_INCLUDE_DIRS}
)

if(ENABLE_ZLIB)
  include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})
endif()

if (NSS3_FOUND)
  set(ENABLE_NSS3 ON)
endif()
if(JPEG_FOUND)
  include_directories(SYSTEM ${JPEG_INCLUDE_DIR})
endif()
if(PNG_FOUND)
  include_directories(SYSTEM ${PNG_INCLUDE_DIR})
  set(ENABLE_LIBPNG ON)
endif()
if(TIFF_FOUND)
  include_directories(SYSTEM ${TIFF_INCLUDE_DIR})
  set(ENABLE_LIBTIFF ON)
endif()
if(OpenJPEG_FOUND)
  include_directories(SYSTEM ${OPENJPEG_INCLUDE_DIRS})
endif()
if(LCMS2_FOUND)
  include_directories(SYSTEM ${LCMS2_INCLUDE_DIR})
endif()

if(ENABLE_SPLASH)
  find_package(Boost 1.58.0)
  if(Boost_FOUND)
    include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
    set(USE_BOOST_HEADERS ON)
  endif()
endif()

# Recent versions of poppler-data install a .pc file.
# Use it to determine the encoding data path, if available.
# Default to the same prefix otherwise.
pkg_check_modules(POPPLER_DATA poppler-data)
if(POPPLER_DATA_FOUND)
  execute_process(COMMAND ""${PKG_CONFIG_EXECUTABLE}"" --variable=poppler_datadir poppler-data
                  RESULT_VARIABLE _result_var
                  OUTPUT_VARIABLE _output_var OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(_result_var STREQUAL ""0"" AND NOT _output_var STREQUAL """")
    set(POPPLER_DATADIR ""${_output_var}"")
  endif()
endif()
if(NOT DEFINED POPPLER_DATADIR)
  set(POPPLER_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/poppler"")
endif()

if(EXTRA_WARN)
  set(CMAKE_C_FLAGS ""-Wall ${CMAKE_C_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${DEFAULT_COMPILE_WARNINGS_EXTRA} ${CMAKE_CXX_FLAGS}"")
else()
  set(CMAKE_C_FLAGS ""-Wall ${CMAKE_C_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${DEFAULT_COMPILE_WARNINGS} ${CMAKE_CXX_FLAGS}"")
endif()

include(ConfigureChecks.cmake)
configure_file(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
configure_file(poppler/poppler-config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/poppler/poppler-config.h)

find_program(GPERF gperf)

set(poppler_SRCS
  goo/gbase64.cc
  goo/gbasename.cc
  goo/gfile.cc
  goo/GooTimer.cc
  goo/GooString.cc
  goo/NetPBMWriter.cc
  goo/PNGWriter.cc
  goo/TiffWriter.cc
  goo/JpegWriter.cc
  goo/ImgWriter.cc
  goo/gstrtod.cc
  goo/grandom.cc
  goo/glibc.cc
  goo/glibc_strtok_r.cc
  fofi/FoFiBase.cc
  fofi/FoFiEncodings.cc
  fofi/FoFiTrueType.cc
  fofi/FoFiType1.cc
  fofi/FoFiType1C.cc
  fofi/FoFiIdentifier.cc
  poppler/Annot.cc
  poppler/Array.cc
  poppler/CachedFile.cc
  poppler/Catalog.cc
  poppler/CharCodeToUnicode.cc
  poppler/CMap.cc
  poppler/DateInfo.cc
  poppler/Decrypt.cc
  poppler/Dict.cc
  poppler/Error.cc
  poppler/FileSpec.cc
  poppler/FontEncodingTables.cc
  poppler/Form.cc
  poppler/FontInfo.cc
  poppler/Function.cc
  poppler/Gfx.cc
  poppler/GfxFont.cc
  poppler/GfxState.cc
  poppler/GlobalParams.cc
  poppler/Hints.cc
  poppler/JArithmeticDecoder.cc
  poppler/JBIG2Stream.cc
  poppler/Lexer.cc
  poppler/Link.cc
  poppler/Linearization.cc
  poppler/LocalPDFDocBuilder.cc
  poppler/MarkedContentOutputDev.cc
  poppler/NameToCharCode.cc
  poppler/Object.cc
  poppler/OptionalContent.cc
  poppler/Outline.cc
  poppler/OutputDev.cc
  poppler/Page.cc
  poppler/PageTransition.cc
  poppler/Parser.cc
  poppler/PDFDoc.cc
  poppler/PDFDocEncoding.cc
  poppler/PDFDocFactory.cc
  poppler/ProfileData.cc
  poppler/PreScanOutputDev.cc
  poppler/PSTokenizer.cc
  poppler/SignatureInfo.cc
  poppler/Stream.cc
  poppler/StructTreeRoot.cc
  poppler/StructElement.cc
  poppler/UnicodeMap.cc
  poppler/UnicodeMapFuncs.cc
  poppler/UnicodeTypeTable.cc
  poppler/UTF.cc
  poppler/XRef.cc
  poppler/PSOutputDev.cc
  poppler/TextOutputDev.cc
  poppler/PageLabelInfo.cc
  poppler/SecurityHandler.cc
  poppler/StdinCachedFile.cc
  poppler/StdinPDFDocBuilder.cc
  poppler/Sound.cc
  poppler/ViewerPreferences.cc
  poppler/Movie.cc
  poppler/Rendition.cc
  poppler/CertificateInfo.cc
  poppler/BBoxOutputDev.cc
)
set(poppler_LIBS ${FREETYPE_LIBRARIES})
if(ENABLE_SPLASH)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/SplashOutputDev.cc
    splash/Splash.cc
    splash/SplashBitmap.cc
    splash/SplashClip.cc
    splash/SplashFTFont.cc
    splash/SplashFTFontEngine.cc
    splash/SplashFTFontFile.cc
    splash/SplashFont.cc
    splash/SplashFontEngine.cc
    splash/SplashFontFile.cc
    splash/SplashFontFileID.cc
    splash/SplashPath.cc
    splash/SplashPattern.cc
    splash/SplashScreen.cc
    splash/SplashState.cc
    splash/SplashXPath.cc
    splash/SplashXPathScanner.cc
  )
endif()
if(FONTCONFIG_FOUND)
  set(poppler_LIBS ${poppler_LIBS} ${FONTCONFIG_LIBRARIES})
endif()

if(JPEG_FOUND)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/DCTStream.cc
  )
  set(poppler_LIBS ${poppler_LIBS} ${JPEG_LIBRARIES})
endif()
if(ENABLE_ZLIB)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/FlateEncoder.cc
  )
  set(poppler_LIBS ${poppler_LIBS} ${ZLIB_LIBRARIES})
endif()
if(ENABLE_ZLIB_UNCOMPRESS)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/FlateStream.cc
  )
endif()
if(ENABLE_LIBCURL)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/CurlCachedFile.cc
    poppler/CurlPDFDocBuilder.cc
  )
  set(poppler_LIBS ${poppler_LIBS} ${CURL_LIBRARIES})
endif()
if (ENABLE_NSS3)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/SignatureHandler.cc
  )
  if(${CMAKE_VERSION} VERSION_LESS ""3.6.0"")
    set(poppler_LIBS ${poppler_LIBS} ${NSS3_LIBRARIES})
    include_directories(SYSTEM ${NSS3_INCLUDE_DIRS})
  else()
    set(poppler_LIBS ${poppler_LIBS} PkgConfig::NSS3)
  endif()
endif()
if (OpenJPEG_FOUND)
  set(poppler_SRCS ${poppler_SRCS}
    poppler/JPEG2000Stream.cc
  )
  set(poppler_LIBS ${poppler_LIBS} openjp2)
else ()
  set(poppler_SRCS ${poppler_SRCS}
    poppler/JPXStream.cc
  )
endif()
if(USE_CMS)
  set(poppler_LIBS ${poppler_LIBS} ${LCMS2_LIBRARIES})
endif()
if(WIN32)
  # use clean APIs
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  # gdi32 is needed under win32
  set(poppler_LIBS ${poppler_LIBS} gdi32)
endif()
if(PNG_FOUND)
  set(poppler_LIBS ${poppler_LIBS} ${PNG_LIBRARIES})
endif()
if(TIFF_FOUND)
  set(poppler_LIBS ${poppler_LIBS} ${TIFF_LIBRARIES})
endif()

if (GPERF AND RUN_GPERF_IF_PRESENT)
    macro(ADD_GPERF_FILE input)
        add_custom_command(OUTPUT poppler/${input}.c
                       COMMAND gperf poppler/${input}.gperf > ${CMAKE_CURRENT_BINARY_DIR}/poppler/${input}.c
                       COMMAND gperf poppler/${input}.gperf > ${CMAKE_CURRENT_SOURCE_DIR}/poppler/${input}.pregenerated.c
                       DEPENDS poppler/${input}.gperf
                       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

        set(poppler_SRCS ${poppler_SRCS}
            poppler/${input}.c
        )
    endmacro()
else()
    macro(ADD_GPERF_FILE input)
        set(poppler_SRCS ${poppler_SRCS}
            poppler/${input}.pregenerated.c
        )
    endmacro()
endif()

ADD_GPERF_FILE(CourierWidths)
ADD_GPERF_FILE(CourierBoldWidths)
ADD_GPERF_FILE(CourierBoldObliqueWidths)
ADD_GPERF_FILE(CourierObliqueWidths)
ADD_GPERF_FILE(HelveticaWidths)
ADD_GPERF_FILE(HelveticaBoldWidths)
ADD_GPERF_FILE(HelveticaBoldObliqueWidths)
ADD_GPERF_FILE(HelveticaObliqueWidths)
ADD_GPERF_FILE(SymbolWidths)
ADD_GPERF_FILE(TimesBoldWidths)
ADD_GPERF_FILE(TimesBoldItalicWidths)
ADD_GPERF_FILE(TimesItalicWidths)
ADD_GPERF_FILE(TimesRomanWidths)
ADD_GPERF_FILE(ZapfDingbatsWidths)

if(MSVC)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
add_library(poppler STATIC ${poppler_SRCS})
else()
add_library(poppler ${poppler_SRCS})
endif()
set_target_properties(poppler PROPERTIES VERSION 98.0.0 SOVERSION 98)
if(MINGW AND BUILD_SHARED_LIBS)
    get_target_property(POPPLER_SOVERSION poppler SOVERSION)
    set_target_properties(poppler PROPERTIES SUFFIX ""-${POPPLER_SOVERSION}${CMAKE_SHARED_LIBRARY_SUFFIX}"")
endif()
target_link_libraries(poppler LINK_PRIVATE ${poppler_LIBS})
if(CMAKE_USE_PTHREADS_INIT)
   target_link_libraries(poppler LINK_PRIVATE Threads::Threads)
endif()
install(TARGETS poppler RUNTIME DESTINATION bin LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

if(ENABLE_UNSTABLE_API_ABI_HEADERS)
  install(FILES
    poppler/Annot.h
    poppler/Array.h
    poppler/CachedFile.h
    poppler/Catalog.h
    poppler/CharCodeToUnicode.h
    poppler/CMap.h
    poppler/DateInfo.h
    poppler/Decrypt.h
    poppler/Dict.h
    poppler/Error.h
    poppler/FileSpec.h
    poppler/FontEncodingTables.h
    poppler/FontInfo.h
    poppler/Form.h
    poppler/Function.h
    poppler/Gfx.h
    poppler/GfxFont.h
    poppler/GfxState.h
    poppler/GfxState_helpers.h
    poppler/GlobalParams.h
    poppler/Hints.h
    poppler/JArithmeticDecoder.h
    poppler/JBIG2Stream.h
    poppler/Lexer.h
    poppler/Link.h
    poppler/Linearization.h
    poppler/LocalPDFDocBuilder.h
    poppler/MarkedContentOutputDev.h
    poppler/Movie.h
    poppler/NameToCharCode.h
    poppler/Object.h
    poppler/OptionalContent.h
    poppler/Outline.h
    poppler/OutputDev.h
    poppler/Page.h
    poppler/PageTransition.h
    poppler/Parser.h
    poppler/PDFDoc.h
    poppler/PDFDocBuilder.h
    poppler/PDFDocEncoding.h
    poppler/PDFDocFactory.h
    poppler/PopplerCache.h
    poppler/ProfileData.h
    poppler/PreScanOutputDev.h
    poppler/PSTokenizer.h
    poppler/Rendition.h
    poppler/CertificateInfo.h
    poppler/Stream-CCITT.h
    poppler/Stream.h
    poppler/StructElement.h
    poppler/StructTreeRoot.h
    poppler/UnicodeMap.h
    poppler/UnicodeMapFuncs.h
    poppler/UnicodeMapTables.h
    poppler/UnicodeTypeTable.h
    poppler/UnicodeCClassTables.h
    poppler/UnicodeCompTables.h
    poppler/UnicodeDecompTables.h
    poppler/ViewerPreferences.h
    poppler/XRef.h
    poppler/CharTypes.h
    poppler/ErrorCodes.h
    poppler/NameToUnicodeTable.h
    poppler/PSOutputDev.h
    poppler/TextOutputDev.h
    poppler/SecurityHandler.h
    poppler/StdinCachedFile.h
    poppler/StdinPDFDocBuilder.h
    poppler/BBoxOutputDev.h
    poppler/UTF.h
    poppler/Sound.h
    ${CMAKE_CURRENT_BINARY_DIR}/poppler/poppler-config.h
    DESTINATION include/poppler)
  install(FILES
    goo/GooTimer.h
    goo/GooString.h
    goo/gmem.h
    goo/gdir.h
    goo/gfile.h
    goo/ImgWriter.h
    goo/GooCheckedOps.h
    goo/GooLikely.h
    goo/gstrtod.h
    goo/grandom.h
    DESTINATION include/poppler/goo)
  if(PNG_FOUND)
    install(FILES
      goo/PNGWriter.h
      DESTINATION include/poppler/goo)
  endif()
  if(TIFF_FOUND)
    install(FILES
      goo/TiffWriter.h
      DESTINATION include/poppler/goo)
  endif()
  if(JPEG_FOUND)
    install(FILES
      goo/JpegWriter.h
      DESTINATION include/poppler/goo)
  endif()
  install(FILES
    fofi/FoFiBase.h
    fofi/FoFiEncodings.h
    fofi/FoFiTrueType.h
    fofi/FoFiType1.h
    fofi/FoFiType1C.h
    fofi/FoFiIdentifier.h
    DESTINATION include/poppler/fofi)
  if(ENABLE_LIBCURL)
    install(FILES
      poppler/CurlCachedFile.h
      poppler/CurlPDFDocBuilder.h
      DESTINATION include/poppler)
  endif()
  if(OpenJPEG_FOUND)
    install(FILES
      poppler/JPEG2000Stream.h
      DESTINATION include/poppler)
  else()
    install(FILES
      poppler/JPXStream.h
      DESTINATION include/poppler)
  endif()
  if(ENABLE_SPLASH)
    install(FILES
      poppler/SplashOutputDev.h
      DESTINATION include/poppler)
    install(FILES
      splash/Splash.h
      splash/SplashBitmap.h
      splash/SplashClip.h
      splash/SplashErrorCodes.h
      splash/SplashFTFont.h
      splash/SplashFTFontEngine.h
      splash/SplashFTFontFile.h
      splash/SplashFont.h
      splash/SplashFontEngine.h
      splash/SplashFontFile.h
      splash/SplashFontFileID.h
      splash/SplashGlyphBitmap.h
      splash/SplashMath.h
      splash/SplashPath.h
      splash/SplashPattern.h
      splash/SplashScreen.h
      splash/SplashState.h
      splash/SplashTypes.h
      splash/SplashXPath.h
      splash/SplashXPathScanner.h
      DESTINATION include/poppler/splash)
  endif()
  if(CAIRO_FOUND)
    install(FILES
      poppler/CairoFontEngine.h
      poppler/CairoOutputDev.h
      poppler/CairoRescaleBox.h
      DESTINATION include/poppler)
  endif()
endif()


if(ENABLE_UTILS)
  add_subdirectory(utils)
endif()
if(ENABLE_GLIB)
  add_subdirectory(glib)
endif()
add_subdirectory(test)
if(ENABLE_QT5)
  add_subdirectory(qt5)
endif()
if(ENABLE_CPP)
  add_subdirectory(cpp)
endif()

set(PKG_CONFIG_VERSION_0_18 TRUE)
if(PKG_CONFIG_EXECUTABLE)
  exec_program(${PKG_CONFIG_EXECUTABLE} ARGS --version RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _output_VAR)
  macro_ensure_version(""0.18"" ""${_output_VAR}"" PKG_CONFIG_VERSION_0_18)
endif()
if(PKG_CONFIG_VERSION_0_18)
  set(PC_REQUIRES """")
  set(PC_REQUIRES_PRIVATE ""Requires.private: poppler = ${POPPLER_VERSION}"")
else()
  set(PC_REQUIRES ""poppler = ${POPPLER_VERSION}"")
  set(PC_REQUIRES_PRIVATE """")
endif()

if(PKG_CONFIG_EXECUTABLE)
  poppler_create_install_pkgconfig(poppler.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  if(ENABLE_SPLASH)
    poppler_create_install_pkgconfig(poppler-splash.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  endif()
  if(ENABLE_QT5)
    poppler_create_install_pkgconfig(poppler-qt5.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  endif()
  if(ENABLE_GLIB)
    poppler_create_install_pkgconfig(poppler-glib.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  endif()
  if(CAIRO_FOUND)
    poppler_create_install_pkgconfig(poppler-cairo.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  endif()
  if(ENABLE_CPP)
    poppler_create_install_pkgconfig(poppler-cpp.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
  endif()
else()
  MESSAGE(STATUS "".pc files will not be installed becasue of missing 'pkg-config'!"")
endif()

message(""Building Poppler with support for:"")
show_end_message(""font configuration"" ${font_configuration})
show_end_message_yesno(""splash output"" ENABLE_SPLASH)
show_end_message_yesno(""cairo output"" CAIRO_FOUND)
show_end_message_yesno(""qt5 wrapper"" ENABLE_QT5)
show_end_message_yesno(""glib wrapper"" ENABLE_GLIB)
show_end_message_yesno(""  introspection"" INTROSPECTION_FOUND)
show_end_message_yesno(""  gtk-doc"" ENABLE_GTK_DOC)
show_end_message_yesno(""cpp wrapper"" ENABLE_CPP)
show_end_message_yesno(""use libjpeg"" ENABLE_LIBJPEG)
show_end_message_yesno(""use libpng"" ENABLE_LIBPNG)
show_end_message_yesno(""use libtiff"" ENABLE_LIBTIFF)
show_end_message_yesno(""use zlib compress"" ENABLE_ZLIB)
show_end_message_yesno(""use zlib uncompress"" ENABLE_ZLIB_UNCOMPRESS)
show_end_message_yesno(""use nss3"" ENABLE_NSS3)
show_end_message_yesno(""use curl"" ENABLE_LIBCURL)
show_end_message_yesno(""use libopenjpeg2"" WITH_OPENJPEG)
show_end_message_yesno(""use lcms2"" USE_CMS)
show_end_message_yesno(""use boost"" Boost_FOUND)
show_end_message_yesno(""command line utils"" ENABLE_UTILS)
show_end_message_yesno(""fuzz target"" ENABLE_FUZZER)
show_end_message(""test data dir"" ${TESTDATADIR})

if(NOT ENABLE_SPLASH AND NOT CAIRO_FOUND)
  message(""Warning: There is no rendering backend enabled"")
endif()

if(NOT ENABLE_LIBJPEG AND HAVE_DCT_DECODER)
  message(""Warning: Using libjpeg is recommended. The internal DCT decoder is unmaintained."")
endif()

if(NOT HAVE_DCT_DECODER)
  message(""Warning: You're not compiling any DCT decoder. Some files will fail to display properly."")
endif()

if(ENABLE_ZLIB_UNCOMPRESS)
  message(""Warning: Using zlib is not totally safe"")
endif()

if(NOT WITH_OPENJPEG AND HAVE_JPX_DECODER)
  message(""Warning: Using libopenjpeg2 is recommended. The internal JPX decoder is unmaintained."")
endif()

if(NOT HAVE_JPX_DECODER)
  message(""Warning: You're not compiling any JPX decoder. Some files will fail to display properly."")
endif()

if(ENABLE_SPLASH AND NOT Boost_FOUND)
  message(""Warning: Use of boost is recommended for better performance."")
endif()

set(ARCHIVE_NAME ${CMAKE_PROJECT_NAME}-${POPPLER_VERSION})
add_custom_target(dist
    COMMAND
        COMMAND git log --stat | fmt --split-only > ${CMAKE_BINARY_DIR}/ChangeLog
        COMMAND git archive --prefix=${ARCHIVE_NAME}/ HEAD > ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar
        COMMAND tar -C ${CMAKE_BINARY_DIR} -rf ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar ChangeLog --transform='s,,${ARCHIVE_NAME}/,' --owner root:0 --group root:0
        COMMAND tar -C ${CMAKE_BINARY_DIR} -rf ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar glib/reference/html --transform='s,,${ARCHIVE_NAME}/,' --owner root:0 --group root:0
        COMMAND xz -9 ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
",3.1.0,3.1
24861,craflin,libnstd,False,False,False,False,False,1,C++,2020-04-13 08:40:28+00:00,2013-10-27 20:26:00+00:00,14,693,"cmake_minimum_required(VERSION 3.1)

project(libnstd)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "".cmake"")

enable_testing()

add_subdirectory(src)
add_subdirectory(test)
",3.1,3.1
24886,spring,pr-downloader,False,False,False,False,False,14,C++,2020-03-30 21:44:39+00:00,2010-08-27 15:36:38+00:00,16,1119,"cmake_minimum_required(VERSION 3.1)
project(pr-downloader)


if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING
      ""Choose the type of build, options are: None DEBUG RELEASE.""
      FORCE)
endif()


if(CMAKE_BUILD_TYPE MATCHES ""DEBUG"")
	add_definitions(""-DDEBUG"")
endif()

set(CMAKE_MODULES_DOWNLOADER ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_MODULES_DOWNLOADER}"")
include(UtilGit)
if (GIT_FOUND)
	git_util_describe(PR_DOWNLOADER_VERSION ""${CMAKE_CURRENT_SOURCE_DIR}/src"" ""*"")
endif()

# Version couldn't be detected, we guess its compiled from tarball
if(""${PR_DOWNLOADER_VERSION}"" STREQUAL """")
	set(PR_DOWNLOADER_VERSION ""tarball"")
endif()

option(PRD_LINK_STATIC ""link pr-downloader.exe static or dynamic"" ON)
option(PRD_DEVELOP_FILES ""install development files (header, libspringdownloader.pc)"" OFF)
option(PRD_DO_INSTALL ""install files"" ON)
option(PRD_ARCHIVE_SUPPORT ""enable archive support"" ON)
option(PRD_CLEAR_COMPILER_FLAGS ""clear all compiler flags"" OFF)
option(PRD_DEFAULT_LOGGER ""use default logger"" ON)

find_package(Jsoncpp)
if (${Jsoncpp_FOUND})
	option(PRD_JSONCPP_INTERNAL ""use bundled JsonCpp"" FALSE)
else()
	option(PRD_JSONCPP_INTERNAL ""use bundled JsonCpp"" TRUE)
endif()

if(PRD_CLEAR_COMPILER_FLAGS)
	set(CMAKE_CXX_FLAGS """")
	set(CMAKE_C_FLAGS """")
	set(CMAKE_EXE_LINKER_FLAGS """")
	set(CMAKE_MODULE_LINKER_FLAGS """")
	set(CMAKE_SHARED_LINKER_FLAGS """")
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

message(STATUS ""PR-Downloader version: ${PR_DOWNLOADER_VERSION}"")
if   (MINGW)
	if(NOT DEFINED ${MINGWLIBS})
		set(MINGWLIBS ""${CMAKE_SOURCE_DIR}/mingwlibs"" CACHE PATH ""Location of the mingwlibs package"")
	endif()
	if(NOT EXISTS ""${MINGWLIBS}"" OR NOT IS_DIRECTORY ""${MINGWLIBS}"")
		message(WARNING ""MINGWLIBS is not a valid directory"")
	endif ()


	if (PRD_LINK_STATIC)
		set(LD_FLAGS ""-static-libstdc++ -static-libgcc"")
		set(CMAKE_EXE_LINKER_FLAGS    ""${CMAKE_EXE_LINKER_FLAGS}    ${LD_FLAGS}"")
		set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${LD_FLAGS}"")
	endif()
	set(CMAKE_LIBRARY_PATH ${MINGWLIBS}/lib ${MINGWLIBS}/dll)
	set(CMAKE_PREFIX_PATH ${MINGWLIBS})
	set(CMAKE_FIND_ROOT_PATH ${MINGWLIBS} ${CMAKE_FIND_ROOT_PATH})
	set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
	set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
	set(CMAKE_SHARED_LIBRARY_PREFIX """")
	set(CMAKE_SHARED_MODULE_PREFIX """")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -O2 -g -DWIN32 -D_WINDOWS"")
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -O2 -g -DWIN32 -D_WINDOWS"")
	set (PRD_BINDIR  "".""                  CACHE PATH ""Where to install binaries"" )
	set (PRD_LIBDIR  "".""                  CACHE PATH ""Where to install libraries"" )
	set (PRD_INCLUDE_DIR  ""include/spring/"" CACHE PATH ""Where to install headers"" )
else ()
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -O0 -g -fPIC"")
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -O0 -g -fPIC"")
	#set(CMAKE_SKIP_BUILD_RPATH  FALSE)
	#set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
	set (PRD_BINDIR  ""bin""                  CACHE PATH ""Where to install binaries"" )
	set (PRD_LIBDIR  ""lib""                  CACHE PATH ""Where to install libraries"" )
	set (PRD_INCLUDE_DIR  ""include/spring/"" CACHE PATH ""Where to install headers"" )
	#set(CMAKE_INSTALL_RPATH ""${PRD_LIBDIR}"")
endif ()

if(WIN32)
	add_definitions(-DUNICODE -D_UNICODE)
endif()

if(MSVC)
	add_definitions(-DWIN32_LEAN_AND_MEAN -DNOMINMAX)
endif()

if (PREFER_STATIC_LIBS)
	#curl dependency
	find_package_static(OpenSSL REQUIRED)
	find_package_static(CURL REQUIRED)
	find_package_static(ZLIB REQUIRED)
else()
	find_package(CURL REQUIRED)
	find_package(ZLIB REQUIRED)
endif()

set(CURL_MIN_VER 7.60)
if (CURL_VERSION_STRING VERSION_LESS ${CURL_MIN_VER})
	message(WARNING ""libcurl ${CURL_VERSION_STRING} found but ${CURL_MIN_VER} is required!"")
endif()


#find_program(CURL_CONFIG_EXECUTABLE NAMES curl-config ONLY_CMAKE_FIND_ROOT_PATH)
#if (CURL_CONFIG_EXECUTABLE-NOTFOUND)
#        message(FATAL_ERROR ""couldn't find curl-config!"")
#else()
#        message(STATUS ""found curl-config: ${CURL_CONFIG_EXECUTABLE}"")
#endif()
#
#	set(CURLCONFIGFLAGS ""--static-libs"")
#else()
#	set(CURLCONFIGFLAGS ""--libs"")
#endif()
#
#execute_process(COMMAND ${CURL_CONFIG_EXECUTABLE} ${CURLCONFIGFLAGS}
#        OUTPUT_VARIABLE CURL_LD_FLAGS
#        OUTPUT_STRIP_TRAILING_WHITESPACE )
#message(STATUS ""Using CURL_LD_FLAGS: ${CURL_LD_FLAGS}"")


if (PRD_JSONCPP_INTERNAL)
        # use bundled JsonCpp
        set(PRD_JSONCPP_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/lib/jsoncpp/include)
        set(PRD_JSONCPP_LIBRARIES """")
else()
        find_package(Jsoncpp REQUIRED)
	set(PRD_JSONCPP_INCLUDE_DIR ${Jsoncpp_INCLUDE_DIR})
	set(PRD_JSONCPP_LIBRARIES ${Jsoncpp_LIBRARY})
endif()


# MINIZIP_FOUND is used in lib & FileSystem
find_package(MiniZip)
if(NOT MINIZIP_FOUND)
	message(STATUS ""libminizip was not found, using integrated"")
	set(MINIZIP_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/lib)
endif()


add_subdirectory(src)


find_program(CLANG_FORMAT_BINARY NAMES clang-format-3.7 clang-format-3.6 clang-format-3.5 clang-format-3.4 clang-format)
if (EXISTS ${CLANG_FORMAT_BINARY})
        file(GLOB_RECURSE files {CMAKE_CURRENT_SOURCE_DIR} *.cpp *.hpp *.h)

        foreach(exclude src/lib ) # exclude some files
                foreach(file in ${files})
                        if (file MATCHES ""^${CMAKE_CURRENT_SOURCE_DIR}/${exclude}"")
                                list(REMOVE_ITEM files ${file})
                        endif()
                endforeach()
        endforeach()
        add_custom_target(format-prd COMMAND ${CLANG_FORMAT_BINARY} -i ${files})
else()
        message(WARNING ""clang-format not found"")
endif()

option(PRD_TESTS ""Enable prd unit tests"" ON)

if (${PRD_TESTS})
	enable_testing()
	add_subdirectory(test)
endif()
",3.1,3.1
24921,QuantStack,xtensor,False,False,False,False,False,84,C++,2020-05-13 22:59:52+00:00,2016-10-30 10:40:13+00:00,1855,2720,"############################################################################
# Copyright (c) Johan Mabille, Sylvain Corlay and Wolf Vollprecht          #
# Copyright (c) QuantStack                                                 #
#                                                                          #
# Distributed under the terms of the BSD 3-Clause License.                 #
#                                                                          #
# The full license is in the file LICENSE, distributed with this software. #
############################################################################

cmake_minimum_required(VERSION 3.1)
project(xtensor)

set(XTENSOR_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Versionning
# ===========

file(STRINGS ""${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_config.hpp"" xtensor_version_defines
     REGEX ""#define XTENSOR_VERSION_(MAJOR|MINOR|PATCH)"")
foreach(ver ${xtensor_version_defines})
    if(ver MATCHES ""#define XTENSOR_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$"")
        set(XTENSOR_VERSION_${CMAKE_MATCH_1} ""${CMAKE_MATCH_2}"" CACHE INTERNAL """")
    endif()
endforeach()
set(${PROJECT_NAME}_VERSION
    ${XTENSOR_VERSION_MAJOR}.${XTENSOR_VERSION_MINOR}.${XTENSOR_VERSION_PATCH})
message(STATUS ""Building xtensor v${${PROJECT_NAME}_VERSION}"")

# Dependencies
# ============

set(xtl_REQUIRED_VERSION 0.6.9)
if(TARGET xtl)
    set(xtl_VERSION ${XTL_VERSION_MAJOR}.${XTL_VERSION_MINOR}.${XTL_VERSION_PATCH})
    # Note: This is not SEMVER compatible comparison
    if( NOT ${xtl_VERSION} VERSION_GREATER_EQUAL ${xtl_REQUIRED_VERSION})
        message(ERROR ""Mismatch xtl versions. Found '${xtl_VERSION}' but requires: '${xtl_REQUIRED_VERSION}'"")
    else()
        message(STATUS ""Found xtl v${xtl_VERSION}"")
    endif()
else()
    find_package(xtl ${xtl_REQUIRED_VERSION} REQUIRED)
    message(STATUS ""Found xtl: ${xtl_INCLUDE_DIRS}/xtl"")
endif()

find_package(nlohmann_json 3.1.1 QUIET)

# Optional dependencies
# =====================

OPTION(XTENSOR_USE_XSIMD ""simd acceleration for xtensor"" OFF)
OPTION(XTENSOR_USE_TBB ""enable parallelization using intel TBB"" OFF)
OPTION(XTENSOR_USE_OPENMP ""enable parallelization using OpenMP"" OFF)
if(XTENSOR_USE_TBB AND XTENSOR_USE_OPENMP)
    message(
        FATAL
        ""XTENSOR_USE_TBB and XTENSOR_USE_OPENMP cannot both be active at once""
    )
endif()

if(XTENSOR_USE_XSIMD)
    set(xsimd_REQUIRED_VERSION 7.4.4)
    if(TARGET xsimd)
        set(xsimd_VERSION ${XSIMD_VERSION_MAJOR}.${XSIMD_VERSION_MINOR}.${XSIMD_VERSION_PATCH})
        # Note: This is not SEMVER compatible comparison
        if( NOT ${xsimd_VERSION} VERSION_GREATER_EQUAL ${xsimd_REQUIRED_VERSION})
            message(ERROR ""Mismatch xsimd versions. Found '${xsimd_VERSION}' but requires: '${xsimd_REQUIRED_VERSION}'"")
        else()
            message(STATUS ""Found xsimd v${xsimd_VERSION}"")
        endif()
    else()
        find_package(xsimd ${xsimd_REQUIRED_VERSION} REQUIRED)
        message(STATUS ""Found xsimd: ${xsimd_INCLUDE_DIRS}/xsimd"")
    endif()
endif()

if(XTENSOR_USE_TBB)
    set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/"")
    find_package(TBB REQUIRED)
    message(STATUS ""Found intel TBB: ${TBB_INCLUDE_DIRS}"")
endif()

if(XTENSOR_USE_OPENMP)
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
        # Set openmp variables now

        # Create private target just for this lib
        # https://cliutils.gitlab.io/modern-cmake/chapters/packages/OpenMP.html
        # Probably not safe for cmake < 3.4 ..
        find_package(Threads REQUIRED)
        add_library(OpenMP::OpenMP_CXX_xtensor IMPORTED INTERFACE)
        set_property(
            TARGET
            OpenMP::OpenMP_CXX_xtensor
            PROPERTY
            INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}
        )
        # Only works if the same flag is passed to the linker; use CMake 3.9+ otherwise (Intel, AppleClang)
        set_property(
            TARGET
            OpenMP::OpenMP_CXX_xtensor
            PROPERTY
            INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_FLAGS} Threads::Threads)

        message(STATUS ""OpenMP Found"")
    else()
        message(FATAL ""Failed to locate OpenMP"")
    endif()
endif()

# Build
# =====

set(XTENSOR_HEADERS
    ${XTENSOR_INCLUDE_DIR}/xtensor/xaccessible.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xaccumulator.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xadapt.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xarray.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xassign.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xaxis_iterator.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xaxis_slice_iterator.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xbroadcast.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xbuffer_adaptor.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xbuilder.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xcomplex.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xcontainer.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xcsv.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xdynamic_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xeval.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xexception.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression_holder.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression_traits.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xfixed.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xfunction.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xfunctor_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xgenerator.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xhistogram.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xindex_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xinfo.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xio.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xiterable.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xiterator.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xjson.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xlayout.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xmanipulation.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xmasked_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xmath.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xmime.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xnoalias.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xnorm.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xnpy.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoffset_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoperation.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly_base.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly_storage.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xpad.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xrandom.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xreducer.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xrepeat.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xscalar.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xsemantic.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xset_operation.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xshape.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xslice.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xsort.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xstorage.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrided_view.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrided_view_base.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrides.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_config.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_forward.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_simd.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xutils.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xvectorize.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xview.hpp
    ${XTENSOR_INCLUDE_DIR}/xtensor/xview_utils.hpp
)

add_library(xtensor INTERFACE)

target_include_directories(xtensor INTERFACE
    $<BUILD_INTERFACE:${XTENSOR_INCLUDE_DIR}>
    $<INSTALL_INTERFACE:include>)

target_compile_features(xtensor INTERFACE cxx_std_14)

target_link_libraries(xtensor INTERFACE xtl)

OPTION(XTENSOR_ENABLE_ASSERT ""xtensor bound check"" OFF)
OPTION(XTENSOR_CHECK_DIMENSION ""xtensor dimension check"" OFF)
OPTION(BUILD_TESTS ""xtensor test suite"" OFF)
OPTION(BUILD_BENCHMARK ""xtensor benchmark"" OFF)
OPTION(DOWNLOAD_GTEST ""build gtest from downloaded sources"" OFF)
OPTION(DOWNLOAD_GBENCHMARK ""download google benchmark and build from source"" ON)
OPTION(DEFAULT_COLUMN_MAJOR ""set default layout to column major"" OFF)
OPTION(DISABLE_VS2017 ""disables the compilation of some test with Visual Studio 2017"" OFF)
OPTION(CPP17 ""enables C++17"" OFF)
OPTION(CPP20 ""enables C++20 (experimental)"" OFF)
OPTION(XTENSOR_DISABLE_EXCEPTIONS ""Disable C++ exceptions"" OFF)
OPTION(DISABLE_MSVC_ITERATOR_CHECK ""Disable the MVSC iterator check"" ON)

if(DOWNLOAD_GTEST OR GTEST_SRC_DIR)
    set(BUILD_TESTS ON)
endif()

if(XTENSOR_ENABLE_ASSERT OR XTENSOR_CHECK_DIMENSION)
    add_definitions(-DXTENSOR_ENABLE_ASSERT)
endif()

if(XTENSOR_CHECK_DIMENSION)
    add_definitions(-DXTENSOR_ENABLE_CHECK_DIMENSION)
endif()

if(DEFAULT_COLUMN_MAJOR)
    add_definitions(-DXTENSOR_DEFAULT_LAYOUT=layout_type::column_major)
endif()

if(DISABLE_VS2017)
    add_definitions(-DDISABLE_VS2017)
endif()

if(MSVC AND DISABLE_MSVC_ITERATOR_CHECK)
    add_compile_definitions($<$<CONFIG:Debug>:_ITERATOR_DEBUG_LEVEL=0>)
endif()

if(BUILD_TESTS)
    add_subdirectory(test)
endif()

if(BUILD_BENCHMARK)
    add_subdirectory(benchmark)
endif()

if(XTENSOR_USE_OPENMP)
    # Link xtensor itself to OpenMP to propagate to user projects
    target_link_libraries(xtensor INTERFACE OpenMP::OpenMP_CXX_xtensor)
endif()

# Installation
# ============

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

install(TARGETS xtensor
        EXPORT ${PROJECT_NAME}-targets)

# Makes the project importable from the build directory
export(EXPORT ${PROJECT_NAME}-targets
       FILE ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake"")

install(FILES ${XTENSOR_HEADERS}
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xtensor)

set(XTENSOR_CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE
    STRING ""install path for xtensorConfig.cmake"")

configure_package_config_file(${PROJECT_NAME}Config.cmake.in
                              ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake""
                              INSTALL_DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})

# xtensor is header-only and does not depend on the architecture.
# Remove CMAKE_SIZEOF_VOID_P from xtensorConfigVersion.cmake so that an xtensorConfig.cmake
# generated for a 64 bit target can be used for 32 bit targets and vice versa.
set(_XTENSOR_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
unset(CMAKE_SIZEOF_VOID_P)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
                                 VERSION ${${PROJECT_NAME}_VERSION}
                                 COMPATIBILITY AnyNewerVersion)
set(CMAKE_SIZEOF_VOID_P ${_XTENSOR_CMAKE_SIZEOF_VOID_P})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})
install(EXPORT ${PROJECT_NAME}-targets
        FILE ${PROJECT_NAME}Targets.cmake
        DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})

configure_file(${PROJECT_NAME}.pc.in
               ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
                @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc""
        DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig/"")

# Write single include
# ====================

function(PREPEND var prefix)
   set(listVar """")
   foreach(f ${ARGN})
      list(APPEND listVar ""${prefix}${f}"")
   endforeach(f)
   set(${var} ""${listVar}"" PARENT_SCOPE)
endfunction()

function(POSTFIX var postfix)
   set(listVar """")
   foreach(f ${ARGN})
      list(APPEND listVar ""${f}${postfix}"")
   endforeach(f)
   set(${var} ""${listVar}"" PARENT_SCOPE)
endfunction()

set(XTENSOR_SINGLE_INCLUDE ${XTENSOR_HEADERS})
string(REPLACE ""${XTENSOR_INCLUDE_DIR}/"" """" XTENSOR_SINGLE_INCLUDE ""${XTENSOR_SINGLE_INCLUDE}"")
list(REMOVE_ITEM XTENSOR_SINGLE_INCLUDE
    xtensor/xexpression_holder.hpp
    xtensor/xjson.hpp
    xtensor/xmime.hpp
    xtensor/xnpy.hpp)

PREPEND(XTENSOR_SINGLE_INCLUDE ""#include <"" ${XTENSOR_SINGLE_INCLUDE})
POSTFIX(XTENSOR_SINGLE_INCLUDE "">"" ${XTENSOR_SINGLE_INCLUDE})
string(REPLACE "";"" ""\n"" XTENSOR_SINGLE_INCLUDE ""${XTENSOR_SINGLE_INCLUDE}"")
string(CONCAT XTENSOR_SINGLE_INCLUDE ""#ifndef XTENSOR\n"" ""#define XTENSOR\n\n"" ""${XTENSOR_SINGLE_INCLUDE}"" ""\n\n#endif\n"")

file(WRITE ""${CMAKE_BINARY_DIR}/xtensor.hpp"" ""${XTENSOR_SINGLE_INCLUDE}"")

install(FILES ""${CMAKE_BINARY_DIR}/xtensor.hpp""
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
",3.1,3.1
25268,picam360,picam360-software,False,False,False,False,False,2,JavaScript,2020-05-05 02:34:32+00:00,2016-04-25 04:13:03+00:00,3,420,"cmake_minimum_required(VERSION 3.1.3)

message(""picam360-server generating Makefile"")
project(picam360-server)

message(""check node path"")
execute_process(COMMAND which node OUTPUT_VARIABLE NODE_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
if(NOT NODE_PATH)
	message(FATAL_ERROR ""can not find node. please install node"")
endif()

add_custom_target(git_clone_www ALL
	COMMAND test -d www || git clone --depth 1 https://github.com/picam360/picam360-viewer.git www
	COMMENT ""git clone --depth 1 https://github.com/picam360/picam360-viewer.git www""
)

add_custom_target(git_submodule_update ALL
	COMMAND git submodule update -i
	COMMENT ""git submodule update -i""
)

add_custom_target(npm_install ALL
	COMMAND npm -dd install
	COMMENT ""npm install - it takes few minutes""
)
	
#install
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY true)
configure_file( setup/picam360-server.in setup/picam360-server @ONLY )
configure_file( setup/picam360-server.service.in setup/picam360-server.service @ONLY )
configure_file( setup/install.sh.in setup/install.sh @ONLY )
install(CODE ""execute_process(COMMAND bash -x setup/install.sh)"")",3.1.3,3.1
25370,RetroView,NODLib,False,False,False,False,False,9,C++,2020-04-11 22:45:23+00:00,2015-06-26 05:01:26+00:00,3,230,"if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  cmake_minimum_required(VERSION 3.10 FATAL_ERROR) # because of c++17
  project(nod VERSION 0.1)
  if (NOT MSVC)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
  endif()
endif()

include (CMakePackageConfigHelpers)

if (MSVC)
  # Shaddup MSVC
  add_definitions(-DUNICODE=1 -D_UNICODE=1 -D__SSE__=1 -D_CRT_SECURE_NO_WARNINGS=1 -DD_SCL_SECURE_NO_WARNINGS=1
      /IGNORE:4221 /wd4018 /wd4800 /wd4005 /wd4311 /wd4267 /wd4244 /wd4200 /wd4305 /wd4067 /wd4146 ${VS_DEFINES})
endif()

if (NOT TARGET logvisor)
  add_subdirectory(logvisor)
endif()

add_subdirectory(lib)
add_subdirectory(driver)

set(version_config_file ""${PROJECT_BINARY_DIR}/nodConfigVersion.cmake"")
set(config_file ""${PROJECT_BINARY_DIR}/nodConfig.cmake"")
set(config_install_dir ""lib/cmake/nod"")

# Install the target config files
install(
    EXPORT nodTargets
    NAMESPACE ""nod::""
    DESTINATION ""${config_install_dir}""
)

# Generate version config file
write_basic_package_version_file(
    ""${version_config_file}""
    COMPATIBILITY SameMajorVersion
)

# Generate config file
configure_package_config_file(
    ""Config.cmake.in""
    ""${config_file}""
    INSTALL_DESTINATION ""lib/cmake/nod""
)

# Install the config files
install(
    FILES ""${config_file}"" ""${version_config_file}""
    DESTINATION ${config_install_dir}
)
",3.10,3.1
25457,jrl-umi3218,RBDyn,False,False,False,False,False,16,C++,2020-05-12 11:08:05+00:00,2012-03-16 15:22:12+00:00,62,484,"#
# Copyright 2012-2019 CNRS-UM LIRMM, CNRS-AIST JRL
#

cmake_minimum_required(VERSION 3.1.3)
set(CMAKE_CXX_STANDARD 11)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(PROJECT_NAME RBDyn)
set(PROJECT_DESCRIPTION ""..."")
set(PROJECT_URL ""https://github.com/jrl-umi3218/RBDyn"")
set(PROJECT_DEBUG_POSTFIX ""_d"")
set(PROJECT_VERSION 1.2.1)
set(PROJECT_USE_CMAKE_EXPORT TRUE)

option(BUILD_RBDYN_PARSERS ""Build URDF and YAML parsers"" ON)

include(cmake/base.cmake)
include(cmake/cython/cython.cmake)
include(cmake/msvc-specific.cmake)

# Disable -Werror on Unix for now.
set(CXX_DISABLE_WERROR True)

project(RBDyn CXX)

option(BENCHMARKS ""Generate benchmarks."" OFF)

add_project_dependency(SpaceVecAlg REQUIRED)

# For MSVC, set local environment variable to enable finding the built dll
# of the main library when launching ctest with RUN_TESTS
if(MSVC)
  set(CMAKE_MSVCIDE_RUN_PATH ""\$(SolutionDir)/src/\$(Configuration)"")
endif()

add_subdirectory(src)

if(${BUILD_TESTING} OR ${BENCHMARKS})
  add_subdirectory(tests)
endif()

if(${PYTHON_BINDING})
  add_subdirectory(binding/python)
endif()
",3.1.3,3.1
25470,matt1795,BCIT-Sailbot,False,False,False,False,False,6,C++,2019-05-04 08:00:09+00:00,2016-10-06 02:52:18+00:00,4,247,"cmake_minimum_required(VERSION 3.10)
project(bcit-sailbot)

add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/system"")
add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/navigation"")
add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/simulation"")
",3.10,3.1
25696,icecc,icemon,False,False,False,False,False,34,C++,2019-09-12 14:44:38+00:00,2012-10-23 08:44:18+00:00,63,612,"cmake_minimum_required(VERSION 3.1.0)
project(icemon VERSION 3.3)

find_package(ECM REQUIRED NO_MODULE)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH})
set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

include(CheckCXXCompilerFlag)
include(CheckCXXSourceCompiles)
include(GNUInstallDirs)
include(CheckIncludeFileCXX)
include(FeatureSummary)
include(ECMInstallIcons)

set(ICEMON_VERSION_STRING ""${PROJECT_VERSION}"")

if(EXISTS ""${CMAKE_SOURCE_DIR}/.git"")
  find_package(Git)
  if(GIT_FOUND)
    execute_process(
      COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      OUTPUT_VARIABLE _git_revision
    )
    string(REGEX REPLACE ""\n"" """" _git_revision ""${_git_revision}"")
    set(ICEMON_VERSION_STRING ""${ICEMON_VERSION_STRING} (revision: ${_git_revision})"")
  endif()
endif()

set(QT_MIN_VERSION ""5.4.0"") # Because of QByteArray::fromStdString
find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED Core Widgets)
find_package(Icecream)
set_package_properties(Icecream PROPERTIES
  DESCRIPTION ""Package providing API for accessing icecc information. Provides 'icecc/comm.h' header""
  URL ""http://en.opensuse.org/Icecream""
  TYPE REQUIRED
)
find_package(Docbook2X)
set_package_properties(Docbook2X PROPERTIES
  DESCRIPTION ""docbook2X converts DocBook documents into the traditional Unix man page format""
  PURPOSE ""Required for man-page generation""
  URL ""http://docbook2x.sourceforge.net/""
)

# add a target to generate API documentation with Doxygen
find_package(Doxygen)
set_package_properties(Doxygen PROPERTIES
  TYPE OPTIONAL
  DESCRIPTION ""Doxygen documentation generator""
  PURPOSE ""Needed for generating API documentation (make doc)""
)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating API documentation with Doxygen"" VERBATIM
  )
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" OR CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
  check_cxx_compiler_flag(-Wunused-but-set-variable HAVE_GCC_UNUSED_BUT_SET)
  check_cxx_compiler_flag(-Wlogical-op HAVE_GCC_LOGICAL_OP)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-deprecated -Wall -Wextra -Woverloaded-virtual -Winit-self -Wmissing-include-dirs -Wunused -Wno-div-by-zero -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wmissing-noreturn -Werror=return-type -pedantic"")
  if(HAVE_GCC_UNUSED_BUT_SET)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wunused-but-set-variable"")
  endif()
  if(HAVE_GCC_LOGICAL_OP)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wlogical-op"")
  endif()
endif()

add_definitions(
    -DQT_DEPRECATED_WARNINGS
    -DQT_DISABLE_DEPRECATED_BEFORE=0x050400
    -DQT_NO_CAST_FROM_ASCII
    -DQT_NO_CAST_FROM_BYTEARRAY
    -DQT_NO_CAST_TO_ASCII
    -DQT_NO_URL_CAST_FROM_STRING
    -DQT_STRICT_ITERATORS
    -DQT_USE_FAST_CONCATENATION
    -DQT_USE_FAST_OPERATOR_PLUS
)

include_directories(
    ${CMAKE_CURRENT_BINARY_DIR} # config-icemon.h
)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

if (Icecream_FOUND)
    check_include_file_cxx(icecc/logging.h ICECC_HAVE_LOGGING_H)

    # Check whether icecc was compiled against old CXXABI
    # Work-around for: https://github.com/icecc/icemon/issues/24
    # See: https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
    set(USE_OLDCXXABI_DEFINE -D_GLIBCXX_USE_CXX11_ABI=0)
    set(CMAKE_REQUIRED_LIBRARIES Icecream)
    set(CMAKE_REQUIRED_DEFINITIONS ${USE_OLDCXXABI_DEFINE})
    check_cxx_source_compiles(""
    #include <icecc/comm.h>

    int main() { DiscoverSched sched(\""foo\""); }
    "" ICECC_TEST_USE_OLDABI)

    if (ICECC_TEST_USE_OLDABI)
        message(STATUS ""Tests indicated icecc was linked against old GCC ABI, adding ${USE_OLDCXXABI_DEFINE} define"")
        add_definitions(${USE_OLDCXXABI_DEFINE})
    endif()
endif()

set(
  INSTALL_TARGETS_DEFAULT_ARGS
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Devel
)

set(XDG_APPS_INSTALL_DIR ${CMAKE_INSTALL_DATADIR}/applications)
set(ICON_INSTALL_DIR ${CMAKE_INSTALL_DATADIR}/icons)

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/config-icemon.h.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/config-icemon.h
)

add_subdirectory(src)
add_subdirectory(doc)

feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)

set(ARCHIVE_NAME ${CMAKE_PROJECT_NAME}-${PROJECT_VERSION})
add_custom_target(dist
    COMMAND git archive --prefix=${ARCHIVE_NAME}/ HEAD
        | xz -T0 > ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar.xz
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
",3.1.0,3.1
25810,librg,librg,False,False,False,False,False,3,C,2020-05-11 07:07:26+00:00,2017-07-10 08:52:14+00:00,704,509,"cmake_minimum_required(VERSION 3.1.3)
project(librg)

find_package(Threads)

# if you didnt install the library via
# npm, and you dont have node_modules folder
# you can redefine this option to point onto differnt folder
if (NOT DEFINED LIBRG_VENDOR_FOLDER)
    set(LIBRG_VENDOR_FOLDER ${CMAKE_SOURCE_DIR}/node_modules)
    set(LIBRG_POSTFIX "".c"")
else()
    set(LIBRG_VENDOR_FOLDER ${CMAKE_SOURCE_DIR}/${LIBRG_VENDOR_FOLDER})
endif()

# define librg as a library (not really)
add_library(librg INTERFACE)

# add those compile flags badboys
set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# proxy our includes to outside world
target_include_directories(librg INTERFACE include
    ${LIBRG_VENDOR_FOLDER}/zpl${LIBRG_POSTFIX}/code
    ${LIBRG_VENDOR_FOLDER}/enet${LIBRG_POSTFIX}/include)

# link all the deps
target_link_libraries(librg INTERFACE ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT})

if (WIN32)
    # windows libraries for enet
    target_link_libraries(librg INTERFACE ws2_32 winmm)
elseif (UNIX)
    # unix math library for us
    target_link_libraries(librg INTERFACE m)
endif()

# sdl2 demo
if (LIBRG_DEMO)
    add_subdirectory(${LIBRG_VENDOR_FOLDER}/sdl2${LIBRG_POSTFIX})
    include_directories(${LIBRG_VENDOR_FOLDER}/sdl2${LIBRG_POSTFIX}/include)

    add_executable(librg_demo_server test/demo-server.c)
    add_executable(librg_demo_client test/demo-client.c)

    target_link_libraries(librg_demo_server librg)
    target_link_libraries(librg_demo_client librg SDL2)
endif()

if (LIBRG_CLI_TEST)
    add_executable(librg_cli_server test/cli-server.c)
    add_executable(librg_cli_client test/cli-client.c)

    target_link_libraries(librg_cli_server librg)
    target_link_libraries(librg_cli_client librg)
endif()

# test for travis/etc
if (LIBRG_TEST)
    add_executable(librg_test test/build-test.c)
    add_executable(librg_test_cpp test/build-test.cpp)
    target_link_libraries(librg_test librg)
    target_link_libraries(librg_test_cpp librg)
endif()

# static library
if (LIBRG_STATIC)
    # special flags for MSVC
    if (MSVC OR ""${CMAKE_GENERATOR}"" MATCHES ""(Win64|IA64)"")

        # This piece of crap could be very well replaced by something
        # like replace(ARRAY PRED VALUE)
        # But instead, we get to use this. Uh!
        set(CompilerFlags
            CMAKE_CXX_FLAGS
            CMAKE_CXX_FLAGS_DEBUG
            CMAKE_CXX_FLAGS_RELEASE
            CMAKE_C_FLAGS
            CMAKE_C_FLAGS_DEBUG
            CMAKE_C_FLAGS_RELEASE
        )
        foreach(CompilerFlag ${CompilerFlags})
          string(REPLACE ""/MD"" ""/MT"" ${CompilerFlag} ""${${CompilerFlag}}"")
        endforeach()
    endif()

    add_definitions(-DLIBRG_STATIC)

    # Once again, one has to hack in cmake to achieve what he needs...
    add_library(librg_static STATIC test/library.c)

    # This doesn't actually make any significant difference, only
    # makes sure the includes are further propagated.
    target_link_libraries(librg_static librg)
endif()

# shared library
if (LIBRG_SHARED)
    add_definitions(-DLIBRG_SHARED -DENET_DLL)
    add_library(librg_shared SHARED test/library.c)

    # if (WIN32)
    #     set_target_properties(librg_shared PROPERTIES
    #         LINK_FLAGS ""/WHOLEARCHIVE""
    #     )
    # elseif (APPLE)
    #     set_target_properties(librg_shared PROPERTIES
    #         LINK_FLAGS ""-Wl,-all_load""
    #     )
    # else ()
    #     set_target_properties(librg_shared PROPERTIES
    #         LINK_FLAGS ""-Wl,--whole-archive""
    #     )
    # endif ()

    target_link_libraries(librg_shared librg)
endif()
",3.1.3,3.1
25857,Toeger,SCE,False,False,False,False,False,1,C++,2019-12-26 14:50:08+00:00,2017-09-03 09:59:10+00:00,0,217,"cmake_minimum_required(VERSION 3.1)
project(SCE)

set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 17)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Find the QtWidgets library
find_package(Qt5Widgets CONFIG REQUIRED)

# Set up protobuffer
if (NOT DEFINED ENV{TRAVIS})
	set(USR_PATH ""/usr"")
else()
	set(USR_PATH ""/usr/local"")
endif()

set(CMAKE_MODULE_PATH ""${USR_PATH}/lib/grpc/cmake/;${USR_PATH}/lib/protobuf/cmake/;${CMAKE_MODULE_PATH}"")
find_package(Protobuf REQUIRED)
include_directories(${CMAKE_CURRENT_BINARY_DIR})
PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS interop/sce.proto)
PROTOBUF_GENERATE_PYTHON(PROTO_PY_SRCS interop/sce.proto)
if (UNIX)
	set(GRPC_PLUGIN_PATH ""${USR_PATH}/bin"")
else()
	message(FATAL_ERROR ""Figure out where the grpc_cpp_plugin is located on your system and add it in the CMakeLists.txt"")
endif()
add_custom_command(
	COMMAND ${Protobuf_PROTOC_EXECUTABLE} ""--grpc_out=."" ""--plugin=protoc-gen-grpc=${GRPC_PLUGIN_PATH}/grpc_cpp_plugin"" -I${CMAKE_CURRENT_SOURCE_DIR}/interop ${CMAKE_CURRENT_SOURCE_DIR}/interop/sce.proto
	COMMAND ${Protobuf_PROTOC_EXECUTABLE} ""--python_out=${CMAKE_CURRENT_SOURCE_DIR}/testdata/interop_scripts"" ""--grpc_python_out=${CMAKE_CURRENT_SOURCE_DIR}/testdata/interop_scripts"" ""--plugin=protoc-gen-grpc_python=${GRPC_PLUGIN_PATH}/grpc_python_plugin"" -I${CMAKE_CURRENT_SOURCE_DIR}/interop ${CMAKE_CURRENT_SOURCE_DIR}/interop/sce.proto
	DEPENDS interop/sce.proto
	OUTPUT sce.grpc.pb.cc  sce.grpc.pb.h #${CMAKE_CURRENT_SOURCE_DIR}/testdata/sce_pb2_grpc.py  ${CMAKE_CURRENT_SOURCE_DIR}/testdata/sce_pb2.py
	COMMENT ""Generating RPC code for sce.proto."")

#extra flags
if (""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""GNU"" OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
	#general warnings
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror"")
	#disable annoying warnings
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-missing-braces"")
	#disable warning for generated protobuf file
	set_source_files_properties(sce.pb.cc sce.grpc.pb.cc PROPERTIES COMPILE_FLAGS -w)
	#sanitizers
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined,address"")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=undefined,address"")
	#workaround for ubuntu gcc bug: using sanitizers causes ld: unrecognized option '--push-state--no-as-needed'
	if (DEFINED ENV{TRAVIS} AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""GNU"")
		set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -fuse-ld=gold"")
		link_directories(${USR_PATH}/lib)
	endif()
endif()

#defines
add_definitions(-DTEST_DATA_PATH=\""${CMAKE_SOURCE_DIR}/testdata/\"")

# Source files
set(SCE_SRC
	interop/plugin.cpp
	logic/process_reader.cpp
	logic/settings.cpp
	logic/syntax_highligher.cpp
	logic/tool.cpp
	logic/tool_actions.cpp
	main.cpp
	tests/test.cpp
	tests/test_mainwindow.cpp
	tests/test_plugin.cpp
	tests/test_process_reader.cpp
	tests/test_settings.cpp
	tests/test_tool.cpp
	tests/test_tool_editor_widget.cpp
	ui/edit_window.cpp
	ui/mainwindow.cpp
	ui/tool_editor_widget.cpp
	utility/thread_call.cpp
	utility/unique_handle.cpp
)

# Create code from a list of Qt designer ui files.
set(CMAKE_AUTOUIC ON)
#disable autouic for every .cpp file that includes a ui_ file but doesn't have a .ui file of the same name
set_property(SOURCE tests/test_mainwindow.cpp PROPERTY SKIP_AUTOUIC ON)

#create the executable
add_executable(SCE ${SCE_SRC} ${PROTO_SRCS} ${PROTO_HDRS} sce.grpc.pb.cc  sce.grpc.pb.h)

# Link executable
# Debian is fine with ""util grpc++"", but apparently Ubuntu wants all the libraries spelled out.
# On a proper system that packages grpc $ENV{GRPC_LIBS} should be empty.
# Otherwise compile from source and use `export GRPC_LIBS=$(sh print_libs.sh)` to get a list of the compiled libs.
#message(""GRPC libs: "" $ENV{GRPC_LIBS})
target_link_libraries(SCE Qt5::Widgets ${PROTOBUF_LIBRARIES} util grpc++ $ENV{GRPC_LIBS} $ENV{GRPC_LIBS})

# Install the executable
#install(TARGETS SCE DESTINATION bin)
",3.1,3.1
25929,joakimkarlsson,bandit,False,False,False,False,False,19,C++,2020-04-03 14:19:18+00:00,2013-07-23 08:58:22+00:00,237,592,"cmake_minimum_required(VERSION 3.1)
project(bandit)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(BANDIT_BUILD_SPECS   ""Build the Bandit specs""                ON)
option(BANDIT_RUN_SPECS     ""Run the Bandit specs""                  ON)

set (CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(cotire/CMake/cotire OPTIONAL RESULT_VARIABLE HAS_COTIRE)

include_directories(""${PROJECT_SOURCE_DIR}"")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ./bin)

if (MSVC)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4 /MP "")
else()
  # Assume GCC-style arguments
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} \
    -Wdeprecated -Wdeprecated-declarations -Wshadow -Wall -W -Werror \
    -Wno-error=unknown-pragmas -Wfloat-equal -Wundef -Wendif-labels"")
endif()

#
# If we're on Mac OS we assume we have libc++, otherwise we assume
# we don't need it. (TODO: make this check more sofisticated)
#
if (CMAKE_HOST_APPLE AND (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang""))
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
endif()

if (BANDIT_BUILD_SPECS)
    FILE(GLOB BanditSpecSourceFiles specs/*.cpp specs/**/*.cpp)
    add_executable(bandit-specs ${BanditSpecSourceFiles})
    if (HAS_COTIRE)
      set_target_properties(bandit-specs PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT ""specs/specs.h"")
      set_target_properties(bandit-specs PROPERTIES COTIRE_ADD_UNIT_BUILD FALSE)
      cotire(bandit-specs)
    endif()
endif()

if (BANDIT_BUILD_SPECS AND BANDIT_RUN_SPECS)
    add_custom_command(TARGET bandit-specs
                       POST_BUILD
                       COMMAND bandit-specs --colorizer=off --reporter=dots
                       WORKING_DIRECTORY ./bin)
elseif (BANDIT_RUN_SPECS)
    message(WARNING ""Unable to run Bandit specs - set:\n  option(BANDIT_BUILD_SPECS, \""Build the Bandit specs\"" ON)\nand clear your CMake cache"")
endif()

",3.1,3.1
25932,H-uru,PlasmaShop,False,False,False,False,False,10,C++,2019-12-16 22:47:29+00:00,2011-07-01 05:26:19+00:00,12,305,"project(PlasmaShop)
cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_AUTOMOC TRUE)

if(POLICY CMP0071)
    # Don't run generated source files (bytes/python_*.cpp) through automoc
    cmake_policy(SET CMP0071 OLD)
endif()

find_package(HSPlasma REQUIRED)
find_package(string_theory 2.0 REQUIRED)
find_package(Qt5 5.5 REQUIRED COMPONENTS Core Gui Widgets)
find_package(KF5SyntaxHighlighting REQUIRED)
find_package(PythonInterp REQUIRED)

if(KF5SyntaxHighlighting_VERSION VERSION_LESS ""5.39.0"")
    message(WARNING ""KF5SyntaxHighlighting version 5.39.0 or later is required \
in order to use custom highlighting rules.  KF5SyntaxHighlighting version \
${KF5SyntaxHighlighting_VERSION} was detected, so these rules will be unavailable."")
    add_definitions(""-DKSYN_NO_CUSTOM_RULES_SUPPORT"")
endif()

if(MSVC)
    add_definitions(""/D_CRT_SECURE_NO_WARNINGS"")
    # Fix <windows.h> doing stupid stuff to QDateTime's header
    add_definitions(""/DNOMINMAX"")
endif()

if(WIN32)
    # Requires Vista, Office 2007, or Visual Studio 2010 (or manual install).
    # If you're still on XP, who knows what you'll get (Probably Courier)
    add_definitions(-DPLAT_FONT=""Consolas"")
else()
    add_definitions(-DPLAT_FONT=""Monospace"")
endif()

# do this after QScintilla - it generates tons of warnings
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
        CMAKE_CXX_COMPILER_ID MATCHES "".*Clang"")
    set(WARNING_FLAGS ""-Wall -Wextra"")
    set(CMAKE_CXX_FLAGS ""${WARNING_FLAGS} ${CMAKE_CXX_FLAGS}"")
    set(CMAKE_C_FLAGS ""${WARNING_FLAGS} ${CMAKE_C_FLAGS}"")
endif()

# Get the version number from git
set(PlasmaShop_VERSION ""3.0-untracked"")
if(EXISTS ""${CMAKE_SOURCE_DIR}/.git"")
    find_program(GIT_EXECUTABLE NAMES git git.cmd)
    mark_as_advanced(GIT_EXECUTABLE)
    if(GIT_EXECUTABLE)
        execute_process(COMMAND ${GIT_EXECUTABLE} describe --dirty
                        OUTPUT_VARIABLE PlasmaShop_VERSION
                        OUTPUT_STRIP_TRAILING_WHITESPACE
                        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    endif()
endif()
add_definitions(-DPLASMASHOP_VERSION=""${PlasmaShop_VERSION}"")

include_directories(${STRING_THEORY_INCLUDE_DIRS})

add_subdirectory(src)

if(WIN32)
    add_subdirectory(icons/win32)
endif()
",3.1,3.1
25990,cvubrugier,target-isns,False,False,False,False,False,9,C,2020-05-08 14:17:10+00:00,2013-11-18 20:19:09+00:00,13,235,"#
# (C) Copyright 2013
# Christophe Vu-Brugier <cvubrugier@fastmail.fm>
#
# SPDX-License-Identifier:	GPL-2.0+
#

project(target-isns ""C"")
set(TARGET_ISNS_VERSION ""0.6.8"")

cmake_minimum_required(VERSION 3.1)
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Werror"")

option(SUPPORT_SYSTEMD ""Support service control via systemd"" OFF)

add_subdirectory(src)
install(FILES target-isns.conf DESTINATION /etc/)
install(FILES target-isns.8 DESTINATION ${CMAKE_INSTALL_PREFIX}/share/man/man8/)
if (SUPPORT_SYSTEMD)
  install(FILES target-isns.service DESTINATION /usr/lib/systemd/system/)
endif (SUPPORT_SYSTEMD)

add_subdirectory(tests)

set(ARCHIVE_NAME ${CMAKE_PROJECT_NAME}-${TARGET_ISNS_VERSION})
add_custom_target(dist
  COMMAND git archive --prefix=${ARCHIVE_NAME}/ HEAD
  | xz > ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar.xz
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
",3.1,3.1
26090,couchbase,couchbase-python-client,False,False,False,False,False,45,Python,2020-05-14 21:48:19+00:00,2011-07-29 04:24:46+00:00,210,906,"cmake_minimum_required(VERSION 3.1)
project(couchbase_python_client)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(THIRDPARTY_LCB_ROOT libcouchbase_src-prefix)
set(LCBCXX_ROOT libcouchbase-cxx-prefix/src/libcouchbase-cxx)
set(LCB_ROOT ${THIRDPARTY_LCB_ROOT}/src/libcouchbase_src)
set(PYCBC_CMAKE_CPYTHON_WRAPPER 1)
cmake_policy(SET CMP0054 NEW)
if(HYBRID_BUILD)
    set(PYCBC_C_MOD_NAME ""_dummy"")
    set(PYCBC_C_MOD_SUFFIX "".so"")
else()
    include(FindPythonInterp)
    include(FindPythonLibs)

    if (PYTHON_LIBDIR)
        set(PYTHON_LIBDIR_HINT HINTS ${PYTHON_LIBDIR})
    else(PYTHON_LIBDIR)
        set(PYTHON_LIBDIR_HINT """")
    endif()

    if (PYTHON_VERSION_EXACT)
        find_package(PythonInterp ${PYTHON_VERSION_EXACT} EXACT REQUIRED)
        find_package(PythonLibs ${PYTHON_VERSION_EXACT} EXACT  REQUIRED)
    else(PYTHON_VERSION_EXACT)
        find_package(PythonInterp REQUIRED)
        find_package(PythonLibs ${PYTHON_LIBDIR_HINT} REQUIRED)
    endif()

    if(WIN32)
        set(PYCBC_C_MOD_NAME ""_libcouchbase.${PYTHONLIBS_VERSION_STRING}"")
        set(PYCBC_C_MOD_SUFFIX "".pyd"")
    else()
        set(PYCBC_C_MOD_NAME ""_libcouchbase"")
        set(PYCBC_C_MOD_SUFFIX "".so"")
    endif()
endif()
if (FORCE_DEBUG OR (CMAKE_BUILD_TYPE MATCHES DEBUG))
    set(RELEASE_TYPE Debug)
else()
    set(RELEASE_TYPE Release)
endif()

macro(use_cxx11)
if (CMAKE_VERSION VERSION_LESS ""3.1"")
if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")
endif ()
else ()
set (CMAKE_CXX_STANDARD 11)
endif ()
endmacro(use_cxx11)

set (LCB_CFLAGS ${CFLAGS} -fPIC)
set (LCB_CXXFLAGS ${CFLAGS} -fPIC)
if (WIN32)
else(WIN32)
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}  -fPIC -fno-strict-aliasing -Wall -Wstrict-prototypes"")
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fno-common -dynamic -DNDEBUG -g -fwrapv -Wswitch"")
endif()

if (""$PYCBC_USE_CONAN"")
    # Download automatically, you can also just copy the conan.cmake file
    include(${CMAKE_BINARY_DIR}/conan.cmake)
    if(NOT EXISTS ""${CMAKE_BINARY_DIR}/conan.cmake"")
        message(STATUS ""Downloading conan.cmake from https://github.com/conan-io/cmake-conan"")
        file(DOWNLOAD ""https://raw.githubusercontent.com/conan-io/cmake-conan/master/conan.cmake""
                ""${CMAKE_BINARY_DIR}/conan.cmake"")
    endif()
    conan_cmake_run(REQUIRES OpenSSL/1.0.2n@conan/stable
            BASIC_SETUP
            BUILD missing)
endif()

include(ExternalProject)


set(CMAKE_MACOSX_RPATH 1)

set(BUILD_CFG_FILE cbuild_cfg.json)
include(cmake/json-cmake/JSONParser.cmake)
file(READ ${BUILD_CFG_FILE} BUILDCFG)
sbeParseJson(build_cfg BUILDCFG)
message(""environment LCB_TAG: $ENV{LCB_TAG}"")

set(PYCBC_SRC )
message(""got HYBRID_BUILD=${HYBRID_BUILD}"")
if(""${HYBRID_BUILD}"")
    message(""enabling hybrid build"")
    set(ENABLE_HYBRID_BUILD TRUE)
endif()
if(ENABLE_HYBRID_BUILD)
    message(""Doing hybrid build"")
else()
    message(""Scanning ${BUILD_CFG_FILE} for bindings/config"")
    foreach(var ${build_cfg})
        message(""${var} = ${${var}}"")
        if (""${${var}}"" MATCHES "".*\\.(cxx|pp|c|h|hpp|hxx)$"")
            message(""Adding code item ${var} = ${${var}}"")
            set(PYCBC_SRC ${PYCBC_SRC} ${${var}})
        endif()
    endforeach()
endif()

set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -DPYCBC_LCB_API=${PYCBC_LCB_API}"")
set(LCB_REPO ${build_cfg.comp_options.lcb_archive_repo})
message(""repo: ${LCB_REPO}"")
if (NOT LCB_REPO)
    message(""lcb_archive_repo not found in config, using default"")
    set(LCB_REPO ""https://github.com/couchbase/libcouchbase"" )
endif()
message(""config lcb tag: ${build_cfg.comp_options.lcb_tag}"")
set(LCB_TAG $ENV{LCB_TAG})
if (LCB_TAG)
    message(""using LCB_TAG (${LCB_TAG})from environment"")
else()
    set(LCB_TAG ${build_cfg.comp_options.lcb_tag})
    message(""using lcb tag (${LCB_TAG}) from config"")
endif()
if (NOT LCB_TAG)
    set(LCB_TAG ""master"")
    message(""using default tag(${LCB_TAG})"")
endif()
message(""lcb_tag: ${LCB_TAG}"")
set(REF_CMDS echo ""no ref required"")

function(make_dir path)
    file(MAKE_DIRECTORY ${path})
endfunction(make_dir)

if (MAKE)
else()
set(MAKE make)
endif()

set(LCB_SRC TRUE)
if (LCB_SRC)
    SET(LCB_BUILD_DIR ""${CMAKE_BINARY_DIR}/Release/lcb_build"")
    SET(LCB_DBGBUILD_DIR ""${CMAKE_BINARY_DIR}/Release/lcb_dbgbuild"")
    if (CMAKE_BUILD_TYPE MATCHES DEBUG)
        set(LCB_SELECTED_BUILD_DIR ${LCB_DBGBUILD_DIR})
    else()
        set(LCB_SELECTED_BUILD_DIR ${LCB_BUILD_DIR})
    endif()
    SET(LIBCOUCHBASE_LIBRARY_NAME ""libcouchbase.lib"")
    SET(LIBCOUCHBASE_DBG_LIBRARY_NAME ""libcouchbase_d.lib"")
    SET(LIBCOUCHBASE_STATIC_LIBRARY_NAME ""libcouchbase_d.lib"")
    SET(LCB_CMAKE_ARGS -DLCB_NO_TOOLS=1 -DLCB_NO_TESTS=1)
    if (WIN32)
        if (CMAKE_GENERATOR_PLATFORM MATCHES x64)
            set(WIN_PLATFORM ""Visual Studio 14 2015 Win64"")
        else()
            set(WIN_PLATFORM ""Visual Studio 14 2015"")
        endif()
        set(LCB_CMAKE_ARGS ${LCB_CMAKE_ARGS} -DLCB_NO_SSL=1 -DLCB_NO_MOCK=1)
        SET(LIBCOUCHBASE_LIBRARY_FILE ""${LCB_BUILD_DIR}/lib/Release/${LIBCOUCHBASE_LIBRARY_NAME}"")
        SET(LIBCOUCHBASE_DBG_LIBRARY_FILE ""${LCB_BUILD_DIR}/lib/Debug/${LIBCOUCHBASE_DBG_LIBRARY_NAME}"")
        ExternalProject_Add(libcouchbase_src
            URL ""${LCB_REPO}/archive/${LCB_TAG}.zip""
            CONFIGURE_COMMAND ${CMAKE_COMMAND} -E make_directory ${LCB_BUILD_DIR}
            COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/install
            COMMAND cd <SOURCE_DIR> && ${REF_CMDS}

            COMMAND cd ${LCB_BUILD_DIR} && echo ""in ${LCB_BUILD_DIR}"" && cmake -DLCB_NO_PLUGINS=1  -B . -G ${WIN_PLATFORM} ${LCB_CMAKE_ARGS} -S <SOURCE_DIR>
            BUILD_COMMAND cd ${LCB_BUILD_DIR} && cmake --build ${LCB_BUILD_DIR} --config Release

            INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/install
            INSTALL_COMMAND ${CMAKE_COMMAND} -E copy_directory <SOURCE_DIR>/include <INSTALL_DIR>/include
            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/bin/
            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/lib/

            COMMAND ${CMAKE_COMMAND} -E copy_directory ${LCB_BUILD_DIR}/generated <INSTALL_DIR>/include
            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/bin/Release
            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/lib/Release
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/bin/Release/libcouchbase.dll <INSTALL_DIR>/lib/Release/
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/lib/Release/libcouchbase.lib <INSTALL_DIR>/lib/Release/
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/lib/Release/libcouchbase.exp <INSTALL_DIR>/lib/Release/

            COMMAND cd ${LCB_BUILD_DIR} && cmake --build ${LCB_BUILD_DIR} --config Debug
            COMMAND ${CMAKE_COMMAND} -E copy_directory ${LCB_BUILD_DIR}/generated <INSTALL_DIR>/include

            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/bin/Debug
            COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/lib/Debug
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/bin/Debug/libcouchbase_d.dll <INSTALL_DIR>/lib/Debug/
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/lib/Debug/libcouchbase_d.lib <INSTALL_DIR>/lib/Debug/
            COMMAND ${CMAKE_COMMAND} -E copy ${LCB_BUILD_DIR}/lib/Debug/libcouchbase_d.exp <INSTALL_DIR>/lib/Debug/
            )


    else (WIN32)
        if (APPLE)
            SET(LIBCOUCHBASE_LIBRARY_NAME ""libcouchbase.dylib"")
            SET(LIBCOUCHBASE_DBG_LIBRARY_NAME ""libcouchbase.dylib"")
            SET(LIBCOUCHBASE_STATIC_LIBRARY_NAME ""libcouchbaseS.a"")

        else (APPLE)
            SET(LIBCOUCHBASE_LIBRARY_NAME ""libcouchbase.so"")
            SET(LIBCOUCHBASE_DBG_LIBRARY_NAME ""libcouchbase.so"")
        endif (APPLE)

        set(LCB_CMAKE_ARGS ${LCB_CMAKE_ARGS} -DLCB_NO_MOCK=1 -DLCB_NO_PLUGINS=1 -DLCB_BUILD_DTRACE=OFF)
        set(LCB_CMAKE_CONFIG_CMD cmake -E env CXXFLAGS=${LCB_CXXFLAGS} env CFLAGS=${LCB_CFLAGS}
                cmake <SOURCE_DIR> ${LCB_CMAKE_ARGS})
        SET(_parallelism 4)

        ExternalProject_Add(libcouchbase_src
                URL ""${LCB_REPO}/archive/${LCB_TAG}.zip""
                CONFIGURE_COMMAND ${CMAKE_COMMAND} -E make_directory ""${LCB_BUILD_DIR}""
                make_dir ${LCB_SELECTED_BUILD_DIR}

                COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/install

                COMMAND cd <SOURCE_DIR> && ${REF_CMDS}
                COMMAND cd ${LCB_SELECTED_BUILD_DIR} && ${LCB_CMAKE_CONFIG_CMD}
                        -DCMAKE_BUILD_TYPE=${RELEASE_TYPE} -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>/${RELEASE_TYPE}

                BUILD_IN_SOURCE 1
                BUILD_COMMAND ${MAKE} -j${_parallelism} all install -C ${LCB_SELECTED_BUILD_DIR}

                INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/install
                INSTALL_COMMAND ${CMAKE_COMMAND} -E rename <INSTALL_DIR>/${RELEASE_TYPE}/include <INSTALL_DIR>/include
                COMMAND ${CMAKE_COMMAND} -E make_directory <INSTALL_DIR>/lib
                COMMAND ${CMAKE_COMMAND} -E rename <INSTALL_DIR>/${RELEASE_TYPE}/lib <INSTALL_DIR>/lib/${RELEASE_TYPE}
                COMMAND ${CMAKE_COMMAND} -E remove_directory <INSTALL_DIR>/${RELEASE_TYPE}
                )
        SET(LIBCOUCHBASE_LIBRARY_FILE ""${LCB_BUILD_DIR}/lib/${LIBCOUCHBASE_LIBRARY_NAME}"")
        SET(LIBCOUCHBASE_DBG_LIBRARY_FILE ""${LCB_DBGBUILD_DIR}/lib/${LIBCOUCHBASE_DBG_LIBRARY_NAME}"")
        if (CMAKE_BUILD_TYPE MATCHES DEBUG)
            SET(LIBCOUCHBASE_SELECTED_LIBRARY_FILE ${LIBCOUCHBASE_DBG_LIBRARY_FILE})
        else()
            SET(LIBCOUCHBASE_SELECTED_LIBRARY_FILE ${LIBCOUCHBASE_LIBRARY_FILE})
        endif()
        SET(LIBCOUCHBASE)
        # OS X-only: Custom post-build step to set the shared library install name.
        if (APPLE)
            ExternalProject_Add_Step(libcouchbase_src install_name
                    COMMAND install_name_tool -id @rpath/libcouchbase.dylib ${LIBCOUCHBASE_SELECTED_LIBRARY_FILE}
                    COMMAND install_name_tool -id @rpath/libcouchbase.2.dylib ${LCB_SELECTED_BUILD_DIR}/lib/libcouchbase.2.dylib
                    DEPENDEES build
                    DEPENDERS install
                    )
        endif (APPLE)
    endif (WIN32)
endif (LCB_SRC)
set(LCBCXX_ROOT_PATH ${CMAKE_BINARY_DIR}/${LCBCXX_ROOT})

set(libcouchbase_src ${CMAKE_BINARY_DIR}/${LCB_ROOT})
set(install_dir ${CMAKE_BINARY_DIR}/install)
if (LCB_SRC)
    ExternalProject_Get_Property(libcouchbase_src install_dir)
    ExternalProject_Get_Property(libcouchbase_src source_dir)
    set(CPP_DEPS ${CPP_DEPS} libcouchbase_src)
else (LCB_SRC)
    find_library(libcouchbase_src libcouchbase)
endif(LCB_SRC)

if(""${PYCBC_ADD_INLINE}"")
    add_subdirectory(${libcouchbase_src})
    if (PYCBC_CXX)
        add_subdirectory(${CMAKE_BINARY_DIR}/${LCBCXX_ROOT})
    endif()
endif()

cmake_policy(SET CMP0015 NEW)

if (""${PYCBC_CPPYY}"")
    find_package(Cppyy REQUIRED)
    cppyy_add_bindings(
            ""Stuff"" ""0"" ""Enrico"" ""enrico.guiraud@cern.ch""
            LANGUAGE_STANDARD ""11""
            H_FILES ""couchbase.h"")
endif()

if(USE_BOOST)
    find_package(Boost COMPONENTS python27 REQUIRED)
    set(BOOST_SOURCES
            /usr/local/include/boost/python/module.hpp
            src/bindings.cpp)
else()
    set(Boost_LIBRARIES )
    set(Boost_INCLUDE_DIR )
    set(BOOST_SOURCES )
endif(USE_BOOST)
include_directories(
        ${PYTHON_INCLUDE_DIRS}
        ${PYTHON_INCLUDE_PATH}
        /usr/local/include
        ${LCBCXX_ROOT_PATH}/include
        ${CMAKE_BINARY_DIR}/${install_dir}/include
        ${install_dir}/include
        ${source_dir} ${source_dir}/src/*
        ${source_dir}
        ${CMAKE_BINARY_DIR}/Release/lcb_dbgbuild/generated/
        ${libcouchbase_src}/src
        ${libcouchbase_src}/include
)

file(GLOB_RECURSE PY_SOURCES_FOLDERS acouchbase/*.py txcouchbase/*.py  couchbase/*.py couchbase_core/*.py couchbase_tests/*.py couchbase_v2/*.py)
file(GLOB PY_SOURCES_FILES *.py)
set(PY_SOURCES ${PY_SOURCES_FOLDERS} ${PY_SOURCES_FILES})
message(""Got PY_SOURCES ${PY_SOURCES}"")
add_library(couchbase_python_client SHARED
        ${PY_SOURCES_FOLDERS}
        ${PY_SOURCES}
        ${PYCBC_SRC}
)

if (PYTHON_LIBDIR)
else()
    set(PYTHON_LIBDIR ${PYTHON_LIBRARIES})
endif()
link_directories(${CMAKE_BINARY_DIR}/${install}/lib/${RELEASE_TYPE} ${PYTHON_LIBDIR})
add_dependencies(couchbase_python_client ${CPP_DEPS})
target_include_directories(couchbase_python_client PUBLIC  ${install_dir}/include)

if (PYTHON_LIBFILE)
else()
    set(PYTHON_LIBFILE python)
endif()

# required rpaths
# OSX: loader_path
# Linux: $ORIGIN
set(LIBCOUCHBASE_DBG_DIRPATH ${install_dir}/lib/Debug)
set(LIBCOUCHBASE_RELEASE_DIRPATH ${install_dir}/lib/Release)
set(LIBCOUCHBASE_DBG_PATH ${LIBCOUCHBASE_DBG_DIRPATH}/${LIBCOUCHBASE_DBG_LIBRARY_NAME})
set(LIBCOUCHBASE_RELEASE_PATH ${LIBCOUCHBASE_RELEASE_DIRPATH}/${LIBCOUCHBASE_LIBRARY_NAME})

if (FORCE_DEBUG OR CMAKE_BUILD_TYPE MATCHES DEBUG)
    set(LIBCOUCHBASE_FINAL_DIRPATH ${LIBCOUCHBASE_DBG_DIRPATH})
    set(LIBCOUCHBASE_FINAL_PATH ${LIBCOUCHBASE_DBG_PATH})
else()
    set(LIBCOUCHBASE_FINAL_DIRPATH ${LIBCOUCHBASE_RELEASE_DIRPATH})
    set(LIBCOUCHBASE_FINAL_PATH ${LIBCOUCHBASE_RELEASE_PATH})
endif()



set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
target_link_libraries(couchbase_python_client ${Boost_LIBRARIES}   ${LIBCOUCHBASE_FINAL_PATH}  ${PYTHON_LIBRARIES} -Wl,-rpath,${LIBCOUCHBASE_FINAL_DIRPATH})
set_target_properties(
        couchbase_python_client
        PROPERTIES COMPILE_FLAGS ""${CMAKE_C_FLAGS}""
        INSTALL_RPATH ""${LIBCOUCHBASE_DBG_DIRPATH};${INSTALL_RPATH}""
        PREFIX """"
        OUTPUT_NAME ${PYCBC_C_MOD_NAME}
        LINKER_LANGUAGE C
        SUFFIX ${PYCBC_C_MOD_SUFFIX}
)

",3.1,3.1
26208,jbrooker,cpp-multihash,False,False,False,False,False,2,C++,2020-03-11 08:13:26+00:00,2015-12-05 11:21:56+00:00,5,231,"cmake_minimum_required(VERSION 3.10)

project(multihash VERSION 1.0 LANGUAGES CXX)
include(CTest)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 17)

find_package(cryptopp CONFIG REQUIRED)

set(HEADER_FILES 
    multihash/algorithm.h;
    multihash/digest.h;
    multihash/function.h;
    multihash/code.h;
    )
add_library(libmultihash
            multihash/algorithm.cpp
            multihash/detail/cryptopp_impl.h
            multihash/function.cpp
            multihash/code.cpp
            multihash/digest.cpp
            ${HEADER_FILES})
set_target_properties(libmultihash PROPERTIES OUTPUT_NAME multihash)
target_include_directories(libmultihash PUBLIC 
                           $<BUILD_INTERFACE:${multihash_SOURCE_DIR}>
                           $<INSTALL_INTERFACE:include>)
target_link_libraries(libmultihash PUBLIC cryptopp-static)
if (MSVC) 
    target_compile_options(libmultihash PRIVATE /W4 /WX /MP)
else() 
    target_compile_options(libmultihash PRIVATE -Wall -Wextra -pedantic -Werror)
endif()

if (NOT CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DNDEBUG)
endif()

if(BUILD_TESTING)
    find_package(GTest MODULE REQUIRED)
    add_executable(MultihashTest 
                   test/multihash_test.cpp 
                   test/hash_code_test.cpp 
                   test/main.cpp
                   multihash/detail/cryptopp_impl.cpp)
    target_link_libraries(MultihashTest PRIVATE libmultihash GTest::GTest GTest::Main)
    gtest_discover_tests(MultihashTest)
    if (MSVC) 
        target_compile_options(MultihashTest PRIVATE /W4 /WX /MP)
    else() 
        target_compile_options(MultihashTest PRIVATE -Wall -Wextra -pedantic -Werror)
    endif()

    if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
        target_compile_options(libmultihash PRIVATE -Wall -Werror -pedantic -Wextra)
        # Binary depends on getopt which is unavailable in Windows
        add_executable(multihash multihash/main.cpp)
        target_link_libraries(multihash libmultihash)
        # Component test for whole executable
        add_test(
            NAME MultihashBinTest WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
            COMMAND multihash --hash-type sha1 ${CMAKE_CURRENT_SOURCE_DIR}/test/foo
        )
        set_tests_properties(
            MultihashBinTest PROPERTIES PASS_REGULAR_EXPRESSION
            ""1114f1d2d2f924e986ac86fdf7b36c94bcdf32beec15""
            TIMEOUT 1
        )
    endif()
endif()

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ""${multihash_BINARY_DIR}/multihashConfigVersion.cmake""
    VERSION ${PACKAGE_VERSION}
    COMPATIBILITY AnyNewerVersion)

install(TARGETS libmultihash
        EXPORT multihashTargets
        INCLUDES DESTINATION include
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
install(FILES ${HEADER_FILES} DESTINATION include/multihash)

include(CMakePackageConfigHelpers)
configure_package_config_file(
    ""${multihash_SOURCE_DIR}/cmake/multihashConfig.cmake""
    ""${multihash_BINARY_DIR}/multihashConfig.cmake""
    INSTALL_DESTINATION share/cmake/multihash
)

install(EXPORT multihashTargets DESTINATION share/cmake/multihash)
install(FILES ""${multihash_BINARY_DIR}/multihashConfigVersion.cmake""
              ""${multihash_BINARY_DIR}/multihashConfig.cmake""
        DESTINATION share/cmake/multihash)

",3.10,3.1
26364,dronecore,DroneCore,False,False,False,False,False,66,C++,2020-05-17 21:40:14+00:00,2017-06-19 19:54:57+00:00,230,3181,"cmake_minimum_required(VERSION 3.1)

# Extract command line args into ${CL_ARGS} in order to propagate them to the superbuild dependencies 
get_cmake_property(vars CACHE_VARIABLES)
foreach(var ${vars})
  get_property(currentHelpString CACHE ""${var}"" PROPERTY HELPSTRING)
    if(""${currentHelpString}"" MATCHES ""No help, variable specified on the command line."" OR ""${currentHelpString}"" STREQUAL """")
        #message(""${var} = [${${var}}]  --  ${currentHelpString}"") # uncomment to see the variables being processed
        list(APPEND CL_ARGS ""-D${var}=${${var}}"")
    endif()
endforeach()

project(mavsdk_superbuild)

option(SUPERBUILD ""Build dependencies"" ON)
option(BUILD_BACKEND ""Build gRPC backend server"" OFF)
option(BUILD_SHARED_LIBS ""Build core as shared libraries instead of static ones"" ON)

set(DEPS_BUILD_PATH ""${PROJECT_BINARY_DIR}/third_party"" CACHE PATH ""Install path for the dependencies. Ignored if SUPERBUILD=OFF."")
set(DEPS_INSTALL_PATH ""${DEPS_BUILD_PATH}/install"" CACHE PATH ""Install path for the dependencies. Ignored if SUPERBUILD=OFF."")

include(GNUInstallDirs)

if(SUPERBUILD)
    add_subdirectory(third_party)
endif()

add_subdirectory(src)

install(EXPORT mavsdk-targets
    FILE MAVSDKTargets.cmake
    NAMESPACE MAVSDK::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MAVSDK
    )

# For the build tree
configure_file(MAVSDKConfig.cmake.in
    ""${PROJECT_BINARY_DIR}/MAVSDKConfig.cmake"" @ONLY)
# For the install tree
configure_file(MAVSDKConfig.cmake.in
    ""${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/MAVSDKConfig.cmake"" @ONLY)

install(FILES
    ""${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/MAVSDKConfig.cmake""
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MAVSDK)
",3.1,3.1
26621,Peixinho,Pyros3D,False,False,False,False,False,1,C++,2020-01-08 12:22:25+00:00,2015-12-17 12:02:21+00:00,8,624,"cmake_minimum_required(VERSION 3.1)

project(Pyros3D)

set(CMAKE_CXX_STANDARD 17)

# Check Build Type
if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
	add_definitions(-D_DEBUG)
endif ()


# Find Freetype
find_package(Freetype REQUIRED)
if (NOT FREETYPE_FOUND)
	message(ERROR "" Freetype2 not found!"")
endif(NOT FREETYPE_FOUND)


# Find Bullet
find_package(Bullet REQUIRED)
if (NOT BULLET_FOUND)
	message(ERROR "" Bullet not found!"")
endif(NOT BULLET_FOUND)


# Desktop
option(IS_DESKTOP ""Target is Desktop"" ON)
if (IS_DESKTOP)
	SET(DESKTOP -DDESKTOP)
	add_definitions(-DDESKTOP)
endif(IS_DESKTOP)


# LUA Support
if (HAVE_LUA_BINDINGS)
	SET(LUA_BINDINGS -DLUA_BINDINGS)
	add_definitions(-DLUA_BINDINGS)

	find_package(Lua51 REQUIRED)
	if (NOT LUA51_FOUND)
		message(ERROR "" Lua not found!"")
	endif(NOT LUA51_FOUND)
	set(LUA_LIB -llua)
endif(HAVE_LUA_BINDINGS)



# Set OpenGL Version
SET(OPENGL_VERSION ""GL45"" CACHE STRING ""OpenGL Version"")
if (OPENGL_VERSION STREQUAL ""GL45"")
	add_definitions(-DGL45)
	SET(GL_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Ext/gl45/glad.c)
	# Find OpenGL
	find_package(OpenGL REQUIRED)
	if (NOT OPENGL_FOUND)
		message(ERROR "" OpenGL not found!"")
	endif(NOT OPENGL_FOUND)
	SET(OPENGL_LIBS ${OPENGL_LIBRARIES})
else()
		SET(OPENGL_LIBS GLESv2)

		if (OPENGL_VERSION STREQUAL ""GLES2"")
			add_definitions(-DGLES2)
			if (IS_DESKTOP)
				SET(GL_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Ext/gles2/glad.c)
			endif(IS_DESKTOP)
		else()
		if (OPENGL_VERSION STREQUAL ""GLES3"")
			add_definitions(-DGLES3)
			if (IS_DESKTOP)
				SET(GL_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Ext/gles3/glad.c)
			endif(IS_DESKTOP)
		endif()
	endif()
endif()


# Lib Type
option(STATIC_LIB ""Build Static Lib"" OFF)
if (STATIC_LIB)
	SET(LIB_TYPE STATIC)
else()
	SET(LIB_TYPE SHARED)
endif()


# Engine Sources
set(SOURCE
	${SOURCE}
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/Thread/Thread.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/ModelLoaders/MultiModelLoader/ModelLoader.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/ModelLoaders/MultiModelLoader/AnimationLoader.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/ModelLoaders/IModelLoader.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/Mouse3D/Mouse3D.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/Mouse3D/PainterPick.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/Bindings/PyrosBindings.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/Geometry/Geometry.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/FPS/FPS.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Utils/DeltaTime/DeltaTime.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Lights/ILightComponent.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Lights/PointLight/PointLight.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Lights/DirectionalLight/DirectionalLight.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Lights/SpotLight/SpotLight.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Rendering/RenderingComponent.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Components/Rendering/RenderingInstancedComponent.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Culling/Culling.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Culling/FrustumCulling/FrustumCulling.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/PostEffectsManager.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/IEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/BlurSSAOEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/VignetteEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/BlurXEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/ResizeEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/BlurYEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/BloomEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/RTTDebug.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/PostEffects/Effects/SSAOEffect.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Renderer/SpecialRenderers/CubemapRenderer/CubemapRenderer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Renderer/DebugRenderer/DebugRenderer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Renderer/DeferredRenderer/DeferredRenderer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Renderer/ForwardRenderer/ForwardRenderer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Rendering/Renderer/IRenderer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/GameObjects/GameObject.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Octree/Octree.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Logs/Log.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Buffers/FrameBuffer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Buffers/GeometryBuffer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/InputManager/InputManager.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/File/File.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Matrix.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Math.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Vec4.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Quaternion.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Vec2.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Math/Vec3.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Context/Context.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Core/Projection/Projection.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Materials/Shaders/Shaders.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Materials/IMaterial.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Materials/GenericShaderMaterials/GenericShaderMaterial.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Materials/CustomShaderMaterials/CustomShaderMaterial.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/SceneGraph/SceneGraph.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Ext/StringIDs/CRC32.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Ext/StringIDs/StringID.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/TriangleMesh/PhysicsTriangleMesh.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Capsule/PhysicsCapsule.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Cone/PhysicsCone.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Sphere/PhysicsSphere.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Cylinder/PhysicsCylinder.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Box/PhysicsBox.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/ConvexTriangleMesh/PhysicsConvexTriangleMesh.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/IPhysicsComponent.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/MultipleSphere/PhysicsMultipleSphere.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/Vehicle/PhysicsVehicle.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/StaticPlane/PhysicsStaticPlane.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Components/ConvexHull/PhysicsConvexHull.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/Physics.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/PhysicsEngines/BulletPhysics/DebugDraw/PhysicsDebugDraw.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/PhysicsEngines/BulletPhysics/BulletPhysics.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Physics/PhysicsEngines/IPhysics.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Resources/Resources.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/AnimationManager/SkeletonAnimation.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/AnimationManager/TextureAnimation.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Font/Font.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Models/Model.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Decals/Decals.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Renderables.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Text/Text.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Primitive.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Capsule.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Cube.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Cone.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Sphere.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/TorusKnot.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Torus.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Plane.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Primitives/Shapes/Cylinder.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Renderable/Terrains/Terrain.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/Pyros3D/Assets/Texture/Texture.cpp
	${GL_INCLUDE}
)


# Headers
set(HEADERS
	${HEADERS}
	${CMAKE_CURRENT_SOURCE_DIR}/include
)

include_directories(${HEADERS} ${OPENGL_INCLUDE_DIRS} ${FREETYPE_INCLUDE_DIRS} ${BULLET_INCLUDE_DIRS})

# Engine Library
add_library(PyrosEngine ${LIB_TYPE} ${SOURCE} ${FREETYPE_INCLUDE_DIRS} ${BULLET_INCLUDE_DIRS})
target_link_libraries(PyrosEngine ${OPENGL_LIBS} ${BULLET_LIBRARIES} ${FREETYPE_LIBRARIES} ${ASSIMP_LIBRARIES} ${CONTEXT_LIB} pthread dl)

# Model Converter
option(BUILD_CONVERTER ""Build Model Converter"" OFF)
if (BUILD_CONVERTER)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tools/AssimpImporter)
endif()


# Demos
option(BUILD_DEMOS ""Build Demos"" OFF)
if (BUILD_DEMOS)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/examples)
endif()
",3.1,3.1
26647,alecthomas,entityx,False,False,False,False,False,37,C++,2020-05-01 13:28:10+00:00,2012-10-24 21:07:42+00:00,1639,313,"cmake_minimum_required(VERSION 3.1)
set(ENTITYX_MAJOR_VERSION 1)
set(ENTITYX_MINOR_VERSION 1)
set(ENTITYX_PATCH_VERSION 2)
set(ENTITYX_VERSION ${ENTITYX_MAJOR_VERSION}.${ENTITYX_MINOR_VERSION}.${ENTITYX_PATCH_VERSION})
set(CMAKE_CXX_EXTENSIONS OFF)

project(EntityX)

message(STATUS ""EntityX version ${ENTITYX_VERSION}"")

if(NOT DEFINED CMAKE_MACOSX_RPATH)
  set(CMAKE_MACOSX_RPATH 0)
endif()


include_directories(${CMAKE_CURRENT_LIST_DIR})

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(ENTITYX_BUILD_TESTING true CACHE BOOL ""Enable building of tests."")
set(ENTITYX_RUN_BENCHMARKS false CACHE BOOL ""Run benchmarks (in conjunction with -DENTITYX_BUILD_TESTING=1)."")
set(ENTITYX_MAX_COMPONENTS 64 CACHE STRING ""Set the maximum number of components."")
set(ENTITYX_DT_TYPE double CACHE STRING ""The type used for delta time in EntityX update methods."")
set(ENTITYX_BUILD_SHARED true CACHE BOOL ""Build shared libraries?"")

include(${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
include(CheckCXXSourceCompiles)

# Default compiler args
if (CMAKE_CXX_COMPILER_ID MATCHES ""(GNU|.*Clang)"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Werror -Wall -Wextra -Wno-unused-parameter -Wno-error=unused-variable -Wno-error=sign-compare"")
    set(CMAKE_CXX_FLAGS_DEBUG ""-O0 -g"")
    set(CMAKE_CXX_FLAGS_MINSIZEREL ""-g -Os -DNDEBUG"")
    set(CMAKE_CXX_FLAGS_RELEASE ""-g -O2 -DNDEBUG"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""-O2 -g"")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL 'MSVC')
    # /Zi - Produces a program database (PDB) that contains type information and symbolic debugging information for use with the debugger.
    # /FS - Allows multiple cl.exe processes to write to the same .pdb file
    # /DEBUG - Enable debug during linking
    # /Od - Disables optimization
    set(CMAKE_CXX_FLAGS_DEBUG ""/Zi /FS /DEBUG /Od /MDd"")
    # /Ox - Full optimization
    set(CMAKE_CXX_FLAGS_RELEASE ""/Ox -DNDEBUG"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""/Ox /Zi /FS /DEBUG"")
endif()

# if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
#     set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Weverything -Wno-c++98-compat -Wno-shadow -Wno-padded -Wno-missing-noreturn -Wno-global-constructors"")
# endif()

# Library installation directory
if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR lib)
endif(NOT DEFINED CMAKE_INSTALL_LIBDIR)
set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})

set(OLD_CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
if ((MAKE_CXX_COMPILER_ID STREQUAL ""GNU"") OR (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang""))
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
endif()
check_cxx_source_compiles(
""
#include <memory>

int main() {
    std::shared_ptr<int>();
}
""
ENTITYX_HAVE_CXX11_STDLIB
)

if (NOT ENTITYX_HAVE_CXX11_STDLIB)
    message(STATUS ""-- Not using -stdlib=libc++ (test failed to build)"")
    set(CMAKE_CXX_FLAGS ""${OLD_CMAKE_CXX_FLAGS}"")
else ()
    message(STATUS ""-- Using -stdlib=libc++"")
endif ()


# Misc features
check_include_file(""stdint.h"" HAVE_STDINT_H)

macro(require FEATURE_NAME MESSAGE_STRING)
    if (NOT ${${FEATURE_NAME}})
        message(FATAL_ERROR ""${MESSAGE_STRING} required -- ${${FEATURE_NAME}}"")
    else()
        message(STATUS ""--   ${MESSAGE_STRING} found"")
    endif()
endmacro(require)

macro(create_test TARGET_NAME SOURCE DEPENDENCIES)
    add_executable(${TARGET_NAME} ${SOURCE})
    set_target_properties(${TARGET_NAME} PROPERTIES FOLDER ""entityx/tests"")
    target_link_libraries(
        ${TARGET_NAME}
        ${DEPENDENCIES}
        ${ARGN}
        )

    # Special case for benchmark tests
    if (${TARGET_NAME} MATCHES .*benchmark.*)
        if(ENTITYX_RUN_BENCHMARKS)
            add_test(${TARGET_NAME} ${TARGET_NAME})
        endif()
    else()
        add_test(${TARGET_NAME} ${TARGET_NAME})
    endif()
endmacro()

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS ""-- Defaulting to release build (use -DCMAKE_BUILD_TYPE:STRING=Debug for debug build)"")
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

message(STATUS ""-- Checking misc features"")
require(HAVE_STDINT_H ""stdint.h"")

# Things to install

if (NOT DEFINED CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX ""-d"")
endif()

set(sources entityx/System.cc entityx/Event.cc entityx/Entity.cc entityx/help/Timer.cc entityx/help/Pool.cc)

if (ENTITYX_BUILD_SHARED)
    message(STATUS ""-- Building shared libraries (-DENTITYX_BUILD_SHARED=0 to only build static libraries)"")
    add_library(entityx SHARED ${sources})

    set_target_properties(entityx PROPERTIES
        OUTPUT_NAME entityx
        DEBUG_POSTFIX ""${CMAKE_DEBUG_POSTFIX}""
        VERSION ${ENTITYX_VERSION}
        SOVERSION ${ENTITYX_MAJOR_VERSION}
        FOLDER entityx)
    set(install_libs entityx)
    set_property(TARGET entityx APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
else()
    add_library(entityx STATIC ${sources})
    set_target_properties(entityx PROPERTIES 
        DEBUG_POSTFIX ""${CMAKE_DEBUG_POSTFIX}""
        FOLDER entityx)
    set(install_libs entityx)
    set_property(TARGET entityx APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
endif (ENTITYX_BUILD_SHARED)

# Make sure C++11 features are available
target_compile_features(entityx PUBLIC cxx_auto_type)
target_compile_features(entityx PUBLIC cxx_nullptr)
target_compile_features(entityx PUBLIC cxx_static_assert)
target_compile_features(entityx PUBLIC cxx_decltype)
target_compile_features(entityx PUBLIC cxx_constexpr)
target_compile_features(entityx PUBLIC cxx_sizeof_member)
target_compile_features(entityx PUBLIC cxx_variadic_templates)
target_compile_features(entityx PUBLIC cxx_rvalue_references)
target_compile_features(entityx PUBLIC cxx_long_long_type)
target_compile_features(entityx PUBLIC cxx_lambdas)
target_compile_features(entityx PUBLIC cxx_func_identifier)

if (ENTITYX_BUILD_TESTING)
    enable_testing()
    create_test(pool_test entityx/help/Pool_test.cc ${install_libs})
    create_test(entity_test entityx/Entity_test.cc ${install_libs})
    create_test(event_test entityx/Event_test.cc ${install_libs})
    create_test(system_test entityx/System_test.cc ${install_libs})
    create_test(tags_component_test entityx/tags/TagsComponent_test.cc ${install_libs})
    create_test(dependencies_test entityx/deps/Dependencies_test.cc ${install_libs})
    create_test(benchmarks_test entityx/Benchmarks_test.cc ${install_libs})
    if (ENTITYX_RUN_BENCHMARKS)
        message(STATUS ""-- Running benchmarks"")
    else ()
        message(STATUS ""-- Not running benchmarks (use -DENTITYX_RUN_BENCHMARKS=1 to enable)"")
    endif ()
endif (ENTITYX_BUILD_TESTING)


configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/entityx/config.h.in
    ${CMAKE_CURRENT_SOURCE_DIR}/entityx/config.h
)


if (NOT WINDOWS OR CYGWIN)
    set(entityx_libs -lentityx)

    configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/entityx.pc.in
        ${CMAKE_CURRENT_BINARY_DIR}/entityx.pc
        )

    install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/entityx.pc
        DESTINATION ""${libdir}/pkgconfig""
        )
endif()

install(
    DIRECTORY ""entityx""
    DESTINATION ""include""
    FILES_MATCHING PATTERN ""*.h""
    )

install(
    TARGETS ${install_libs}
    LIBRARY DESTINATION ""${libdir}""
    ARCHIVE DESTINATION ""${libdir}""
    RUNTIME DESTINATION ""bin""
    )
",3.1,3.1
26660,riebl,artery,False,False,False,False,False,12,C++,2020-04-28 20:19:39+00:00,2015-06-01 15:07:04+00:00,75,2221,"cmake_minimum_required(VERSION 3.1)
project(Artery)
if(POLICY CMP0076)
    cmake_policy(SET CMP0076 NEW)
endif()
if(POLICY CMP0079)
    cmake_policy(SET CMP0079 OLD)
endif()
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
set(CMAKE_CXX_STANDARD 11)
enable_testing()

find_package(OmnetPP 5.4 REQUIRED)
include(cmake/ImportOppTarget.cmake)
include(cmake/GenerateOppMessage.cmake)
include(cmake/GetNedFolders.cmake)
include(cmake/AddOppBuildTarget.cmake)
include(cmake/AddOppRun.cmake)

find_package(Vanetza CONFIG PATHS extern/vanetza/build REQUIRED NO_CMAKE_PACKAGE_REGISTRY)

find_path(Veins_DIR NAMES src/veins/package.ned PATHS extern/veins DOC ""Veins root directory"")
import_opp_target(veins ${Veins_DIR}/src/Makefile)

find_path(INET_DIR NAMES src/inet/package.ned PATHS extern/inet DOC ""INET root directory"")
import_opp_target(INET ${INET_DIR}/src/Makefile)

option(WITH_SIMULTE ""Build Artery with SimuLTE integration"" OFF)
if(WITH_SIMULTE)
    find_path(SimuLTE_DIR NAMES src/package.ned PATHS extern/simulte DOC ""SimuLTE root directory"")
    import_opp_target(lte ${SimuLTE_DIR}/src/Makefile)
else()
    message(STATUS ""SimuLTE integration disabled"")
endif()

find_program(MAKE_COMMAND NAMES make gmake HINTS ${CMAKE_MAKE_COMMAND} DOC ""Makefile processor"")
set(MAKE_ARGUMENTS """" CACHE STRING ""Additional arguments passed to Makefile processor"")
string(REPLACE "" "" "";"" MAKE_ARGUMENTS ""${MAKE_ARGUMENTS}"")

if(""${Vanetza_DIR}"" STREQUAL ""${PROJECT_SOURCE_DIR}/extern/vanetza/build"")
    set(_make_command ${MAKE_COMMAND})
    if(CMAKE_GENERATOR MATCHES ""Makefiles"")
        set(_make_command \$\(MAKE\))
    endif()
    add_custom_target(build_vanetza
        COMMAND ${_make_command} ${MAKE_ARGUMENTS} vanetza
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        COMMENT ""Building Vanetza (external dependency)""
        VERBATIM)
    add_dependencies(Vanetza::vanetza build_vanetza)
endif()

if(""${Veins_DIR}"" STREQUAL ""${PROJECT_SOURCE_DIR}/extern/veins"")
    add_opp_build_target(Veins)
    add_dependencies(veins build_veins)
endif()

if(""${INET_DIR}"" STREQUAL ""${PROJECT_SOURCE_DIR}/extern/inet"")
    add_opp_build_target(INET)
    add_dependencies(INET build_inet)
endif()

if(""${SimuLTE_DIR}"" STREQUAL ""${PROJECT_SOURCE_DIR}/extern/simulte"" AND WITH_SIMULTE)
    add_opp_build_target(SimuLTE)
    add_dependencies(lte build_simulte)
endif()

option(WITH_ENVMOD ""Build Artery with environment model feature"" ON)
option(WITH_STORYBOARD ""Build Artery with storyboard feature"" ON)
option(WITH_TRANSFUSION ""Build Artery with transfusion feature"" OFF)
option(WITH_TESTBED ""Build Artery with testbed feature"" OFF)

option(WITH_OTS ""Build Artery with support for OpenTrafficSim"" OFF)
if(WITH_OTS)
    add_subdirectory(src/ots)
endif()

add_subdirectory(src/artery)
add_subdirectory(src/traci)
add_subdirectory(scenarios)

# sumo-launchd should be run from root directory for correct file look-up
set(SUMO_LAUNCHD_ARGUMENTS ""--daemon --kill"" CACHE STRING ""Additional arguments passed to sumo-launchd"")
string(REPLACE "" "" "";"" _sumo_launchd_args ""${SUMO_LAUNCHD_ARGUMENTS}"")
add_custom_target(launch_sumo
    COMMAND ${Veins_DIR}/sumo-launchd.py ${_sumo_launchd_args}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT ""Launching SUMO""
    VERBATIM)
",3.1,3.1
26750,JPETTomography,j-pet-framework-examples,False,False,False,False,False,19,C++,2020-05-06 23:39:00+00:00,2016-06-17 20:06:04+00:00,1,1765,"################################################################################
## Set of projects based on J-PET Framework
## Created by J-PET Framework developers 2016-2018
##
## Description:
##   Script for building J-PET Framework, J-PET MLEM and all the examples
################################################################################

cmake_minimum_required(VERSION 3.1...3.14)

if(${CMAKE_VERSION} VERSION_LESS 3.14)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
    cmake_policy(VERSION 3.14)
endif()

project(JPetFrameworkExamples VERSION 1.0.0
                  LANGUAGES CXX)
set(PROJECT_DESCRIPTION ""JPetFrameworkExamples module"")

message(STATUS """")
message(STATUS ""    == ${PROJECT_NAME} Project configuration =="")
message(STATUS """")

set(CMAKE_CXX_STANDARD 11) # maybe not best solution to set it globally? upgrate minimal cmake version to 3.8 or find another way to set it only for target with interface
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_PLATFORM_INDEPENDENT_CODE ON)

# Force out-of-source build
file(TO_CMAKE_PATH ""${PROJECT_BINARY_DIR}/CMakeLists.txt"" LOC_PATH)
if(EXISTS ""${LOC_PATH}"")
    message(FATAL_ERROR ""You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles."")
endif()

set(default_build_type ""Release"")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to '${default_build_type}' as none was specified."")
  set(CMAKE_BUILD_TYPE ""${default_build_type}"" CACHE
      STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()

# Be nice and export compile commands by default, this is handy for clang-tidy
# and for other tools.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Helpful option enable build profiling to identify slowly compiling files
option(MEASURE_ALL ""When enabled all commands will be passed through time command"" OFF)
if(MEASURE_ALL)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""time"")
endif()

################################################################################
## Find Threads package
#
find_package(Threads REQUIRED)

################################################################################
## Find BOOST LIBs

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.50 REQUIRED 
             COMPONENTS filesystem
                        program_options
                        regex
                        system
                        log_setup
                        log
                        date_time
                        thread
                        chrono
                        atomic
                        )

if(NOT TARGET Boost::filesystem)
    add_library(Boost::filesystem IMPORTED INTERFACE)
    set_property(TARGET Boost::filesystem PROPERTY
        INTERFACE_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIR})
    set_property(TARGET Boost::filesystem PROPERTY
        INTERFACE_LINK_LIBRARIES ${Boost_LIBRARIES})
endif()

################################################################################
## Find CERN ROOT 6.10+
find_package(ROOT CONFIG REQUIRED)
if(ROOT_FOUND)
  message(STATUS ""ROOT (version ${ROOT_VERSION}) was found using ROOTConfig"")
endif()

if(EXISTS ""${ROOT_DIR}/modules/RootNewMacros.cmake"")
  include(""${ROOT_DIR}/modules/RootNewMacros.cmake"")
  message(STATUS ""Found RootNewMacros.cmake in: ${ROOT_DIR}/modules!"")
elseif(EXISTS ""${ROOT_DIR}/cmake/modules/RootNewMacros.cmake"")
  include(""${ROOT_DIR}/cmake/modules/RootNewMacros.cmake"")
  message(STATUS ""Found RootNewMacros.cmake in: ${ROOT_DIR}/cmake/modules!"")
elseif(EXISTS ""${ROOT_DIR}/../cmake/modules/RootNewMacros.cmake"")
  include(""${ROOT_DIR}/../cmake/modules/RootNewMacros.cmake"")
  message(STATUS ""Found RootNewMacros.cmake in: ${ROOT_DIR}/../cmake/modules!"")
else()
  message(""ERROR! Could not find RootNewMacros.cmake file! Aborting.."")
  return(1)
endif()
# fix missing include directories property in versions < ROOT 6.12
set_target_properties(ROOT::Core PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ""${ROOT_INCLUDE_DIRS}"")


add_library(ROOT::Flags_CXX IMPORTED INTERFACE)

# Fix for ROOT_CXX_FLAGS not actually being a CMake list
separate_arguments(ROOT_CXX_FLAGS)
set_property(TARGET ROOT::Flags_CXX APPEND PROPERTY
    INTERFACE_COMPILE_OPTIONS ${ROOT_CXX_FLAGS})

# Add definitions
separate_arguments(ROOT_DEFINITIONS)
foreach(_flag ${ROOT_EXE_LINKER_FLAG_LIST})
    # Remove -D or /D if present
    string(REGEX REPLACE [=[^[-//]D]=] """" _flag ${_flag})
    set_property(TARGET ROOT::Flags APPEND PROPERTY INTERFACE_LINK_LIBRARIES ${_flag})
endforeach()

# This also fixes a bug in the linker flags
string(REPLACE ""-L "" ""-L"" ROOT_EXE_LINKER_FLAGS ""${ROOT_EXE_LINKER_FLAGS}"")
separate_arguments(ROOT_EXE_LINKER_FLAGS)
set_property(TARGET ROOT::Flags_CXX APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES ${ROOT_EXE_LINKER_FLAGS})

################################################################################
## Find JPetFramework
find_package(JPetFramework CONFIG QUIET)
if(JPetFramework_FOUND)
  message(STATUS ""JPetFramework (version ${JPetFramework_VERSION}) was found using JPetFrameworkConfig"")
else()
  message(STATUS ""Could not find JPetFramework, please source path/to/framework/bin/thisframework.sh to set correct paths.."")
  find_package(JPetFramework CONFIG REQUIRED) #to print error message
endif(JPetFramework_FOUND)
################################################################################
## Download input and configuration files
## The script shouldn't do anything if the data is present and correct.
option(DOWNLOAD_DATA ""Download data"" ON)
if(DOWNLOAD_DATA)
  set(DOWNLOAD_BASE_PATH ${PROJECT_SOURCE_DIR})  

  file(DOWNLOAD ""http://sphinx.if.uj.edu.pl/framework/examples_reformed.sha"" ${DOWNLOAD_BASE_PATH}/examples_reformed.sha)
  file(READ ${DOWNLOAD_BASE_PATH}/examples_reformed.sha SHA_HASHES)
  string(REGEX REPLACE ""\n"" "";"" SHA_HASHES ""${SHA_HASHES}"") #create cmake array from hash + file path
  foreach(SHA_HASH ${SHA_HASHES})
    string(REGEX REPLACE ""  "" "";"" SHA_HASH ""${SHA_HASH}"") #Split hash and file path
    list(GET SHA_HASH 0 SHA256) #get sha hash
    list(GET SHA_HASH 1 PATH) #get file path
    string(REPLACE ""ExamplesReformed/"" """" SAVE_PATH ${PATH})

    if(EXISTS ""${DOWNLOAD_BASE_PATH}/${SAVE_PATH}"")
      file(SHA256 ${DOWNLOAD_BASE_PATH}/${SAVE_PATH} CURRENT_SHA256)
    endif(EXISTS ""${DOWNLOAD_BASE_PATH}/${SAVE_PATH}"")
    if(NOT ""${CURRENT_SHA256}"" STREQUAL ""${SHA256}"")
      message(STATUS ""SHA value of ${DOWNLOAD_BASE_PATH}/${SAVE_PATH} to not match! Downloading file.."")
      file(DOWNLOAD ""http://sphinx.if.uj.edu.pl/framework/${PATH}"" ${DOWNLOAD_BASE_PATH}/${SAVE_PATH} EXPECTED_HASH SHA256=${SHA256})
    endif(NOT ""${CURRENT_SHA256}"" STREQUAL ""${SHA256}"")
  endforeach(SHA_HASH ${SHA_HASHES})
  file(REMOVE ${DOWNLOAD_BASE_PATH}/examples_reformed.sha)
endif()

################################################################################
## Add general modules files
add_subdirectory(modules)

################################################################################
## Directories with examples
add_subdirectory(InterThresholdCalibration)
add_subdirectory(LargeBarrelAnalysis)
add_subdirectory(VelocityCalibration)
add_subdirectory(NewAnalysisTemplate)
add_subdirectory(ImageReconstruction)
add_subdirectory(ScopeLoaderExample)
add_subdirectory(TimeCalibration)
add_subdirectory(MCGeantAnalysis)
add_subdirectory(PhysicAnalysis)
add_subdirectory(CosmicAnalysis)
add_subdirectory(ScopeAnalysis)
add_subdirectory(Imaging)
add_subdirectory(TimeCalibration_iter)
add_subdirectory(UserDataClassExample)
",3.1...3.14,3.1
26880,TorstenRobitzki,bluetoe,False,False,False,False,False,6,C++,2020-04-07 06:44:59+00:00,2015-04-06 11:04:10+00:00,107,752,"cmake_minimum_required(VERSION 3.10)
# Prevent in source build, add this options before project keyword
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
project(lib_bluetoe CXX)

add_library(bluetoe_iface INTERFACE)
add_library(bluetoe::iface ALIAS bluetoe_iface)
target_include_directories(bluetoe_iface INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})

add_subdirectory(bluetoe/link_layer)
add_subdirectory(bluetoe/utility)
add_subdirectory(bluetoe/sm)
add_subdirectory(bluetoe/services)

if (CMAKE_CROSSCOMPILING)
    add_subdirectory(bluetoe/bindings/nrf51)
endif ()

if (NOT CMAKE_CROSSCOMPILING)
    enable_testing()
    add_subdirectory(tests)
endif()

",3.10,3.1
27171,PADrend,Plugins,False,False,False,False,False,6,Erlang,2020-05-05 08:19:08+00:00,2013-12-06 12:13:33+00:00,1,667,"#
# This file is part of the open source part of the
# Platform for Algorithm Development and Rendering (PADrend).
# Web page: http://www.padrend.de/
# Copyright (C) 2013 Benjamin Eikel <benjamin@eikel.org>
# Copyright (C) 2015-2019 Sascha Brandt <sascha@brandt.graphics>
# 
# PADrend consists of an open source part and a proprietary part.
# The open source part of PADrend is subject to the terms of the Mozilla
# Public License, v. 2.0. You should have received a copy of the MPL along
# with this library; see the file LICENSE. If not, you can obtain one at
# http://mozilla.org/MPL/2.0/.
#
cmake_minimum_required(VERSION 3.1.0)
project(PADrendPlugins VERSION 1.1.0)

# Set up install directories
include(GNUInstallDirs)

# Install all files into a data directory
install(
	DIRECTORY ./
	DESTINATION ${CMAKE_INSTALL_DATADIR}/PADrend/plugins
	COMPONENT data
	PATTERN "".svn"" EXCLUDE
	PATTERN "".git"" EXCLUDE
)
",3.1.0,3.1
27194,jorisv,Tasks,False,False,False,False,False,15,C++,2020-05-13 08:01:21+00:00,2012-09-03 16:37:00+00:00,41,484,"#
# Copyright 2012-2019 CNRS-UM LIRMM, CNRS-AIST JRL
#

cmake_minimum_required(VERSION 3.1.3)

set(PROJECT_NAME Tasks)
set(PROJECT_DESCRIPTION ""..."")
set(PROJECT_URL ""https://github.com/jrl-umi3218/Tasks"")
set(PROJECT_DEBUG_POSTFIX ""_d"")
set(PROJECT_VERSION 1.2.0)
set(PROJECT_USE_CMAKE_EXPORT TRUE)

# Disable -Werror on Unix for now.
set(CXX_DISABLE_WERROR True)
set(DOXYGEN_USE_MATHJAX ""YES"")

include(cmake/base.cmake)
include(cmake/cython/cython.cmake)
include(cmake/msvc-specific.cmake)

project(Tasks CXX)

add_definitions(-mfpmath=sse -msse2)

if(NOT WIN32)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic"")
endif()

add_project_dependency(RBDyn REQUIRED)
add_project_dependency(sch-core REQUIRED)
add_project_dependency(eigen-qld REQUIRED)
find_package(eigen-lssol QUIET)
if(${eigen-lssol_FOUND})
  add_project_dependency(eigen-lssol REQUIRED)
endif()

# For MSVC, set local environment variable to enable finding the built dll
# of the main library when launching ctest with RUN_TESTS
if(MSVC)
  set(CMAKE_MSVCIDE_RUN_PATH ""\$(SolutionDir)/src/\$(Configuration)"")
endif(MSVC)

add_subdirectory(src)

if(${BUILD_TESTING})
  add_subdirectory(tests)
endif()

if(${PYTHON_BINDING})
 add_subdirectory(binding/python)
endif()
",3.1.3,3.1
27337,metashell,metashell,False,False,False,False,False,9,C++,2020-05-17 16:54:46+00:00,2013-07-14 09:39:33+00:00,393,2106,"# Metashell - Interactive C++ template metaprogramming shell
# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.1)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
  cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
  cmake_policy(VERSION 3.12)
endif()

set(SYSTEM_TESTS internal templight clang gcc msvc wave)
set(VALID_TESTS ${SYSTEM_TESTS} unit auto)
if (DEFINED TESTS AND NOT (TESTS IN_LIST VALID_TESTS))
  message(
    FATAL_ERROR
    ""Invalid TESTS value: ${TESTS}.""
    "" It should be one of the following: ${VALID_TESTS}""
  )
endif()

project(metashell_project)

set(MAJOR_VERSION 4)
set(MINOR_VERSION 0)
set(PATCH_VERSION 0)

if (MSVC)
  add_compile_options(""/std:c++latest"")
else()
  set(CMAKE_CXX_STANDARD 17)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

include(Platform)
include(MetashellBoost)

# Warnings, C++11, etc
include(Compiler)

# Sanitizers
if (ENABLE_SANITIZERS)
  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    message(STATUS ""Enabling GCC's address sanitizer"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address"")
  elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    message(STATUS ""Enabling Clang's address sanitizer"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address"")
  endif()
endif()

# Code coverage
if (ENABLE_CODE_COVERAGE)
  include(CodeCoverage)

  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} --coverage"")
    set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} --coverage"")
  endif()
endif()

# Profiling
if (ENABLE_PROFILING)
  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pg"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pg"")
  endif()
endif()

# The ""internal"" Templight build
set(TEMPLIGHT_BUILD ""${CMAKE_BINARY_DIR}/../templight"")

set(
  TEMPLIGHT_INCLUDE_PATH
  ""${TEMPLIGHT_INCLUDE_PATH};${CMAKE_SOURCE_DIR}/3rd/templight/llvm/tools/clang/lib/Headers""
)
set(
  TEMPLIGHT_INCLUDEDIR
  ""${TEMPLIGHT_INCLUDEDIR};${CMAKE_SOURCE_DIR}/3rd/templight/llvm/tools/clang/include""
)
set(
  TEMPLIGHT_BINARYDIR
  ""${TEMPLIGHT_BINARYDIR};${TEMPLIGHT_BUILD}/Release+Asserts/bin""
)
set(
  TEMPLIGHT_BINARYDIR
  ""${TEMPLIGHT_BINARYDIR};${TEMPLIGHT_BUILD}/Release/bin""
)
set(
  TEMPLIGHT_BINARYDIR
  ""${TEMPLIGHT_BINARYDIR};${TEMPLIGHT_BUILD}/bin""
)

# Templight
find_package(Templight)

if (NOT DEFINED TEMPLIGHT_HEADER_INSTALL_PATH)
  set(TEMPLIGHT_HEADER_INSTALL_PATH ""include/metashell/templight"")
endif ()

if (NOT DEFINED LIBCXX_HEADER_INSTALL_PATH)
  set(LIBCXX_HEADER_INSTALL_PATH ""include/metashell/libcxx"")
endif ()

enable_testing()

add_subdirectory(app/metashell)
add_subdirectory(app/reference_gen)
add_subdirectory(app/stub/apple_clang)
add_subdirectory(app/stub/clang)
add_subdirectory(app/stub/cl_de)
add_subdirectory(app/stub/cl_en)
add_subdirectory(app/stub/gcc)

if (NOT DEFINED TESTS OR TESTS STREQUAL ""auto"")
  add_subdirectory(test/system/auto_engine)
else()
  message(STATUS ""Skipping auto system tests because TESTS=${TESTS}"")
endif()

if (NOT DEFINED TESTS OR TESTS IN_LIST SYSTEM_TESTS)
  add_subdirectory(test/system/core)
  add_subdirectory(test/system/mdb)
  add_subdirectory(test/system/pdb)
  add_subdirectory(test/system/pp)
else()
  message(STATUS ""Skipping system tests because TESTS=${TESTS}"")
endif()

if (NOT DEFINED TESTS OR TESTS STREQUAL ""unit"")
  add_subdirectory(test/unit/core)
  add_subdirectory(test/unit/data)
  add_subdirectory(test/unit/engine/clang)
  add_subdirectory(test/unit/engine/templight)
  add_subdirectory(test/unit/engine/vc)
  add_subdirectory(test/unit/main_shell)
  add_subdirectory(test/unit/mdb)
  add_subdirectory(test/unit/pragma)
  add_subdirectory(test/unit/replace_part)
  add_subdirectory(test/unit/system_test)
else()
  message(STATUS ""Skipping unit tests because TESTS=${TESTS}"")
endif()

add_subdirectory(lib/compiler_stub)
add_subdirectory(lib/core)
add_subdirectory(lib/data)
add_subdirectory(lib/defaults)
add_subdirectory(lib/engine/clang)
add_subdirectory(lib/engine/constant)
add_subdirectory(lib/engine/gcc)
add_subdirectory(lib/engine/null)
add_subdirectory(lib/engine/templight)
add_subdirectory(lib/engine/vc)
add_subdirectory(lib/engine/wave)
add_subdirectory(lib/iface)
add_subdirectory(lib/main_shell)
add_subdirectory(lib/mdb)
add_subdirectory(lib/mock)
add_subdirectory(lib/pattern)
add_subdirectory(lib/pragma)
add_subdirectory(lib/process)
add_subdirectory(lib/readline)
add_subdirectory(lib/replace_part)
add_subdirectory(lib/system_test)

add_subdirectory(3rd/boost/algorithm)
add_subdirectory(3rd/boost/align)
add_subdirectory(3rd/boost/any)
add_subdirectory(3rd/boost/array)
add_subdirectory(3rd/boost/assert)
add_subdirectory(3rd/boost/assign)
add_subdirectory(3rd/boost/atomic)
add_subdirectory(3rd/boost/bind)
add_subdirectory(3rd/boost/chrono)
add_subdirectory(3rd/boost/concept_check)
add_subdirectory(3rd/boost/config)
add_subdirectory(3rd/boost/container)
add_subdirectory(3rd/boost/container_hash)
add_subdirectory(3rd/boost/conversion)
add_subdirectory(3rd/boost/core)
add_subdirectory(3rd/boost/date_time)
add_subdirectory(3rd/boost/detail)
add_subdirectory(3rd/boost/exception)
add_subdirectory(3rd/boost/filesystem)
add_subdirectory(3rd/boost/foreach)
add_subdirectory(3rd/boost/function)
add_subdirectory(3rd/boost/functional)
add_subdirectory(3rd/boost/function_types)
add_subdirectory(3rd/boost/fusion)
add_subdirectory(3rd/boost/graph)
add_subdirectory(3rd/boost/integer)
add_subdirectory(3rd/boost/intrusive)
add_subdirectory(3rd/boost/io)
add_subdirectory(3rd/boost/iostreams)
add_subdirectory(3rd/boost/iterator)
add_subdirectory(3rd/boost/lexical_cast)
add_subdirectory(3rd/boost/math)
add_subdirectory(3rd/boost/move)
add_subdirectory(3rd/boost/mpl)
add_subdirectory(3rd/boost/multi_index)
add_subdirectory(3rd/boost/numeric_conversion)
add_subdirectory(3rd/boost/optional)
add_subdirectory(3rd/boost/phoenix)
add_subdirectory(3rd/boost/pool)
add_subdirectory(3rd/boost/predef)
add_subdirectory(3rd/boost/preprocessor)
add_subdirectory(3rd/boost/program_options)
add_subdirectory(3rd/boost/property_map)
add_subdirectory(3rd/boost/proto)
add_subdirectory(3rd/boost/range)
add_subdirectory(3rd/boost/ratio)
add_subdirectory(3rd/boost/regex)
add_subdirectory(3rd/boost/serialization)
add_subdirectory(3rd/boost/smart_ptr)
add_subdirectory(3rd/boost/spirit)
add_subdirectory(3rd/boost/static_assert)
add_subdirectory(3rd/boost/system)
add_subdirectory(3rd/boost/thread)
add_subdirectory(3rd/boost/throw_exception)
add_subdirectory(3rd/boost/tokenizer)
add_subdirectory(3rd/boost/tuple)
add_subdirectory(3rd/boost/type_index)
add_subdirectory(3rd/boost/typeof)
add_subdirectory(3rd/boost/type_traits)
add_subdirectory(3rd/boost/unordered)
add_subdirectory(3rd/boost/utility)
add_subdirectory(3rd/boost/variant)
add_subdirectory(3rd/boost/wave)
add_subdirectory(3rd/boost/winapi)

add_subdirectory(3rd/googlemock)
add_subdirectory(3rd/googletest)

add_subdirectory(3rd/just/console)
add_subdirectory(3rd/just/environment)
add_subdirectory(3rd/just/file)
add_subdirectory(3rd/just/lines)
add_subdirectory(3rd/just/temp)

add_subdirectory(3rd/mindent)
add_subdirectory(3rd/mpark_variant)
add_subdirectory(3rd/protobuf)
add_subdirectory(3rd/rapidjson)
add_subdirectory(3rd/yaml-cpp)

if (WIN32)
  add_subdirectory(3rd/wineditline)
else()
  add_subdirectory(3rd/termcap)
endif()

target_compile_definitions(
  metashell_core
  
  PUBLIC
    METASHELL_MAJOR=${MAJOR_VERSION}
    METASHELL_MINOR=${MINOR_VERSION}
    METASHELL_PATCH=${PATCH_VERSION}
)

if (NOT DEFINED TESTS OR TESTS IN_LIST SYSTEM_TESTS)
  set(SYSTEM_TEST_TARGETS )
  set(SYSTEM_TEST_FILES )
  foreach(T core pp mdb pdb)
    set(TARGET metashell_${T}_system_test)

    list(APPEND SYSTEM_TEST_TARGETS ${TARGET})
    list(APPEND SYSTEM_TEST_FILES ""$<TARGET_FILE:${TARGET}>"")
  endforeach(T)

  set(
    SYSTEM_TEST_ARCHIVE
    ""${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}_system_test_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}${METASHELL_PACKAGE_PLATFORM}_${CMAKE_SYSTEM_PROCESSOR}.tar.gz""
  )

  add_custom_target(
    system_test_zip DEPENDS ${SYSTEM_TEST_TARGETS}
    COMMAND
      ${CMAKE_COMMAND} -E
      tar ""cfz"" ""${SYSTEM_TEST_ARCHIVE}"" ${SYSTEM_TEST_FILES}
  )
else()
  add_custom_target(
    system_test_zip
    COMMAND echo ""Skipping system_test_zip because TESTS=${TESTS}""
  )

  message(
    STATUS
    ""Skipping system test archive generation because TESTS=${TESTS}""
  )
endif()

# Recursing
subdirs(tools)

# Debian package
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if (APPLE)
    # This argument is needed, so the generated archive will not have
    # /usr/local prefix for all files
    set(CMAKE_INSTALL_PREFIX ""."")
  else()
    set(CMAKE_INSTALL_PREFIX ""/usr"")
  endif()
endif()

if(EXISTS ""${CMAKE_ROOT}/Modules/CPack.cmake"")
  include(InstallRequiredSystemLibraries)

  if(WIN32)
    set(
      CPACK_NSIS_MENU_LINKS
      ""bin/metashell.exe"" ""Metashell""
      ""http://metashell.org"" ""Metashell website""
      ""http://metashell.org/about/demo"" ""Metashell online demo""
    )
  endif()

  if (DEFINED PLATFORM_CPACK_GENERATOR)
    set(CPACK_GENERATOR ""${PLATFORM_CPACK_GENERATOR}"")
  endif ()

  if (PLATFORM_NAME AND NOT WIN32)
    set(METASHELL_PACKAGE_PLATFORM ""_${PLATFORM_NAME}${PLATFORM_VERSION}"")
  else()
    set(METASHELL_PACKAGE_PLATFORM """")
  endif()

  set(CPACK_PACKAGE_DESCRIPTION ""Metashell"")
  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""It is an interactive C++ template metaprogramming shell"")
  set(CPACK_PACKAGE_VENDOR ""Abel Sinkovics"")
  set(CPACK_PACKAGE_CONTACT ""Abel Sinkovics <abel@sinkovics.hu>"")
  set(CPACK_PACKAGE_VERSION_MAJOR ""${MAJOR_VERSION}"")
  set(CPACK_PACKAGE_VERSION_MINOR ""${MINOR_VERSION}"")
  set(CPACK_PACKAGE_VERSION_PATCH ""${PATCH_VERSION}"")
  set(CPACK_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}${METASHELL_PACKAGE_PLATFORM}_${CMAKE_SYSTEM_PROCESSOR}"")
  set(CPACK_SOURCE_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}"")
  seT(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE.txt"")

  set(CPACK_DEBIAN_PACKAGE_PRIORITY ""optional"")
  set(CPACK_DEBIAN_PACKAGE_SECTION ""devel"")
  set(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})

  if (SUSE_LINUX)
    set(CPACK_RPM_PACKAGE_REQUIRES ""libstdc++-devel, glibc-devel"")
  elseif (FEDORA_LINUX)
    set(
      CPACK_RPM_PACKAGE_REQUIRES
      ""libstdc++-devel, glibc-headers, glibc-devel""
    )
  elseif (UBUNTU_LINUX)
    if (""${PLATFORM_VERSION}"" STREQUAL ""14.04"")
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-4.8-dev"")
    elseif (
      (""${PLATFORM_VERSION}"" STREQUAL ""14.10"")
      OR (""${PLATFORM_VERSION}"" STREQUAL ""15.04"")
    )
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-4.9-dev"")
    elseif (""${PLATFORM_VERSION}"" STREQUAL ""16.04"")
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-5-dev"")
    elseif (""${PLATFORM_VERSION}"" STREQUAL ""18.04"")
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-7-dev"")
    else()
      message(
        WARNING
        ""Unsupported Ubuntu version. Package dependencies will be invalid.""
      )
    endif()
    set(CPACK_SET_DESTDIR ""on"")
    set(CPACK_PACKAGING_INSTALL_PREFIX ""/tmp"")
  elseif (DEBIAN_LINUX)
    if (
      (""${PLATFORM_VERSION}"" STREQUAL ""7.6"")
      OR (""${PLATFORM_VERSION}"" STREQUAL ""7.7"")
    )
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++6-4.7-dev"")
    elseif (
      (""${PLATFORM_VERSION}"" STREQUAL ""8.1"")
      OR (""${PLATFORM_VERSION}"" STREQUAL ""8.5"")
    )
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-4.9-dev"")
    elseif (
      (""${PLATFORM_VERSION}"" STREQUAL ""9.5"")
    )
      set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libstdc++-6-dev"")
    else()
      message(
        WARNING
        ""Unsupported Debian version. Package dependencies will be invalid.""
      )
    endif()
    set(CPACK_SET_DESTDIR ""on"")
    set(CPACK_PACKAGING_INSTALL_PREFIX ""/tmp"")
  endif ()

  set(CPACK_COMPONENTS_ALL metashell templight)
  set(CPACK_ALL_INSTALL_TYPES full notemplight minimal)

  set(CPACK_INSTALL_TYPE_FULL_DISPLAY_NAME ""Full"")
  set(CPACK_INSTALL_TYPE_NOTEMPLIGHT_DISPLAY_NAME ""Without Templight"")
  set(CPACK_INSTALL_TYPE_MINIMAL_DISPLAY_NAME ""Minimal"")

  set(CPACK_COMPONENT_METASHELL_DISPLAY_NAME ""Metashell"")
  set(CPACK_COMPONENT_METASHELL_DESCRIPTION ""The Metashell binary"")
  set(CPACK_COMPONENT_METASHELL_INSTALL_TYPES full notemplight minimal)

  set(CPACK_COMPONENT_TEMPLIGHT_DISPLAY_NAME ""Templight"")
  set(CPACK_COMPONENT_TEMPLIGHT_DESCRIPTION ""Templight"")
  set(CPACK_COMPONENT_TEMPLIGHT_INSTALL_TYPES full)

  include(CPack)

endif(EXISTS ""${CMAKE_ROOT}/Modules/CPack.cmake"")

",3.1,3.1
27376,Erotemic,vtool,False,False,False,False,False,9,Python,2019-12-29 23:57:58+00:00,2014-05-14 12:43:14+00:00,4,993,"cmake_minimum_required(VERSION 3.1.0)

set(CMAKE_CXX_STANDARD 11)

#######################################
# Clang2 = Clang + OpenMP built for OSX Mavericks
# http://goo.gl/1Tg0Zj
if (APPLE)
    set(CMAKE_MACOSX_RPATH 1)
    message(STATUS ""Detected APPLE system"")
    SET(CLANG2 Off)
endif()

if (APPLE AND CLANG2)
    message(STATUS ""Using clang2"")
    set(CMAKE_C_COMPILER ""clang2"")
    set(CMAKE_CXX_COMPILER ""clang2++"")
endif()

#######################################
project(sver LANGUAGES C CXX) #### !!!!IMPORTANT!!!! THIS MUST BE DOWN HERE FOR CLANG2
#set(CMAKE_BUILD_TYPE ""Release"")

if (APPLE)
    #MacPorts
    message(STATUS ""USING MACPORTS"")
    # Fixme: newstyle include and link
    include_directories(/opt/local/include)
    link_directories(/opt/local/lib)
endif()

#######################################
if(APPLE AND CLANG2)
    # Add flags to support clang2
    message(STATUS ""APPLE + CLANG2: Adding stdlib flags for clang"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -stdlib=libc++"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
    set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -lc++"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -lc++"")
else()
    # TODO: this is gcc only, fix for clang
    #set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=c++11"")
    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
endif()

#set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -stdlib=libc++"")
#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
#set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -lc++"")
#set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -lc++"")

# Setup basic python stuff and ensure we have skbuild
#list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_SOURCE_DIR}/CMake"")
#include( skbuild-helpers )

#######################################


# OpenCV_ROOT_DIR=$HOME/.local
# OpenCV_ROOT_DIR=$HOME/.local python setup.py develop
#set(OpenCV_FIND_REQUIRED_COMPONENTS)
find_package( OpenCV REQUIRED )
IF(OpenCV_FOUND)
  message(STATUS ""Found OpenCV! ^_^"")
  message(STATUS ""OpenCV_FOUND = ${OpenCV_FOUND}"")
  message(STATUS ""OpenCV_INCLUDE_DIR = ${OpenCV_INCLUDE_DIR}"")
  message(STATUS ""OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}"")
  message(STATUS ""OpenCV_LINK_DIRECTORIES = ${OpenCV_LINK_DIRECTORIES}"")
  message(STATUS ""OpenCV_ROOT_DIR = ${OpenCV_ROOT_DIR}"")
ELSE()
  message(FATAL_ERROR ""Missing OpenCV! x.x"")
ENDIF()

#######################################
find_package(OpenMP)
IF(OPENMP_FOUND)
    message(STATUS ""Found OpenMP! ^_^"")
    # add flags for OpenMP
    #set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -fopenmp"")
    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -fopenmp"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${OpenMP_C_FLAGS} ${OpenMP_SHARED_LINKER_FLAGS}"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_C_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
ELSE()
  message(STATUS ""Missed OpenMP! x_x"")
ENDIF()

option(ENABLE_GPROF Off)
IF(ENABLE_GPROF)
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pg"")
    SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pg"")
    SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -pg"")
ENDIF()

#######################################
set(SOURCE_FILES
    cppsrc/sver.cpp)

message(STATUS ""OpenMP_SHARED_LINKER_FLAGS = ${OpenMP_SHARED_LINKER_FLAGS}"")
message(STATUS ""OpenMP_EXE_LINKER_FLAGS = ${OpenMP_EXE_LINKER_FLAGS}"")
message(STATUS ""OpenCV_INCLUDE_DIR = ${OpenCV_INCLUDE_DIR}"")
message(STATUS ""OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}"")

# Use MODULE instead of SHARED for windows
add_library(sver MODULE ${SOURCE_FILES})



set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
#if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
#    # Set the DLLEXPORT variable to export symbols
#    target_compile_definitions(sver PRIVATE HESAFF_WIN_EXPORT)
#endif()

target_include_directories(sver PRIVATE ${OpenCV_INCLUDE_DIR})

#######################################
target_link_libraries(sver PRIVATE ${OpenCV_LIBRARIES})
# I think: An install target is required so scikit-build knows where the binaries are
# https://github.com/scikit-build/scikit-build/issues/434
# Note: if the target is not referenced by package_data in setup.py then the
# lib will be installed as a data file and not a package file.
#install(TARGETS sver LIBRARY DESTINATION ""vtool_ibeis"")
install(TARGETS sver DESTINATION vtool_ibeis/lib)
",3.1.0,3.1
27400,wwu-numerik,DUNE-Multiscale,False,False,False,False,False,6,C++,2019-04-09 09:22:25+00:00,2013-04-22 08:20:01+00:00,1,1684,"PROJECT(dune-multiscale CXX)

# local environment
set( ENV{PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/../local/bin:$ENV{PATH}"" )
set( ENV{LD_LIBRARY_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/../local/lib:$ENV{LD_LIBRARY_PATH}"" )
set( ENV{PKG_CONFIG_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/../local/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}"" )

#set minimum cmake version
cmake_minimum_required(VERSION 3.1)
set( CMAKE_COLOR_MAKEFILE ON)

# mac-specific settings
IF(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
  # Xcode-specific settings
  IF(CMAKE_GENERATOR MATCHES ""Xcode"")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD ""c++11"")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY ""libc++"")
  ENDIF(CMAKE_GENERATOR MATCHES ""Xcode"")
  LINK_DIRECTORIES( /opt/local/lib/ )
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")

if(NOT (dune-common_DIR OR dune-common_ROOT OR
        ""${CMAKE_PREFIX_PATH}"" MATCHES "".*dune-common.*""))
    string(REPLACE  ${CMAKE_PROJECT_NAME} dune-common dune-common_DIR
      ${PROJECT_BINARY_DIR})
endif()

#find dune-common and set the module path
find_package(dune-common REQUIRED)
list(APPEND CMAKE_MODULE_PATH ${dune-common_MODULE_PATH}
""${PROJECT_SOURCE_DIR}/cmake/modules"")

#include the dune macros
include(DuneMacros)

# start a dune project with information from dune.module
dune_project()
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules )

foreach(_dep ${ALL_DEPENDENCIES})
  FILE( GLOB_RECURSE dune ""${CMAKE_CURRENT_SOURCE_DIR}/../${_dep}/dune/*.hh"" )
  set( DUNE_HEADERS ${DUNE_HEADERS} ${dune} )
endforeach(_dep ${ALL_DEPENDENCIES})

FILE( GLOB_RECURSE header ""${CMAKE_CURRENT_SOURCE_DIR}/src/*.hh"" )
FILE( GLOB_RECURSE dune ""${CMAKE_CURRENT_SOURCE_DIR}/dune/*.hh"" )

set( COMMON_HEADER ${header} ${dune} ${DUNE_HEADERS} )
set_source_files_properties( ${COMMON_HEADER} PROPERTIES HEADER_FILE_ONLY 1 )

dune_enable_all_packages(
   INCLUDE_DIRS ${dune-multiscale}/dune
   COMPILE_DEFINITIONS
   COMPILE_OPTIONS
   MODULE_LIBRARIES multiscale_common multiscale_problem multiscale_cgfem multiscale_msfem
)

# macros from dune-xt
include(DuneUtils)

#these should be split into all+hmm+msfem parts
set( COMMON_SOURCES
        dune/multiscale/tools/misc/outputparameter.cc
        dune/multiscale/msfem/fem_solver.cc
        dune/multiscale/common/grid_creation.cc
        dune/multiscale/common/main_init.cc
        dune/multiscale/common/traits.cc
        dune/multiscale/common/df_io.cc
        dune/multiscale/fem/print_info.cc
        # error_calc
        dune/multiscale/common/error_calc.cc
        dune/multiscale/common/heterogenous.cc
        dune/multiscale/msfem/localsolution_proxy.cc
        dune/multiscale/msfem/localproblems/localgridsearch.cc
        #
        dune/multiscale/msfem/proxygridview.cc
        dune/multiscale/msfem/localproblems/localgridlist.cc
    )

set( PROBLEM_SOURCES
    dune/multiscale/problems/synthetic.cc
    dune/multiscale/problems/er2007.cc
    dune/multiscale/problems/spe10.cc
    dune/multiscale/problems/tarbert.cc
    dune/multiscale/problems/selector.cc
    dune/multiscale/problems/base.cc
    dune/multiscale/problems/random.cc
)

set( MSFEM_SOURCES
        dune/multiscale/msfem/algorithm.cc
        dune/multiscale/msfem/msfem_solver.cc
        dune/multiscale/msfem/coarse_scale_operator.cc

        dune/multiscale/msfem/localproblems/localoperator.cc
        dune/multiscale/msfem/localproblems/localproblemsolver.cc
        dune/multiscale/msfem/localproblems/localsolutionmanager.cc

        dune/multiscale/msfem/coarse_scale_assembler.cc
        dune/multiscale/msfem/coarse_rhs_functional.cc
    )

set( CGFEM_SOURCES
        dune/multiscale/fem/algorithm.cc
    )

dune_library_add_sources(multiscale_common SOURCES ${COMMON_SOURCES})
dune_library_add_sources(multiscale_problem SOURCES ${PROBLEM_SOURCES})
dune_library_add_sources(multiscale_msfem SOURCES ${MSFEM_SOURCES})
dune_library_add_sources(multiscale_cgfem SOURCES ${CGFEM_SOURCES})

ADD_EXECUTABLE(elliptic_msfem src/msfem.cc ${COMMON_HEADER} )
ADD_EXECUTABLE(elliptic_fem src/cgfem.cc ${CGFEM_SOURCES} ${COMMON_HEADER} )
ADD_EXECUTABLE(fail EXCLUDE_FROM_ALL src/fail.cc ${COMMON_HEADER})
ADD_EXECUTABLE(minimal EXCLUDE_FROM_ALL src/minimal.cc ${COMMON_HEADER})
ADD_EXECUTABLE(thread_vis EXCLUDE_FROM_ALL src/thread_vis.cc ${COMMON_HEADER} )

DEPENDENCYCHECK( ${header} ${dune} )

add_subdirectory(doc)
add_subdirectory(dune)

#disable most warnings from dependent modules, except gdt,stuff
list(APPEND module_exceptions ""dune-stuff"" ""dune-xt-common"" ""dune-xt-la"" ""dune-xt-grid"" ""dune-xt-functions"" ""dune-gdt"")
foreach(_mod ${ALL_DEPENDENCIES})
  list (FIND module_exceptions ""${_mod}"" _index)
  if (_index LESS 0)
    dune_module_to_uppercase(_upper_case ""${_mod}"")
    if(${_mod}_INCLUDE_DIRS)
      foreach( _idir ${${_mod}_INCLUDE_DIRS} )
        add_definitions(""-isystem ${_idir}"")
      endforeach( _idir )
    endif(${_mod}_INCLUDE_DIRS)
  endif()
endforeach(_mod DEPENDENCIES)

add_format(${CMAKE_CURRENT_SOURCE_DIR})
add_tidy(${CMAKE_CURRENT_SOURCE_DIR})

if (NOT ${SPE10MODEL1DATA} STREQUAL ""SPE10MODEL1DATA-NOTFOUND"")
  set (SPE10MODEL1DATA_TARGET_FILENAME ""${CMAKE_CURRENT_BINARY_DIR}/spe10_permeability.dat"")
  if (NOT EXISTS ${SPE10MODEL1DATA_TARGET_FILENAME})
    execute_process(COMMAND ln -s ""${SPE10MODEL1DATA}"" ""${SPE10MODEL1DATA_TARGET_FILENAME}"")
  endif(NOT EXISTS ${SPE10MODEL1DATA_TARGET_FILENAME})
else(NOT ${SPE10MODEL1DATA} STREQUAL ""SPE10MODEL1DATA-NOTFOUND"")
  message(STATUS ""Downloading Spe10 model1 data file:"" ${SPE10MODEL1DATA})
  execute_process(COMMAND wget -nc http://wwwmath.uni-muenster.de/num/ohlberger/research/software/perm_case1.zip
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  execute_process(COMMAND unzip -o perm_case1.zip WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  set (SPE10MODEL1DATA_TARGET_FILENAME ""${CMAKE_CURRENT_BINARY_DIR}/spe10_permeability.dat"")
  execute_process(COMMAND mv perm_case1.dat ""${SPE10MODEL1DATA_TARGET_FILENAME}"")
endif (NOT ${SPE10MODEL1DATA} STREQUAL ""SPE10MODEL1DATA-NOTFOUND"")

finalize_dune_project(GENERATE_CONFIG_H_CMAKE)

",3.1,3.1
27590,OptimoJoe,Optizelle,False,False,False,False,False,5,C++,2020-05-04 21:47:19+00:00,2014-05-14 19:39:16+00:00,41,688,"# Set the project name
project(Optizelle)

# This is the minimum required for the install.  Basically, we need
# CXX_STANDARD_REQUIRED and this looks to have been added at 3.1.  I think
# 3.1.3 is what the current bug fix is, so that looks good enough.
cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)

# Put together the complete license
add_subdirectory(licenses)

# Install the authors file
install(FILES AUTHORS.txt DESTINATION share/optizelle)

# Set the CPack options
set(CPACK_GENERATOR ""TGZ"")
set(CPACK_PACKAGE_VENDOR ""OptimoJoe"")
set(CPACK_PACKAGE_NAME ""Optizelle"")
set(CPACK_PACKAGE_VERSION_MAJOR ""1"")
set(CPACK_PACKAGE_VERSION_MINOR ""3"")
set(CPACK_PACKAGE_VERSION_PATCH ""0"")
set(CPACK_SOURCE_IGNORE_FILES ""${CMAKE_BINARY_DIR}"" ""${CMAKE_SOURCE_DIR}/.git"")
set(CPACK_PACKAGE_CONTACT ""Joseph Young <joe@optimojoe.com>"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Optizelle [op-tuh-zel] is an open source software library designed to solve general purpose nonlinear optimization problems"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_BINARY_DIR}/licenses/LICENSE.txt"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""Optizelle"")
if(WIN32)
    set(CPACK_GENERATOR ""WIX"")
    set(CPACK_WIX_UPGRADE_GUID ""9FB8001A-10E0-4FD1-9DC7-4B5415D6676E"")
    set(CPACK_WIX_PATCH_FILE ""${CMAKE_SOURCE_DIR}/src/cmake/WiX/patch.xml"")
    set(CPACK_WIX_EXTENSIONS ""WixUtilExtension"")
    set(CPACK_WIX_UI_DIALOG ""${CMAKE_BINARY_DIR}/assets/background.bmp"")
    set(CPACK_WIX_UI_BANNER ""${CMAKE_BINARY_DIR}/assets/banner.bmp"")
    set(CPACK_WIX_PRODUCT_ICON ""${CMAKE_BINARY_DIR}/assets/icon.ico"")
elseif(APPLE)
    # Create a dmg file
    set(CPACK_GENERATOR ""DragNDrop"")

    # Set the installation folder
    set(CPACK_PACKAGING_INSTALL_PREFIX ""/${CPACK_PACKAGE_NAME}"")

    # Make sure to enable this when building a package
    set(CPACK_DRAGNDROP OFF CACHE BOOL ""Building a DragNDrop package?"")
    if(CPACK_DRAGNDROP)
        # We need to know the Python version to correctly configure the ReadMe
        # and plist file
        find_package(PythonInterp REQUIRED)

        # Setup the readme file
        set(README_NAME ""src/cmake/DragNDrop/ReadMe.txt"")
        configure_file(
            ""${CMAKE_SOURCE_DIR}/${README_NAME}""
            ""${CMAKE_BINARY_DIR}/${README_NAME}"")
        install(FILES ""${CMAKE_BINARY_DIR}/${README_NAME}"" DESTINATION ..)

        # Set the background image for the installer
        set(CPACK_DMG_BACKGROUND_IMAGE ""${CMAKE_BINARY_DIR}/assets/background.png"")
        set(CPACK_DMG_DS_STORE ""${CMAKE_BINARY_DIR}/assets/DS_Store"")

        # Setup the plist file
        set(PLIST_NAME ""src/cmake/DragNDrop/com.optimojoe.optizelle.plist"")
        configure_file(
            ""${CMAKE_CURRENT_SOURCE_DIR}/${PLIST_NAME}""
            ""${CMAKE_CURRENT_BINARY_DIR}/${PLIST_NAME}"")
        install(FILES ""${CMAKE_BINARY_DIR}/${PLIST_NAME}"" DESTINATION share/optizelle/ )

        # Correct an absurd number of hard coded paths
        macro(fix_macos_lib name lib)
            add_custom_target(fix_${name}_internal_${lib}
                ALL
                DEPENDS LAPACK optizelle_shared
                COMMAND install_name_tool -change /opt/local/lib/libgcc/lib${lib}.dylib /Applications/${CPACK_PACKAGE_NAME}/share/optizelle/thirdparty/lib/lib${lib}.dylib ${CMAKE_BINARY_DIR}/thirdparty/lib/lib${name}.dylib
                COMMENT ""Fixing the path for lib${lib}.dylib inside of lib${name}.dylib"")
        endmacro()
        macro(fix_macos_lib_alt name lib)
            add_custom_target(fix_${name}_internal_${lib}
                ALL
                DEPENDS LAPACK optizelle_shared
                COMMAND install_name_tool -change /opt/local/lib/lib${lib}.dylib /Applications/${CPACK_PACKAGE_NAME}/share/optizelle/thirdparty/lib/lib${lib}.dylib ${CMAKE_BINARY_DIR}/thirdparty/lib/lib${name}.dylib
                COMMENT ""Fixing the path for lib${lib}.dylib inside of lib${name}.dylib"")
        endmacro()
        fix_macos_lib(gfortran.5 quadmath.0)
        fix_macos_lib(gfortran.5 gcc_s.1)
        fix_macos_lib_alt(gfortran.5 z.1)
        fix_macos_lib(quadmath.0 gcc_s.1)
        fix_macos_lib(blas.3.9.0 gfortran.5)
        fix_macos_lib(blas.3.9.0 gcc_s.1)
        fix_macos_lib(blas.3.9.0 quadmath.0)
        fix_macos_lib(lapack.3.9.0 gfortran.5)
        fix_macos_lib(lapack.3.9.0 gcc_s.1)
        fix_macos_lib(lapack.3.9.0 quadmath.0)
    endif()
elseif(UNIX)
    set(CPACK_GENERATOR ""TGZ"" ""RPM"" ""DEB"")
endif()
include(CPack)

# Enable ctest
enable_testing()

# Add the source directories for all of the ports
add_subdirectory(src)

# Install any thirdparty libraries that we built
if(EXISTS ${CMAKE_BINARY_DIR}/thirdparty)
    install(
        DIRECTORY ${CMAKE_BINARY_DIR}/thirdparty
        DESTINATION share/optizelle)
endif()
",3.1.3,3.1
27620,fabianm,brainfuck,False,False,False,False,False,10,C,2020-01-14 10:40:25+00:00,2011-11-02 19:44:53+00:00,224,227,"﻿cmake_minimum_required(VERSION 3.1)

project(brainfuck
    LANGUAGES C
    VERSION 2.7.3
)

include(CTest)

option(ENABLE_CLI ""Enable the command line interface."" ON)
option(ENABLE_EDITLINE ""Enable GNU readline functionality provided by the editline library."" ON)
option(ENABLE_EXTENSION_DEBUG ""Enable the debug extension for brainfuck."")
option(INSTALL_EXAMPLES ""Installs the examples."")

if(MSVC)
    # Force to always compile with W4
    if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
        string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    else()
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic"")
endif()

# getopt shim for windows
add_library(getopt INTERFACE)
if (MSVC)
    target_include_directories(getopt INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/deps/getopt)
endif()

add_library(brainfuck include/brainfuck.h src/brainfuck.c)
set_target_properties(brainfuck PROPERTIES
    PUBLIC_HEADER ""include/brainfuck.h""
    C_STANDARD 90
)
target_include_directories(brainfuck PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>
    $<INSTALL_INTERFACE:include/brainfuck/>
)
target_compile_definitions(brainfuck PUBLIC
    ""-DBRAINFUCK_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}""
    ""-DBRAINFUCK_VERSION_MINOR=${PROJECT_VERSION_MINOR}""
    ""-DBRAINFUCK_VERSION_PATCH=${PROJECT_VERSION_PATCH}""
)
install(TARGETS brainfuck
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PUBLIC_HEADER DESTINATION include/brainfuck
)

if(ENABLE_CLI)
    add_executable(brainfuck-cli src/main.c)
    set_target_properties(brainfuck-cli PROPERTIES
        OUTPUT_NAME ""brainfuck""
        C_STANDARD 90
    )
    target_link_libraries(brainfuck-cli brainfuck getopt)
    install(TARGETS brainfuck-cli RUNTIME DESTINATION bin)
    install(FILES man/brainfuck.1 DESTINATION ""share/man/man1"")

    if(ENABLE_EDITLINE)
        target_compile_definitions(brainfuck-cli PRIVATE ""-DBRAINFUCK_EDITLINE_LIB"")
        target_link_libraries(brainfuck-cli -ledit)
    endif()
endif()

if(ENABLE_EXTENSION_DEBUG)
    add_definitions(""-DBRAINFUCK_EXTENSION_DEBUG"")
endif()

if(INSTALL_EXAMPLES)
    set(EXAMPLES_DIR ""share/brainfuck"")
    file(MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/${EXAMPLES_DIR})
    install(DIRECTORY examples DESTINATION ${EXAMPLES_DIR})
endif()

if(BUILD_TESTING)
    add_subdirectory(tests)
endif()
",3.1,3.1
27625,FabianHahn,shoveler,False,False,False,False,False,2,C,2020-05-17 18:25:07+00:00,2016-06-11 12:23:16+00:00,21,649,"cmake_minimum_required(VERSION 3.1)
project(shoveler VERSION 0.2 LANGUAGES C CXX)

enable_testing()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

option(SHOVELER_BUILD_TESTS ""Build the shoveler tests"" ON)
option(SHOVELER_BUILD_EXAMPLES ""Build example binaries using shoveler."" ON)
option(SHOVELER_USE_GLIB ""Link against system glib instead of bundled fakeglib."" OFF)
option(SHOVELER_VENDOR_FAKEGLIB ""Vendor the fakeglib thirdparty library."" ON)
option(SHOVELER_VENDOR_FREETYPE ""Vendor the freetype thirdparty library."" ON)
option(SHOVELER_VENDOR_GLFW ""Vendor the glfw thirdparty library."" ON)
option(SHOVELER_VENDOR_GOOGLETEST ""Vendor the googletest thirdparty library"" ON)
option(SHOVELER_VENDOR_LIBPNG ""Vendor the libpng thirdparty library."" ON)
option(SHOVELER_VENDOR_ZLIB ""Vendor the zlib thirdparty library."" ON)
option(SHOVELER_INSTALL ""Enable shoveler installation"" OFF)

if(SHOVELER_VENDOR_GLFW)
	message(STATUS ""Using vendored glfw."")
else()
	find_package(glfw3 3.3 REQUIRED)
endif()

if(SHOVELER_USE_GLIB)
	find_package(glib 2.48 REQUIRED)
endif()

if(SHOVELER_VENDOR_FAKEGLIB)
	message(STATUS ""Using vendored fakeglib."")
else()
	find_package(fakeglib REQUIRED)
endif()

if(SHOVELER_VENDOR_FREETYPE)
	message(STATUS ""Using vendored freetype."")
else()
	find_package(Freetype 2.10.0 REQUIRED)
endif()

if(SHOVELER_VENDOR_LIBPNG)
	message(STATUS ""Using vendored libpng."")
else()
	find_package(PNG 1.6.24 REQUIRED)
endif()

if(SHOVELER_VENDOR_ZLIB)
	message(STATUS ""Using vendored zlib."")
else()
	find_package(ZLIB 1.2.8 REQUIRED)
endif()

set(FAKEGLIB_BUILD_TESTS OFF CACHE BOOL ""Disable building fakeglib tests"")
set(FAKEGLIB_BUILD_SHARED OFF CACHE BOOL ""Disable building shared fakeglib"")
set(FAKEGLIB_VENDOR_GOOGLETEST OFF CACHE BOOL ""Don't vendor the googletest thirdparty library"")
set(FAKEGLIB_INSTALL OFF CACHE BOOL ""Disable fakeglib installation"")
set(INSTALL_GTEST OFF CACHE BOOL ""Disable gtest installation"")
set(INSTALL_GMOCK OFF CACHE BOOL ""Disable gmock installation"")
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL ""Disable building glfw examples"")
set(GLFW_BUILD_TESTS OFF CACHE BOOL ""Disable building glfw tests"")
set(GLFW_BUILD_DOCS OFF CACHE BOOL ""Disable building glfw documentation"")
set(PNG_SHARED OFF CACHE BOOL ""Disable building shared libpng library"")
set(PNG_TESTS OFF CACHE BOOL ""Disable building libpng tests"")
set(SKIP_INSTALL_ALL ON CACHE BOOL ""Skip libpng installation steps"")

if(SHOVELER_INSTALL)
	if(SHOVELER_VENDOR_FAKEGLIB OR SHOVELER_VENDOR_GLFW OR SHOVELER_VENDOR_LIBPNG OR SHOVELER_VENDOR_ZLIB)
		message(FATAL_ERROR ""Cannot install (SHOVELER_INSTALL) when fakeglib, glfw, libpng or zlib are vendored."")
	endif()

	set(INSTALL_CONFIGDIR lib/cmake/shoveler)

	install(EXPORT shoveler-targets
		FILE shovelerTargets.cmake
		NAMESPACE shoveler::
		DESTINATION ${INSTALL_CONFIGDIR}
	)

	include(CMakePackageConfigHelpers)
	write_basic_package_version_file(
		${CMAKE_CURRENT_BINARY_DIR}/shovelerConfigVersion.cmake
		VERSION ${PROJECT_VERSION}
		COMPATIBILITY AnyNewerVersion
	)

	configure_package_config_file(${CMAKE_CURRENT_LIST_DIR}/shovelerConfig.cmake.in
		${CMAKE_CURRENT_BINARY_DIR}/shovelerConfig.cmake
		INSTALL_DESTINATION ${INSTALL_CONFIGDIR}
	)

	install(FILES
		${CMAKE_CURRENT_LIST_DIR}/Findglib.cmake
		${CMAKE_CURRENT_BINARY_DIR}/shovelerConfig.cmake
		${CMAKE_CURRENT_BINARY_DIR}/shovelerConfigVersion.cmake
		DESTINATION ${INSTALL_CONFIGDIR}
	)

	configure_file(${CMAKE_CURRENT_LIST_DIR}/Findglib.cmake
		${CMAKE_CURRENT_BINARY_DIR}/Findglib.cmake
		COPYONLY
	)

	export(EXPORT shoveler-targets
		FILE ${CMAKE_CURRENT_BINARY_DIR}/shovelerTargets.cmake
		NAMESPACE shoveler::
	)

	export(PACKAGE shoveler)
endif()

add_subdirectory(base)
add_subdirectory(examples)
add_subdirectory(opengl)
add_subdirectory(thirdparty)
",3.1,3.1
27642,embree,embree,False,False,False,False,False,20,C++,2020-05-14 08:50:59+00:00,2012-11-30 21:33:29+00:00,1222,15666,"## Copyright 2009-2020 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

SET(EMBREE_VERSION_MAJOR 3)
SET(EMBREE_VERSION_MINOR 10)
SET(EMBREE_VERSION_PATCH 0)
SET(EMBREE_VERSION_NOTE """")

SET(EMBREE_VERSION ${EMBREE_VERSION_MAJOR}.${EMBREE_VERSION_MINOR}.${EMBREE_VERSION_PATCH})
MATH(EXPR EMBREE_VERSION_NUMBER ""10000*${EMBREE_VERSION_MAJOR} + 100*${EMBREE_VERSION_MINOR} + ${EMBREE_VERSION_PATCH}"")
SET(CPACK_RPM_PACKAGE_RELEASE 1)

PROJECT(embree${EMBREE_VERSION_MAJOR})

CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

# We use our own strip tool on macOS to sign during install. This is required as CMake modifies RPATH of the binary during install.
IF (APPLE AND EMBREE_SIGN_FILE)
  SET(EMBREE_STRIP ${CMAKE_STRIP})
  SET(CMAKE_STRIP ${PROJECT_BINARY_DIR}/post_install_target.sh)
  CONFIGURE_FILE(scripts/post_install_target.sh.in ${PROJECT_BINARY_DIR}/post_install_target.sh @ONLY)
ENDIF()

MACRO (SIGN_TARGET target)
  IF (EMBREE_SIGN_FILE)
    IF (WIN32)
      # on Windows we sign and do not strip as debug symbols not included in binary
      ADD_CUSTOM_COMMAND(TARGET ${target} POST_BUILD
        COMMAND ${EMBREE_SIGN_FILE} $<TARGET_FILE:${target}>)
    ELSEIF (APPLE)
      # on MacOSX we strip and sign here for testing purposes but also during install, as CMake modifies binary during install
      ADD_CUSTOM_COMMAND(TARGET ${target} POST_BUILD
        COMMAND ${EMBREE_STRIP} -x $<TARGET_FILE:${target}>
        COMMAND ${EMBREE_SIGN_FILE} -o runtime -e ${CMAKE_SOURCE_DIR}/common/cmake/embree.entitlements $<TARGET_FILE:${target}>)
    ELSE()
      # on Linux signing of binaries is not supported and stripping is done during install
    ENDIF()
  ENDIF()
ENDMACRO()

# find git version
IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  FIND_PACKAGE(Git)
  IF(GIT_FOUND)
    EXECUTE_PROCESS(
      COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
      WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}""
      OUTPUT_VARIABLE ""EMBREE_HASH""
      ERROR_QUIET
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  ELSE()
    SET(EMBREE_HASH 0)
  ENDIF()
ENDIF()

IF(COMMAND cmake_policy)
  if (POLICY CMP0003)
    cmake_policy(SET CMP0003 NEW)
  endif()
  if (POLICY CMP0042)
    cmake_policy(SET CMP0042 NEW)
  endif()
  if(POLICY CMP0072)
    cmake_policy(SET CMP0072 OLD)
  endif()
  if(POLICY CMP0022)
    cmake_policy(SET CMP0022 NEW)
  endif()
ENDIF(COMMAND cmake_policy)

MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)

MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(CLEAR CMAKE_CXX_COMPILER)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/common/cmake ${CMAKE_MODULE_PATH})

IF (BUILD_TESTING)
  INCLUDE(test)
ENDIF()

##############################################################
# Embree configuration
##############################################################

GET_PROPERTY(SHARED_LIBS_SUPPORTED GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
IF(SHARED_LIBS_SUPPORTED)
  OPTION(EMBREE_STATIC_LIB ""Build Embree as a static library."")
  MARK_AS_ADVANCED(CLEAR EMBREE_STATIC_LIB)
ELSE()
  SET(EMBREE_STATIC_LIB ON CACHE BOOL ""Build Embree as a static library."" FORCE)
  MARK_AS_ADVANCED(EMBREE_STATIC_LIB)
ENDIF()
IF (EMBREE_STATIC_LIB)
  SET(EMBREE_LIB_TYPE STATIC)
ELSE()
  SET(EMBREE_LIB_TYPE SHARED)
ENDIF()

OPTION(EMBREE_ISPC_SUPPORT ""Build Embree with support for ISPC applications."" ON)
OPTION(EMBREE_TUTORIALS    ""Enable to build Embree tutorials"" ON)
SET(EMBREE_API_NAMESPACE """" CACHE STRING ""C++ namespace to put API symbols into."")
SET(EMBREE_LIBRARY_NAME  ""embree${EMBREE_VERSION_MAJOR}"" CACHE STRING ""Name of the embree library file (default is embree${EMBREE_VERSION_MAJOR})"")

IF (EMBREE_API_NAMESPACE AND EMBREE_ISPC_SUPPORT)
   MESSAGE(FATAL_ERROR ""You cannot enable ISPC when EMBREE_API_NAMESPACE is used."")
ENDIF()

##############################################################################
# Configurations (add configurations also to common/cmake/embree-config.cmake)

OPTION(EMBREE_ZIP_MODE ""Create Embree ZIP package"" OFF)
MARK_AS_ADVANCED(EMBREE_ZIP_MODE)

OPTION(EMBREE_INSTALL_DEPENDENCIES ""Install Embree dependencies in binary packages and install"" OFF)
MARK_AS_ADVANCED(EMBREE_INSTALL_DEPENDENCIES)

OPTION(EMBREE_STAT_COUNTERS ""Enables statistic counters."")
OPTION(EMBREE_STACK_PROTECTOR ""When enabled Embree compiles with stack protection against return address overrides."" OFF)

OPTION(EMBREE_RAY_MASK ""Enables ray mask support."")
OPTION(EMBREE_BACKFACE_CULLING ""Enables backface culling."")
OPTION(EMBREE_FILTER_FUNCTION ""Enables filter functions."" ON)
OPTION(EMBREE_IGNORE_INVALID_RAYS ""Ignores invalid rays."" OFF) # FIXME: enable by default?
OPTION(EMBREE_COMPACT_POLYS ""Enables double indexed poly layout."" OFF)

OPTION(EMBREE_GEOMETRY_TRIANGLE ""Enables support for triangle geometries."" ON)
OPTION(EMBREE_GEOMETRY_QUAD ""Enables support for quad geometries."" ON)
OPTION(EMBREE_GEOMETRY_CURVE ""Enables support for curve geometries."" ON)
OPTION(EMBREE_GEOMETRY_SUBDIVISION ""Enables support for subdiv geometries."" ON)
OPTION(EMBREE_GEOMETRY_USER ""Enables support for user geometries."" ON)
OPTION(EMBREE_GEOMETRY_INSTANCE ""Enables support for instances."" ON)
OPTION(EMBREE_GEOMETRY_GRID ""Enables support for grid geometries."" ON)
OPTION(EMBREE_GEOMETRY_POINT ""Enables support for point geometries."" ON)
OPTION(EMBREE_RAY_PACKETS ""Enabled support for ray packets."" ON)

SET(EMBREE_MAX_INSTANCE_LEVEL_COUNT 1 CACHE STRING ""Maximum number of instance levels."")
SET(EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR 2.0 CACHE STRING ""Self intersection avoidance factor for flat curves. Specify floating point value in range 0 to inf."")

SET(EMBREE_TASKING_SYSTEM ""TBB"" CACHE STRING ""Selects tasking system"")
IF (WIN32)
  SET_PROPERTY(CACHE EMBREE_TASKING_SYSTEM PROPERTY STRINGS TBB INTERNAL PPL)
ELSE()
  SET_PROPERTY(CACHE EMBREE_TASKING_SYSTEM PROPERTY STRINGS TBB INTERNAL)
ENDIF()

IF (EMBREE_TASKING_SYSTEM STREQUAL ""TBB"")
  SET(TASKING_TBB      ON )
  SET(TASKING_INTERNAL OFF)
  SET(TASKING_PPL      OFF )
  ADD_DEFINITIONS(-DTASKING_TBB)
  LIST(APPEND ISPC_DEFINITIONS -DTASKING_TBB)
ELSEIF (EMBREE_TASKING_SYSTEM STREQUAL ""PPL"")
  SET(TASKING_PPL      ON )
  SET(TASKING_TBB      OFF )
  SET(TASKING_INTERNAL OFF)
  ADD_DEFINITIONS(-DTASKING_PPL)
  LIST(APPEND ISPC_DEFINITIONS -DTASKING_PPL)
ELSE()
  SET(TASKING_INTERNAL ON )
  SET(TASKING_TBB      OFF)
  SET(TASKING_PPL      OFF )
  ADD_DEFINITIONS(-DTASKING_INTERNAL)
  LIST(APPEND ISPC_DEFINITIONS -DTASKING_INTERNAL)
ENDIF()

##############################################################
# Compiler
##############################################################

SET(CONFIGURATION_TYPES ""Debug;Release;RelWithDebInfo"")

IF (WIN32)
  IF (NOT DEFAULT_CMAKE_CONFIGURATION_TYPES_SET)
    SET(CMAKE_CONFIGURATION_TYPES ""${CONFIGURATION_TYPES}"" CACHE STRING ""List of generated configurations."" FORCE)
    SET(DEFAULT_CMAKE_CONFIGURATION_TYPES_SET ON CACHE INTERNAL ""Default CMake configuration types set."")
  ENDIF()
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

  IF (${CMAKE_GENERATOR_TOOLSET} MATCHES ""^LLVM"" )
    MESSAGE(""CLANG detected"")
    INCLUDE(clang)
  ELSEIF(${CMAKE_GENERATOR_TOOLSET} MATCHES ""^Intel"")
    MESSAGE(""Intel Compiler detected"")
    INCLUDE (intel)
  ELSE()
    IF (EMBREE_ISA_AVX512KNL OR EMBREE_ISA_AVX512SKX)
      MESSAGE(FATAL_ERROR ""Microsoft Visual C++ Compiler does not support AVX512. Please use Intel Compiler or Clang."")
    ENDIF()
    INCLUDE (msvc)
  ENDIF()

ELSE (WIN32)
  IF(CMAKE_CXX_COMPILER_WRAPPER STREQUAL ""CrayPrgEnv"")
    INCLUDE (crayprgenv)
  ELSE()
    STRING(TOLOWER ""${CMAKE_CXX_COMPILER_ID}"" _LOWER_CXX_COMPILER_ID)
    STRING(REPLACE ""appleclang"" ""clang"" _LOWER_CXX_COMPILER_ID ${_LOWER_CXX_COMPILER_ID})
    INCLUDE(${_LOWER_CXX_COMPILER_ID} OPTIONAL RESULT_VARIABLE COMPILER_FOUND)
    IF (NOT COMPILER_FOUND)
      MESSAGE(FATAL_ERROR ""Unsupported compiler: "" ${CMAKE_CXX_COMPILER_ID})
    ENDIF ()
  ENDIF ()

  IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Specifies the build type."" FORCE)
    SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CONFIGURATION_TYPES})
  ENDIF(NOT CMAKE_BUILD_TYPE)

  OPTION(CMAKE_VERBOSE_MAKEFILE ""Enables verbose mode."")
  MARK_AS_ADVANCED(CLEAR CMAKE_VERBOSE_MAKEFILE)

ENDIF (WIN32)

##############################################################
# ISA configuration
##############################################################

IF(CMAKE_CXX_COMPILER_WRAPPER STREQUAL ""CrayPrgEnv"")
  SET(EMBREE_MAX_ISA ""DEFAULT"" CACHE STRING ""Selects highest ISA to support."")
ELSE()
  SET(EMBREE_MAX_ISA ""NONE"" CACHE STRING ""Selects highest ISA to support."")
ENDIF()
SET_PROPERTY(CACHE EMBREE_MAX_ISA PROPERTY STRINGS NONE SSE2 SSE4.2 AVX AVX2 AVX512KNL AVX512SKX DEFAULT)

IF (EMBREE_MAX_ISA STREQUAL ""NONE"")
  TRY_COMPILE(COMPILER_SUPPORTS_AVX       ${CMAKE_BINARY_DIR} ${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp COMPILE_DEFINITIONS ${FLAGS_AVX})
  TRY_COMPILE(COMPILER_SUPPORTS_AVX2      ${CMAKE_BINARY_DIR} ${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp COMPILE_DEFINITIONS ${FLAGS_AVX2})
  TRY_COMPILE(COMPILER_SUPPORTS_AVX512KNL ${CMAKE_BINARY_DIR} ${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp COMPILE_DEFINITIONS ${FLAGS_AVX512KNL})
  TRY_COMPILE(COMPILER_SUPPORTS_AVX512SKX ${CMAKE_BINARY_DIR} ${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp COMPILE_DEFINITIONS ${FLAGS_AVX512SKX})

  OPTION(EMBREE_ISA_SSE2 ""Enables SSE2 ISA."" ON)
  OPTION(EMBREE_ISA_SSE42 ""Enables SSE4.2 ISA."" ON)
  OPTION(EMBREE_ISA_AVX ""Enables AVX ISA."" ${COMPILER_SUPPORTS_AVX})
  OPTION(EMBREE_ISA_AVX2 ""Enables AVX2 ISA."" ${COMPILER_SUPPORTS_AVX2})
  IF (WIN32 OR APPLE)
    OPTION(EMBREE_ISA_AVX512KNL ""Enables AVX512 ISA for Knights Landing."" OFF)
    OPTION(EMBREE_ISA_AVX512SKX ""Enables AVX512 ISA for Skylake."" OFF)
  ELSE()
    OPTION(EMBREE_ISA_AVX512KNL ""Enables AVX512 ISA for Knights Landing."" OFF) # compilation on GCC 8 broken
    OPTION(EMBREE_ISA_AVX512SKX ""Enables AVX512 ISA for Skylake."" ${COMPILER_SUPPORTS_AVX512SKX})
  ENDIF()
ELSEIF (EMBREE_MAX_ISA STREQUAL ""DEFAULT"")
  UNSET(EMBREE_ISA_SSE2 CACHE)
  UNSET(EMBREE_ISA_SSE42 CACHE)
  UNSET(EMBREE_ISA_AVX CACHE)
  UNSET(EMBREE_ISA_AVX2 CACHE)
  UNSET(EMBREE_ISA_AVX512KNL CACHE)
  UNSET(EMBREE_ISA_AVX512SKX CACHE)
  SET(EMBREE_ISA_SSE2 OFF)
  SET(EMBREE_ISA_SSE42 OFF)
  SET(EMBREE_ISA_AVX OFF)
  SET(EMBREE_ISA_AVX2 OFF)
  SET(EMBREE_ISA_AVX512KNL OFF)
  SET(EMBREE_ISA_AVX512SKX OFF)
  MESSAGE(STATUS ""Detecting default ISA..."")
  INCLUDE(check_isa_default)
  CHECK_ISA_DEFAULT(EMBREE_ISA_DEFAULT)
  MESSAGE(STATUS ""Detected default ISA: ${EMBREE_ISA_DEFAULT}"")
  SET(EMBREE_ISA_${EMBREE_ISA_DEFAULT} ON)
ELSE()
  UNSET(EMBREE_ISA_SSE2 CACHE)
  UNSET(EMBREE_ISA_SSE42 CACHE)
  UNSET(EMBREE_ISA_AVX CACHE)
  UNSET(EMBREE_ISA_AVX2 CACHE)
  UNSET(EMBREE_ISA_AVX512KNL CACHE)
  UNSET(EMBREE_ISA_AVX512SKX CACHE)

  IF(EMBREE_MAX_ISA STREQUAL ""SSE2"")
    SET(ISA  1)
  ELSEIF(EMBREE_MAX_ISA STREQUAL ""SSE4.2"")
    SET(ISA  2)
  ELSEIF(EMBREE_MAX_ISA STREQUAL ""AVX"")
    SET(ISA  3)
  ELSEIF(EMBREE_MAX_ISA STREQUAL ""AVX2"")
    SET(ISA  4)
  ELSEIF(EMBREE_MAX_ISA STREQUAL ""AVX512KNL"")
    SET(ISA  5)
  ELSEIF(EMBREE_MAX_ISA STREQUAL ""AVX512SKX"")
    SET(ISA 6)
  ELSE()
    MESSAGE(FATAL_ERROR ""Unsupported ISA specified: "" ${EMBREE_MAX_ISA})
  ENDIF()

  SET(EMBREE_ISA_SSE2 OFF)
  SET(EMBREE_ISA_SSE42 OFF)
  SET(EMBREE_ISA_AVX OFF)
  SET(EMBREE_ISA_AVX2 OFF)
  SET(EMBREE_ISA_AVX512KNL OFF)
  SET(EMBREE_ISA_AVX512SKX OFF)

  IF (ISA GREATER 0)
    SET(EMBREE_ISA_SSE2  ON)
  ENDIF ()
  IF (ISA GREATER 1)
    SET(EMBREE_ISA_SSE42  ON)
  ENDIF ()
  IF (ISA GREATER 2)
    SET(EMBREE_ISA_AVX  ON)
  ENDIF ()
  IF (ISA GREATER 3)
    SET(EMBREE_ISA_AVX2  ON)
  ENDIF ()
  IF (ISA GREATER 4)
    SET(EMBREE_ISA_AVX512KNL  ON)
  ENDIF ()
  IF (ISA GREATER 5)
    SET(EMBREE_ISA_AVX512SKX  ON)
  ENDIF ()
ENDIF()

IF(CMAKE_CXX_COMPILER_WRAPPER STREQUAL ""CrayPrgEnv"")
  SET(EMBREE_ISA_SSE42 OFF)
ENDIF()

IF (APPLE AND EMBREE_STATIC_LIB)

  # count number of set ISAs
  SET(NUMISA 0)
  IF (EMBREE_ISA_SSE2)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()
  IF (EMBREE_ISA_SSE42)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()
  IF (EMBREE_ISA_AVX)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()
  IF (EMBREE_ISA_AVX2)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()
  IF (EMBREE_ISA_AVX512KNL)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()
  IF (EMBREE_ISA_AVX512SKX)
    MATH(EXPR NUMISA ""${NUMISA}+1"")
  ENDIF()

  IF (NUMISA GREATER 1)
    IF (${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"")
      IF (${CMAKE_CXX_COMPILER_VERSION} MATCHES ""^9\\..*"")
        MESSAGE(FATAL_ERROR ""Using Embree as static library is not supported with AppleClang 9.X when multiple ISAs are selected. Please either build a shared library or enable only one ISA."")
      ENDIF()
    ENDIF()
  ENDIF()
ENDIF()

##############################################################
# ISA configuration continued
##############################################################

SET(SSE2 0)
SET(SSE42 1)
SET(AVX 2)
SET(AVX2 3)
SET(AVX512KNL 4)
SET(AVX512SKX 5)

UNSET(FLAGS_LOWEST)
SET(ISA_LOWEST_AVX 2)

IF (EMBREE_ISA_SSE2)
  ADD_DEFINITIONS(-DEMBREE_TARGET_SSE2)
  LIST(APPEND ISPC_TARGETS ""sse2"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${SSE2})
    SET(FLAGS_LOWEST ${FLAGS_SSE2})
  ENDIF()
ENDIF()

IF (EMBREE_ISA_SSE42)
  ADD_DEFINITIONS(-DEMBREE_TARGET_SSE42)
  LIST(APPEND ISPC_TARGETS ""sse4"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${SSE42})
    SET(FLAGS_LOWEST ${FLAGS_SSE42})
  ENDIF()
ENDIF ()

IF (EMBREE_ISA_AVX)
  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX)
  LIST(APPEND ISPC_TARGETS ""avx"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${AVX})
    SET(ISA_LOWEST_AVX ${AVX})
    SET(FLAGS_LOWEST ${FLAGS_AVX})
  ENDIF()
ENDIF ()

IF (EMBREE_ISA_AVX2)
  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX2)
  LIST(APPEND ISPC_TARGETS ""avx2"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${AVX2})
    SET(ISA_LOWEST_AVX ${AVX2})
    SET(FLAGS_LOWEST ${FLAGS_AVX2})
  ENDIF()
ENDIF ()

IF (EMBREE_ISA_AVX512KNL)
  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX512KNL)
  LIST(APPEND ISPC_TARGETS ""avx512knl-i32x16"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${AVX512KNL})
    SET(ISA_LOWEST_AVX ${AVX512KNL})
    SET(FLAGS_LOWEST ${FLAGS_AVX512KNL})
  ENDIF()
ENDIF ()

IF (EMBREE_ISA_AVX512SKX)
  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX512SKX)
  LIST(APPEND ISPC_TARGETS ""avx512skx-i32x16"")
  IF(NOT FLAGS_LOWEST)
    SET(ISA_LOWEST ${AVX512SKX})
    SET(ISA_LOWEST_AVX ${AVX512SKX})
    SET(FLAGS_LOWEST ${FLAGS_AVX512SKX})
  ENDIF()
ENDIF ()

INCLUDE (ispc)

##############################################################
# Find TBB
##############################################################
IF (TASKING_TBB)
  FIND_PACKAGE(TBB REQUIRED)
  INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIRS})
ENDIF()

##############################################################
# Create Binary Packages (uses above config options)
##############################################################
include(package)

##############################################################
# Create Config files
##############################################################

CONFIGURE_FILE(
  ""${PROJECT_SOURCE_DIR}/kernels/config.h.in""
  ""${PROJECT_SOURCE_DIR}/kernels/config.h""
)

CONFIGURE_FILE(
  ""${PROJECT_SOURCE_DIR}/kernels/rtcore_config.h.in""
  ""${PROJECT_SOURCE_DIR}/include/embree3/rtcore_config.h""
)

CONFIGURE_FILE(
  ""${PROJECT_SOURCE_DIR}/kernels/hash.h.in""
  ""${PROJECT_SOURCE_DIR}/kernels/hash.h""
)
CONFIGURE_FILE(
  ""${PROJECT_SOURCE_DIR}/kernels/export.linux.map.in""
  ""${PROJECT_SOURCE_DIR}/kernels/export.linux.map""
)
CONFIGURE_FILE(
  ""${PROJECT_SOURCE_DIR}/kernels/export.macosx.map.in""
  ""${PROJECT_SOURCE_DIR}/kernels/export.macosx.map""
)


##############################################################
# Output paths
##############################################################
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}"")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}"")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}"")

##############################################################
# Directories to compile
##############################################################

ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(kernels)
IF (EMBREE_TUTORIALS)
  ADD_SUBDIRECTORY(tutorials)
ENDIF()

##############################################################
# Uninstall
##############################################################

configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/common/cmake/uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake""
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake)

SET_PROPERTY(TARGET uninstall PROPERTY FOLDER CMakePredefinedTargets)

##############################################################
# Has to be last
##############################################################

INCLUDE(CPack)
",3.1.0,3.1
27798,utwente-fmt,sylvan,False,False,False,False,False,26,C,2019-09-05 09:38:51+00:00,2014-10-21 09:42:36+00:00,19,807,"cmake_minimum_required(VERSION 3.1)

project(sylvan VERSION 1.5.0)

set(PROJECT_DESCRIPTION ""Sylvan, a parallel decision diagram library"")
set(PROJECT_URL ""https://github.com/trolando/sylvan"")

message(STATUS ""CMake build configuration for Sylvan ${PROJECT_VERSION}"")
enable_language(C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Some info
message(STATUS ""OS: ${CMAKE_SYSTEM_NAME}"")
message(STATUS ""Compiler: ${CMAKE_CXX_COMPILER_ID}"")

set(CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake/"")

set(CMAKE_C_FLAGS ""-O2 -Wextra -Wall -Werror -fno-strict-aliasing ${CMAKE_C_FLAGS}"")
set(CMAKE_CXX_FLAGS ""-O2 -Wextra -Wall -Werror -fno-strict-aliasing -Wno-deprecated ${CMAKE_CXX_FLAGS}"")

option(WITH_COVERAGE ""Add generation of test coverage"" OFF)
if(WITH_COVERAGE)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -O0 -g -coverage"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O0 -g -coverage"")

    find_program(GCOV_PATH gcov)
    find_program(LCOV_PATH lcov)
    find_program(GENHTML_PATH genhtml)

    add_custom_target(coverage
        # Cleanup lcov
        ${LCOV_PATH} --directory . --zerocounters
        # Run tests
        COMMAND make test
        # Capture counters
        COMMAND ${LCOV_PATH} --gcov-tool ${GCOV_PATH} --directory . --capture --output-file coverage.info
        COMMAND ${LCOV_PATH} --remove coverage.info 'test/*' '/usr/*' 'examples/*' 'src/lace*' 'src/sha2.c' --output-file coverage.info.cleaned
        COMMAND ${GENHTML_PATH} -o coverage coverage.info.cleaned
        COMMAND ${CMAKE_COMMAND} -E remove coverage.info coverage.info.cleaned
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include(GNUInstallDirs)
include(CTest)

add_subdirectory(src)
add_subdirectory(test)

option(SYLVAN_BUILD_EXAMPLES ""Build example tools"" OFF)
if(SYLVAN_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

option(SYLVAN_BUILD_DOCS ""Build documentation"" OFF)
if(SYLVAN_BUILD_DOCS)
    configure_file(""docs/conf.py.in"" ""docs/conf.py"" @ONLY)
    find_package(Sphinx REQUIRED)
    Sphinx_add_targets(sylvan ${CMAKE_CURRENT_BINARY_DIR}/docs ${CMAKE_CURRENT_SOURCE_DIR}/docs ${CMAKE_CURRENT_BINARY_DIR})
    add_custom_target(update_gh_pages
        COMMAND ""${CMAKE_COMMAND}"" -P ""${CMAKE_MODULE_PATH}/UpdateGHPages.cmake"")
    add_dependencies(update_gh_pages sylvan_html)
endif()

set(CPACK_GENERATOR ""DEB"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Multi-core implementation of decision diagrams"")
set(CPACK_PACKAGE_VENDOR ""Tom van Dijk"")
set(CPACK_PACKAGE_CONTACT ""Tom van Dijk <tom@tvandijk.nl>"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATCH_VERSION})
include(CPack)

# pkg-config
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/sylvan.pc.cmake.in"" ""${CMAKE_CURRENT_BINARY_DIR}/sylvan.pc"" @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/sylvan.pc"" DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"")
",3.1,3.1
28032,google,sentencepiece,False,False,False,False,False,38,C++,2020-05-17 17:07:21+00:00,2017-03-07 10:03:48+00:00,3968,554,"# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.!

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
file(STRINGS ""VERSION"" SPM_VERSION)
message(STATUS ""VERSION: ${SPM_VERSION}"")
project(sentencepiece VERSION ${SPM_VERSION} LANGUAGES C CXX)

option(SPM_ENABLE_NFKC_COMPILE ""Enables NFKC compile"" OFF)
option(SPM_ENABLE_SHARED ""Builds shared libaries in addition to static libraries."" ON)
option(SPM_BUILD_TEST ""Builds test binaries."" OFF)
option(SPM_COVERAGE ""Runs gcov to test coverage."" OFF)
option(SPM_ENABLE_TENSORFLOW_SHARED ""Makes a tensorflow compatible shared file."" OFF)
option(SPM_ENABLE_TCMALLOC ""Enable TCMalloc if available."" ON)
option(SPM_TCMALLOC_STATIC ""Link static library of TCMALLOC."" OFF)
option(SPM_NO_THREADLOCAL ""Disable thread_local operator"" OFF)
option(SPM_USE_BUILTIN_PROTOBUF ""Use built-in protobuf"" ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(prefix ${CMAKE_INSTALL_PREFIX})
set(exec_prefix ""\${prefix}"")
set(libdir ""\${exec_prefix}/lib"")
set(includedir ""\${prefix}/include"")
set(GNUCXX_STD_SUPPORT_VERSION ""4.3"")

if (SPM_USE_BUILTIN_PROTOBUF)
  set(libprotobuf_lite """")
else()
  set(libprotobuf_lite ""-lprotobuf-lite"")
endif()

if (MSVC)
  string(REPLACE ""/MD"" ""/MT"" CMAKE_CXX_FLAGS_DEBUG          ${CMAKE_CXX_FLAGS_DEBUG})
  string(REPLACE ""/MD"" ""/MT"" CMAKE_CXX_FLAGS_MINSIZEREL     ${CMAKE_CXX_FLAGS_MINSIZEREL})
  string(REPLACE ""/MD"" ""/MT"" CMAKE_CXX_FLAGS_RELEASE        ${CMAKE_CXX_FLAGS_RELEASE})
  string(REPLACE ""/MD"" ""/MT"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
  add_definitions(""/wd4267 /wd4244 /wd4305 /Zc:strictStrings /utf-8"")
endif()

if (APPLE)
  set(CMAKE_MACOSX_RPATH ON)
  set(CMAKE_SKIP_BUILD_RPATH FALSE)
  set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
  set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
  list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
  if (""${isSystemDir}"" STREQUAL ""-1"")
    set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  endif()
endif()

if (NOT DEFINED CMAKE_INSTALL_BINDIR)
  set(CMAKE_INSTALL_BINDIR bin)
endif()

if (NOT DEFINED CMAKE_INSTALL_LIBDIR)
  set(CMAKE_INSTALL_LIBDIR lib)
endif()

if (NOT DEFINED CMAKE_INSTALL_INCDIR)
  set(CMAKE_INSTALL_INCDIR include)
endif()

configure_file(""${PROJECT_SOURCE_DIR}/config.h.in"" ""config.h"")
configure_file(""${PROJECT_SOURCE_DIR}/sentencepiece.pc.in"" ""sentencepiece.pc"" @ONLY)

if (NOT MSVC)
  install(FILES ""${CMAKE_BINARY_DIR}/sentencepiece.pc"" DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()

include_directories(${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})

if (SPM_BUILD_TEST)
  enable_testing()
endif()

add_subdirectory(src)
add_subdirectory(third_party)

set(CPACK_SOURCE_GENERATOR ""TXZ"")
set(CPACK_GENERATOR ""7Z"")
set(CPACK_PACKAGE_VERSION ""${SPM_VERSION}"")
set(CPACK_STRIP_FILES TRUE)
set(CPACK_RESOURCE_FILE_LICENSE ""${PROJECT_SOURCE_DIR}/LICENSE"")
set(CPACK_RESOURCE_FILE_README ""${PROJECT_SOURCE_DIR}/README.md"")
set(CPACK_PACKAGE_CONTACT ""taku@google.com"")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ""Taku Kudo"")
set(CPACK_SOURCE_IGNORE_FILES ""/build/;/.git/;/dist/;/sdist/;~$;${CPACK_SOURCE_IGNORE_FILES}"")
include(CPack)
",3.1,3.1
28085,springlobby,springlobby,False,False,False,False,False,38,C++,2020-03-30 21:47:03+00:00,2011-06-07 06:08:00+00:00,60,11652,"PROJECT(springlobby)

#set minimum cmake version
cmake_minimum_required(VERSION 3.1)

SET(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH} )

if (CMAKE_GENERATOR MATCHES ""Ninja"")
	message(STATUS ""Ninja detected, enabling install workarround"")
	# fixes ""ninja install"" error:
	#	  file INSTALL cannot find
	# ""/home/abma/Projects/SpringLobby/src/CMakeFiles/CMakeRelink.dir/springlobby"".
	set(CMAKE_PLATFORM_HAS_INSTALLNAME 1)
endif()

if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
	# workarround for include/c++/4.8/type_traits:268:39: error: use of undeclared identifier '__float128'
	add_definitions(""-D__STRICT_ANSI__"")
endif()

# check for minimal gcc version
set(MIN_GCC_VER ""8.0"")
if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""${MIN_GCC_VER}"")
		message(FATAL_ERROR ""gcc >=${MIN_GCC_VER} required"")
	else()
		message(STATUS ""gcc ${CMAKE_CXX_COMPILER_VERSION} detected"")
	endif()
endif()


#----------------------------------------------------------------------------------------------------
# General Settings
#----------------------------------------------------------------------------------------------------
SET( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true )

INCLUDE(compat_flags)
INCLUDE(GNUInstallDirs)

#----------------------------------------------------------------------------------------------------
# Load needed Modules
#----------------------------------------------------------------------------------------------------
if(NOT DEFINED SPRINGLOBBY_REV)
  EXECUTE_PROCESS(COMMAND ${springlobby_SOURCE_DIR}/tools/get-revision.sh
    OUTPUT_VARIABLE SPRINGLOBBY_REV
    ERROR_VARIABLE GIT_ERROR
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
endif(NOT DEFINED SPRINGLOBBY_REV)

# PKG-Config
FIND_PACKAGE( PkgConfig )


#----------------------------------------------------------------------------------------------------
# Options, that can be changed be the User in order to customise springlobby
#----------------------------------------------------------------------------------------------------
option( OPTION_TRANSLATION_SUPPORT ""Enables translation support to the programs and adds facilities for helping translators (requires GNU Gettext)"" TRUE)
option( OPTION_NOTIFY ""Enables libnotify support for popup status messages (requires libnotify)"" TRUE)
option( BUILD_SHARED_LIBS ""Chooses whether to link dynamic or static libraries. Recommend keeping this activated unless you know what you're doing."" FALSE)



SET(SPRINGLOBBY_REV ""${SPRINGLOBBY_REV}"")
if (WIN32)
	SET(LOCALE_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/locale"")
else()
	SET(LOCALE_INSTALL_DIR ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/locale"")
endif()

IF( AUX_VERSION )
	ADD_DEFINITIONS( -DAUX_VERSION=""${AUX_VERSION}"" )
ENDIF( AUX_VERSION )

INCLUDE(SpringLobbyMacros)
Add_Subdirectory(doc)
#----------------------------------------------------------------------------------------------------
# L10n support
#----------------------------------------------------------------------------------------------------
if( OPTION_TRANSLATION_SUPPORT )
        add_subdirectory(po)
endif( OPTION_TRANSLATION_SUPPORT )
ADD_DEFINITIONS( -DLOCALE_INSTALL_DIR=""${LOCALE_INSTALL_DIR}"" )
Add_Subdirectory(src)

#cppcheck stuff
find_program( CPPCHECK_BINARY NAMES cppcheck )
IF( EXISTS ${CPPCHECK_BINARY} )
	ADD_CUSTOM_TARGET( cppcheck )
	FOREACH( list ${updaterSrc} ${header} ${SLSharedWithSettings} ${StandAloneSettings} ${curlSRC} ${SettingsSrc} ${springlobbySrc} )
		FOREACH( SOURCEFILE ${list} )
			LIST( APPEND CHECKPATHS ${SOURCEFILE} )
		ENDFOREACH( SOURCEFILE )
	ENDFOREACH( list )

	ADD_CUSTOM_TARGET( cppcheck-full ${CPPCHECK_BINARY} ""--xml"" ""--enable=all"" ""-f"" ""--quiet""
		${CHECKPATHS} ""2>${CMAKE_CURRENT_BINARY_DIR}/cppcheck-full.xml"" ""&&"" 
			""${CMAKE_CURRENT_SOURCE_DIR}/tools/cppcheck-htmlreport"" ""--source-dir=${CMAKE_CURRENT_SOURCE_DIR}/"" 
				""--file=${CMAKE_CURRENT_BINARY_DIR}/cppcheck-full.xml"" ""--report-dir=report-full"" ""--title=SpringLobby - Full"")
	ADD_CUSTOM_TARGET( cppcheck-lite ${CPPCHECK_BINARY} ""--xml"" ""-f"" ""--quiet""
		${CHECKPATHS} ""2>${CMAKE_CURRENT_BINARY_DIR}/cppcheck-lite.xml"" ""&&"" 
			""${CMAKE_CURRENT_SOURCE_DIR}/tools/cppcheck-htmlreport"" ""--source-dir=${CMAKE_CURRENT_SOURCE_DIR}/"" 
				""--file=${CMAKE_CURRENT_BINARY_DIR}/cppcheck-lite.xml"" ""--report-dir=report-lite"" ""--title=SpringLobby - Lite"")
	add_dependencies( cppcheck cppcheck-full )
	add_dependencies( cppcheck cppcheck-lite )
ENDIF( EXISTS ${CPPCHECK_BINARY} )


find_program(CLANG_FORMAT_BINARY NAMES clang-format-3.5 clang-format-3.4 clang-format)
if (EXISTS ${CLANG_FORMAT_BINARY})
	file(GLOB_RECURSE files {CMAKE_CURRENT_SOURCE_DIR} src/*.cpp src/*.hpp src/*.h)

	foreach(exclude src/lsl;src/downloader/lib ) # exclude some files
		foreach(file in ${files})
			if (file MATCHES ""^${CMAKE_CURRENT_SOURCE_DIR}/${exclude}"")
				list(REMOVE_ITEM files ${file})
			endif()
		endforeach()
	endforeach()
	add_custom_target(format COMMAND ${CLANG_FORMAT_BINARY} -i ${files})
else()
	message(WARNING ""clang-format not found"")
endif()

IF( WIN32 )
	LIST( APPEND SLSharedWithSettings ${CMAKE_CURRENT_SOURCE_DIR}/src/stacktrace.c )
ELSE( WIN32 )
	LIST( APPEND SLSharedWithSettings ${CMAKE_CURRENT_SOURCE_DIR}/src/stacktrace.cpp )
ENDIF( WIN32 )

INCLUDE(cmake/package_config.cmake)
IF(WIN32)
	install(FILES AUTHORS COPYING README THANKS NEWS DESTINATION ${CMAKE_INSTALL_PREFIX})
ELSE (WIN32)
	install(FILES AUTHORS COPYING README THANKS NEWS DESTINATION ""${CMAKE_INSTALL_DOCDIR}"")
	install(FILES src/images/springlobby.svg DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/icons/hicolor/scalable/apps"")
	install(FILES src/springlobby.desktop DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications"")
	install(FILES share/freedesktop.org/springlobby.appdata.xml DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/metainfo"")
ENDIF (WIN32)

add_custom_target(pack ${CMAKE_MAKE_PROGRAM} package
			&& ${springlobby_SOURCE_DIR}/tools/transform_release_zip.sh
			${CMAKE_BINARY_DIR}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip
			${CMAKE_STRIP})

# setup make dist
add_custom_target(dist ${CMAKE_SOURCE_DIR}/tools/make_dist.sh ""${springlobby_BINARY_DIR}"" ""${PACKAGE_NAME}-${PACKAGE_VERSION}"" ""${PACKAGE_VERSION}"")

# setup make distcheck
add_custom_target(distcheck + cd ${CMAKE_BINARY_DIR} &&
			rm -rf ${PACKAGE_NAME}-${PACKAGE_VERSION} &&
			tar -xzf ${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz &&
			cd ${PACKAGE_NAME}-${PACKAGE_VERSION}/ &&
			cmake ""-DCMAKE_CXX_FLAGS:STRING=-O0"" . && ${CMAKE_MAKE_PROGRAM})
add_dependencies( distcheck dist )
#add_dependencies( versiontest version )

",3.1,3.1
28138,tristanpenman,valijson,False,False,False,False,False,26,C++,2020-02-06 00:45:08+00:00,2013-10-29 21:10:17+00:00,164,320,"cmake_minimum_required(VERSION 3.1)
project(valijson)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

option(valijson_INSTALL_HEADERS ""Install valijson headers."" FALSE)
option(valijson_BUILD_EXAMPLES ""Build valijson examples."" FALSE)
option(valijson_BUILD_TESTS ""Build valijson test suite."" TRUE)
option(valijson_EXCLUDE_BOOST ""Exclude Boost when building test suite."" FALSE)

SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")

if(valijson_INSTALL_HEADERS)
    install(DIRECTORY include/ DESTINATION include)
endif()

if(NOT valijson_BUILD_TESTS AND NOT valijson_BUILD_EXAMPLES)
    return()
endif()

SET(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0"")

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(""-std=c++11"" COMPILER_SUPPORTS_CXX11)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
else()
    message(FATAL_ERROR ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
endif()

find_package(curlpp)
find_package(Poco OPTIONAL_COMPONENTS JSON)
find_package(Qt5Core)

# jsoncpp library
add_library(jsoncpp
    thirdparty/jsoncpp-0.9.4/src/lib_json/json_reader.cpp
    thirdparty/jsoncpp-0.9.4/src/lib_json/json_value.cpp
    thirdparty/jsoncpp-0.9.4/src/lib_json/json_writer.cpp
)

target_include_directories(jsoncpp SYSTEM PRIVATE thirdparty/jsoncpp-0.9.4/include)
set_target_properties(jsoncpp PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/thirdparty/jsoncpp-0.9.4)

add_library(json11
    thirdparty/json11-ec4e452/json11.cpp
)

target_include_directories(json11 SYSTEM PRIVATE thirdparty/json11-ec4e452)
set_target_properties(json11 PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/thirdparty/json11-ec4e452)

# Not all of these are required for examples build it doesn't hurt to include them
include_directories(include SYSTEM
    thirdparty/gtest-1.7.0/include
    thirdparty/json11-ec4e452
    thirdparty/jsoncpp-0.9.4/include
    thirdparty/rapidjson-1.1.0/include
    thirdparty/picojson-1.3.0
    thirdparty/nlohmann-json-3.1.2
    )

if(valijson_BUILD_TESTS)
    if(NOT valijson_EXCLUDE_BOOST)
        find_package(Boost)
    endif()

    # Build local gtest
    set(gtest_force_shared_crt ON)
    add_subdirectory(thirdparty/gtest-1.7.0)

    set(TEST_SOURCES
        tests/test_adapter_comparison.cpp
        tests/test_fetch_document_callback.cpp
        tests/test_json_pointer.cpp
        tests/test_json11_adapter.cpp
        tests/test_jsoncpp_adapter.cpp
        tests/test_nlohmann_json_adapter.cpp
        tests/test_rapidjson_adapter.cpp
        tests/test_picojson_adapter.cpp
        tests/test_poly_constraint.cpp
        tests/test_validation_errors.cpp
        tests/test_validator.cpp
    )

    # Unit tests executable
    add_executable(test_suite ${TEST_SOURCES})

    # Definition for using picojson
    set_target_properties(test_suite PROPERTIES COMPILE_DEFINITIONS ""PICOJSON_USE_INT64"")

    set(TEST_LIBS gtest gtest_main jsoncpp json11)

    if(Boost_FOUND)
        include_directories(${Boost_INCLUDE_DIRS})
        list(APPEND TEST_SOURCES tests/test_property_tree_adapter.cpp)
        add_definitions(-DBOOST_ALL_DYN_LINK)
        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_MULTITHREADED ON)
        set(Boost_USE_STATIC_RUNTIME OFF)
        target_compile_definitions(test_suite PRIVATE ""VALIJSON_BUILD_PROPERTY_TREE_ADAPTER"")
    endif()

    if(Poco_FOUND)
        include_directories(${Poco_INCLUDE_DIRS})
        list(APPEND TEST_SOURCES tests/test_poco_json_adapter.cpp)
        list(APPEND TEST_LIBS ${Poco_Foundation_LIBRARIES} ${Poco_JSON_LIBRARIES})
        target_compile_definitions(test_suite PRIVATE ""VALIJSON_BUILD_POCO_ADAPTER"")
    endif()

    if(Qt5Core_FOUND)
        include_directories(${Qt5Core_INCLUDE_DIRS})
        list(APPEND TEST_SOURCES tests/test_qtjson_adapter.cpp)
        list(APPEND TEST_LIBS Qt5::Core)
        target_compile_definitions(test_suite PRIVATE ""VALIJSON_BUILD_QT_ADAPTER"")
    endif()

    target_link_libraries(test_suite ${TEST_LIBS} ${Boost_LIBRARIES})
endif()

if(valijson_BUILD_EXAMPLES)
    include_directories(SYSTEM)

    add_executable(custom_schema
        examples/custom_schema.cpp
    )

    add_executable(external_schema
        examples/external_schema.cpp
    )

    add_executable(array_iteration_basics
        examples/array_iteration_basics.cpp
    )

    add_executable(array_iteration_template_fn
        examples/array_iteration_template_fn.cpp
    )

    add_executable(object_iteration
        examples/object_iteration.cpp
    )

    add_executable(json_pointers
        examples/json_pointers.cpp
    )

    if(curlpp_FOUND)
        include_directories(${curlpp_INCLUDE_DIR})

        add_executable(remote_resolution
            examples/remote_resolution.cpp
        )

        target_link_libraries(remote_resolution curl ${curlpp_LIBRARIES})
    endif()

    target_link_libraries(custom_schema ${Boost_LIBRARIES})
    target_link_libraries(external_schema ${Boost_LIBRARIES})
    target_link_libraries(array_iteration_basics jsoncpp)
    target_link_libraries(array_iteration_template_fn jsoncpp)
    target_link_libraries(object_iteration jsoncpp)
    target_link_libraries(json_pointers)
endif()
",3.1,3.1
28182,lssfau,walberla,False,False,False,False,False,15,C++,2020-05-12 07:53:43+00:00,2017-03-31 08:21:03+00:00,17,1374,"############################################################################################################################
##
## waLBerla's main cmake file
##
## Contents:
##   - definition of build options
##   - compiler variables ( c++ standard, warnings etc. )
##   - Finding of service libraries. Required: boost, Optional: MPI, PE, METIS
##     the include paths are set, and the libraries are added to variable SERVICE_LIBS
##   - Subdirectory cmake lists are called
##       -> src/   this folder contains all modules, each module (that contains c or cpp files) is linked to a
##                 static library.  Dependencies between these shared libraries are tracked manually,
##                 for more information see waLBerlaModuleDependencySystem.cmake
##       -> tests/ Same subdirectories as src/ folder. Contains tests for each module
##   - Export of variables into internal cache variables, for usage in applications or projects that use walberla as
##     subdirectory. Variables containing the service-libs,
##
############################################################################################################################



############################################################################################################################
##
## Project name, version, Custom CMake functions
##
############################################################################################################################

CMAKE_MINIMUM_REQUIRED (VERSION 3.1)


PROJECT ( walberla )

set ( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${walberla_SOURCE_DIR}/cmake )

include ( waLBerlaFunctions )

set_version( 5 0 )

include( CMakeParseArguments )

# Enable CTest
enable_testing()
include( CTest )


############################################################################################################################




############################################################################################################################
##
## Definition of build options
##
############################################################################################################################


# Build options
option ( WALBERLA_DOUBLE_ACCURACY           ""Floating point accuracy, defaults to double""     ON )
option ( WALBERLA_ENABLE_GUI                ""Compile with GUI""                                   )

option ( WALBERLA_BUILD_TESTS               ""Build Testcases""                                    )
option ( WALBERLA_BUILD_BENCHMARKS          ""Build Benchmarks""                                ON )
option ( WALBERLA_BUILD_TOOLS               ""Build Tools""                                        )
option ( WALBERLA_BUILD_TUTORIALS           ""Build Tutorials""                                 ON )
option ( WALBERLA_BUILD_SHOWCASES           ""Build Showcases""                                OFF )
option ( WALBERLA_BUILD_DOC                 ""Build Documentation""                             ON )

option ( WALBERLA_BUILD_WITH_MPI            ""Build with MPI""                                  ON )
option ( WALBERLA_BUILD_WITH_METIS          ""Build with metis graph partitioner""             OFF )
option ( WALBERLA_BUILD_WITH_PARMETIS       ""Build with ParMetis graph partitioner""          OFF )

option ( WALBERLA_BUILD_WITH_GPROF          ""Enables gprof""                                      )
option ( WALBERLA_BUILD_WITH_GCOV           ""Enables gcov""                                       )
option ( WALBERLA_BUILD_WITH_LTO            ""Enable link time optimizations""                     )
option ( WALBERLA_BUILD_WITH_OPENMP         ""Enable OpenMP support""                              )
option ( WALBERLA_BUILD_WITH_PYTHON         ""Support for embedding Python""                       )
option ( WALBERLA_BUILD_WITH_PYTHON_MODULE  ""Build waLBerla python module""                       )
option ( WALBERLA_BUILD_WITH_PYTHON_LBM     ""Include LBM module into python module""          OFF )
option ( WALBERLA_BUILD_WITH_CODEGEN        ""Enable pystencils code generation""              OFF )


option ( WALBERLA_BUILD_WITH_LIKWID_MARKERS ""Compile in markers for likwid-perfctr""              )

option ( WALBERLA_BUILD_WITH_CUDA	        ""Enable CUDA support""                                )


option ( WALBERLA_BUILD_WITH_FASTMATH       ""Fast math""                                          )

option ( WALBERLA_SIMD_FORCE_SCALAR         ""Do not use SIMD operations even when available"" OFF )

option ( WALBERLA_BUFFER_DEBUG              ""Type checking for BufferSystem ( slow )""        OFF )

option ( WALBERLA_NO_OUTDATED_FEATURES      ""Show warning/errors when outdated features ""
                                            ""(i.e. features that will be deprecated) are used""   )

# Profile guided optimization
option ( WALBERLA_PROFILE_GENERATE          ""Generates Profile for Optimization""                 )
option ( WALBERLA_PROFILE_USE               ""Uses Profile to optimize""                           )

# Compiler Optimization
option ( WALBERLA_OPTIMIZE_FOR_LOCALHOST    ""Enable compiler optimizations spcific to localhost"" )

option ( WALBERLA_LOG_SKIPPED               ""Log skipped cmake targets""                      ON  )

# Installation Directory
set ( CMAKE_INSTALL_PREFIX /usr/local/waLBerla CACHE STRING ""The default installation directory.""   )

# Default build type
if ( NOT CMAKE_BUILD_TYPE )
    set ( CMAKE_BUILD_TYPE Release CACHE STRING ""Build Types: Debug Release DebugOptimized RelWithDebInfo MinSizeRel.""  FORCE )
endif()
SET_PROPERTY( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release DebugOptimized RelWithDebInfo MinSizeRel )

# Debugging options                                      )
option ( WALBERLA_STL_BOUNDS_CHECKS  ""Use debug capabilites of libstd++: iterator and bounds checks"" )

# Warning options
option ( WARNING_DISABLE    ""Disables additional compiler warnings""          OFF )
option ( WARNING_PEDANTIC   ""Enables pedantic compiler warnings""             ON  )
option ( WARNING_ERROR      ""Convert warnings to errors compiler warnings""   OFF )
option ( WARNING_DEPRECATED ""Show warning when deprecated features are used"" ON  )

# Sanitizer options
option ( WALBERLA_SANITIZE_ADDRESS    ""Enables address sanitizer in gcc and clang""            )
option ( WALBERLA_SANITIZE_UNDEFINED  ""Enables undefined behavior sanitizer in gcc and clang"" )

# Every folder that is listed here can contain modules or tests
# this can be extended by applications to have own modules
# Here the src/ folder is added to this list, where all modules are located
list( APPEND WALBERLA_MODULE_DIRS ""${walberla_SOURCE_DIR}/src"" ""${walberla_SOURCE_DIR}/tests"" )
list( REMOVE_DUPLICATES  WALBERLA_MODULE_DIRS )
set ( WALBERLA_MODULE_DIRS  ${WALBERLA_MODULE_DIRS} CACHE INTERNAL ""All folders that contain modules or tests"" )

# target_link_libraries needs to called with keywords everywhere if it is called with keywords once
if( DEFINED CUDA_LINK_LIBRARIES_KEYWORD AND NOT CUDA_LINK_LIBRARIES_KEYWORD STREQUAL """" )
    set( WALBERLA_LINK_LIBRARIES_KEYWORD PUBLIC )
endif()

############################################################################################################################

set( CMAKE_CXX_STANDARD 14 )
set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_CXX_EXTENSIONS OFF )

############################################################################################################################
##
## Compiler detection
##
############################################################################################################################

# Check for intel compiler
if( CMAKE_CXX_COMPILER MATCHES ""icpc"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""icpc"" )
    option ( WALBERLA_CXX_COMPILER_IS_INTEL ""Use Intel compiler"" ON  )
    # Intel(R) Compiler has its own library archiver,
    # if you build libraries and do not use xiar,
    # the Intel compiler will complain about invalid
    # archives at the link phase.
    # The Intel(R) archiver is ""xiar"" usually
    # located in the same folder as the compiler,
    FIND_PROGRAM(XIAR xiar)
    IF(XIAR)
        SET(CMAKE_AR ""${XIAR}"")
    ENDIF(XIAR)
    MARK_AS_ADVANCED(XIAR)

    # Intel(R) Compiler also comes with its own linker
    # which provides a number of additional benefits when
    # linking code compiled with the Intel(R) compiler.
    # Again, usually in the same place as icc itself,
    FIND_PROGRAM(XILD xild)
    IF(XILD)
       SET(CMAKE_LINKER ""${XILD}"")
    ENDIF(XILD)
    MARK_AS_ADVANCED(XILD)
    if( CMAKE_VERSION VERSION_LESS 3.6.0 )
      set( CMAKE_CXX14_STANDARD_COMPILE_OPTION ""-std=c++14"" )
      add_flag ( CMAKE_CXX_FLAGS ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
    endif()
else()
    option ( WALBERLA_CXX_COMPILER_IS_INTEL ""Use Intel compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_INTEL )

# Check for Gnu compiler
if ( CMAKE_COMPILER_IS_GNUCXX  AND NOT WALBERLA_CXX_COMPILER_IS_INTEL )
     option ( WALBERLA_CXX_COMPILER_IS_GNU ""Use gnu compiler"" ON  )
else()
     option ( WALBERLA_CXX_COMPILER_IS_GNU ""Use gnu compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_GNU )

# Check for Visual Studio
if ( MSVC )
     option ( WALBERLA_CXX_COMPILER_IS_MSVC ""Use Visual Studio compiler"" ON  )
else()
     option ( WALBERLA_CXX_COMPILER_IS_MSVC ""Use Visual Studio compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_MSVC )

# Check for IBM compiler
if( CMAKE_CXX_COMPILER MATCHES ""xlc"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""xlc"" )
    option ( WALBERLA_CXX_COMPILER_IS_IBM ""Use IBM compiler"" ON  )
else()
    option ( WALBERLA_CXX_COMPILER_IS_IBM ""Use IBM compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_IBM )

# Check for NEC SX compiler
if( CMAKE_CXX_COMPILER MATCHES ""sxc"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""sxc"" OR CMAKE_CXX_COMPILER MATCHES ""sxmpic"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""sxmpic"" )
    option ( WALBERLA_CXX_COMPILER_IS_NEC ""Use NEC compiler"" ON  )
else()
    option ( WALBERLA_CXX_COMPILER_IS_NEC ""Use NEC compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_NEC )

# Check for Clang compiler
if( CMAKE_CXX_COMPILER MATCHES ""clang"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""clang"" OR CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" OR CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"" )
    option ( WALBERLA_CXX_COMPILER_IS_CLANG ""Use clang compiler"" ON  )
else()
    option ( WALBERLA_CXX_COMPILER_IS_CLANG ""Use clang compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_CLANG )

if( CMAKE_CXX_COMPILER_ID MATCHES Cray )
    option ( WALBERLA_CXX_COMPILER_IS_CRAY ""Use Cray compiler"" ON   )
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.4)
        message( FATAL_ERROR ""Insufficient Cray Compiler Environment version"" )
    endif()
else()
    option ( WALBERLA_CXX_COMPILER_IS_CRAY ""Use Cray compiler"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_CRAY )

# Check for MPI wrapper
get_filename_component( CXX_COMPILER_WITHOUT_PATH ${CMAKE_CXX_COMPILER} NAME )
if( CXX_COMPILER_WITHOUT_PATH MATCHES ""mpi"" OR CMAKE_CXX_COMPILER_ARG1 MATCHES ""mpi"" )
    option ( WALBERLA_CXX_COMPILER_IS_MPI_WRAPPER ""Compiler is MPI wrapper"" ON  )
else()
    option ( WALBERLA_CXX_COMPILER_IS_MPI_WRAPPER ""Compiler is MPI wrapper"" OFF  )
endif()
mark_as_advanced ( WALBERLA_CXX_COMPILER_IS_MPI_WRAPPER )

############################################################################################################################



############################################################################################################################
##
## Compiler Setup
##
############################################################################################################################

# Profile guided optimization
if ( WALBERLA_PROFILE_GENERATE )
    if( WALBERLA_CXX_COMPILER_IS_INTEL )
        add_flag( CMAKE_CXX_FLAGS ""-prof-gen"" )
        file( MAKE_DIRECTORY ""${CMAKE_BINARY_DIR}/profile"" )
        add_flag( CMAKE_CXX_FLAGS ""-prof-dir${CMAKE_BINARY_DIR}/profile"" )
    elseif( WALBERLA_CXX_COMPILER_IS_GNU )
        add_flag( CMAKE_CXX_FLAGS ""-fprofile-generate"" )
    elseif( WALBERLA_CXX_COMPILER_IS_MSVC )
      add_flag ( CMAKE_CXX_FLAGS           ""/GL""                )
      add_flag ( CMAKE_MODULE_LINKER_FLAGS ""/LTCG:PGINSTRUMENT"" )
      add_flag ( CMAKE_SHARED_LINKER_FLAGS ""/LTCG:PGINSTRUMENT"" )
      add_flag ( CMAKE_EXE_LINKER_FLAGS    ""/LTCG:PGINSTRUMENT"" )
    endif()
endif()

if ( WALBERLA_PROFILE_USE )
    if( WALBERLA_CXX_COMPILER_IS_INTEL )
       add_flag( CMAKE_CXX_FLAGS ""-prof-use"" )
       add_flag( CMAKE_CXX_FLAGS ""-prof-dir${CMAKE_BINARY_DIR}/profile"" )
    elseif( WALBERLA_CXX_COMPILER_IS_GNU )
       add_flag( CMAKE_CXX_FLAGS ""-fprofile-use"" )
    elseif( WALBERLA_CXX_COMPILER_IS_MSVC )
      add_flag ( CMAKE_CXX_FLAGS           ""/GL""              )
      add_flag ( CMAKE_MODULE_LINKER_FLAGS ""/LTCG:PGOPTIMIZE"" )
      add_flag ( CMAKE_SHARED_LINKER_FLAGS ""/LTCG:PGOPTIMIZE"" )
      add_flag ( CMAKE_EXE_LINKER_FLAGS    ""/LTCG:PGOPTIMIZE"" )
    endif()
endif()

# common flags for intel and g++
if ( NOT WARNING_DISABLE AND ( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL ) )
   add_flag ( CMAKE_CXX_FLAGS ""-Wall -Wconversion -Wshadow"" )
endif()

# C++ language features for NEC compiler
if( WALBERLA_CXX_COMPILER_IS_NEC )
   set( CMAKE_CXX14_STANDARD_COMPILE_OPTION ""-Kcpp14"" )
   add_flag ( CMAKE_CXX_FLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} -Krtti -Kexceptions -size_t64 -Kgcc"" )
   add_flag ( CMAKE_CXX_FLAGS ""-D__BIG_ENDIAN -D__BYTE_ORDER=__BIG_ENDIAN"" )
   add_flag ( CMAKE_CXX_FLAGS ""-Tnoauto,used"" )
   add_flag ( CMAKE_EXE_LINKER_FLAGS ""-Wl,-h,muldefs"" )
   add_flag ( CMAKE_C_FLAGS ""-size_t64 -Kgcc"" )
   add_flag ( CMAKE_C_FLAGS ""-D__BIG_ENDIAN -D__BYTE_ORDER=__BIG_ENDIAN"" )
   add_flag ( CMAKE_C_FLAGS ""-DSQLITE_OMIT_WAL -DHAVE_UTIME -DTHREADSAFE=0"" )
   set( CMAKE_RANLIB /bin/true )
   set( CMAKE_SKIP_BUILD_RPATH TRUE )
   set( CMAKE_C_FLAGS_DEBUGOPTIMIZED    ""-Chopt -g""                               )
   set( CMAKE_C_FLAGS_DEBUG             ""-Cdebug -g""                              )
   set( CMAKE_CXX_FLAGS_DEBUGOPTIMIZED  ""-Chopt -g""                               )
   set( CMAKE_CXX_FLAGS_DEBUG           ""-Cdebug -g""                              )
endif()

# Fixes linker errors with IBM compiler
if( WALBERLA_CXX_COMPILER_IS_IBM )
   add_flag ( CMAKE_CXX_FLAGS ""-qpic=large"" )
endif()
# Fixes linker errors with Cray compiler
if( WALBERLA_CXX_COMPILER_IS_CRAY )
   add_flag ( CMAKE_EXE_LINKER_FLAGS  ""-dynamic -L/opt/gcc/4.9.3/snos/lib64"" )
endif()

# Silences compiler and linker warnings and information with the IBM compiler
if( WALBERLA_CXX_COMPILER_IS_IBM )
   add_flag ( CMAKE_CXX_FLAGS ""-qsuppress=1586-267"" )  # 1586-267 (I) Inlining of specified subprogram failed due to the presence of a C++ exception handler
   add_flag ( CMAKE_CXX_FLAGS ""-qsuppress=1586-266"" )  # 1586-266 (I) Inlining of specified subprogram failed due to the presence of a global label
   add_flag ( CMAKE_CXX_FLAGS ""-qsuppress=1540-0724"" ) # 1540-0724 (W) The non-type template argument ""2147483648"" of type ""T"" has wrapped [coming from boost/integer_traits.hpp]
   add_flag ( CMAKE_CXX_FLAGS ""-qsuppress=1540-0095"" ) # 1540-0095 (W) The friend function declaration ... [coming from boost/mpl/map/aux_/map0.hpp]
   add_flag ( CMAKE_CXX_FLAGS ""-qsuppress=1500-030"" )  # 1500-030: (I) INFORMATION: [...] Additional optimization may be attained by recompiling and specifying MAXMEM option with a value greater than 8192.
   add_flag ( CMAKE_C_FLAGS ""-qsuppress=1500-030"" )    # 1500-030: (I) INFORMATION: [...] Additional optimization may be attained by recompiling and specifying MAXMEM option with a value greater than 8192.
endif()

# Silences compiler and linker warnings and information with the Cray compiler
if( WALBERLA_CXX_COMPILER_IS_CRAY )
   set( CMAKE_INCLUDE_SYSTEM_FLAG_CXX ""-isystem "" )
   add_flag ( CMAKE_CXX_FLAGS ""-h nomessage=1"" )      # CC-1    The source file does not end with a new-line character.
   add_flag ( CMAKE_C_FLAGS   ""-DSQLITE_HAVE_ISNAN"" ) # SQLite will not work correctly with the -ffast-math option of GCC.
   add_flag ( CMAKE_CXX_FLAGS ""-DSQLITE_HAVE_ISNAN"" ) # SQLite will not work correctly with the -ffast-math option of GCC.
endif()

# architecture optimization
if( WALBERLA_OPTIMIZE_FOR_LOCALHOST )
   if( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL OR WALBERLA_CXX_COMPILER_IS_CLANG )
      add_flag ( CMAKE_CXX_FLAGS ""-march=native"" )
      add_flag ( CMAKE_C_FLAGS   ""-march=native"" )
      if( WALBERLA_CXX_COMPILER_IS_INTEL )
        add_flag ( CMAKE_CXX_FLAGS ""-xhost"" )
        add_flag ( CMAKE_C_FLAGS   ""-xhost"" )
      endif()
   endif()
endif()

# warning flags
if( WALBERLA_CXX_COMPILER_IS_INTEL )
   # system headers are also supported by intel, but cmake does not recognize that
   set( CMAKE_INCLUDE_SYSTEM_FLAG_CXX ""-isystem "" )
   add_flag ( CMAKE_CXX_FLAGS ""-wd2928,2504,2259,1682,597"" )
elseif( WALBERLA_CXX_COMPILER_IS_GNU )
   add_flag ( CMAKE_CXX_FLAGS ""-Wfloat-equal -Wextra"" )
elseif( WALBERLA_CXX_COMPILER_IS_NEC )
   add_flag ( CMAKE_CXX_FLAGS ""-wall"" )
endif()

if ( WARNING_PEDANTIC AND WALBERLA_CXX_COMPILER_IS_GNU )
   add_flag ( CMAKE_CXX_FLAGS ""-pedantic"" )
endif ( )

 # omit deprecated warnings
if( NOT WARNING_DEPRECATED)
   if( WALBERLA_CXX_COMPILER_IS_INTEL )
       add_flag( CMAKE_CXX_FLAGS ""-wd1478"" )  # Disable compiler warning # 1478: ""declared as deprecated""
   elseif( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_CLANG )
       add_flag ( CMAKE_CXX_FLAGS ""-Wno-deprecated-declarations"")
   endif()
endif()


if ( WALBERLA_CXX_COMPILER_IS_CLANG )
    add_flag ( CMAKE_CXX_FLAGS ""-Wall -Wconversion -Wshadow -Wno-c++11-extensions -Qunused-arguments"" )
    add_flag ( CMAKE_CXX_FLAGS ""-D'_LIBCPP_EXTERN_TEMPLATE(...)='"")
endif ( )

if( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL OR WALBERLA_CXX_COMPILER_IS_CLANG )
    if ( WALBERLA_STL_BOUNDS_CHECKS )
        add_definitions ( ""-D_GLIBCXX_DEBUG"" )
    endif()
endif()


#fastmath
if ( WALBERLA_BUILD_WITH_FASTMATH )
    if ( WALBERLA_CXX_COMPILER_IS_INTEL )
        add_flag( CMAKE_CXX_FLAGS ""-fp-model fast=2 -no-prec-sqrt -no-prec-div"" )
    endif()

    if ( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_CLANG )
        add_flag( CMAKE_CXX_FLAGS ""-ffast-math"")
    endif()

    if( WALBERLA_CXX_COMPILER_IS_MSVC )
        add_flag( CMAKE_CXX_FLAGS ""/fp:fast"" )
    endif()
endif()

# Xcode generator disables -isystem flag, even though current versions of Xcode support it
if(CMAKE_GENERATOR STREQUAL ""Xcode"")
    set(CMAKE_INCLUDE_SYSTEM_FLAG_C ""-isystem "")
    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX ""-isystem "")
endif()


#GCC 5+ ABI selection
if( WALBERLA_CXX_COMPILER_IS_GNU )
   if( NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0.0 )
      option ( WALBERLA_USE_CPP11_ABI ""On GCC 5+ use the C++11 ABI"" ON )
      if( WALBERLA_USE_CPP11_ABI )
         add_flag( CMAKE_CXX_FLAGS ""-D_GLIBCXX_USE_CXX11_ABI=1"" )
      else()
         add_flag( CMAKE_CXX_FLAGS ""-D_GLIBCXX_USE_CXX11_ABI=0"" )
      endif()
   endif()
endif()


# disable Xcode 7.3+ linker deduplication pass to speed up linking in debug mode
if ( APPLE )
   execute_process( COMMAND ${CMAKE_LINKER} -v OUTPUT_VARIABLE LINKER_VERSION ERROR_VARIABLE LINKER_VERSION )
   string( REGEX MATCH ""ld64-[0-9\\.\\-]+"" LINKER_VERSION ${LINKER_VERSION} )
   string( REGEX MATCHALL ""[^\\-]+"" LINKER_VERSION ${LINKER_VERSION} )
   list( GET LINKER_VERSION 0 LINKER_TYPE )
   list( GET LINKER_VERSION 1 LINKER_VERSION )
   if( LINKER_TYPE STREQUAL ""ld64"" AND LINKER_VERSION VERSION_GREATER 264.3.101 )
       add_flag( CMAKE_EXE_LINKER_FLAGS_DEBUG    ""-Wl,-no_deduplicate"")
       add_flag( CMAKE_MODULE_LINKER_FLAGS_DEBUG ""-Wl,-no_deduplicate"")
       add_flag( CMAKE_SHARED_LINKER_FLAGS_DEBUG ""-Wl,-no_deduplicate"")
   endif()
endif()


############################################################################################################################



############################################################################################################################
##
##  Find optional C++ libraries
##
############################################################################################################################

try_compile( WALBERLA_USE_STD_FILESYSTEM ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdFilesystem.cpp""
             COMPILE_DEFINITIONS -DWALBERLA_USE_STD_FILESYSTEM ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
if( WALBERLA_USE_STD_FILESYSTEM )
   message( STATUS ""Found std::filesystem"")
else()
   try_compile( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdFilesystem.cpp""
                COMPILE_DEFINITIONS -DWALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
   if( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
      message( STATUS ""Found std::experimental::filesystem"")
   endif()
   if( NOT WALBERLA_CXX_COMPILER_IS_MSVC AND NOT WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
      unset( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM CACHE )
      try_compile( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdFilesystem.cpp""
                   COMPILE_DEFINITIONS -DWALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION}
                   LINK_LIBRARIES stdc++fs )
      if( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
         message( STATUS ""Found std::experimental::filesystem in libstdc++fs"")
      list ( APPEND SERVICE_LIBS -lstdc++fs )
      endif()
   endif()
   if( NOT WALBERLA_CXX_COMPILER_IS_MSVC AND NOT WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
      unset( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM CACHE )
      try_compile( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdFilesystem.cpp""
                   COMPILE_DEFINITIONS -DWALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION}
                   LINK_LIBRARIES c++experimental )
      if( WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
         message( STATUS ""Found std::experimental::filesystem in libc++experimental"")
         list ( APPEND SERVICE_LIBS -lc++experimental )
      endif()
   endif()
endif()

try_compile( WALBERLA_USE_STD_ANY ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdAny.cpp""
             COMPILE_DEFINITIONS -DWALBERLA_USE_STD_ANY ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
if( WALBERLA_USE_STD_ANY )
   message( STATUS ""Found std::any"")
else()
   try_compile( WALBERLA_USE_STD_EXPERIMENTAL_ANY ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdAny.cpp""
                COMPILE_DEFINITIONS -DWALBERLA_USE_STD_EXPERIMENTAL_ANY ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
   if( WALBERLA_USE_STD_EXPERIMENTAL_ANY )
      message( STATUS ""Found std::experimental::any"")
   endif()
endif()

try_compile( WALBERLA_USE_STD_OPTIONAL ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdOptional.cpp""
             COMPILE_DEFINITIONS -DWALBERLA_USE_STD_OPTIONAL ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
if( WALBERLA_USE_STD_OPTIONAL )
   message( STATUS ""Found std::optional"")
else()
   try_compile( WALBERLA_USE_STD_EXPERIMENTAL_OPTIONAL ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdOptional.cpp""
                COMPILE_DEFINITIONS -DWALBERLA_USE_STD_EXPERIMENTAL_OPTIONAL ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
   if( WALBERLA_USE_STD_EXPERIMENTAL_OPTIONAL )
      message( STATUS ""Found std::experimental::optional"")
   endif()
endif()

try_compile( WALBERLA_USE_STD_VARIANT ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/TestStdVariant.cpp""
             COMPILE_DEFINITIONS -DWALBERLA_USE_STD_VARIANT ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} )
if( WALBERLA_USE_STD_VARIANT )
   message( STATUS ""Found std::variant"")
endif()



############################################################################################################################
##
##  Visual Studio Setup
##
############################################################################################################################
if ( WALBERLA_CXX_COMPILER_IS_MSVC )
   string( REGEX REPLACE ""[/-]W[0-4]"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ) # remove default warning flags

   option ( WALBERLA_GROUP_PROJECTS   ""Flag if the projects are grouped or in a flat hierarchy""    ON )
   option ( WALBERLA_GROUP_FILES      ""Flag if the files are grouped or in a flat hierarchy""       ON )
   set_property ( GLOBAL PROPERTY USE_FOLDERS ${WALBERLA_GROUP_PROJECTS} )

   option ( WALBERLA_VS_MULTI_PROCESS_BUILD ""Use the /mp option for VS builds"" ON )
   if( WALBERLA_VS_MULTI_PROCESS_BUILD )
      add_flag ( CMAKE_CXX_FLAGS ""-MP"" ) # enable multi-threaded compiling
   endif()

   add_definitions ( ""-DNOMINMAX"" )                # Disable Min/Max-Macros
   add_definitions ( ""-D_WIN32_WINNT=0x501"" )      # Minimum Windows versions is Windows XP
   add_definitions ( ""-DWINVER=0x501"" )            # Minimum Windows versions is Windows XP
   add_definitions ( ""-D_CRT_SECURE_NO_WARNINGS"" ) # disable warnings promoting Microsoft's security enhanced CRT
   add_definitions ( ""-D_SCL_SECURE_NO_WARNINGS"" ) # disable warnings triggered by Microsoft's checked iterators
   add_flag ( CMAKE_CXX_FLAGS ""-W4"" )              # set warning level to maximum
   add_flag ( CMAKE_CXX_FLAGS ""-bigobj"" )          # enable big object files
   add_flag ( CMAKE_CXX_FLAGS ""-wd4127"" )          # disable compiler warning C4127: ""conditional expression is constant""
   add_flag ( CMAKE_CXX_FLAGS ""-wd4512"" )          # disable compiler warning C4512: ""assignment operator could not be generated""
   add_flag ( CMAKE_CXX_FLAGS ""-wd4913"" )          # disable compiler warning C4512: ""user defined binary operator ',' exists but
                                                   # no overload could convert all operands, default built-in binary operator ','
                                                   # used""
   add_flag ( CMAKE_CXX_FLAGS ""-wd4702"" )          # disable compiler warning C4702: ""unreachable code""
   add_flag ( CMAKE_CXX_FLAGS ""-wd4505"" )          # disable compiler warning C4505: ""unreferenced local function has been removed""
   add_flag ( CMAKE_CXX_FLAGS ""-wd4503"" )          # disable compiler warning C4503: ""'identifier' : decorated name length exceeded, name was truncated""

   if ( WARNING_ERROR )
      add_flag ( CMAKE_CXX_FLAGS ""-WX"" )           # Treat warnings as errors
   endif ( )

   if( NOT WARNING_DEPRECATED)
      add_definitions( ""-D_CRT_SECURE_NO_DEPRECATE"" )
      add_definitions( ""-D_SCL_SECURE_NO_DEPRECATE"" )
      add_flag       ( CMAKE_CXX_FLAGS ""-wd4996""    ) # Disable compiler warning C4996: ""declared as deprecated""
   endif()

endif ( )
############################################################################################################################




############################################################################################################################
##
## Code Generation (pystencils)
##
#############################################################################################################################
if ( WALBERLA_BUILD_WITH_CODEGEN )
    find_package( PythonInterp 3 QUIET REQUIRED)
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c ""from pystencils.include import get_pystencils_include_path; print(get_pystencils_include_path())""
                    RESULT_VARIABLE PYTHON_RET_CODE
                    OUTPUT_VARIABLE PYSTENCILS_INCLUDE_PATH)
    if(NOT PYTHON_RET_CODE EQUAL 0)
        message(FATAL_ERROR ""WALBERLA_BUILD_WITH_CODEGEN activated and pystencils_walberla package not found"")
    endif()
    include_directories( ${PYSTENCILS_INCLUDE_PATH} )
endif()
############################################################################################################################




############################################################################################################################
##
## Python Libraries
##
#############################################################################################################################
if ( WALBERLA_BUILD_WITH_PYTHON )

    set ( waLBerla_REQUIRED_MIN_PYTHON_VERSION ""2.7"")

    find_package( PythonInterp 3 QUIET) # search for Python3 first
    find_package( PythonInterp QUIET) # fallback to any Python version

    find_package( PythonLibs QUIET REQUIRED)

    if( PYTHONLIBS_VERSION_STRING VERSION_LESS ${waLBerla_REQUIRED_MIN_PYTHON_VERSION} )
        message( FATAL_ERROR ""Found old python library: ${PYTHONLIBS_VERSION_STRING} need at least ${waLBerla_REQUIRED_MIN_PYTHON_VERSION}"" )
    endif()

    option( WALBERLA_USE_PYTHON_DEBUG_LIBRARY ""Make use of the python debug library"" OFF )

    if( WALBERLA_USE_PYTHON_DEBUG_LIBRARY )
      # you have to make sure this matches the settings you compiled boost with!
      add_definitions( ""-DBOOST_DEBUG_PYTHON"" )
    endif()

    if( NOT (PYTHON_LIBRARY AND PYTHON_INCLUDE_DIR ) )
        message( FATAL_ERROR ""Couldn't find any python library"" )
    endif()

    SET( WALBERLA_BUILD_WITH_PYTHON 1 )
    include_directories( ${PYTHON_INCLUDE_DIR} )
    list ( APPEND SERVICE_LIBS ${PYTHON_LIBRARY} )

    if( NOT WALBERLA_CXX_COMPILER_IS_MSVC )
        list ( APPEND SERVICE_LIBS -lutil )
    endif()

    if ( WALBERLA_BUILD_WITH_PYTHON_MODULE )
        # a python module is a shared library - so everything has to be compiled to position independent code
        # otherwise linking the static libs into the shared lib will result in errors
        if( NOT WALBERLA_CXX_COMPILER_IS_MSVC )
            add_flag ( CMAKE_CXX_FLAGS ""-fPIC"" )
            add_flag ( CMAKE_C_FLAGS ""-fPIC"" )
        endif()
    endif()

    if( MSVC10 )
        include(CMakeDependentOption)
        CMAKE_DEPENDENT_OPTION( PYTHON_FIXED_HYPOT_REDEFINITION ""fixed _hypot redefinition by python"" OFF ""WALBERLA_BUILD_WITH_PYTHON"" OFF )
        if( NOT PYTHON_FIXED_HYPOT_REDEFINITION )
            message( WARNING ""Make sure you modified your pyconfig.h that _hypot is not redefined -> see: http://connect.microsoft.com/VisualStudio/feedback/details/633988/warning-in-math-h-line-162-re-nonstandard-extensions-used"" )
        endif()
    endif()


    if(WALBERLA_BUILD_DOC)
      # Sphinx documentation
      # to build documentation make sure to have sphinx and read-the-docs theme installed
      # Install with: ""pip install sphinx sphinx_rtd_theme""
      add_custom_target( docPython sphinx-build -b html ""${walberla_SOURCE_DIR}/python/waLBerla_docs"" ""${walberla_BINARY_DIR}/doc/python""
                         COMMENT ""Building HTML documentation for Python extension with Sphinx"")
  endif()
endif()


############################################################################################################################
##
## BOOST Libraries
##
#############################################################################################################################
set ( waLBerla_REQUIRED_MIN_BOOST_VERSION ""1.48"")
set ( Boost_NO_BOOST_CMAKE ON)

if ( NOT WALBERLA_USE_STD_FILESYSTEM AND NOT WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM )
  list ( APPEND waLBerla_REQUIRED_BOOST_COMPONENTS filesystem system )
else()
  list ( APPEND waLBerla_OPTIONAL_BOOST_COMPONENTS system )
endif()

if ( WALBERLA_BUILD_WITH_PYTHON AND WALBERLA_CXX_COMPILER_IS_MSVC )
    get_filename_component(PYTHON_REQUIRED_LIB ${PYTHON_LIBRARY} NAME_WE)
    list( APPEND waLBerla_REQUIRED_BOOST_COMPONENTS ${PYTHON_REQUIRED_LIB} )
endif()

# This variable is necessary, if the CMAKE version used is not aware of a more recent boost version (keep this up to date!)
set ( Boost_ADDITIONAL_VERSIONS
      ""1.45"" ""1.45.0"" ""1.46"" ""1.46.0"" ""1.46.1"" ""1.47"" ""1.47.0"" ""1.48"" ""1.48.0"" ""1.49"" ""1.49.0""
      ""1.50"" ""1.50.0"" ""1.51"" ""1.51.0"" ""1.52"" ""1.52.0"" ""1.53"" ""1.53.0"" ""1.54"" ""1.54.0"" ""1.55"" ""1.55.0""
      ""1.56"" ""1.56.0"" ""1.57"" ""1.57.0"" ""1.58"" ""1.58.0"" ""1.59"" ""1.59.0"" ""1.60"" ""1.60.0"" ""1.61"" ""1.61.0"" ""1.62"" ""1.62.0"" ""1.63"" ""1.63.0""
      ""1.64.0"" ""1.65.0"" ""1.65.1"" ""1.66.0"" ""1.67.0"" ""1.68.0"" ""1.69.0"" ""1.70.0"" ""1.71.0"")

set ( Boost_USE_STATIC_LIBS    OFF CACHE BOOL ""Use boost static libraries"" )
set ( Boost_USE_MULTITHREADED  OFF CACHE BOOL ""Use boost multithreaded libraries"" )
set ( Boost_USE_STATIC_RUNTIME OFF CACHE BOOL ""Use boost libraries statically linked to runtime libs"" )

# if you defined BOOST_ROOT or BOOST_BASE in your environment use it here to find boost too
if ( NOT BOOST_ROOT )
   foreach ( var  BOOST_ROOT  BOOST_BASE )
      if ( NOT ""$ENV{${var}}"" STREQUAL """" )
         message ( STATUS ""Use environment boost directory: $ENV{${var}}"" )
         set ( BOOST_ROOT $ENV{${var}} CACHE INTERNAL """")
         break ( )
      endif ( )
   endforeach ( )
endif ( )

find_package ( Boost ${waLBerla_REQUIRED_MIN_BOOST_VERSION} COMPONENTS ${waLBerla_REQUIRED_BOOST_COMPONENTS} OPTIONAL_COMPONENTS ${waLBerla_OPTIONAL_BOOST_COMPONENTS} QUIET )

if( NOT Boost_FOUND )
   message ( WARNING
      ""The specified configuration of the BOOST libraries was not found on your system! Now trying some other configuration..."" )
   foreach ( Boost_USE_STATIC_LIBS ON OFF )
      foreach ( Boost_USE_MULTITHREADED ON OFF )
         find_package ( Boost ${waLBerla_REQUIRED_MIN_BOOST_VERSION} COMPONENTS ${waLBerla_REQUIRED_BOOST_COMPONENTS} OPTIONAL_COMPONENTS ${waLBerla_OPTIONAL_BOOST_COMPONENTS} QUIET )
         if ( Boost_FOUND )
            set ( Boost_USE_STATIC_LIBS   ${Boost_USE_STATIC_LIBS}   CACHE BOOL ""Use boost static libraries""        FORCE )
            set ( Boost_USE_MULTITHREADED ${Boost_USE_MULTITHREADED} CACHE BOOL ""Use boost multithreaded libraries"" FORCE )
            set ( Boost_USE_MULTITHREADED_LIBRARY ${Boost_USE_MULTITHREADED} )
            message ( STATUS ""Working configuration of the BOOST libraries was found :o)!"" )
            message ( STATUS ""Boost_USE_STATIC_LIBS and Boost_USE_MULTITHREADED was adapted accordingly."" )
            BREAK ( )
         endif ( Boost_FOUND )
      endforeach ( Boost_USE_MULTITHREADED )
      if ( Boost_FOUND )
         BREAK ( )
      endif ( Boost_FOUND )
   endforeach ( Boost_USE_STATIC_LIBS )
endif ( NOT Boost_FOUND )

if ( Boost_FOUND )
   if(CMAKE_GENERATOR STREQUAL ""Xcode"")
      # this is needed because the SYSTEM flag to include_directories does not work
      add_flag ( CMAKE_CXX_FLAGS ""-isystem ${Boost_INCLUDE_DIRS}"" )
   else()
      include_directories ( SYSTEM ${Boost_INCLUDE_DIRS} )
   endif()
   if( waLBerla_REQUIRED_BOOST_COMPONENTS )
      link_directories ( ${Boost_LIBRARY_DIRS} )
      list ( APPEND SERVICE_LIBS ${Boost_LIBRARIES} )
   endif()
   add_definitions ( -DBOOST_ALL_NO_LIB ) # Disable Boost auto-linking (CMAKE does that for us...)

   #fix for static lib usage: http://stackoverflow.com/questions/11812463/boost-python-link-errors-under-windows-msvc10
   if( PYTHONLIBS_FOUND AND Boost_USE_STATIC_LIBS)
      add_definitions( -DBOOST_PYTHON_STATIC_LIB )
   endif()

   #fix for strange link behaviour of boost to python: boost only links to 'pyhton*.lib' and not to the absolute path
   if( WIN32 AND PYTHONLIBS_FOUND )
      get_filename_component( PYTHON_LIBRARY_DIR ${PYTHON_INCLUDE_DIR} PATH )
      link_directories( ${PYTHON_LIBRARY_DIR}/libs )
      list( APPEND LINK_DIRS ${PYTHON_LIBRARY_DIR}/libs )
   endif()

   set( WALBERLA_BUILD_WITH_BOOST TRUE CACHE INTERNAL ""Build with Boost"" )
else( Boost_FOUND )
   if( (WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM OR WALBERLA_USE_STD_FILESYSTEM) AND (WALBERLA_USE_STD_EXPERIMENTAL_ANY OR WALBERLA_USE_STD_ANY) AND (WALBERLA_USE_STD_EXPERIMENTAL_OPTIONAL OR WALBERLA_USE_STD_OPTIONAL) AND NOT WALBERLA_BUILD_WITH_PYTHON)
      # we don't really need Boost
      set( WALBERLA_BUILD_WITH_BOOST FALSE CACHE INTERNAL ""Build with Boost"" )
   else()
      # Search again, this time with the REQUIRED option. This will give a CMAKE error and a detailed error message for the user
      find_package ( Boost ${waLBerla_REQUIRED_MIN_BOOST_VERSION} REQUIRED ${waLBerla_REQUIRED_BOOST_COMPONENTS} OPTIONAL_COMPONENTS ${waLBerla_OPTIONAL_BOOST_COMPONENTS} )
      if( (WALBERLA_USE_STD_EXPERIMENTAL_FILESYSTEM OR WALBERLA_USE_STD_FILESYSTEM) AND (WALBERLA_USE_STD_EXPERIMENTAL_ANY OR WALBERLA_USE_STD_ANY) AND (WALBERLA_USE_STD_EXPERIMENTAL_OPTIONAL OR WALBERLA_USE_STD_OPTIONAL) )
         message(WARNING ""If you set WALBERLA_BUILD_WITH_PYTHON=OFF, you can build without the Boost library."")
      endif()
   endif()
endif( Boost_FOUND )


# Check if Python3 found and look for according boost python library
if ( WALBERLA_BUILD_WITH_PYTHON AND NOT WALBERLA_CXX_COMPILER_IS_MSVC)
    SET(_boost_MULTITHREADED """")
    if (Boost_USE_MULTITHREADED OR Boost_USE_MULTITHREADED_LIBRARY)
        SET(_boost_MULTITHREADED ""-mt"")
    endif()
    if( PYTHON_LIBRARY MATCHES ""python3"" )
        find_library( BOOST_PYTHON_LIBRARY NAMES
                boost_python37${_boost_MULTITHREADED} boost_python36${_boost_MULTITHREADED} boost_python35${_boost_MULTITHREADED}
                boost_python-py37${_boost_MULTITHREADED} boost_python-py36${_boost_MULTITHREADED} boost_python-py35${_boost_MULTITHREADED}
                boost_python-py34${_boost_MULTITHREADED} boost_python-py33${_boost_MULTITHREADED}
                boost_python3${_boost_MULTITHREADED}
                boost_python${_boost_MULTITHREADED}
                PATHS ${Boost_LIBRARY_DIRS} NO_DEFAULT_PATH )
    else()
        find_library( BOOST_PYTHON_LIBRARY NAMES boost_python${_boost_MULTITHREADED}
                      PATHS ${Boost_LIBRARY_DIRS} NO_DEFAULT_PATH )
    endif()
    message(STATUS ""Using Boost Python Library ${BOOST_PYTHON_LIBRARY}"" )
    list ( APPEND SERVICE_LIBS ${BOOST_PYTHON_LIBRARY} )
endif()


############################################################################################################################





############################################################################################################################
##
## PThread is required in Linux environments by std::thread
##
############################################################################################################################

if ( NOT WIN32 )
   add_flag( CMAKE_CXX_FLAGS ""-pthread"" )
endif()



############################################################################################################################
##
## backtrace may be in a separate library
##
############################################################################################################################

if ( NOT WIN32 AND (WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL OR WALBERLA_CXX_COMPILER_IS_CLANG))
   find_package ( Backtrace QUIET )
   if ( Backtrace_FOUND )
      list ( APPEND SERVICE_LIBS ${Backtrace_LIBRARIES} )
      set ( WALBERLA_BUILD_WITH_BACKTRACE ON )
      set ( WALBERLA_BACKTRACE_HEADER ${Backtrace_HEADER} )
   endif ( Backtrace_FOUND )
endif()



############################################################################################################################
##
## MPI
##
############################################################################################################################

if ( WALBERLA_BUILD_WITH_MPI AND NOT WALBERLA_CXX_COMPILER_IS_MPI_WRAPPER )
   find_package ( MPI )

   # FindMPI does not really work under windows, because it expects linux formatted strings from the mpi compiler.
   # Nevertheless for Microsoft MPI and MPICH there are workarounds included, but not for OpenMPI.
   # Here is a workaround for windows with OpenMPI (use configure twice to see correct output).
   # The workaround bases on the elseif(try_libs) case in the interrogate_* function of FindMPI.
   # For this workaround we assume, that the compiler was found in any PATH or ENV variable
   # but FindMPI was not able to interpret the command line outputs.
   if ( MPI_CXX_COMPILER AND NOT MPI_CXX_LIBRARIES )
      if ( WIN32 )
         message ( STATUS ""Enter Workaround Routine for Windows and OpenMPI: PRESS CONFIGURE ONE MORE TIME!"" )
         string ( REGEX REPLACE ""(.*)/bin/.*"" ""\\1"" MPI_PATH ${MPI_CXX_COMPILER} )
         find_path ( MPI_C_INCLUDE_PATH mpi.h
            HINTS ${MPI_PATH}
            PATH_SUFFIXES include Inc)
         set ( MPI_CXX_INCLUDE_PATH ${MPI_C_INCLUDE_PATH} CACHE FILEPATH """" FORCE )

         set ( MPI_CXX_LIBRARIES ""MPI_CXX_LIBRARIES-NOTFOUND"" CACHE FILEPATH ""Cleared"" FORCE )
         find_library ( MPI_CXX_LIBRARIES
            NAMES         mpi++ mpicxx cxx mpi_cxx libmpi++ libmpicxx libcxx libmpi_cxx
            HINTS         ${MPI_PATH}
            PATH_SUFFIXES lib )

         if ( NOT MPI_CXX_LIBRARIES STREQUAL ""MPI_CXX_LIBRARIES-NOTFOUND"" )
            set ( MPI_CXX_FOUND ON FORCE )
         endif ( )

         set ( MPI_C_LIBRARIES ""MPI_C_LIBRARIES-NOTFOUND"" CACHE FILEPATH ""Cleared"" FORCE )
         find_library ( MPI_C_LIBRARIES
           NAMES         mpi mpich mpich2 msmpi libmpi libmpich libmpich2 libmsmpi
           HINTS         ${MPI_PATH}
           PATH_SUFFIXES lib )

         if ( NOT MPI_C_LIBRARIES STREQUAL ""MPI_C_LIBRARIES-NOTFOUND"" )
            set ( MPI_C_FOUND ON FORCE )
         endif ( )

         if ( MPI_PATH MATCHES "".*OpenMPI.*"" )
            set ( MPI_CXX_COMPILE_FLAGS ""/DOMPI_IMPORTS"" CACHE STRING """" FORCE )
            set ( MPI_C_COMPILE_FLAGS   ""/DOMPI_IMPORTS"" CACHE STRING """" FORCE )
         endif ( )
      elseif ( WALBERLA_CXX_COMPILER_IS_CRAY )
      else ( )
         message ( WARNING ""Found MPI Compiler but no Libraries -> invent a new workaround"" )
      endif ( )
   endif ( )

   if ( MPI_FOUND )
     include_directories ( SYSTEM ${MPI_CXX_INCLUDE_PATH} ${MPI_C_INCLUDE_PATH} )
     foreach( LIB ${MPI_C_LIBRARIES} ${MPI_CXX_LIBRARIES} )
         if ( LIB )
            list ( APPEND SERVICE_LIBS ${LIB} )
         endif ( )
     endforeach ( )
     add_flag ( CMAKE_CXX_FLAGS ""${MPI_CXX_COMPILE_FLAGS}"" )
     add_flag ( CMAKE_C_FLAGS   ""${MPI_C_COMPILE_FLAGS}"" )

     add_flag ( CMAKE_MODULE_LINKER_FLAGS ""${MPI_CXX_LINK_FLAGS}"" )
     add_flag ( CMAKE_EXE_LINKER_FLAGS    ""${MPI_CXX_LINK_FLAGS}"" )
     add_flag ( CMAKE_SHARED_LINKER_FLAGS ""${MPI_CXX_LINK_FLAGS}"" )
   endif ( )
endif ( )

# OpenMPI 3.0 and higher checks the number of processes against the number of CPUs
execute_process(COMMAND ${MPIEXEC} --version RESULT_VARIABLE mpi_version_result OUTPUT_VARIABLE mpi_version_output)
if (mpi_version_result EQUAL 0 AND mpi_version_output MATCHES ""\\(Open(RTE| MPI)\\) ([3-9]\\.|1[0-9])"")
    set ( MPIEXEC_PREFLAGS ""${MPIEXEC_PREFLAGS}"" ""-oversubscribe"" CACHE STRING """" FORCE)
endif()
############################################################################################################################



############################################################################################################################
##
## Qt
##
############################################################################################################################
option (WALBERLA_ENABLE_GUI ""This flag builds the graphical user interface, depends on Qt Libraries"")

if ( WALBERLA_ENABLE_GUI )

    find_package( Qt4 COMPONENTS QtCore QtGui QtOpenGL QtXml REQUIRED )
    set( OpenGL_GL_PREFERENCE LEGACY )
    find_package( OpenGL REQUIRED )

    INCLUDE( ${QT_USE_FILE} )
    list ( APPEND SERVICE_LIBS ${OPENGL_LIBRARIES} ${QT_LIBRARIES} )

    # Workaround for Qt4 moc and newer boost versions - moc cannot parse BOOST_JOIN
    # so additional defines are passed to the moc compiler that prevent the problematic header to be parsed
    set( QT_MOC_EXECUTABLE ${QT_MOC_EXECUTABLE} -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED )

endif(WALBERLA_ENABLE_GUI)

############################################################################################################################



############################################################################################################################
##
## METIS
##
############################################################################################################################

if ( WALBERLA_BUILD_WITH_METIS )
    find_package ( Metis QUIET )

    if ( METIS_FOUND )
        include_directories( ${METIS_INCLUDE_DIRS} )
        link_directories   ( ${METIS_LIBRARY_DIR}  )
        list ( APPEND SERVICE_LIBS ${METIS_LIBRARIES} )
        set  ( WALBERLA_BUILD_WITH_METIS TRUE )
    else()
        set  ( WALBERLA_BUILD_WITH_METIS OFF CACHE BOOL ""Build with metis graph partitioner"" FORCE )
    endif()
else()
    set ( METIS_FOUND OFF CACHE BOOL ""Metis found"" FORCE )
endif()


if ( WALBERLA_BUILD_WITH_PARMETIS )
   find_path(PARMETIS_INCLUDE_DIR parmetis.h
      /usr/local/include
      /usr/include
      ${PARMETIS_ROOT}/include
      $ENV{PARMETIS_ROOT}/include
   )

  find_library(PARMETIS_LIBRARY parmetis
    /usr/local/lib
    /usr/lib
    ${PARMETIS_ROOT}/lib
    $ENV{PARMETIS_ROOT}/lib
  )

  if( PARMETIS_INCLUDE_DIR AND PARMETIS_LIBRARY AND METIS_LIBRARY )
    include_directories( ${PARMETIS_INCLUDE_DIR} )
    list ( APPEND SERVICE_LIBS ${PARMETIS_LIBRARY} ${METIS_LIBRARY} )
  endif()
endif()

############################################################################################################################



############################################################################################################################
##
## FFTW3
##
############################################################################################################################

if( WALBERLA_BUILD_WITH_MPI )
   find_package( PFFT )
   find_package( FFTW3 )
   set( FFT_REQUIRED_LIBRARIES pfft fftw3_mpi fftw3 )
   if( PFFT_FOUND AND FFTW3_MPI_FOUND )
      set( WALBERLA_BUILD_WITH_FFT TRUE CACHE INTERNAL ""Build with FFT"" )
      include_directories( SYSTEM ${PFFT_INCLUDE_DIR} ${FFTW3_MPI_INCLUDE_DIR} )
      list( APPEND SERVICE_LIBS ${PFFT_LIBRARIES} ${FFTW3_LIBRARIES} ${FFTW3_MPI_LIBRARIES} )
   endif()
else()
   find_package( FFTW3 )
   set( FFT_REQUIRED_LIBRARIES fftw3 )
   if ( FFTW3_FOUND )
      set( WALBERLA_BUILD_WITH_FFT TRUE CACHE INTERNAL ""Build with FFT"" )
      include_directories( SYSTEM ${FFTW3_INCLUDE_DIR} )
      list( APPEND SERVICE_LIBS ${FFTW3_LIBRARIES} )
   endif()
endif()



############################################################################################################################
##
## OpenMesh
##
############################################################################################################################
if( (NOT DEFINED WALBERLA_BUILD_WITH_OPENMESH) OR WALBERLA_BUILD_WITH_OPENMESH )
   find_package( OpenMesh )
   if( OPENMESH_FOUND )
      set( WALBERLA_BUILD_WITH_OPENMESH ON CACHE BOOL ""Build with OpenMesh support"" )
      include_directories( SYSTEM ${OPENMESH_INCLUDE_DIRS} )
      list( APPEND SERVICE_LIBS ${OPENMESH_LIBRARIES} )
      if( WALBERLA_CXX_COMPILER_IS_MSVC )
         add_definitions(-D_USE_MATH_DEFINES )
      endif()
   else()
      set( WALBERLA_BUILD_WITH_OPENMESH OFF CACHE BOOL ""Build with OpenMesh support"" FORCE )
   endif()
endif()

############################################################################################################################
##
## DebugOptimized Build Configuration for fast execution of tests with enabled asserts
##
############################################################################################################################

set( CMAKE_C_FLAGS_DEBUGOPTIMIZED             ${CMAKE_C_FLAGS_DEBUG}             )
set( CMAKE_CXX_FLAGS_DEBUGOPTIMIZED           ${CMAKE_CXX_FLAGS_DEBUG}           )
set( CMAKE_EXE_LINKER_FLAGS_DEBUGOPTIMIZED    ${CMAKE_EXE_LINKER_FLAGS_DEBUG}    )
set( CMAKE_SHARED_LINKER_FLAGS_DEBUGOPTIMIZED ${CMAKE_SHARED_LINKER_FLAGS_DEBUG} )
set( CMAKE_MODULE_LINKER_FLAGS_DEBUGOPTIMIZED ${CMAKE_MODULE_LINKER_FLAGS_DEBUG} )

set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug DebugOptimized)

if ( WALBERLA_CXX_COMPILER_IS_MSVC )
    string(REPLACE ""/Od"" ""/O2""   CMAKE_C_FLAGS_DEBUGOPTIMIZED   ${CMAKE_C_FLAGS_DEBUGOPTIMIZED})
    string(REPLACE ""/Ob0"" ""/Ob2"" CMAKE_C_FLAGS_DEBUGOPTIMIZED   ${CMAKE_C_FLAGS_DEBUGOPTIMIZED})
    string(REPLACE ""/RTC1"" """"    CMAKE_C_FLAGS_DEBUGOPTIMIZED   ${CMAKE_C_FLAGS_DEBUGOPTIMIZED})
    string(REPLACE ""/Od"" ""/O2""   CMAKE_CXX_FLAGS_DEBUGOPTIMIZED ${CMAKE_CXX_FLAGS_DEBUGOPTIMIZED})
    string(REPLACE ""/Ob0"" ""/Ob2"" CMAKE_CXX_FLAGS_DEBUGOPTIMIZED ${CMAKE_CXX_FLAGS_DEBUGOPTIMIZED})
    string(REPLACE ""/RTC1"" """"    CMAKE_CXX_FLAGS_DEBUGOPTIMIZED ${CMAKE_CXX_FLAGS_DEBUGOPTIMIZED})
elseif( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL OR WALBERLA_CXX_COMPILER_IS_CLANG )
   set( CMAKE_C_FLAGS_DEBUGOPTIMIZED   ""${CMAKE_C_FLAGS_DEBUGOPTIMIZED} -O3"" )
   set( CMAKE_CXX_FLAGS_DEBUGOPTIMIZED ""${CMAKE_CXX_FLAGS_DEBUGOPTIMIZED} -O3"" )
endif()

set(CMAKE_C_FLAGS_DEBUGOPTIMIZED ${CMAKE_C_FLAGS_DEBUGOPTIMIZED} CACHE STRING
    ""Flags used by the compiler during DebugOptimized builds"")
set(CMAKE_CXX_FLAGS_DEBUGOPTIMIZED ${CMAKE_CXX_FLAGS_DEBUGOPTIMIZED}  CACHE STRING
    ""Flags used by the compiler during DebugOptimized builds"")
set(CMAKE_EXE_LINKER_FLAGS_DEBUGOPTIMIZED ${CMAKE_EXE_LINKER_FLAGS_DEBUGOPTIMIZED} CACHE STRING
    ""Flags used by the linker for executables during DebugOptimized builds"")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUGOPTIMIZED ${CMAKE_SHARED_LINKER_FLAGS_DEBUGOPTIMIZED} CACHE STRING
    ""Flags used by the linker for shared libraries during DebugOptimized builds"")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUGOPTIMIZED ${CMAKE_MODULE_LINKER_FLAGS_DEBUGOPTIMIZED} CACHE STRING
    ""Flags used by the linker for loadable modules during DebugOptimized builds"")

mark_as_advanced(
    CMAKE_C_FLAGS_DEBUGOPTIMIZED
    CMAKE_CXX_FLAGS_DEBUGOPTIMIZED
    CMAKE_EXE_LINKER_FLAGS_DEBUGOPTIMIZED
    CMAKE_SHARED_LINKER_FLAGS_DEBUGOPTIMIZED
    CMAKE_MODULE_LINKER_FLAGS_DEBUGOPTIMIZED
)

# This variable is only set for multi-config IDE generators like VC
if( CMAKE_CONFIGURATION_TYPES )
    list( APPEND CMAKE_CONFIGURATION_TYPES DebugOptimized )
    list( REMOVE_DUPLICATES CMAKE_CONFIGURATION_TYPES )
    set ( CMAKE_CONFIGURATION_TYPES ""${CMAKE_CONFIGURATION_TYPES}""
          CACHE STRING ""Semicolon separated list of supported types
                      [Debug|Release|MinSizeRel|RelWithDebInfo|ReleaseNoOutfiles|DebugOptimized]"" FORCE )
endif()
############################################################################################################################





############################################################################################################################
##
## OpenMP
##
############################################################################################################################

option ( WALBERLA_THREAD_SAFE_LOGGING ""Enables/Disables thread-safe logging"" ON )

if ( WALBERLA_BUILD_WITH_OPENMP )
    if ( WALBERLA_CXX_COMPILER_IS_INTEL AND ""${CMAKE_CXX_COMPILER_VERSION}"" VERSION_LESS ""16.0.3"" )
       add_flag ( CMAKE_C_FLAGS   ""-openmp"" )
       add_flag ( CMAKE_CXX_FLAGS ""-openmp"" )
    elseif ( WALBERLA_CXX_COMPILER_IS_NEC )
       add_flag ( CMAKE_C_FLAGS   ""-Popenmp"" )
       add_flag ( CMAKE_CXX_FLAGS ""-Popenmp"" )
    else()
       find_package( OpenMP )
       add_flag ( CMAKE_C_FLAGS   ""${OpenMP_C_FLAGS}"" )
       add_flag ( CMAKE_CXX_FLAGS ""${OpenMP_CXX_FLAGS}"" )
       list ( APPEND SERVICE_LIBS ${OpenMP_CXX_LIBRARIES} )
    endif()
else()
    if ( WALBERLA_CXX_COMPILER_IS_CRAY )
       add_flag ( CMAKE_C_FLAGS   ""-h noomp"" )
       add_flag ( CMAKE_CXX_FLAGS ""-h noomp"" )
    endif()
endif()
############################################################################################################################



############################################################################################################################
##
## CUDA
##
############################################################################################################################
if ( WALBERLA_BUILD_WITH_CUDA )

    get_directory_property(COMPILE_DEFINITIONS_SAVED_STATE DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} COMPILE_DEFINITIONS)
    # cleanup compile definitions for CUDA (remove generator expression and empty elements which lead to warnings)
    set(CLEANED_COMPILE_DEFINITIONS )
    foreach( element ${COMPILE_DEFINITIONS_SAVED_STATE})
        if(NOT ${element} MATCHES ""^\\$"")
            list(APPEND CLEANED_COMPILE_DEFINITIONS ${element})
        endif()
    endforeach()
    set_directory_properties(PROPERTIES COMPILE_DEFINITIONS CLEANED_COMPILE_DEFINITIONS)

    #   set ( BUILD_SHARED_LIBS                      ON )
    set ( CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE ON )

    if( NOT WALBERLA_CXX_COMPILER_IS_MSVC )
        set ( CUDA_PROPAGATE_HOST_FLAGS OFF CACHE BOOL """" )
    endif()

    if ( (NOT DEFINED CUDA_HOST_COMPILER) AND (${CMAKE_C_COMPILER} MATCHES ""ccache"") )
        string ( STRIP ""${CMAKE_C_COMPILER_ARG1}"" stripped_compiler_string )
        find_program ( CUDA_HOST_COMPILER ${stripped_compiler_string} )
    endif ()

    find_package ( CUDA REQUIRED )

    if ( CUDA_FOUND )
        include_directories ( ${CUDA_INCLUDE_DIRS} )
        list ( APPEND SERVICE_LIBS ${CUDA_LIBRARIES} )

        list( APPEND CUDA_NVCC_FLAGS ""-Wno-deprecated-gpu-targets"")

        find_library( NVTX_LIBRARY nvToolsExt PATHS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib lib64 )
        if( NVTX_LIBRARY )
            set( WALBERLA_CUDA_NVTX_AVAILABLE 1)
            list ( APPEND SERVICE_LIBS ${NVTX_LIBRARY} )
        endif()

        if ( NOT ""${CUDA_NVCC_FLAGS}"" MATCHES ""-std="" AND NOT WALBERLA_CXX_COMPILER_IS_MSVC )
            list ( APPEND CUDA_NVCC_FLAGS ""-std=c++${CMAKE_CXX_STANDARD}"" )
        endif ()

        if(CMAKE_BUILD_TYPE MATCHES Debug)
            list ( APPEND CUDA_NVCC_FLAGS ""-g -G"" )
        endif()

        if( WALBERLA_BUILD_WITH_FASTMATH )
           list ( APPEND CUDA_NVCC_FLAGS ""-use_fast_math"" )
        endif()

        # Bug with gcc5 and cuda7.5:
        #list( APPEND CUDA_NVCC_FLAGS  ""-D_MWAITXINTRIN_H_INCLUDED -D_FORCE_INLINES  -D__STRICT_ANSI__"")

        # NOTICE: exisiting cuda flags are overwritten
        #set ( CUDA_NVCC_FLAGS ""--compiler-bindir=/usr/bin/g++-4.3"" )
        #set ( CUDA_NVCC_FLAGS ""-arch sm_20"" )
    else()
        set ( WALBERLA_BUILD_WITH_CUDA FALSE )
    endif ( )

    set_directory_properties(PROPERTIES COMPILE_DEFINITIONS ""${COMPILE_DEFINITIONS_SAVED_STATE}"" )
endif ( )
############################################################################################################################



############################################################################################################################
##
##  Testing Coverage
##
############################################################################################################################
if (WALBERLA_BUILD_WITH_GCOV AND CMAKE_COMPILER_IS_GNUCXX  )
    add_flag ( CMAKE_CXX_FLAGS_DEBUG ""-fprofile-arcs -ftest-coverage"" )
    add_flag ( LD_FLAGS              ""-fprofile-arcs -ftest-coverage"" )
endif()
############################################################################################################################



############################################################################################################################
##
##  Profiling with gprof
##
############################################################################################################################

if ( WALBERLA_BUILD_WITH_GPROF )
    if ( WALBERLA_CXX_COMPILER_IS_INTEL )
        add_flag ( CMAKE_CXX_FLAGS        ""-pg"" )
        add_flag ( CMAKE_EXE_LINKER_FLAGS ""-pg"" )
    elseif ( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_CLANG )
        add_flag ( CMAKE_CXX_FLAGS        ""-pg"" )
    endif()
endif()
############################################################################################################################


############################################################################################################################
##
##  Likwid Marker API
##
############################################################################################################################


if ( WALBERLA_BUILD_WITH_LIKWID_MARKERS )
    find_library( LIKWID_LIB likwid HINTS $ENV{LIKWID_LIBDIR} $ENV{LIKWID_ROOT}/lib )
    find_path( LIKWID_INCLUDE_DIR likwid.h HINTS $ENV{LIKWID_INCDIR} $ENV{LIKWID_ROOT}/include )

    if ( LIKWID_LIB AND LIKWID_INCLUDE_DIR)
        set( LIKWID_FOUND 1)
        include_directories( ${LIKWID_INCLUDE_DIR})
        add_definitions ( ""-DLIKWID_PERFMON"" )
        list ( APPEND SERVICE_LIBS ${LIKWID_LIB} )
    else()
        message(WARNING ""likwid marker library not found. Set environment variable LIKWID_ROOT"")
        set ( WALBERLA_BUILD_WITH_LIKWID_MARKERS OFF CACHE BOOL ""Compile in markers for likwid-perfctr"" FORCE )
    endif()
endif()



############################################################################################################################
##
##  Link time optimizations
##
############################################################################################################################
if ( WALBERLA_BUILD_WITH_LTO  )

   if( WALBERLA_CXX_COMPILER_IS_INTEL )
      add_flag( CMAKE_CXX_FLAGS_RELEASE ""-ip -ipo3"" )
      add_flag( CMAKE_C_FLAGS_RELEASE   ""-ip -ipo3"" )
   endif()

   if ( CMAKE_COMPILER_IS_GNUCXX )
      add_flag ( CMAKE_C_FLAGS_RELEASE     ""-flto=3"" )
      add_flag ( CMAKE_CXX_FLAGS_RELEASE   ""-flto=3"" )
      add_flag ( CMAKE_EXE_LINKER_FLAGS    ""-fuse-linker-plugin"" )
   endif ( )

   if( WALBERLA_CXX_COMPILER_IS_MSVC )
      add_flag ( CMAKE_CXX_FLAGS_RELEASE           ""/GL""   )
      add_flag ( CMAKE_EXE_LINKER_FLAGS_RELEASE    ""/LTCG"" )
      add_flag ( CMAKE_SHARED_LINKER_FLAGS_RELEASE ""/LTCG"" )
      add_flag ( CMAKE_MODULE_LINKER_FLAGS_RELEASE ""/LTCG"" )
   endif ( )

   if( WALBERLA_CXX_COMPILER_IS_IBM )
      add_flag ( CMAKE_C_FLAGS_RELEASE     ""-qipa"" )
      add_flag ( CMAKE_CXX_FLAGS_RELEASE   ""-qipa"" )
      add_flag ( CMAKE_EXE_LINKER_FLAGS    ""-qipa"" )
   endif( )

endif ( )

############################################################################################################################
##
##  Some more compiler flags that need to happen after any try_compile (e.g. inside FindMPI)
##
############################################################################################################################

# Treat warnings as errors
if ( WARNING_ERROR )
   if( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_INTEL OR WALBERLA_CXX_COMPILER_IS_CLANG )
      add_flag ( CMAKE_CXX_FLAGS ""-pedantic-errors -Werror"" )
   elseif( WALBERLA_CXX_COMPILER_IS_MSVC )
      add_flag ( CMAKE_CXX_FLAGS ""/WX"" )
   elseif ( WALBERLA_CXX_COMPILER_IS_CRAY )
      add_flag ( CMAKE_CXX_FLAGS ""-h error_on_warning"" )
   endif()
endif ( )

############################################################################################################################
##
##  Sanitizer
##
############################################################################################################################
if ( WALBERLA_SANITIZE_ADDRESS )
    if ( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_CLANG )
        add_flag( CMAKE_CXX_FLAGS ""-fsanitize=address"")
    endif()
endif()

if ( WALBERLA_SANITIZE_UNDEFINED )
    if ( WALBERLA_CXX_COMPILER_IS_GNU OR WALBERLA_CXX_COMPILER_IS_CLANG )
        add_flag( CMAKE_CXX_FLAGS ""-fsanitize=undefined"")
    endif()
endif()

############################################################################################################################
# Documentation Generation
#
if (WALBERLA_BUILD_DOC)
  # Build documentation using Doxygen (www.doxygen.org)
  ############################################################################################################################
  find_package ( Doxygen  )
  find_package ( HTMLHelp )
  
  if ( HTML_HELP_COMPILER EQUAL """" )
     set ( HTML_HELP_FOUND ""NO"" )
  else ( )
     set ( HTML_HELP_FOUND ""YES"" )
  endif ( )
  
  if ( DOXYGEN_FOUND )
     set ( DOXYGEN_HTML_HEADER ${walberla_SOURCE_DIR}/doc/header.html )
     set ( DOXYGEN_HTML_FOOTER ${walberla_SOURCE_DIR}/doc/footer.html )
     set ( DOXYGEN_HTML_OUTPUT ""html"" )
  
     configure_file ( ${walberla_SOURCE_DIR}/doc/doxygen.in ${walberla_BINARY_DIR}/doc/doxygen.cfg @ONLY )

     add_custom_target ( doc   ${DOXYGEN_EXECUTABLE} ${walberla_BINARY_DIR}/doc/doxygen.cfg
                            COMMENT ""Generating API documentation with Doxygen"" VERBATIM )

  endif ( )
endif()

############################################################################################################################





############################################################################################################################
#
# Fix compiler bugs
#
############################################################################################################################

# The NEC SX has a few issues in its standard library headers
if( WALBERLA_CXX_COMPILER_IS_NEC )
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/math.h         ""#include_next <math.h>\n#undef fpclassify\n#undef signbit\n#undef isfinite\n#undef isinf\n#undef isnan\n#undef isnormal\n#undef isgreater\n#undef isgreaterequal\n#undef isless\n#undef islessequal\n#undef islessgreater\n#undef isunordered\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/types.h    ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/types.h\""   \n#undef uint_t\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/acl.h      ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/acl.h\""     \n#undef uint_t\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/if_ehcpl.h ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/if_ehcpl.h\""\n#undef uint_t\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/ptms.h     ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/ptms.h\""    \n#undef uint_t\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/stream.h   ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/stream.h\""  \n#undef uint_t\n"")
   file( WRITE ${walberla_BINARY_DIR}/CMakeFiles/src/sys/strsubr.h  ""#define uint_t SX_UINT_T\n#include \""/SX/usr/include/sys/strsubr.h\"" \n#undef uint_t\n"")
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/math.h         ${walberla_BINARY_DIR}/src/math.h COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/types.h    ${walberla_BINARY_DIR}/src/sys/types.h    COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/acl.h      ${walberla_BINARY_DIR}/src/sys/acl.h      COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/if_ehcpl.h ${walberla_BINARY_DIR}/src/sys/if_ehcpl.h COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/ptms.h     ${walberla_BINARY_DIR}/src/sys/ptms.h     COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/stream.h   ${walberla_BINARY_DIR}/src/sys/stream.h   COPYONLY )
   configure_file ( ${walberla_BINARY_DIR}/CMakeFiles/src/sys/strsubr.h  ${walberla_BINARY_DIR}/src/sys/strsubr.h  COPYONLY )
endif()



############################################################################################################################
#
# Subdirectories
#
############################################################################################################################

# Add binary dir for generated headers
include_directories ( ${CMAKE_CURRENT_BINARY_DIR}/src )
# All include paths are specified relative to src/ directory
include_directories ( ${CMAKE_CURRENT_SOURCE_DIR}/src )


# Generate file with compile options, and add install rule for it
configure_file ( src/waLBerlaDefinitions.in.h
                 src/waLBerlaDefinitions.h    )

install( FILES ${walberla_BINARY_DIR}/src/waLBerlaDefinitions.h DESTINATION walberla/ )

# sources
add_subdirectory ( src )

# test
if ( WALBERLA_BUILD_TESTS )
    add_subdirectory ( tests )
else()
    add_subdirectory( tests EXCLUDE_FROM_ALL )
endif()


add_subdirectory ( apps )

waLBerla_export()

############################################################################################################################

############################################################################################################################
##
## clang-tidy
##
############################################################################################################################

waLBerla_link_files_to_builddir( .clang-tidy )
add_subdirectory( utilities )
",3.1,3.1
28242,siegelaaron94,sigma-engine,False,False,False,False,False,2,C++,2019-09-02 04:28:52+00:00,2015-12-30 05:08:23+00:00,4,580,"cmake_minimum_required(VERSION 3.10)
project(sigma-core)

add_library(sigma-core STATIC
	include/sigma/AABB.hpp
	include/sigma/buddy_array_allocator.hpp
	include/sigma/config.hpp
	include/sigma/context.hpp
	include/sigma/frustum.hpp
	include/sigma/game.hpp
	include/sigma/graphics/buffer.hpp
	include/sigma/graphics/cubemap.hpp
	include/sigma/graphics/directional_light.hpp
	include/sigma/graphics/material.hpp
	include/sigma/graphics/render_queue.hpp
	include/sigma/graphics/point_light.hpp
	include/sigma/graphics/post_process_effect.hpp
	include/sigma/graphics/renderer.hpp
	include/sigma/graphics/shader.hpp
	include/sigma/graphics/shadow_block.hpp
	include/sigma/graphics/spot_light.hpp
	include/sigma/graphics/standard_block.hpp
	include/sigma/graphics/static_mesh_instance.hpp
	include/sigma/graphics/static_mesh.hpp
	include/sigma/graphics/technique.hpp
	include/sigma/graphics/texture.hpp
	include/sigma/resource/cache.hpp
	include/sigma/resource/resource.hpp
	include/sigma/trackball_controller.hpp
	include/sigma/transform.hpp
	include/sigma/util/filesystem.hpp
	include/sigma/util/glm_serialize.hpp
	include/sigma/util/hash.hpp
	include/sigma/util/numeric.hpp
	include/sigma/util/std140_conversion.hpp
	include/sigma/util/string.hpp
	include/sigma/util/type_sequence.hpp
	include/sigma/util/variadic.hpp
	include/sigma/window.hpp
	src/sigma/buddy_array_allocator.cpp
	src/sigma/context.cpp
	src/sigma/frustum.cpp
	src/sigma/game.cpp
	src/sigma/graphics/buffer.cpp
	src/sigma/graphics/material.cpp
	src/sigma/graphics/render_queue.cpp
	src/sigma/graphics/renderer.cpp
	src/sigma/graphics/shader.cpp
	src/sigma/graphics/static_mesh.cpp
	src/sigma/graphics/texture.cpp
	src/sigma/resource/cache.cpp
	src/sigma/resource/resource.cpp
	src/sigma/trackball_controller.cpp
	src/sigma/util/filesystem.cpp
	src/sigma/window.cpp
)

target_include_directories(sigma-core PUBLIC include)
target_compile_definitions(sigma-core PUBLIC -DCEREAL_FUTURE_EXPERIMENTAL -DGLM_ENABLE_EXPERIMENTAL -DGLM_FORCE_CTOR_INIT PRIVATE -DSIGMA_EXPORT)
target_link_libraries(sigma-core PUBLIC ${CMAKE_DL_LIBS} Threads::Threads cereal::cereal glm)

if(COTIRE_CMAKE_MODULE_VERSION)
	cotire(sigma-core)
endif()

if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
	target_link_libraries(sigma-core PUBLIC c++experimental)
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
	target_link_libraries(sigma-core PUBLIC stdc++fs)
endif()

add_subdirectory(test)
add_subdirectory(benchmark)
",3.10,3.1
28321,potassco,clingo,False,False,False,False,False,14,C++,2020-05-01 16:29:09+00:00,2016-05-10 12:35:00+00:00,246,1373,"cmake_minimum_required(VERSION 3.1)

file(READ ""libclingo/clingo.h"" clingoh)
string(REGEX MATCH ""#define CLINGO_VERSION \""([^\""]*)\"""" clingov ${clingoh})

project(CLINGO VERSION ""${CMAKE_MATCH_1}"" LANGUAGES C CXX)
if (POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW)
endif()
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS ""No build type selected - using 'Release'"")
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

include(GNUInstallDirs)
include(CMakeDependentOption)
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(clingo_functions)

# Enable folders in IDEs like Visual Studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(CLINGO_BUILD_WEB         ""enable web target""             OFF)
option(CLINGO_BUILD_STATIC      ""do not build shared libraries"" OFF)
option(CLINGO_BUILD_WITH_PYTHON ""enable python support""          ON)
option(CLINGO_BUILD_WITH_LUA    ""enable lua support""             ON)
option(CLINGO_BUILD_TESTS       ""build tests""                   OFF)
option(CLINGO_BUILD_EXAMPLES    ""build examples""                OFF)
option(CLINGO_BUILD_APPS        ""build applications""             ON)
option(CLINGO_MANAGE_RPATH      ""set rpath if not installed into system directory"" ON)

CMAKE_DEPENDENT_OPTION(CLINGO_REQUIRE_PYTHON   ""fail if python support not found"" OFF ""CLINGO_BUILD_WITH_PYTHON"" OFF)
CMAKE_DEPENDENT_OPTION(CLINGO_REQUIRE_LUA      ""fail if lua support not found""    OFF ""CLINGO_BUILD_WITH_LUA""    OFF)
CMAKE_DEPENDENT_OPTION(CLINGO_BUILD_SHARED     ""build clingo library shared""      ON  ""NOT CLINGO_BUILD_STATIC""  OFF)
CMAKE_DEPENDENT_OPTION(CLINGO_BUILD_PY_SHARED  ""build pyclingo library shared""    OFF ""NOT CLINGO_BUILD_STATIC""  OFF)
CMAKE_DEPENDENT_OPTION(CLINGO_BUILD_LUA_SHARED ""build luaclingo library shared""   OFF ""NOT CLINGO_BUILD_STATIC""  OFF)

option(PYCLINGO_USER_INSTALL ""install the python module in the user's site directory"" ON)
option(PYCLINGO_DYNAMIC_LOOKUP ""do not link to python library and pass linker option `-undefined link_dynamic`"" ${APPLE})
CMAKE_DEPENDENT_OPTION(PYCLINGO_USE_INSTALL_PREFIX ""install the python module under the install prefix"" OFF ""NOT PYCLINGO_USER_INSTALL"" OFF)

set(CLINGO_CLINGOPATH """" CACHE STRING ""global search directories for clingo's include statement"")
set(CLINGO_USE_LIB OFF CACHE BOOL ""advanced option to build python and lua modules against an existing libclingo"")
set(CLINGO_BUILD_REVISION """" CACHE STRING ""revision string to add to version information"")
set(CLINGO_PYTHON_VERSION """" CACHE STRING ""set this to find a specific python version"")
set(CLINGO_LUA_VERSION """" CACHE STRING ""set this to find a specific lua version"")

mark_as_advanced(CLINGO_BUILD_WEB)
mark_as_advanced(CLINGO_BUILD_STATIC)
mark_as_advanced(CLINGO_BUILD_SHARED)
mark_as_advanced(CLINGO_BUILD_PY_SHARED)
mark_as_advanced(CLINGO_BUILD_LUA_SHARED)
mark_as_advanced(CLINGO_USE_LIB)
mark_as_advanced(CLINGO_BUILD_REVISION)

# workaround to set custom ar and ranlib
if (CLINGO_CMAKE_AR)
    set(CMAKE_AR ""${CLINGO_CMAKE_AR}"")
    set(CMAKE_CXX_ARCHIVE_CREATE ""<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_C_ARCHIVE_CREATE ""<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>"")
endif()
if (CLINGO_CMAKE_RANLIB)
    set(CMAKE_RANLIB ""${CLINGO_CMAKE_RANLIB}"")
    set(CMAKE_CXX_ARCHIVE_FINISH ""<CMAKE_RANLIB> <TARGET>"")
    set(CMAKE_C_ARCHIVE_FINISH ""<CMAKE_RANLIB> <TARGET>"")
endif()

if (CLINGO_MANAGE_RPATH)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_FULL_LIBDIR}"" isSystemDir)
    if (""${isSystemDir}"" STREQUAL ""-1"")
        set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_FULL_LIBDIR}"")
    endif()
endif()

if (CLINGO_BUILD_WEB)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES)
endif()

if (NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()
if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_IMPORT_LIBRARY_PREFIX)
    set(CMAKE_IMPORT_LIBRARY_PREFIX import_)
endif()

# NOTE: searching for the interpreter first increases the chance
#       that searching for the python libraries finds the matching libraries for the default python interpreter
#       python is also used to run the tests

if(CMAKE_VERSION VERSION_GREATER ""3.15.0"" OR CMAKE_VERSION VERSION_EQUAL ""3.15.0"")
    if (POLICY CMP0094)
        cmake_policy(SET CMP0094 NEW)
    endif()
    set(_args Interpreter)
    if (CLINGO_BUILD_WITH_PYTHON)
        set(_args ${_args} Development)
        if (CLINGO_REQUIRE_PYTHON)
            set(_args ${_args} REQUIRED)
        endif()
    endif()
    find_package(Python ${CLINGO_PYTHON_VERSION} COMPONENTS ${_args})
else()
    find_package(PythonInterp)
    set(Python_EXECUTABLE ""${PYTHON_EXECUTABLE}"")
    if (CLINGO_BUILD_WITH_PYTHON)
        if (CLINGO_REQUIRE_PYTHON)
            find_package(PythonLibs ${CLINGO_PYTHON_VERSION} REQUIRED)
        else()
            find_package(PythonLibs ${CLINGO_PYTHON_VERSION})
        endif()
        if(PYTHONLIBS_FOUND)
            add_library(Python::Python INTERFACE IMPORTED)
            add_library(Python::Module INTERFACE IMPORTED)
            set(Python_Development_FOUND ON)
            set(Python_INCLUDE_DIRS ""${PYTHON_INCLUDE_DIRS}"")
            set_property(TARGET Python::Python PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${PYTHON_INCLUDE_DIRS}"")
            set_property(TARGET Python::Module PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${PYTHON_INCLUDE_DIRS}"")
            set_property(TARGET Python::Python PROPERTY INTERFACE_LINK_LIBRARIES ""${PYTHON_LIBRARIES}"")
            if (NOT PYCLINGO_DYNAMIC_LOOKUP)
                set_property(TARGET Python::Module PROPERTY INTERFACE_LINK_LIBRARIES ""${PYTHON_LIBRARIES}"")
            endif()
        endif()
    endif()
endif()
if (CLINGO_BUILD_WITH_LUA)
    if (CLINGO_REQUIRE_LUA)
        find_package(Lua ${CLINGO_LUA_VERSION} REQUIRED)
    else()
        find_package(Lua ${CLINGO_LUA_VERSION})
    endif()
    if(LUA_FOUND)
        add_library(Lua::Lua INTERFACE IMPORTED)
        set_property(TARGET Lua::Lua PROPERTY INTERFACE_LINK_LIBRARIES ""${LUA_LIBRARIES}"")
        set_property(TARGET Lua::Lua PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${LUA_INCLUDE_DIR}"")
    endif()
endif()
find_package(BISON ""2.5"")
find_package(RE2C ""0.13"")

if (POLICY CMP0063 AND (CLINGO_BUILD_SHARED OR Python_Development_FOUND OR LUA_FOUND))
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
    set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

enable_testing()

# NOTE: assumes that submodule has been initialized
set(CLASP_BUILD_APP ${CLINGO_BUILD_APPS} CACHE BOOL """")
if (CLINGO_USE_LIB)
    set(clingo_library_targets)
    add_library(libclingo INTERFACE IMPORTED)
    set_property(TARGET libclingo PROPERTY INTERFACE_INCLUDE_DIRECTORIES ""${CLINGO_SOURCE_DIR}/libclingo"")
    set_property(TARGET libclingo PROPERTY INTERFACE_LINK_LIBRARIES ""clingo"")
else()
    set(clingo_library_targets libclingo libgringo libpotassco libclasp libreify)
    add_subdirectory(clasp)
    add_subdirectory(libreify)
    add_subdirectory(libgringo)
    add_subdirectory(libclingo)
endif()
if (Python_Development_FOUND)
    add_subdirectory(libpyclingo)
    list(APPEND clingo_library_targets libpyclingo)
    list(APPEND clingo_library_targets libpyclingom)
else()
    add_library(libpyclingo INTERFACE IMPORTED)
    add_library(libpyclingom INTERFACE IMPORTED)
endif()
if (LUA_FOUND)
    add_subdirectory(libluaclingo)
    list(APPEND clingo_library_targets libluaclingo)
else()
    add_library(libluaclingo INTERFACE IMPORTED)
endif()
if (CLINGO_BUILD_APPS AND NOT CLINGO_USE_LIB)
    add_subdirectory(app/reify)
    add_subdirectory(app/gringo)
    add_subdirectory(app/clingo)
endif()
if (CLINGO_BUILD_EXAMPLES)
    add_subdirectory(examples/c)
    add_subdirectory(examples/cc)
endif()
if (NOT CLINGO_BUILD_STATIC AND Python_Development_FOUND)
    add_subdirectory(app/pyclingo)
endif()
if (NOT CLINGO_BUILD_STATIC AND LUA_FOUND)
    add_subdirectory(app/luaclingo)
endif()
if (CLINGO_BUILD_WEB)
    add_subdirectory(app/web)
endif()
if (NOT CLINGO_BUILD_STATIC AND (CLINGO_BUILD_SHARED OR Python_Development_FOUND OR LUA_FOUND))
    foreach(target ${clingo_library_targets})
        set_target_properties(${target} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    endforeach()
endif()

",3.1,3.1
28365,gcp,leela-zero,False,False,False,False,False,59,C++,2020-05-17 20:47:08+00:00,2017-10-24 18:19:43+00:00,4003,835,"# This file is part of Leela Zero.
# Copyright (C) 2017 Marco Calignano
# Copyright (C) 2017-2019 Gian-Carlo Pascutto and contributors
# Leela Zero is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# Leela Zero is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with Leela Zero.  If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.1)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
include(GNUInstallDirs)

project(leelaz)
add_subdirectory(gtest EXCLUDE_FROM_ALL) # We don't want to install gtest, exclude it from `all`

# Required Packages
set(Boost_MIN_VERSION ""1.58.0"")
set(Boost_USE_MULTITHREADED ON)
find_package(Boost 1.58.0 REQUIRED program_options filesystem)
find_package(Threads REQUIRED)
find_package(ZLIB REQUIRED)
find_package(OpenCL REQUIRED)
# We need OpenBLAS for now, because we make some specific
# calls. Ideally we'd use OpenBLAS is possible and fall back to
# not doing those calls if it's not present.
if(NOT APPLE)
  set(BLA_VENDOR OpenBLAS)
endif()
if(USE_BLAS)
  message(STATUS ""Looking for system BLAS/OpenBLAS library."")
  find_package(BLAS REQUIRED)
  find_path(BLAS_INCLUDE_DIRS openblas_config.h
    /usr/include
    /usr/local/include
    /usr/include/openblas
    /opt/OpenBLAS/include
    /usr/include/x86_64-linux-gnu
    $ENV{BLAS_HOME}/include)
    add_definitions(-DUSE_BLAS)
else()
message(STATUS ""Using built-in matrix library."")
endif()
find_package(Qt5Core)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED on)

# See if we can set optimization flags as expected.
if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
  set(GccSpecificFlags 1)
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""AppleClang"")
  set(GccSpecificFlags 1)
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
  set(GccSpecificFlags 1)
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Intel"")
  set(GccSpecificFlags 0)
elseif(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
  set(GccSpecificFlags 0)
endif()

if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RELEASE)
endif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

if(GccSpecificFlags)
  set(GCC_COMPILE_FLAGS ""-Wall -Wextra -ffast-math -flto -march=native"")
  set(GCC_DISABLED_WARNING_COMPILE_FLAGS ""-Wno-ignored-attributes -Wno-maybe-uninitialized \
      -Wno-mismatched-tags"")
  set(GCC_FLAGS ""${GCC_COMPILE_FLAGS} ${GCC_DISABLED_WARNING_COMPILE_FLAGS}"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${GCC_FLAGS} -g -Og"")
  set(CMAKE_CXX_FLAGS_RELEASE ""${GCC_FLAGS} -g -O3 -DNDEBUG"")
  set(CMAKE_EXE_LINKER_FLAGS ""-flto -g"")
endif(GccSpecificFlags)

if(USE_CPU_ONLY)
  add_definitions(-DUSE_CPU_ONLY)
endif()
if(USE_HALF)
  add_definitions(-DUSE_HALF)
endif()

set(IncludePath ""${CMAKE_CURRENT_SOURCE_DIR}/src"" ""${CMAKE_CURRENT_SOURCE_DIR}/src/Eigen"")
set(SrcPath ""${CMAKE_CURRENT_SOURCE_DIR}/src"")

include_directories(${IncludePath})
include_directories(${Boost_INCLUDE_DIRS})
include_directories(${OpenCL_INCLUDE_DIRS})
include_directories(${ZLIB_INCLUDE_DIRS})

if((UNIX AND NOT APPLE) OR WIN32)
    include_directories(${BLAS_INCLUDE_DIRS})
endif()
if(APPLE)
    include_directories(""/System/Library/Frameworks/Accelerate.framework/Versions/Current/Headers"")
endif()

set(leelaz_MAIN ""${SrcPath}/Leela.cpp"")
file(GLOB leelaz_SRC ""${SrcPath}/*.cpp"")
list(REMOVE_ITEM leelaz_SRC ${leelaz_MAIN})

# Reuse for leelaz and gtest
add_library(objs OBJECT ${leelaz_SRC})

add_executable(leelaz $<TARGET_OBJECTS:objs> ${leelaz_MAIN})

target_link_libraries(leelaz ${Boost_LIBRARIES})
target_link_libraries(leelaz ${BLAS_LIBRARIES})
target_link_libraries(leelaz ${OpenCL_LIBRARIES})
target_link_libraries(leelaz ${ZLIB_LIBRARIES})
target_link_libraries(leelaz ${CMAKE_THREAD_LIBS_INIT})
install(TARGETS leelaz DESTINATION ${CMAKE_INSTALL_BINDIR})

if(Qt5Core_FOUND)
    if(NOT Qt5Core_VERSION VERSION_LESS ""5.3.0"")
        add_subdirectory(autogtp)
        add_subdirectory(validation)
    else()
        message(WARNING ""Qt ${Qt5Core_VERSION} is found but does not met required version 5.3.0, \
        build target for `autogtp` and `validation` is disabled."")
    endif()
else()
    message(WARNING ""Qt is not found, build for `autogtp` and `validation` is disabled"")
endif()

# Google Test below
file(GLOB tests_SRC ""${SrcPath}/tests/*.cpp"")

add_executable(tests ${tests_SRC} $<TARGET_OBJECTS:objs>)
if(GccSpecificFlags)
  target_compile_options(tests PRIVATE ""-Wno-unused-variable"")
endif()

target_link_libraries(tests ${Boost_LIBRARIES})
target_link_libraries(tests ${BLAS_LIBRARIES})
target_link_libraries(tests ${OpenCL_LIBRARIES})
target_link_libraries(tests ${ZLIB_LIBRARIES})
target_link_libraries(tests gtest_main ${CMAKE_THREAD_LIBS_INIT})

include(GetGitRevisionDescription)
git_describe(VERSION --tags)
string(REGEX REPLACE ""^v([0-9]+)\\..*"" ""\\1"" MAJOR_VERSION ""${VERSION}"")
string(REGEX REPLACE ""^v[0-9]+\\.([0-9]+).*"" ""\\1"" MINOR_VERSION ""${VERSION}"")

SET(CPACK_GENERATOR ""DEB"")
SET(CPACK_DEBIAN_PACKAGE_NAME ""leelaz"")
SET(CPACK_DEBIAN_PACKAGE_VERSION ""${MAJOR_VERSION}.${MINOR_VERSION}"")
SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER ""Gian-Carlo Pascutto https://github.com/gcp/leela-zero"")
SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION ""Go engine with no human-provided knowledge, modeled after the AlphaGo Zero paper."")
SET(CPACK_DEBIAN_PACKAGE_PRIORITY ""optional"")
SET(CPACK_DEBIAN_PACKAGE_SECTION ""games"")
SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
SET(CPACK_PACKAGE_FILE_NAME ""${CMAKE_PROJECT_NAME}-${MAJOR_VERSION}.${MINOR_VERSION}"")

INCLUDE(CPack)
",3.1,3.1
28460,Stazed,rakarrack,False,False,False,False,False,3,C++,2020-05-03 00:10:14+00:00,2017-07-25 00:36:28+00:00,5,2212,"#CMake file for Rakarrack & LV2

cmake_minimum_required(VERSION 3.1)

set (PACKAGE_VERSION ""0.7.1"")

set (CMAKE_SKIP_RULE_DEPENDENCY OFF)

add_definitions (-D'VERSION=""${PACKAGE_VERSION}""')
add_definitions(-D'WEBSITE=""rakarrack.sf.net""')
add_definitions(-D'PACKAGE=""rakarrack""')
add_definitions(-D'DATADIR=""${CMAKE_INSTALL_PREFIX}/share/rakarrack""')
add_definitions(-D'HELPDIR=""${CMAKE_INSTALL_PREFIX}/share/doc/rakarrack""')

include (CheckCSourceCompiles)
include(CheckCXXCompilerFlag)

check_cxx_compiler_flag(""-msse2"" SUPPORT_SSE)
check_cxx_compiler_flag(""-ftree-vectorize"" SUPPORT_VECTOR)
check_cxx_compiler_flag(""-maltivec"" SUPPORT_ALTIVEC)

option (BuildRakarrack ""Build rakarrack"" ON)
option (BuildLV2Plugins ""Build rakarack lv2 plugins (rkrlv2)"" ON)
option (BuildCarlaPresets ""Build Carla presets for lv2 from default banks"" OFF)
option (BuildForDebug ""Include gdb debugging support"" OFF)
option (EnableOptimizations ""Enable optimizations"" ON)
option (EnableSSE ""Enable SSE (default=automatic check)"" ON)
option (EnableSSE2 ""Enable SSE2 (default=automatic check)"" ON)
option (EnableVectorization ""Enable vectorize"" ON)
option (EnableAltivec ""Enable altivec (default=automatic check)"" ON)


set(CMAKE_BUILD_TYPE ""Release"")

set (BuildOptions_SSE
    ""-msse -mfpmath=sse""
    CACHE STRING ""SSE compiler options""
)

set (BuildOptions_SSE2
    ""-msse -msse2 -mfpmath=sse""
    CACHE STRING ""SSE2 compiler options""
)

set(BuildOptions_Vectorization
    ""-ftree-vectorize -fvect-cost-model""
    CACHE STRING ""Vectorization compiler options""
)

set(BuildOptions_Altivec
    ""-maltivec""
    CACHE STRING ""Altivec compiler options""
)

set (BuildOptionsBasic
    ""-std=c++11 -Wno-unused-parameter -O3 -ffast-math -pipe -fsigned-char""
    CACHE STRING ""basic X86 complier options""
)

set (BuildOptionsDebug
    ""-std=c++11 -O0 -g3 -ggdb -Wall -Wextra -Wpointer-arith""
    CACHE STRING ""Debug build flags""
)


# Check for jack session availability
check_c_source_compiles (
    ""#include <jack/session.h>
    int main(int argc, char **argv)
    {
        jack_session_event_type_t x = JackSessionSave;
        return 0;
    }"" HasJackSession
)

if (HasJackSession)
    option (EnableJackSessionSupport ""Include Jack Session Support"" ON)
else (HasJackSession)
    set (EnableJackSessionSupport OFF)
endif (HasJackSession)

find_package (PkgConfig REQUIRED)

#dependencies
find_package (FLTK REQUIRED)
find_package (ALSA REQUIRED alsa>=1.0.17)
find_package(X11 REQUIRED)
find_package(Freetype REQUIRED)
find_package(ZLIB REQUIRED)
find_package(Threads REQUIRED)
if(THREADS_HAVE_PTHREAD_ARG)
  set_property(TARGET rakarrack PROPERTY COMPILE_OPTIONS ""-pthread"")
  set_property(TARGET rakarrack PROPERTY INTERFACE_COMPILE_OPTIONS ""-pthread"")
endif()

pkg_check_modules (JACK REQUIRED jack>=0.115.6)
pkg_check_modules (FONTCONFIG REQUIRED fontconfig>=0.22)
pkg_check_modules (FFTW3 REQUIRED fftw3>=0.22 fftw3f>=0.22)
pkg_check_modules(SNDFILE REQUIRED sndfile)
pkg_check_modules(SAMPLERATE REQUIRED samplerate>=0.1.5)
pkg_check_modules(XFT REQUIRED xft)
pkg_check_modules(XRENDER REQUIRED xrender)
pkg_check_modules(XPM REQUIRED xpm)

find_program(ACONNECT aconnect)
if (ACONNECT)
    message (STATUS ""Found aconnect in ${ACONNECT}"")
else (ACONNECT)
    message (FATAL_ERROR ""Aconnect required but not found"")
endif (ACONNECT)

find_library (LIBRT rt)
if (LIBRT)
    message(STATUS ""Found rt in ${LIBRT}"")
else (LIBRT)
    message (FATAL_ERROR ""rt required but not found"")
endif (LIBRT)

find_library (LIBDL dl)
if (LIBDL)
    message(STATUS ""Found dl in ${LIBDL}"")
else (LIBDL)
    message(FATAL_ERROR ""dl required but not found"")
endif (LIBDL)

# uninstall target
if(NOT TARGET uninstall)
    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
        IMMEDIATE @ONLY)

    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif()

mark_as_advanced (FONTCONFIG_LIBRARIES)
mark_as_advanced (CMAKE_BUILD_TYPE)
mark_as_advanced (CMAKE_INSTALL_PREFIX)
mark_as_advanced (ACONNECT)
mark_as_advanced (FLTK_DIR)
mark_as_advanced (FLTK_MATH_LIBRARY)
mark_as_advanced (LIBDL)
mark_as_advanced (LIBRT)

if(BuildRakarrack)
    install(FILES COPYING AUTHORS ChangeLog NEWS README PACKAGERS.README
        DESTINATION share/doc/rakarrack)
endif(BuildRakarrack)
#TODO move from /data to main
#install(FILES rakarrack.desktop
#    DESTINATION share/applications)

if (BuildForDebug)
    set (CMAKE_BUILD_TYPE ""Debug"")
    set (CMAKE_CXX_FLAGS_DEBUG ${BuildOptionsDebug})
else (BuildForDebug)
    set (CMAKE_BUILD_TYPE ""Release"")

    set (CMAKE_CXX_FLAGS_RELEASE ${BuildOptionsBasic})

    if(EnableOptimizations)
        if (SUPPORT_SSE)
            if(EnableSSE)
                if(EnableSSE2)
                    set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} ${BuildOptions_SSE2}"")
                    set (USE_SSE2 ""${SUPPORT_SSE}"")
                    set (USE_SSE ""${SUPPORT_SSE}"") #uses both
                else(EnableSSE2)
                    set (USE_SSE ""${SUPPORT_SSE}"")
                    set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} ${BuildOptions_SSE}"")
                endif(EnableSSE2)
            endif(EnableSSE)
        endif (SUPPORT_SSE)

        if (SUPPORT_VECTOR)
            if(EnableVectorization)
                set (USE_VECTOR ""${SUPPORT_VECTOR}"")
                set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} ${BuildOptions_Vectorization}"")
            endif(EnableVectorization)
        endif(SUPPORT_VECTOR)

        if (SUPPORT_ALTIVEC)
            if(EnableAltivec)
                set (USE_ALTIVEC ""${SUPPORT_ALTIVEC}"")
                set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} $[BuildOptions_Altivec}"")
            endif(EnableAltivec)
        endif (SUPPORT_ALTIVEC)
    else(EnableOptimizations)
        set (USE_SSE2 """")
        set (USE_SSE """")
        set (USE_VECTOR """")
        set (USE_ALTIVEC """")
    endif(EnableOptimizations)
endif (BuildForDebug)

if(BuildRakarrack)
    add_subdirectory(src)
    add_subdirectory(man)
    add_subdirectory(data)
    add_subdirectory(icons)
    add_subdirectory(doc)
    add_subdirectory(extra)
endif (BuildRakarrack)

if (BuildLV2Plugins)
    pkg_check_modules(LV2 REQUIRED lv2>=1.0.0)
    if (LV2_FOUND)
        if (EXISTS $ENV{LV2_PATH})
            set(LV2_INSTALL_DIR $ENV{LV2_PATH} CACHE PATH
            ""Specifies where the LV2 libraries should be installed"")
        else()
            set(LV2_INSTALL_DIR lib/lv2/rkr.lv2 CACHE PATH
            ""Specifies where the LV2 libraries should be installed"")
        endif()

        if(BuildCarlaPresets)
            message (STATUS ""Building Carla presets..."")
            execute_process(COMMAND ./convertbank.py ${CMAKE_INSTALL_PREFIX}/${LV2_INSTALL_DIR} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/lv2)
        endif(BuildCarlaPresets)

        #rename these files so they are easier to use for plugins
        SET( RVB x;Chamber;Concrete_Stairwell;Hall;Med_Hall;Large_Room;Large_Hall;Guitar_Ambience;Studio;Twilight;Santa_Lucia )
        SET( DLY x;SwingPong;Short_Delays;Flange_plus_Echo;Comb;EchoFlange;Filtered_Echo;Notch-Wah;Multi-Chorus;PingPong;90-Shifter;Basic_LR_Delay )
        SET( WAV x;Marshall_JCM200;Fender_Superchamp;Mesa_Boogie;Mesa_Boogie-2;Marshall_Plexi;Bassman;JCM2000;Ampeg;Marshall-2 )

        foreach(INDX RANGE 1 9)
            list(GET RVB ${INDX} NEWNAME)
            configure_file(data/${INDX}.rvb lv2data/${NEWNAME}.rvb COPYONLY)
            list(GET DLY ${INDX} NEWNAME)
            configure_file(data/${INDX}.dly lv2data/${NEWNAME}.dly COPYONLY)
            list(GET WAV ${INDX} NEWNAME)
            configure_file(data/${INDX}.wav lv2data/${NEWNAME}.wav COPYONLY)
        endforeach(INDX)
        # 2 more dly file 
        list(GET DLY 10 NEWNAME)
        configure_file(data/11.dly lv2data/${NEWNAME}.dly COPYONLY)
        list(GET DLY 11 NEWNAME)
        configure_file(data/11.dly lv2data/${NEWNAME}.dly COPYONLY)

        # 1 more rvb file
        list(GET RVB 10 NEWNAME)
        configure_file(data/10.rvb lv2data/${NEWNAME}.rvb COPYONLY)

        add_subdirectory(lv2)
    endif (LV2_FOUND)
else (BuildLV2Plugins)
    set (BuildCarlaPresets OFF)
endif (BuildLV2Plugins)


##Summarize The Full Configuration
message(STATUS)
message(STATUS ""========================================================="")
message(STATUS ""Build Configuration for Rakarrack-${PACKAGE_VERSION} for ${CMAKE_SYSTEM_NAME}"")
message(STATUS ""========================================================="")
message(STATUS)


macro(package_status foundvar pkg)
    if(${foundvar})
        message(STATUS ""${pkg} Yes"")
    else()
        message(STATUS ""${pkg} No"")
    endif()
endmacro()

message (STATUS                    ""___________________ Optimizations________________________""  )
package_status(USE_VECTOR          ""Vectorization. . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(USE_ALTIVEC         ""Use altiveck . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(USE_SSE             ""Use sse. . . . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(USE_SSE2            ""Use sse2 . . . . . . . . . . . . . . . . . . . . . . . .:""  )

message (STATUS)
message (STATUS                    ""______________________Library____________________________""  )
package_status(PKG_CONFIG_FOUND    ""PkgConfig. . . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(FLTK_FOUND          ""FLTK toolkit . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(ALSA_FOUND          ""ALSA MIDI Sequencer support. . . . . . . . . . . . . . .:""  )
package_status(X11_FOUND           ""X11 support. . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(Freetype_FOUND      ""Freetype support . . . . . . . . . . . . . . . . . . . .:""  )
package_status(ZLIB_FOUND          ""Zlib support . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(Threads_FOUND       ""pthread support (libpthread) . . . . . . . . . . . . . .:""  )
package_status(JACK_FOUND          ""JACK Audio Connection Kit library. . . . . . . . . . . .:""  )
package_status(FONTCONFIG_FOUND    ""Fontconfig support . . . . . . . . . . . . . . . . . . .:""  )
package_status(FFTW3_FOUND         ""Fast Fourier Transform (fftw3) . . . . . . . . . . . . .:""  )
package_status(SNDFILE_FOUND       ""General audio file (libsndfile). . . . . . . . . . . . .:""  )
package_status(SAMPLERATE_FOUND    ""Samplerate conversion (libsamplerate). . . . . . . . . .:""  )
package_status(XFT_FOUND           ""Xft support. . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(XRENDER_FOUND       ""Xrender support. . . . . . . . . . . . . . . . . . . . .:""  )
package_status(XPM_FOUND           ""Xpm support (libxpm) . . . . . . . . . . . . . . . . . .:""  )

if(BuildLV2Plugins)
    package_status(LV2_FOUND           ""LV2 support. . . . . . . . . . . . . . . . . . . . . . .:""  )
endif(BuildLV2Plugins)

message (STATUS)
message (STATUS                    ""____________________ User Options________________________""  )
package_status(EnableOptimizations ""Use optimizations. . . . . . . . . . . . . . . . . . . .:""  )
package_status(EnableVectorization ""Vectorization. . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(EnableAltivec       ""Use altiveck . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(EnableSSE           ""Use sse. . . . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(EnableSSE2          ""Use sse2 . . . . . . . . . . . . . . . . . . . . . . . .:""  )
package_status(BuildRakarrack      ""Build Rakarrack. . . . . . . . . . . . . . . . . . . . .:""  )
package_status(BuildLV2Plugins     ""Build LV2s (rkr.lv2) . . . . . . . . . . . . . . . . . .:""  )
package_status(BuildCarlaPresets   ""Build Carla lv2 presets. . . . . . . . . . . . . . . . .:""  )
package_status(BuildForDebug       ""Build for debug. . . . . . . . . . . . . . . . . . . . .:""  )
package_status(EnableJackSessionSupport ""JACK Session support . . . . . . . . . . . . . . . . . .:""  )

message (STATUS)
message (STATUS)
message (STATUS ""Building for ${CMAKE_BUILD_TYPE}, flags: ${CMAKE_CXX_FLAGS_RELEASE}"")",3.1,3.1
28506,naihe2010,apvlv,False,False,False,False,False,10,C++,2020-03-12 08:30:23+00:00,2011-06-07 08:55:09+00:00,175,412,"CMAKE_MINIMUM_REQUIRED (VERSION 3.1)
SET (CMAKE_CXX_STANDARD 11)

PROJECT (apvlv)

SET (PROJECT_MAJOR      ""0"")
SET (PROJECT_MINOR      ""2"")
SET (PROJECT_PATCH      ""0"")
FIND_PACKAGE (Git)
IF (GIT_FOUND)
  EXEC_PROGRAM (${GIT_EXECUTABLE}
    ${CMAKE_SOURCE_DIR}
    ARGS ""log -1 --format='%h'""
    OUTPUT_VARIABLE VERSION_HASH
    RETURN_VALUE RETURN)

  IF (RETURN EQUAL 0)
    MESSAGE (STATUS ""Configure git: ${VERSION_HASH}"")
    SET (PROJECT_PATCH ${VERSION_HASH})
  ENDIF (RETURN EQUAL 0)
ENDIF (GIT_FOUND)

SET (PACKAGE_VERSION ""${PROJECT_MAJOR}.${PROJECT_MINOR}.${PROJECT_PATCH}"")

IF (WIN32)
  ADD_DEFINITIONS (-DDOCDIR=""."")
ELSE (WIN32)
  SET (SYSCONFDIR
    ""/etc""
    CACHE PATH
    ""Directory for system configuration of apvlv [/etc]""
    )
  ADD_DEFINITIONS (-DSYSCONFDIR=""${SYSCONFDIR}"")

  SET (DOCDIR
    ""${CMAKE_INSTALL_PREFIX}/share/doc/apvlv""
    CACHE PATH
    ""Directory for documentations of apvlv [PREFIX/share/doc/apvlv]""
    )
  ADD_DEFINITIONS (-DDOCDIR=""${DOCDIR}"")

  SET (LIBDIR
    ""${CMAKE_INSTALL_PREFIX}/lib/apvlv""
    CACHE PATH
    ""Directory for lib of apvlv [PREFIX/lib/apvlv]""
    )
  ADD_DEFINITIONS (-DLIBDIR=""${LIBDIR}"")

  SET (PIXMAPDIR
    ""${CMAKE_INSTALL_PREFIX}/share/pixmaps/apvlv""
    CACHE PATH
    ""Directory for pixmaps of apvlv [PREFIX/share/pixmaps/apvlv]""
    )
  ADD_DEFINITIONS (-DPIXMAPDIR=""${PIXMAPDIR}"")

  SET (MANDIR
    ""${CMAKE_INSTALL_PREFIX}/share/man""
    CACHE PATH
    ""Directory for man page of apvlv [PREFIX/share/man]""
    )

  SET (APPLICATIONSDIR
    ""${CMAKE_INSTALL_PREFIX}/share/applications""
    CACHE PATH
    ""Directory for desktop file of apvlv [PREFIX/share/applications]""
    )
ENDIF (WIN32)

ADD_DEFINITIONS (-DPACKAGE_NAME=""apvlv""
  -DPACKAGE_VERSION=""${PACKAGE_VERSION}""
  -DPACKAGE_BUGREPORT=""Alf <naihe2010@126.com>""
  -DRELEASE=""rel""
  )

ADD_SUBDIRECTORY (src)

IF (WIN32)
  INSTALL (FILES apvlvrc.example DESTINATION "".""
    RENAME _apvlvrc)
  INSTALL (FILES apvlvrc.example Startup.pdf main_menubar.glade DESTINATION ""."")
  INSTALL (DIRECTORY icons DESTINATION ""."")
  INSTALL (DIRECTORY ${CMAKE_HOME_DIRECTORY}/win32/poppler-data DESTINATION ""."")
ELSE (WIN32)
  INSTALL (FILES apvlvrc.example DESTINATION ${SYSCONFDIR}
    RENAME apvlvrc)
  INSTALL (FILES apvlvrc.example Startup.pdf Startup.tex main_menubar.glade DESTINATION ${DOCDIR})
  INSTALL (DIRECTORY icons DESTINATION ${DOCDIR})
  INSTALL (FILES apvlv.1 DESTINATION ${MANDIR}/man1)
  INSTALL (FILES apvlv.desktop DESTINATION ${APPLICATIONSDIR})
ENDIF (WIN32)

SET (CPACK_PACKAGE_VENDOR ""Alf"")
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY ""apvlv - Alf's PDF/DJVU/EPUB Viewer like Vim"")
SET (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR})
SET (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR})
SET (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATCH})

IF (UNIX)
  SET (CPACK_SET_DESTDIR ON)
  SET (CPACK_PACKAGE_CONTACT ""Alf <naihe2010@126.com>"")
  SET (CPACK_GENERATOR DEB)
  SET (CPACK_RPM_PACKAGE_REQUIRES ""gtk2"")
  SET (CPACK_DEBIAN_PACKAGE_DEPENDS
    ""libpoppler-glib8 (>= 0.8.7-4), poppler-data (>= 0.2.0-2)"")

  SET (CPACK_SOURCE_GENERATOR TGZ)
  SET (CPACK_SOURCE_IGNORE_FILES
    ${CMAKE_BINARY_DIR}
    "".git""
    "".gitignore""
    ""win32""
    ""~$""
    )
ELSE (UNIX)
  SET (CPACK_GENERATOR NSIS)
  SET (CPACK_NSIS_CONTACT ""Alf <naihe2010@126.com>"")
  SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""CreateShortCut '\$DESKTOP\\\\apvlv.lnk' '\$INSTDIR\\\\apvlv.exe'"")
  SET (CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ""Delete '\$DESKTOP\\\\gsftc.lnk'"")
ENDIF (UNIX)

INCLUDE(CPack)
",3.1,3.1
28533,madeso,euphoria,False,False,False,False,False,2,C++,2020-05-05 15:32:28+00:00,2013-05-31 20:44:05+00:00,11,2500,"cmake_minimum_required(VERSION 3.1.0)
set_property(GLOBAL PROPERTY USE_FOLDERS OFF)
project(euphoria)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(BUILD_ENTITY_DEBUG_COMPONENT ""when converting components, (debug) assert of bad casts"" OFF)
set(BUILD_TYPEINFO_IMPL ""rtti"" CACHE STRING ""rtti, ctti, custom_hashed, custom_rt"")
set(EXTRA_FLAGS """" CACHE STRING ""extra flags to both compile and link"")

set(OpenGL_GL_PREFERENCE ""GLVND"")

set(BUILD_TYPEINFO_IMPL_RTTI FALSE)
set(BUILD_TYPEINFO_IMPL_CTTI FALSE)
set(BUILD_TYPEINFO_IMPL_CUSTOM_HASHED FALSE)
set(BUILD_TYPEINFO_IMPL_CUSTOM_RT FALSE)

message(STATUS ""BUILD_TYPEINFO_IMPL: ${BUILD_TYPEINFO_IMPL}"")
if(BUILD_TYPEINFO_IMPL STREQUAL ""rtti"")
    set(BUILD_TYPEINFO_IMPL_RTTI TRUE)
elseif(BUILD_TYPEINFO_IMPL STREQUAL ""ctti"")
    set(BUILD_TYPEINFO_IMPL_CTTI TRUE)
elseif(BUILD_TYPEINFO_IMPL STREQUAL ""custom_hashed"")
    set(BUILD_TYPEINFO_IMPL_CUSTOM_HASHED TRUE)
elseif(BUILD_TYPEINFO_IMPL STREQUAL ""custom_rt"")
    set(BUILD_TYPEINFO_IMPL_CUSTOM_RT TRUE)
else()
    message(STATUS ""Invalid build status: ${BUILD_TYPEINFO_IMPL}"")
endif()


SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${EXTRA_FLAGS}"")
SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_FLAGS}"")


set(Gaf_CUSTOM_ARGUMENTS_FROM_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gaf_options.txt)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules"")

find_package(OpenGL REQUIRED)
find_package(assimp REQUIRED)
# message(STATUS ""Assimp includes at ${assimp_INCLUDE_DIRS}"")
# message(STATUS ""Assimp libraries at ${assimp_LIBRARIES}"")
find_package(SDL2 REQUIRED)
# message(STATUS ""sdl2 include directory ${SDL2_INCLUDE_DIR}"")

include(${CMAKE_CURRENT_SOURCE_DIR}/external/gaf/gaf.cmake)

include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/range-v3/include)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/rapidjson/include)

set(MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/osx-bundle.plist"")

# compiler flags
if(${MSVC})
    add_definitions(/D _CRT_SECURE_NO_WARNINGS)

    add_definitions(/D NOMINMAX)
    add_definitions(/D STRICT)
    add_definitions(/D WIN32_LEAN_AND_MEAN)
    add_definitions(/D VC_EXTRALEAN)

    # character set to Not Set=ASCII/SBCS
    # http://public.kitware.com/Bug/view.php?id=12189
    add_definitions(/D _SBCS)

    # range-v3 requires this
    add_compile_options(/permissive-)
endif()

# disable rtti

if(NOT BUILD_TYPEINFO_IMPL_RTTI)
    if(MSVC)
        add_compile_options(/GR-)
    else()
        add_compile_options(-fno-rtti)
    endif()
endif()

# enable all warnings
if(MSVC)
    add_compile_options(/W4)
else()
    add_compile_options(-Wall -Wextra -Wpedantic)
    add_compile_options(-Wshadow)
    add_compile_options(-Wnon-virtual-dtor)
    # add_compile_options(-Wold-style-cast) # todo...
    add_compile_options(-Wcast-align)
    add_compile_options(-Wunused)
    add_compile_options(-Woverloaded-virtual)
    #add_compile_options(-Wconversion)
    #add_compile_options(-Wsign-conversion)
    add_compile_options(-Wformat=2)
    # add_compile_options(-Wlifetime)

    add_compile_options(-Wno-error=deprecated)
endif()


include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(SYSTEM ${CMAKE_CURRENT_BINARY_DIR})

if(BUILD_TYPEINFO_IMPL_CTTI)
    include_directories(SYSTEM external/ctti/include)
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config_in.h ${CMAKE_CURRENT_BINARY_DIR}/euph_generated_config.h)
include_directories(SYSTEM ${CMAKE_CURRENT_BINARY_DIR})


add_definitions(-DIMGUI_USER_CONFIG=""imgui_euphoria_config.h"")
add_executable(binary_to_compressed_c external/imgui/imgui/misc/fonts/binary_to_compressed_c.cpp)

include_directories(SYSTEM external/imgui/)
include_directories(SYSTEM external/IconFontCppHeaders/)
include_directories(SYSTEM external/spdlog/include/)
include_directories(SYSTEM external/magic_enum/include/)

add_subdirectory(core)
add_subdirectory(minsynth)
add_subdirectory(render)
add_subdirectory(window)
add_subdirectory(gui)
add_subdirectory(duk)
add_subdirectory(tests)
add_subdirectory(engine)
add_subdirectory(t3d)
add_subdirectory(editor)
add_subdirectory(painter)
add_subdirectory(musikmaskin)

# here comes all the sample files

file(GLOB all_samples_src samples/*.cc)
source_group("""" FILES ${all_samples_src})

# single file applications that could be useful

add_executable(palextract samples/palette-extract.cc)
target_link_libraries(palextract core)

add_executable(collage samples/collage.cc)
target_link_libraries(collage core)

add_executable(tabletool samples/tabletool.cc)
target_link_libraries(tabletool core)

add_executable(base64 samples/base64.cc)
target_link_libraries(base64 core)

add_executable(markov samples/markov.cc)
target_link_libraries(markov core)

add_executable(tracery samples/tracery.cc)
target_link_libraries(tracery core)

add_executable(raytracer samples/raytracer-main.cc)
target_link_libraries(raytracer core)



# samples applications that serve no purpose other than
# testing the libraries and perhaps generate some pretty visuals :)

add_executable(samples-3d WIN32 MACOSX_BUNDLE samples/3d.cc)
target_include_directories(samples-3d SYSTEM PRIVATE ${SDL2_INCLUDE_DIR})
target_link_libraries(samples-3d core render window ${SDL2_LIBRARY})

add_executable(samples-2d WIN32 MACOSX_BUNDLE samples/2d.cc)
target_include_directories(samples-2d SYSTEM PRIVATE ${SDL2_INCLUDE_DIR})
target_link_libraries(samples-2d core gui render window ${SDL2_LIBRARY})

add_executable(samples-gui WIN32 MACOSX_BUNDLE samples/gui.cc)
target_include_directories(samples-gui SYSTEM PRIVATE ${SDL2_INCLUDE_DIR})
target_link_libraries(samples-gui core gui render window ${SDL2_LIBRARY})

add_executable(samples-drunken-bishop samples/drunken-bishop.cc)
target_link_libraries(samples-drunken-bishop core)

add_executable(samples-rng samples/rng-main.cc)
target_link_libraries(samples-rng core)

add_executable(samples-font samples/font-main.cc)
target_link_libraries(samples-font core)

add_executable(samples-palette samples/palette-main.cc)
target_link_libraries(samples-palette core)

add_executable(samples-chatbot samples/chatbot.cc)
target_link_libraries(samples-chatbot core)

add_executable(samples-coldet samples/coldet.cc)
target_link_libraries(samples-coldet core)

add_executable(samples-draw-test samples/draw-test.cc)
target_link_libraries(samples-draw-test core)

add_executable(samples-img samples/img.cc)
target_link_libraries(samples-img core)

add_executable(samples-poisson-test samples/poisson-test.cc)
target_link_libraries(samples-poisson-test core)

add_executable(samples-svg-dump samples/svg-dump.cc)
target_link_libraries(samples-svg-dump core)

add_executable(samples-three-dump samples/three-dump.cc)
target_link_libraries(samples-three-dump core)

add_executable(samples-identicon samples/identicon-main.cc)
target_link_libraries(samples-identicon core)

add_executable(samples-canvas samples/canvas-main.cc)
target_link_libraries(samples-canvas core)

add_executable(samples-tree samples/tree.cc)
target_link_libraries(samples-tree core)

add_executable(samples-worldgen samples/worldgen.cc)
target_link_libraries(samples-worldgen core)

add_executable(samples-voronoi samples/voronoi.cc)
target_link_libraries(samples-voronoi core)

",3.1.0,3.1
28542,pinterest,rocksplicator,False,False,False,False,False,37,C++,2020-05-13 17:46:10+00:00,2016-10-24 14:45:53+00:00,375,419,"cmake_minimum_required(VERSION 3.1)

project(rocksplicator)

set(CMAKE_CXX_FLAGS ""-std=c++17 -gdwarf-2 -O3 -Wall -fPIC -fno-omit-frame-pointer"")

include_directories(/usr/local/include)
include_directories(/usr/lib/jvm/java-8-openjdk-amd64/include)
include_directories(/usr/lib/jvm/java-8-openjdk-amd64/include/linux/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/build"")

link_directories(""/usr/local/lib/linux/intel64/Release/"")
link_directories(""/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/"")

enable_testing()

# submodules
add_subdirectory(googletest)

# Sub-projects
add_subdirectory(common)
add_subdirectory(examples)
add_subdirectory(rocksdb_admin)
add_subdirectory(rocksdb_replicator)
add_subdirectory(tgrep)
",3.1,3.1
28653,milkytracker,MilkyTracker,False,False,False,False,False,34,C++,2020-05-08 19:09:22+00:00,2013-10-20 10:16:11+00:00,834,654,"#
#  CMakeLists.txt
#
#  Copyright 2016 Dale Whinham
#
#  This file is part of MilkyTracker.
#
#  MilkyTracker is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  MilkyTracker is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with MilkyTracker.  If not, see <http://www.gnu.org/licenses/>.
#

cmake_minimum_required(VERSION 3.10)
project(MilkyTracker)

# Set C++ standard to C++98
set(CMAKE_CXX_STANDARD 98)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable IDE solution folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Enable tracker-specific functions in MilkyPlay
add_definitions(-DMILKYTRACKER)

# Adhere to GNU filesystem layout conventions
include(GNUInstallDirs)

# Force SDL if requested
option(FORCESDL ""Force SDL instead of native"" OFF)
if(FORCESDL)
    unset(APPLE)
    unset(WIN32)
    add_definitions(-D__FORCE_SDL_AUDIO__)
endif()

# Lowercase project name for binaries and packaging
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
string(TOLOWER ${CMAKE_SYSTEM_NAME} SYSTEM_NAME_LOWER)

# Additional CMake modules
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

# Version number in format X.YY.ZZ
set(VER_X  1)
set(VER_YY 02)
set(VER_ZZ 00)
set(VER_FULL ""${VER_X}.${VER_YY}.${VER_ZZ}"")

# Final build filename, for example ""milkytracker-1.02.00-win32.zip""
set(BUILD_FILENAME ""milkytracker-${VER_FULL}-${SYSTEM_NAME_LOWER}"")

# Generate version header from the above
configure_file(
    ${PROJECT_SOURCE_DIR}/src/tracker/version.h.in
    ${PROJECT_BINARY_DIR}/src/tracker/version.h
)

# Packaging
if(APPLE)
    set(CPACK_GENERATOR DragNDrop)
    set(CPACK_DMG_VOLUME_NAME ""${PROJECT_NAME} ${VER_FULL}"")
    set(
        CPACK_DMG_DS_STORE_SETUP_SCRIPT
        ${PROJECT_SOURCE_DIR}/resources/packaging/osx/DMGSetup.scpt
    )
    set(
        CPACK_DMG_BACKGROUND_IMAGE
        ${PROJECT_SOURCE_DIR}/resources/packaging/osx/DMGBackground.tif
    )
elseif(WIN32)
    set(CPACK_GENERATOR ZIP)
else()
    set(CPACK_GENERATOR TGZ)
endif()
set(CPACK_PACKAGE_NAME ${PROJECT_NAME_LOWER})
set(CPACK_PACKAGE_VENDOR ""MilkyTracker Team"")
set(CPACK_PACKAGE_CONTACT ""support@milkytracker.org"")
set(CPACK_PACKAGE_FILE_NAME ${BUILD_FILENAME})
set(CPACK_PACKAGE_VERSION_MAJOR ${VER_X})
set(CPACK_PACKAGE_VERSION_MINOR ${VER_YY})
set(CPACK_PACKAGE_VERSION_PATCH ${VER_ZZ})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""FastTracker II compatible music tracker"")
include(CPack)

if(APPLE)
    # Warn if deployment target isn't set to Lion
    if(NOT CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.7"")
        message(WARNING
            ""Your deployment target is either unset or not set to \""10.7\"", ""
            ""which means that the binaries produced may not run on earlier ""
            ""versions of macOS.\n""
            ""Please re-run CMake with '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.7' ""
            ""or change the variable in the CMake GUI to target Lion and newer.""
        )
    endif()

	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")

    # Set variables for generating the Info.plist file
    set(MACOSX_BUNDLE_BUNDLE_VERSION ""${VER_FULL}"")
    set(MACOSX_BUNDLE_EXECUTABLE ${PROJECT_NAME})
    set(MACOSX_BUNDLE_GUI_IDENTIFIER ""com.Titan.MilkyTracker"")
    set(MACOSX_BUNDLE_NSMAIN_NIB_FILE ""Application"")
    set(MACOSX_BUNDLE_ICON_FILE ""carton"")
    set(MACOSX_BUNDLE_NAME ${PROJECT_NAME})
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ""${VER_FULL}"")

    # Carbon only required for HIToolbox/Events.h (virtual keycodes)
    find_library(CARBON_LIBRARY Carbon)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(CORE_AUDIO_LIBRARY CoreAudio)
    find_library(CORE_FOUNDATION_LIBRARY CoreFoundation)
    find_library(CORE_MIDI_LIBRARY CoreMIDI)
    find_library(CORE_VIDEO_LIBRARY CoreVideo)
    find_library(OPENGL_LIBRARY OpenGL)

    # OS X MIDI support requires no external libraries
    message(STATUS ""Enabled MIDI support (Core MIDI)"")
    add_subdirectory(src/midi)
elseif(WIN32)
    # Visual C++ Compiler options
    if(MSVC)
        # Warn if platform toolset may not be targetting Windows XP upwards
        if(NOT CMAKE_VS_PLATFORM_TOOLSET MATCHES ""xp"")
            message(WARNING
                ""Your currently-selected platform toolset may generate ""
                ""executables which are incompatible with Windows XP.\n""
                ""Please set your toolset to be one of v110_xp, v120_xp or ""
                ""v140_xp for VS2012, VS2013, and VS2015 respectively.\n""
                ""You can do so with the '-T' argument to CMake, or by entering ""
                ""it in the CMake GUI.""
            )
        endif()

        # Suppress secure string function warnings
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)

        # Enable parallel compilation
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /MP"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")

        # Enable static linkage of the Microsoft Visual C/C++ Runtime
        set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} /MTd"")
        set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /MT"")
        set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELWITHDEBINFO} /MTd"")
        set(CMAKE_C_FLAGS_MINSIZEREL ""${CMAKE_C_FLAGS_MINSIZEREL} /MT"")
        set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")
        set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
        set(
            CMAKE_CXX_FLAGS_RELWITHDEBINFO
            ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MTd""
        )
        set(CMAKE_CXX_FLAGS_MINSIZEREL ""${CMAKE_CXX_FLAGS_MINSIZEREL} /MT"")
    endif()

    # Prevent Windows.h from clashing with the Standard Template Library so we
    # can use std::min/std::max (see https://support.microsoft.com/kb/143208)
    add_definitions(-DNOMINMAX)

    # Windows MIDI support requires no external libraries
    message(STATUS ""Enabled MIDI support (WinMM)"")
    add_subdirectory(src/midi)
else()
    # Workaround for SDL bug #3295, which occurs in SDL2 <2.0.5
    # https://bugzilla.libsdl.org/show_bug.cgi?id=3295
    cmake_policy(SET CMP0004 OLD)

    find_package(SDL2 REQUIRED)
endif()

# Prefer static linkage under OS X for libraries located with find_package()
if(APPLE)
    set(SUFFIXES_ORIG ${CMAKE_FIND_LIBRARY_SUFFIXES})
    set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

# Under macOS and Windows we use Git Submodules to locate the decompression libs
if(UNIX)
    # zlib is provided by Linux and macOS
    find_package(ZLIB)

    # We can't use Brew for these due to OSX target version mismatch
    # (we're targeting an older version of OSX to increase compatibility)
    if(NOT APPLE)
      find_package(LHASA)
      find_package(ZZIPLIB)
    endif()

    if(${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")
        find_package(ALSA)
        find_package(JACK)

        # Linux MIDI support requires ALSA and RtMidi
        if(ALSA_FOUND)
            find_package(RTMIDI 2.1.0)
            if(RTMIDI_FOUND)
                message(STATUS ""Enabled MIDI support (ALSA/RtMidi)"")
                add_subdirectory(src/midi)
            else()
                message(""MIDI support disabled (RtMidi unavailable)"")
            endif()
        else()
            message(""MIDI support disabled (ALSA unavailable)"")
        endif()
    endif()
endif()

# Restore library suffixes
if(APPLE)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${SUFFIXES_ORIG})
endif()

add_subdirectory(docs)
add_subdirectory(resources/music)
add_subdirectory(src/compression)
add_subdirectory(src/fx)
add_subdirectory(src/milkyplay)
add_subdirectory(src/ppui)
add_subdirectory(src/tracker)

# Set MilkyTracker target as startup project in Visual Studio
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT tracker)
",3.10,3.1
28681,humanoid-path-planner,hpp-corbaserver,False,False,False,False,False,14,C++,2020-05-15 09:38:49+00:00,2014-03-26 17:08:16+00:00,3,1026,"# Copyright (c) 2012, 2020 CNRS
# Author: Florent Lamiraux, Guilhem Saurel
#
# This file is part of hpp-corbaserver.
# hpp-corbaserver is free software: you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation, either version
# 3 of the License, or (at your option) any later version.
#
# hpp-corbaserver is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# hpp-corbaserver.  If not, see
# <http://www.gnu.org/licenses/>.

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

SET(PROJECT_NAME hpp-corbaserver)
SET(PROJECT_DESCRIPTION ""Corba server for Humanoid Path Planner applications"")

SET(PROJECT_USE_CMAKE_EXPORT TRUE)
SET(CXX_DISABLE_WERROR true)

INCLUDE(cmake/hpp.cmake)
INCLUDE(cmake/idl.cmake)
INCLUDE(cmake/python.cmake)

INCLUDE(cmake-modules/omniidl.cmake)

SET(CLIENT_ONLY FALSE CACHE BOOL ""Set to true to install the client only"")

COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

# Dependencies
ADD_REQUIRED_DEPENDENCY(""omniORB4 >= 4.1.4"")
ADD_REQUIRED_DEPENDENCY(""omniDynamic4 >= 4.1.4"")
FINDPYTHON()
IF(NOT CLIENT_ONLY)
  ADD_PROJECT_DEPENDENCY(""hpp-core"" REQUIRED)
  ADD_PROJECT_DEPENDENCY(""hpp-template-corba"" REQUIRED)
ENDIF(NOT CLIENT_ONLY)

set(ALL_IDL_CPP_STUBS """")
set(ALL_IDL_CPP_IMPL_STUBS """")
set(ALL_IDL_PYTHON_STUBS """")
#ADD_SUBDIRECTORY(src)

SET(${PROJECT_NAME}_HEADERS
  include/hpp/corbaserver/client.hh
  )

IF(NOT CLIENT_ONLY)
  SET(${PROJECT_NAME}_HEADERS
    ${${PROJECT_NAME}_HEADERS}
    include/hpp/corbaserver/doc.hh
    include/hpp/corbaserver/fwd.hh
    include/hpp/corbaserver/object-map.hh
    include/hpp/corbaserver/problem-solver-map.hh
    include/hpp/corbaserver/servant-base.hh
    include/hpp/corbaserver/server.hh
    include/hpp/corbaserver/server-plugin.hh
    include/hpp/corbaserver/conversions.hh
    )
ENDIF(NOT CLIENT_ONLY)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(tests)

PKG_CONFIG_APPEND_LIBS(${PROJECT_NAME})

SET(HPP_CORBASERVER_CMAKE_PLUGIN ""${CMAKE_INSTALL_PREFIX}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}-plugin.cmake"")
SET(PKG_CONFIG_EXTRA ""${PKG_CONFIG_EXTRA}\ncmake_plugin=${HPP_CORBASERVER_CMAKE_PLUGIN}"")
SET(PACKAGE_EXTRA_MACROS
    ""${PACKAGE_EXTRA_MACROS}\nset(HPP_CORBASERVER_CMAKE_PLUGIN ${HPP_CORBASERVER_CMAKE_PLUGIN})"")
SET(PACKAGE_EXTRA_MACROS
    ""${PACKAGE_EXTRA_MACROS}\nset(HPP_CORBASERVER_DATAROOTDIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR})"")
INSTALL(FILES cmake-modules/${PROJECT_NAME}-plugin.cmake
              cmake-modules/omniidl.cmake
  DESTINATION lib/cmake/${PROJECT_NAME}/
  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)

# install omniidl backend
INSTALL(FILES
  cmake-modules/omniidl/cxx_impl/__init__.py
  cmake-modules/omniidl/cxx_impl/main.py
  cmake-modules/omniidl/cxx_impl/template.py
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/omniidl/cxx_impl
  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
",3.1,3.1
28796,szpajder,dumpvdl2,False,False,False,False,False,2,C,2020-05-14 17:37:57+00:00,2017-02-26 20:09:20+00:00,86,610,"cmake_minimum_required (VERSION 3.1)
project (dumpvdl2 C)

set (DUMPVDL2_VERSION_MAJOR 1)
set (DUMPVDL2_VERSION_MINOR 9)
set (DUMPVDL2_VERSION_PATCH 0)
set (DUMPVDL2_VERSION ""${DUMPVDL2_VERSION_MAJOR}.${DUMPVDL2_VERSION_MINOR}.${DUMPVDL2_VERSION_PATCH}"")
set (CMAKE_C_STANDARD 11)
set (C_STANDARD_REQUIRED ON)
set (CMAKE_C_EXTENSIONS OFF)

if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
   message(STATUS ""Build type not specified: defaulting to Release"")
endif(NOT CMAKE_BUILD_TYPE)

option(EMIT_ASN_DEBUG, ""Enable debugging of ASN.1 decoder (requires
CMAKE_BUILD_TYPE=Debug"" OFF)

set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wextra"")
set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -Og -DDEBUG"")

add_subdirectory (src)

# build a CPack driven installer package
include (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE
	""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set (CPACK_RESOURCE_FILE_README
	""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set (CPACK_PACKAGE_VERSION_MAJOR ""${DUMPVDL2_VERSION_MAJOR}"")
set (CPACK_PACKAGE_VERSION_MINOR ""${DUMPVDL2_VERSION_MINOR}"")
set (CPACK_PACKAGE_VERSION_PATCH ""${DUMPVDL2_VERSION_PATCH}"")
set (CPACK_PACKAGE_CHECKSUM ""SHA256"")
set (CPACK_STRIP_FILES TRUE)
if (UNIX)
	set (CPACK_GENERATOR ""TGZ"")
elseif (WIN32)
	set (CPACK_GENERATOR ""ZIP"")
endif ()
include (CPack)
",3.1,3.1
28834,ComputationalRadiationPhysics,libSplash,False,False,False,False,False,9,C++,2019-02-15 11:54:44+00:00,2013-08-02 14:09:31+00:00,12,610,"# Copyright 2013-2018 Felix Schmitt, Axel Huebl
#
# This file is part of libSplash.
#
# libSplash is free software: you can redistribute it and/or modify
# it under the terms of of either the GNU General Public License or
# the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# libSplash is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License and the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# and the GNU Lesser General Public License along with libSplash.
# If not, see <http://www.gnu.org/licenses/>.

# Preamble ####################################################################
#
cmake_minimum_required(VERSION 3.10.0)

# version
file(STRINGS ""${CMAKE_CURRENT_SOURCE_DIR}/src/include/splash/version.hpp""
     SPLASH_VERSION_MAJOR_HPP
     REGEX ""#define SPLASH_VERSION_MAJOR ""
 )
file(STRINGS ""${CMAKE_CURRENT_SOURCE_DIR}/src/include/splash/version.hpp""
     SPLASH_VERSION_MINOR_HPP
     REGEX ""#define SPLASH_VERSION_MINOR ""
 )
file(STRINGS ""${CMAKE_CURRENT_SOURCE_DIR}/src/include/splash/version.hpp""
     SPLASH_VERSION_PATCH_HPP
     REGEX ""#define SPLASH_VERSION_PATCH ""
 )

string(REGEX MATCH ""([0-9]+)""
    SPLASH_VERSION_MAJOR
    ${SPLASH_VERSION_MAJOR_HPP}
)
string(REGEX MATCH ""([0-9]+)""
    SPLASH_VERSION_MINOR
    ${SPLASH_VERSION_MINOR_HPP}
)
string(REGEX MATCH ""([0-9]+)""
    SPLASH_VERSION_PATCH
    ${SPLASH_VERSION_PATCH_HPP}
)

project(Splash
    VERSION ${SPLASH_VERSION_MAJOR}.${SPLASH_VERSION_MINOR}.${SPLASH_VERSION_PATCH}
) #LANGUAGES CXX


# Options and Variants ########################################################
#
function(splash_option name description default)
    set(Splash_USE_${name} ${default} CACHE STRING ""${description}"")
    set_property(CACHE Splash_USE_${name} PROPERTY
        STRINGS ""ON;TRUE;AUTO;OFF;FALSE""
    )
    if(Splash_HAVE_${name})
        set(Splash_HAVE_${name} TRUE)
    else()
        set(Splash_HAVE_${name})
    endif()
    set(Splash_CONFIG_OPTIONS ${Splash_CONFIG_OPTIONS} ${name} PARENT_SCOPE)
endfunction()

splash_option(MPI ""Enable MPI support (does NOT imply parallel HDF5)"" AUTO)
splash_option(PARALLEL ""Enable support for parallel HDF5 (implies MPI)"" AUTO)
set(Splash_HAVE_COLLECTIVE ON CACHE STRING ""Enable collective I/O for parallel HDF5"")
list(APPEND Splash_CONFIG_OPTIONS COLLECTIVE)
set(Splash_HAVE_TOOLS ON CACHE STRING ""Enable tools"")
list(APPEND Splash_CONFIG_OPTIONS)
set(Splash_HAVE_TESTS OFF CACHE STRING ""Enable tests"")
list(APPEND Splash_CONFIG_OPTIONS TESTS)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING
        ""Choose the build type, e.g. Debug."" FORCE)
endif()

# Dependencies ################################################################
#
# external library: HDF5 (mandatory)
if(Splash_USE_PARALLEL STREQUAL AUTO)
    set(HDF5_PREFER_PARALLEL TRUE)
    find_package(HDF5 1.8.6 REQUIRED COMPONENTS C)
    if(HDF5_IS_PARALLEL)
        set(Splash_HAVE_PARALLEL TRUE)
        set(Splash_USE_MPI TRUE)
    endif()
elseif(Splash_USE_PARALLEL)
    set(HDF5_PREFER_PARALLEL TRUE)
    find_package(HDF5 1.8.6 REQUIRED COMPONENTS C)
    if(NOT HDF5_IS_PARALLEL)
        message(FATAL_ERROR
            ""Parallel HDF5 required but only serial version found!""
        )
    endif()
    set(Splash_HAVE_PARALLEL TRUE)
    set(Splash_USE_MPI TRUE)
else()
    set(HDF5_PREFER_PARALLEL FALSE)
    find_package(HDF5 1.8.6 REQUIRED COMPONENTS C)
    if(HDF5_IS_PARALLEL)
        message(FATAL_ERROR
            ""Serial HDF5 required but only parallel version found!""
        )
    endif()
    set(Splash_HAVE_PARALLEL FALSE)
endif()

# external library: zlib (mandatory)
find_package(ZLIB REQUIRED)

if(Splash_USE_MPI STREQUAL AUTO)
    find_package(MPI)
elseif(Splash_USE_MPI)
    find_package(MPI REQUIRED)
endif()
if(MPI_FOUND)
    set(Splash_HAVE_MPI TRUE)
else()
    set(Splash_HAVE_MPI FALSE)
endif()

# external library: CPPUnit (mandatory for tests)
if(Splash_HAVE_TESTS)
    find_path(CPPUNIT_INCLUDE_DIR cppunit/Test.h)
    find_library(CPPUNIT_LIBRARY NAMES cppunit)

    if(CPPUNIT_INCLUDE_DIR AND CPPUNIT_LIBRARY)
    else()
        message(FATAL_ERROR ""CPPUnit Library NOT found! Can NOT build tests!"")
    endif()
endif()

# Targets #####################################################################
#
set(SPLASH_CLASSES
    logging
    DCAttribute
    DCDataSet
    DCGroup
    HandleMgr
    SerialDataCollector
    DomainCollector
    SDCHelper
    AttributeInfo
    generateCollectionType
)
if(Splash_HAVE_PARALLEL)
    list(APPEND SPLASH_CLASSES
        ParallelDataCollector
        ParallelDomainCollector
    )
endif()

set(LIBRARY_SOURCES)
foreach(class ${SPLASH_CLASSES})
    list(APPEND LIBRARY_SOURCES ${Splash_SOURCE_DIR}/src/${class}.cpp)
endforeach()

add_library(Splash
    ${LIBRARY_SOURCES}
)
unset(LIBRARY_SOURCES)

target_link_libraries(Splash PUBLIC ${HDF5_LIBRARIES})
target_link_libraries(Splash PRIVATE ZLIB::ZLIB)
if(Splash_HAVE_MPI)
    # MPI targets: CMake 3.9+
    # note: often the PUBLIC dependency to CXX is missing in C targets...
    target_link_libraries(Splash PUBLIC MPI::MPI_C MPI::MPI_CXX)
endif()
if(NOT WIN32)
    # added automatically on Windows
    target_link_libraries(Splash PRIVATE m)
endif()

target_include_directories(Splash SYSTEM PUBLIC ${HDF5_INCLUDE_DIRS})
target_compile_definitions(Splash PUBLIC ${HDF5_DEFINITIONS})

if(CMAKE_BUILD_TYPE STREQUAL Debug)
    target_compile_definitions(Splash PRIVATE ""-DSPLASH_VERBOSE_HDF5"")
endif()
if(NOT Splash_HAVE_COLLECTIVE)
    # removed functionality ?
    target_compile_definitions(Splash PRIVATE ""-DSPLASH_INDEPENDENT_IO=1"")
endif()

# Splash headers
target_include_directories(Splash PUBLIC
    $<BUILD_INTERFACE:${Splash_SOURCE_DIR}/src/include>
    $<BUILD_INTERFACE:${Splash_BINARY_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

# tools
if(Splash_HAVE_TOOLS)
    add_executable(splashtools
        tools/splashtools.cpp
    )
    target_link_libraries(splashtools PRIVATE Splash)
    if(Splash_HAVE_MPI)
       target_compile_definitions(splashtools PRIVATE ""-DENABLE_MPI=1"")
    endif()
    if(Splash_HAVE_PARALLEL)
      # unused option?
      target_compile_definitions(splashtools PRIVATE ""-DENABLE_PARALLEL=1"")
    endif()
endif()

# examples
add_executable(domain_read
    examples/domain_read/domain_read.cpp
)
target_link_libraries(domain_read PRIVATE Splash)
if(Splash_HAVE_MPI)
    add_executable(domain_read_mpi
        examples/domain_read/domain_read_mpi.cpp
    )
    target_link_libraries(domain_read_mpi PRIVATE Splash)
    add_executable(domain_write_mpi
        examples/domain_write/domain_write_mpi.cpp
    )
    target_link_libraries(domain_write_mpi PRIVATE Splash)
endif()
if(Splash_HAVE_PARALLEL)
    add_executable(parallel_domain_write
        examples/parallel_domain_write/parallel_domain_write.cpp
    )
    target_link_libraries(parallel_domain_write PRIVATE Splash)
endif()

# tests
if(Splash_HAVE_TESTS)
    set(SRCFILESOTHER dependencies/runner.cpp)
    set(TEST_NAMES
        Append
        Attributes
        FileAccess
        Filename
        References
        Remove
        SimpleData
        Striding
    )
    if(Splash_HAVE_MPI)
        list(APPEND TEST_NAMES
            Benchmark
            Domains
        )
    endif()
    if(Splash_HAVE_PARALLEL)
        list(APPEND TEST_NAMES
            Parallel_Attributes
            Parallel_Filename
            Parallel_Domains
            Parallel_ListFiles
            Parallel_References
            Parallel_Remove
            Parallel_SerialDC
            Parallel_SimpleData
            Parallel_ZeroAccess
        )
    endif()

    foreach(name ${TEST_NAMES})
        add_executable(${name}Test
            tests/${name}Test.cpp
            tests/dependencies/runner.cpp
        )
        target_link_libraries(${name}Test PRIVATE Splash)
        target_link_libraries(${name}Test PRIVATE ${CPPUNIT_LIBRARY})
        target_include_directories(${name}Test PRIVATE SYSTEM ${CPPUNIT_INCLUDE_DIR})
        target_include_directories(${name}Test PRIVATE
            $<BUILD_INTERFACE:${Splash_BINARY_DIR}/tests/include>
            $<BUILD_INTERFACE:${Splash_SOURCE_DIR}/tests/include>
        )
    endforeach()
endif()


# Generate Files with Configuration Options ###################################
#
configure_file(
    ${Splash_SOURCE_DIR}/src/include/splash/version.hpp
    ${Splash_BINARY_DIR}/include/splash/version.hpp
)

configure_file(
    ${Splash_SOURCE_DIR}/SplashConfig.cmake.in
    ${Splash_BINARY_DIR}/SplashConfig.cmake
    @ONLY
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(""SplashConfigVersion.cmake""
    VERSION ${Splash_VERSION}
    COMPATIBILITY SameMajorVersion
)

# Installs ####################################################################
#
# headers, libraries and exectuables
install(TARGETS Splash EXPORT SplashTargets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)
install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/src/include/.""
  DESTINATION include
  PATTERN "".svn"" EXCLUDE
  PATTERN "".git"" EXCLUDE
  PATTERN ""splash_*.h"" EXCLUDE
  PATTERN ""version.hpp"" EXCLUDE
)

# CMake package file for find_package(Splash::Splash) in depending projects
install(EXPORT SplashTargets
    FILE SplashTargets.cmake
    NAMESPACE Splash::
    DESTINATION lib/cmake/Splash
)
install(
    FILES
        ${Splash_BINARY_DIR}/SplashConfig.cmake
        ${Splash_BINARY_DIR}/SplashConfigVersion.cmake
    DESTINATION lib/cmake/Splash
)

# install correct splash header file
# (will be executed after POST_BUILD)
install(FILES ${Splash_BINARY_DIR}/include/splash/splash.h
        DESTINATION include/splash)
install(FILES ${Splash_BINARY_DIR}/include/splash/version.hpp
    DESTINATION include/splash
)

add_custom_command(TARGET Splash PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory
            ""${Splash_BINARY_DIR}/include/splash""
)

if(Splash_HAVE_PARALLEL)
    set(splash_inc_file ""${Splash_SOURCE_DIR}/src/include/splash/splash_parallel.h"")
else()
    set(splash_inc_file ""${Splash_SOURCE_DIR}/src/include/splash/splash_serial.h"")
endif()
add_custom_command(TARGET Splash PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        ${splash_inc_file}
        ${Splash_BINARY_DIR}/include/splash/splash.h
)
if(Splash_HAVE_TESTS)
    add_custom_command(TARGET Splash PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
            ${Splash_SOURCE_DIR}/tests/readBoolChar.py
            ${Splash_BINARY_DIR}
    )
    add_custom_command(TARGET Splash PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
            ${Splash_SOURCE_DIR}/tests/run_tests
            ${Splash_BINARY_DIR}
    )
    add_custom_command(TARGET Splash PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
            ${Splash_SOURCE_DIR}/tests/run_parallel_tests
            ${Splash_BINARY_DIR}
    )
endif()

# install python scripts
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/tools/splash2xdmf.py
    DESTINATION share/pyshared)


# install tools
if(Splash_HAVE_TOOLS)
    install(TARGETS splashtools RUNTIME DESTINATION bin)
endif()
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/tools/splash2xdmf.py DESTINATION bin)


# Tests #######################################################################
#
enable_testing()

if($ENV{USER} STREQUAL root)
    set(MPI_ALLOW_ROOT --allow-run-as-root)
endif()
set(MPI_TEST_EXE ${MPIEXEC_EXECUTABLE} ${MPI_ALLOW_ROOT} ${MPIEXEC_NUMPROC_FLAG})

if(Splash_HAVE_TESTS)
    add_custom_command(TARGET SimpleDataTest POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory
                ${Splash_BINARY_DIR}/h5
    )

    add_test(NAME Serial.SimpleData
        COMMAND ./SimpleDataTest
    )
    add_test(NAME Serial.Filename
        COMMAND FilenameTest
    )
    add_test(NAME Serial.Attributes
        COMMAND AttributesTest
    )
    add_test(NAME h5py.readBoolChar
        COMMAND readBoolChar.py
    )
    add_test(NAME Serial.Append
        COMMAND AppendTest
    )
    add_test(NAME Serial.FileAccess
        COMMAND FileAccessTest
    )
    add_test(NAME Serial.Striding
        COMMAND StridingTest
    )
    add_test(NAME Serial.Remove
        COMMAND RemoveTest
    )
    add_test(NAME Serial.References
        COMMAND ReferencesTest
    )
    if(Splash_HAVE_MPI)
        add_test(NAME MPI.Domains
            COMMAND ${MPI_TEST_EXE}
                    8 DomainsTest
        )
    endif()
    if(Splash_HAVE_PARALLEL)
        add_test(NAME Parallel.SimpleData
            COMMAND ${MPI_TEST_EXE}
                    8 Parallel_SimpleDataTest
        )
        add_test(NAME Parallel.Filename
            COMMAND ${MPI_TEST_EXE}
                    1 Parallel_FilenameTest
        )
        add_test(NAME Parallel.SerialDC
            COMMAND ${MPI_TEST_EXE}
                    8 Parallel_SerialDCTest
        )
        add_test(NAME Parallel.ListFiles
            COMMAND ${MPI_TEST_EXE}
                    1 Parallel_ListFilesTest
        )
        add_test(NAME Parallel.Domains
            COMMAND ${MPI_TEST_EXE}
                    8 Parallel_DomainsTest
        )
        add_test(NAME Parallel.Attributes
            COMMAND ${MPI_TEST_EXE}
                    4 Parallel_AttributesTest
        )
        add_test(NAME Parallel.Remove
            COMMAND ${MPI_TEST_EXE}
                    2 Parallel_RemoveTest
        )
        add_test(NAME Parallel.References
            COMMAND ${MPI_TEST_EXE}
                    2 Parallel_ReferencesTest
        )
        add_test(NAME Parallel.ZeroAccess
            COMMAND ${MPI_TEST_EXE}
                    2 Parallel_ZeroAccessTest
        )
        add_test(NAME Parallel.ZeroAccess2
            COMMAND ${MPI_TEST_EXE}
                    4 Parallel_ZeroAccessTest
        )
        add_test(NAME Parallel.ZeroAccess3
            COMMAND ${MPI_TEST_EXE}
                    7 Parallel_ZeroAccessTest
        )
    endif()
endif()

# examples
if(Splash_HAVE_MPI)
    add_test(NAME Examples.DomainWriteMPI
        COMMAND ${MPI_TEST_EXE}
                4 domain_write_mpi h5ex 2 2 1
    )
    add_test(NAME Examples.DomainReadMPI
        COMMAND ${MPI_TEST_EXE}
                4 domain_read_mpi h5ex 2 2 1
    )
    add_test(NAME Examples.DomainRead
        COMMAND domain_read h5ex
    )
endif()
if(Splash_HAVE_PARALLEL)
    add_test(NAME Examples.ParallelDomainWrite
        COMMAND ${MPI_TEST_EXE}
                4 parallel_domain_write ph5 2 2 1
    )
endif()


# Status Message for Build Options ############################################
#
message("""")
message(""Splash build configuration:"")
message(""  Splash Version: ${Splash_VERSION}"")
message(""  C++ Compiler : ${CMAKE_CXX_COMPILER_ID} ""
                         ""${CMAKE_CXX_COMPILER_VERSION} ""
                         ""${CMAKE_CXX_COMPILER_WRAPPER}"")
message(""    ${CMAKE_CXX_COMPILER}"")
message("""")
message(""  Installation prefix: ${CMAKE_INSTALL_PREFIX}"")
message("""")
message(""  Build Type: ${CMAKE_BUILD_TYPE}"")
message(""  Build Options:"")

foreach(opt IN LISTS Splash_CONFIG_OPTIONS)
  if(${Splash_HAVE_${opt}})
    message(""    ${opt}: ON"")
  else()
    message(""    ${opt}: OFF"")
  endif()
endforeach()
message("""")


# Packaging ###################################################################
#
# Reference for variables: http://www.cmake.org/Wiki/CMake:CPackConfiguration

set(CPACK_GENERATOR ""DEB;TGZ;TBZ2;ZIP"")

set(CPACK_PACKAGE_NAME ""libsplash"") # lower case required (debian policy)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY
    ""Simple Parallel file output Library for Accumulating Simulation data using Hdf5"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${Splash_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_README ""${Splash_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${Splash_SOURCE_DIR}/COPYING"")
# a valid email is required - happy spamming :)
set(CPACK_PACKAGE_CONTACT ""Felix Schmitt <felix.schmitt@zih.tu-dresden.de>"")
set(CPACK_PACKAGE_VENDOR ""ZIH and HZDR"")
# CPACK_PACKAGING_INSTALL_PREFIX : default is ""/usr"" for deb and rpm

set(CPACK_PACKAGE_VERSION_MAJOR ""${SPLASH_VERSION_MAJOR}"")
set(CPACK_PACKAGE_VERSION_MINOR ""${SPLASH_VERSION_MINOR}"")
set(CPACK_PACKAGE_VERSION_PATCH ""${SPLASH_VERSION_PATCH}"")
set(CPACK_PACKAGE_VERSION ""${Splash_VERSION}"")

# from `dpkg --print-architecture`
if(CMAKE_SYSTEM_PROCESSOR STREQUAL ""x86_64"" OR
   CMAKE_SYSTEM_PROCESSOR STREQUAL ""amd64"")
  set(SPLASH_ARCHITECTURE ""amd64"")
else()
  set(SPLASH_ARCHITECTURE ""i386"")
endif()

# probably only required by NSIS
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}"")

# ship (strip) all found executables
set(CPACK_STRIP_FILES ON)
# do not ship source files (packed in a weird absolute dir)
set(CPACK_SOURCE_STRIP_FILES OFF)
#set(CPACK_PACKAGE_EXECUTABLES ""MyExecutable"" ""My Executable"") # only required by NSIS

# try to detect used MPI flavor
set(MPI_FLAVOR ""FLAVOR-NOTFOUND"")
if(Splash_HAVE_MPI)
  set(MPI_FLAVOR ""openmpi"")
  set(MPI_FLAVOR_BIN ""openmpi-bin"")
  set(MPI_FLAVOR_MINVERSION 1.5.1)
  string(FIND ""${MPI_C_LIBRARIES}"" ""libmpich"" MPI_FLAVOR_POS)
  if(${MPI_FLAVOR_POS} GREATER -1)
    set(MPI_FLAVOR ""mpich2"")
    set(MPI_FLAVOR_BIN ""mpich2"")
    set(MPI_FLAVOR_MINVERSION 1.4.1)
  endif()
endif()

# package name containing all necessary information for feature identification
# inspect .deb meta data (like version) with dpkg --info <package>.deb
if(NOT Splash_HAVE_PARALLEL)
  set(SPLASH_PACKAGE_EXTRA_PREFIX ""-serial"")
endif()
if(MPI_FLAVOR)
  set(SPLASH_PACKAGE_EXTRA_PREFIX
      ""${SPLASH_PACKAGE_EXTRA_PREFIX}-${MPI_FLAVOR}"")
endif()
if(CMAKE_BUILD_TYPE STREQUAL Debug)
  set(SPLASH_PACKAGE_DEBUG ""-dbg"")
endif()

set(CPACK_PACKAGE_FILE_NAME
    ""${CPACK_PACKAGE_NAME}${SPLASH_PACKAGE_EXTRA_PREFIX}-${SPLASH_ARCHITECTURE}${SPLASH_PACKAGE_DEBUG}""
   )

# DEB specific ----------------------------------------------------------------
#   package relation policy at
#   http://www.debian.org/doc/debian-policy/ch-relationships.html

# default values that are already set in a fine and noble manner
# CPACK_DEBIAN_PACKAGE_MAINTAINER <- CPACK_PACKAGE_CONTACT
# CPACK_DEBIAN_PACKAGE_NAME <- CPACK_PACKAGE_NAME
# CPACK_DEBIAN_PACKAGE_VERSION <- CPACK_PACKAGE_VERSION
# CPACK_DEBIAN_PACKAGE_DESCRIPTION <- CPACK_PACKAGE_DESCRIPTION_SUMMARY
# CPACK_DEBIAN_PACKAGE_SECTION : default is ""devel""
# CPACK_DEBIAN_PACKAGE_PRIORITY : default is ""optional""
# CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA : pos/pre inst/rm scripts

# from `dpkg --print-architecture`
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ""${SPLASH_ARCHITECTURE}"") # default is i386

# the dev packages are a little bit too much, but since there is a lack of
# convenient named meta packages we use them to trigger the dependencies
if(Splash_HAVE_PARALLEL)
  set(CPACK_DEBIAN_PACKAGE_DEPENDS
      ""libhdf5-${MPI_FLAVOR}-dev (>= 1.8.6)""
     )
  set(CPACK_DEBIAN_PACKAGE_RECOMMENDS
      ""${MPI_FLAVOR_BIN} (>= ${MPI_FLAVOR_MINVERSION})""
     )
else()
  set(CPACK_DEBIAN_PACKAGE_DEPENDS
      ""libhdf5-serial-dev (>= 1.8.6)""
     )
  if(Splash_HAVE_MPI)
    set(CPACK_DEBIAN_PACKAGE_DEPENDS
        ""${CPACK_DEBIAN_PACKAGE_DEPENDS}, lib${MPI_FLAVOR}-dev (>= ${MPI_FLAVOR_MINVERSION})""
       )
    set(CPACK_DEBIAN_PACKAGE_RECOMMENDS
        ""${MPI_FLAVOR_BIN} (>= ${MPI_FLAVOR_MINVERSION})""
       )
  endif()
endif()

# CPACK_DEBIAN_PACKAGE_SUGGESTS
# deb-src support
# DEBIAN_PACKAGE_BUILDS_DEPENDS : not implemented by cmake yet

# END: DEB specific -----------------------------------------------------------

# create or creates specific library names
#  libsplash.so     -> libsplash.so.1
#  libsplash.so.1   -> libsplash.so.1.1
#  libsplash.so.1.1 -> libsplash.so.1.1.0

# has to be included after all vars are set
include(CPack)

",3.10.0,3.1
28894,otland,forgottenserver,False,False,False,False,False,116,C++,2020-05-17 18:00:03+00:00,2013-07-01 01:57:06+00:00,886,2954,"cmake_minimum_required(VERSION 3.10)

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

project(tfs)

add_subdirectory(src)
add_executable(tfs ${tfs_SRC})

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

set_target_properties(tfs PROPERTIES CXX_STANDARD 11)
set_target_properties(tfs PROPERTIES CXX_STANDARD_REQUIRED ON)

if (${CMAKE_VERSION} VERSION_GREATER ""3.16.0"")
    target_precompile_headers(tfs PUBLIC src/otpch.h)
else ()
    include(cotire)
    set_target_properties(tfs PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT ""src/otpch.h"")
    set_target_properties(tfs PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)
    cotire(tfs)
endif ()

if (NOT WIN32)
    add_compile_options(-Wall -Werror -pipe -fvisibility=hidden)
endif ()

set(CMAKE_CXX_FLAGS_PERFORMANCE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native"")

if (CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(-fno-strict-aliasing)
endif ()

# Find packages.
find_package(CryptoPP QUIET)
if (CryptoPP_FOUND)  # vcpkg-provided cmake package called CryptoPP
    set(Crypto++_LIBRARIES ""cryptopp-static"")
else()
    find_package(Crypto++ REQUIRED)
endif ()
find_package(MySQL REQUIRED)
find_package(Threads REQUIRED)
find_package(PugiXML REQUIRED)

# Selects LuaJIT if user defines or auto-detected
if (DEFINED USE_LUAJIT AND NOT USE_LUAJIT)
    set(FORCE_LUAJIT ${USE_LUAJIT})
else ()
    find_package(LuaJIT)
    set(FORCE_LUAJIT ${LuaJIT_FOUND})
endif ()
option(USE_LUAJIT ""Use LuaJIT"" ${FORCE_LUAJIT})

if (FORCE_LUAJIT)
    if (APPLE)
        set(CMAKE_EXE_LINKER_FLAGS ""-pagezero_size 10000 -image_base 100000000"")
    endif ()
else ()
    find_package(Lua REQUIRED)
endif ()

find_package(Boost 1.53.0 REQUIRED COMPONENTS date_time system filesystem iostreams)

include_directories(${Boost_INCLUDE_DIRS} ${Crypto++_INCLUDE_DIR} ${LUA_INCLUDE_DIR} ${MYSQL_INCLUDE_DIR} ${PUGIXML_INCLUDE_DIR})
target_link_libraries(tfs PRIVATE
        Boost::date_time
        Boost::system
        Boost::filesystem
        Boost::iostreams
        ${CMAKE_THREAD_LIBS_INIT}
        ${Crypto++_LIBRARIES}
        ${LUA_LIBRARIES}
        ${MYSQL_CLIENT_LIBS}
        ${PUGIXML_LIBRARIES}
        )

### INTERPROCEDURAL_OPTIMIZATION ###
cmake_policy(SET CMP0069 NEW)
include(CheckIPOSupported)
check_ipo_supported(RESULT result OUTPUT error)
if (result)
    message(STATUS ""IPO / LTO enabled"")
    set_target_properties(tfs PROPERTIES INTERPROCEDURAL_OPTIMIZATION True)
else ()
    message(STATUS ""IPO / LTO not supported: <${error}>"")
endif ()
### END INTERPROCEDURAL_OPTIMIZATION ###

### Git Version ###
# Define the two required variables before including
# the source code for watching a git repository.
set(PRE_CONFIGURE_FILE ""cmake/gitmetadata.h.in"")
set(POST_CONFIGURE_FILE ""${CMAKE_CURRENT_BINARY_DIR}/gitmetadata.h"")
include(git_watcher)
if (Git_FOUND)
    add_dependencies(tfs check_git)
    target_include_directories(tfs PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
endif()
### END  Git Version ###
",3.10,3.1
28958,tskisner,pytoast,False,False,False,False,False,10,C++,2020-05-16 22:03:10+00:00,2015-04-09 16:31:29+00:00,19,1509,"# TOAST

# This minimum version is mostly set in order to get a newer version
# of the FindMPI check.  Note that you can easily install a newer cmake version
# using conda or pip.
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

foreach(policy
    CMP0048
    CMP0074
    CMP0077
  )
  if(POLICY ${policy})
    cmake_policy(SET ${policy} NEW)
  endif()
endforeach()

project(toast VERSION 2.3.0 LANGUAGES C CXX)

# Force C++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Auxiliary files
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake"")

# Copy the RELEASE file into the build directory
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/RELEASE""
    ""${CMAKE_CURRENT_BINARY_DIR}/RELEASE""
    COPYONLY
)

# Use GNUInstallDirs to install libraries into correct locations on all
# platforms.
include(GNUInstallDirs)

# Build defaults
include(BuildType)

# We are building libraries that will eventually be linked into shared
# modules.  All code should be built with PIC.
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# External packages

# In some situations (like building python wheels), it is useful to statically link to
# our external dependencies.  This allows us to ship self-contained compiled
# extensions.  We check a variable here, and if set, we look for static versions of
# our dependencies.
#
if(NOT TOAST_STATIC_DEPS AND ENV{TOAST_STATIC_DEPS})
  set(TOAST_STATIC_DEPS $ENV{TOAST_STATIC_DEPS})
endif()

find_package(OpenMP)

if(TOAST_STATIC_DEPS)
    set(BLA_STATIC TRUE)
    set(FFTW_USE_STATIC_LIBS TRUE)
    set(AATM_USE_STATIC_LIBS TRUE)
    set(SUITESPARSE_USE_STATIC_LIBS TRUE)
endif()

find_package(BLAS)

if(BLAS_FOUND)
    find_package(LAPACK)
    if(LAPACK_FOUND)
        find_package(LAPACKnames)
    else(LAPACK_FOUND)
        message(SEND_ERROR ""Could not find a working LAPACK installation"")
    endif(LAPACK_FOUND)
endif(BLAS_FOUND)

find_package(FFTW)

find_package(AATM)

find_package(SuiteSparse)

find_package(MPI)

find_package(PythonInterp REQUIRED)

find_package(MPI4PY)

# Internal products

enable_testing()
add_subdirectory(src)
add_subdirectory(pipelines)
",3.10,3.1
29349,enfiskutensykkel,ssd-gpu-dma,False,False,False,False,False,4,C,2020-03-05 12:26:52+00:00,2017-01-09 09:17:52+00:00,123,233,"cmake_minimum_required (VERSION 3.1)
project (libnvm LANGUAGES C CXX)

set (CMAKE_C_STANDARD 99)
set (CMAKE_CXX_STANDARD 11)

set (THREADS_PREFER_PTHREAD_FLAG ON)
find_package (Threads REQUIRED)
find_package (CUDA 8.0)


set (DIS ""/opt/DIS"" CACHE PATH ""SISCI install location"")
set (NVIDIA """" CACHE PATH ""Path to Nvidia driver source"")
set (KERNEL ""/lib/modules/${CMAKE_SYSTEM_VERSION}/build"" CACHE PATH ""Path to kernel source, or module directory"")

set (nvidia_archs ""30;50;52;60;61;70"" CACHE STRING ""NVIDIA compute architectures"")
set (no_smartio_samples false CACHE BOOL ""Do not use SISCI for examples"")
set (no_smartio_benchmarks false CACHE BOOL ""Do not use SISCI for benchmarks"")
set (no_smartio false CACHE BOOL ""Do not use SISCI for library or examples"")
set (no_module false CACHE BOOL ""Do not build kernel module"")
set (no_cuda false CACHE BOOL ""Do not build library with CUDA support"")
set (no_cc false CACHE BOOL ""Do not assume cache-coherent architecture"")
set (BUILD_SHARED_LIBS true CACHE BOOL ""Build shared library, set to false for static"")

if (no_smartio)
    set (no_smartio_samples true)
    set (no_smartio_benchmarks true)
endif ()

# Set global compiler flags
set (GPU_ARCHS """" CACHE INTERNAL """" FORCE)
foreach (arch ${nvidia_archs})
    string (CONCAT GPU_ARCHS ${GPU_ARCHS} "" -gencode arch=compute_${arch},code=sm_${arch}"")
endforeach ()

set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wextra"" CACHE INTERNAL """" FORCE)
set (CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG} -g -DDEBUG"" CACHE INTERNAL """" FORCE)
set (CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -O2"" CACHE INTERNAL """" FORCE)
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra"" CACHE INTERNAL """" FORCE)
set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG"" CACHE INTERNAL """" FORCE)
set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O2"" CACHE INTERNAL """" FORCE)
set (CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} -D__CUDA__;-std=c++11;${GPU_ARCHS}"")
set (CUDA_NVCC_FLAGS_RELEASE ""${CMAKE_NVCC_FLAGS_RELEASE} -O2"" CACHE INTERNAL """" FORCE)

if (no_cc)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D__NO_COHERENCE__"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_C_FLAGS} -D__NO_COHERENCE__"")
    set(CCUDA_NVCC_FLAGS ""${CMAKE_C_FLAGS} -D__NO_COHERENCE__"")
endif ()


# Try to find Nvidia driver
if (CUDA_FOUND AND NOT no_cuda)

    # Try to find Nvidia headers (will choose the newest version)
    file (GLOB_RECURSE driver_paths ""/usr/src/nvidia-*/nv-p2p.h"")
    string (REPLACE ""nv-p2p.h"" """" driver_paths ""${driver_paths}"")
    if (driver_paths)
        list (REVERSE driver_paths)
    endif ()

    find_path (driver_include NAMES ""nv-p2p.h"" PATHS ""${NVIDIA}"" ${driver_paths})
    set (driver_dir ""${driver_include}"")

    # Find Nvidia driver symbols
    if (NOT EXISTS ""${driver_dir}/Module.symvers"")
        get_filename_component (driver_dir ""${driver_dir}"" DIRECTORY)
    endif ()

    message(STATUS ""Using NVIDIA driver found in ${driver_dir}"")
endif ()


# Try to find SISCI
find_path (sisci_include NAMES sisci_types.h sisci_api.h sisci_error.h PATHS ""${DIS}/include"" ""${DIS}"")
find_library (sisci_lib NAMES sisci PATHS ""${DIS}/lib64"" ""${DIS}/lib"" NO_DEFAULT_PATH)
if (sisci_lib)
    message(STATUS ""Using DIS library ${sisci_lib}"")
endif ()

# Library source files
set (libnvm_root ""${PROJECT_SOURCE_DIR}/src"")
file (GLOB libnvm_source ""${libnvm_root}/*.c"")
file (GLOB libnvm_dis_source ""${libnvm_root}/dis/*.c"")
file (GLOB libnvm_include ""${PROJECT_BINARY_DIR}/include/*.h"" ""${PROJECT_SOURCE_DIR}/include/*.h"")

# Module source files
set (module_root ""${PROJECT_SOURCE_DIR}/module"")
file (GLOB module_source ""${module_root}/*.c"")

# Benchmarks
set (benchmarks_root ""${PROJECT_SOURCE_DIR}/benchmarks"")

# Samples shared files
set (samples_root ""${CMAKE_SOURCE_DIR}/examples"")



# Specify where stuff should be placed
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib"")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
set (module_output ""${CMAKE_BINARY_DIR}/module"")



# Set include directories
include_directories (""${PROJECT_BINARY_DIR}/include"" ""${PROJECT_SOURCE_DIR}/include"")
if (sisci_include)
    include_directories (""${PROJECT_BINARY_DIR}/include"" ""${PROJECT_SOURCE_DIR}/include"" ""${sisci_include}"" ""${sisci_include}/dis"")
endif ()


# Create NVME library target
add_library (libnvm ${libnvm_source})
target_include_directories (libnvm PRIVATE ""${libnvm_root}"" ""${libnvm_root}/dis"")


if (sisci_include AND sisci_lib AND NOT no_smartio)
    target_sources (libnvm PRIVATE ${libnvm_dis_source})
    target_compile_definitions (libnvm PRIVATE _REENTRANT _SISCI __DIS_CLUSTER__)
    target_link_libraries (libnvm ${sisci_lib} Threads::Threads)

else ()
    target_link_libraries (libnvm Threads::Threads)

endif ()

if (CUDA_FOUND AND NOT no_cuda)
    target_compile_definitions(libnvm PRIVATE _CUDA __CUDA__)
endif ()

# Set name of library
#set_target_properties (libnvm PROPERTIES OUTPUT_NAME ""${CMAKE_PROJECT_NAME}"")
set_target_properties (libnvm PROPERTIES OUTPUT_NAME ""nvm"")

# Set install locations
install (FILES ${libnvm_include} DESTINATION ""include"")
install (TARGETS libnvm DESTINATION ""lib"")



# Create kernel module makefile
if (NOT no_module)
    if (CUDA_FOUND AND NOT no_cuda AND EXISTS ""${driver_dir}/Module.symvers"")
        set (module_ccflags ""-D_CUDA -I${driver_include} -I${libnvm_root}"")
        set (module_symbols ""${driver_dir}/Module.symvers"")
        message(STATUS ""Configuring kernel module with CUDA"")
    else ()
        set (module_ccflags ""-I${libnvm_root}"")
        message(STATUS ""Configuring kernel module without CUDA"")
    endif ()

    configure_file (""${module_root}/Makefile.in"" ""${module_output}/Makefile"" @ONLY)

    add_custom_target (module ""${CMAKE_MAKE_PROGRAM}"" WORKING_DIRECTORY ""${module_output}"")
endif ()



# Macro for creating sample target
macro (make_sample target binary_name files)
    add_executable (${target} EXCLUDE_FROM_ALL ${files})

    add_dependencies (${target} libnvm)
    target_link_libraries (${target} libnvm)

    # TODO: Do we want to install samples or not?
    #set_target_properties (${target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/samples"")
    set_target_properties (${target} PROPERTIES OUTPUT_NAME ""nvm-${binary_name}"")

    list (APPEND sample_targets ""${target}"")
    set (sample_targets ""${sample_targets}"" PARENT_SCOPE)

    #install (TARGETS ${target} DESTINATION ""bin"")
endmacro ()



# Macro for making a target depend on SISCI
macro (set_sisci target)
    if (NOT no_smartio_samples AND sisci_include AND sisci_lib)
        target_link_libraries (${target} ${sisci_lib})
        target_compile_definitions (${target} PRIVATE _REENTRANT __DIS_CLUSTER__)
    else ()
        list (REMOVE_ITEM sample_targets ""${target}"")
        set (sample_targets ""${sample_targets}"" PARENT_SCOPE)
        set_target_properties (${target} PROPERTIES EXCLUDE_FROM_ALL 1)
    endif ()
endmacro ()



# Make target depend on pthreads
macro (set_multithread target)
    target_link_libraries (${target} Threads::Threads)
endmacro ()


# Set preferred ordering for sample targets
macro (make_samples_choice ctarget sisci_target other_target)
    if (NOT no_smartio_samples AND sisci_include AND sisci_lib)
        add_custom_target (${ctarget} DEPENDS ${sisci_target})
        list (REMOVE_ITEM sample_targets ""${other_target}"")
        set (sample_targets ""${sample_targets}"" PARENT_SCOPE)
    else ()
        add_custom_target (${ctarget} DEPENDS ${other_target})
        list (REMOVE_ITEM sample_targets ""${sisci_target}"")
        set (sample_targets ""${sample_targets}"" PARENT_SCOPE)
    endif ()
endmacro ()



# Make benchmark target
# We assume all benchmarks are CUDA programs
macro (make_benchmark target binary_name files)
    if (CUDA_FOUND AND NOT no_cuda)
        cuda_add_executable (${target} EXCLUDE_FROM_ALL ${files} OPTIONS ${GPU_ARCHS} -D__CUDA__) # Ugly bugly
        target_compile_definitions (${target} PRIVATE __CUDA__)

        add_dependencies (${target} libnvm)
        target_link_libraries (${target} libnvm)
        set_target_properties (${target} PROPERTIES OUTPUT_NAME ""nvm-${binary_name}"")

        list (APPEND benchmark_targets ""${target}"")
        set (benchmark_targets ""${benchmark_targets}"" PARENT_SCOPE)
    endif ()
endmacro ()

macro (make_sisci_benchmark target binary_name files)
    if (CUDA_FOUND AND NOT no_cuda AND sisci_include AND sisci_lib AND NOT (no_smartio OR no_smartio_benchmarks))
        cuda_add_executable (${target} ${files} EXCLUDE_FROM_ALL OPTIONS ${GPU_ARCHS} -D__CUDA__ -D__DIS_CLUSTER__ -D_REENTRANT)
        target_compile_definitions(${target} PRIVATE __DIS_CLUSTER__ __CUDA__ _REENTRANT)

        add_dependencies (${target} libnvm)
        target_link_libraries (${target} libnvm ${sisci_lib})
        set_target_properties (${target} PROPERTIES OUTPUT_NAME ""nvm-${binary_name}"")

        list (APPEND benchmark_targets ""${target}"")
        set (benchmark_targets ""${benchmark_targets}"" PARENT_SCOPE)
    endif ()
endmacro ()

#macro (make_sisci_ptx prefix files)
#    cuda_compile_ptx (${prefix}_files ""${files}"" OPTIONS -D__CUDA__ -D__DIS_CLUSTER__ -D_REENTRANT)
#    add_custom_target (${prefix}-ptx DEPENDS ${prefix_files} SOURCES ${files})
#endmacro ()


# Set preferred ordering for benchmark targets
macro (make_benchmark_choice ctarget sisci_target other_target)
    if (NOT no_smartio_benchmarks AND sisci_include AND sisci_lib AND NOT no_smartio)
        add_custom_target (${ctarget} DEPENDS ${sisci_target})
        list (REMOVE_ITEM benchmark_targets ""${other_target}"")
        set (benchmark_targets ""${benchmark_targets}"" PARENT_SCOPE)

    else ()
        add_custom_target (${ctarget} DEPENDS ${other_target})
        list (REMOVE_ITEM benchmark_targets ""${sisci_target}"")
        set (benchmark_targets ""${benchmark_targets}"" PARENT_SCOPE)

    endif ()
endmacro ()



# Add individual samples
add_subdirectory (""${samples_root}/rpc"")
add_subdirectory (""${samples_root}/read-blocks"")
add_subdirectory (""${samples_root}/identify"")
add_subdirectory (""${samples_root}/integrity"")

# Build all samples
add_custom_target (samples DEPENDS ${sample_targets})
add_custom_target (examples DEPENDS samples)


# Add individual benchmarks
if (CUDA_FOUND)
    add_subdirectory (""${benchmarks_root}/latency"")
    add_subdirectory (""${benchmarks_root}/cuda"")
    add_custom_target (benchmarks DEPENDS ${benchmark_targets})
endif ()

",3.1,3.1
29405,inilabs,libcaer,False,False,False,False,False,4,C,2020-05-11 15:52:26+00:00,2016-05-10 10:43:15+00:00,80,1542,"# Init CMake (require at least version 3.10.0)
CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0)

# General build settings
IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Possible build types: None Debug Release RelWithDebInfo MinSizeRel"")
ENDIF()

IF (NOT CMAKE_INSTALL_PREFIX)
	IF (UNIX AND NOT APPLE)
		SET(CMAKE_INSTALL_PREFIX ""/usr"" CACHE STRING ""CMake default install prefix, set to /usr on Unix/Linux"")
	ELSEIF (APPLE)
		SET(CMAKE_INSTALL_PREFIX ""/usr/local"" CACHE STRING ""CMake default install prefix, set to /usr/local on macOS"")
	ELSE()
		MESSAGE(FATAL_ERROR ""CMAKE_INSTALL_PREFIX is not set"")
	ENDIF()
ENDIF()

IF (NOT ENABLE_STATIC)
	SET(ENABLE_STATIC 0 CACHE BOOL ""Build and install static library in addition to default shared library"")
ENDIF()

IF (NOT ENABLE_SERIALDEV)
	SET(ENABLE_SERIALDEV 0 CACHE BOOL ""Enable support for serial port devices using libserialport"")
ENDIF()

IF (NOT ENABLE_OPENCV)
	SET(ENABLE_OPENCV 0 CACHE BOOL ""Enable support for frame enhancements using OpenCV"")
ENDIF()

IF (NOT UDEV_INSTALL)
	SET(UDEV_INSTALL 1 CACHE BOOL ""Install udev rules on Linux"")
ENDIF()

IF (NOT UDEV_SELINUX)
	SET(UDEV_SELINUX 0 CACHE BOOL ""Install SELinux-enabled udev rules on Linux"")
ENDIF()

IF (NOT EXAMPLES_INSTALL)
	SET(EXAMPLES_INSTALL 0 CACHE BOOL ""Build and install examples"")
ENDIF()

# Project name and version
PROJECT(libcaer
	VERSION 3.3.7
	LANGUAGES C CXX)
SET(CMAKE_C_STANDARD 11)
SET(CMAKE_C_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

# Define installation paths
INCLUDE(GNUInstallDirs)

# Custom CMake base module
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmakemod)
INSTALL(FILES cmakemod/caer-base.cmake DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/caer)

# Basic setup for cAER
INCLUDE(caer-base)
CAER_SETUP()

# Required: threads, math
SET(BASE_LIBS m)
SET(LIBCAER_PKGCONFIG_LIBS_PRIVATE ""-lm"")

SET(BASE_LIBS ${BASE_LIBS} ${SYSTEM_THREAD_LIBS})
SET(LIBCAER_PKGCONFIG_LIBS_PRIVATE ""${LIBCAER_PKGCONFIG_LIBS_PRIVATE} ${SYSTEM_THREAD_LIBS}"")

# Windows needs extra winsock library for portable endian functions.
IF (OS_WINDOWS)
	SET(BASE_LIBS ${BASE_LIBS} ws2_32)
ENDIF()

MESSAGE(STATUS ""Base libraries: ${BASE_LIBS}"")

# Search for external libraries with pkg-config.
INCLUDE(FindPkgConfig)

# Required: basic USB devices support
PKG_CHECK_MODULES(libusb REQUIRED IMPORTED_TARGET libusb-1.0>=1.0.17)
SET(LIBCAER_PKGCONFIG_REQUIRES_PRIVATE ""libusb-1.0 >= 1.0.17"")

# Optional: serial devices support
IF (ENABLE_SERIALDEV)
	# Require libserialport, minimum 0.1.1 version.
	PKG_CHECK_MODULES(libserialport REQUIRED IMPORTED_TARGET libserialport>=0.1.1)
	SET(LIBCAER_PKGCONFIG_REQUIRES_PRIVATE ""${LIBCAER_PKGCONFIG_REQUIRES_PRIVATE}, libserialport >= 0.1.1"")
ENDIF()

# Optional: OpenCV support for frame enhancement
IF (ENABLE_OPENCV)
	# OpenCV support.
	FIND_PACKAGE(OpenCV REQUIRED COMPONENTS core imgproc)
	IF (OpenCV_VERSION VERSION_LESS ""3.1.0"")
		MESSAGE(FATAL_ERROR ""Cannot find OpenCV 3.1.0 or newer."")
	ENDIF()
ENDIF()

# Add main include dir for all targets
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include/)

# Subdirectories
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(src)

# Generate pkg-config file
CONFIGURE_FILE(libcaer.pc.in libcaer.pc @ONLY)

INSTALL(FILES ${CMAKE_BINARY_DIR}/libcaer.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

# Export the cmake configuration for the install tree
INCLUDE(CMakePackageConfigHelpers)
WRITE_BASIC_CONFIG_VERSION_FILE(
	${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY SameMajorVersion)
SET(include_dirs ${CMAKE_INSTALL_INCLUDEDIR})
SET(export_destination ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
CONFIGURE_PACKAGE_CONFIG_FILE(
	${PROJECT_SOURCE_DIR}/cmakemod/${PROJECT_NAME}Config.cmake.in
	${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
	INSTALL_DESTINATION ${export_destination}
	PATH_VARS include_dirs export_destination)
INSTALL(EXPORT libcaer-exports
	NAMESPACE libcaer::
	DESTINATION ${export_destination})
INSTALL(FILES
	${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
	${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
	DESTINATION ${export_destination})
UNSET(include_dirs)
UNSET(export_destination)

# Install udev rules
IF (OS_LINUX AND UDEV_INSTALL)
	MESSAGE(STATUS ""Installing global udev rules into /lib/udev/rules.d/"")

	IF (UDEV_SELINUX)
		INSTALL(FILES
			docs/udev-rules/selinux/65-inivation.rules
			DESTINATION ""/lib/udev/rules.d/"")
	ELSE()
		INSTALL(FILES
			docs/udev-rules/65-inivation.rules
			DESTINATION ""/lib/udev/rules.d/"")
	ENDIF()
ENDIF()

# Automatic documentation generation support
FIND_PACKAGE(Doxygen)

IF (DOXYGEN_FOUND)
	ADD_SUBDIRECTORY(docs)
ENDIF()

# Compile all examples
IF (EXAMPLES_INSTALL)
	ADD_SUBDIRECTORY(examples)
ENDIF()

# Support automatic RPM generation
SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})
SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
SET(CPACK_PACKAGE_RELEASE 1)
SET(CPACK_PACKAGE_CONTACT ""support@inivation.com"")
SET(CPACK_PACKAGE_VENDOR ""iniVation AG"")
SET(CPACK_PACKAGE_DESCRIPTION ""Minimal C library to access, configure and get/send AER data from sensors or to/from neuromorphic processors."")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${CPACK_PACKAGE_DESCRIPTION})
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_PACKAGE_FILE_NAME ""${CPACK_PACKAGE_NAME}.${CMAKE_SYSTEM_PROCESSOR}"")
SET(CPACK_GENERATOR ""RPM"" ""DEB"")
SET(CPACK_RPM_PACKAGE_AUTOREQ 1)
#SET(CPACK_RPM_PACKAGE_REQUIRES ""libusbx >= 1.0.17, libserialport >= 0.1.1, opencv >= 3.1.0"")
SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS 1)
#SET(CPACK_DEBIAN_PACKAGE_DEPENDS ""libusb-1.0-0 (>= 1.0.17), libserialport0 (>= 0.1.1), libopencv-contrib3.1 (>= 3.1.0)"")

INCLUDE(CPack)
",3.10.0,3.1
29415,phma,bezitopo,False,False,False,False,False,3,C++,2020-05-11 08:51:45+00:00,2014-12-02 16:32:53+00:00,7,2129,"project(bezitopo)
cmake_minimum_required(VERSION 3.1.0)
# Copyright 2012-2020 Pierre Abbat.
# Copyright 2020 звездочёт.
# This file is part of Bezitopo.
#
# Bezitopo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Bezitopo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License and Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# and Lesser General Public License along with Bezitopo. If not, see
# <http://www.gnu.org/licenses/>.

include(TestBigEndian)
include(CheckTypeSize)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)
set(SHARE_DIR ${CMAKE_INSTALL_PREFIX}/share/bezitopo)

option (FORCE_COLORED_OUTPUT ""Always produce ANSI-colored output (GNU/Clang only)."" FALSE)
if (${FORCE_COLORED_OUTPUT})
  if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
    add_compile_options (-fdiagnostics-color=always)
  elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
    add_compile_options (-fcolor-diagnostics)
  endif ()
endif ()

set(FUZZ none)
#Setting FUZZ to boldatni disables reading all geoid formats except boldatni
#in convertgeoid and disables the boldatni magic string check.

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
find_package(Qt5 COMPONENTS Core Widgets Gui LinguistTools REQUIRED)
find_package(FFTW)
qt5_add_resources(lib_resources src/viewtin.qrc)
qt5_add_translation(qm_files src/bezitopo_en.ts
                             src/bezitopo_es.ts)
# To update translations, run ""lupdate *.cpp -ts *.ts"" in the source directory.

set(header_files src/angle.h
                 src/arc.h
                 src/bezier.h
                 src/bezier3d.h
                 src/binio.h
                 src/boundrect.h
                 src/breakline.h
                 src/circle.h
                 src/cogo.h
                 src/cogospiral.h
                 src/color.h
                 src/contour.h
                 src/csv.h
                 src/document.h
                 src/drawobj.h
                 src/ellipsoid.h
                 src/except.h
                 src/geoid.h
                 src/geoidboundary.h
                 src/globals.h
                 src/halton.h
                 src/intloop.h
                 src/latlong.h
                 src/layer.h
                 src/ldecimal.h
                 src/leastsquares.h
                 src/linetype.h
                 src/manyarc.h
                 src/manysum.h
                 src/matrix.h
                 src/measure.h
                 src/minquad.h
                 src/objlist.h
                 src/penwidth.h
                 src/pnezd.h
                 src/point.h
                 src/pointlist.h
                 src/polyline.h
                 src/projection.h
                 src/ps.h
                 src/qindex.h
                 src/quaternion.h
                 src/random.h
                 src/relprime.h
                 src/rootfind.h
                 src/roscat.h
                 src/segment.h
                 src/spiral.h
                 src/spolygon.h
                 src/tin.h
                 src/vball.h
                 src/vcurve.h
                 src/xml.h
                 src/xyz.h
                 src/zoom.h)

# MS Visual C++ cannot build both static and shared libraries with the same name.
# If you ask for a static library, it makes bezitopo.lib. If you ask for a
# shared library, it makes bezitopo.dll, which is the shared library, and
# bezitopo.lib, the import library for the DLL.
# This is not a problem for MinGW, which makes three files: libbezitopo.a,
# the static library; libbezitopo.dll, the shared library; and libbezitopo.dll.a,
# the import library for the DLL.
set(MAKE_STATIC bezilib0)
set(MAKE_SHARED bezilib1)
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"" AND DEFINED MSVC_STATIC)
  set(MAKE_SHARED """")
endif ()
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"" AND NOT DEFINED MSVC_STATIC)
  set(MAKE_STATIC """")
endif ()
set(sourcelib src/angle.cpp
              src/arc.cpp
              src/bezier.cpp
              src/bezier3d.cpp
              src/binio.cpp
              src/boundrect.cpp
              src/breakline.cpp
              src/circle.cpp
              src/cogo.cpp 
              src/cogospiral.cpp
              src/color.cpp
              src/contour.cpp
              src/csv.cpp
              src/document.cpp
              src/drawobj.cpp
              src/ellipsoid.cpp
              src/except.cpp
              src/geoid.cpp
              src/geoidboundary.cpp
              src/halton.cpp
              src/intloop.cpp
              src/latlong.cpp
              src/layer.cpp
              src/ldecimal.cpp
              src/leastsquares.cpp
              src/manyarc.cpp
              src/manysum.cpp
              src/matrix.cpp
              src/measure.cpp
              src/minquad.cpp
              src/objlist.cpp
              src/penwidth.cpp
              src/pnezd.cpp
              src/point.cpp
              src/pointlist.cpp
              src/polyline.cpp
              src/projection.cpp
              src/ps.cpp
              src/qindex.cpp
              src/quaternion.cpp
              src/random.cpp
              src/relprime.cpp
              src/rootfind.cpp
              src/segment.cpp
              src/smooth5.cpp
              src/spiral.cpp
              src/spolygon.cpp
              src/stl.cpp
              src/tin.cpp
              src/vball.cpp
              src/vcurve.cpp
              src/xml.cpp)
if (MAKE_STATIC)
add_library(bezilib0 STATIC ${sourcelib})
endif ()
if (MAKE_SHARED)
add_library(bezilib1 SHARED ${sourcelib})
endif ()
add_executable(bezitopo ${sourcelib}
                        src/absorient.cpp
                        src/bezitopo.cpp
                        src/closure.cpp
                        src/cvtmeas.cpp
                        src/firstarg.cpp
                        src/icommon.cpp
                        src/kml.cpp
                        src/mkpoint.cpp
                        src/plot.cpp
                        src/raster.cpp
                        src/scalefactor.cpp
                        src/test.cpp)
add_executable(bezitest ${sourcelib}
                        src/absorient.cpp
                        src/bezitest.cpp
                        src/bicubic.cpp
                        src/carlsontin.cpp
                        src/crosssection.cpp
                        src/dxf.cpp
                        src/firstarg.cpp
                        src/histogram.cpp
                        src/hlattice.cpp
                        src/hnum.cpp
                        src/kml.cpp
                        src/plot.cpp
                        src/ptin.cpp
                        src/raster.cpp
                        src/rawdata.cpp
                        src/readtin.cpp
                        src/refinegeoid.cpp
                        src/sourcegeoid.cpp
                        src/test.cpp
                        src/textfile.cpp
                        src/tintext.cpp
                        src/zoom.cpp)
add_executable(clotilde ${sourcelib}
                        src/clotilde.cpp
                        src/cmdopt.cpp)
add_executable(convertgeoid ${sourcelib}
                            src/bicubic.cpp
                            src/cmdopt.cpp
                            src/convertgeoid.cpp
                            src/histogram.cpp
                            src/hlattice.cpp
                            src/kml.cpp
                            src/raster.cpp
                            src/refinegeoid.cpp
                            src/sourcegeoid.cpp)
add_executable(viewtin ${sourcelib}
                       src/carlsontin.cpp
                       src/cidialog.cpp
                       src/dxf.cpp
                       src/factordialog.cpp
                       src/firstarg.cpp
                       src/kml.cpp
                       src/linetype.cpp
                       src/llvalidator.cpp
                       src/measurebutton.cpp
                       src/plwidget.cpp
                       src/ptin.cpp
                       src/readtin.cpp
                       src/rendercache.cpp
                       src/test.cpp
                       src/textfile.cpp
                       src/tintext.cpp
                       src/tinwindow.cpp
                       src/topocanvas.cpp
                       src/viewtin.cpp
                       src/zoom.cpp
                       src/zoombutton.cpp
                      ${lib_resources}
                      ${qm_files})
add_executable(sitecheck ${sourcelib}
                         src/carlsontin.cpp
                         src/cidialog.cpp
                         src/dxf.cpp
                         src/factordialog.cpp
                         src/firstarg.cpp
                         src/kml.cpp
                         src/linetype.cpp
                         src/llvalidator.cpp
                         src/measurebutton.cpp
                         src/plwidget.cpp
                         src/ptin.cpp
                         src/readtin.cpp
                         src/rendercache.cpp
                         src/sitecheck.cpp
                         src/sitewindow.cpp
                         src/test.cpp
                         src/textfile.cpp
                         src/tintext.cpp
                         src/topocanvas.cpp
                         src/zoom.cpp
                         src/zoombutton.cpp
                         ${lib_resources}
                         ${qm_files})
add_executable(pangeoid src/geoidwindow.cpp src/pangeoid.cpp src/zoom.cpp)
if (${FFTW_FOUND})
add_executable(transmer ${sourcelib}
                        src/transmer.cpp)
endif (${FFTW_FOUND})
if (MAKE_STATIC)
target_link_libraries(bezilib0 Qt5::Widgets Qt5::Core)
target_compile_definitions(bezilib0 PUBLIC _USE_MATH_DEFINES)
endif ()
if (MAKE_SHARED)
target_link_libraries(bezilib1 Qt5::Widgets Qt5::Core)
target_compile_definitions(bezilib1 PUBLIC _USE_MATH_DEFINES)
endif ()
target_link_libraries(bezitopo Qt5::Widgets Qt5::Core)
target_compile_definitions(bezitopo PUBLIC _USE_MATH_DEFINES)
target_link_libraries(bezitest Qt5::Widgets Qt5::Core)
target_compile_definitions(bezitest PUBLIC _USE_MATH_DEFINES)
target_link_libraries(clotilde Qt5::Widgets Qt5::Core)
target_compile_definitions(clotilde PUBLIC _USE_MATH_DEFINES)
target_link_libraries(convertgeoid Qt5::Widgets Qt5::Core)
target_compile_definitions(convertgeoid PUBLIC _USE_MATH_DEFINES)
target_link_libraries(viewtin Qt5::Widgets Qt5::Core)
target_compile_definitions(viewtin PUBLIC _USE_MATH_DEFINES)
set_target_properties(viewtin PROPERTIES WIN32_EXECUTABLE TRUE)
target_link_libraries(sitecheck Qt5::Widgets Qt5::Core)
target_compile_definitions(sitecheck PUBLIC _USE_MATH_DEFINES)
set_target_properties(sitecheck PROPERTIES WIN32_EXECUTABLE TRUE)
target_link_libraries(pangeoid Qt5::Widgets Qt5::Core)
target_compile_definitions(pangeoid PUBLIC _USE_MATH_DEFINES)
if (${FFTW_FOUND})
target_link_libraries(transmer Qt5::Widgets Qt5::Core ${FFTW_LIBRARIES})
target_compile_definitions(transmer PUBLIC _USE_MATH_DEFINES POINTLIST)
endif (${FFTW_FOUND})
# POINTLIST: the program uses pointlists. Affects BoundRect.
# CONVERTGEOID: the program reads source geoid files. Allows raster output of source geoids.
# NUMSGEOID: the geoquad class needs to count points that are in and out of source geoids.
# FLATTRIANGLE: the program handles only flat triangles.
if (MAKE_STATIC)
target_compile_definitions(bezilib0 PUBLIC POINTLIST)
endif ()
if (MAKE_SHARED)
target_compile_definitions(bezilib1 PUBLIC POINTLIST)
endif ()
target_compile_definitions(convertgeoid PUBLIC CONVERTGEOID NUMSGEOID POINTLIST)
target_compile_definitions(bezitest PUBLIC NUMSGEOID POINTLIST)
target_compile_definitions(bezitopo PUBLIC POINTLIST)
target_compile_definitions(clotilde PUBLIC POINTLIST)
target_compile_definitions(viewtin PUBLIC POINTLIST)
target_compile_definitions(sitecheck PUBLIC POINTLIST FLATTRIANGLE)
#target_compile_definitions(pangeoid PUBLIC CONVERTGEOID NUMSGEOID)

include(CheckIncludeFiles)
check_include_files(time.h HAVE_TIME_H)
check_include_files(sys/time.h HAVE_SYS_TIME_H)
check_include_files(sys/resource.h HAVE_SYS_RESOURCE_H)
check_include_files(windows.h HAVE_WINDOWS_H)

# Define NO_INSTALL when compiling for fuzzing. This avoids the error
# ""The install of the perfecttin target requires changing an RPATH"", which
# occurs when using the AFL compiler wrapper with the Ninja generator.
# There is no need to install a binary built for fuzzing.
if (NOT DEFINED NO_INSTALL)
install(TARGETS bezitopo convertgeoid viewtin clotilde DESTINATION bin)
install(TARGETS ${MAKE_SHARED} ${MAKE_STATIC} DESTINATION lib)
install(FILES ${PROJECT_BINARY_DIR}/config.h DESTINATION include/bezitopo)
install(FILES ${qm_files} projections.txt transmer.dat DESTINATION share/bezitopo)
install(FILES ${header_files} DESTINATION include/bezitopo)
install(FILES src/bezitopo.h DESTINATION include)
endif ()

if (WIN32)
include(windeployqt)
windeployqt(sitecheck bin)
endif (WIN32)

test_big_endian(BIGENDIAN)
check_type_size(""int"" INT)
check_type_size(""int *"" INT_POINTER)

set(BEZITOPO_MAJOR_VERSION 0)
set(BEZITOPO_MINOR_VERSION 1)
set(BEZITOPO_PATCH_VERSION 5)
set(BEZITOPO_VERSION ${BEZITOPO_MAJOR_VERSION}.${BEZITOPO_MINOR_VERSION}.${BEZITOPO_PATCH_VERSION})
set(COPY_YEAR 2019)

if (MAKE_STATIC)
set_target_properties(bezilib0 PROPERTIES OUTPUT_NAME ""bezitopo"" VERSION ${BEZITOPO_VERSION})
endif ()
if (MAKE_SHARED)
set_target_properties(bezilib1 PROPERTIES OUTPUT_NAME ""bezitopo"" VERSION ${BEZITOPO_VERSION})
endif ()

include_directories(${PROJECT_BINARY_DIR})
if (${FFTW_FOUND})
include_directories(${FFTW_INCLUDES})
endif (${FFTW_FOUND})
configure_file (config.h.in config.h)
configure_file (tinytin-txt.dxf tinytin-txt.dxf COPYONLY)
configure_file (tinytin-bin.dxf tinytin-bin.dxf COPYONLY)
configure_file (transmer.dat transmer.dat COPYONLY)

set(CPACK_PACKAGE_VERSION_MAJOR ${BEZITOPO_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${BEZITOPO_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${BEZITOPO_PATCH_VERSION})
set(CPACK_SOURCE_IGNORE_FILES /\\\\.git;.*~)
include(CPack)

include(CTest)
add_test(geom bezitest area3 in intersection invalidintersectionlozenge invalidintersectionaster circle)
add_test(arith bezitest relprime manysum brent newton zoom)
add_test(measure bezitest measure)
add_test(calculus bezitest parabinter derivs)
add_test(random bezitest random)
add_test(matrix bezitest matrix)
add_test(quaternion bezitest quaternion)
add_test(drawobj property)
add_test(bezier bezitest triangle vcurve trianglecontours grad)
add_test(pointlist bezitest copytopopoints intloop tripolygon)
add_test(maketin bezitest maketin123 maketindouble maketinaster maketinbigaster maketinstraightrow maketinlongandthin maketinlozenge maketinring maketinwheel maketinellipse)
add_test(angle bezitest integertrig angleconv)
add_test(leastsquares bezitest leastsquares)
add_test(minquad bezitest minquad)
add_test(segment bezitest segment)
add_test(arc bezitest arc)
add_test(spiral bezitest spiral spiralarc cogospiral curly manyarc)
add_test(curvefit bezitest curvefit)
add_test(qindex bezitest qindex)
add_test(makegrad bezitest makegrad)
add_test(raster bezitest rasterdraw)
add_test(dirbound bezitest dirbound)
add_test(stl bezitest stl)
add_test(dxf bezitest tindxf)
add_test(halton bezitest halton)
add_test(polyline bezitest polyline alignment)
add_test(bezier3d bezitest bezier3d)
add_test(fileio bezitest csvline pnezd ldecimal)
add_test(geodesy bezitest ellipsoid projection vball geoid geint)
add_test(convertgeoid0 bezitest hlattice bicubic smooth5 quadhash)
add_test(convertgeoid1 bezitest smallcircle cylinterval geoidboundary gpolyline kml)
add_test(layer bezitest layer color)
add_test(contour bezitest contour foldcontour zigzagcontour tracingstop)
add_test(roscat bezitest roscat absorient)
add_test(histogram bezitest histogram)
",3.1.0,3.1
29424,Subsurface-divelog,subsurface,False,False,False,False,False,142,C++,2020-05-17 21:34:16+00:00,2011-09-03 15:27:51+00:00,1715,17643,"# cmake based build of Subsurface

# Uncomment his to see all commands cmake actually executes
# set(CMAKE_VERBOSE_MAKEFILE ON)

cmake_minimum_required(VERSION 3.1)
project(Subsurface)

# don't process generated files - this is new in 3.10
if (POLICY CMP0071)
	cmake_policy(SET CMP0071 OLD)
endif()

# support Packagename_ROOT environment variable
if (POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW) # CMake 3.12
endif ()

# global settings

set(CMAKE_MODULE_PATH
	${${PROJECT_NAME}_SOURCE_DIR}/cmake/Modules
	${CMAKE_MODULE_PATH}
)

set(CMAKE_AUTOMOC ON)
include(MacroOutOfSourceBuild)
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
    ""We don't support building in source, please create a build folder elsewhere and remember to run git clean -xdf to remove temporary files created by CMake.""
)

#Option for profiling
option(SUBSURFACE_PROFILING_BUILD ""enable profiling of Subsurface binary"" OFF)

#Options regarding usage of pkgconfig
option(LIBGIT2_FROM_PKGCONFIG ""use pkg-config to retrieve libgit2"" OFF)
option(LIBDC_FROM_PKGCONFIG ""use pkg-config to retrieve libdivecomputer"" OFF)
option(LIBGRANTLEE_FROM_PKGCONFIG ""use pkg-config to retrieve grantlee"" OFF)

#Library Handling
option(FORCE_LIBSSH ""force linking with libssh to workaround libgit2 bug"" ON)
option(LIBGIT2_DYNAMIC ""search for libgit2.so before libgit2.a"" OFF)

#Options regarding disabling parts of subsurface.
option(NO_DOCS ""disable the docs"" OFF)
option(NO_PRINTING ""disable the printing support"" OFF)
option(NO_USERMANUAL ""don't include a viewer for the user manual"" OFF)

#Options regarding enabling parts of subsurface
option(BTSUPPORT ""enable support for QtBluetooth (requires Qt5.4 or newer)"" ON)
option(FTDISUPPORT ""enable support for libftdi based serial"" OFF)

# Options regarding What should we build on subsurface
option(MAKE_TESTS ""Make the tests"" ON)

SET(SUBSURFACE_TARGET_EXECUTABLE ""DesktopExecutable"" CACHE STRING ""The type of application, DesktopExecutable or MobileExecutable"")
LIST(APPEND SUBSURFACE_ACCEPTED_EXECUTABLES  ""DesktopExecutable"" ""MobileExecutable"")
SET_PROPERTY(CACHE SUBSURFACE_TARGET_EXECUTABLE PROPERTY STRINGS ${SUBSURFACE_ACCEPTED_EXECUTABLES})

#verify if Platform is correct and warn on wxit with example.
list (FIND SUBSURFACE_ACCEPTED_EXECUTABLES ${SUBSURFACE_TARGET_EXECUTABLE}  _index)
if (_index EQUAL -1)
  message(FATAL_ERROR ""Requested platform not supported, please use one of the following:
    ${SUBSURFACE_ACCEPTED_EXECUTABLES}

    inputted value was: ${SUBSURFACE_TARGET_EXECUTABLE}

    Example: -DSUBSURFACE_TARGET_EXECUTABLE=DesktopExecutable"")
endif()

# SUBSURFACE_SOURCE may be used in subdirectories (tests)
set(SUBSURFACE_SOURCE ${CMAKE_SOURCE_DIR})
add_definitions(-DSUBSURFACE_SOURCE=""${SUBSURFACE_SOURCE}"")

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

#
# TODO: This Compilation part should go on the Target specific CMake.
#
if (CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override"")
	if ((CMAKE_SYSTEM_NAME MATCHES ""Darwin"") AND
	   ((CMAKE_SYSTEM_VERSION MATCHES ""11.4."") OR
	    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.7"") OR
	    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES ""10.8"")))
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
	endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override"")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
	# Warn about possible float conversion errors
	# Use NOT VERSION_LESS since VERSION_GREATER_EQUAL is not available
	# in currently used cmake version.
	if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.9.0"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wfloat-conversion"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wfloat-conversion"")
	endif()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"")
  # using Visual Studio C++
endif()

# set up profiling
if (SUBSURFACE_PROFILING_BUILD)
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pg"")
	SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -pg"")
	SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -pg"")
endif()

# every compiler understands -Wall
set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")

# by detault optimize with -O2 even for debug builds
set (GCC_OPTIMIZATION_FLAGS ""-O2"" CACHE STRING ""GCC optimization flags"")
message (STATUS ""GCC optimization flags: "" ${GCC_OPTIMIZATION_FLAGS})
set (CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}"")
set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}"")

# pkgconfig for required libraries
find_package(PkgConfig)
include(pkgconfig_helper)

# The 'HandleFindXXX' are special libraries that subsurface needs
# to find and configure in a few different ways because of a few
# developers that prefer pkg-config over CMake, so we try to make
# everyone happy. It also sets some variables for each library, so
# if you think a module miss anything, take a look on the specific
# module file.
include(HandleFindGit2)
include(HandleFindLibDiveComputer)
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
        include(HandleFindGrantlee)
	include(HandleUserManual)
endif()
include(HandleFtdiSupport)
include(HandleVersionGeneration)
include(RunOnBuildDir)
include(cmake_variables_helper)

if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
	include_directories(${CMAKE_OSX_SYSROOT}/usr/include/libxml2)
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lxml2 -lxslt -lsqlite3)
else()
	pkg_config_library(LIBXML libxml-2.0 REQUIRED)
	pkg_config_library(LIBSQLITE3 sqlite3 REQUIRED)
	pkg_config_library(LIBXSLT libxslt REQUIRED)
endif()
pkg_config_library(LIBZIP libzip REQUIRED)

if(NOT ANDROID)
	pkg_config_library(LIBUSB libusb-1.0 QUIET)
endif()

include_directories(.
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_BINARY_DIR}
	${CMAKE_BINARY_DIR}/desktop-widgets
)

# Project Target specific configuration should go here,
# if the configuration is too big or would disrupt the normal code flux,
# move it somewhere else (another file) and include it.
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
		set(SUBSURFACE_TARGET Subsurface)
	else()
		set(SUBSURFACE_TARGET subsurface)
	endif()
	list(APPEND QT_EXTRA_COMPONENTS QuickWidgets)
	remove_definitions(-DSUBSURFACE_MOBILE)
elseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
	if(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
		set(SUBSURFACE_TARGET Subsurface-mobile)
	else()
		set(SUBSURFACE_TARGET subsurface-mobile)
	endif()
	list(APPEND QT_EXTRA_COMPONENTS QuickControls2)
	add_definitions(-DSUBSURFACE_MOBILE)

	# add definition to seperate mobile for devices and for desktop
	add_definitions(-DSUBSURFACE_MOBILE_DESKTOP)

	message(STATUS ""Building Subsurface-mobile requires BT support"")
	set(BTSUPPORT ON)
endif()

if(ANDROID)
	set(NO_PRINTING ON)
	set(NO_USERMANUAL ON)
	set(MAKE_TESTS OFF)
	list(APPEND QT_EXTRA_COMPONENTS AndroidExtras)
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -llog)
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
        # add pthread to the end of the library list on Linux
        # this is only needed on Ubuntu
        # but shouldn't hurt on other Linux versions
        # in some builds we appear to be missing libz for some strange reason...
	# Add ssh2 at the end for openSUSE builds (for recent cmake?)
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lssh2 -lz -lpthread)

        # Test for ARM processor (Raspberry Pi) and add libGLESv2 if found
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL ""armv7l"" OR CMAKE_SYSTEM_PROCESSOR STREQUAL ""armv6l"")
                message (STATUS ""Found ARM processor. Adding libGLESv2"")
                set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lGLESv2)
                set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
        endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
        execute_process(
                COMMAND sh scripts/get-version linux
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                OUTPUT_VARIABLE SSRF_VERSION_STRING
                OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        find_library(APP_SERVICES_LIBRARY ApplicationServices)
        find_library(HID_LIB HidApi)
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} ${HID_LIB})
        set(EXTRA_LIBS ${APP_SERVICES_LIBRARY})
        set(ICON_FILE ${CMAKE_SOURCE_DIR}/packaging/macosx/Subsurface.icns)
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
		set(MACOSX_BUNDLE_INFO_STRING ""Subsurface-mobile"")
		set(MACOSX_BUNDLE_BUNDLE_NAME ""Subsurface-mobile"")
	else()
		set(MACOSX_BUNDLE_INFO_STRING ""Subsurface"")
		set(MACOSX_BUNDLE_BUNDLE_NAME ""Subsurface"")
	endif()
	set(MACOSX_BUNDLE_ICON_FILE Subsurface.icns)
	set(MACOSX_BUNDLE_GUI_IDENTIFIER ""org.subsurface-divelog"")
        set(MACOSX_BUNDLE_BUNDLE_VERSION ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_SHORT_VERSION_STRING ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_LONG_VERSION_STRING ""${SSRF_VERSION_STRING}"")
        set(MACOSX_BUNDLE_COPYRIGHT ""Linus Torvalds, Dirk Hohndel, Tomaz Canabrava, Berthold Stoeger and others"")
        set_source_files_properties(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources"")
        set(SUBSURFACE_PKG MACOSX_BUNDLE ${ICON_FILE})
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
        set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lwsock32 -lws2_32)
        remove_definitions(-DUNICODE)
        add_definitions(-mwindows -D_WIN32)
endif()

if(BTSUPPORT)
	set(BLESUPPORT ON)
	list(APPEND QT_EXTRA_COMPONENTS Bluetooth)
	add_definitions(-DBT_SUPPORT)
	add_definitions(-DBLE_SUPPORT)
endif()

if(ANDROID)
	# when building for Android, the toolchain file requires all cmake modules
	# to be inside the CMAKE_FIND_ROOT_PATH - which prevents cmake from finding
	# our Qt installation. This is ugly, but it works.
	set(CMAKE_FIND_ROOT_PATH ""/;${CMAKE_FIND_ROOT_PATH}"")
endif()
set(QT_FIND_COMPONENTS Core Concurrent Widgets Network Svg Positioning Quick Location ${QT_EXTRA_COMPONENTS})
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	find_package(Qt5 5.9.1 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)
else()
	# Kirigami 5.62 and newer require at least Qt 5.12
	if(ANDROID)
		find_package(Qt5 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools)
	else()
		find_package(Qt5 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)
	endif()
endif()
foreach(_QT_COMPONENT ${QT_FIND_COMPONENTS})
	list(APPEND QT_LIBRARIES Qt5::${_QT_COMPONENT})
endforeach()
if(NOT ANDROID)
	set(QT_TEST_LIBRARIES ${QT_LIBRARIES} Qt5::Test Qt5::QuickTest)
endif()

#set up the subsurface_link_libraries variable
set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} ${LIBDIVECOMPUTER_LIBRARIES} ${LIBGIT2_LIBRARIES} ${LIBUSB_LIBRARIES})
qt5_add_resources(SUBSURFACE_RESOURCES subsurface.qrc map-widget/qml/map-widget.qrc)

# hack to build successfully on LGTM
if(DEFINED ENV{LGTM_SRC})
	set(SUBSURFACE_LINK_LIBRARIES ${SUBSURFACE_LINK_LIBRARIES} -lgssapi_krb5 -lhttp_parser)
endif()

# include translations
add_subdirectory(translations)
add_subdirectory(core)
add_subdirectory(qt-models)
add_subdirectory(commands)
add_subdirectory(profile-widget)
add_subdirectory(map-widget)
add_subdirectory(mobile-widgets)
add_subdirectory(backend-shared)

if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	add_subdirectory(desktop-widgets)
endif()

# create the executables
if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
	set(MOBILE_SRC
		subsurface-mobile-main.cpp
		subsurface-helper.cpp
	)
	include_directories(${CMAKE_SOURCE_DIR}/mobile-widgets/qml/kirigami/src/libkirigami)
	add_definitions(-DKIRIGAMI_BUILD_TYPE_STATIC)
	qt5_add_resources(MOBILE_RESOURCES mobile-widgets/qml/mobile-resources.qrc)
	qt5_add_resources(MOBILE_RESOURCES mobile-widgets/qml/kirigami/kirigami.qrc)
	# When building the mobile application in Android, link it and Qt will do the rest, when doing the mobile application on Desktop, create an executable.
	if(ANDROID)
		qt5_add_resources(MOBILE_RESOURCES android-mobile/font.qrc)
		add_library(${SUBSURFACE_TARGET} SHARED ${SUBSURFACE_PKG} ${MOBILE_SRC} ${SUBSURFACE_RESOURCES} ${MOBILE_RESOURCES})
	else()
		# the following is split across two commands since in cmake 3.12 this would result
		# in a non-sensical ""no sources given to target"" error if done all as one set of
		# arguments to the add_executable() call
		add_executable(${SUBSURFACE_TARGET} ${SUBSURFACE_PKG} ${SUBSURFACE_RESOURCES})
		target_sources(${SUBSURFACE_TARGET} PUBLIC ${MOBILE_SRC} ${MOBILE_RESOURCES})
	endif()
	target_link_libraries(
		${SUBSURFACE_TARGET}
		subsurface_mobile
		subsurface_profile
		subsurface_mapwidget
		subsurface_backend_shared
		subsurface_models_mobile
		subsurface_commands
		subsurface_corelib
		${SUBSURFACE_LINK_LIBRARIES}
	)
elseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"")
	set(SUBSURFACE_APP
		subsurface-desktop-main.cpp
		subsurface-helper.cpp
	)
	source_group(""Subsurface App"" FILES ${SUBSURFACE_APP})
        if(ANDROID)
                add_library(${SUBSURFACE_TARGET} SHARED ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})
        else()
                add_executable(${SUBSURFACE_TARGET} MACOSX_BUNDLE WIN32 ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})
        endif()

	target_link_libraries(
		${SUBSURFACE_TARGET}
		subsurface_generated_ui
		subsurface_interface
		subsurface_profile
		subsurface_statistics
		subsurface_mapwidget
		subsurface_backend_shared
		subsurface_models_desktop
		subsurface_commands
		subsurface_corelib
		${SUBSURFACE_LINK_LIBRARIES}
	)
	add_dependencies(subsurface_desktop_preferences subsurface_generated_ui)
	add_dependencies(subsurface_statistics subsurface_generated_ui)
	add_dependencies(subsurface_interface subsurface_generated_ui)
	add_dependencies(subsurface_profile subsurface_generated_ui)
	add_dependencies(subsurface_models_desktop subsurface_generated_ui)
	add_dependencies(subsurface_generated_ui version)
endif()

add_dependencies(subsurface_corelib version)

# add platform specific actions
if(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
	file(WRITE ${CMAKE_BINARY_DIR}/qt.conf ""[Paths]
Prefix=.
"")
endif()

# build an automated html exporter
add_executable(export-html EXCLUDE_FROM_ALL export-html.cpp ${SUBSURFACE_RESOURCES})
target_link_libraries(export-html subsurface_corelib ${SUBSURFACE_LINK_LIBRARIES})

# install Subsurface
# first some variables with files that need installing
set(DOCFILES
	README.md
	ReleaseNotes/ReleaseNotes.txt
	SupportedDivecomputers.txt
	${CMAKE_BINARY_DIR}/Documentation/user-manual.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_es.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_fr.html
	${CMAKE_BINARY_DIR}/Documentation/user-manual_ru.html
)

# add all the translations that we may need
FILE(STRINGS ""subsurface_enabled_translations"" QTTRANSLATIONS_BASE)

if(NOT DEFINED QT_TRANSLATION_DIR OR QT_TRANSLATION_DIR STREQUAL """")
	set(QT_TRANSLATION_DIR ${Qt5Core_DIR}/../../../translations)
endif()
set(QTTRANSLATIONS """")
foreach(QTTRANSLATION ${QTTRANSLATIONS_BASE})
	if (QTTRANSLATION AND EXISTS ${QT_TRANSLATION_DIR}/${QTTRANSLATION})
		set(QTTRANSLATIONS ${QTTRANSLATIONS} ${QT_TRANSLATION_DIR}/${QTTRANSLATION})
	endif()
endforeach()

# now for each platform the install instructions
if(ANDROID)
	# Android template directory
	include(${QT_ANDROID_CMAKE})
	if((DEFINED ENV{KEYSTORE}) AND (DEFINED ENV{KEYSTORE_PASSWORD}))
		add_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}
			PACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}
			KEYSTORE $ENV{KEYSTORE} Subsurface-mobile KEYSTORE_PASSWORD $ENV{KEYSTORE_PASSWORD}
		)
		message(STATUS ""KEYSTORE=$ENV{KEYSTORE} KEYSTORE_PASSWORD=$ENV{KEYSTORE_PASSWORD}"")
	else()
		add_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}
			PACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}
		)
		message(STATUS ""no KEYSTORE"")
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Darwin"")
	set(APP_BUNDLE_DIR ""${SUBSURFACE_TARGET}.app"")
	set(EXTRA_MACDEPLOY_ARGS ""-qmldir=${APP_BUNDLE_DIR}/Contents/Resources/qml "")
	set(MACDEPLOY_ARGS ""${EXTRA_MACDEPLOY_ARGS}-executable=${APP_BUNDLE_DIR}/Contents/MacOS/${SUBSURFACE_TARGET} -always-overwrite -libpath=${CMAKE_SOURCE_DIR}/../install-root/lib"")
	set(RESOURCEDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources)
	set(PLUGINDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/PlugIns)
	install(DIRECTORY Documentation/images DESTINATION ${RESOURCEDIR}/share/Documentation)
	install(FILES ${DOCFILES} DESTINATION ${RESOURCEDIR}/share/Documentation)
	install(DIRECTORY theme DESTINATION ${RESOURCEDIR})
	install(DIRECTORY printing_templates DESTINATION ${RESOURCEDIR})
	install(FILES ${TRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)
	install(FILES ${QTTRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)
	install(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt DESTINATION ${RESOURCEDIR})
	install(CODE ""execute_process(COMMAND mkdir -p ${RESOURCEDIR}/qml)"")
	# this is a HACK
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""DesktopExecutable"" AND NOT NO_PRINTING)
		install(DIRECTORY ${Grantlee5_DIR}/../../grantlee DESTINATION ${PLUGINDIR})
	endif()
	install(CODE ""execute_process(COMMAND mkdir -p ${PLUGINDIR}/geoservices)"")
	install(CODE ""execute_process(COMMAND cp ${_qt5Core_install_prefix}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)"")
	install(CODE ""execute_process(COMMAND cp ${CMAKE_SOURCE_DIR}/../install-root/${_qt5Core_install_prefix}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)"")
	# this is a hack - but I don't know how else to find the macdeployqt program if it's not in the PATH
	string(REPLACE moc macdeployqt MACDEPLOYQT ${QT_MOC_EXECUTABLE})
	install(CODE ""execute_process(COMMAND ${MACDEPLOYQT} ${APP_BUNDLE_DIR} -no-strip ${MACDEPLOY_ARGS})"")
	# and another hack to get the QML Components in the right place
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQuick.2 ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtLocation ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	if(NOT Qt5Core_VERSION VERSION_LESS 5.11.0)
		# and with Qt 5.11 we need another library that isn't copied by macdeployqt
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/lib/QtPositioningQuick.framework ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks)"")
	endif()
	if (SUBSURFACE_TARGET_EXECUTABLE MATCHES ""MobileExecutable"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQuick ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtGraphicalEffects ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtQml ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
		install(CODE ""execute_process(COMMAND cp -a ${_qt5Core_install_prefix}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)"")
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL ""Windows"")
	if (CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"")
		if(NOT DEFINED OBJCOPY)
			set(OBJCOPY i686-w64-mingw32.shared-objcopy)
		endif()
		find_program(OBJCOPY_FOUND ${OBJCOPY})
		if (OBJCOPY_FOUND)
			message(STATUS ""Build type is 'RelWithDebInfo'. Creating debug symbols in a separate file."")
			add_custom_command(TARGET ${SUBSURFACE_TARGET} POST_BUILD
				COMMAND ${OBJCOPY} --only-keep-debug ${SUBSURFACE_TARGET}.exe ${SUBSURFACE_TARGET}.exe.debug
				COMMAND ${OBJCOPY} --strip-debug --strip-unneeded ${SUBSURFACE_TARGET}.exe
				COMMAND ${OBJCOPY} --add-gnu-debuglink=${SUBSURFACE_TARGET}.exe.debug ${SUBSURFACE_TARGET}.exe
			)
		endif()
	endif()

	# Windows bundling rules
	# We don't have a helpful tool like macdeployqt for Windows, so we hardcode
	# which libs we need.
	# ""make install"", copies everything into a staging area
	# ""make installer"", uses makensis to create an installer executable
	set(WINDOWSSTAGING ${CMAKE_BINARY_DIR}/staging)
	install(DIRECTORY Documentation/images DESTINATION ${WINDOWSSTAGING}/Documentation)
	install(FILES ${DOCFILES} DESTINATION ${WINDOWSSTAGING}/Documentation)
	install(DIRECTORY theme DESTINATION ${WINDOWSSTAGING})
	install(DIRECTORY printing_templates DESTINATION ${WINDOWSSTAGING})
	install(FILES ${TRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)
	install(FILES ${QTTRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)
	install(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt ${CMAKE_SOURCE_DIR}/packaging/windows/subsurface.ico DESTINATION ${WINDOWSSTAGING})
	install(TARGETS ${SUBSURFACE_TARGET} DESTINATION ${WINDOWSSTAGING})
	install(FILES ${CMAKE_BINARY_DIR}/qt.conf DESTINATION ${WINDOWSSTAGING})
	install(DIRECTORY ${CMAKE_INSTALL_PREFIX}/lib/grantlee DESTINATION ${WINDOWSSTAGING})

	if(NOT Qt5Core_VERSION VERSION_LESS 5.11.0)
		# hack to work around the fact that we don't process the dependencies of plugins
		# as of Qt 5.11 this additional DLL is needed and it's only referenced in the qml DLLs
		install(FILES ${_qt5Core_install_prefix}/bin/Qt5PositioningQuick.dll DESTINATION ${WINDOWSSTAGING})
	endif()

	if(NOT DEFINED MAKENSIS)
		set(MAKENSIS makensis)
	endif()

	# the script we created above is now added as a command to run at
	# install time - so this ensures that subsurface.exe has been
	# built before this is run
	install(CODE ""execute_process(COMMAND ${CMAKE_COMMAND} -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DSUBSURFACE_TARGET=${SUBSURFACE_TARGET} -DSUBSURFACE_SOURCE=${SUBSURFACE_SOURCE} -DSTAGING=${WINDOWSSTAGING} -P ${CMAKE_SOURCE_DIR}/cmake/Modules/dlllist.cmake)"")

	# create the subsurface-x.y.z.exe installer - this needs to depend
	# on the install target but cmake doesn't allow that, so we depend
	# on the fake target instead
	add_custom_target(
		fake_install
		COMMAND ""${CMAKE_COMMAND}"" --build . --target install
		DEPENDS ${SUBSURFACE_TARGET}
	)

	add_custom_target(
		installer
		COMMAND ${MAKENSIS} ${WINDOWSSTAGING}/subsurface.nsi
		DEPENDS fake_install
	)
elseif (CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
	# the syntax is odd, but this searches for libqtgeoservices_googlemaps.so
	# in the filesystem below our install-root
	# different Linux flavors put the plugin in different directories
	file(GLOB_RECURSE GOOGLEMAPS ${CMAKE_SOURCE_DIR}/../install-root/libqtgeoservices_googlemaps.so)
	if (NOT GOOGLEMAPS)
		message(STATUS ""Cannot find libqtgeoservices_googlemaps.so"")
	else()
		add_custom_target(link_googlemaps_plugin ALL COMMAND
			rm -rf ${CMAKE_BINARY_DIR}/geoservices &&
			mkdir -p ${CMAKE_BINARY_DIR}/geoservices &&
			ln -sf ${GOOGLEMAPS} ${CMAKE_BINARY_DIR}/geoservices)
	endif()
	install(FILES subsurface.debug DESTINATION bin)
	install(FILES subsurface.desktop DESTINATION share/applications)
	install(CODE ""execute_process(COMMAND sh ${CMAKE_SOURCE_DIR}/scripts/add-version-to-appdata.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})"")
	install(FILES appdata/subsurface.appdata.xml DESTINATION share/metainfo)
	install(FILES icons/subsurface-icon.svg DESTINATION share/icons/hicolor/scalable/apps)
	install(DIRECTORY Documentation/images DESTINATION share/subsurface/Documentation)
	install(FILES ${DOCFILES} DESTINATION share/subsurface/Documentation)
	install(DIRECTORY theme DESTINATION share/subsurface)
	install(DIRECTORY printing_templates DESTINATION share/subsurface)
	install(FILES ${TRANSLATIONS} DESTINATION share/subsurface/translations)
        install(TARGETS ${SUBSURFACE_TARGET} DESTINATION bin)
endif()

if (MAKE_TESTS)
	enable_testing()
	add_subdirectory(tests)
endif()

# useful for debugging CMake issues
# print_all_variables()
",3.1,3.1
29448,NuLL3rr0r,blog-subscription-service,False,False,False,False,False,1,C++,2020-05-07 10:31:03+00:00,2016-01-29 15:54:55+00:00,2,321,"#  (The MIT License)
#
#  Copyright (c) 2016 - 2020 Mamadou Babaei
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the ""Software""), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.


cmake_minimum_required(VERSION 3.1...3.17)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/CMakeModules"" ${CMAKE_MODULE_PATH})

include(ccache-initialize)

project(BLOG_SUBSCRIPTION_SERVICE
    VERSION 0.9.0
    DESCRIPTION ""A multilingual blog subscription service written in C++ on top of Wt webtoolkit""
    HOMEPAGE_URL ""https://github.com/NuLL3rr0r/blog-subscription-service""
    LANGUAGES C CXX
)

include(ccache-finalize)

include(CheckIPOSupported)
include(FeatureSummary)

set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)

check_ipo_supported(RESULT IS_IPO_SUPPORTED)
if (IS_IPO_SUPPORTED)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)
endif()

site_name(BUILD_INFO_HOST)

if (NOT WIN32)
    set(BUILD_INFO_HOST ""$ENV{USER}@${BUILD_INFO_HOST}"")
else ()
    set(BUILD_INFO_HOST ""$ENV{USERNAME}@${BUILD_INFO_HOST}"")
endif ()

include(default-build-type)
include(dependencies)
include(build-config)
include(product-info)
include(definitions)
include(deploy)
include(resources)

include(cotire)

include_directories(.)

add_subdirectory(CoreLib)
add_subdirectory(Utils)
add_subdirectory(Service)
",3.1...3.17,3.1
29562,SupSuper,OpenXcom,False,False,False,False,False,126,C++,2020-05-04 17:57:04+00:00,2011-02-06 17:54:56+00:00,1154,8154,"cmake_minimum_required ( VERSION 3.1 )

project ( OpenXcom )

set ( CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/modules"" )
include(GNUInstallDirs)

# For yaml-cpp
set (CMAKE_CXX_STANDARD 11)


option ( DEV_BUILD ""Development Build. Disable this for release builds"" ON )
option ( BUILD_PACKAGE ""Prepares build for creation of a package with CPack"" ON )
option ( ENABLE_WARNING ""Always show warnings (even for release builds)"" OFF )
option ( FATAL_WARNING ""Treat warnings as errors"" OFF )
option ( ENABLE_CLANG_ANALYSIS ""When building with clang, enable the static analyzer"" OFF )
option ( CHECK_CCACHE ""Check if ccache is installed and use it"" OFF )
set ( MSVC_WARNING_LEVEL 3 CACHE STRING ""Visual Studio warning levels"" )
option ( FORCE_INSTALL_DATA_TO_BIN ""Force installation of data to binary directory"" OFF )
set ( DATADIR """" CACHE STRING ""Where to place datafiles"" )
set ( OPENXCOM_VERSION_STRING """" CACHE STRING ""Version string (after x.x)"" )

if ( CHECK_CCACHE )
  find_program( CCACHE_PROGRAM ccache )
  if( NOT CCACHE_PROGRAM )
    message ( ""CCACHE requested but not found on the system."" )
  else ()
    set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}"" )
    set_property( GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}"" )
    message ( ""found CCACHE (${CCACHE_PROGRAM})"" )
  endif()
endif ()

if ( WIN32 )
  set ( default_deps_dir ""${CMAKE_SOURCE_DIR}/deps"" )
endif ()

if ( APPLE )
  set ( MACOS_SDLMAIN_M_PATH ""${CMAKE_SOURCE_DIR}/src/apple/SDLMain.m"" CACHE STRING ""Path to SDLMain.m file"" )
  option ( CREATE_BUNDLE ""Create a Mac OS application bundle"" ON )
  if ( NOT EXISTS ""${MACOS_SDLMAIN_M_PATH}"" )
    message ( FATAL_ERROR ""On Mac OS, SDLMain.m is required. Please set the MACOS_SDLMAIN_M_PATH variable"" )
  endif ()
endif ()

set ( DEPS_DIR ""${default_deps_dir}"" CACHE STRING ""Dependencies directory"" )

# Add check for library (SDL_gfx, yaml-cpp )
if ( IS_DIRECTORY ${DEPS_DIR}/include )
   include_directories ( ${DEPS_DIR}/include/SDL ${DEPS_DIR}/include/yaml-cpp ${DEPS_DIR}/include )
   if ( CMAKE_CL_64 )
     link_directories ( ${DEPS_DIR}/lib/x64 )
   else ( )
     link_directories ( ${DEPS_DIR}/lib/Win32 )
   endif()
   set( SDL_LIBRARY SDL )
   set ( SDLGFX_LIBRARY SDL_gfx )
   set ( SDLMIXER_LIBRARY SDL_mixer )
   set ( SDLIMAGE_LIBRARY SDL_image )
   set ( YAMLCPP_LIBRARY yaml-cpp )
   set ( YAMLCPP_LIBRARY_DEBUG yaml-cppd )
   add_definitions( -DYAML_CPP_DLL )
else ( )
  find_package ( SDL2 COMPONENTS mixer gfx image)
  find_package ( Yaml_cpp 0.5.3)
  set ( YAMLCPP_LIBRARY_DEBUG ${YAMLCPP_LIBRARY} )

  if ( NOT SDL_FOUND )
    message ( FATAL_ERROR ""Can't find SDL which is required"" )
  else ()
    include_directories ( ${SDL_INCLUDE_DIR} )
    message ( ""found SDL ${SDL_MAJOR}.${SDL_MINOR}.${SDL_MICRO} (${SDL_LIBRARY_DIRS}:${SDL_INCLUDE_DIR})"" )
  endif ()

  if ( NOT SDLMIXER_FOUND )
    message ( FATAL_ERROR ""Can't find SDL_mixer which is required"" )
  else ()
    include_directories ( ${SDLMIXER_INCLUDE_DIR} )
    message ( ""found SDL_mixer ${SDL_MIXER_MAJOR}.${SDL_MIXER_MINOR}.${SDL_MIXER_MICRO} (${SDL_MIXER_LIBRARY_DIRS}:${SDLMIXER_INCLUDE_DIR})"" )
  endif ()

  if ( NOT SDLGFX_FOUND )
    message ( FATAL_ERROR ""Can't find SDL_gfx which is required"" )
  else ()
    include_directories ( ${SDLGFX_INCLUDE_DIR} )
    message ( ""found SDL_gfx ${SDL_GFX_MAJOR}.${SDL_GFX_MINOR}.${SDL_GFX_MICRO} (${SDL_GFX_LIBRARY_DIRS}:${SDLGFX_INCLUDE_DIR})"" )
  endif ()

  if ( NOT SDLIMAGE_FOUND )
    message ( FATAL_ERROR ""Can't find SDL_image which is required"" )
  else ()
    include_directories ( ${SDLIMAGE_INCLUDE_DIR} )
    message ( ""found SDL_image ${SDL_IMAGE_MAJOR}.${SDL_IMAGE_MINOR}.${SDL_IMAGE_MICRO} (${SDL_IMAGE_LIBRARY_DIRS}:${SDLIMAGE_INCLUDE_DIR})"" )
  endif ()

  if ( NOT YAMLCPP_FOUND )
    message ( FATAL_ERROR ""Can't find yaml-cpp which is required"" )
  else ()
    include_directories ( ${YAMLCPP_INCLUDE_DIR} )
    message ( ""found yaml-cpp(${YAMLCPP_LIBRARY_DIRS}:${YAMLCPP_INCLUDE_DIR})"" )
  endif ( NOT YAMLCPP_FOUND )
endif()

# Find OpenGL
set (OpenGL_GL_PREFERENCE LEGACY)
find_package ( OpenGL )
if ( NOT OPENGL_FOUND )
  message ( WARNING ""Can't find OpenGL; how does that even happen?\n""
    ""Continuing building without OpenGL support.""
    )
  add_definitions(-D__NO_OPENGL)
else ()
    include_directories ( ${OPENGL_INCLUDE_DIR} )
    message ( ""found openGL (${OPENGL_LIBRARIES})"" )
endif ()

# Resolve backtraces
if ( WIN32 )
	link_libraries( dbghelp )
endif ()
if ( UNIX )
	link_libraries( ${CMAKE_DL_LIBS} )
endif ()

# Read version number
set ( file ""${CMAKE_SOURCE_DIR}/src/version.h"" )
file ( READ ${file} lines )
string ( REGEX MATCH ""[.]*OPENXCOM_VERSION_SHORT \""([0-9]).([0-9])"" version_line ""${lines}"" )
set ( CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1} )
set ( CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2} )
set ( CPACK_PACKAGE_VERSION_PATCH """" )

if ( ""${OPENXCOM_VERSION_STRING}"" STREQUAL """" )
  find_package ( Git )
  if ( GIT_FOUND )
    message(""git found: ${GIT_EXECUTABLE}"")
    execute_process ( COMMAND ${GIT_EXECUTABLE} describe --dirty
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      OUTPUT_VARIABLE git_describe_out
      ERROR_VARIABLE git_describe_error
      RESULT_VARIABLE git_describe_result
      )
    string ( REGEX MATCH ""([a-z|0-9|.]*)-([0-9]*)-g([a-z|0-9]*)([-|a-z]*)"" git_commit ""${git_describe_out}"" )
    set ( git_tag ${CMAKE_MATCH_1} )
    set ( git_nb_commit ${CMAKE_MATCH_2} )
    set ( git_commit ${CMAKE_MATCH_3} )
    set ( git_dirty ${CMAKE_MATCH_4} )
    set ( OPENXCOM_VERSION_STRING "".${git_commit}${git_dirty}"" )
  endif()
endif()

add_definitions( -DGIT_BUILD=1 )

configure_file(""${CMAKE_SOURCE_DIR}/src/git_version.h.in"" ""${CMAKE_CURRENT_BINARY_DIR}/git_version.h"" )
include_directories ( ""${CMAKE_CURRENT_BINARY_DIR}"" )


if ( DEV_BUILD )
  # Append the commit to version number
  set ( CPACK_PACKAGE_VERSION_PATCH ""${git_commit}${git_dirty}"" )
  set ( CPACK_PACKAGE_VERSION ""${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"" )
else ()
  set ( CPACK_PACKAGE_INSTALL_DIRECTORY ""${CPACK_NSIS_PACKAGE_NAME}"" )
  set ( CPACK_PACKAGE_VERSION ""${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}"" )
endif ()

if ( BUILD_PACKAGE )
  if ( NOT DEV_BUILD )
    string ( LENGTH ""${git_dirty}"" is_dirty )
    if ( ${is_dirty} GREATER 0 )
      message ( FATAL_ERROR ""Release package must be built from a clean tree"" )
    endif ()
    if ( ""${CMAKE_BUILD_TYPE}"" STREQUAL ""Debug"" )
      message ( FATAL_ERROR ""Release package can't be built from a debug build"" )
    endif ()
  endif ( )

  if ( NOT CPACK_GENERATOR )
    set ( CPACK_GENERATOR ""TXZ"" )
  endif ()
  if ( NOT CPACK_SOURCE_GENERATOR )
    set ( CPACK_SOURCE_GENERATOR ""TXZ"" )
  endif ()

  set ( CPACK_PACKAGE_VENDOR ""The OpenXcom project"" )
  set ( CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Open-source clone of UFO: Enemy Unknown"" )
  set ( CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/cmake/modules/Description.txt"" )
  set ( CPACK_RESOURCE_FILE_README ""${CMAKE_SOURCE_DIR}/README.md"" )
  if ( NOT APPLE )
    set ( CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE.txt"" )
  endif ()
  set ( CPACK_PACKAGE_CONTACT ""The OpenXcom project (http://www.openxcom.org)"" )

  include ( LinuxDEB )
  include ( LinuxRPM )
  include ( nsis )
  include ( apple )
  include ( CPack )
  message ( ""version:${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}""
)
endif()

if ( NOT WIN32 )
  install(FILES ""${CMAKE_SOURCE_DIR}/res/linux/openxcom.desktop""
    DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications"")
  install(FILES ""${CMAKE_SOURCE_DIR}/res/linux/icons/openxcom_48x48.png""
    DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/icons/hicolor/48x48/apps"" RENAME openxcom.png)
  install(FILES ""${CMAKE_SOURCE_DIR}/res/linux/icons/openxcom_128x128.png""
    DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/icons/hicolor/128x128/apps"" RENAME openxcom.png)
  install(FILES ""${CMAKE_SOURCE_DIR}/res/linux/icons/openxcom.svg""
    DESTINATION ""${CMAKE_INSTALL_FULL_DATAROOTDIR}/icons/hicolor/scalable/apps"")
endif ()

add_subdirectory ( docs )
add_subdirectory ( src )
",3.1,3.1
29574,Chainsawkitten,HymnToBeauty,False,False,False,False,False,9,C++,2019-04-07 10:40:48+00:00,2015-04-06 22:09:26+00:00,3,1258,"cmake_minimum_required(VERSION 3.1.0)

project(HymnToBeauty)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(UNIX OR MINGW)
    option(HTB_DEBUG_INFO ""Build Hymn to Beauty with DWARF debug data."" OFF)
    if(HTB_DEBUG_INFO)
        set(DEBUG_DATA ""-gdwarf-2"")
    else()
        set(DEBUG_DATA ""-s"")
    endif()
    
    set(CMAKE_CXX_FLAGS ""-g ${DEBUG_DATA} -O3 -static-libstdc++ -Wall -fno-strict-aliasing"")
elseif(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

# Externals
add_subdirectory(externals)

# This function should be passed a list of all files in a target. It will automatically generate
# file groups following the directory hierarchy, so that the layout of the files in IDEs matches the
# one in the filesystem.
function(create_directory_groups)
    # Place any files that aren't in the source list in a separate group so that they don't get in
    # the way.
    source_group(""Other Files"" REGULAR_EXPRESSION ""."")

    foreach(file_name ${ARGV})
        get_filename_component(dir_name ""${file_name}"" PATH)
        # Group names use '\' as a separator even though the entire rest of CMake uses '/'...
        string(REPLACE ""/"" ""\\"" group_name ""${dir_name}"")
        source_group(""${group_name}"" FILES ""${file_name}"")
    endforeach()
endfunction()

# Doxygen documentation
option(HymnToBeautyBuildDocs ""Build the doxygen documentation"" OFF)
find_package(Doxygen)
if(DOXYGEN_FOUND AND HymnToBeautyBuildDocs)
    add_custom_target(EngineDoc ALL
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/EngineDoxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )
    add_custom_target(EditorDoc ALL
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/EditorDoxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )
    add_custom_target(GameDoc ALL
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/GameDoxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )
endif()

option(UseDoubleLogging ""Log messages will be duplicated and sent to standard out."" ON)
if(UseDoubleLogging)
    add_definitions(-DUSINGDOUBLELOGGING)
endif()

# Source files
add_subdirectory(src)
",3.1.0,3.1
29607,dkoes,leadit,False,False,False,False,False,1,C++,2019-06-22 12:51:25+00:00,2014-05-22 15:21:26+00:00,1,208,"cmake_minimum_required (VERSION 3.10)
project(LibMolGrid LANGUAGES C CXX )

#version number
set (VERSION_MAJOR 0)
set (VERSION_MINOR 1)
set (VERSION_PATCH 0)

#set default build type
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()


list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)

# guard against in-source builds and bad build-type strings
include(cmake/safeguards.cmake)

# place binaries and libraries according to GNU standards
include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

#dependencies
find_package(Boost REQUIRED COMPONENTS system filesystem iostreams)
find_package(OpenBabel2 REQUIRED)
find_package(RDKit)
find_package( ANN REQUIRED )
find_package( Eigen3 REQUIRED )
find_package( LEMON REQUIRED )

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CUDA_STANDARD 14)

if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    set(CMAKE_CXX_FLAGS         ""${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -Werror"")
    set(CMAKE_CXX_FLAGS_DEBUG   ""-O0 -g3"")
    set(CMAKE_CXX_FLAGS_RELEASE ""-O3"")
    set(CMAKE_CXX_FLAGS_PROFILE "" -fprofile-arcs -ftest-coverage -pg"")
endif()

# so that we will find libmolgrid_config.h
include_directories(${CMAKE_SOURCE_DIR}/)
include_directories(${CMAKE_SOURCE_DIR}/shapedb)
include_directories(SYSTEM ${OPENBABEL2_INCLUDE_DIR})
include_directories(SYSTEM ${Boost_INCLUDE_DIR})
include_directories(SYSTEM ${RDKIT_INCLUDE_DIR})
include_directories( ${EIGEN3_INCLUDE_DIR} )
include_directories( ${LEMON_INCLUDE_DIRS} )

set(LEADIT_SRCS
CommandLine2/CommandLine.cpp
CommandLine2/CommandLine.h
DatabaseCreator.cpp
DatabaseCreator.h
DatabaseSearcher.cpp
DatabaseSearcher.h
DatabaseStrutures.h
FragmentIndexer.cpp
FragmentIndexer.h
FragmentSearcher.cpp
FragmentSearcher.h
main.cpp
MolMatcher.cpp
MolMatcher.h
Orienter.h
pharmacophores.cpp
pharmacophores.h
QueryObject.cpp
QueryObject.h
Reaction.cpp
Reaction.h
ScaffoldIndexer.cpp
ScaffoldIndexer.h
shapedb/Cube.h
shapedb/DataViewers.h
shapedb/GSSTreeCreator.cpp
shapedb/GSSTreeCreator.h
shapedb/GSSTreeSearcher.cpp
shapedb/GSSTreeSearcher.h
shapedb/GSSTreeStructures.cpp
shapedb/GSSTreeStructures.h
shapedb/GSSTypes.h
shapedb/KSamplePartitioner.cpp
shapedb/KSamplePartitioner.h
#shapedb/main.cpp
shapedb/MappableOctTree.cpp
shapedb/MappableOctTree.h
shapedb/MemMapped.cpp
shapedb/MemMapped.h
shapedb/MGrid.cpp
shapedb/MGrid.h
shapedb/MiraObject.h
shapedb/molecules/MolSphere.cpp
shapedb/molecules/OBMoleculeAnalytic.cpp
shapedb/molecules/PMol.cpp
shapedb/molecules/RDMoleculeAnalytic.cpp
shapedb/packers/FullMergePacker.cpp
shapedb/packers/GreedyPacker.cpp
shapedb/packers/MatcherPacker.cpp
shapedb/packers/Packer.cpp
shapedb/packers/SpectralPacker.cpp
shapedb/Results.h
shapedb/ShapeDistance.cpp
shapedb/ShapeDistance.h
shapedb/Timer.h
shapedb/TopDownPartitioner.h
shapedb/WorkFile.cpp
shapedb/WorkFile.h
)

add_executable(leadit ${LEADIT_SRCS})
target_link_libraries(leadit ${Boost_LIBRARIES} ${OPENBABEL2_LIBRARIES} ${RDKIT_LIBRARIES} ${ANN_LIBRARY})

",3.10,3.1
29726,pism,pism,False,False,False,False,False,17,C++,2020-05-15 21:58:28+00:00,2011-11-04 19:03:37+00:00,48,8625,"cmake_minimum_required (VERSION 3.1)
project (Pism C CXX)

if (NOT (${CMAKE_VERSION} VERSION_LESS ""3.13""))
  # Policy CMP0078 was introduced in 3.13. See ""cmake --help-policies"" for details.
  cmake_policy(SET CMP0078 OLD)       #controls names of SWIG targets
endif()

if (NOT (${CMAKE_VERSION} VERSION_LESS ""3.14""))
  # Policy CMP0086 was introduced in 3.14. See ""cmake --help-policies"" for details.
  cmake_policy(SET CMP0086 NEW)
endif()

# Require C++11 compiler support.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Looks like CMAKE_CXX_STANDARD does not support Intel C++ compilers
# yet...
if (CMAKE_CXX_COMPILER_ID MATCHES ""Intel"" AND NOT CMAKE_CXX_FLAGS MATCHES ""-std=c\\+\\+11"")
  message (STATUS ""Adding -std=c++11 to C++ compiler flags for Intel compilers."")
  set (CMAKE_CXX_FLAGS ""-std=c++11 ${CMAKE_CXX_FLAGS}"" CACHE STRING ""C++ compiler flags"" FORCE)
endif()

include (""CMake/PISM_CMake_macros.cmake"")
list (APPEND CMAKE_MODULE_PATH ""${Pism_SOURCE_DIR}/CMake"")

set (Pism_BRANCH ""stable"")

# Set Pism_REVISION_TAG
pism_set_revision_tag()

# Put executables in the build directory:
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

# Set the install prefix
pism_set_install_prefix()
set(CMAKE_INSTALL_MESSAGE ""LAZY"")

# Set Pism_CONFIG_FILE (*after* we set the CMAKE_INSTALL_PREFIX above).
pism_check_build_dir_location()
set (Pism_CONFIG_FILE ""${CMAKE_INSTALL_PREFIX}/${Pism_SHARE_DIR}/pism_config.nc"" CACHE STRING """" FORCE)
mark_as_advanced (Pism_CONFIG_FILE)
file (WRITE ${PROJECT_BINARY_DIR}/.petscrc ""-config ${PROJECT_BINARY_DIR}/pism_config.nc"")

# The default options cache
option (Pism_BUILD_EXTRA_EXECS ""Build extra executables (mostly testing/verification)"" OFF)
option (BUILD_SHARED_LIBS      ""Build shared Pism libraries"" ON)
option (Pism_BUILD_PYTHON_BINDINGS ""Build python bindings"" OFF)
option (Pism_BUILD_ICEBIN ""Build PISM portions of IceBin library"" OFF)
option (Pism_BUILD_DOCS ""Build PISM's documentation with 'make all'."" OFF)
option (Pism_USE_PROJ ""Use PROJ to compute longitudes and latitudes."" OFF)
option (Pism_USE_PIO ""Use NCAR's ParallelIO for I/O."" OFF)
option (Pism_USE_PARALLEL_NETCDF4 ""Enables parallel NetCDF-4 I/O."" OFF)
option (Pism_USE_PNETCDF ""Enables parallel NetCDF-3 I/O using PnetCDF."" OFF)
option (Pism_ENABLE_DOCUMENTATION ""Enable targets building PISM's documentation."" ON)

# PISM will eventually use Jansson to read configuration files.
# set (Pism_USE_JANSSON OFF)
option (Pism_USE_JANSSON ""Use Jansson to read configuration files."" OFF)

option (Pism_TEST_USING_VALGRIND ""Add extra regression tests using valgrind"" OFF)
mark_as_advanced (Pism_TEST_USING_VALGRIND)

option (Pism_ADD_FPIC ""Add -fPIC to C++ compiler flags (CMAKE_CXX_FLAGS). Try turning it off if it does not work."" ON)
option (Pism_CODE_COVERAGE ""Add compiler options for code coverage testing."" OFF)
option (Pism_LINK_STATICALLY ""Set CMake flags to try to ensure that everything is linked statically"")
option (Pism_LOOK_FOR_LIBRARIES ""Specifies whether PISM should look for libraries. (Disable this on Crays.)"" ON)
option (Pism_USE_EVERYTRACE ""Use the Everytrace library to provide stacktraces on crashes."" OFF)

# Use rpath by default; this has to go first, because rpath settings may be overridden later.
pism_use_rpath()

if (Pism_LINK_STATICALLY)
  pism_strictly_static()
endif ()

# Deal with build types
mark_as_advanced(CLEAR CMAKE_BUILD_TYPE)
if (CMAKE_BUILD_TYPE MATCHES ""Debug"")
  set (Pism_BUILD_EXTRA_EXECS ON CACHE BOOL ""Build extra executables (mostly testing/verification)"" FORCE)
  option (Pism_DEBUG              ""Enables extra checks in the code.""          ON)
  option (Pism_PEDANTIC_WARNINGS  ""Compile with pedantic warnings.""            ON)
  option (Pism_GPROF_FLAGS        ""Add flags necessary to profile with gprof."" OFF)
endif (CMAKE_BUILD_TYPE MATCHES ""Debug"")

# Add -fPIC to C and CXX flags.
if (Pism_ADD_FPIC)
  add_compile_options(-fPIC)
endif ()

if (Pism_CODE_COVERAGE)
  add_compile_options(-fprofile-arcs -ftest-coverage -g -O0)
  add_link_options(--coverage)

  add_custom_target (coverage_report
    # remove coverage data from src/pythonbindings
    COMMAND lcov --directory ${Pism_BINARY_DIR}/src/pythonbindings -z
    COMMAND lcov --directory ${Pism_BINARY_DIR}/src/external -z
    COMMAND lcov --base-directory ${Pism_SOURCE_DIR} --directory src --quiet --no-external --capture -o pism-coverage.info
    COMMAND genhtml -t ""PISM Coverage report"" -o cover --demangle-cpp --legend pism-coverage.info
    WORKING_DIRECTORY ${Pism_BINARY_DIR}
    VERBATIM
    )
  add_custom_target (coverage_reset
    COMMAND lcov -d ${Pism_BINARY_DIR} -z
    WORKING_DIRECTORY ${Pism_BINARY_DIR}
    VERBATIM
    )
endif ()

if (Pism_PEDANTIC_WARNINGS)
  pism_set_pedantic_flags()
endif (Pism_PEDANTIC_WARNINGS)

if (Pism_GPROF_FLAGS)
  set (CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -pg -fno-omit-frame-pointer -fno-inline-functions -fno-inline-functions-called-once -fno-optimize-sibling-calls"")
  set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -pg -fno-omit-frame-pointer -fno-inline-functions -fno-inline-functions-called-once -fno-optimize-sibling-calls"")
endif ()

# Look for libraries using find_package(...), etc. Run CMake with -DPism_LOOK_FOR_LIBRARIES=OFF
# to build on systems that rely on the module system to set all compiler and linker flags.
if (Pism_LOOK_FOR_LIBRARIES)
  pism_find_prerequisites()
endif()

# Set Pism_EXTERNAL_LIBS and include directories.
pism_set_dependencies()

# Make sure that PetscScalar is double (not complex<double>.)
pism_check_petsc_scalar_type()

# Get PETSc's configuration flags (they will be written to output files).
pism_petsc_get_variable(""CONFIGURE_OPTIONS"" Pism_PETSC_CONFIGURE_FLAGS)

if (Pism_USE_EVERYTRACE)
  find_package(Everytrace REQUIRED)
  list (APPEND Pism_EXTERNAL_LIBS ${EVERYTRACE_LIBRARY})
endif()

if (Pism_BUILD_PYTHON_BINDINGS)
  find_package(PythonInterp REQUIRED)
  find_package(PythonLibs REQUIRED)
  find_package(PETSc4Py REQUIRED)
  find_package(SWIG REQUIRED)

  if (DEFINED PETSC4PY_VERSION)
    # FindPETSc4Py.cmake does not put PETSC4PY_VERSION into the CMake cache,
    # so we save it here.
    set(Pism_PETSC4PY_VERSION ${PETSC4PY_VERSION} CACHE STRING ""PETSc4Py version"")
    mark_as_advanced(Pism_PETSC4PY_VERSION)
  endif()

  mark_as_advanced (SWIG_DIR SWIG_EXECUTABLE SWIG_VERSION)

  execute_process(
    COMMAND ${PYTHON_EXECUTABLE} -c ""import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(plat_specific=True, prefix='${CMAKE_INSTALL_PREFIX}'))""
    OUTPUT_VARIABLE PISM_INSTALL_PYTHON_MODULE_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(PISM_INSTALL_PYTHON_MODULE_DIR ${PISM_INSTALL_PYTHON_MODULE_DIR}
    CACHE PATH ""Python extension module installation directory."" )
endif ()

add_custom_target (etags
  COMMAND find . -iname *.cc -o -iname *.hh -o -iname *.c -o -iname *.h | xargs etags --class-qualify --no-defines
  WORKING_DIRECTORY ${Pism_SOURCE_DIR}
  VERBATIM
)

# re-run tests that failed
add_custom_target (retest
  COMMAND ${CMAKE_CTEST_COMMAND} --rerun-failed --output-on-failure
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  VERBATIM
)

# run Python tests
add_custom_target (test-python
  COMMAND ${CMAKE_CTEST_COMMAND} -R ""Python:""
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  VERBATIM
)

# Install helper scripts residing in util/
install(DIRECTORY ${PROJECT_SOURCE_DIR}/util/ DESTINATION ${Pism_BIN_DIR}
  USE_SOURCE_PERMISSIONS
  FILES_MATCHING PATTERN ""*.py"")


install(DIRECTORY ${PROJECT_SOURCE_DIR}/examples
  DESTINATION ${Pism_SHARE_DIR}
  USE_SOURCE_PERMISSIONS)

add_subdirectory (src)
add_subdirectory (site-packages)

if (Pism_ENABLE_DOCUMENTATION)
  if (Pism_BUILD_DOCS)
    add_subdirectory (doc)
  else()
    add_subdirectory (doc EXCLUDE_FROM_ALL)
  endif()
endif()

# PISM regression testing
ENABLE_TESTING()
include(CTest)
add_subdirectory (test)
add_subdirectory (test/regression)

add_subdirectory (docker)
",3.1,3.1
29868,Yberion,stats_mod,False,False,False,False,False,57,C++,2019-05-18 12:35:32+00:00,2015-08-07 15:44:17+00:00,1,3624,"#============================================================================
# Copyright (C) 2013 - 2018, OpenJK contributors
# 
# This file is part of the OpenJK source code.
# 
# OpenJK is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#============================================================================

cmake_minimum_required(VERSION 3.1)
set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.9"" CACHE STRING ""Minimum OS X deployment version"")

# For checks in subdirectories
set(InOpenJK TRUE)



# Project name
set(ProjectName ""OpenJK"" CACHE STRING ""Project Name"")
project(${ProjectName})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})



# Customizable options
option(BuildPortableVersion ""Build portable version (does not read or write files from your user/home directory"" OFF)

option(BuildMPEngine ""Whether to create projects for the MP client (openjk.exe)"" ON)
option(BuildMPRdVanilla ""Whether to create projects for the MP default renderer (rd-vanilla_x86.dll)"" ON)
option(BuildMPDed ""Whether to create projects for the MP dedicated server (openjkded.exe)"" ON)
option(BuildMPGame ""Whether to create projects for the MP server-side gamecode (jampgamex86.dll)"" ON)
option(BuildMPCGame ""Whether to create projects for the MP clientside gamecode (cgamex86.dll)"" ON)
option(BuildMPUI ""Whether to create projects for the MP UI code (uix86.dll)"" ON)
option(BuildSPEngine ""Whether to create projects for the SP engine (openjk_sp.exe)"" ON)
option(BuildSPGame ""Whether to create projects for the SP gamecode (jagamex86.dll)"" ON)
option(BuildSPRdVanilla ""Whether to create projects for the SP default renderer (rdsp-vanilla_x86.dll)"" ON)

option(BuildJK2SPEngine ""Whether to create projects for the jk2 SP engine (openjo_sp.exe)"" OFF)
option(BuildJK2SPGame ""Whether to create projects for the jk2 sp gamecode mod (jk2gamex86.dll)"" OFF)
option(BuildJK2SPRdVanilla ""Whether to create projects for the jk2 sp renderer (rdjosp-vanilla_x86.dll)"" OFF)

option(BuildTests ""Whether to build automatic unit tests (requires Boost)"" OFF)

Include(CMakeDependentOption)
CMAKE_DEPENDENT_OPTION(BuildSymbolServer ""Build WIP Windows Symbol Server (experimental and unused)"" OFF ""NOT WIN32 OR NOT MSVC"" OFF)

# Configure the use of bundled libraries.  By default, we assume the user is on
# a platform that does not require any bundling.
#
# Note that we always use the bundled copy of minizip, since it is modified to
# use Z_Malloc.

set(UseInternalOpenALDefault OFF)
set(UseInternalZlibDefault   OFF)
set(UseInternalPNGDefault    OFF)
set(UseInternalJPEGDefault   OFF)
set(UseInternalSDL2Default   OFF)

if(WIN32)
  set(UseInternalOpenALDefault ON)
  set(UseInternalZlibDefault   ON)
  set(UseInternalPNGDefault    ON)
  set(UseInternalJPEGDefault   ON)
  set(UseInternalSDL2Default   ON)
endif()

if(APPLE)
  set(UseInternalJPEGDefault ON)
endif()

if(CMAKE_SYSTEM_NAME MATCHES ""BSD"")
  add_definitions(-DIOAPI_NO_64)
endif()

option(UseInternalOpenAL ""If set, use bundled OpenAL.""  ${UseInternalOpenALDefault})
option(UseInternalZlib   ""If set, use bundled zlib.""    ${UseInternalZlibDefault})
option(UseInternalPNG    ""If set, use bundled libpng.""  ${UseInternalPNGDefault})
option(UseInternalJPEG   ""If set, use bundled libjpeg."" ${UseInternalJPEGDefault})
option(UseInternalSDL2   ""If set, use bundled SDL2.""    ${UseInternalSDL2Default})

# This option won't appear on non-Apple platforms.
if(APPLE)
  option(MakeApplicationBundles ""Whether to build .app application bundles for engines built"" ON)
endif()

# Custom CMake Modules needed
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_SOURCE_DIR}/CMakeModules"")

Include(CheckTypeSize)
check_type_size(""void*"" CMAKE_SIZEOF_VOID_P)



# ${Architecture} must match ARCH_STRING in q_platform.h,
# and is used in DLL names (jagamex86.dll, jagamex86.dylib, jagamei386.so).
if(WIN32)
	set(X86 ON)
	if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
		set(Architecture ""x86_64"")
		set(WIN64 TRUE)
	else()
		set(Architecture ""x86"")
		set(WIN64 FALSE)
	endif()
else()
	set(X86 OFF)
	if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^arm"")
		set(Architecture ""arm"")
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i.86$"")
		set(X86 ON)
		if(APPLE)
			set(Architecture ""x86"")
		else()
			# e.g. Linux
			set(Architecture ""i386"")
		endif()
	elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^x86.64$"")
		set(X86 ON)
		set(Architecture ""x86_64"")
	elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ""powerpc"")
		set(Architecture ""ppc"")
	elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ""powerpc64"")
		set(Architecture ""ppc64"")
	else()
		set(Architecture ""${CMAKE_SYSTEM_PROCESSOR}"")
	endif()
endif()

message(STATUS ""Architecture is ${Architecture}"")

if(WIN32 AND CMAKE_VERSION VERSION_LESS ""3.4"")
message(WARNING ""Building on Windows platform with CMake version less than 3.4 is deprecated. Manifest file will fail to be included."")
endif()



# Current Git SHA1 hash
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
message(STATUS ""Git revision is ${GIT_SHA1}"")





# Binary names
set(SPEngine ""openjk_sp.${Architecture}"")
set(SPGame ""jagame${Architecture}"")
set(SPRDVanillaRenderer ""rdsp-vanilla_${Architecture}"")
set(MPEngine ""openjk.${Architecture}"")
set(MPVanillaRenderer ""rd-vanilla_${Architecture}"")
set(MPDed ""openjkded.${Architecture}"")
set(MPGame ""jampgame${Architecture}"")
set(MPCGame ""cgame${Architecture}"")
set(MPUI ""ui${Architecture}"")
set(JK2SPEngine ""openjo_sp.${Architecture}"")
set(JK2SPGame ""jospgame${Architecture}"")
set(JK2SPVanillaRenderer ""rdjosp-vanilla_${Architecture}"")
set(AssetsPk3 ""openjk-${Architecture}.pk3"")
# Library names
set(MPBotLib ""botlib"")
set(SharedLib ""shared"")



# Paths
set(SPDir ""${CMAKE_SOURCE_DIR}/code"")
set(MPDir ""${CMAKE_SOURCE_DIR}/codemp"")
set(JK2SPDir ""${CMAKE_SOURCE_DIR}/codeJK2"")
set(SharedDir ${CMAKE_SOURCE_DIR}/shared)
set(OpenJKLibDir ""${CMAKE_SOURCE_DIR}/lib"")
set(GSLIncludeDirectory ""${OpenJKLibDir}/gsl-lite/include"")

include(InstallConfig)



# Operating settings
if(WIN64)
	set(SharedDefines ${SharedDefines} ""WIN64"")
endif()

if (APPLE)
	set(SharedDefines ""MACOS_X"")
endif()

if (NOT WIN32 AND NOT APPLE)
	set(SharedDefines ""ARCH_STRING=\""${Architecture}\"""")
endif()



# Compiler settings
if(MSVC)

	set(SharedDefines ${SharedDefines} ""NOMINMAX"")
	set(SharedDefines ${SharedDefines} ""_CRT_SECURE_NO_WARNINGS"")
	set(SharedDefines ${SharedDefines} ""_SCL_SECURE_NO_WARNINGS"")
	set(SharedDefines ${SharedDefines} ""_CRT_NONSTDC_NO_DEPRECATE"")

	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /arch:SSE2"")
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /MP"")

	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:SSE2"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP"")

	# We don't try to control symbol visibility under MSVC.
	set(OPENJK_VISIBILITY_FLAGS """")

elseif ((""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"") OR (""${CMAKE_C_COMPILER_ID}"" MATCHES ""Clang""))
	# I hope this doesn't come back to bite me in the butt later on.
	# Realistically though, can the C and CXX compilers be different?

	# Visibility can't be set project-wide -- it needs to be specified on a
	# per-target basis.  This is primarily due to the bundled copy of ZLib.
	# ZLib explicitly declares symbols hidden, rather than defaulting to hidden.
	#
	# Note that -fvisibility=hidden is stronger than -fvisibility-inlines-hidden.
	set(OPENJK_VISIBILITY_FLAGS ""-fvisibility=hidden"")

	# removes the -rdynamic flag at linking (which causes crashes for some reason)
	set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS """")
	set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """")

	# additional flags for debug configuration
	set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} -ggdb"")
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -ggdb"")

	if (X86)
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -msse2"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2"")
	endif()

	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -O3"")
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3"")

	# enable somewhat modern C++
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
	
	if(""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-comment"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsigned-char"")
		if (X86)
			# ""x86 vm will crash without -mstackrealign since MMX
			# instructions will be used no matter what and they
			# corrupt the frame pointer in VM calls""
			# -ioquake3 Makefile
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -mstackrealign"")
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -mfpmath=sse"")
		endif()

		if(WIN32)
			# Link libgcc and libstdc++ statically
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -static-libgcc"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libgcc"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++"")
		endif()
	elseif(""${CMAKE_C_COMPILER_ID}"" MATCHES ""Clang"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-comment"")
	endif()

	if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-write-strings"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-comment"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsigned-char"")
		if (X86)
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mstackrealign"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mfpmath=sse"")
		endif()
	elseif(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-write-strings"")
		#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-deprecated-writable-strings"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-comment"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof"")
	endif()
else()
	message(ERROR ""Unsupported compiler"")
endif()

if (NOT CMAKE_BUILD_TYPE)
	message(STATUS ""No build type selected, default to RELEASE"")
	set(CMAKE_BUILD_TYPE ""RELEASE"")
endif()

if(CMAKE_BUILD_TYPE MATCHES ""DEBUG"" OR CMAKE_BUILD_TYPE MATCHES ""Debug"")
	# CMake already defines _DEBUG for MSVC.
	if (NOT MSVC)
		set(SharedDefines ${SharedDefines} ""_DEBUG"")
	endif()
else()
	set(SharedDefines ${SharedDefines} ""FINAL_BUILD"")
endif()



# Settings
if(BuildPortableVersion)
	set(SharedDefines ${SharedDefines} ""_PORTABLE_VERSION"")
endif()

# https://reproducible-builds.org/specs/source-date-epoch/
if (NOT (""$ENV{SOURCE_DATE_EPOCH}"" STREQUAL """"))
	execute_process(COMMAND ""date""
		""--date=@$ENV{SOURCE_DATE_EPOCH}"" ""+%b %_d %Y""
		OUTPUT_VARIABLE source_date
		ERROR_QUIET
		OUTPUT_STRIP_TRAILING_WHITESPACE)
	set(SharedDefines ${SharedDefines} ""SOURCE_DATE=\""${source_date}\"""")
endif()



# Files shared across all projects
set(SharedCommonFiles
	""${SharedDir}/qcommon/q_color.h""
	""${SharedDir}/qcommon/q_color.c""
	""${SharedDir}/qcommon/q_math.h""
	""${SharedDir}/qcommon/q_math.c""
	""${SharedDir}/qcommon/q_string.h""
	""${SharedDir}/qcommon/q_string.c""
	""${SharedDir}/qcommon/q_platform.h""
	)
set(SharedCommonSafeFiles
	""${SharedDir}/qcommon/safe/gsl.h""
	""${SharedDir}/qcommon/safe/string.cpp""
	""${SharedDir}/qcommon/safe/string.h""
	""${SharedDir}/qcommon/safe/sscanf.h""
	""${SharedDir}/qcommon/safe/limited_vector.h""
	)


if(UseInternalJPEG)
  add_subdirectory(lib/jpeg-9a)
else()
  find_package(JPEG REQUIRED)
endif()

if(UseInternalZlib)
  add_subdirectory(lib/zlib)
else()
  find_package(ZLIB REQUIRED)
endif()

if(UseInternalPNG)
  add_subdirectory(lib/libpng)
else()
  find_package(PNG REQUIRED)
endif()

# Always use bundled minizip (sets MINIZIP_{LIBRARIES,INCLUDE_DIR})
add_subdirectory(lib/minizip)

# Add projects
add_subdirectory(${SPDir})
if(BuildJK2SPGame)
	add_subdirectory(""${JK2SPDir}/game"")
endif()
add_subdirectory(${MPDir})
# Windows Symbol Server tools
if(BuildSymbolServer)
	add_subdirectory(""tools/WinSymbol"")
endif()
if(BuildTests)
	enable_testing()
	add_subdirectory(""tests"")
endif()
",3.1,3.1
29922,odashi,primitiv,False,False,False,False,False,10,C++,2019-12-19 12:25:33+00:00,2017-05-07 13:57:41+00:00,155,1629,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
set(CMAKE_POLICY_DEFAULT_CMP0048 NEW)

project(primitiv VERSION 0.3.1 LANGUAGES CXX)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

option(PRIMITIV_BUILD_STATIC_LIBRARY ""Builds static library."" OFF)
option(PRIMITIV_BUILD_TESTS ""Builds test binaries."" OFF)
option(PRIMITIV_BUILD_TESTS_PROBABILISTIC ""Builds test cases that probabilistically fails."" OFF)
option(PRIMITIV_GTEST_SOURCE_DIR ""Source directory of Google Test library."" """")
option(PRIMITIV_USE_CACHE ""Enables cached values in some functions but needs more memory."" OFF)
option(PRIMITIV_USE_CUDA ""Enables the CUDA backend."" OFF)
option(PRIMITIV_USE_OPENCL ""Enables the OpenCL backend."" OFF)

# C++ version
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# compiler settings
if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -Wall -Werror -fPIC"")
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -Wall -Werror -fPIC"")
else()
  message(WARNING ""primitiv may not support the detected compiler: ${CMAKE_CXX_COMPILER_ID}"")
endif()

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
)

# External packages.
if(PRIMITIV_USE_CUDA)
  find_package(CUDA REQUIRED)
endif()

if(PRIMITIV_USE_OPENCL)
  find_package(OpenCL REQUIRED)
  find_package(CLHPP REQUIRED)
  find_package(clBLAS REQUIRED)
endif()

# Include directories.
include_directories(
  ${PROJECT_SOURCE_DIR}
  ${PROJECT_BINARY_DIR})
if(PRIMITIV_USE_CUDA)
  include_directories(SYSTEM ${CUDA_INCLUDE_DIRS})
endif()
if(PRIMITIV_USE_OPENCL)
  include_directories(${CLHPP_INCLUDE_DIR})
endif()

# core library
add_subdirectory(primitiv)

# tests
if(PRIMITIV_BUILD_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()
",3.1.0,3.1
29935,zrax,string_theory,False,False,False,False,False,2,C++,2020-05-14 20:28:30+00:00,2016-03-27 20:06:56+00:00,17,366,"# Copyright (c) 2016 Michael Hansen
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the ""Software""),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(string_theory)

# We will detect and use optional features in newer C++ standards,
# but C++11 is required at minimum
if(${CMAKE_VERSION} VERSION_GREATER ""3.11.99"")
    set(CMAKE_CXX_STANDARD 20)
elseif(${CMAKE_VERSION} VERSION_GREATER ""3.7.99"")
    set(CMAKE_CXX_STANDARD 17)
else()
    set(CMAKE_CXX_STANDARD 14)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED OFF)
set(CMAKE_CXX_EXTENSIONS OFF)

if(POLICY CMP0067)
    # Honor CMAKE_CXX_STANDARD in try_compile() commands
    cmake_policy(SET CMP0067 NEW)
endif()

set(ST_MAJOR_VERSION 3)
set(ST_MINOR_VERSION 2)
set(ST_VERSION ${ST_MAJOR_VERSION}.${ST_MINOR_VERSION})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake"")

if(CMAKE_COMPILER_IS_GNUCXX OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES "".*Clang"")
    set(CMAKE_CXX_FLAGS ""-Wall -Wextra ${CMAKE_CXX_FLAGS}"")
endif()

option(ST_ENABLE_STL_STRINGS ""Enable std::*string and std::*string_view support"" ON)
option(ST_ENABLE_STL_FILESYSTEM ""Enable std::filesystem::path support"" ON)

option(ST_BUILD_TEST_COVERAGE ""Enable code coverage in string_theory and tests"" OFF)
if(ST_BUILD_TEST_COVERAGE)
    if(CMAKE_COMPILER_IS_GNUCXX)
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage"")
    elseif(""${CMAKE_CXX_COMPILER_ID}"" MATCHES "".*Clang"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fprofile-instr-generate -fcoverage-mapping"")
    else()
        message(FATAL_ERROR ""Don't know how to generate profile data for this compiler"")
    endif()
endif()

try_compile(ST_HAVE_CXX20_CHAR8_TYPES ""${PROJECT_BINARY_DIR}""
            ""${PROJECT_SOURCE_DIR}/cmake/check_char8_types.cpp"")
try_compile(ST_HAVE_INT64 ""${PROJECT_BINARY_DIR}""
            ""${PROJECT_SOURCE_DIR}/cmake/check_int64.cpp"")
try_compile(ST_HAVE_DEPRECATED_ATTR ""${PROJECT_BINARY_DIR}""
            ""${PROJECT_SOURCE_DIR}/cmake/check_deprecated_attr.cpp"")
try_compile(ST_HAVE_NODISCARD_ATTR ""${PROJECT_BINARY_DIR}""
            ""${PROJECT_SOURCE_DIR}/cmake/check_nodiscard.cpp"")

try_compile(ST_HAVE_CXX17_STRING_VIEW ""${PROJECT_BINARY_DIR}""
    ""${PROJECT_SOURCE_DIR}/cmake/check_string_view.cpp"")
try_compile(ST_HAVE_EXPERIMENTAL_STRING_VIEW ""${PROJECT_BINARY_DIR}""
    ""${PROJECT_SOURCE_DIR}/cmake/check_string_view.cpp""
    COMPILE_DEFINITIONS ""-DTRY_EXPERIMENTAL_STRING_VIEW"")

if(ST_ENABLE_STL_FILESYSTEM)
    if(CMAKE_COMPILER_IS_GNUCXX)
        set(ST_CXXFS_LIBS stdc++fs)
    endif()
    try_compile(ST_HAVE_CXX17_FILESYSTEM ""${PROJECT_BINARY_DIR}""
                ""${PROJECT_SOURCE_DIR}/cmake/check_filesystem.cpp""
                LINK_LIBRARIES ${ST_CXXFS_LIBS})
    try_compile(ST_HAVE_EXPERIMENTAL_FILESYSTEM ""${PROJECT_BINARY_DIR}""
                ""${PROJECT_SOURCE_DIR}/cmake/check_filesystem.cpp""
                COMPILE_DEFINITIONS ""-DTRY_EXPERIMENTAL_FILESYSTEM""
                LINK_LIBRARIES ${ST_CXXFS_LIBS})
    try_compile(ST_HAVE_CXX20_U8_FSPATH ""${PROJECT_BINARY_DIR}""
                ""${PROJECT_SOURCE_DIR}/cmake/check_fs_path_u8_ctor.cpp""
                LINK_LIBRARIES ${ST_CXXFS_LIBS})
endif()

configure_file(""${PROJECT_SOURCE_DIR}/include/st_config.h.in""
               ""${PROJECT_BINARY_DIR}/include/st_config.h"")
include_directories(""${PROJECT_BINARY_DIR}/include"")

set(ST_HEADERS_PRIV
    include/st_assert.h
    include/st_charbuffer.h
    include/st_codecs.h
    include/st_codecs_priv.h
    include/st_format.h
    include/st_format_numeric.h
    include/st_format_priv.h
    include/st_formatter.h
    include/st_iostream.h
    include/st_stdio.h
    include/st_string.h
    include/st_string_priv.h
    include/st_stringstream.h
    include/st_utf_conv.h
    include/st_utf_conv_priv.h
    ""${PROJECT_BINARY_DIR}/include/st_config.h""
)
set(ST_HEADERS_PUB
    include/string_theory/assert
    include/string_theory/char_buffer
    include/string_theory/codecs
    include/string_theory/exceptions
    include/string_theory/formatter
    include/string_theory/format
    include/string_theory/iostream
    include/string_theory/stdio
    include/string_theory/string
    include/string_theory/string_stream
    include/string_theory/utf_conversion
)

set(ST_SOURCES
    src/st_format.cpp
    src/st_utf_conv.cpp
)

set(ST_INSTALL_BIN_DIR ""bin"" CACHE PATH ""Path to install DLLs on Windows"")
set(ST_INSTALL_LIB_DIR ""lib"" CACHE PATH ""Path to install shared libraries"")
set(ST_INSTALL_INCLUDE_DIR ""include"" CACHE PATH ""Path to install headers"")
set(ST_INSTALL_CMAKE_DIR ""${ST_INSTALL_LIB_DIR}/cmake"" CACHE PATH ""Path to install CMake files"")

add_library(string_theory INTERFACE)

target_include_directories(string_theory INTERFACE
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)

install(TARGETS string_theory
        EXPORT string_theory-targets
)
install(FILES ${ST_HEADERS_PRIV} ${ST_HEADERS_PUB}
        DESTINATION ""${ST_INSTALL_INCLUDE_DIR}/string_theory"" COMPONENT devel)

export(TARGETS string_theory
       FILE ""${PROJECT_BINARY_DIR}/string_theory-targets.cmake"")

configure_file(cmake/string_theory-config.cmake.in
               ""${PROJECT_BINARY_DIR}/string_theory-config.cmake"" @ONLY)
configure_file(cmake/string_theory-config-version.cmake.in
               ""${PROJECT_BINARY_DIR}/string_theory-config-version.cmake"" @ONLY)

install(FILES
        ""${PROJECT_BINARY_DIR}/string_theory-config.cmake""
        ""${PROJECT_BINARY_DIR}/string_theory-config-version.cmake""
        DESTINATION ""${ST_INSTALL_CMAKE_DIR}/string_theory"" COMPONENT devel)
install(EXPORT string_theory-targets
        DESTINATION ""${ST_INSTALL_CMAKE_DIR}/string_theory"" COMPONENT devel)

option(ST_BUILD_TESTS ""Build string_theory test suite (recommended)"" ON)
if(ST_BUILD_TESTS)
    add_subdirectory(test)
endif()
",3.1,3.1
30022,reedacartwright,dawg,False,False,False,False,False,5,C++,2020-04-01 20:57:58+00:00,2015-09-08 05:25:10+00:00,8,734,"###########################################################
#  Dawg's Project Configuration
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0 FATAL_ERROR)
CMAKE_POLICY(SET CMP0028 NEW)
PROJECT(Dawg)

set(NEW_PACKAGE_NAME ""dawg"")
set(NEW_PACKAGE_VERSION ""2-current-rUnknown"")

SET(CMAKE_BUILD_TYPE_INIT ""RelWithDebInfo"")
SET(CMAKE_VERBOSE_MAKEFILE OFF CACHE BOOL ""Turn on Verbose Makefiles"" FORCE)
SET(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Modules"")
SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)
SET(BUILD_EXTERNAL_PROJECTS OFF CACHE BOOL ""Build external dependencies if they are not found."")

SET(USE_STATIC_LIBS OFF CACHE BOOL ""Link against static libraries."")
SET(LIBDAWG_USE_STATIC_LIBS OFF CACHE BOOL ""Link against a static version of libdawg2."")
SET(RANDOM_GEN ""xorshift_64"" CACHE STRING ""Pseudo-random number generator to use."")
MARK_AS_ADVANCED(RANDOM_GEN)

SET(DAWG_BUILD_DOC OFF CACHE BOOL ""TRUE to generate Doxygen API docs, FALSE to ignore it"")

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

# guard against in-source builds
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    message(FATAL_ERROR ""In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. "")
endif()

## Guard against bad build-type strings
IF(CMAKE_BUILD_TYPE)
    string(TOLOWER ""${CMAKE_BUILD_TYPE}"" cmake_build_type_tolower)
    if(    NOT cmake_build_type_tolower STREQUAL ""debug""
            AND NOT cmake_build_type_tolower STREQUAL ""release""
            AND NOT cmake_build_type_tolower STREQUAL ""relwithdebinfo""
            AND NOT cmake_build_type_tolower STREQUAL ""minsizerel""
            AND NOT cmake_build_type_tolower STREQUAL ""none"")
        message(FATAL_ERROR ""Unsupported build type \""${CMAKE_BUILD_TYPE}\"". Allowed values are Debug, Release, RelWithDebInfo, MinSizeRel, and None (case-insensitive)."")
    endif()
    message(STATUS ""Compiling with build type '${CMAKE_BUILD_TYPE}'."")
ENDIF()

#### RPATH Support #####
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
if(""${isSystemDir}"" STREQUAL ""-1"")
   set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
endif()

INCLUDE(DawgDevel)
INCLUDE(NewPackage)

if(WIN32 AND NOT UNIX)
	set(DIR_SUFFIX """")
else()
	set(DIR_SUFFIX ""\${NEW_PACKAGE_INSTALL_SUFFIX}"")
endif()
SET(CMAKE_DATA_DIR ""share${DIR_SUFFIX}"" CACHE STRING
  ""Install location for data (relative to prefix)."")
SET(CMAKE_DOC_DIR ""doc${DIR_SUFFIX}"" CACHE STRING
  ""Install location for documentation (relative to prefix)."")
SET(CMAKE_MAN_DIR ""man"" CACHE STRING
  ""Install location for man pages (relative to prefix)."")
MARK_AS_ADVANCED(CMAKE_DATA_DIR CMAKE_DOC_DIR CMAKE_MAN_DIR)

## Turn on unit and executable testing
ENABLE_TESTING()

################################################################################
# Detect Version Information
FIND_PACKAGE(Git)
SET(GIT_COMMIT_ID ""unknown"")
IF(GIT_FOUND)
    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags --dirty
            WORKING_DIRECTORY ""${PROJECT_SOURCE_DIR}""
            RESULT_VARIABLE res_var OUTPUT_VARIABLE GIT_COM_ID
            ERROR_QUIET)
    IF(${res_var} EQUAL 0 )
        STRING( REPLACE ""\n"" """" GIT_COMMIT_ID ""${GIT_COM_ID}"" )
    ENDIF()
ENDIF()

# try directory name
IF(NOT GIT_COMMIT_ID AND PROJECT_SOURCE_DIR MATCHES ""${NEW_PACKAGE_NAME}-([-a-zA-Z0-9.]*)$"" )
    SET(GIT_COMMIT_ID ""${CMAKE_MATCH_1}"")
ENDIF()

# extract project info
IF(GIT_COMMIT_ID MATCHES
        ""^v?([0-9]+)\\.([0-9]+)\\.?([0-9]+)?((-[a-zA-Z]+)?(-[0-9]+)?(-g[0-9A-Fa-f]+)?(-dirty)?)$"" )
    IF(NOT DEFINED DAWG_VERSION_MAJOR)
        SET(DAWG_VERSION_MAJOR ""${CMAKE_MATCH_1}"")
    ENDIF()
    IF(NOT DEFINED DAWG_VERSION_MINOR)
        SET(DAWG_VERSION_MINOR ""${CMAKE_MATCH_2}"")
    ENDIF()
    IF(NOT DEFINED DAWG_VERSION_PATCH)
        SET(DAWG_VERSION_PATCH ""${CMAKE_MATCH_3}"")
    ENDIF()
    IF(NOT DEFINED DAWG_VERSION_COMMIT)
        STRING(REGEX REPLACE ""^-"" """" DAWG_VERSION_COMMIT ""${CMAKE_MATCH_4}"")
    ENDIF()
ELSE()
    # We were unable to determine project information, use the default values
    INCLUDE(""${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in"")
ENDIF()

SET(DAWG_VERSION ""${DAWG_VERSION_MAJOR}.${DAWG_VERSION_MINOR}"")
SET(DAWG_VERSION_SHORT ""${DAWG_VERSION_MAJOR}.${DAWG_VERSION_MINOR}"")
IF(DEFINED DAWG_VERSION_PATCH)
    SET(DAWG_VERSION ""${DAWG_VERSION}.${DAWG_VERSION_PATCH}"")
    SET(DAWG_VERSION_SHORT ""${DAWG_VERSION_SHORT}.${DAWG_VERSION_PATCH}"")
ENDIF()
IF(DAWG_VERSION_COMMIT)
    SET(DAWG_VERSION ""${DAWG_VERSION}-${DAWG_VERSION_COMMIT}"")
    SET(DAWG_VERSION_SHORT ""${DAWG_VERSION_SHORT}-${DAWG_VERSION_COMMIT}"")
ENDIF()

MESSAGE(STATUS ""${DAWG_NAME} version: ${DAWG_VERSION}."")

################################################################################
# Packaging Information

SET(CPACK_SOURCE_IGNORE_FILES
  ""dawg\\\\.exe""  ""dawg$""
)

SET(CPACK_PACKAGE_NAME ""Dawg"")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Sequence Evolution Simulator"")
SET(CPACK_PACKAGE_VENDOR ""Reed A. Cartwright"")
SET(CPACK_PACKAGE_EXECUTABLES ""dawg"" ""Dawg"")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})

IF(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  SET(CPACK_NSIS_DISPLAY_NAME ""Dawg ${NEW_PACKAGE_VERSION}"")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME ""bin\\\\dawg.exe"")
  SET(CPACK_NSIS_HELP_LINK ""http:\\\\\\\\scit.us\\\\projects\\\\dawg\\\\"")
  SET(CPACK_NSIS_URL_INFO_ABOUT ""http:\\\\\\\\scit.us\\\\projects\\\\dawg\\\\"")
  SET(CPACK_NSIS_CONTACT ""cartwright@asu.edu"")
ELSE()
  SET(CPACK_STRIP_FILES ""bin/dawg"")
ENDIF()

INCLUDE(CPackBefore)
INCLUDE(CPack)
INCLUDE(ExternalDep)

INSTALL(FILES copying.txt readme.txt changelog.txt DESTINATION ${CMAKE_DOC_DIR})
INSTALL(FILES lambda.pl outsplit.pl nexus2fasta.pl varrep.pl DESTINATION ${CMAKE_DATA_DIR})

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples)
IF(DAWG_BUILD_DOC) 
    ADD_SUBDIRECTORY(doc)
ENDIF(DAWG_BUILD_DOC)
ADD_SUBDIRECTORY(tests)

ADD_DEPENDENCIES(new_package dawg)
ADD_DEPENDENCIES(dawg version)

########### Add uninstall target ###############
CONFIGURE_FILE(
  ""${CMAKE_CURRENT_SOURCE_DIR}/Modules/cmake_uninstall.cmake.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
  IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
  ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"") 

#INCLUDE(InstallRequiredSystemLibraries)

",3.1.0,3.1
30051,arobenko,mqtt-sn,False,False,False,False,False,2,C++,2020-05-04 21:45:49+00:00,2016-06-22 08:00:20+00:00,27,374,"cmake_minimum_required (VERSION 3.1)
project (""mqttsn"")

option (CC_MQTTSN_NO_WARN_AS_ERR ""Do NOT treat warning as error"" OFF)
option (CC_MQTTSN_CLIENT_DEFAULT_LIB ""Build and install default variant of MQTT-SN Client library"" ON)
option (CC_MQTTSN_BUILD_GATEWAY ""Build and install MQTT-SN client library(ies) and applications"" ON)
option (CC_MQTTSN_NO_UNIT_TESTS ""Disable unittests."" OFF)
option (CC_MQTTSN_NO_VALGRIND ""Disable valgrind in unittests."" OFF)
option (CC_MQTTSN_EXTERNALS_UPDATE_DISCONNECTED ""Allow skip of external projects update."" OFF)

# Extra variables
# CC_MAIN_INSTALL_DIR - Path to external installation directory of comms_champion project.
# CC_MQTTSN_GENERATED_INSTALL_DIR - Path to external installation directory of cc.mqttsn.generated project.
# CC_MQTT311_GENERATED_INSTALL_DIR - Path to external installation directory of cc.mqtt311.generated project.
# CC_MQTTSN_CUSTOM_CLIENT_CONFIG_FILES - List of custom client configuration files
# CC_MQTTSN_DEFAULT_CLIENT_CONFIG_FILE - Custom congiruation of the default client.

# CC_COMMS_CHAMPION_REPO - Repository of comms_champion project. Defaults to https://github.com/arobenko/comms_champion.git
# CC_COMMS_CHAMPION_TAG - Tag to use for external comms_champion project. Can be empty.
# CC_COMMS_CHAMPION_CMAKE_ARGS - Extra CMake arguments  pass to external comms_champion project

# CC_MQTTSN_PROTOCOL_REPO - Repository of cc.mqttsn.generated project. Defaults to https://github.com/arobenko/cc.mqttsn.generated.git
# CC_MQTTSN_PROTOCOL_TAG - Tag to use for external cc.mqttsn.generated project. Can be empty.
# CC_MQTTSN_PROTOCOL_CMAKE_ARGS - Extra CMake arguments  pass to external cc.mqttsn.generated project

# CC_MQTT311_PROTOCOL_REPO - Repository of cc.mqtt311.generated project. Defaults to https://github.com/arobenko/cc.mqtt311.generated.git
# CC_MQTT311_PROTOCOL_TAG - Tag to use for external cc.mqttsn.generated project. Can be empty.
# CC_MQTT311_PROTOCOL_CMAKE_ARGS - Extra CMake arguments  pass to external cc.mqtt311.generated project


# Updating default settings
if (NOT CMAKE_CXX_STANDARD)
    set (CMAKE_CXX_STANDARD 11)
endif()

if (""${CC_COMMS_CHAMPION_REPO}"" STREQUAL """")
    set (CC_COMMS_CHAMPION_REPO ""https://github.com/arobenko/comms_champion.git"")
endif ()

if (""${CC_COMMS_CHAMPION_TAG}"" STREQUAL """")
    set (CC_COMMS_CHAMPION_TAG ""v2.4"")
endif ()

if (""${CC_MQTTSN_PROTOCOL_REPO}"" STREQUAL """")
    set (CC_MQTTSN_PROTOCOL_REPO ""https://github.com/arobenko/cc.mqttsn.generated.git"")
endif ()

if (""${CC_MQTTSN_PROTOCOL_TAG}"" STREQUAL """")
    set (CC_MQTTSN_PROTOCOL_TAG ""v0.16"")
endif ()

if (""${CC_MQTT311_PROTOCOL_REPO}"" STREQUAL """")
    set (CC_MQTT311_PROTOCOL_REPO ""https://github.com/arobenko/cc.mqtt311.generated.git"")
endif ()

if (""${CC_MQTT311_PROTOCOL_TAG}"" STREQUAL """")
    set (CC_MQTT311_PROTOCOL_TAG ""v0.16"")
endif ()

##########################################################################

set (COMPILER_OPTIONS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER})
if (CMAKE_TOOLCHAIN_FILE AND EXISTS ${CMAKE_TOOLCHAIN_FILE})
    message(STATUS ""Loading toolchain from ${CMAKE_TOOLCHAIN_FILE}"")
    set (COMPILER_OPTIONS -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})
endif()

set (EXTERNALS_DIR ""${PROJECT_SOURCE_DIR}/externals"")
set (CXXTEST_EXTERNAL_DIR ""${EXTERNALS_DIR}/cxxtest"")

while (TRUE)
    if (CC_MQTTSN_NO_UNIT_TESTS)
        message (STATUS ""Unittests are disabled"")
        break()
    endif ()
    
    if (CMAKE_CROSSCOMPILING)
        message (STATUS ""Not building unittests when cross-compiling"")
        break()
    endif ()
    
    find_package (Git)
    if (NOT GIT_FOUND)
        message (WARNING ""Git is required to check out cxxtest"")
        break()
    endif ()
    
    set (cxx_tag ""4.4"")
    set (cxxtest_stamp ""${EXTERNALS_DIR}/cxxtest.stamp"")
    if ((EXISTS ${cxxtest_stamp}) AND (EXISTS ""${CXXTEST_EXTERNAL_DIR}""))
        message (STATUS ""Updating cxxtest"")
        execute_process (
            COMMAND ${GIT_EXECUTABLE} checkout ${cxx_tag}
            WORKING_DIRECTORY ${CXXTEST_EXTERNAL_DIR}
        )
    else ()
        execute_process (
            COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CXXTEST_EXTERNAL_DIR}""
        )
        
        execute_process (
            COMMAND ${CMAKE_COMMAND} -E make_directory ""${EXTERNALS_DIR}""
        )

        message (STATUS ""Cloning cxxtest"")
        execute_process (
            COMMAND ${GIT_EXECUTABLE} clone -b ${cxx_tag} --depth 1 https://github.com/CxxTest/cxxtest.git
            WORKING_DIRECTORY ${EXTERNALS_DIR}
            RESULT_VARIABLE git_result
        )

        if (NOT ""${git_result}"" STREQUAL ""0"")
            message (WARNING ""git clone/checkout failed"")
            break()
        endif ()

        execute_process (
            COMMAND ${CMAKE_COMMAND} -E touch ""${cxxtest_stamp}""
        )
    endif ()

    set (CXXTEST_INCLUDE_DIR ""${CXXTEST_EXTERNAL_DIR}"")
    set (CXXTEST_PYTHON_TESTGEN_EXECUTABLE ""${CXXTEST_INCLUDE_DIR}/bin/cxxtestgen"")
    
    find_package (CxxTest)
    if (NOT CXXTEST_FOUND)
        message (WARNING ""Wrong cxxtest paths, must be fixed"")
        break ()
    endif ()
    
    if (NOT CC_MQTTSN_NO_VALGRIND)
        if (""${CC_MQTTSN_VALGRAND_EXE_NAME}"" STREQUAL """")
            set (CC_MQTTSN_VALGRAND_EXE_NAME ""valgrind"")
        endif ()
        find_program(VALGRIND_EXECUTABLE NAMES ""${CC_MQTTSN_VALGRAND_EXE_NAME}"")
    endif ()
    
    enable_testing ()
    break()
endwhile ()

if (UNIX AND (NOT CC_MQTTSN_NO_CCACHE))
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    endif(CCACHE_FOUND)
endif ()    

if ((CMAKE_COMPILER_IS_GNUCC) OR (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang""))
    set (extra_flags_list
        ""-Wall"" ""-Wextra"" ""-Wcast-align"" ""-Wcast-qual"" ""-Wctor-dtor-privacy""
        ""-Wmissing-include-dirs""
        ""-Woverloaded-virtual"" ""-Wredundant-decls"" ""-Wshadow"" ""-Wundef"" ""-Wunused""
        ""-Wno-unknown-pragmas"" ""-fdiagnostics-show-option""
    )

    if (CMAKE_COMPILER_IS_GNUCC)
        list (APPEND extra_flags_list
            ""-Wnoexcept"" ""-Wlogical-op"" ""-Wstrict-null-sentinel""
        )
    endif ()

    if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
        list (APPEND extra_flags_list ""-Wno-dangling-field"" ""-Wno-unused-command-line-argument"")
    endif ()

    if (NOT CC_MQTTSN_NO_WARN_AS_ERR)
        list (APPEND extra_flags_list ""-Werror"")
    endif ()
    
    string(REPLACE "";"" "" "" extra_flags ""${extra_flags_list}"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${extra_flags}"")
    
    set (CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined"") 
elseif (MSVC)
    add_definitions( ""/wd4503"" ""/wd4309"" ""/wd4267"" ""-D_SCL_SECURE_NO_WARNINGS"")
    
    if (NOT CC_NO_WARN_AS_ERR)
        add_definitions(""/WX"")
    endif ()
endif ()

set (INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

include(GNUInstallDirs)
set (INSTALL_NAME ""CC_Mqttsn"")
set (LIB_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_LIBDIR})
set (BIN_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_BINDIR})
set (ETC_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_SYSCONFDIR})
set (INC_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_INCLUDEDIR})
set (CONFIG_INSTALL_DIR ${INSTALL_DIR}/config)
set (PLUGIN_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_LIBDIR}/CommsChampion/plugin)
set (DOC_INSTALL_DIR ${INSTALL_DIR}/doc)

set (DEFAULT_CLIENT_LIB_TGT ""cc_mqttsn_client"")

if (NOT ""${CC_MQTTSN_QT_DIR}"" STREQUAL """")
    list (APPEND CMAKE_PREFIX_PATH ${CC_MQTTSN_QT_DIR})
endif ()

######################################################################

set (CC_EXTERNAL_DIR ""${EXTERNALS_DIR}/comms_champion"")
set (CC_EXTERNAL_TGT ""comms_champion_external"")
if (""${CC_MAIN_INSTALL_DIR}"" STREQUAL """")
    execute_process (
        COMMAND ${CMAKE_COMMAND} -E make_directory ""${EXTERNALS_DIR}"")
        
        
    include(ExternalProject)
    
    set (cc_tag ""${CC_COMMS_CHAMPION_TAG}"")
    set (cc_repo ""${CC_COMMS_CHAMPION_REPO}"")
    set (cc_main_dir ""${CMAKE_CURRENT_BINARY_DIR}/comms_champion"")
    set (cc_src_dir ""${CC_EXTERNAL_DIR}"")
    set (cc_bin_dir ""${cc_main_dir}/build"")
    set (cc_install_dir ""${cc_main_dir}/install"")
    set (cc_update_disconnected)
    if (CC_MQTTSN_EXTERNALS_UPDATE_DISCONNECTED)
        set (cc_update_disconnected UPDATE_DISCONNECTED 1)
    endif ()
    
    find_package (Git REQUIRED)
    set (ext_targets_inc_file ""${cc_src_dir}/cmake/CC_DefineExternalProjectTargets.cmake"")
    if (NOT EXISTS ""${ext_targets_inc_file}"")
        execute_process (
            COMMAND ${CMAKE_COMMAND} -E remove_directory ""${cc_src_dir}""
        )

        execute_process (
            COMMAND 
                ${GIT_EXECUTABLE} clone -b ${cc_tag} --depth 1 ${cc_repo} ${cc_src_dir}
            RESULT_VARIABLE git_result
        )

        if (NOT ""${git_result}"" STREQUAL ""0"")
            message (FATAL_ERROR ""git clone/checkout failed"")
        endif ()

        if (NOT EXISTS ""${ext_targets_inc_file}"")
             message (FATAL_ERROR ""Incompatible version of ${cc_repo}, please use different tag."")
        endif ()

    endif ()
    
    ExternalProject_Add(
        ""${CC_EXTERNAL_TGT}""
        PREFIX ""${cc_bin_dir}""
        STAMP_DIR ""${cc_bin_dir}""    
        GIT_REPOSITORY ""${cc_repo}""
        GIT_TAG ""${cc_tag}""
        SOURCE_DIR ""${cc_src_dir}""
        CMAKE_ARGS 
            ${COMPILER_OPTIONS}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${cc_install_dir} 
            -DCC_NO_UNIT_TESTS=ON -DCC_NO_WARN_AS_ERR=ON -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
            -DCC_COMMS_LIB_ONLY=ON
            ${CC_COMMS_CHAMPION_CMAKE_ARGS}
        BINARY_DIR ""${cc_bin_dir}""
        ${cc_update_disconnected}
    )
    
    include (${ext_targets_inc_file})
    cc_define_external_project_targets(${cc_install_dir} NO_COMMS_CHAMPION)
else ()
    list (APPEND CMAKE_PREFIX_PATH ""${CC_MAIN_INSTALL_DIR}"")
    find_package(LibComms NO_MODULE)
    if (NOT TARGET cc::comms)
        message (FATAL_ERROR ""Failed to find external COMMS library"")
    endif ()
endif ()

######################################################################

set (CC_MQTTSN_EXTERNAL_DIR ""${EXTERNALS_DIR}/cc.mqttsn.generated"")
set (CC_MQTTSN_EXTERNAL_TGT ""mqttsn_external"")
set (CC_MQTTSN_EXTERNAL_TGT_INCLUDE)

if (""${CC_MQTTSN_GENERATED_INSTALL_DIR}"" STREQUAL """")
    execute_process (
        COMMAND ${CMAKE_COMMAND} -E make_directory ""${EXTERNALS_DIR}"")
        
    include(ExternalProject)
    
    set (cc_mqttsn_generated_tag ""${CC_MQTTSN_PROTOCOL_TAG}"")
    set (cc_mqttsn_main_dir ""${CMAKE_CURRENT_BINARY_DIR}/cc.mqttsn.generated"")
    set (cc_mqttsn_src_dir ""${CC_MQTTSN_EXTERNAL_DIR}"")
    set (cc_mqttsn_bin_dir ""${cc_mqttsn_main_dir}/build"")
    set (cc_mqttsn_install_dir ""${cc_mqttsn_main_dir}/install"")
    set (cc_mqttsn_update_disconnected)
    
    if (CC_MQTTSN_EXTERNALS_UPDATE_DISCONNECTED)
        set (cc_mqttsn_update_disconnected UPDATE_DISCONNECTED 1)
    endif ()
    
    
    ExternalProject_Add(
        ""${CC_MQTTSN_EXTERNAL_TGT}""
        PREFIX ""${cc_mqttsn_bin_dir}""
        STAMP_DIR ""${cc_mqttsn_bin_dir}""    
        GIT_REPOSITORY ""${CC_MQTTSN_PROTOCOL_REPO}""
        GIT_TAG ""${cc_mqttsn_generated_tag}""
        SOURCE_DIR ""${cc_mqttsn_src_dir}""
        CMAKE_ARGS 
            ${COMPILER_OPTIONS}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${cc_mqttsn_install_dir} 
            -DOPT_NO_COMMS=ON -DOPT_BUILD_TEST=OFF -DOPT_BUILD_PLUGIN=OFF
            -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} 
            ${CC_MQTTSN_PROTOCOL_CMAKE_ARGS}
        BINARY_DIR ""${cc_mqttsn_bin_dir}""
        ${cc_mqttsn_update_disconnected}
    )
    set (CC_MQTTSN_EXTERNAL_TGT_INCLUDE ""${cc_mqttsn_install_dir}/include"") 
else ()
    list (APPEND CMAKE_PREFIX_PATH ""${CC_MQTT311_GENERATED_INSTALL_DIR}"")
    find_package(mqtt311 NO_MODULE)
    if (NOT TARGET cc::mqtt311)
        message (FATAL_ERROR ""Failed to find external mqtt311 library"")
    endif ()
endif ()

######################################################################

add_subdirectory(client)
add_subdirectory(gateway)

",3.1,3.1
30062,ORNL-Fusion,GITR,False,False,False,False,False,8,C++,2020-04-21 01:03:43+00:00,2017-01-23 21:40:51+00:00,3,703,"cmake_minimum_required(VERSION 3.1)
project(gitr)

set(OPENMP 1)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMake/)
set(CMAKE_CXX_STANDARD 17) # Doesn't set NVCC C++ standard
set(CXX_STANDARD_REQUIRED TRUE)

# Set source files
file(GLOB SRC_FILES src/*.cpp)
file(GLOB TEST_FILES src/*.cpp test/tests_general.cpp)
file(GLOB TEST_FILE_IO test/file_io_tests.cpp)
file(GLOB TEST_COULOMB test/coulomb_tests.cpp)
file(GLOB TEST_FIELD test/field_tests.cpp)
file(GLOB TEST_ATOMIC test/atomic_tests.cpp)
list (REMOVE_ITEM TEST_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/gitr.cpp)
message(""${TEST_FILES}"")
file( GLOB HEADER_FILES include/*.h test/tests_general.hpp)
add_library(YourLib ${TEST_FILES})
include_directories( ${HEADER_FILES})
find_package(Thrust REQUIRED)
find_package(NetCDF COMPONENTS CXX REQUIRED)
find_package(LibConfig)
find_package(MPI)
IF (MPI_FOUND)
    include_directories(SYSTEM ${MPI_INCLUDE_PATH})
endif()
find_package(OpenMP REQUIRED)
# Add includes
include_directories(${NETCDF_INCLUDE_DIRS})
include_directories(${CMAKE_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/include)
include_directories(${THRUST_INCLUDE_DIRS})
include_directories(${LIBCONFIGPP_INCLUDE_DIR})
add_definitions(-DUSE_PARALLEL -DHAS_NETCDF_PAR_H)
# Simulation defines
add_definitions(-DUSE_CUDA=${USE_CUDA}
        -DUSE_MPI=${USE_MPI}
        -DUSEIONIZATION=${USEIONIZATION}
        -DUSERECOMBINATION=${USERECOMBINATION}
        -DUSEPERPDIFFUSION=${USEPERPDIFFUSION}
        -DUSECOULOMBCOLLISIONS=${USECOULOMBCOLLISIONS}
        -DUSEFRICTION=${USEFRICTION}
        -DUSEANGLESCATTERING=${USEANGLESCATTERING}
        -DUSEHEATING=${USEHEATING}
        -DUSETHERMALFORCE=${USETHERMALFORCE}
        -DUSESURFACEMODEL=${USESURFACEMODEL}
        -DUSESHEATHEFIELD=${USESHEATHEFIELD}
        -DBIASED_SURFACE=${BIASED_SURFACE}
        -DUSEPRESHEATHEFIELD=${USEPRESHEATHEFIELD}
        -DBFIELD_INTERP=${BFIELD_INTERP}
        -DLC_INTERP=${LC_INTERP}
        -DGENERATE_LC=${GENERATE_LC}
        -DEFIELD_INTERP=${EFIELD_INTERP}
        -DPRESHEATH_INTERP=${PRESHEATH_INTERP}
        -DDENSITY_INTERP=${DENSITY_INTERP}
        -DTEMP_INTERP=${TEMP_INTERP}
        -DFLOWV_INTERP=${FLOWV_INTERP}
        -DGRADT_INTERP=${GRADT_INTERP}
        -DODEINT=${ODEINT}
        -DFIXEDSEEDS=${FIXEDSEEDS}
        -DPARTICLESEEDS=${PARTICLESEEDS}
        -DGEOM_TRACE=${GEOM_TRACE}
        -DGEOM_HASH=${GEOM_HASH}
        -DGEOM_HASH_SHEATH=${GEOM_HASH_SHEATH}
        -DPARTICLE_TRACKS=${PARTICLE_TRACKS}
        -DPARTICLE_SOURCE=${PARTICLE_SOURCE}
        -DPARTICLE_SOURCE_SPACE=${PARTICLE_SOURCE_SPACE}
        -DPARTICLE_SOURCE_ENERGY=${PARTICLE_SOURCE_ENERGY}
        -DPARTICLE_SOURCE_ANGLE=${PARTICLE_SOURCE_ANGLE}
        -DPARTICLE_SOURCE_FILE=${PARTICLE_SOURCE_FILE}
        -DSPECTROSCOPY=${SPECTROSCOPY}
        -DUSE3DTETGEOM=${USE3DTETGEOM}
        -DUSECYLSYMM=${USECYLSYMM}
        -DUSEFIELDALIGNEDVALUES=${USEFIELDALIGNEDVALUES}
        -DFLUX_EA=${FLUX_EA}
        -DFORCE_EVAL=${FORCE_EVAL}
        -DUSE_SORT=${USE_SORT}
        -DCHECK_COMPATIBILITY=${CHECK_COMPATIBILITY})

# Setup for CUDA backend
if (${CUDA})
    Message(""Enabling CUDA backend"")
    find_package(CUDA REQUIRED)
    set(CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
    set(CUDA_SEPARABLE_COMPILATION TRUE)
    #set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -DCUDA -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_CUDA --std=c++14 -O3 --expt-relaxed-constexpr) #-O3 --expt-extended-lambda --expt-relaxed-constexpr -g -G --cudart shared
    set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -DCUDA -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_CUDA --std=c++14 -O3 --expt-relaxed-constexpr --expt-extended-lambda) #-O3 --expt-extended-lambda --expt-relaxed-constexpr -g -G --cudart shared

    set_source_files_properties(${SRC_FILES} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    #test comment
    set_source_files_properties(${TEST_FILES} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    set_source_files_properties(${TEST_FILE_IO} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    set_source_files_properties(${TEST_COULOMB} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    set_source_files_properties(${TEST_ATOMIC} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    set_source_files_properties(${TEST_FIELD} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    CUDA_ADD_EXECUTABLE(tests ${TEST_FILE_IO} ${TEST_FILES})
    CUDA_ADD_EXECUTABLE(coulomb_tests ${TEST_COULOMB} ${TEST_FILES})
    CUDA_ADD_EXECUTABLE(field_tests ${TEST_FIELD} ${TEST_FILES})
    CUDA_ADD_EXECUTABLE(atomic_tests ${TEST_ATOMIC} ${TEST_FILES})
    cuda_add_executable(GITR ${SRC_FILES})
endif ()

# setup for OpenMP backend
if (${OPENMP})
    ADD_EXECUTABLE(tests test/file_io_tests.cpp)
    ADD_EXECUTABLE(coulomb_tests test/coulomb_tests.cpp)
    ADD_EXECUTABLE(field_tests test/field_tests.cpp)
    ADD_EXECUTABLE(atomic_tests test/atomic_tests.cpp)
    #ADD_EXECUTABLE(geom_test test/geometry_tests.cpp)
    Message(""Enabling OpenMP backend"")
    find_package(OpenMP REQUIRED)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -O3 -gline-tables-only -std=c++1z -std=c++1z -stdlib=libc++ -nostdinc++ -I/opt/local/libexec/llvm-devel/include/c++/v1 -L/opt/local/libexec/llvm-devel/lib/c++/v1 -Wl,-rpath,-I/opt/local/libexec/llvm-devel/include/c++/v1"") # -Wno-c++11-narrowing -fstack-protector-all -fstack-check -W -Wall"") #-O3 -g -G -fsanitize=address
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -std=c++1z"") # -nostdinc++ -I/opt/local/libexec/llvm-devel/include/c++/v1 -L/opt/local/libexec/llvm-devel/lib/c++/v1 -Wl,-rpath,-I/opt/local/libexec/llvm-devel/include/c++/v1"") # -Wno-c++11-narrowing -fstack-protector-all -fstack-check -W -Wall"") #-O3 -g -G stdlib=libc++
    set_source_files_properties(${SRC_FILES} PROPERTIES LANGUAGE CXX)
    add_executable(GITR ${SRC_FILES})
    add_definitions(""-x c++ -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_OMP -DTHRUST_HOST_SYSTEM=THRUST_HOST_SYSTEM_OMP"")
    set_target_properties(GITR PROPERTIES LINKER_LANGUAGE CXX)
endif ()

# Setup for CPP backend
if (${CPP_PAR})
    Message(""Enabling CPP backend"")
    add_executable(GITR ${SRC_FILES})
    add_definitions(""-x c++ -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_CPP -DCPP_PAR -Wno-unused-local-typedef"")
endif ()

# Add debug libraries
if (${CUDA_DEBUG})
    target_link_libraries(GITR ${CUDA_TOOLKIT_ROOT_DIR}/lib64/libnvToolsExt.so)
endif ()

# Add libraries
target_link_libraries(GITR ${NETCDF_CXX_LIBRARIES})
target_link_libraries(GITR ${NETCDF_C_LIBRARIES})
target_link_libraries(GITR ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(GITR ${MPI_C_LIBRARIES})
target_link_libraries(GITR ${MPI_CXX_LIBRARIES})
target_link_libraries(GITR YourLib)
#target_link_libraries(GITR ""-lstdc++fs"")
#test comment
target_link_libraries(tests YourLib)
target_link_libraries(tests ${NETCDF_CXX_LIBRARIES})
target_link_libraries(tests ${NETCDF_C_LIBRARIES})
target_link_libraries(tests ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(tests ${MPI_C_LIBRARIES})
target_link_libraries(tests ${MPI_CXX_LIBRARIES})
#target_link_libraries(tests ""-lstdc++fs"")

#target_link_libraries(geom_test YourLib)
#target_link_libraries(geom_test ${NETCDF_CXX_LIBRARIES})
#target_link_libraries(geom_test ${NETCDF_C_LIBRARIES})
#target_link_libraries(geom_test ${LIBCONFIGPP_LIBRARIES})
#target_link_libraries(geom_test ${MPI_C_LIBRARIES})
#target_link_libraries(geom_test ${MPI_CXX_LIBRARIES})
##target_link_libraries(tests ""-lstdc++fs"")
target_link_libraries(coulomb_tests YourLib)
target_link_libraries(coulomb_tests ${NETCDF_CXX_LIBRARIES})
target_link_libraries(coulomb_tests ${NETCDF_C_LIBRARIES})
target_link_libraries(coulomb_tests ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(coulomb_tests ${MPI_C_LIBRARIES})
target_link_libraries(coulomb_tests ${MPI_CXX_LIBRARIES})
#target_link_libraries(coulomb_tests ""-lstdc++fs"")
target_link_libraries(field_tests YourLib)
target_link_libraries(field_tests ${NETCDF_CXX_LIBRARIES})
target_link_libraries(field_tests ${NETCDF_C_LIBRARIES})
target_link_libraries(field_tests ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(field_tests ${MPI_C_LIBRARIES})
target_link_libraries(field_tests ${MPI_CXX_LIBRARIES})
enable_testing()
add_test(TestName tests)
add_test(Coulomb_tests coulomb_tests)
add_test(field_tests field_tests)
target_link_libraries(atomic_tests YourLib)
target_link_libraries(atomic_tests ${NETCDF_CXX_LIBRARIES})
target_link_libraries(atomic_tests ${NETCDF_C_LIBRARIES})
target_link_libraries(atomic_tests ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(atomic_tests ${MPI_C_LIBRARIES})
target_link_libraries(atomic_tests ${MPI_CXX_LIBRARIES})
##target_link_libraries(atomic_tests ""-lstdc++fs"")
enable_testing()
add_test(TestName tests)
add_test(atomic_tests atomic_tests)

find_package (Python3 COMPONENTS Interpreter)
message( STATUS ""python stuff "" ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR} ${EXECUTABLE_OUTPUT_PATH})
add_test(NAME sample_test COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_test.py WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test )
#add_test(TestName geom_test)
# end test comment
# Install binaries
install(TARGETS GITR DESTINATION bin)
get_directory_property( DirDefs DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
foreach( d ${DirDefs} )
    message( STATUS ""Found Define: "" ${d} )
endforeach()
message( STATUS ""DirDefs: "" ${DirDefs} )
",3.1,3.1
30113,spirit-code,spirit,False,False,False,False,False,10,C++,2020-05-15 16:57:10+00:00,2016-09-23 16:51:17+00:00,48,1378,"######### CMake Version #####################
cmake_minimum_required(VERSION 3.1)
### We need at least C++11
set (CMAKE_CXX_STANDARD 11)
### Distinction between Clang and AppleClang
cmake_policy(SET CMP0025 NEW)
#############################################



######### Build Flags #######################
### CMake Verbosity
SET( SPIRIT_PRINT_SOURCES     OFF  CACHE BOOL ""Print Spirit Headers and Sources from CMake."" )
### These decide which projects are built
SET( SPIRIT_BUILD_FOR_JS      OFF  CACHE BOOL ""Build the JavaScript library."" )
SET( SPIRIT_BUILD_FOR_JULIA   OFF  CACHE BOOL ""Build the shared library for Julia."" )
SET( SPIRIT_BUILD_FOR_PYTHON  ON   CACHE BOOL ""Build the shared library for Python."" )
SET( SPIRIT_BUILD_FOR_CXX     ON   CACHE BOOL ""Build the static library for C++ applications"" )
### Feature switches for Spirit
SET( SPIRIT_ENABLE_PINNING    OFF  CACHE BOOL ""Enable pinning individual or rows of spins."" )
SET( SPIRIT_ENABLE_DEFECTS    OFF  CACHE BOOL ""Enable defects and disorder in the lattice."" )
### Options for Spirit
SET( SPIRIT_BUILD_TEST        ON   CACHE BOOL ""Build unit tests for the Spirit library."" )
SET( SPIRIT_TEST_COVERAGE     OFF  CACHE BOOL ""Build in debug mode with special flags for coverage checks."" )
SET( SPIRIT_USE_CUDA          OFF  CACHE BOOL ""Use CUDA to speed up certain parts of the code."" )
SET( SPIRIT_USE_OPENMP        OFF  CACHE BOOL ""Use OpenMP to speed up certain parts of the code."" )
SET( SPIRIT_USE_THREADS       OFF  CACHE BOOL ""Use std threads to speed up certain parts of the code."" )
SET( SPIRIT_USE_FFTW          ON   CACHE BOOL ""If available, use the FFTW library instead of kissFFT."" )
### Set the scalar type used in the Spirit library
SET( SPIRIT_SCALAR_TYPE ""double"" CACHE STRING ""The scalar type to be used in the Spirit library."" )
### Set the compute capability for CUDA compilation
SET( SPIRIT_CUDA_ARCH   ""sm_60""  CACHE STRING ""The CUDA compute architecture to use in case of a CUDA build."" )
#############################################
### CMake Verbosity
option( SPIRIT_PRINT_SOURCES  ""Print Headers and Sources from Cmake.""                         OFF )
### Decide CXX UI
option( SPIRIT_UI_CXX_USE_QT  ""Build the QT User Interface instead of console version.""       ON  )
### Bundle option
option( SPIRIT_BUNDLE_APP     ""On installation, bundle the executable with its dependencies."" OFF )
### Option for building on the IFF cluster
option( SPIRIT_USER_PATHS_IFF ""Use the compiler and library paths etc. for the IFF Cluster.""  OFF )
#############################################



#############################################
### Set a default build type in case none is passed
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "">> Setting build type to 'Release' as none was specified."")
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
elseif(CMAKE_BUILD_TYPE)
    message(STATUS "">> Did not need to set build type, using: ${CMAKE_BUILD_TYPE}"")
else()
    message(STATUS "">> Did not need to set build type. Configuration types: ${CMAKE_CONFIGURATION_TYPES}"")
endif()
#############################################



#############################################
### Depending on compiler versions it may be necessary to specify
### the compiler. Either pass them in via command-line or use
### the CUDA_TOOLKIT_ROOT_DIR variable.
if( SPIRIT_USE_CUDA )
    ### Deactivate OpenMP
    set( SPIRIT_USE_OPENMP          OFF )
    ### Set cuda toolkit path
    if( NOT CUDA_TOOLKIT_ROOT_DIR )
        if ( APPLE OR UNIX )
            set( CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda )
            # set( CUDA_TOOLKIT_ROOT_DIR /opt/cuda )
        elseif (WIN32)
            set( CUDA_TOOLKIT_ROOT_DIR ""C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/"" )
            MESSAGE( WARNING "">> We are on Windows... CUDA_TOOLKIT_ROOT_DIR may need to be passed to cmake..."" )
        endif()
    endif()
    ### Set compilers
    if( APPLE OR UNIX )
        if( DEFINED CUDA_TOOLKIT_ROOT_DIR )
            MESSAGE( STATUS "">> CUDA toolkit root dir: ${CUDA_TOOLKIT_ROOT_DIR}"" )
            if( NOT DEFINED CMAKE_C_COMPILER )
                set( CMAKE_C_COMPILER   ${CUDA_TOOLKIT_ROOT_DIR}/bin/gcc )
                MESSAGE( STATUS "">> Set C compiler accordingly"" )
            endif( )
            if( NOT DEFINED CMAKE_CXX_COMPILER )
                set( CMAKE_CXX_COMPILER ${CUDA_TOOLKIT_ROOT_DIR}/bin/g++ )
                MESSAGE( STATUS "">> Set CXX compiler accordingly"" )
            endif( )
        else( )
            MESSAGE( STATUS "">> No CUDA toolkit root dir specified"" )
        endif( )
    elseif( WIN32 )
        # MESSAGE( STATUS "">> We are on Windows... CUDA untested"" )
    endif( )
endif( )
#############################################



######### General Paths #####################
### Set the cmake subdirectory
list( APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/CMake"" )
######### User Paths ########################
include(PathsIFF)
### Set these if you do not want cmake to choose your compiler
# set( USER_COMPILER_C    ""gcc"" )
# set( USER_COMPILER_CXX  ""g++"" )
# set( USER_PATH_COMPILER ""/usr/bin"" )
### Set this if you need cmake to find your QT installation
# set( USER_PATH_QT       ""~/QT/5.7"" )
#############################################



######### Set all Flags and Options #########
### Choose Compiler
include(ChooseCompiler)
### Project Name
PROJECT(spirit)
### Print compiler info
MESSAGE( STATUS "">> Please check the CMAKE_CXX_COMPILER to make sure it's the right one"" )
MESSAGE( STATUS "">> CMAKE_C_COMPILER:               "" ${CMAKE_C_COMPILER} )
MESSAGE( STATUS "">> CMAKE_CXX_COMPILER:             "" ${CMAKE_CXX_COMPILER} )
### Platform-specific Flags
include(Platforms)
### Compiler-specific Flags
include(GlobalCompilerFlags)
### Prevent in-source builds
# set(CMAKE_DISABLE_SOURCE_CHANGES ON) # we need source changes for the generated VERSION.txt
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
### Position independent code
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
### Installation Prefix
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set (CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE PATH ""default install path"" FORCE)
endif()
#############################################



#############################################
if( SPIRIT_BUILD_TEST )
    enable_testing()
endif()
#############################################
if ( SPIRIT_USE_OPENMP )
    include( FindOpenMP )
    if( OPENMP_FOUND )
        set( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"" )
        set( CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"" )
        set( CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"" )
    endif( )
endif( )
#############################################



######### External Project: QHull ###########
set (       CMAKE_QHULL_ARGS ""-DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/thirdparty-install"")
list(APPEND CMAKE_QHULL_ARGS ""-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}"")
list(APPEND CMAKE_QHULL_ARGS ""-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"")
list(APPEND CMAKE_QHULL_ARGS ""-DCMAKE_AR=${CMAKE_AR}"")
list(APPEND CMAKE_QHULL_ARGS ""-DCMAKE_RANLIB=${CMAKE_RANLIB}"")
include(ExternalProject)
ExternalProject_add(qhull
    SOURCE_DIR    ""${CMAKE_SOURCE_DIR}/thirdparty/qhull""
    # GIT_REPOSITORY https://github.com/qhull/qhull.git
    BINARY_DIR ${CMAKE_BINARY_DIR}/thirdparty-build/qhull
    # INSTALL_DIR ${CMAKE_BINARY_DIR}/thirdparty-install
    CMAKE_ARGS ${CMAKE_QHULL_ARGS}
    CMAKE_CACHE_ARGS ""-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true""
)
### qhullstatic reentrant library
add_library(libqhullstatic_r STATIC IMPORTED)
# set_property(TARGET libqhullstatic_r PROPERTY MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
set_property(TARGET libqhullstatic_r PROPERTY IMPORTED_LOCATION ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/${CMAKE_STATIC_LIBRARY_PREFIX}qhullstatic_r${CMAKE_STATIC_LIBRARY_SUFFIX})
if (WIN32)
    set_property(TARGET libqhullstatic_r PROPERTY IMPORTED_LOCATION_DEBUG ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/Debug/${CMAKE_STATIC_LIBRARY_PREFIX}qhullstatic_r${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullstatic_r PROPERTY IMPORTED_LOCATION_MINSIZEREL ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/MinSizeRel/${CMAKE_STATIC_LIBRARY_PREFIX}qhullstatic_r${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullstatic_r PROPERTY IMPORTED_LOCATION_RELEASE ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/Release/${CMAKE_STATIC_LIBRARY_PREFIX}qhullstatic_r${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullstatic_r PROPERTY IMPORTED_LOCATION_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/RelWithDebInfo/${CMAKE_STATIC_LIBRARY_PREFIX}qhullstatic_r${CMAKE_STATIC_LIBRARY_SUFFIX})
endif ()
add_dependencies(libqhullstatic_r qhull)
### qhullcpp library
add_library(libqhullcpp STATIC IMPORTED)
set_property(TARGET libqhullcpp PROPERTY INTERFACE_LINK_LIBRARIES libqhullstatic_r)
# set_property(TARGET libqhullcpp PROPERTY MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
set_property(TARGET libqhullcpp PROPERTY IMPORTED_LOCATION ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/${CMAKE_STATIC_LIBRARY_PREFIX}qhullcpp${CMAKE_STATIC_LIBRARY_SUFFIX})
if (WIN32)
    set_property(TARGET libqhullcpp PROPERTY IMPORTED_LOCATION_DEBUG ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/Debug/${CMAKE_STATIC_LIBRARY_PREFIX}qhullcpp${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullcpp PROPERTY IMPORTED_LOCATION_MINSIZEREL ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/MinSizeRel/${CMAKE_STATIC_LIBRARY_PREFIX}qhullcpp${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullcpp PROPERTY IMPORTED_LOCATION_RELEASE ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/Release/${CMAKE_STATIC_LIBRARY_PREFIX}qhullcpp${CMAKE_STATIC_LIBRARY_SUFFIX})
    set_property(TARGET libqhullcpp PROPERTY IMPORTED_LOCATION_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/thirdparty-build/qhull/RelWithDebInfo/${CMAKE_STATIC_LIBRARY_PREFIX}qhullcpp${CMAKE_STATIC_LIBRARY_SUFFIX})
endif ()
add_dependencies(libqhullcpp qhull)
set(qhull_LIBS libqhullcpp)
### Add corresponding include directories
set(qhull_INCLUDE_DIRS ""${CMAKE_BINARY_DIR}/thirdparty-install/include;${CMAKE_BINARY_DIR}/thirdparty-install/include/libqhullcpp"")
include_directories( ${qhull_INCLUDE_DIRS} )
#############################################


if( SPIRIT_SKIP_HTST )
    add_definitions(""-DSPIRIT_SKIP_HTST"")
    MESSAGE( STATUS "">> Skipping compilation of HTST!"" )
endif( )


######### Add Subdirectory Projects #########
### Spirit library is built in any case
add_subdirectory( core )
### Web UI
if( SPIRIT_BUILD_FOR_JS )
    add_subdirectory( ui-web )
### CXX UI
elseif( SPIRIT_BUILD_FOR_CXX )
    if ( SPIRIT_UI_CXX_USE_QT )
        add_subdirectory( VFRendering )
        add_definitions( -DSPIRIT_UI_CXX_USE_QT )
    endif()
    add_subdirectory( ui-cpp )
endif()
#############################################



################ Install ####################
install(DIRECTORY docs        DESTINATION docs/Spirit)
install(FILES   LICENSE.txt
                README.md
                VERSION.txt   DESTINATION docs/Spirit)
if( SPIRIT_BUILD_FOR_CXX )
    install(DIRECTORY input   DESTINATION bin)
endif( )
#############################################



######### Write VERSION.txt #################
file(WRITE ""${CMAKE_SOURCE_DIR}/VERSION.txt"" ""${SPIRIT_META_NAME_VERSION}"")
#############################################
",3.1,3.1
30163,SRombauts,SQLiteCpp,False,False,False,False,False,46,C,2020-05-14 19:03:00+00:00,2012-04-12 07:09:52+00:00,916,629,"# Main CMake file for compiling the library itself, examples and tests.
#
# Copyright (c) 2012-2020 Sebastien Rombauts (sebastien.rombauts@gmail.com)
#
# Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt
# or copy at http://opensource.org/licenses/MIT)
cmake_minimum_required(VERSION 3.1) # for ""CMAKE_CXX_STANDARD"" version
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"") # custom CMake modules like FindSQLiteCpp
project(SQLiteCpp VERSION 3.0.0)

# SQLiteC++ 3.x requires C++11 features
if (NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
elseif (CMAKE_CXX_STANDARD LESS 11)
    message(WARNING ""CMAKE_CXX_STANDARD has been set to '${CMAKE_CXX_STANDARD}' which is lower than the minimum required standard (c++11)."")
endif ()
message(STATUS ""Using c++ standard c++${CMAKE_CXX_STANDARD}"")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

message (STATUS ""CMake version: ${CMAKE_VERSION}"")
message (STATUS ""Project version: ${PROJECT_VERSION}"")

# Define useful variables to handle OS differences:
if (WIN32)
    set(DEV_NULL                ""NUL"")
else (WIN32) # UNIX
    set(DEV_NULL                ""/dev/null"")
endif (WIN32)

# then Compiler/IDE differences:
if (MSVC)
    set(CPPLINT_ARG_OUTPUT      ""--output=vs7"")
    set(CPPCHECK_ARG_TEMPLATE   ""--template=vs"")
    # disable Visual Studio warnings for fopen() used in the example
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    # Flags for linking with multithread static C++ runtime, required by googletest
    if (SQLITECPP_BUILD_TESTS)
        message(STATUS ""Linking against multithread static C++ runtime for unit tests with googletest"")
        set(CMAKE_C_FLAGS_RELEASE   ""${CMAKE_C_FLAGS_RELEASE} /MT"")
        set(CMAKE_C_FLAGS_DEBUG     ""${CMAKE_C_FLAGS_DEBUG} /MTd"")
        set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
        set(CMAKE_CXX_FLAGS_DEBUG   ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")
    endif (SQLITECPP_BUILD_TESTS)
    # MSVC versions prior to 2015 are not supported anymore by SQLiteC++ 3.x
    if (MSVC_VERSION LESS 1900) # OR MSVC_TOOLSET_VERSION LESS 140)
      message(ERROR ""Visual Studio prior to 2015 is not supported anymore."")
    endif (MSVC_VERSION LESS 1900)
else (MSVC)
    set(CPPLINT_ARG_OUTPUT      ""--output=eclipse"")
    set(CPPCHECK_ARG_TEMPLATE   ""--template=gcc"")
    # Useful compile flags and extra warnings
    add_compile_options(-fstack-protector)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Wswitch-enum -Wshadow -Wno-long-long"") # C++ only, don't bother with sqlite3
    if (CMAKE_COMPILER_IS_GNUCXX)
        # GCC flags
        option(SQLITECPP_USE_GCOV ""USE GCov instrumentation."" OFF)
        if (SQLITECPP_USE_GCOV)
            message (STATUS ""Using GCov instrumentation"")
            add_compile_options (-coverage)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -coverage"")
        endif ()
    endif (CMAKE_COMPILER_IS_GNUCXX)
endif (MSVC)
# and then common variables
set(CPPLINT_ARG_VERBOSE ""--verbose=3"")
set(CPPLINT_ARG_LINELENGTH ""--linelength=120"")

# Print CXX compiler information
message (STATUS ""CMAKE_CXX_COMPILER '${CMAKE_CXX_COMPILER}' '${CMAKE_CXX_COMPILER_ID}' '${CMAKE_CXX_COMPILER_VERSION}'"")

# Print CXX FLAGS
message (STATUS ""CMAKE_CXX_FLAGS                '${CMAKE_CXX_FLAGS}'"")
if (MSVC)
    message (STATUS ""CMAKE_CXX_FLAGS_DEBUG          '${CMAKE_CXX_FLAGS_DEBUG}'"")
    message (STATUS ""CMAKE_CXX_FLAGS_RELEASE        '${CMAKE_CXX_FLAGS_RELEASE}'"")
    message (STATUS ""CMAKE_CXX_FLAGS_RELWITHDEBINFO '${CMAKE_CXX_FLAGS_RELWITHDEBINFO}'"")
    message (STATUS ""CMAKE_CXX_FLAGS_MINSIZEREL     '${CMAKE_CXX_FLAGS_MINSIZEREL}'"")
else (NOT MSVC)
    if     (CMAKE_BUILD_TYPE STREQUAL Debug)
        message (STATUS ""CMAKE_CXX_FLAGS_DEBUG          '${CMAKE_CXX_FLAGS_DEBUG}'"")
    elseif (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
        message (STATUS ""CMAKE_CXX_FLAGS_RELWITHDEBINFO '${CMAKE_CXX_FLAGS_RELWITHDEBINFO}'"")
    elseif (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
        message (STATUS ""CMAKE_CXX_FLAGS_MINSIZEREL     '${CMAKE_CXX_FLAGS_MINSIZEREL}'"")
    else ()
        message (STATUS ""CMAKE_CXX_FLAGS_RELEASE        '${CMAKE_CXX_FLAGS_RELEASE}'"")
    endif ()
endif ()

## Build the C++ Wrapper ##

# adding a new file require explicitly modifying the CMakeLists.txt
# so that CMake knows that it should rebuild the project (it is best practice)

# list of sources files of the library
set(SQLITECPP_SRC
 ${PROJECT_SOURCE_DIR}/src/Backup.cpp
 ${PROJECT_SOURCE_DIR}/src/Column.cpp
 ${PROJECT_SOURCE_DIR}/src/Database.cpp
 ${PROJECT_SOURCE_DIR}/src/Exception.cpp
 ${PROJECT_SOURCE_DIR}/src/Statement.cpp
 ${PROJECT_SOURCE_DIR}/src/Transaction.cpp
)
source_group(src FILES ${SQLITECPP_SRC})

# list of header files of the library
set(SQLITECPP_INC
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/SQLiteCpp.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Assertion.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Backup.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Column.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Database.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Exception.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Statement.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Transaction.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/VariadicBind.h
 ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/ExecuteMany.h
)
source_group(include FILES ${SQLITECPP_INC})

# list of test files of the library
set(SQLITECPP_TESTS
 tests/Column_test.cpp
 tests/Database_test.cpp
 tests/Statement_test.cpp
 tests/Backup_test.cpp
 tests/Transaction_test.cpp
 tests/VariadicBind_test.cpp
 tests/Exception_test.cpp
 tests/ExecuteMany_test.cpp
)
source_group(tests FILES ${SQLITECPP_TESTS})

# list of example files of the library
set(SQLITECPP_EXAMPLES
 examples/example1/main.cpp
)
source_group(example1 FILES ${SQLITECPP_EXAMPLES})

# list of doc files of the library
set(SQLITECPP_DOC
 README.md
 LICENSE.txt
 CHANGELOG.md
 TODO.txt
)
source_group(doc FILES ${SQLITECPP_DOC})

# list of config & script files of the library
set(SQLITECPP_SCRIPT
 .editorconfig
 .gitbugtraq
 .github/workflows/build.yml
 .github/workflows/subdir_example.yml
 .gitignore
 .gitmodules
 .travis.yml
 appveyor.yml
 build.bat
 build.sh
 cpplint.py
 Doxyfile
 cmake/FindSQLiteCpp.cmake
 cmake/FindSQLite3.cmake
 cmake/SQLiteCppConfig.cmake.in
)
source_group(scripts FILES ${SQLITECPP_SCRIPT})

# add sources of the wrapper as a ""SQLiteCpp"" static library
add_library(SQLiteCpp ${SQLITECPP_SRC} ${SQLITECPP_INC} ${SQLITECPP_DOC} ${SQLITECPP_SCRIPT})

# Options relative to SQLite and SQLiteC++ functions

option(SQLITE_ENABLE_COLUMN_METADATA ""Enable Column::getColumnOriginName(). Require support from sqlite3 library."" ON)
if (SQLITE_ENABLE_COLUMN_METADATA)
    # Enable the use of SQLite column metadata and Column::getColumnOriginName() method,
    # Require that the sqlite3 library is also compiled with this flag (default under Debian/Ubuntu, but not on Mac OS X).
    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_ENABLE_COLUMN_METADATA)
endif (SQLITE_ENABLE_COLUMN_METADATA)

option(SQLITE_ENABLE_ASSERT_HANDLER ""Enable the user definition of a assertion_failed() handler."" OFF)
if (SQLITE_ENABLE_ASSERT_HANDLER)
    # Enable the user definition of a assertion_failed() handler (default to false, easier to handler for beginners).
    target_compile_definitions(SQLiteCpp PUBLIC SQLITECPP_ENABLE_ASSERT_HANDLER)
endif (SQLITE_ENABLE_ASSERT_HANDLER)

option(SQLITE_HAS_CODEC ""Enable database encryption API. Not available in the public release of SQLite."" OFF)
if (SQLITE_HAS_CODEC)
    # Enable database encryption API. Requires implementations of sqlite3_key & sqlite3_key_v2.
    # Eg. SQLCipher (libsqlcipher-dev) is an SQLite extension that provides 256 bit AES encryption of database files. 
    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_HAS_CODEC)
endif (SQLITE_HAS_CODEC)

option(SQLITE_USE_LEGACY_STRUCT ""Fallback to forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)"" OFF)
if (SQLITE_USE_LEGACY_STRUCT)
    # Force forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)
    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_USE_LEGACY_STRUCT)
endif (SQLITE_USE_LEGACY_STRUCT)

if (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL ""Clang""))
    set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS ""-fPIC"")
endif (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL ""Clang""))

option(SQLITECPP_USE_ASAN ""Use Address Sanitizer."" OFF)
if (SQLITECPP_USE_ASAN)
    if ((CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 6) OR (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang""))
        message (STATUS ""Using Address Sanitizer"")
        set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS ""-fsanitize=address -fno-omit-frame-pointer"")
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
        if (CMAKE_COMPILER_IS_GNUCXX)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold"")
        endif ()
    endif ()
endif (SQLITECPP_USE_ASAN)

if (SQLITECPP_USE_GCOV)
    # Prevent the compiler from removing the unused inline functions so that they get tracked as ""non-covered""
    set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS ""-fkeep-inline-functions -fkeep-static-functions"")
endif ()

## Build provided copy of SQLite3 C library ##

option(SQLITECPP_INTERNAL_SQLITE ""Add the internal SQLite3 source to the project."" ON)
if (SQLITECPP_INTERNAL_SQLITE)
    message(STATUS ""Compile sqlite3 from source in subdirectory"")
    # build the SQLite3 C library (for ease of use/compatibility) versus Linux sqlite3-dev package
    add_subdirectory(sqlite3)
    target_link_libraries(SQLiteCpp PUBLIC sqlite3)
else (SQLITECPP_INTERNAL_SQLITE)
    find_package (SQLite3 REQUIRED)
    message(STATUS ""Link to sqlite3 system library"")
    target_link_libraries(SQLiteCpp PUBLIC SQLite::SQLite3)
    if(SQLite3_VERSION VERSION_LESS ""3.19"")
        set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS ""-DSQLITECPP_HAS_MEM_STRUCT"")
    endif()
endif (SQLITECPP_INTERNAL_SQLITE)

# Link target with pthread and dl for Unix
if (UNIX)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
    target_link_libraries(SQLiteCpp PUBLIC Threads::Threads ${CMAKE_DL_LIBS})
endif (UNIX)

# Set includes for target and transitive downstream targets

target_include_directories(SQLiteCpp
  PRIVATE
    $<$<BOOL:${SQLITECPP_INTERNAL_SQLITE}>:${CMAKE_CURRENT_SOURCE_DIR}/sqlite3>
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include/>)

# Allow the library to be installed via ""make install"" and found with ""find_package""

include(GNUInstallDirs)
install(TARGETS SQLiteCpp
    EXPORT ${PROJECT_NAME}Targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    COMPONENT libraries)
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers FILES_MATCHING REGEX "".*\\.(hpp|h)$"")
install(EXPORT ${PROJECT_NAME}Targets DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    cmake/${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion)
configure_package_config_file(
    cmake/${PROJECT_NAME}Config.cmake.in
    cmake/${PROJECT_NAME}Config.cmake
    INSTALL_DESTINATION lib/cmake/${PROJECT_NAME})
install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

# Optional additional targets:

option(SQLITECPP_RUN_CPPLINT ""Run cpplint.py tool for Google C++ StyleGuide."" ON)
if (SQLITECPP_RUN_CPPLINT)
    find_package(PythonInterp)
    if (PYTHONINTERP_FOUND)
        # add a cpplint target to the ""all"" target
        add_custom_target(SQLiteCpp_cpplint
         ALL
         COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/cpplint.py ${CPPLINT_ARG_OUTPUT} ${CPPLINT_ARG_VERBOSE} ${CPPLINT_ARG_LINELENGTH} ${SQLITECPP_SRC} ${SQLITECPP_INC}
        )
    endif (PYTHONINTERP_FOUND)
else (SQLITECPP_RUN_CPPLINT)
    message(STATUS ""SQLITECPP_RUN_CPPLINT OFF"")
endif (SQLITECPP_RUN_CPPLINT)

option(SQLITECPP_RUN_CPPCHECK ""Run cppcheck C++ static analysis tool."" ON)
if (SQLITECPP_RUN_CPPCHECK)
    find_program(CPPCHECK_EXECUTABLE NAMES cppcheck)
    if (CPPCHECK_EXECUTABLE)
        # add a cppcheck target to the ""all"" target
        add_custom_target(SQLiteCpp_cppcheck
         ALL
         COMMAND ${CPPCHECK_EXECUTABLE} -j 8 cppcheck --enable=style --quiet ${CPPCHECK_ARG_TEMPLATE} ${PROJECT_SOURCE_DIR}/src
        )
        execute_process(COMMAND ""${CPPCHECK_EXECUTABLE}"" --version OUTPUT_VARIABLE CPPCHECK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
        message(STATUS ""Found Cppcheck: ${CPPCHECK_EXECUTABLE} ${CPPCHECK_VERSION}"")
    else (CPPCHECK_EXECUTABLE)
        message(STATUS ""Could NOT find cppcheck"")
    endif (CPPCHECK_EXECUTABLE)
else (SQLITECPP_RUN_CPPCHECK)
    message(STATUS ""SQLITECPP_RUN_CPPCHECK OFF"")
endif (SQLITECPP_RUN_CPPCHECK)

option(SQLITECPP_RUN_DOXYGEN ""Run Doxygen C++ documentation tool."" OFF)
if (SQLITECPP_RUN_DOXYGEN)
    find_package(Doxygen)
    if (DOXYGEN_FOUND)
        # add a Doxygen target to the ""all"" target
        add_custom_target(SQLiteCpp_doxygen
         ALL
         COMMAND doxygen Doxyfile > ${DEV_NULL}
         WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        )
    endif (DOXYGEN_FOUND)
else (SQLITECPP_RUN_DOXYGEN)
    message(STATUS ""SQLITECPP_RUN_DOXYGEN OFF"")
endif (SQLITECPP_RUN_DOXYGEN)

option(SQLITECPP_BUILD_EXAMPLES ""Build examples."" OFF)
if (SQLITECPP_BUILD_EXAMPLES)
    # add the basic example executable
    add_executable(SQLiteCpp_example1 ${SQLITECPP_EXAMPLES})
    target_link_libraries(SQLiteCpp_example1 SQLiteCpp)
    target_include_directories(SQLiteCpp_example1 PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        $<$<BOOL:${SQLITECPP_INTERNAL_SQLITE}>:${CMAKE_CURRENT_SOURCE_DIR}/sqlite3>)
    if (MSYS OR MINGW)
        target_link_libraries(SQLiteCpp_example1 ssp)
    endif ()
else (SQLITECPP_BUILD_EXAMPLES)
    message(STATUS ""SQLITECPP_BUILD_EXAMPLES OFF"")
endif (SQLITECPP_BUILD_EXAMPLES)

option(SQLITECPP_BUILD_TESTS ""Build and run tests."" OFF)
if (SQLITECPP_BUILD_TESTS)
    # add the unit test executable
    add_executable(SQLiteCpp_tests ${SQLITECPP_TESTS})
    target_link_libraries(SQLiteCpp_tests SQLiteCpp)
    target_include_directories(SQLiteCpp_tests PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        $<$<BOOL:${SQLITECPP_INTERNAL_SQLITE}>:${CMAKE_CURRENT_SOURCE_DIR}/sqlite3>)

    find_package(GTest)
    if (GTEST_FOUND)
        message(STATUS ""Link to GTest system library"")
        target_link_libraries(SQLiteCpp_tests GTest::GTest GTest::Main)
    else (GTEST_FOUND)
        message(STATUS ""Compile googletest from source in submodule"")
        # deactivate some warnings for compiling the googletest library
        if (NOT MSVC)
            add_compile_options(-Wno-switch-enum)
        endif (NOT MSVC)

        # add the subdirectory containing the CMakeLists.txt for the googletest library
        if (NOT EXISTS ""${PROJECT_SOURCE_DIR}/googletest/CMakeLists.txt"")
            message(FATAL_ERROR ""Missing 'googletest' submodule! Either use 'git submodule init' and 'git submodule update' to get googletest according to the README, or deactivate unit tests with -DSQLITECPP_BUILD_TESTS=OFF"")
        endif ()
        add_subdirectory(googletest)
        include_directories(""${PROJECT_SOURCE_DIR}/googletest/googletest/include"")

        # Add definitions to keep googletest from making the compilation fail
        if (MSVC)
            if (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919) # OR MSVC_TOOLSET_VERSION EQUAL 141)
                target_compile_definitions(gtest PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)
                target_compile_definitions(gtest_main PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)
                target_compile_definitions(gmock PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)
                target_compile_definitions(gmock_main PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)
            endif (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919)
        endif (MSVC)

        target_link_libraries(SQLiteCpp_tests gtest_main)
    endif (GTEST_FOUND)

    # add a ""test"" target:
    enable_testing()

    # does the tests pass?
    add_test(UnitTests SQLiteCpp_tests)

    if (SQLITECPP_BUILD_EXAMPLES)
        # does the example1 runs successfully?
        add_test(Example1Run SQLiteCpp_example1)
    endif (SQLITECPP_BUILD_EXAMPLES)
else (SQLITECPP_BUILD_TESTS)
    message(STATUS ""SQLITECPP_BUILD_TESTS OFF"")
endif (SQLITECPP_BUILD_TESTS)

# API version for SQLiteCpp shared library.
set_property(TARGET SQLiteCpp PROPERTY SOVERSION 0)
",3.1,3.1
30188,mistralol,libclientserver,False,False,False,False,False,1,C++,2019-09-08 14:14:45+00:00,2013-09-02 13:19:06+00:00,4,412,"cmake_minimum_required (VERSION 3.10.2)
enable_testing()

option(ENABLE_CPPCHECK ""use cppcheck"" OFF)
option(OPTIMIZE ""Turn on compiler optimizations"" ON)

project(libclientserver
    DESCRIPTION ""Client Server lib for C++""
    VERSION ""1.0.2""
    LANGUAGES CXX
)

add_definitions(-DPACKAGE_VERSION=""${PROJECT_VERSION}"")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

#Use ccache if its installed
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

#Use cppcheck if its installed
if(ENABLE_CPPCHECK)
    find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)
    if (CMAKE_CXX_CPPCHECK)
        list(APPEND CMAKE_CXX_CPPCHECK
                ""--enable=warning""
                ""--inconclusive""
                ""--inline-suppr""
        )
    endif()
endif()

if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
    set(CODECOV_OUTPUTFILE cmake_coverage.output )
    set(CODECOV_HTMLOUTPUTDIR coverage_results)

    if (CMAKE_COMPILER_IS_GNUCXX)
        find_program(CODECOV_GCOV gcov )
        find_program(CODECOV_LCOV lcov )
        find_program(CODECOV_GENHTML genhtml )
        add_definitions(-fprofile-arcs -ftest-coverage )
        link_libraries(gcov)
        set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} --coverage)
    endif (CMAKE_COMPILER_IS_GNUCXX )
endif (CMAKE_BUILD_TYPE STREQUAL ""Debug"")

set(FLAGS ""-ggdb -Wall -Wextra -Wundef -Wwrite-strings -Wpointer-arith -Wmissing-declarations -Wredundant-decls"")
set(FLAGS ""${FLAGS} -Wno-unused-parameter -Wno-missing-field-initializers -Wformat=2 -Wcast-align -Wformat-nonliteral -Wformat-security"")
set(FLAGS ""${FLAGS} -Wsign-compare -Wstrict-aliasing -Wshadow -Winline -Wpacked -Wmissing-format-attribute -Wmissing-noreturn -Winit-self"")
set(FLAGS ""${FLAGS} -Wmissing-include-dirs -Wunused-but-set-variable -Warray-bounds -Wreturn-type "")
set(FLAGS ""${FLAGS} -Wno-switch -Wno-error=unused-parameter"")
set(FLAGS ""${FLAGS} -Wno-error=missing-field-initializers"")
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${FLAGS} -Wno-overloaded-virtual"")
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${FLAGS}"")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

find_package(Threads REQUIRED)
set(THREADS_PREFER_PTHREAD_FLAG ON)

include(FindPkgConfig)
pkg_search_module(JSONCPP REQUIRED jsoncpp)
pkg_search_module(UUID REQUIRED uuid)
pkg_search_module(OPENSSL REQUIRED openssl)
pkg_search_module(CAP REQUIRED libcap)


add_subdirectory(src)
add_subdirectory(tests)
add_subdirectory(examples)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libclientserver.pc.cmake libclientserver.pc @ONLY)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libclientserver.pc
    DESTINATION share/pkgconfig
)

SET(CPACK_GENERATOR ""DEB"")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER ""James Stevenson <james@stev.org>"")
SET(CPACK_PACKAGE_VERSION_MAJOR ""${PROJECT_VERSION_MAJOR}"")
SET(CPACK_PACKAGE_VERSION_MINOR ""${PROJECT_VERSION_MINOR}"")
SET(CPACK_PACKAGE_VERSION_PATCH ""${PROJECT_VERSION_PATCH}"")
INCLUDE(CPack)
",3.10.2,3.1
30278,Razakhel,RaZ,False,False,False,False,False,4,C++,2020-05-17 14:52:26+00:00,2016-04-13 20:10:49+00:00,126,871,"cmake_minimum_required(VERSION 3.10)
project(RaZ)

set(CMAKE_CXX_STANDARD 17)

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

# If the build type hasn't been specified, defaulting it to Release
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"")
endif ()

#################
# RaZ - Library #
#################

option(RAZ_BUILD_STATIC ""Build RaZ statically"" ON)
if (RAZ_BUILD_STATIC)
    add_library(RaZ STATIC)
else ()
    add_library(RaZ SHARED)
endif ()

##########################
# RaZ - Useful variables #
##########################

# Detect whether Emscripten is being used
if (CMAKE_CXX_COMPILER MATCHES ""/em\\+\\+.*$"")
    set(RAZ_USE_EMSCRIPTEN ON)
    set(CMAKE_AR ""${CMAKE_C_COMPILER}"")
    set(CMAKE_STATIC_LIBRARY_SUFFIX "".bc"")
    set(CMAKE_C_CREATE_STATIC_LIBRARY ""<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_CREATE_STATIC_LIBRARY ""<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>"")
else ()
    set(RAZ_USE_EMSCRIPTEN OFF)
endif ()

if (MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES ""Clang"") # Finding exclusively MSVC, not clang-cl
    set(RAZ_COMPILER ""MSVC"")
    set(RAZ_COMPILER_MSVC ON)
    target_compile_definitions(RaZ PUBLIC RAZ_COMPILER_MSVC)
elseif (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    if (MSVC)
        # Using clang-cl, for which both MSVC & Clang are found
        set(RAZ_COMPILER ""Clang-cl"")
        set(RAZ_COMPILER_CLANG_CL ON)
    else ()
        set(RAZ_COMPILER ""Clang"")
    endif ()

    set(RAZ_COMPILER_CLANG ON)
    target_compile_definitions(RaZ PUBLIC RAZ_COMPILER_CLANG)
elseif (CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
    set(RAZ_COMPILER ""GCC"")
    set(RAZ_COMPILER_GCC ON)
    target_compile_definitions(RaZ PUBLIC RAZ_COMPILER_GCC)
endif ()

if (WIN32 OR CYGWIN)
    set(RAZ_PLATFORM ""Windows"")
    set(RAZ_PLATFORM_WINDOWS ON)
    target_compile_definitions(RaZ PUBLIC RAZ_PLATFORM_WINDOWS)

    if (CYGWIN)
        set(RAZ_PLATFORM ""${RAZ_PLATFORM} (Cygwin)"")
        set(RAZ_PLATFORM_CYGWIN ON)
        target_compile_definitions(RaZ PUBLIC RAZ_PLATFORM_CYGWIN)
    endif ()
elseif (APPLE)
    set(RAZ_PLATFORM ""macOS"")
    set(RAZ_PLATFORM_MAC ON)
    target_compile_definitions(RaZ PUBLIC RAZ_PLATFORM_MAC)
elseif (RAZ_USE_EMSCRIPTEN)
    set(RAZ_PLATFORM ""Emscripten"")
    set(RAZ_PLATFORM_EMSCRIPTEN ON)
    target_compile_definitions(RaZ PUBLIC RAZ_PLATFORM_EMSCRIPTEN USE_OPENGL_ES)
elseif (UNIX)
    set(RAZ_PLATFORM ""Linux"")
    set(RAZ_PLATFORM_LINUX ON)
    target_compile_definitions(RaZ PUBLIC RAZ_PLATFORM_LINUX)
endif ()

if (RAZ_COMPILER_MSVC)
    set(RAZ_CONFIG_DEBUG   ""$<IF:$<CONFIG:Debug>,ON,OFF>"")
    set(RAZ_CONFIG_RELEASE ""$<IF:$<CONFIG:Debug>,OFF,ON>"")
    set(RAZ_CONFIG_SHORT   ""$<IF:$<CONFIG:Debug>,Debug,Release>"")

    target_compile_definitions(RaZ PUBLIC $<IF:$<CONFIG:Debug>,RAZ_CONFIG_DEBUG,RAZ_CONFIG_RELEASE>)

    set(CONFIG_STR_UPPER $<UPPER_CASE:$<CONFIG>>)
else ()
    if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
        set(RAZ_CONFIG_DEBUG   ON)
        set(RAZ_CONFIG_RELEASE OFF)
        set(RAZ_CONFIG_SHORT   ""Debug"")

        target_compile_definitions(RaZ PUBLIC RAZ_CONFIG_DEBUG)
    else ()
        set(RAZ_CONFIG_DEBUG   OFF)
        set(RAZ_CONFIG_RELEASE ON)
        set(RAZ_CONFIG_SHORT   ""Release"")

        target_compile_definitions(RaZ PUBLIC RAZ_CONFIG_RELEASE)
    endif ()

    string(TOUPPER ${CMAKE_BUILD_TYPE} CONFIG_STR_UPPER)
endif ()

set(RAZ_BUILD_FLAGS ""${CMAKE_CXX_FLAGS_${CONFIG_STR_UPPER}}"")

option(ENABLE_DEBUG_INFO ""Creates a debug target which prints useful values"" OFF)

if (ENABLE_DEBUG_INFO)
    cmake_host_system_information(RESULT PLATFORM_RELEASE QUERY OS_RELEASE)
    cmake_host_system_information(RESULT PLATFORM_VERSION QUERY OS_VERSION)

    # Trimming potential leading & trailing space characters (happens for Windows' values)
    string(STRIP ${PLATFORM_RELEASE} PLATFORM_RELEASE)
    string(STRIP ${PLATFORM_VERSION} PLATFORM_VERSION)

    add_custom_target(
        RaZ_PrintDebugInfo

        ${CMAKE_COMMAND} -E echo """" &&
        ${CMAKE_COMMAND} -E echo ""####################"" &&
        ${CMAKE_COMMAND} -E echo ""# [RaZ] Debug info #"" &&
        ${CMAKE_COMMAND} -E echo ""####################"" &&
        ${CMAKE_COMMAND} -E echo """" &&

        ${CMAKE_COMMAND} -E echo ""--- Platform (found ${RAZ_PLATFORM})"" &&
        ${CMAKE_COMMAND} -E echo ""  Name:     ${CMAKE_SYSTEM_NAME}"" &&
        ${CMAKE_COMMAND} -E echo ""  Release:  ${PLATFORM_RELEASE}"" &&
        ${CMAKE_COMMAND} -E echo ""  Version:  ${PLATFORM_VERSION}"" &&
        ${CMAKE_COMMAND} -E echo """" &&

        ${CMAKE_COMMAND} -E echo ""--- Compiler (found ${RAZ_COMPILER})"" &&
        ${CMAKE_COMMAND} -E echo ""  ID:       ${CMAKE_CXX_COMPILER_ID}"" &&
        ${CMAKE_COMMAND} -E echo ""  Version:  ${CMAKE_CXX_COMPILER_VERSION}"" &&
        ${CMAKE_COMMAND} -E echo ""  Path:     ${CMAKE_CXX_COMPILER}"" &&
        ${CMAKE_COMMAND} -E echo """" &&

        ${CMAKE_COMMAND} -E echo ""--- Configuration"" &&
        ${CMAKE_COMMAND} -E echo ""  Name:               $<CONFIG>"" &&
        ${CMAKE_COMMAND} -E echo ""  RAZ_CONFIG_DEBUG:   ${RAZ_CONFIG_DEBUG}"" &&
        ${CMAKE_COMMAND} -E echo ""  RAZ_CONFIG_RELEASE: ${RAZ_CONFIG_RELEASE}"" &&
        ${CMAKE_COMMAND} -E echo ""  RAZ_CONFIG_SHORT:   ${RAZ_CONFIG_SHORT}"" &&
        ${CMAKE_COMMAND} -E echo """" &&

        ${CMAKE_COMMAND} -E echo ""--- Build flags: '${RAZ_BUILD_FLAGS}'"" &&
        ${CMAKE_COMMAND} -E echo """"
    )
endif ()

if (RAZ_USE_EMSCRIPTEN)
    target_compile_definitions(RaZ PUBLIC RAZ_ROOT=""/"")
else ()
    target_compile_definitions(RaZ PUBLIC RAZ_ROOT=""${CMAKE_CURRENT_SOURCE_DIR}/"")
endif ()

########################
# RaZ - Compiler flags #
########################

if (RAZ_COMPILER_GCC)
    set(
        RAZ_COMPILER_FLAGS

        -pedantic
        -pedantic-errors
        -Wall
        -Wextra

        -Warray-bounds
        -Wcast-align
        -Wcast-qual
        -Wconditionally-supported
        -Wconversion
        -Wdisabled-optimization
        -Wdouble-promotion
        -Wfloat-conversion
        -Wformat=2
        -Wformat-security
        -Wlogical-op
        -Wmissing-declarations
        -Wmissing-include-dirs
        -Wnoexcept
        -Wnon-virtual-dtor
        -Wold-style-cast
        -Wopenmp-simd
        -Woverloaded-virtual
        -Wpacked
        -Wredundant-decls
        -Wstrict-aliasing
        -Wstrict-null-sentinel
        #-Wsuggest-final-methods
        #-Wsuggest-final-types
        -Wtrampolines
        -Wundef
        -Wuninitialized
        -Wunused-macros
        -Wuseless-cast
        -Wvector-operation-performance
        -Wvla
        -Wzero-as-null-pointer-constant

        -Wno-comment
        -Wno-format-nonliteral
    )

    # Enabling some other warnings available since GCC 5
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            -fsized-deallocation
            -Warray-bounds=2
            -Wformat-signedness
            -Wsized-deallocation
        )
    endif ()

    # Enabling some other warnings available since GCC 6
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            -Wduplicated-cond
            -Wnull-dereference
        )
    endif ()

    # Enabling some other warnings available since GCC 7
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 7)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            -Waligned-new
            -Walloca
            -Walloc-zero
            -Wformat-overflow
            -Wshadow
        )
    endif ()

    # Enabling code coverage
    option(RAZ_ENABLE_COVERAGE ""Enable code coverage (GCC only)"" OFF)

    if (CMAKE_BUILD_TYPE STREQUAL ""Debug"" AND RAZ_ENABLE_COVERAGE)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            -g
            -O0
            -fno-inline
            -fno-inline-small-functions
            -fno-default-inline
            -fprofile-arcs
            -ftest-coverage
        )

        set(
            RAZ_LINKER_FLAGS

            gcov
        )
    endif ()
elseif (RAZ_COMPILER_CLANG)
    set(
        RAZ_COMPILER_FLAGS

        -Weverything

        -Wno-c++98-compat
        -Wno-c++98-compat-pedantic
        -Wno-covered-switch-default
        -Wno-documentation
        -Wno-documentation-unknown-command
        -Wno-exit-time-destructors
        -Wno-format-nonliteral
        -Wno-global-constructors
        -Wno-mismatched-tags
        -Wno-missing-braces
        -Wno-padded
        -Wno-reserved-id-macro
        -Wno-sign-conversion
        -Wno-switch-enum
        -Wno-weak-vtables
    )

    if (RAZ_COMPILER_CLANG_CL)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            # Disabling warnings triggered in externals
            -Wno-language-extension-token
            -Wno-nonportable-system-include-path
            -Wno-zero-as-null-pointer-constant
        )
    else ()
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            # Other warning flags not recognized by clang-cl
            -pedantic
            -pedantic-errors
        )
    endif ()

    if (RAZ_USE_EMSCRIPTEN)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            ""SHELL:-s USE_GLFW=3""
            ""SHELL:-s USE_LIBPNG=1""
        )

        set(
            RAZ_LINKER_FLAGS

            ${RAZ_LINKER_FLAGS}
            ""-s USE_LIBPNG=1""
            ""-s USE_GLFW=3""
            ""-s USE_WEBGL2=1""
            ""-s OFFSCREEN_FRAMEBUFFER=1""
            ""-s OFFSCREENCANVAS_SUPPORT=1""
            ""-s DOUBLE_MODE=0""
            glfw
        )
    endif ()

    # Disabling some warnings available since Clang 5
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5)
        set(
            RAZ_COMPILER_FLAGS

            ${RAZ_COMPILER_FLAGS}
            -Wno-unused-template
        )
    endif ()
elseif (RAZ_COMPILER_MSVC)
    set(
        RAZ_COMPILER_FLAGS

        /Wall

        /wd4061 # Enum value in a switch not explicitly handled by a case label
        /wd4571 # SEH exceptions aren't caught since Visual C++ 7.1
        /wd5045 # Spectre mitigation

        # Warnings triggered by the FBX SDK
        /wd4266 # No override available (function is hidden)
        /wd4619 # Unknown warning number
        /wd4625 # Copy constructor implicitly deleted
        /wd4626 # Copy assignment operator implicitly deleted

        # Warnings triggered by Catch
        /wd4365 # Signed/unsigned mismatch (implicit conversion)
        /wd4388 # Signed/unsigned mismatch (equality comparison)
        /wd4583 # Destructor not implicitly called
        /wd4623 # Default constructor implicitly deleted
        /wd4868 # Evaluation order not guaranteed in braced initializing list
        /wd5204 # Class with virtual functions but no virtual destructor

        # Warnings triggered by MSVC's standard library
        /wd4355 # 'this' used in base member initializing list
        /wd4514 # Unreferenced inline function has been removed
        /wd4548 # Expression before comma has no effect
        /wd4668 # Preprocessor macro not defined
        /wd4710 # Function not inlined
        /wd4820 # Added padding to members
        /wd5026 # Move constructor implicitly deleted
        /wd5027 # Move assignment operator implicitly deleted
        /wd5039 # Pointer/ref to a potentially throwing function passed to an 'extern ""C""' function (with -EHc)
    )

    # To automatically export all the classes & functions
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

    # CMake automatically appends /W3 to the standard flags, which produces a warning with MSVC when adding another level; this has to be removed
    # TODO: if possible, this should be done per target, not globally
    string(REGEX REPLACE ""/W[0-4]"" """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}"")
    string(REGEX REPLACE ""/W[0-4]"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
endif ()

if (RAZ_COMPILER_MSVC OR RAZ_COMPILER_CLANG_CL)
    set(
        RAZ_COMPILER_FLAGS

        ${RAZ_COMPILER_FLAGS}
        /permissive-
        /EHsc # Enabling exceptions
    )

    target_compile_definitions(
        RaZ

        PRIVATE

        NOMINMAX # Preventing definitions of min & max macros
        _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING # Ignoring std::codecvt deprecation warnings
    )
endif ()

######################
# RaZ - Source files #
######################

set(
    RAZ_SRC

    src/RaZ/*.cpp
    src/RaZ/Math/*.cpp
    src/RaZ/Physics/*.cpp
    src/RaZ/Render/*.cpp
    src/RaZ/Utils/*.cpp

    include/RaZ/*.hpp
    include/RaZ/*.inl
    include/RaZ/Math/*.hpp
    include/RaZ/Math/*.inl
    include/RaZ/Physics/*.hpp
    include/RaZ/Render/*.hpp
    include/RaZ/Render/*.inl
    include/RaZ/Utils/*.hpp
    include/RaZ/Utils/*.inl
)

# Adding every file to be compiled
file(
    GLOB
    RAZ_FILES

    ${RAZ_SRC}
)

# Defining platform-dependent options & linking flags
if (RAZ_PLATFORM_LINUX)
    option(RAZ_USE_SANITIZERS ""Use sanitizers"" OFF)

    if (RAZ_USE_SANITIZERS)
        add_definitions(
            -fsanitize=undefined
            -fsanitize=address
            -fsanitize=leak
        )

        set(
            RAZ_LINKER_FLAGS

            ${RAZ_LINKER_FLAGS}
            asan
            ubsan
        )
    endif ()
endif ()

#########################
# RaZ - FBX file format #
#########################

if (RAZ_COMPILER_MSVC OR RAZ_COMPILER_GCC AND NOT MINGW) # FBX SDK unavailable for MinGW, which is considered as GCC
    option(RAZ_USE_FBX ""Allows to import/export FBX models (requires the FBX SDK to be installed)"" OFF)

    if (RAZ_USE_FBX)
        find_package(FBX)

        if (FBX_FOUND)
            set(RAZ_LINKER_FLAGS ${RAZ_LINKER_FLAGS} ""${FBX_LIB}"")

            target_compile_definitions(RaZ PUBLIC ${FBX_DEFINITIONS})
            target_include_directories(RaZ PUBLIC ""${FBX_INCLUDE}"")

            message(STATUS ""[RaZ] FBX SDK linked (${FBX_LIB})"")
        endif ()
    endif ()
endif ()

# If FBX SDK not used or found, do not compile FBX loader
if (NOT RAZ_USE_FBX OR NOT FBX_FOUND)
    list(
        REMOVE_ITEM
        RAZ_FILES

        ""${PROJECT_SOURCE_DIR}/src/RaZ/Utils/FbxImporter.cpp""
    )
endif ()

###############
# RaZ - Build #
###############

target_sources(RaZ PRIVATE ${RAZ_FILES})

target_include_directories(RaZ PUBLIC ""${CMAKE_CURRENT_SOURCE_DIR}/include"")

# OpenGL version
option(RAZ_USE_GL4 ""Use OpenGL 4"" OFF)
if (RAZ_USE_GL4)
    target_compile_definitions(RaZ PRIVATE RAZ_USE_GL4)
endif ()

if (NOT RAZ_COMPILER_MSVC)
    # Defining the compiler flags only for C++; this doesn't work with MSVC
    set(RAZ_COMPILER_FLAGS $<$<COMPILE_LANGUAGE:CXX>:${RAZ_COMPILER_FLAGS}>)
endif ()

# Compiling RaZ
target_compile_options(RaZ PRIVATE ${RAZ_COMPILER_FLAGS})
target_link_libraries(RaZ PRIVATE ${RAZ_LINKER_FLAGS})

# Cygwin's Clang needs to use GCC's standard library
if (CYGWIN AND RAZ_COMPILER_CLANG)
    target_compile_options(RaZ PRIVATE -stdlib=libstdc++)
    target_link_libraries(RaZ PRIVATE stdc++)
endif ()

# Compiling & linking external libraries
add_subdirectory(extern)

if (RAZ_USE_LIBPNG)
    target_link_libraries(RaZ PRIVATE libpng)
endif ()

if (RAZ_USE_GLEW)
    target_link_libraries(RaZ PRIVATE GLEW)
endif ()

if (RAZ_USE_GLFW)
    target_link_libraries(RaZ PRIVATE GLFW)
endif ()

if (RAZ_USE_IMGUI)
    target_link_libraries(RaZ PRIVATE ImGui)
endif ()

# Build the examples
option(RAZ_BUILD_EXAMPLES ""Build examples"" ON)
if (RAZ_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif ()

# Build the unit tests
option(RAZ_BUILD_TESTS ""Build unit tests"" ON)
if (RAZ_BUILD_TESTS)
    add_subdirectory(tests)
endif ()

# Allows to generate the documentation
find_package(Doxygen)
option(RAZ_GEN_DOC ""Generate documentation (requires Doxygen)"" ${DOXYGEN_FOUND})
if (RAZ_GEN_DOC)
    add_subdirectory(doc)
endif ()

######################
# RaZ - Installation #
######################

# Installing the library
if (RAZ_PLATFORM_WINDOWS)
    set(CMAKE_INSTALL_PREFIX ""C:/RaZ"")
endif ()

install(TARGETS RaZ DESTINATION ""lib/$<CONFIG>"")

# Installing the headers
install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/include/RaZ"" DESTINATION include)

# If FBX SDK used, install the DLL file into the bin/ folder
if (RAZ_COMPILER_MSVC AND RAZ_USE_FBX AND FBX_FOUND)
    install(FILES ""${FBX_CONFIG_DLL}"" DESTINATION ""bin/$<CONFIG>"")
endif ()
",3.10,3.1
30434,K-3D,k3d,False,False,False,False,False,7,C++,2019-09-10 13:21:34+00:00,2012-04-15 11:28:26+00:00,107,3544,"PROJECT(k3d)

# Configure CMake ...
CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)
CMAKE_POLICY(SET CMP0003 OLD)
IF(${CMAKE_MAJOR_VERSION} GREATER 3 OR ${CMAKE_MAJOR_VERSION} EQUAL 3)
  CMAKE_POLICY(SET CMP0026 OLD)
ENDIF()

set(CMAKE_CXX_STANDARD 11)


SET(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules"")
SET(CMAKE_INSTALL_NAME_DIR ""@exectuable_path/../lib/"")

INCLUDE(K3DOutOfSourceBuild) # Disallow in-source builds
INCLUDE(K3DCompileResource)
INCLUDE(K3DGenerateDEF) # Convenience macro for linking Win32 DLLs using MSVC
INCLUDE(K3DDependencies)
INCLUDE(K3DWordSize) # Detect 32/64 bit platform
INCLUDE(K3DCompiler) # Detect problematic compilers

# Set the K-3D version
SET(K3D_MAJOR_VERSION 0)
SET(K3D_MINOR_VERSION 8)
SET(K3D_RELEASE_VERSION 0)
SET(K3D_BUILD_VERSION 7)
SET(K3D_SO_VERSION 1)

SET(K3D_PACKAGE k3d)
SET(K3D_VERSION ${K3D_MAJOR_VERSION}.${K3D_MINOR_VERSION}.${K3D_RELEASE_VERSION}.${K3D_BUILD_VERSION})
SET(K3D_HOST ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR})
SET(K3D_COPYRIGHT ""Copyright (c) 1995-2010, Timothy M. Shead.	All Rights Reserved."")

# Run tests to find external packages ...
INCLUDE(K3DFind3ds)
INCLUDE(K3DFindCairomm)
INCLUDE(K3DFindCARVE)
INCLUDE(K3DFindCGAL)
INCLUDE(K3DFindCollada)
INCLUDE(K3DFindDBus)
INCLUDE(K3DFindFreetype2)
INCLUDE(K3DFindFTGL)
INCLUDE(K3DFindGiomm)
INCLUDE(K3DFindGlibmm)
INCLUDE(K3DFindGMM)
INCLUDE(K3DFindGPerftools)
INCLUDE(K3DFindGtkGLExt)
INCLUDE(K3DFindGtkmm)
INCLUDE(K3DFindGtkSourceView)
INCLUDE(K3DFindGTS)
INCLUDE(K3DFindImageMagick)
INCLUDE(K3DFindInotify)
INCLUDE(K3DFindIntl)
INCLUDE(K3DFindJPEG)
INCLUDE(K3DFindODE)
INCLUDE(K3DFindOpenEXR)
INCLUDE(K3DFindOpenGL)
INCLUDE(K3DFindOSMesa)
INCLUDE(K3DFindPNG)
INCLUDE(K3DFindPython)
INCLUDE(K3DFindSigC)
INCLUDE(K3DFindSuperLU)
INCLUDE(K3DFindTBB)
INCLUDE(K3DFindTIFF)
INCLUDE(K3DFindXML)
INCLUDE(K3DFindZlib)

FIND_PACKAGE(Aqsis NO_MODULE QUIET)
FIND_PACKAGE(Qt4 4.6.2 COMPONENTS QtCore QtGui QtScript)
FIND_PACKAGE(K3DAsciiDoc)

# Setup platform-specific defaults ...
IF(WIN32 AND MSVC)
	SET(K3D_ENABLE_SYMBOL_VISIBILITY_DEFAULT ON)
ELSE()
	SET(K3D_ENABLE_SYMBOL_VISIBILITY_DEFAULT OFF)
ENDIF()

IF(Aqsis_FOUND AND QT4_FOUND)
	SET(K3D_QT_AQSIS_FOUND TRUE)
ELSE()
	SET(K3D_QT_AQSIS_FOUND FALSE)
ENDIF()

IF(K3D_OSMESA_FOUND AND QT4_FOUND)
	SET(K3D_QT_OSMESA_FOUND TRUE)
ELSE()
	SET(K3D_QT_OSMESA_FOUND FALSE)
ENDIF()

OPTION(K3D_BUILD_3DS_IO_MODULE ""Build the 3ds_io module"" ${K3D_3DS_FOUND})
OPTION(K3D_BUILD_ADVANCED_OPENGL_PAINTERS_MODULE ""Build the advanced OpenGL mesh painters module"" ON)
OPTION(K3D_BUILD_ANIMATION_MODULE ""Build the animation module"" ON)
OPTION(K3D_BUILD_ANNOTATION_MODULE ""Build the annotation module"" ${K3D_FREETYPE2_FOUND})
OPTION(K3D_BUILD_AQSIS_MODULE ""Build the embedded Aqsis render engine module"" ${Aqsis_FOUND})
OPTION(K3D_BUILD_ARRAY_MODULE ""Build the array module"" ON)
OPTION(K3D_BUILD_BICUBIC_PATCH_MODULE ""Build the bicubic patch module"" ON)
OPTION(K3D_BUILD_BILINEAR_PATCH_MODULE ""Build the bilinear patch module"" ON)
OPTION(K3D_BUILD_BITMAP_MODULE ""Build the bitmap module"" ON)
OPTION(K3D_BUILD_BLOBBY_MODULE ""Build the blobby module"" ON)
OPTION(K3D_BUILD_BUNDLED_RENDERMAN_ENGINES_MODULE ""Provides integration with RenderMan-compatible render engines that are bundled with K-3D."" OFF)
OPTION(K3D_BUILD_CARVE_MODULE ""Build the CARVE module"" ${K3D_CARVE_FOUND})
OPTION(K3D_BUILD_CGAL_MODULE ""Build the CGAL module"" ${K3D_CGAL_FOUND})
OPTION(K3D_BUILD_CLOTH_MODULE ""Build the cloth module"" ON)
OPTION(K3D_BUILD_COLLADA_IO_MODULE ""Build the COLLADA module"" ${K3D_COLLADA_FOUND})
OPTION(K3D_BUILD_COMPIZ_MODULE ""Build the Compiz module"" ${K3D_DBUS_FOUND})
OPTION(K3D_BUILD_CORE_MODULE ""Build the core module"" ON)
OPTION(K3D_BUILD_CUDA_MODULE ""Build the cuda module"" OFF)
OPTION(K3D_BUILD_DEFORMATION_MODULE ""Build the mesh deformation module"" ON)
OPTION(K3D_BUILD_DEVELOPMENT_MODULE ""Build the development module"" ON)
OPTION(K3D_BUILD_DOUBLE_MODULE ""Build the double module"" ON)
OPTION(K3D_BUILD_EULER_OPERATIONS_MODULE ""Build the module that exposes the Euler mesh operations as mesh modifiers"" OFF)
OPTION(K3D_BUILD_FILE_MAGIC_MODULE ""Build the file-identification-magic module"" ON)
OPTION(K3D_BUILD_FREETYPE2_MODULE ""Build the freetype2 module"" ON)
OPTION(K3D_BUILD_GIO_MODULE ""Build the GIO module for mime type support"" ${K3D_GIOMM_FOUND})
OPTION(K3D_BUILD_GLX_MODULE ""Build the GLX offscreen rendering module"" OFF)
OPTION(K3D_BUILD_GMSH_IO_MODULE ""Build the Gmsh file format module"" ON)
OPTION(K3D_BUILD_GPERFTOOLS_MODULE ""Build the GPerftools profiling module"" ${K3D_GPERFTOOLS_FOUND})
OPTION(K3D_BUILD_GRAPHVIZ_MODULE ""Build the GraphViz integration module"" ON)
OPTION(K3D_BUILD_GTS_IO_MODULE ""Build the GNU Triangulated Surfaces file format module"" ON)
OPTION(K3D_BUILD_GTS_MODULE ""Build the GNU Triangulated Surfaces module"" ${K3D_GTS_FOUND})
OPTION(K3D_BUILD_HIGHLIGHTING_MODULE ""Build the user interface 'highlighting' module"" ON)
OPTION(K3D_BUILD_IGES_IO_MODULE ""Build the IGES file format module"" ON)
OPTION(K3D_BUILD_IMAGEMAGICK_IO_MODULE ""Build the ImageMagick file format module"" ${K3D_IMAGEMAGICK_FOUND})
OPTION(K3D_BUILD_INDIGO_MODULE ""Build the Indigo render engine integration module"" ON)
OPTION(K3D_BUILD_INOTIFY_MODULE ""Build the inotify file change notification module"" ${K3D_INOTIFY_FOUND})
OPTION(K3D_BUILD_JPEG_IO_MODULE ""Build the jpeg file format module"" ${K3D_JPEG_FOUND})
OPTION(K3D_BUILD_K3D_IO_MODULE ""Build the K-3D file format module"" ON)
OPTION(K3D_BUILD_LINEAR_CURVE_MODULE ""Build the linear curve module"" ON)
OPTION(K3D_BUILD_LIPSYNC_MODULE ""Build the lip synchronization tools module"" ON)
OPTION(K3D_BUILD_LSYSTEM_MODULE ""Build the l-system parser module"" ON)
OPTION(K3D_BUILD_LUXRENDER_MODULE ""Build the Luxrender render enegine integration module"" ON)
OPTION(K3D_BUILD_MATRIX_MODULE ""Build the matrix operations module"" ON)
OPTION(K3D_BUILD_MD2_IO_MODULE ""Build the md2 io module"" ON)
OPTION(K3D_BUILD_MESH_ATTRIBUTES_MODULE ""Build the mesh attributes module"" ON)
OPTION(K3D_BUILD_MESH_INSTANCE_MODULE ""Build the mesh-instance module"" ON)
OPTION(K3D_BUILD_MESH_MODULE ""Build the mesh module"" ON)
OPTION(K3D_BUILD_NGUI_ABOUT_MODULE ""Build the user interface 'about' dialog module"" ON)
OPTION(K3D_BUILD_NGUI_ANIMATION_TIMELINE_PANEL_MODULE ""Build the experimental animation timeline panel module"" ON)
OPTION(K3D_BUILD_NGUI_ASSIGN_HOTKEYS_MODULE ""Build the user interface 'assign hotkeys' module"" ON)
OPTION(K3D_BUILD_NGUI_ATK_EVENT_RECORDER_MODULE ""Build the user interface ATK 'event recorder' module"" OFF)
OPTION(K3D_BUILD_NGUI_KNOT_VECTOR_CONTROL_MODULE ""Build the custom knot-vector property control module"" ON)
OPTION(K3D_BUILD_NGUI_LEARNING_MODULE ""Build the user interface learning (tutorial) dialog module"" ON)
OPTION(K3D_BUILD_NGUI_LOG_MODULE ""Build the user interface log window module"" ON)
OPTION(K3D_BUILD_NGUI_MATERIAL_MANAGER_PANEL_MODULE ""Build the user interface manager manager panel module"" OFF)
OPTION(K3D_BUILD_NGUI_MESH_CONTROL_MODULE ""Build the mesh property control module"" ON)
OPTION(K3D_BUILD_NGUI_MODULE ""Build the standard graphical user interface module"" ON)
OPTION(K3D_BUILD_NGUI_MORPH_POINTS_PAGE_MODULE ""Build the MorphPoints custom property page module"" ON)
OPTION(K3D_BUILD_NGUI_NODE_LIST_PANEL_MODULE ""Build the user interface node list panel module"" ON)
OPTION(K3D_BUILD_NGUI_NODE_PROPERTIES_PANEL_MODULE ""Build the user interface node properties panel module"" ON)
OPTION(K3D_BUILD_NGUI_OPENGL_DIALOG_MODULE ""Build the user interface OpenGL information dialog module"" ON)
OPTION(K3D_BUILD_NGUI_PARENT_TOOL_MODULE ""Build the user interface 'parent tool' module"" ON)
OPTION(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE ""Build the user interface pipeline display panel module"" ON)
OPTION(K3D_BUILD_NGUI_PIPELINE_PROFILER_PANEL_MODULE ""Build the user interface pipeline profiler panel module"" ON)
OPTION(K3D_BUILD_NGUI_PYTHON_SHELL_MODULE ""Build the interactive Python shell module"" ON)
OPTION(K3D_BUILD_NGUI_RECTANGLE_CONTROL_MODULE ""Build the custom rectangle property control module"" ON)
OPTION(K3D_BUILD_NGUI_RENDER_REGION_TOOL_MODULE ""Build the user interface 'render region tool' module"" ON)
OPTION(K3D_BUILD_NGUI_SELECTION_CONTROL_MODULE ""Build the selection property control module"" ON)
OPTION(K3D_BUILD_NGUI_SNAP_TOOL_MODULE ""Build the user interface 'snap tool' module"" ON)
OPTION(K3D_BUILD_NGUI_SPACE_NAVIGATOR_MODULE ""Build the SpaceNavigator 3D mouse integration module"" OFF)
OPTION(K3D_BUILD_NGUI_TEXT_EDITOR_MODULE ""Build the user interface text editor module"" ON)
OPTION(K3D_BUILD_NGUI_TIMELINE_PANEL_MODULE ""Build the user interface timeline panel module"" ON)
OPTION(K3D_BUILD_NGUI_TOOLBAR_PANEL_MODULE ""Build the user interface toolbar panel module"" ON)
OPTION(K3D_BUILD_NGUI_TOOL_PROPERTIES_PANEL_MODULE ""Build the user interface tool properties panel module"" ON)
OPTION(K3D_BUILD_NGUI_UNDO_TREE_PANEL_MODULE ""Build the user interface undo panel module"" ON)
OPTION(K3D_BUILD_NGUI_UV_EDITOR_PANEL_MODULE ""Build the user interface UV editor panel module"" OFF)
OPTION(K3D_BUILD_NUI_MODULE ""Build the Null User Interface module"" ON)
OPTION(K3D_BUILD_NURBS_MODULE ""Build the NURBS module"" ON)
OPTION(K3D_BUILD_NURBS_SOURCES_MODULE ""Build the NURBS sources module"" ON)
OPTION(K3D_BUILD_OBJ_IO_MODULE ""Build the Wavefront .obj file format module"" ON)
OPTION(K3D_BUILD_ODE_MODULE ""Build the Open Dynamics Engine (ODE) integration module"" ${K3D_ODE_FOUND})
OPTION(K3D_BUILD_OGRE_IO_MODULE ""Build the Object-oriented Graphics Engine (OGRE) file I/O module"" ON)
OPTION(K3D_BUILD_OPENEXR_IO_MODULE ""Build the OpenEXR file format module"" ${K3D_OPENEXR_FOUND})
OPTION(K3D_BUILD_OPENGL_MODULE ""Build the OpenGL integration module"" ON)
OPTION(K3D_BUILD_OSMESA_MODULE ""Build the Offscreen Mesa integration module"" ${K3D_OSMESA_FOUND})
OPTION(K3D_BUILD_OSX_MODULE ""Build the Mac OSX integration module"" ${APPLE})
OPTION(K3D_BUILD_PARTICLE_MODULE ""Build the point group module"" ON)
OPTION(K3D_BUILD_PDIFF_MODULE ""Build the perceptual-diff module"" ON)
OPTION(K3D_BUILD_PIXIE_MODULE ""Build the Pixie render engine integration module"" ON)
OPTION(K3D_BUILD_PLOT_MODULE ""Build the function-plot module"" ON)
OPTION(K3D_BUILD_PLY_IO_MODULE ""Build the Stanford .ply file format module"" ON)
OPTION(K3D_BUILD_PNG_IO_MODULE ""Build the PNG file format module"" ON)
OPTION(K3D_BUILD_POLYHEDRON_MODULE ""Build the polyhedron module"" ON)
OPTION(K3D_BUILD_POLYHEDRON_SOURCES_MODULE ""Build the polyhedron sources module"" ON)
OPTION(K3D_BUILD_PYTHON_MODULE ""Build the Python scripting language module"" ON)
OPTION(K3D_BUILD_PYUI_MODULE ""Build the Python user interface plugin"" ON)
OPTION(K3D_BUILD_QSLIM_MODULE ""Build the qslim module"" ON)
OPTION(K3D_BUILD_QTUI_ABOUT_DIALOG_MODULE ""Build the Qt user interface 'about' dialog module"" OFF)
OPTION(K3D_BUILD_QTUI_AQSIS_MODE_MODULE ""Build the Qt-Aqsis integration mode module"" OFF)
OPTION(K3D_BUILD_QTUI_AQSIS_MODULE ""Build the Qt-Aqsis integration module"" OFF)
OPTION(K3D_BUILD_QTUI_BOOLEAN_MODULE ""Build the Qt graphical user interface boolean property widget module"" OFF)
OPTION(K3D_BUILD_QTUI_COLOR_MODULE ""Build the Qt graphical user interface color property widget module"" OFF)
OPTION(K3D_BUILD_QTUI_DEFAULT_MODE_MODULE ""Build the Qt graphical user interface default mode module"" OFF)
OPTION(K3D_BUILD_QTUI_JAVASCRIPT_SHELL_MODULE ""Build the Qt graphical user interface interactive JavaScript shell module"" OFF)
OPTION(K3D_BUILD_QTUI_LOG_MODULE ""Build the Qt user interface log window module"" OFF)
OPTION(K3D_BUILD_QTUI_MATRIX_MODULE ""Build the Qt graphical user interface matrix property widget module"" OFF)
OPTION(K3D_BUILD_QTUI_MODULE ""Build the Qt graphical user interface module"" OFF)
OPTION(K3D_BUILD_QTUI_MOVE_MODE_MODULE ""Build the user interface mode to move components"" OFF)
OPTION(K3D_BUILD_QTUI_NODE_LIST_MODULE ""Build the Qt graphical user interface node list module"" OFF)
OPTION(K3D_BUILD_QTUI_NODE_PROPERTIES_MODULE ""Build the Qt graphical user interface node properties module"" OFF)
OPTION(K3D_BUILD_QTUI_OPENGL_MODULE ""Build the Qt graphical user interface OpenGL-test module"" OFF)
OPTION(K3D_BUILD_QTUI_PATH_MODULE ""Build the Qt graphical user interface filesystem path property widget module"" OFF)
OPTION(K3D_BUILD_QTUI_PROGRAMMABLE_MODE_MODULE ""Build the Qt graphical user interface programmable mode module"" OFF)
OPTION(K3D_BUILD_QTUI_STRING_MODULE ""Build the Qt graphical user interface string property widget module"" OFF)
OPTION(K3D_BUILD_QTUI_TEXT_EDITOR_MODULE ""Build the Qt graphical user interface text editor module"" OFF)
OPTION(K3D_BUILD_QUADRICS_MODULE ""Build the quadrics module"" ON)
OPTION(K3D_BUILD_REFERENCE_OPENGL_PAINTERS_MODULE ""Build the reference OpenGL mesh painters module"" ON)
OPTION(K3D_BUILD_RENDERMAN_ENGINES_MODULE ""Provides integration with many RenderMan-compatible render engines."" ON)
OPTION(K3D_BUILD_RENDERMAN_MODULE ""Build the RenderMan integration module"" ON)
OPTION(K3D_BUILD_RENDERMAN_PAINTERS_MODULE ""Build the RenderMan mesh painters module"" ON)
OPTION(K3D_BUILD_RELEASE_MODULE ""Build the release nag-messages module"" ON)
OPTION(K3D_BUILD_SCRIPTED_PLUGINS_MODULE ""Build the scripted plugins module"" ON)
OPTION(K3D_BUILD_SCRIPTING_MODULE ""Build the scripting module"" ON)
OPTION(K3D_BUILD_SELECTION_MODULE ""Build the selection module"" ON)
OPTION(K3D_BUILD_SOLAR_MODULE ""Build the solar module"" ON)
OPTION(K3D_BUILD_STL_IO_MODULE ""Build the STL file format module"" ON)
OPTION(K3D_BUILD_SUBDIVISION_SURFACE_MODULE ""Build the subdivision surface module"" ON)
OPTION(K3D_BUILD_SVG_IO_MODULE ""Build the SVG file format module"" ON)
OPTION(K3D_BUILD_TEST_MODULE ""Build the regression test module"" ON)
OPTION(K3D_BUILD_TIFF_IO_MODULE ""Build the TIFF file format module"" ON)
OPTION(K3D_BUILD_TIME_MODULE ""Build the time source module"" ON)
OPTION(K3D_BUILD_UNIFORM_POLYHEDRON_MODULE ""Build the uniform polyhedron source module"" ON)
OPTION(K3D_BUILD_VIRTUAL_OFFSCREEN_MODULE ""Build the virtual offscreen OpenGL rendering module"" OFF)
OPTION(K3D_BUILD_VIRTUAL_OPENGL_PAINTERS_MODULE ""Build virtual OpenGL painters modules"" ON)
OPTION(K3D_BUILD_WGL_MODULE ""Build the Windows offscreen rendering module"" ${WIN32})
OPTION(K3D_BUILD_WINDOWS_MODULE ""Build the Windows integration module"" ${WIN32})
OPTION(K3D_BUILD_XTRACKCAD_MODULE ""Build the XTrackCAD Model Railroad integration module"" ON)
OPTION(K3D_BUILD_YAFRAY_MODULE ""Build the YAFRAY render engine integration module"" ON)

OPTION(K3D_BUILD_DOCS ""Build the documentation"" OFF)
OPTION(K3D_BUILD_GUIDE ""Build the html guide"" OFF)

OPTION(K3D_ENABLE_OSX_BUNDLE ""Package K-3D as an OSX bundle (ignored on other platforms)."" OFF)
OPTION(K3D_ENABLE_DISTRIBUTION ""Enable distribution targets."" OFF)
OPTION(K3D_ENABLE_NLS ""Build K-3D with native language support"" ON)
OPTION(K3D_ENABLE_PARALLEL ""Enable parallel computation using the Threaded Building Blocks library."" OFF)
OPTION(K3D_ENABLE_PROFILING ""Enable code profiling using GPerftools."" OFF)
OPTION(K3D_ENABLE_PYTHON ""Build K-3D with Python support"" ON)
OPTION(K3D_ENABLE_SYMBOL_VISIBILITY ""Minimize the number of symbols exported from shared libraries."" ${K3D_ENABLE_SYMBOL_VISIBILITY_DEFAULT})
OPTION(K3D_ENABLE_TESTING ""Build the K-3D regression test suite."" OFF)

# Find Boost - this logic must follow all user-definable options
SET(K3D_BOOST_COMPONENTS date_time program_options regex system unit_test_framework)
IF(K3D_ENABLE_PYTHON)
	LIST(APPEND K3D_BOOST_COMPONENTS python)
ENDIF()
IF(K3D_BUILD_COLLADA_IO_MODULE)
	LIST(APPEND K3D_BOOST_COMPONENTS filesystem)
ENDIF()
IF(K3D_BUILD_CGAL_MODULE)
	LIST(APPEND K3D_BOOST_COMPONENTS thread)
ENDIF()
INCLUDE(K3DFindBoost)

# Find required external packages
K3D_CHECK(""K-3D"" REQUIRES Boost_FOUND RESOURCE ""Boost"" URL ""http://www.boost.org"" MESSAGE ""Note: K-3D requires many of the compiled Boost libraries, which may be distributed separately on some systems."")
K3D_CHECK(""K-3D"" REQUIRES K3D_GLIBMM_FOUND RESOURCE ""glibmm"" URL ""http://gtkmm.org"")
K3D_CHECK(""K-3D"" REQUIRES K3D_OPENGL_FOUND RESOURCE ""OpenGL"" URL ""http://opengl.org"")
K3D_CHECK(""K-3D"" REQUIRES K3D_SIGC_FOUND RESOURCE ""libsigc++"" URL ""http://libsigc.sourceforge.net"")
K3D_CHECK(""K-3D"" REQUIRES K3D_XML_FOUND RESOURCE ""XML parser"" URL ""http://xmlsoft.org"")
K3D_CHECK(""K-3D"" REQUIRES K3D_ZLIB_FOUND RESOURCE ""zlib"" URL ""http://www.zlib.net"")

K3D_CHECK(K3D_BUILD_3DS_IO_MODULE REQUIRES K3D_3DS_FOUND RESOURCE ""lib3ds"")
K3D_CHECK(K3D_BUILD_ANNOTATION_MODULE REQUIRES K3D_FREETYPE2_FOUND RESOURCE ""freetype2"")
K3D_CHECK(K3D_BUILD_AQSIS_MODULE REQUIRES Aqsis_FOUND MESSAGE ""To build this module you need to set Aqsis_DIR to the path to an Aqsis build directory."")
K3D_CHECK(K3D_BUILD_CARVE_MODULE REQUIRES K3D_CARVE_FOUND RESOURCE ""CARVE"")
K3D_CHECK(K3D_BUILD_CGAL_MODULE REQUIRES K3D_CGAL_FOUND RESOURCE ""CGAL"")
K3D_CHECK(K3D_BUILD_COLLADA_MODULE REQUIRES K3D_COLLADA_FOUND RESOURCE ""Collada DOM"")
K3D_CHECK(K3D_BUILD_COMPIZ_MODULE REQUIRES K3D_DBUS_FOUND RESOURCE ""libdbus"")
K3D_CHECK(K3D_BUILD_FREETYPE2_MODULE REQUIRES K3D_FREETYPE2_FOUND RESOURCE ""freetype2"")
K3D_CHECK(K3D_BUILD_GTS_MODULE REQUIRES K3D_GTS_FOUND RESOURCE ""GNU Triangulated Surface"")
K3D_CHECK(K3D_BUILD_IMAGEMAGICK_IO_MODULE REQUIRES K3D_IMAGEMAGICK_FOUND RESOURCE ""ImageMagick"")
K3D_CHECK(K3D_BUILD_JPEG_IO_MODULE REQUIRES K3D_JPEG_FOUND RESOURCE ""JPEG"")
K3D_CHECK(K3D_BUILD_NGUI_ABOUT_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_ANIMATION_TIMELINE_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_ASSIGN_HOTKEYS_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_ATK_EVENT_RECORDER_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_KNOT_VECTOR_CONTROL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_LEARNING_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_LOG_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_MESH_CONTROL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_MODULE REQUIRES K3D_GTKGLEXT_FOUND RESOURCE ""gtkglext"")
K3D_CHECK(K3D_BUILD_NGUI_MODULE REQUIRES K3D_GTKGLEXT_FOUND RESOURCE ""gtkglext"")
K3D_CHECK(K3D_BUILD_NGUI_MODULE REQUIRES K3D_GTKMM_FOUND RESOURCE ""gtkmm"")
K3D_CHECK(K3D_BUILD_NGUI_MODULE REQUIRES K3D_GTKMM_FOUND RESOURCE ""gtkmm"")
K3D_CHECK(K3D_BUILD_NGUI_MORPH_POINTS_PAGE_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_NODE_HISTORY_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_NODE_LIST_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_NODE_PROPERTIES_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_OPENGL_DIALOG_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_PARENT_TOOL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE REQUIRES K3D_CAIROMM_FOUND RESOURCE ""cairomm"")
K3D_CHECK(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE REQUIRES K3D_CAIROMM_FOUND RESOURCE ""cairomm"")
K3D_CHECK(K3D_BUILD_NGUI_PIPELINE_PROFILER_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_PYTHON_SHELL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_PYTHON_SHELL_MODULE REQUIRES K3D_ENABLE_PYTHON)
K3D_CHECK(K3D_BUILD_NGUI_PYTHON_SHELL_MODULE REQUIRES K3D_ENABLE_PYTHON)
K3D_CHECK(K3D_BUILD_NGUI_RECTANGLE_CONTROL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_RENDER_REGION_TOOL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_SELECTION_CONTROL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_SNAP_TOOL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_SPACE_NAVIGATOR_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_TEXT_EDITOR_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_TIMELINE_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_TOOLBAR_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_TOOL_PROPERTIES_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_UNDO_TREE_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_NGUI_UV_EDITOR_PANEL_MODULE REQUIRES K3D_BUILD_NGUI_MODULE)
K3D_CHECK(K3D_BUILD_OPENEXR_IO_MODULE REQUIRES K3D_OPENEXR_FOUND RESOURCE ""OpenEXR"")
K3D_CHECK(K3D_BUILD_OSMESA_MODULE REQUIRES K3D_OSMESA_FOUND RESOURCE ""OSMesa"")
K3D_CHECK(K3D_BUILD_PGP_REMESH_MODULE REQUIRES K3D_GMM_FOUND RESOURCE ""gmm"")
K3D_CHECK(K3D_BUILD_PNG_IO_MODULE REQUIRES K3D_PNG_FOUND RESOURCE ""PNG"")
K3D_CHECK(K3D_BUILD_PYTHON_MODULE REQUIRES K3D_ENABLE_PYTHON)
K3D_CHECK(K3D_BUILD_PYUI_MODULE REQUIRES K3D_ENABLE_PYTHON)
K3D_CHECK(K3D_BUILD_QTUI_ABOUT_DIALOG_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_AQSIS_MODULE REQUIRES Aqsis_FOUND K3D_BUILD_QTUI_MODULE MESSAGE ""To build this module you need to set Aqsis_DIR to the path to an Aqsis build directory."")
K3D_CHECK(K3D_BUILD_QTUI_AQSIS_MODE_MODULE REQUIRES Aqsis_FOUND K3D_BUILD_QTUI_MODULE MESSAGE ""To build this module you need to set Aqsis_DIR to the path to an Aqsis build directory."")
K3D_CHECK(K3D_BUILD_QTUI_BOOLEAN_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_COLOR_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_DEFAULT_MODE_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_JAVASCRIPT_SHELL_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_LOG_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_MATRIX_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_MODULE REQUIRES QT4_FOUND RESOURCE ""Qt4"")
K3D_CHECK(K3D_BUILD_QTUI_MOVE_MODE_MODULE REQUIRES QT4_FOUND)
K3D_CHECK(K3D_BUILD_QTUI_NODE_LIST_MODULE REQUIRES QT4_FOUND)
K3D_CHECK(K3D_BUILD_QTUI_NODE_PROPERTIES_MODULE REQUIRES QT4_FOUND)
K3D_CHECK(K3D_BUILD_QTUI_OPENGL_MODULE REQUIRES K3D_BUILD_QTUI_MODULE K3D_BUILD_OSMESA_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_PATH_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_PROGRAMMABLE_MODE_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_STRING_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_QTUI_TEXT_EDITOR_MODULE REQUIRES K3D_BUILD_QTUI_MODULE)
K3D_CHECK(K3D_BUILD_TIFF_IO_MODULE REQUIRES K3D_TIFF_FOUND RESOURCE ""libtiff"")
K3D_CHECK(K3D_ENABLE_NLS REQUIRES K3D_INTL_FOUND RESOURCE ""intl"")
K3D_CHECK(K3D_ENABLE_PARALLEL REQUIRES K3D_TBB_FOUND RESOURCE ""Threading Building Blocks"" URL ""http://threadingbuildingblocks.org"")
K3D_CHECK(K3D_ENABLE_PROFILING REQUIRES K3D_GPERFTOOLS_FOUND RESOURCE ""GPerftools"" URL ""https://github.com/gperftools/gperftools"")
K3D_CHECK(K3D_ENABLE_PYTHON REQUIRES K3D_PYTHON_FOUND RESOURCE ""Python"")

# Setup testing
SET(BUILD_TESTING ${K3D_ENABLE_TESTING} CACHE INTERNAL """" FORCE)
INCLUDE(CTest)
IF(K3D_ENABLE_TESTING)
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake @ONLY)
ENDIF()

# Capture system configuration
INCLUDE(K3DSystemConfiguration)

# Win32 configuration
IF(WIN32 AND NOT MSVC)
	SET(CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-runtime-pseudo-reloc"" CACHE STRING """" FORCE)
	SET(CMAKE_SHARED_LINKER_FLAGS ""-Wl,--enable-runtime-pseudo-reloc -Wl,--export-all-symbols"" CACHE STRING """" FORCE)
ENDIF()

# Setup output directories ...
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/bin)

SET(K3D_LIBDIR lib) # Allows us to handle 64-bit libs if/when it becomes necessary.

IF(APPLE AND K3D_ENABLE_OSX_BUNDLE)
	SET(K3D_BUNDLE_DIRECTORY ${k3d_BINARY_DIR}/K-3D.app/Contents)
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${K3D_BUNDLE_DIRECTORY}/${K3D_LIBDIR})
	SET(K3D_RUNTIME_OUTPUT_DIRECTORY ${K3D_BUNDLE_DIRECTORY}/MacOS)
	SET(K3D_MODULE_OUTPUT_DIRECTORY ${K3D_BUNDLE_DIRECTORY}/${K3D_LIBDIR}/k3d/plugins)
	SET(K3D_SHARE_OUTPUT_DIRECTORY ${K3D_BUNDLE_DIRECTORY}/share)
ELSEIF(WIN32)
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/bin)
	SET(K3D_RUNTIME_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/bin)
	SET(K3D_MODULE_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/${K3D_LIBDIR}/k3d/plugins)
	SET(K3D_SHARE_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/share)
ELSE()
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/${K3D_LIBDIR})
	SET(K3D_RUNTIME_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/bin)
	SET(K3D_MODULE_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/${K3D_LIBDIR}/k3d/plugins)
	SET(K3D_SHARE_OUTPUT_DIRECTORY ${k3d_BINARY_DIR}/share)
ENDIF()

# Setup subdirectories ...
K3D_ADD_SUBDIRECTORY(gendef REQUIRES MSVC)

ADD_SUBDIRECTORY(k3dsdk)
ADD_SUBDIRECTORY(resource-compiler)

ADD_SUBDIRECTORY(application)
ADD_SUBDIRECTORY(desktop)
ADD_SUBDIRECTORY(make-module-proxy)
ADD_SUBDIRECTORY(renderjob)
ADD_SUBDIRECTORY(renderframe)
ADD_SUBDIRECTORY(sl2xml)
ADD_SUBDIRECTORY(uuidgen)
ADD_SUBDIRECTORY(modules)
ADD_SUBDIRECTORY(share)

K3D_ADD_SUBDIRECTORY(tests REQUIRES K3D_ENABLE_TESTING)
K3D_ADD_SUBDIRECTORY(po REQUIRES K3D_ENABLE_NLS)

ADD_SUBDIRECTORY(bugs)
K3D_ADD_SUBDIRECTORY(docs REQUIRES K3D_BUILD_DOCS)
ADD_SUBDIRECTORY(web)

K3D_ADD_SUBDIRECTORY(distribution REQUIRES K3D_ENABLE_DISTRIBUTION)

# Hide some cruft ...
MARK_AS_ADVANCED(A2X_COMMAND)
MARK_AS_ADVANCED(AQSIS_COMMAND)
MARK_AS_ADVANCED(AQSL_COMMAND)
MARK_AS_ADVANCED(ASCIIDOC_COMMAND)
MARK_AS_ADVANCED(ASSISTANT_COMMAND)
MARK_AS_ADVANCED(ASTYLE_COMMAND)
MARK_AS_ADVANCED(Aqsis_DIR)
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CMAKE_EXECUTABLE_FORMAT)
MARK_AS_ADVANCED(CMAKE_LIBRARY_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_USE_CHRPATH)
MARK_AS_ADVANCED(CUDA_FOUND CUDA_COMPILER CUDA_RUNTIME_LIBRARY)
MARK_AS_ADVANCED(DART_TESTING_TIMEOUT)
MARK_AS_ADVANCED(DITZ_EXECUTABLE)
MARK_AS_ADVANCED(GDB_COMMAND)
MARK_AS_ADVANCED(GIT_COMMAND)
MARK_AS_ADVANCED(K3D_AQSIS_COMMAND)
MARK_AS_ADVANCED(K3D_BOOST_INCLUDE_DIR)
MARK_AS_ADVANCED(K3D_BOOST_LIBRARY_DIR)
MARK_AS_ADVANCED(K3D_BOOST_USE_MULTITHREADED)
MARK_AS_ADVANCED(K3D_ENABLE_PARALLEL)
MARK_AS_ADVANCED(K3D_ENABLE_PROFILING)
MARK_AS_ADVANCED(K3D_ENABLE_SYMBOL_VISIBILITY)
MARK_AS_ADVANCED(K3D_EXTRA_GDB_ARGUMENTS)
MARK_AS_ADVANCED(K3D_EXTRA_QT_PLUGINS)
MARK_AS_ADVANCED(K3D_GTK_DIR)
MARK_AS_ADVANCED(K3D_INTLTOOL_UPDATE)
MARK_AS_ADVANCED(K3D_MACPORTS_DIR)
MARK_AS_ADVANCED(K3D_MINGW_GCC)
MARK_AS_ADVANCED(K3D_MSGFMT)
MARK_AS_ADVANCED(K3D_MSGMERGE)
MARK_AS_ADVANCED(K3D_PYTHON_COMMAND)
MARK_AS_ADVANCED(K3D_PYTHON_LIBRARY)
MARK_AS_ADVANCED(K3D_SOURCEFORGE_USERNAME)
MARK_AS_ADVANCED(K3D_XGETTEXT)
MARK_AS_ADVANCED(MAKO_COMMAND)
MARK_AS_ADVANCED(QCOLLECTIONGENERATOR_COMMAND)
MARK_AS_ADVANCED(QHELPGENERATOR_COMMAND)
MARK_AS_ADVANCED(QT_MKSPECS_DIR)
MARK_AS_ADVANCED(QT_PLUGINS_DIR)
MARK_AS_ADVANCED(QT_QMAKE_EXECUTABLE)
MARK_AS_ADVANCED(QT_QTMOTIF_INCLUDE_DIR)
MARK_AS_ADVANCED(QT_QTMOTIF_LIBRARY_DEBUG)
MARK_AS_ADVANCED(QT_QTMOTIF_LIBRARY_RELEASE)
MARK_AS_ADVANCED(QT_X11_X11_LIBRARY)
MARK_AS_ADVANCED(QT_X11_Xext_LIBRARY)
MARK_AS_ADVANCED(QT_X11_m_LIBRARY)
MARK_AS_ADVANCED(RNDR_COMMAND)
MARK_AS_ADVANCED(RSVG_COMMAND)
MARK_AS_ADVANCED(SDRC_COMMAND)
",3.1,3.1
30452,sanko-shoko,simplesp,False,False,False,False,False,1,C++,2020-05-01 10:23:13+00:00,2017-07-31 04:46:44+00:00,14,859,"﻿cmake_minimum_required(VERSION 3.1)
set (CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")
set (CMAKE_CXX_STANDARD 11)

project(simplesp)

## output
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/)

include_directories(${CMAKE_SOURCE_DIR})


## simplesp
find_package(SIMPLESP REQUIRED)
include_directories(${SIMPLESP_DIR})


## external
include_directories(${CMAKE_SOURCE_DIR}/external)
link_directories(${CMAKE_SOURCE_DIR}/external)
file(GLOB SP_EX_LIBS ${CMAKE_SOURCE_DIR}/external/*.lib)

function(use_external_library target name)
    include_directories(""${CMAKE_SOURCE_DIR}/external/${name}"")
    target_link_libraries(${target} ${name})
endfunction()


## openCV
option(SP_USE_OPENCV ""SP_USE_OPENCV"" OFF)
if(SP_USE_OPENCV)
    find_package(OpenCV REQUIRED)
    
    include_directories(${OpenCV_INCLUDE_DIRS})
    link_directories(${OpenCV_LIB_DIRS})
    
    set(SP_CV_LIBS ${OpenCV_LIBS})
endif(SP_USE_OPENCV)


## openGL
option(SP_USE_OPENGL ""SP_USE_OPENGL"" OFF)
if(SP_USE_OPENGL)
    find_package(OpenGL REQUIRED)
    find_package(GLFW REQUIRED)
    
    include_directories(${GLFW_INCLUDE_DIR})
    
    set(SP_GL_LIBS ${OPENGL_LIBRARY} ${GLFW_LIB})
endif()


## OpenMP
option(SP_USE_OPENMP ""SP_USE_OPENMP"" ON)
if(SP_USE_OPENMP) 
    find_package(OpenMP)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
endif()


## folder
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER ""cmake"")

add_subdirectory(external)
add_subdirectory(sample)
add_subdirectory(test)
",3.1,3.1
30512,libAthena,Athena,False,False,False,False,False,5,C++,2020-04-22 10:36:29+00:00,2013-01-26 20:22:44+00:00,4,631,"cmake_minimum_required(VERSION 3.10 FATAL_ERROR) # because of c++17
project(athena)
if (NOT MSVC)
  set(CMAKE_CXX_STANDARD 20)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

##################
# Athena Version #
##################

set(ATHENA_MAJOR_VERSION 2)
set(ATHENA_MINOR_VERSION 3)
set(ATHENA_PATCH_VERSION 0)
set(ATHENA_VERSION
  ${ATHENA_MAJOR_VERSION}.${ATHENA_MINOR_VERSION}.${ATHENA_PATCH_VERSION})

################
# Athena Build #
################

add_subdirectory(extern)

add_library(athena-core
    src/athena/Utility.cpp
    src/athena/MemoryReader.cpp
    src/athena/MemoryWriter.cpp
    src/athena/VectorWriter.cpp
    src/athena/FileWriterGeneric.cpp
    src/athena/Global.cpp
    src/athena/Checksums.cpp
    src/athena/Compression.cpp
    src/athena/Socket.cpp
    src/LZ77/LZLookupTable.cpp
    src/LZ77/LZType10.cpp
    src/LZ77/LZType11.cpp
    src/LZ77/LZBase.cpp
    src/athena/FileInfo.cpp
    src/athena/Dir.cpp
    src/athena/DNAYaml.cpp

    include/athena/IStream.hpp
    include/athena/IStreamReader.hpp
    include/athena/IStreamWriter.hpp
    include/athena/Types.hpp
    include/athena/Utility.hpp
    include/athena/Global.hpp
    include/athena/FileReader.hpp
    include/athena/FileWriter.hpp
    include/athena/MemoryReader.hpp
    include/athena/MemoryWriter.hpp
    include/athena/VectorWriter.hpp
    include/athena/Checksums.hpp
    include/athena/ChecksumsLiterals.hpp
    include/athena/Compression.hpp
    include/athena/Socket.hpp
    include/LZ77/LZBase.hpp
    include/LZ77/LZLookupTable.hpp
    include/LZ77/LZType10.hpp
    include/LZ77/LZType11.hpp
    include/athena/FileInfo.hpp
    include/athena/Dir.hpp
    include/athena/DNA.hpp
    include/athena/DNAYaml.hpp
    include/athena/DNAOp.hpp
    include/athena/YAMLCommon.hpp
    include/athena/YAMLDocReader.hpp
    include/athena/YAMLDocWriter.hpp
    include/yaml.h
    include/utf8proc.h
)
if(WIN32)
    target_sources(athena-core PRIVATE
        src/win32_largefilewrapper.c
        include/win32_largefilewrapper.h
        src/athena/FileWriterWin32.cpp
        src/athena/FileReaderWin32.cpp
    )

    target_compile_definitions(athena-core PRIVATE
        -DNOMINMAX
        -DWIN32_LEAN_AND_MEAN
    )
else()
    target_sources(athena-core PRIVATE
        src/athena/FileWriterNix.cpp
        src/athena/FileReader.cpp
    )
    if(APPLE OR GEKKO OR NX OR ${CMAKE_SYSTEM_NAME} MATCHES ""FreeBSD"")
        target_sources(athena-core PRIVATE
            src/osx_largefilewrapper.c
            include/osx_largefilewrapper.h
        )

        if(GEKKO OR NX)
            target_sources(athena-core PRIVATE
                src/gekko_support.c
                include/gekko_support.h
            )
        endif()
    endif()
endif()

target_include_directories(athena-core PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
   $<BUILD_INTERFACE:${ZLIB_INCLUDE_DIR}>
)
target_link_libraries(athena-core PUBLIC
    athena-libyaml
    fmt
)

add_library(athena-sakura EXCLUDE_FROM_ALL
    src/athena/Sprite.cpp
    src/athena/SpriteFile.cpp
    src/athena/SpriteFileReader.cpp
    src/athena/SpriteFileWriter.cpp
    src/athena/SpriteFrame.cpp
    src/athena/SpritePart.cpp

    include/athena/SakuraGlobal.hpp
    include/athena/Sprite.hpp
    include/athena/SpriteFile.hpp
    include/athena/SpriteFileReader.hpp
    include/athena/SpriteFileWriter.hpp
    include/athena/SpriteFrame.hpp
    include/athena/SpritePart.hpp
)

add_library(athena-wiisave EXCLUDE_FROM_ALL
    src/athena/WiiBanner.cpp
    src/athena/WiiFile.cpp
    src/athena/WiiImage.cpp
    src/athena/WiiSave.cpp
    src/athena/WiiSaveReader.cpp
    src/athena/WiiSaveWriter.cpp
    src/bn.cpp
    src/ec.cpp
    src/md5.cpp
    src/sha1.cpp
    src/aes.cpp

    include/athena/WiiBanner.hpp
    include/athena/WiiFile.hpp
    include/athena/WiiImage.hpp
    include/athena/WiiSave.hpp
    include/athena/WiiSaveReader.hpp
    include/athena/WiiSaveWriter.hpp
    include/aes.hpp
    include/bn.hpp
    include/ec.hpp
    include/md5.h
    include/sha1.h
)
if(NOT MSVC AND NOT GEKKO AND NOT NX)
    set_source_files_properties(src/aes.cpp PROPERTIES COMPILE_FLAGS -maes)
endif()


add_library(athena-zelda EXCLUDE_FROM_ALL
    src/athena/ALTTPFile.cpp
    src/athena/ALTTPFileReader.cpp
    src/athena/ALTTPFileWriter.cpp
    src/athena/ALTTPQuest.cpp
    src/athena/MCFile.cpp
    src/athena/MCFileReader.cpp
    src/athena/MCFileWriter.cpp
    src/athena/MCSlot.cpp
    src/athena/SkywardSwordFile.cpp
    src/athena/SkywardSwordFileReader.cpp
    src/athena/SkywardSwordFileWriter.cpp
    src/athena/SkywardSwordQuest.cpp
    src/athena/ZQuestFile.cpp
    src/athena/ZQuestFileReader.cpp
    src/athena/ZQuestFileWriter.cpp

    include/athena/ALTTPEnums.hpp
    include/athena/ALTTPFile.hpp
    include/athena/ALTTPFileReader.hpp
    include/athena/ALTTPFileWriter.hpp
    include/athena/ALTTPQuest.hpp
    include/athena/ALTTPStructs.hpp
    include/athena/MCFile.hpp
    include/athena/MCFileReader.hpp
    include/athena/MCFileWriter.hpp
    include/athena/SkywardSwordFile.hpp
    include/athena/SkywardSwordFileReader.hpp
    include/athena/SkywardSwordFileWriter.hpp
    include/athena/SkywardSwordQuest.hpp
    include/athena/ZQuestFile.hpp
    include/athena/ZQuestFileReader.hpp
    include/athena/ZQuestFileWriter.hpp
)

# Icon
set(ATHENA_ICO ${CMAKE_CURRENT_SOURCE_DIR}/Athena.ico)

# Offer the user the choice of overriding the installation directories
set(INSTALL_LIB_DIR lib CACHE PATH ""Installation directory for libraries"")
set(INSTALL_INCLUDE_DIR include CACHE PATH ""Installation directory for header files"")
if(WIN32 AND NOT CYGWIN)
  set(INSTALL_CMAKE_DIR cmake)
else()
  set(INSTALL_CMAKE_DIR lib/cmake/athena)
endif()

# Make relative paths absolute (needed later on)
foreach(p LIB INCLUDE CMAKE)
  set(var INSTALL_${p}_DIR)
  if(NOT IS_ABSOLUTE ""${${var}}"")
    set(ABS_${var} ""${CMAKE_INSTALL_PREFIX}/${${var}}"")
  else()
    set(ABS_${var} ""${${var}}"")
  endif()
endforeach()

# Define installs
install(DIRECTORY include DESTINATION ${INSTALL_INCLUDE_DIR}/athena COMPONENT athena)
install(DIRECTORY extern/fmt/include DESTINATION ${INSTALL_INCLUDE_DIR}/fmt COMPONENT athena)
install(TARGETS athena-core fmt
        DESTINATION ${INSTALL_LIB_DIR} EXPORT AthenaTargets COMPONENT athena)
if(WIN32 AND NOT CYGWIN)
install(FILES Athena.ico DESTINATION ${INSTALL_LIB_DIR} COMPONENT athena)
elseif(UNIX)
configure_file(libAthena.pc.in libAthena.pc @ONLY)
configure_file(PKGBUILD.in ${CMAKE_CURRENT_SOURCE_DIR}/PKGBUILD @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libAthena.pc
        DESTINATION ${INSTALL_LIB_DIR}/pkgconfig COMPONENT athena)
endif()

##################
# Package Export #
##################

# Add all targets to the build-tree export set
export(TARGETS athena-core athena-libyaml fmt FILE ""${CMAKE_CURRENT_BINARY_DIR}/AthenaTargets.cmake"")

# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE athena)

# Create the AthenaConfig.cmake
# ... for the build tree
set(CONF_INCLUDE_DIR ""${PROJECT_SOURCE_DIR}/include/athena"")
set(CONF_ICON_DIR ""${PROJECT_SOURCE_DIR}/Athena.ico"")
configure_file(AthenaConfig.cmake.in ""${CMAKE_CURRENT_BINARY_DIR}/AthenaConfig.cmake"" @ONLY)
# ... for the install tree
file(RELATIVE_PATH REL_INCLUDE_DIR ""${ABS_INSTALL_CMAKE_DIR}"" ""${ABS_INSTALL_INCLUDE_DIR}"")
file(RELATIVE_PATH REL_ICON_DIR ""${ABS_INSTALL_CMAKE_DIR}"" ""${ABS_INSTALL_LIB_DIR}/Athena.ico"")
set(CONF_INCLUDE_DIR ""\${ATHENA_CMAKE_DIR}/${REL_INCLUDE_DIR}/athena"")
set(CONF_ICON_DIR ""\${ATHENA_CMAKE_DIR}/${REL_ICON_DIR}"")
configure_file(AthenaConfig.cmake.in ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/AthenaConfig.cmake"" @ONLY)
# ... for both
configure_file(AthenaConfigVersion.cmake.in ""${CMAKE_CURRENT_BINARY_DIR}/AthenaConfigVersion.cmake"" @ONLY)

# Install AthenaConfig.cmake
install(FILES
  ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/AthenaConfig.cmake""
  ""${CMAKE_CURRENT_BINARY_DIR}/AthenaConfigVersion.cmake""
  DESTINATION ${INSTALL_CMAKE_DIR} COMPONENT athena)

# Install the export set for use with the install-tree
install(EXPORT AthenaTargets DESTINATION ${INSTALL_CMAKE_DIR} COMPONENT athena)

################
# atdna import #
################

add_subdirectory(atdna)
# Test target
add_executable(atdna-test atdna/test.cpp atdna/test.hpp)
target_atdna(atdna-test atdna_test.cpp atdna/test.hpp)
if (CMAKE_SYSTEM_NAME STREQUAL ""Switch"")
    set_target_properties(atdna-test PROPERTIES SUFFIX "".elf"")
    target_link_libraries(atdna-test athena-core nx)
else()
    target_link_libraries(atdna-test athena-core)
endif()

#########
# CPack #
#########

include(InstallRequiredSystemLibraries)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Athena"")
set(CPACK_PACKAGE_VENDOR ""Antidote / Jackoalan"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_PACKAGE_VERSION_MAJOR ${ATHENA_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${ATHENA_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${ATHENA_PATCH_VERSION})
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""athena"")
if(WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY ""athena"")
    set(CPACK_PACKAGE_ICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\AthenaNSIS.bmp"")
    set(CPACK_NSIS_MODIFY_PATH ON)
    set(CPACK_NSIS_MUI_ICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\Athena.ico"")
    set(CPACK_NSIS_MUI_UNIICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\Athena.ico"")
    set(CPACK_NSIS_INSTALLED_ICON_NAME ""Uninstall.exe"")
    set(CPACK_NSIS_DISPLAY_NAME ""Athena"")
    set(CPACK_NSIS_URL_INFO_ABOUT ""http://libathena.github.io"")
    set(CPACK_NSIS_CONTACT ""antidote.crk@gmail.com"")
endif()
include(CPack)

",3.10,3.1
30527,orfeotoolbox,OTB,False,False,False,False,False,33,GLSL,2020-05-15 16:09:08+00:00,2015-07-17 15:56:48+00:00,249,31707,"#
# Copyright (C) 2005-2019 Centre National d'Etudes Spatiales (CNES)
#
# This file is part of Orfeo Toolbox
#
#     https://www.orfeo-toolbox.org/
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cmake_minimum_required(VERSION 3.10.2)

foreach(p
    CMP0072 # CMake 3.11
    CMP0078 # CMake 3.13
    CMP0086 # CMake 3.14
    )
  if(POLICY ${p})
    cmake_policy(SET ${p} NEW)
  endif()
endforeach()

project(OTB)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Check compiler versions
set(OTB_MIN_GNU_VER 5)
set(OTB_MIN_MSVC_VER 19)
set(OTB_MIN_Clang_VER 3.4)
if(DEFINED OTB_MIN_${CMAKE_CXX_COMPILER_ID}_VER)
  if(CMAKE_CXX_COMPILER_VERSION AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${OTB_MIN_${CMAKE_CXX_COMPILER_ID}_VER})
    message(STATUS ""WARNING: the version of your ${CMAKE_CXX_COMPILER_ID} ""
      ""compiler is not supported by Orfeo ToolBox (C++14 support might be ""
      ""incomplete). Please consider updating your compiler to version ""
      ""${OTB_MIN_${CMAKE_CXX_COMPILER_ID}_VER} or later."")
  endif()
endif()

include(CMakeDependentOption)
#
# use ExternalProject
include(ExternalProject)

#mantis: 1193
if(APPLE)
  # https://cmake.org/cmake/help/v3.10/variable/CMAKE_SYSTEM_FRAMEWORK_PATH.html
  # By default it contains the standard directories for the current system. It 
  # is not intended to be modified by the project, use CMAKE_FRAMEWORK_PATH 
  # for this.
  set(CMAKE_SYSTEM_FRAMEWORK_PATH """" CACHE PATH """" FORCE)
endif()

if( CMAKE_HOST_WIN32 )

  string( LENGTH ""${CMAKE_CURRENT_SOURCE_DIR}"" n )
  if( n GREATER 50 )
    message(
      FATAL_ERROR
      ""OTB source code directory path length is too long (${n} > 50).""
      ""Please move the OTB source code directory to a directory with a shorter path.""
      )
  endif()

  string( LENGTH ""${CMAKE_CURRENT_BINARY_DIR}"" n )
  if( n GREATER 50 )
    message(
      FATAL_ERROR
      ""OTB build directory path length is too long (${n} > 50).""
      ""Please set the OTB build directory to a directory with a shorter path.""
      )
  endif()

endif()
set(OTB_APPLICATIONS_NAME_LIST """" CACHE STRING ""List of all applications"" FORCE)
mark_as_advanced(OTB_APPLICATIONS_NAME_LIST)

set(OTB_CMAKE_DIR ${OTB_SOURCE_DIR}/CMake)
set(CMAKE_MODULE_PATH ${OTB_CMAKE_DIR} ${CMAKE_MODULE_PATH})
include(SourceStatus)
include(PreventInSourceBuilds)
include(PreventInBuildInstalls)
include(OTBModuleMacros)
include(OTBModuleRemote)
include(OTBModuleTest)
include( i18n_qt )

reset_qt_i18n_sources()

repository_status(${PROJECT_SOURCE_DIR} OTB_GIT_STATUS_MESSAGE)

# Find python stuff
# Version 3 is preferred before 2
set ( Python_ADDITIONAL_VERSIONS ""3;2"" )
set ( PythonInterp_FIND_REQUIRED ${OTB_WRAP_PYTHON} )
set ( PythonLibs_FIND_REQUIRED ${OTB_WRAP_PYTHON} )
find_package( PythonInterp )
if ( OTB_WRAP_PYTHON AND ( ""x${PYTHON_VERSION_MAJOR}"" STREQUAL ""x2"" ) )
    message (WARNING ""Python3 not found. There is no longer support of \
    wrapping in python2 in OTB, but it can still be used."")
endif()
# Now that we have a python version the addditional versions should only
# contain the version we have to get the corresponding libs
set (Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}"")
find_package ( PythonLibs )

#-----------------------------------------------------------------------------
# Configure the default OTB_DATA_ROOT for the location of OTB Data.
find_path(OTB_DATA_ROOT
  NAMES README-OTB-Data
  HINTS ${OTB_SOURCE_DIR}/Data
  )
#mark_as_advanced(OTB_DATA_ROOT)

if(OTB_DATA_ROOT)
  repository_status(${OTB_DATA_ROOT} OTB_DATA_GIT_STATUS_MESSAGE)
endif()

set(main_project_name ${_OTBModuleMacros_DEFAULT_LABEL})

#-----------------------------------------------------------------------------
# OTB version number.
set(OTB_VERSION_MAJOR ""7"")
set(OTB_VERSION_MINOR ""0"")
set(OTB_VERSION_PATCH ""0"")
set(OTB_VERSION_STRING ""${OTB_VERSION_MAJOR}.${OTB_VERSION_MINOR}.${OTB_VERSION_PATCH}"")

# Monteverdi version number (follows OTB)
set( Monteverdi_VERSION_MAJOR ${OTB_VERSION_MAJOR} )
set( Monteverdi_VERSION_MINOR ${OTB_VERSION_MINOR} )
set( Monteverdi_VERSION_PATCH ${OTB_VERSION_PATCH} )
set( Monteverdi_VERSION_SUFFIX """" )

set( Monteverdi_VERSION_STRING
  ""${Monteverdi_VERSION_MAJOR}.${Monteverdi_VERSION_MINOR}.${Monteverdi_VERSION_PATCH}${Monteverdi_VERSION_SUFFIX}""
  )

#-----------------------------------------------------------------------------
string(TIMESTAMP OTB_BUILD_TIMESTAMP)

if(NOT OTB_INSTALL_RUNTIME_DIR)
  set(OTB_INSTALL_RUNTIME_DIR bin)
endif()
if(NOT OTB_INSTALL_LIBRARY_DIR)
  set(OTB_INSTALL_LIBRARY_DIR lib)
endif()
if(NOT OTB_INSTALL_ARCHIVE_DIR)
  set(OTB_INSTALL_ARCHIVE_DIR lib)
endif()
if(NOT OTB_INSTALL_INCLUDE_DIR)
  set(OTB_INSTALL_INCLUDE_DIR include/OTB-${OTB_VERSION_MAJOR}.${OTB_VERSION_MINOR})
endif()
if(NOT OTB_INSTALL_APP_DIR)
  set(OTB_INSTALL_APP_DIR ""${OTB_INSTALL_LIBRARY_DIR}/otb/applications"")
endif()
if(NOT OTB_INSTALL_PYTHON_DIR)
  set(OTB_INSTALL_PYTHON_DIR ""${OTB_INSTALL_LIBRARY_DIR}/otb/python"")
endif()
if(NOT OTB_INSTALL_DATA_DIR)
  set(OTB_INSTALL_DATA_DIR ""share/otb"")
endif()

if(NOT OTB_INSTALL_DOC_DIR)
  set(OTB_INSTALL_DOC_DIR ""share/doc/otb"")
endif()
if(NOT OTB_INSTALL_PACKAGE_DIR)
  set(OTB_INSTALL_PACKAGE_DIR ""${OTB_INSTALL_LIBRARY_DIR}/cmake/OTB-${OTB_VERSION_MAJOR}.${OTB_VERSION_MINOR}"")
endif()

#convert path to native for reconfiguring otbcli.bat.in
file(TO_NATIVE_PATH ""${OTB_INSTALL_APP_DIR}"" OTB_INSTALL_APP_DIR_NATIVE)

#-----------------------------------------------------------------------------
# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Release' as none was specified."")
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()


#-----------------------------------------------------------------------------
# Enable running cppcheck for each module on its source and test directories.
option(OTB_CPPCHECK_TEST ""Run cppcheck for static code analysis"" OFF)
mark_as_advanced(OTB_CPPCHECK_TEST)

#-----------------------------------------------------------------------------
# Forbid downloading resources from the network during a build. This helps
# when building on systems without network connectivity to determine which
# resources much be obtained manually and made available to the build.
option(OTB_FORBID_DOWNLOADS ""Do not download source code or data from the network"" OFF)
mark_as_advanced(OTB_FORBID_DOWNLOADS)
macro(otb_download_attempt_check _name)
  if(OTB_FORBID_DOWNLOADS)
    message(SEND_ERROR ""Attempted to download ${_name} when OTB_FORBID_DOWNLOADS is ON"")
  endif()
endmacro()

# TODO : handle shared libs on windows
option(BUILD_SHARED_LIBS ""Build OTB with shared libraries."" ON)
mark_as_advanced(BUILD_SHARED_LIBS)

# The following variable can be deleted and replace by BUILD_SHARED_LIBS
# in otbConfigure.h.in
set(OTB_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})


if(MSVC)
  option(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ""Build OTB with shared libraries."" ON)
  mark_as_advanced(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)
  set(OTB_CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ${CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS})
else()
  set(OTB_CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS OFF)
endif()

# Although the OpenMP option looks like a 3rd party module, it is NOT. This option
# is handled with other compilation flags in file OTBSetStandardCompilerFlags.cmake
# before any module is parsed or enabled (see OTBModuleEnablement.cmake later on
# during configure). Trying to modify this option from any module is
# useless. Any 3rd party module dragging OpenMP should append
# the corresponding flags to CMAKE_CXX_FLAGS, CMAKE_EXE_LINKER_FLAGS, and so on.
option(OTB_USE_OPENMP ""Add openmp compiler and linker flags"" OFF)

option(OTB_USE_SSE_FLAGS ""Enable SIMD optimizations (hardware dependent)."" ON)
mark_as_advanced(OTB_USE_SSE_FLAGS)

include(OTBSetStandardCompilerFlags)
#---------------------------------------------------------------
# run try compiles and tests for OTB

# TODO check if we need this
#include(otbTestFriendTemplatedFunction)

set(CMAKE_C_FLAGS ""${OTB_REQUIRED_C_FLAGS} ${CMAKE_C_FLAGS}"")
set(CMAKE_CXX_FLAGS ""${OTB_REQUIRED_CXX_FLAGS} ${CMAKE_CXX_FLAGS}"")
set(CMAKE_EXE_LINKER_FLAGS ""${OTB_REQUIRED_LINK_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}"")
set(CMAKE_SHARED_LINKER_FLAGS ""${OTB_REQUIRED_LINK_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}"")
set(CMAKE_MODULE_LINKER_FLAGS ""${OTB_REQUIRED_LINK_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}"")

# TODO BUILD_TESTING is created by default by CTest.cmake, and is ON by default.
option(BUILD_TESTING ""Build the testing tree."" OFF)

include(CTest)

include( CppcheckTargets )

# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OTB_BINARY_DIR}/bin)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OTB_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OTB_BINARY_DIR}/lib)
endif()
set(OTB_MODULES_DIR ""${OTB_BINARY_DIR}/${OTB_INSTALL_PACKAGE_DIR}/Modules"")

#-----------------------------------------------------------------------------
# By default, OTB does not build the Examples that are illustrated in the Software Guide
option(BUILD_EXAMPLES ""Build the Examples directory."" OFF)

#----------------------------------------------------------------------------
set(OTB_TEST_OUTPUT_DIR ""${OTB_BINARY_DIR}/Testing/Temporary"")

option(OTB_DATA_USE_LARGEINPUT ""Use Large inputs images test."" OFF)
mark_as_advanced(OTB_DATA_USE_LARGEINPUT)
if(OTB_DATA_USE_LARGEINPUT)
  find_path(OTB_DATA_LARGEINPUT_ROOT
    NAMES OTBData.readme
    HINTS $ENV{OTB_DATA_LARGEINPUT_ROOT}
  )
  mark_as_advanced(OTB_DATA_LARGEINPUT_ROOT)
endif()

# Small macro to copy a file and rename it
macro(otb_copy_rename _input _output)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ""${_input}"" ""${_output}""
    RESULT_VARIABLE _err_code
    OUTPUT_QUIET
    ERROR_QUIET
    )
  if(_err_code)
    message(FATAL_ERROR ""Failed to copy file ${_input} to ${_output}"")
  endif()
endmacro()

#Generate cmake variables with a set of largeinput data used in tests
include(OTBManageLargeInputPaths)

set(BASELINE       ${OTB_DATA_ROOT}/Baseline/OTB/Images)
set(BASELINE_FILES ${OTB_DATA_ROOT}/Baseline/OTB/Files)
set(INPUTDATA      ${OTB_DATA_ROOT}/Input)
set(TEMP           ${OTB_BINARY_DIR}/Testing/Temporary)
set(OTBAPP_BASELINE       ${OTB_DATA_ROOT}/Baseline/OTB-Applications/Images)
set(OTBAPP_BASELINE_FILES ${OTB_DATA_ROOT}/Baseline/OTB-Applications/Files)

set(NOTOL      0.0)
set(EPSILON_1  0.1)
set(EPSILON_2  0.01)
set(EPSILON_3  0.001)
set(EPSILON_4  0.0001)
set(EPSILON_5  0.00001)
set(EPSILON_6  0.000001)
set(EPSILON_7  0.0000001)
set(EPSILON_8  0.00000001)
set(EPSILON_9  0.000000001)
set(EPSILON_10 0.0000000001)
set(EPSILON_11 0.00000000001)
set(EPSILON_12 0.000000000001)
set(EPSILON_13 0.0000000000001)
set(EPSILON_14 0.00000000000001)
set(EPSILON_15 0.000000000000001)

# Location of OTB Example Data.
set(OTB_EXAMPLE_DATA_ROOT ""${OTB_SOURCE_DIR}/Examples/Data"")

#----------------------------------------------------------------------
# Make sure remote modules are downloaded before sorting out the module
# dependencies.
add_subdirectory(Modules/Remote)

# Enable modules according to user inputs and the module dependency DAG.
include(OTBModuleEnablement)

#----------------------------------------------------------------------
# Generate OTBConfig.cmake for the build tree.
set(OTB_CONFIG_CODE ""
set(OTB_MODULES_DIR \""${OTB_MODULES_DIR}\"")"")
set(OTB_CONFIG_CMAKE_DIR ""${OTB_SOURCE_DIR}/CMake"")
set(OTB_USE_FILE ""${OTB_CONFIG_CMAKE_DIR}/UseOTB.cmake"")

if(OTB_WRAP_PYTHON)
set(OTB_CONFIG_CODE ""${OTB_CONFIG_CODE}
set(OTB_PYTHONPATH \""${OTB_BINARY_DIR}/${OTB_INSTALL_PYTHON_DIR}\"")"")
endif()

set(OTB_CONFIG_APPLICATION_PATH ""${OTB_BINARY_DIR}/${OTB_INSTALL_APP_DIR}"")
set(OTB_CONFIG_TARGETS_CONDITION "" AND NOT OTB_BINARY_DIR"")
set(OTB_CONFIG_TARGETS_FILE ""${OTB_BINARY_DIR}/OTBTargets.cmake"")
set(OTB_CONFIG_MODULE_API_FILE ""${OTB_SOURCE_DIR}/CMake/OTBModuleAPI.cmake"")
set(OTB_CONFIG_APPLI_MACROS_FILE ""${OTB_SOURCE_DIR}/CMake/OTBApplicationMacros.cmake"")
configure_file(CMake/OTBConfig.cmake.in OTBConfig.cmake @ONLY)

# Generate OTBConfig.cmake for the install tree.
set(OTB_CONFIG_CODE ""
# Compute the installation prefix from this OTBConfig.cmake file location.
get_filename_component(OTB_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)"")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE ""/"" "";"" _count ""${OTB_INSTALL_PACKAGE_DIR}"")
foreach(p ${_count})
  set(OTB_CONFIG_CODE ""${OTB_CONFIG_CODE}
get_filename_component(OTB_INSTALL_PREFIX \""\${OTB_INSTALL_PREFIX}\"" PATH)"")
endforeach()
set(OTB_CONFIG_CODE ""${OTB_CONFIG_CODE}
set(OTB_MODULES_DIR \""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}/Modules\"")"")
set(OTB_USE_FILE ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}/UseOTB.cmake"")
set(OTB_CONFIG_CMAKE_DIR ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}"")

if(OTB_WRAP_PYTHON)
set(OTB_CONFIG_CODE ""${OTB_CONFIG_CODE}
set(OTB_PYTHONPATH \""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PYTHON_DIR}\"")"")
endif()

set(OTB_CONFIG_APPLICATION_PATH ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_APP_DIR}"")
set(OTB_CONFIG_TARGETS_CONDITION """")
set(OTB_CONFIG_TARGETS_FILE ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}/OTBTargets.cmake"")
set(OTB_CONFIG_MODULE_API_FILE ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}/OTBModuleAPI.cmake"")
set(OTB_CONFIG_APPLI_MACROS_FILE ""\${OTB_INSTALL_PREFIX}/${OTB_INSTALL_PACKAGE_DIR}/OTBApplicationMacros.cmake"")

configure_file(CMake/OTBConfig.cmake.in CMakeFiles/OTBConfig.cmake @ONLY)

# TODO : port unscrustify scripts from ITK to OTB ?
# #----------------------------------------------------------------------------
# # Configure maintenance scripts
# configure_file(Utilities/Maintenance/doSingleKWStyleUncrustifyFix.sh.in
#   Utilities/Maintenance/doSingleKWStyleUncrustifyFix.sh @ONLY)

#-----------------------------------------------------------------------------
configure_file(CMake/OTBConfigVersion.cmake.in OTBConfigVersion.cmake @ONLY)

install(FILES ${OTB_BINARY_DIR}/CMakeFiles/OTBConfig.cmake
              ${OTB_BINARY_DIR}/OTBConfigVersion.cmake
              CMake/OTBApplicationMacros.cmake
              CMake/OTBModuleAPI.cmake
              CMake/OTBStandaloneModuleMacros.cmake
              CMake/OTBModuleExternal.cmake
              CMake/UseOTB.cmake
              CMake/GenerateExportHeaderCustom.cmake
              CMake/exportheader.cmake.in
              CMake/NamespaceHandler.cmake
  DESTINATION ${OTB_INSTALL_PACKAGE_DIR}
  COMPONENT Development)
get_property(OTBTargets_MODULES GLOBAL PROPERTY OTBTargets_MODULES)
if(OTBTargets_MODULES)
  install(EXPORT OTBTargets DESTINATION ${OTB_INSTALL_PACKAGE_DIR}
          COMPONENT Development)
else()
  set(CMAKE_CONFIGURABLE_FILE_CONTENT ""# No targets!"")
  configure_file(${CMAKE_ROOT}/Modules/CMakeConfigurableFile.in
                 ${OTB_BINARY_DIR}/CMakeFiles/OTBTargets.cmake @ONLY)
  install(FILES ${OTB_BINARY_DIR}/CMakeFiles/OTBTargets.cmake
          DESTINATION ${OTB_INSTALL_PACKAGE_DIR} COMPONENT Development)
endif()

# install FindXXX.cmake
file(GLOB OTB_FIND_PACKAGE_SCRIPTS CMake/Find*.cmake)
install(FILES ${OTB_FIND_PACKAGE_SCRIPTS} DESTINATION ${OTB_INSTALL_PACKAGE_DIR} COMPONENT Development)

# TODO : install release notes, copyright notice, ...
# install(FILES ""LICENSE"" ""NOTICE"" ""README.txt"" DESTINATION ${OTB_INSTALL_DOC_DIR} COMPONENT Runtime)
install(FILES ""LICENSE"" DESTINATION ${OTB_INSTALL_DOC_DIR})

# Configure and install VERSION file
configure_file(VERSION VERSION @ONLY)
install(FILES ${OTB_BINARY_DIR}/VERSION DESTINATION ${OTB_INSTALL_DOC_DIR})

install(DIRECTORY ${OTB_BINARY_DIR}/${OTB_INSTALL_DATA_DIR} DESTINATION share)

if(BUILD_TESTING)
  add_subdirectory(Utilities/InstallTest)
endif()
#-----------------------------------------------------------------------------
# The subdirectories added below this line should use only the public
# interface with find_package(ITK). Set ITK_DIR to use this ITK build.
set(OTB_DIR ""${OTB_BINARY_DIR}"")

if(BUILD_EXAMPLES)
  add_subdirectory(Examples)
endif()

#----------------------------------------------------------------------
# Provide an option for generating documentation.
add_subdirectory(Utilities/Doxygen)

add_subdirectory(Utilities/Completion)

option(BUILD_COOKBOOK ""Build the CookBook documentation."" OFF)

if (BUILD_COOKBOOK)
    add_subdirectory(Documentation/Cookbook)
endif()

#----------------------------------------------------------------------------
# Provide a target to generate the SuperBuild archive (only for Unix)
if(UNIX)
  add_custom_target(SuperBuild-archive
    COMMAND ./SuperbuildDownloadList.sh
      ${OTB_BINARY_DIR}/Download
      ${OTB_BINARY_DIR}
    WORKING_DIRECTORY ${OTB_SOURCE_DIR}/Utilities/Maintenance
    )
endif()

# TODO cleanup
# Create target to download data from the OTBData group. This must come after
# all tests have been added that reference the group, so we put it last.

#-----------------------------------------------------------------------------
# uninstall target
configure_file(
    ""${CMAKE_SOURCE_DIR}/CMake/cmake_uninstall.cmake.in""
    ""${CMAKE_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

add_custom_target(uninstall
  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_BINARY_DIR}/cmake_uninstall.cmake)

#-----------------------------------------------------------------------------
#macro to put a fixed space between key, value  in summary
macro(get_white_spaces var res)
  string(LENGTH ""${var}"" len)
  math(EXPR required_spaces ""23 - ${len}"")
  set(${res})
  foreach(loop_var RANGE ${required_spaces})
    set(${res} ""${${res}} "")
  endforeach()
endmacro()

message(""\n======================= Begin of OTB cmake summary =======================\n"")

if(OTB_GIT_STATUS_MESSAGE)
  message( ${OTB_GIT_STATUS_MESSAGE})
endif()
if(OTB_DATA_GIT_STATUS_MESSAGE)
  message( ${OTB_DATA_GIT_STATUS_MESSAGE})
endif()

set(option_list ${OTB_MODULE_ACTIVATION_OPTION_LIST})
list(SORT option_list)

foreach(otb_option
    CMAKE_SOURCE_DIR
    CMAKE_BINARY_DIR
    CMAKE_INSTALL_PREFIX
    CMAKE_COMMAND
    CMAKE_C_COMPILER
    CMAKE_CXX_COMPILER
    CMAKE_MAKE_PROGRAM
    CMAKE_GENERATOR
    CMAKE_BUILD_TYPE
    CMAKE_C_FLAGS
    CMAKE_CXX_FLAGS
    ${option_list}
    OTB_WRAP_PYTHON
    OTB_DATA_ROOT
    OTB_USE_OPENMP
    OTB_USE_SSE_FLAGS
    )
    get_white_spaces(""${otb_option}"" spaces)
  message(""${otb_option} ${spaces} = ${${otb_option}}"")
endforeach()

# Cleaning option_list as we are using a new one now
unset(option_list)

#To report non-optional dependencies inside summary
list(APPEND option_list Boost)
list(APPEND option_list GDAL)
list(APPEND option_list GEOTIFF)
list(APPEND option_list ITK)
list(APPEND option_list OSSIM)
list(APPEND option_list TINYXML)

#RK
#Q: Why these two guys here? we already have option_list
#A: Because cmake case sensitivity with variables.

if(OTB_USE_QT)
  list(APPEND option_list QT)
endif()
#sort again!
list(SORT option_list)

foreach(dep ${option_list})

  string(REGEX REPLACE ""OTB_USE_"" """" dep ${dep})

  unset(var1_key)
  unset(var2_key)
  unset(var3_key)

  unset(var1_val)
  unset(var2_val)
  unset(var3_val)

  set(var1_key ""${dep}"")
  if(${dep}_VERSION_STRING)
    set(var1_val ${${dep}_VERSION_STRING})
  endif()
  if(NOT var1_val)
    if(${dep}_VERSION)
      set(var1_val ${${dep}_VERSION})
    endif()
  endif()

  if(DEFINED ${dep}_DIR)
    set(var2_key  ${dep}_DIR)
    set(var2_val ${${dep}_DIR})
  else()
    if(${dep}_INCLUDE_DIR)
      set(var2_key  ${dep}_INCLUDE_DIR)
      set(var2_val ${${dep}_INCLUDE_DIR})
    elseif(${dep}_INCLUDE_DIRS)
      set(var2_key  ${dep}_INCLUDE_DIRS)
      set(var2_val ${${dep}_INCLUDE_DIRS})
    endif()
    if(${dep}_LIBRARY)
      set(var3_key  ${dep}_LIBRARY)
      set(var3_val ${${dep}_LIBRARY})
    elseif(${dep}_LIBRARIES)
      set(var3_key  ${dep}_LIBRARIES)
      set(var3_val ${${dep}_LIBRARIES})
    endif()
  endif()

  get_white_spaces(""${var1_key}"" insert_spaces1)
  get_white_spaces(""${var2_key}"" insert_spaces2)
  get_white_spaces(""${var3_key}"" insert_spaces3)

  message(""${var1_key} ${insert_spaces1} = ${var1_val}"")
  if(var2_val)
    message(""${var2_key} ${insert_spaces2} = ${var2_val}"")
  endif()
  if(var3_val)
    message(""${var3_key} ${insert_spaces3} = ${var3_val}"")
  endif()

endforeach()

message(""\nCMake ${CMAKE_VERSION} successfully configured ${PROJECT_NAME} using ${CMAKE_GENERATOR} generator\n"")

message(""======================= End of OTB cmake summary ======================="")

#don't need this one anymore. so unset it.
unset(option_list)

#----------------------------------------------------------------------------
# I18N
add_subdirectory( i18n )
",3.10.2,3.1
30672,peelonet,laskin,False,False,False,False,False,1,C++,2020-01-30 18:51:52+00:00,2014-05-28 10:43:32+00:00,1,202,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(laskin C CXX)

OPTION(
  LASKIN_ENABLE_CLI
  ""Whether CLI interpreter should be built or not.""
  ON
)

IF(LASKIN_ENABLE_CLI)
  ADD_SUBDIRECTORY(cli)
ENDIF()
",3.1,3.1
30717,slowmoVideo,slowmoVideo,False,False,False,False,False,21,C++,2020-05-16 08:02:22+00:00,2012-12-12 10:53:48+00:00,481,712,"cmake_minimum_required(VERSION 3.1)

project(slowmoVideo)
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR ""In-source builds are not allowed."")
endif()

set(CMAKE_CXX_STANDARD 14)

# Partly from https://doc.qt.io/qt-5/cmake-get-started.html#build-a-gui-executable
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
if(CMAKE_VERSION VERSION_LESS ""3.7.0"")
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif()


set(CMAKE_MODULE_PATH
  ${slowmoVideo_SOURCE_DIR}/cmake
)

# Make a version file containing the current version from git.
#
include(GetGitRevisionDescription)
git_describe(VERSION --dirty=-dev)

if (VERSION MATCHES ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))?(-[a-zA-Z0-9]+)?$"")
	string(REGEX REPLACE ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))?(-[a-zA-Z0-9]+)?$"" ""\\1"" PROJECT_VERSION_MAJOR ""${VERSION}"")
	string(REGEX REPLACE ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))?(-[a-zA-Z0-9]+)?$"" ""\\2"" PROJECT_VERSION_MINOR ""${VERSION}"")
	if (VERSION MATCHES ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))(-[a-zA-Z0-9]+)?$"")
		string(REGEX REPLACE ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))(-[a-zA-Z0-9]+)?$"" ""\\3"" PROJECT_VERSION_PATCH ""${VERSION}"")
	else ()
		set(PROJECT_VERSION_PATCH ""0"")
	endif ()
	if (VERSION MATCHES ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))(-[a-zA-Z0-9]+)$"")
		string(REGEX REPLACE ""^v([0-9]+)\\.([0-9]+)(\\.([0-9]+))(-[a-zA-Z0-9]+)$"" ""\\4"" PROJECT_VERSION_SHA1 ""${VERSION}"")
	else ()
		set(PROJECT_VERSION_SHA1 """")
	endif ()
else ()
	set(PROJECT_VERSION_MAJOR ""0"")
	set(PROJECT_VERSION_MINOR ""6"")
	set(PROJECT_VERSION_PATCH ""0"")
endif ()

set(PROJECT_VERSION ""${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"")
message(STATUS ""Building slowmoVideo ${PROJECT_VERSION}"")
configure_file(src/version.h.in version.h)

### Compiler options ###

if (APPLE)
# To compile with clang:
#set(CMAKE_CXX_COMPILER ""clang++"")
#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall --verbose"")
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall "")
#set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -O2 -mtune=corei7"")

# Set additional project information
set(COMPANY ""granjow"")
set(COPYRIGHT ""Copyright (c) 2011 Simon A. Eugster (Granjow). All rights reserved."")
set(IDENTIFIER ""net.granjow.slomoui"")

else()
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -g"")
endif()

if(CMAKE_TOOLCHAIN_FILE)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DMXE"")
  set(CMAKE_C_FLAGS ""${CMAKE_CXX_FLAGS} -DMXE"")
endif(CMAKE_TOOLCHAIN_FILE)


### CMake Configuration ###
option (ENABLE_TESTS ""Build the unit tests"" FALSE)
set(ADDITIONAL_LIBS """")
if(MSYS)
  message(STATUS ""MSYS system detected."")
  include(""${PROJECT_SOURCE_DIR}/cmake/MingwCrossEnv.cmake"")
endif(MSYS)


### Find packages ###


# Check if environment variable QTDIR is set.
# needed for Qt5
# Extra security for windows environment as well.
if (DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH $ENV{QTDIR} ${CMAKE_PREFIX_PATH})
endif ()

if (APPLE)
				set(DEST ""slowmoUI.app/Contents/Tools/bin"")
else()
				set(DEST ""bin"")
endif()

include(cmake/macros.cmake)

find_package(Qt5Core QUIET)
if (Qt5Core_FOUND)
	message(STATUS ""Using Qt5"")
	set(USE_QT TRUE)
	# go on with other packages
	find_package(Qt5 COMPONENTS Core Widgets Gui Xml Script REQUIRED)
	if (Qt5_POSITION_INDEPENDENT_CODE)
		set(CMAKE_POSITION_INDEPENDENT_CODE ON)
	endif (Qt5_POSITION_INDEPENDENT_CODE)
	#		 set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}
	#		    ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}"")

	include_directories(${Qt5Core_INCLUDES})
	include_directories(${Qt5Widgets_INCLUDES})
	include_directories(${Qt5Gui_INCLUDES})
	include_directories(${Qt5Xml_INCLUDES})
	include_directories(${Qt5Script_INCLUDES})

	# set up a mapping so that the Release configuration for the Qt imported target is
	# used in the COVERAGE CMake configuration.
	#set_target_properties(Qt5::Core PROPERTIES MAP_IMPORTED_CONFIG_COVERAGE ""DEBUG"")

endif (Qt5Core_FOUND)


message(""Qt libraries found at : ${Qt5Gui_LIBRARIES} /  ${QT_LIBRARIES}"" )

set (USE_QTKIT OFF CACHE BOOL ""Build with the QTKit encoder"")
set (USE_FFMPEG ON CACHE BOOL ""Build with the FFMPEG encoder"")
set (USE_DBUS OFF CACHE BOOL ""Build with the DBUS notification support"")

if(NOT MSYS)
	find_package(FFMPEG)
else(NOT MSYS)
    # Handled by MingwCrossEnv.cmake to avoid errors like:
    # libavformat.a(avisynth.o):avisynth.c:(.text+0x6b): undefined reference to `AVIStreamRelease@4'
endif(NOT MSYS)
# not here anymore
#include_directories(${FFMPEG_INCLUDE_DIR})
#include_directories(""/usr/include/ffmpeg/"")
#link_directories(${FFMPEG_LIBRARY_DIR})

if (APPLE AND USE_QTKIT)
	find_package(QTKIT)
	message(STATUS ""QTKIT find at ${QTKIT_LIBRARY} "")
	set(ADDITIONAL_LIBS ""-framework Cocoa -framework QTKit -framework QuartzCore -framework AppKit -framework OpenCL"")
endif()
	
# Find OpenCV, you may need to set OpenCV_DIR variable
# to the absolute path to the directory containing OpenCVConfig.cmake file
# via the command line or GUI
find_package(OpenCV REQUIRED)
# If the package has been found, several variables will
# be set, you can find the full list with descriptions
# in the OpenCVConfig.cmake file. 
# Print some message showing some of them
message(STATUS ""OpenCV library status:"")
message(STATUS "" version: ${OpenCV_VERSION}"")
message(STATUS "" libraries: ${OpenCV_LIBS}"")
message(STATUS "" include path: ${OpenCV_INCLUDE_DIRS}"")

if (${OpenCV_VERSION_MAJOR} EQUAL 3)
				set(HAS_OCV_VERSION_3 ON)
else()
				set(HAS_OCV_VERSION_3 OFF)
endif()

include_directories(${OPENCV_INCLUDE_DIRS})

# for config.h
include_directories(${CMAKE_CURRENT_BINARY_DIR})



### Set up libraries ###
if(MSYS)
    set(EXTERNAL_LIBS ${FFMPEG_LIBRARIES} ${QT_LIBRARIES} ${OpenCV_LIBS_OPT} ${OpenCV_EXTRA_LIBS_OPT} ${ADDITIONAL_LIBS})
else(MSYS)
    set(EXTERNAL_LIBS ${QT_LIBRARIES} ${OpenCV_LIBS} ${ADDITIONAL_LIBS} ${FFMPEG_LIBRARIES})
endif(MSYS)


### Information output
set(BUILD_SLOWMO ""NO"")
#if(QT_LIBRARIES AND FFMPEG_FOUND)
if(USE_QT AND FFMPEG_FOUND)
set(BUILD_SLOWMO ""YES"")
#endif(QT_LIBRARIES AND FFMPEG_FOUND)
endif()
if(NOT FFMPEG_SWSCALE_FOUND)
  if(CMAKE_TOOLCHAIN_FILE)

  else(CMAKE_TOOLCHAIN_FILE)
  set(BUILD_SLOWMO ""NO"")
  endif(CMAKE_TOOLCHAIN_FILE)
endif(NOT FFMPEG_SWSCALE_FOUND)


## Include projects to build ##

include_directories(src/tr)
add_subdirectory(src/lib)
add_subdirectory(src/lib/libsvflow)
add_subdirectory(src/libgui)
add_subdirectory(src/project)
add_subdirectory(src/slowmoCLI)
add_subdirectory(src/slowmoUI)
add_subdirectory(src/slowmoFlowEdit)
add_subdirectory(src/slowmoRenderer)
add_subdirectory(src/visualizeFlow)
if(ENABLE_TESTS)
  SET(QT_USE_QTTEST TRUE)
  ## add_subdirectory(srd/test)
  add_subdirectory(src/unittests)
endif(ENABLE_TESTS)

##### SV END #####






message(""==================slowmoVideo========================"")
message(""* (info) slowmoVideo installation goes to ${CMAKE_INSTALL_PREFIX}."")
message(""         (Can be adjusted with -DCMAKE_INSTALL_PREFIX=your_path. Default is ${SV_INST_DIR}.)"")
#if(NOT QT_LIBRARIES)
if (NOT USE_QT)
    message(""Qt5 libraries could not be found."")
#endif(NOT QT_LIBRARIES)
endif(NOT USE_QT)
if(NOT FFMPEG_FOUND)
    message(""x ffmpeg libraries could not be found."")
else(NOT FFMPEG_FOUND)
    message(""* (ok) ffmpeg found at ${FFMPEG_LIBRARY_DIR}"")
endif(NOT FFMPEG_FOUND)
if(NOT FFMPEG_SWSCALE_FOUND)
    message(""x libswscale could not be found."")
endif(NOT FFMPEG_SWSCALE_FOUND)
if(NOT OpenCV_VERSION)
    message(""x OpenCV could not be found."")
else(NOT OpenCV_VERSION)
    message(""* (ok) OpenCV ${OpenCV_VERSION} found at ${OpenCV_INCLUDE_DIRS}."")
endif(NOT OpenCV_VERSION)
message(""* slowmoVideo will be built:                ---${BUILD_SLOWMO}---"")
message(""=======================END==========================="")
message("""")


if(NOT BUILD_SLOWMO)
    message(FATAL_ERROR ""Cannot build slowmoVideo, please install the missing packages first."")
endif(NOT BUILD_SLOWMO)

configure_file(src/config.h.in config.h)
",3.1,3.1
30798,ndjonge,NeoLM,False,False,False,False,False,1,C++,2020-05-17 03:22:56+00:00,2017-07-14 12:02:11+00:00,1,642,"cmake_minimum_required(VERSION 3.10)

project(""mir_http_example"" VERSION 0.0.1 LANGUAGES CXX)

include_directories(""include"")

add_executable(${PROJECT_NAME} example/main.cpp)

set (CMAKE_CXX_STANDARD 11)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_EXTENSIONS OFF)


if(MSVC)
  if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
    string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
  else()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
  # Update if necessary
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++ -Wall -Wno-long-long -pedantic"")
endif()

if(MSVC)
	set(MSVC_VERSION 1900)
	set(ignoreMe ""${CMAKE_C_COMPILER}"")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

find_package(CURL REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(ZLIB REQUIRED)
find_path(ASIO_INCLUDE_DIR asio.hpp HINTS )

if(ASIO_INCLUDE_DIR STREQUAL ""ASIO_INCLUDE_DIR-NOTFOUND"")
    message(""Asio:"" ${ASIO_INCLUDE_DIR})
	add_definitions(ASIO_STANDALONE)
endif()

message(""Asio: ${ASIO_INCLUDE_DIR}"")

find_package(nlohmann_json CONFIG REQUIRED)
message(""Json: ${NLOHMANN_JSON_INCLUDE_DIR}"")	

include_directories(${ASIO_INCLUDE_DIR})
include_directories(SYSTEM ${OPENSSL_INCLUDE_DIR})
include_directories(SYSTEM ${ZLIB_INCLUDE_DIRS})
include_directories(${CURL_INCLUDE_DIR})

target_link_libraries( ${PROJECT_NAME} OpenSSL::SSL OpenSSL::Crypto)
target_link_libraries( ${PROJECT_NAME} ZLIB::ZLIB)
target_link_libraries( ${PROJECT_NAME} ${CURL_LIBRARIES} OpenSSL::SSL OpenSSL::Crypto ZLIB::ZLIB) 

if(WIN32)
  target_link_libraries( ${PROJECT_NAME} wsock32 ws2_32)
else()
    #add_definitions(-std=c++11 -Wreorder -g -fno-omit-frame-pointer) 
    add_definitions(-std=c++11 -Wreorder -g -fsanitize=undefined -fno-omit-frame-pointer) 
    #add_definitions(-std=c++11 -Wreorder -g -fsanitize=thread -fno-omit-frame-pointer) 
    #add_definitions(-std=c++11 -Wreorder -g -fsanitize=address -fno-omit-frame-pointer) 
    #target_link_libraries( ${PROJECT_NAME} pthread -fno-omit-frame-pointer) 
    target_link_libraries( ${PROJECT_NAME} pthread -fsanitize=undefined -fno-omit-frame-pointer) 
    #target_link_libraries( ${PROJECT_NAME} pthread -fsanitize=thread -fno-omit-frame-pointer) 
    #target_link_libraries( ${PROJECT_NAME} pthread -fsanitize=address -fno-omit-frame-pointer) 
endif()

",3.10,3.1
31085,cutelyst,cutelyst,False,False,False,False,False,13,C++,2020-05-15 15:39:41+00:00,2015-06-04 04:05:28+00:00,590,2066,"cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0048 NEW)

if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif()
if (POLICY CMP0063)
  cmake_policy(SET CMP0063 NEW)
endif()

project(cutelyst VERSION 2.12.0 LANGUAGES CXX)

include(GNUInstallDirs)

find_package(Qt5 5.6.0 REQUIRED COMPONENTS
    Core
    Network
    Sql
)

set(CUTELYST_API_LEVEL ""2"")

# CMakeLists for Cutelyst library
set(CMAKE_AUTOMOC ON)

# Include our cmake modules
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

# As moc files are generated in the binary dir, tell CMake
# to always look for includes there:
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Forbid in-tree building
if(${CMAKE_SOURCE_DIR} MATCHES ${CMAKE_BINARY_DIR})
      message(STATUS ""Please do an out-of-tree build:"")
      message(STATUS ""rm -f CMakeCache.txt && mkdir build && cd build; cmake .. && make"")
      message(FATAL_ERROR ""In-tree-build detected!"")
endif(${CMAKE_SOURCE_DIR} MATCHES ${CMAKE_BINARY_DIR})

if (WIN32)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  if(MSVC)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  endif()
endif ()

#
# Options
#
include(CMakeDependentOption)
option(BUILD_SHARED_LIBS ""Build in shared lib mode"" ON)
option(ENABLE_MAINTAINER_CFLAGS ""Enable maintainer CFlags"" OFF)
option(BUILD_TESTS ""Build the Cutelyst tests"" ${BUILD_ALL})
option(BUILD_EXAMPLES ""Build the Cutelyst examples"" ${BUILD_ALL})
option(BUILD_DOCS ""Add the make docs target to build the documentationn. Requires doxygen and dot"" ${BUILD_ALL})
cmake_dependent_option(BUILD_DOCS_QUIET ""Tell doxygen to be quiet while building the documentation."" OFF ""BUILD_DOCS"" OFF)
cmake_dependent_option(BUILD_DOCS_TIMESTAMP ""Tell doxygen to insert a build timestamp on every HTML page."" ON ""BUILD_DOCS"" OFF)

if (BUILD_TESTS)
  enable_testing()
endif()

#
# Plugin options
#
option(BUILD_ALL ""Build all available modules/plugins"" OFF)
option(PLUGIN_MEMCACHED ""Enables the memcached plugin"" ${BUILD_ALL})
cmake_dependent_option(PLUGIN_MEMCACHEDSESSIONSTORE ""Enables the memcached based session store"" ON ""PLUGIN_MEMCACHED"" OFF)
option(PLUGIN_STATICCOMPRESSED ""Enables the StaticCompressed plugin"" ${BUILD_ALL})
option(PLUGIN_CSRFPROTECTION ""Enables the CSRF protection plugin"" ${BUILD_ALL})
option(PLUGIN_VIEW_EMAIL ""Enables View::Email plugin"" ${BUILD_ALL})
option(PLUGIN_VIEW_GRANTLEE ""Enables View::Grantlee plugin"" ${BUILD_ALL})
option(PLUGIN_VIEW_CUTELEE ""Enables View::Cutelee plugin"" ${BUILD_ALL})
option(PLUGIN_VIEW_CLEARSILVER ""Enables View::ClearSilver plugin"" ${BUILD_ALL})
option(PLUGIN_UWSGI ""Enables uWSGI plugin"" ${BUILD_ALL})
option(PLUGIN_VALIDATOR_PWQUALITY ""Enables ValidatorPwQuality that requires libpwquality 1.2.2 or newer"" ${BUILD_ALL})

# NONE

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX
    ""/usr"" CACHE PATH ""cutelyst default install prefix"" FORCE)
endif()

#
# Configure files
#
set (PREFIXDIR ""${CMAKE_INSTALL_PREFIX}"")
set (CMAKECONFIG_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}/cmake/${LIBNAME}/"")
set (DATADIR ""${CMAKE_INSTALL_DATADIR}"")
set (PKGDATADIR ""${CMAKE_INSTALL_DATADIR}"")
set (LIBDIR ""${CMAKE_INSTALL_LIBDIR}"")
set (PKGLIBDIR ""${LIBDIR}/cutelyst"")
set (GETTEXT_PACKAGE ""cutelyst"")
set (LOCALE_DIR ""${DATADIR}/locale"")
set (VERSION ""${CUTELYST_VERSION}"")
set (BUILDDIR ""${CMAKE_BINARY_DIR}"")
set (CUTELYST_PLUGINS_DIR ""${CMAKE_INSTALL_FULL_LIBDIR}/cutelyst${PROJECT_VERSION_MAJOR}-plugins"" CACHE PATH ""Output directory for cutelyst plugins"")
message(STATUS ""CUTELYST_PLUGINS_DIR: ${CUTELYST_PLUGINS_DIR}"")
set (DOXYGEN_TIMESTAMP ""YES"" CACHE STRING ""Enables or disables the footer timestamp in API documentation. Allowed values: YES or NO"")
set (QHG_LOCATION ""qhelpgenerator"" CACHE FILEPATH ""Path to the qhelpgenerator executable"")
set (MANDIR ""${DATADIR}/man"" CACHE PATH ""Directory to install man pages"")
set (I18NDIR ""${CMAKE_INSTALL_FULL_DATADIR}/cutelyst${PROJECT_VERSION_MAJOR}/translations"" CACHE PATH ""Directory to install translations"")

add_definitions(""-DLOCALSTATEDIR=\""${LOCALSTATEDIR}\"""")

configure_file(config.h.in ${CMAKE_BINARY_DIR}/config.h)

#
# Custom C flags
#
if (ENABLE_MAINTAINER_CFLAGS)
    set (MAINTAINER_CFLAGS ""-Werror -Wall -Wcast-align -Wno-uninitialized -Wempty-body -Wformat-security -Wformat -Winit-self"")
    add_definitions(${MAINTAINER_CFLAGS}
        -DQT_DEPRECATED_WARNINGS
    )
endif ()

add_definitions(
    -DQT_NO_KEYWORDS
    -DQT_NO_CAST_TO_ASCII
    -DQT_NO_CAST_FROM_ASCII
    -DQT_STRICT_ITERATORS
    -DQT_NO_URL_CAST_FROM_STRING
    -DQT_NO_CAST_FROM_BYTEARRAY
    -DQT_USE_QSTRINGBUILDER
    -DQT_NO_SIGNALS_SLOTS_KEYWORDS
    -DQT_USE_FAST_OPERATOR_PLUS
    -DQT_DISABLE_DEPRECATED_BEFORE=0x050c00
)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

include_directories(
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/Cutelyst
    ${CMAKE_CURRENT_BINARY_DIR}
)

# cmake config files
configure_file(${CMAKE_MODULE_PATH}/cutelystqt5-config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/Cutelyst${PROJECT_VERSION_MAJOR}Qt5Config.cmake
    @ONLY
)
configure_file(${CMAKE_MODULE_PATH}/cutelystqt5-config-version.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/Cutelyst${PROJECT_VERSION_MAJOR}Qt5ConfigVersion.cmake
    @ONLY
)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Cutelyst${PROJECT_VERSION_MAJOR}Qt5Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/Cutelyst${PROJECT_VERSION_MAJOR}Qt5ConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Cutelyst${PROJECT_VERSION_MAJOR}Qt5/
)
install(EXPORT CutelystTargets
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Cutelyst${PROJECT_VERSION_MAJOR}Qt5/
    FILE Cutelyst${PROJECT_VERSION_MAJOR}Qt5Targets.cmake
    NAMESPACE Cutelyst::
    COMPONENT Devel
)


add_subdirectory(Cutelyst)

if(UNIX AND NOT (APPLE OR HAIKU))
    set(LINUX TRUE)
endif()

if (LINUX)
    add_subdirectory(EventLoopEPoll)
endif()

add_subdirectory(wsgi)

if (PLUGIN_UWSGI)
    find_program(UWSGI_EXEC_PATH NAMES uwsgi)
    set (UWSGI_EXEC_PATH ""uwsgi"" CACHE FILEPATH ""Path to the uWSGI executable"")
    find_program(UWSGI_BIN NAMES uwsgi)
    set (UWSGI_PLUGINS_DIR ""${CMAKE_INSTALL_PREFIX}/lib/uwsgi/plugins"" CACHE PATH ""Output directory for uWSGI plugin"")
    add_subdirectory(uwsgiEngine)
    message(STATUS ""PLUGIN: uWSGI, enabled."")
endif ()

add_subdirectory(cmd)

add_subdirectory(i18n)

add_subdirectory(dox)

if (BUILD_EXAMPLES)
  add_subdirectory(examples)
endif()

if (BUILD_TESTS)
  add_subdirectory(tests)
endif()

# Adds the make docs target. make docs will create three types of documentation.
# It will create html documentation linked to the online documentation of Qt
# and libstdc++, this will be created into the directory ""webdox"" in the CMAKE_BINARY_DIR.
# A second html documentation will be created that is linked to local available html
# documentation, this will be created into the directory ""htmldox"" in the CMAKE_BINARY_DIR.
# The third documentation is a QCH file, that will be created as cutelyst2.qch in the
# CMAKE_BINARY_DIR. The QCH documentation will only be created if qhelpgenerator can be found.
# Linkage to third party documentation will only be available if the appropriate tag files
# can be found.
if (BUILD_DOCS)
    find_package(Doxygen REQUIRED dot)

    # It seems that DOXYGEN_DOT_FOUND is not set correctly if it is required
    # as package component, at least not on cmake 3.10 and 3.16. CMake 3.9
    # introduced an improved FindDoxygen module, so lets set this manually
    # for CMake 3.9 or newer.
    if (CMAKE_VERSION VERSION_GREATER 3.8.2)
        set(DOXYGEN_DOT_FOUND YES)
    endif (CMAKE_VERSION VERSION_GREATER 3.8.2)

    if (DOXYGEN_FOUND AND DOXYGEN_DOT_FOUND)
        message (STATUS ""Doxygen and dot found. make docs target is available"")

        if (BUILD_DOCS_QUIET)
            set(DOXYGEN_QUIET ""YES"")
            set(DOXYGEN_WARNINGS ""NO"")
            set(DOXYGEN_WARN_IF_UNDOCUMENTED ""NO"")
            set(DOXYGEN_WARN_IF_DOC_ERROR ""NO"")
        else(BUILD_DOCS_QUIET)
            set(DOXYGEN_QUIET ""NO"")
            set(DOXYGEN_WARNINGS ""YES"")
            set(DOXYGEN_WARN_IF_UNDOCUMENTED ""YES"")
            set(DOXYGEN_WARN_IF_DOC_ERROR ""YES"")
        endif(BUILD_DOCS_QUIET)

        if (BUILD_DOCS_TIMESTAMP)
            set(DOXYGEN_HTML_TIMESTAMP ""YES"")
        else (BUILD_DOCS_TIMESTAMP)
            set(DOXYGEN_HTML_TIMESTAMP ""NO"")
        endif (BUILD_DOCS_TIMESTAMP)

        set(DOXYGEN_PROJECT_NUMBER ${PROJECT_VERSION})
        set(DOXYGEN_STRIP_FROM_PATH ${CMAKE_SOURCE_DIR})
        set(DOXYGEN_IMAGE_PATH ${CMAKE_SOURCE_DIR}/dox)
        set(DOXYGEN_GENERATE_TAGFILE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_VERSION_MAJOR}.tags)
        set(DOXYGEN_DOTFILE_DIRS ${CMAKE_SOURCE_DIR}/dox)

        # Available from http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/libstdc++.tag
        set (DOCS_STLTAGFILE ""${CMAKE_SOURCE_DIR}/scripts/libstdc++.tag"" CACHE FILEPATH ""Path to the doxygen tag file of the libstdc++"")
        set (DOCS_STLLOCALHTMLDIR ""${CMAKE_SOURCE_DIR}/scripts/libstdc++"" CACHE PATH ""Path to the directory containing the libstdc++ HTML doxygen documentation"")
        if (EXISTS DOCS_STLTAGFILE)
            list(APPEND ONLINETAGS ""${DOCS_STLTAGFILE}=http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/"")
            if (IS_DIRECTORY ""${DOCS_STLLOCALHTMLDIR}"")
                list(APPEND LOCALHTMLTAGS ""${DOCS_STLTAGFILE}=${DOCS_STLLOCALHTMLDIR}/"")
            endif (IS_DIRECTORY ""${DOCS_STLLOCALHTMLDIR}"")
            list(APPEND QCHTAGS ""${DOCS_STLTAGFILE}=qthelp://org.gnu.libstdcxx/libstdc++/"")
        endif (EXISTS DOCS_STLTAGFILE)

        find_program(QMAKE_EXE_PATH NAMES qmake-qt5 qmake5 qmake)
        if (QMAKE_EXE_PATH)
            execute_process(COMMAND ${QMAKE_EXE_PATH} -query QT_INSTALL_DOCS OUTPUT_VARIABLE QT_INSTALL_DOCS OUTPUT_STRIP_TRAILING_WHITESPACE)
            if (NOT IS_DIRECTORY ""${QT_INSTALL_DOCS}"")
                set(QT_INSTALL_DOCS ""/usr/share/qt5/doc"")
            endif (NOT IS_DIRECTORY ""${QT_INSTALL_DOCS}"")
        else(QMAKE_EXE_PATH)
            set(QT_INSTALL_DOCS ""/usr/share/qt5/doc"")
        endif(QMAKE_EXE_PATH)

        set(QT_ONLINE_DOCS_URL ""https://doc.qt.io/qt-5/"")
        set(QT_DOCS_COMPONENTS ""qtcore"" ""qtsql"" ""qtnetwork"")

        # Qt normally ships with documentation and tagfiles installed into QT_INSTALL_DOCS directory.
        # If your distribution does not provide the tag files for Qt, yout can get a complete one
        # from http://api.kde.org/kdereview-api/kdereview.tar.gz for example. If you have one single
        # big tag file for complete Qt, use DOCS_QTTAGFILE to set the path to it. If you have the
        # modularized tag files from Qt, use DOCS_QTDOCSDIR to set the path to the directory that contains
        # the tag files. The files will be searched there and in subdirectories named by the Qt component.
        set (DOCS_QTTAGFILE ""${CMAKE_SOURCE_DIR}/scripts/qttags.tag"" CACHE FILEPATH ""Path to a single complete doxygen tag file for Qt"")
        set (DOCS_QTDOCSDIR ${QT_INSTALL_DOCS} CACHE PATH ""Path to a directory containingthe Qt Documentation"")
        if (EXISTS DOCS_QTTAGFILE)
            list(APPEND ONLINETAGS ""${DOCS_QTTAGFILE}=${QT_ONLINE_DOCS_URL}"")
            foreach(_QTDOCCOMP ${QT_DOCS_COMPONENTS})
                if (IS_DIRECTORY ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}"")
                    list(APPEND LOCALHTMLTAGS ""${DOCS_QTTAGFILE}=${DOCS_QTDOCSDIR}/${_QTDOCCOMP}/"")
                endif (IS_DIRECTORY ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}"")
                if (EXISTS ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}.qch"")
                    list(APPEND QCHTAGS ""${DOCS_QTTAGFILE}=qthelp://org.qt-project.${_QTDOCCOMP}.${Qt5_VERSION_MAJOR}${Qt5_VERSION_MINOR}${Qt5_VERSION_PATCH}/${_QTDOCCOMP}/"")
                endif (EXISTS ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}.qch"")
            endforeach(_QTDOCCOMP ${QT_DOCS_COMPONENTS})
        else(EXISTS DOCS_QTTAGFILE)
            foreach(_QTDOCCOMP ${QT_DOCS_COMPONENTS})
                find_file(_QTDOCCOMPTAGS ""${_QTDOCCOMP}.tags"" PATHS ""${DOCS_QTDOCSDIR}"" PATH_SUFFIXES ""${_QTDOCCOMP}"" NO_DEFAULT_PATH)
                if (_QTDOCCOMPTAGS)
                    list(APPEND ONLINETAGS ""${_QTDOCCOMPTAGS}=${QT_ONLINE_DOCS_URL}"")
                    if (IS_DIRECTORY ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}"")
                        list(APPEND LOCALHTMLTAGS ""${_QTDOCCOMPTAGS}=${DOCS_QTDOCSDIR}/${_QTDOCCOMP}/"")
                    endif (IS_DIRECTORY ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}"")
                    if (EXISTS ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}.qch"")
                        list(APPEND QCHTAGS ""${_QTDOCCOMPTAGS}=qthelp://org.qt-project.${_QTDOCCOMP}.${Qt5_VERSION_MAJOR}${Qt5_VERSION_MINOR}${Qt5_VERSION_PATCH}/${_QTDOCCOMP}/"")
                    endif (EXISTS ""${DOCS_QTDOCSDIR}/${_QTDOCCOMP}.qch"")
                endif (_QTDOCCOMPTAGS)
                unset(_QTDOCCOMPTAGS CACHE)
            endforeach(_QTDOCCOMP ${QT_DOCS_COMPONENTS})
        endif(EXISTS DOCS_QTTAGFILE)

        string(REPLACE "";"" "" "" DOXYGEN_TAGFILES ""${ONLINETAGS}"")
        set(DOXYGEN_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
        set(DOXYGEN_HTML_OUTPUT ""webdox"")

        configure_file(
            ""${CMAKE_MODULE_PATH}/Doxyfile.in""
            ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.web""
            @ONLY)

        set(DOCS_ARGS ${DOXYGEN_EXECUTABLE} ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.web"")

        string(REPLACE "";"" "" "" DOXYGEN_TAGFILES ""${LOCALHTMLTAGS}"")
        set(DOXYGEN_HTML_OUTPUT ""htmldox"")

        configure_file(
            ""${CMAKE_MODULE_PATH}/Doxyfile.in""
            ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.html""
            @ONLY)

        set(DOCS_ARGS ${DOCS_ARGS} COMMAND ${DOXYGEN_EXECUTABLE} ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.html"")

        find_program(DOXYGEN_QHG_LOCATION NAMES qhelpgenerator-qt5 qhelpgenerator5 qhelpgenerator)
        if(DOXYGEN_QHG_LOCATION)
            message(STATUS ""qhelpgenerator found. QCH documentation will be created"")
            set(DOXYGEN_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/qtdocs"")
            string(REPLACE "";"" "" "" DOXYGEN_TAGFILES ""${QCHTAGS}"")
            set(DOXYGEN_GENERATE_QHP ""YES"")
            set(DOXYGEN_QHP_NAMESPACE ""org.cutelyst.${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}${PROJECT_VERSION_PATCH}"")
            set(DOXYGEN_QHP_VIRTUAL_FOLDER ""cutelyst${PROJECT_VERSION_MAJOR}"")
            set(DOXYGEN_QCH_FILE ""${CMAKE_BINARY_DIR}/cutelyst${PROJECT_VERSION_MAJOR}.qch"")

            configure_file(
                ""${CMAKE_MODULE_PATH}/Doxyfile.in""
                ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.qt""
                @ONLY)

            set(DOCS_ARGS ${DOCS_ARGS} COMMAND ${DOXYGEN_EXECUTABLE} ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.qt"")
        endif(DOXYGEN_QHG_LOCATION)

        add_custom_target(docs
            ${DOCS_ARGS}
        )
    endif()
endif()

include(CPackConfig)
",3.1,3.1
31141,aws,aws-sdk-cpp,False,False,False,False,False,70,C++,2020-05-15 19:15:58+00:00,2015-05-11 17:57:32+00:00,1027,2640,"#
# Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#  http://aws.amazon.com/apache2.0
#
# or in the ""license"" file accompanying this file. This file is distributed
# on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#

cmake_minimum_required (VERSION 3.1)
if(POLICY CMP0028)
    cmake_policy(SET CMP0028 NEW)
endif()
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()
if(POLICY CMP0054)
    cmake_policy(SET CMP0054 NEW)
endif()
if(POLICY CMP0056)
    cmake_policy(SET CMP0056 NEW)
endif()
if(POLICY CMP0057)
    cmake_policy(SET CMP0057 NEW) # support IN_LIST
endif()


# 3.0 or higher is strongly suggested; build settings (target_compile_options/etc...) sometimes do not get propagated properly under certain conditions prior to this version
# Making this a hard requirement is potentially disruptive to existing customers who aren't affected by the bad behavior though, so just warn for now
if(CMAKE_MAJOR_VERSION LESS 3)
    message(WARNING ""Building with CMake 3.0 or higher is strongly suggested; current version is ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}"")
endif()

get_filename_component(AWS_NATIVE_SDK_ROOT ""${CMAKE_CURRENT_SOURCE_DIR}"" ABSOLUTE)

# git is required for Android builds and building third-party dependencies
find_package(Git)

# Cmake invocation variables:
#   CUSTOM_MEMORY_MANAGEMENT - if set to ON, generates the sdk project files with custom memory management enabled, otherwise disables it
#   BUILD_ONLY - only build project identified by this variable, a semi-colon delimited list, if this is set we will build only the projects listed. Core will always be built as will its unit tests.
#                    Also if a high level client is specified then we will build its dependencies as well. If a project has tests, the tests will be built.
#   REGENERATE_CLIENTS - all clients being built on this run will be regenerated from the api definitions, this option involves some setup of python, java 8, jdk 1.8, and maven
#   ADD_CUSTOM_CLIENTS - semi-colon delimited list of format serviceName=<yourserviceName>,version=<theVersionNumber>;serviceName2=<yourOtherServiceName>,version=<versionNumber2>
#                          to use these arguments, you should add the api definition .normal.json file for your service to the api-description folder in the generator.
#   NDK_DIR - directory where the android NDK is installed; if not set, the location will be read from the ANDROID_NDK environment variable
#   CUSTOM_PLATFORM_DIR - directory where custom platform scripts, modules, and source resides
#   AWS_SDK_ADDITIONAL_LIBRARIES - names of additional libraries to link into aws-cpp-sdk-core in order to support unusual/unanticipated linking setups (static curl against static-something-other-than-openssl for example)

# TODO: convert boolean invocation variables to options
option(ENABLE_UNITY_BUILD ""If enabled, the SDK will be built using a single unified .cpp file for each service library.  Reduces the size of static library binaries on Windows and Linux"" OFF)
option(MINIMIZE_SIZE ""If enabled, the SDK will be built via a unity aggregation process that results in smaller static libraries; additionally, release binaries will favor size optimizations over speed"" OFF)
option(BUILD_SHARED_LIBS ""If enabled, all aws sdk libraries will be build as shared objects; otherwise all Aws libraries will be built as static objects"" ON)
option(FORCE_SHARED_CRT ""If enabled, will unconditionally link the standard libraries in dynamically, otherwise the standard library will be linked in based on the BUILD_SHARED_LIBS setting"" ON)
option(SIMPLE_INSTALL ""If enabled, removes all the additional indirection (platform/cpu/config) in the bin and lib directories on the install step"" ON)
option(NO_HTTP_CLIENT ""If enabled, no platform-default http client will be included in the library.  For the library to be used you will need to provide your own platform-specific implementation"" OFF)
option(NO_ENCRYPTION ""If enabled, no platform-default encryption will be included in the library.  For the library to be used you will need to provide your own platform-specific implementations"" OFF)
option(USE_IXML_HTTP_REQUEST_2 ""If enabled on windows, the com object IXmlHttpRequest2 will be used for the http stack"" OFF)
option(ENABLE_RTTI ""Flag to enable/disable rtti within the library"" ON)
option(ENABLE_TESTING ""Flag to enable/disable building unit and integration tests"" ON)
option(AUTORUN_UNIT_TESTS ""Flag to enable/disable automatically run unit tests after building"" ON)
option(ANDROID_BUILD_CURL ""When building for Android, should curl be built as well"" ON)
option(ANDROID_BUILD_OPENSSL ""When building for Android, should Openssl be built as well"" ON)
option(ANDROID_BUILD_ZLIB ""When building for Android, should Zlib be built as well"" ON)
option(FORCE_CURL ""Forces usage of the Curl client rather than the default OS-specific api"" OFF)
option(ENABLE_ADDRESS_SANITIZER ""Flags to enable/disable Address Sanitizer for gcc or clang"" OFF)
option(BYPASS_DEFAULT_PROXY ""Bypass the machine's default proxy settings when using IXmlHttpRequest2"" ON)
option(BUILD_DEPS ""Build third-party dependencies"" ON)
option(ENABLE_CURL_LOGGING ""If enabled, Curl's internal log will be piped to SDK's logger"" OFF)
option(ENABLE_HTTP_CLIENT_TESTING ""If enabled, corresponding http client test suites will be built and run"" OFF)
option(ENABLE_VIRTUAL_OPERATIONS ""This option usually works with REGENERATE_CLIENTS. \
                                If enabled when doing code generation, operation related functions in service clients will be marked as virtual. \
                                If disabled when doing code generation, virtual will not be added to operation functions and service client class will be marked as final. \
                                If disabled, SDK will add compiler flags '-ffunction-sections -fdata-sections' for gcc and clang when compiling. \
                                You can utilize this feature to work with your linker to reduce binary size of your application on Unix platforms when doing static linking in Release mode."" ON)

set(BUILD_ONLY """" CACHE STRING ""A semi-colon delimited list of the projects to build"")
set(CPP_STANDARD ""11"" CACHE STRING ""Flag to upgrade the C++ standard used. The default is 11. The minimum is 11."")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

#From https://stackoverflow.com/questions/18968979/how-to-get-colorized-output-with-cmake
if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset ""${Esc}[m"")
  set(ColourBold  ""${Esc}[1m"")
  set(Red         ""${Esc}[31m"")
  set(Green       ""${Esc}[32m"")
  set(Yellow      ""${Esc}[33m"")
  set(Blue        ""${Esc}[34m"")
  set(Magenta     ""${Esc}[35m"")
  set(Cyan        ""${Esc}[36m"")
  set(White       ""${Esc}[37m"")
  set(BoldRed     ""${Esc}[1;31m"")
  set(BoldGreen   ""${Esc}[1;32m"")
  set(BoldYellow  ""${Esc}[1;33m"")
  set(BoldBlue    ""${Esc}[1;34m"")
  set(BoldMagenta ""${Esc}[1;35m"")
  set(BoldCyan    ""${Esc}[1;36m"")
  set(BoldWhite   ""${Esc}[1;37m"")
endif()

# backwards compatibility with old command line params
if(""${STATIC_LINKING}"" STREQUAL ""1"")
    set(BUILD_SHARED_LIBS OFF)
endif()

if(MINIMIZE_SIZE)
    message(STATUS ""MINIMIZE_SIZE enabled"")
    set(ENABLE_UNITY_BUILD ON) # MINIMIZE_SIZE always implies UNITY_BUILD
endif()

set(PYTHON_CMD ""python"")

# CMAKE_MODULE_PATH is a CMAKE variable. It contains a list of paths
# which could be used to search CMAKE modules by ""include()"" or ""find_package()"", but the default value is empty.
# Add cmake dir to search list
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake"")

# include() will ""load and run"" cmake script
include(resolve_platform)
include(CMakePackageConfigHelpers)

if (REGENERATE_CLIENTS AND NOT ENABLE_VIRTUAL_OPERATIONS)
    if (PLATFORM_LINUX OR PLATFORM_APPLE)
        Message(STATUS ""${BoldYellow}You are regenerating service client's source code and is turning ENABLE_VIRTUAL_OPERATIONS off. If you are targeting smaller binary size, read description string of ENABLE_VIRTUAL_OPERATIONS.${ColourReset}"")
    endif()
endif()

# use response files to prevent command-line-too-big errors for large libraries like iam
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS 1)
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES 1)
set(CMAKE_CXX_RESPONSE_FILE_LINK_FLAG ""@"")

if(COMMAND apply_pre_project_platform_settings)
    apply_pre_project_platform_settings()
endif()

include(initialize_project_version)

if (BUILD_SHARED_LIBS OR FORCE_SHARED_CRT)
    set(STATIC_CRT OFF)
else()
    set(STATIC_CRT ON)
endif()

# Add Linker search paths to RPATH so as to fix the problem where some linkers can't find cross-compiled depenpent libraries in customer paths when linking executables.
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)

# build third-party targets
if (BUILD_DEPS)
    # If building third party dependencies, we will move them to the same directory where SDK has been installed during installation.
    # Therefore, we should set rpath to $ORIGIN to let SDK find these third party dependencies.
    # Otherwise, customers are responsible for handling the linkage to these libraries.
    set(CMAKE_INSTALL_RPATH ""$ORIGIN"")
    set(AWS_DEPS_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/.deps)
    if (NOT DEFINED AWS_DEPS_INSTALL_DIR)
        if (DEFINED CMAKE_INSTALL_PREFIX)
            set(AWS_DEPS_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} CACHE STRING ""A string describes the path where 3rd-party dependencies will be or have been installed"")
        else()
            set(AWS_DEPS_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/.deps/install CACHE STRING ""A string describes the path where 3rd-party dependencies will be or have been installed"")
        endif()
    endif()
    if (NOT CMAKE_GENERATOR_PLATFORM STREQUAL """")
        set(GEN_PLATFORM_ARG ""-A${CMAKE_GENERATOR_PLATFORM}"")
    endif()
    file(MAKE_DIRECTORY ${AWS_DEPS_BUILD_DIR})
    if(TARGET_ARCH STREQUAL ""ANDROID"")
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
            -DANDROID_ABI=${ANDROID_ABI}
            -DANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN}
            -DANDROID_STL=${ANDROID_STL}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DGIT_EXECUTABLE=${GIT_EXECUTABLE}
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    elseif(TARGET_ARCH STREQUAL ""APPLE"" AND DEFINED CMAKE_OSX_ARCHITECTURES AND NOT CMAKE_OSX_ARCHITECTURES STREQUAL """")
        message(""Cross compiling third-party dependencies for architecture ${CMAKE_OSX_ARCHITECTURES}"")
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}
            -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
            -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
            -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/bin
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    else()
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DSTATIC_CRT=${STATIC_CRT}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/bin
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    endif()

    if (NOT ${BUILD_3P_EXIT_CODE} EQUAL 0)
        message(FATAL_ERROR ""Failed to configure third-party libraries."")
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} --build ${AWS_DEPS_BUILD_DIR} --config ${CMAKE_BUILD_TYPE}
        RESULT_VARIABLE BUILD_3P_EXIT_CODE)

    if (NOT ${BUILD_3P_EXIT_CODE} EQUAL 0)
        message(FATAL_ERROR ""Failed to build third-party libraries."")
    endif()
    message(STATUS ""Third-party dependencies are installed at: ${AWS_DEPS_INSTALL_DIR}"")
    list(APPEND CMAKE_PREFIX_PATH ""${AWS_DEPS_INSTALL_DIR}"")
endif()
set(THIRD_PARTY_LIBS ""aws-c-event-stream;aws-checksums;aws-c-common"")

# build the sdk targets
project(""aws-cpp-sdk-all"" VERSION ""${PROJECT_VERSION}"" LANGUAGES CXX)

# http client, encryption, zlib
include(external_dependencies)

if(COMMAND apply_post_project_platform_settings)
    apply_post_project_platform_settings()
endif()

set(CMAKE_CONFIGURATION_TYPES
        Debug                   # Setup for easy debugging. No optimizations.
        DebugOpt                # An optimized version of Debug.
        Release                 # Fully optimized, no debugging information.
        RelWithDebInfo          # A debuggable version of Release.
        MinSizeRel              # Like Release, but optimized for memory rather than speed.
        )

include(compiler_settings)
# Instead of calling functions/macros inside included cmake scripts, we should call them in our main CMakeList.txt
set_msvc_flags()
set_msvc_warnings()

include(sdks)

include(utilities)

include(build_external)

if(ENABLE_BCRYPT_ENCRYPTION)
    set(CRYPTO_LIBS Bcrypt)
    set(CRYPTO_LIBS_ABSTRACT_NAME Bcrypt)
elseif(ENABLE_OPENSSL_ENCRYPTION)
    set(CRYPTO_LIBS ${OPENSSL_LIBRARIES} ${ZLIB_LIBRARIES})
    set(CRYPTO_LIBS_ABSTRACT_NAME crypto ssl z)
endif()

if(ENABLE_CURL_CLIENT)
    set(CLIENT_LIBS ${CURL_LIBRARIES})
    set(CLIENT_LIBS_ABSTRACT_NAME curl)
elseif(ENABLE_WINDOWS_CLIENT)
    if(USE_IXML_HTTP_REQUEST_2)
        set(CLIENT_LIBS msxml6 runtimeobject)
        set(CLIENT_LIBS_ABSTRACT_NAME msxml6 runtimeobject)
        if(BYPASS_DEFAULT_PROXY)
            list(APPEND CLIENT_LIBS winhttp)
            list(APPEND CLIENT_LIBS_ABSTRACT_NAME winhttp)
        endif()
    else()
        set(CLIENT_LIBS Wininet winhttp)
        set(CLIENT_LIBS_ABSTRACT_NAME Wininet winhttp)
    endif()
endif()

# setup user specified installation directory if any, regardless previous platform default settings
if (CMAKE_INSTALL_BINDIR)
    set(BINARY_DIRECTORY ""${CMAKE_INSTALL_BINDIR}"")
endif()

if (CMAKE_INSTALL_LIBDIR)
    set(LIBRARY_DIRECTORY ""${CMAKE_INSTALL_LIBDIR}"")
endif()

if (CMAKE_INSTALL_INCLUDEDIR)
    set(INCLUDE_DIRECTORY ""${CMAKE_INSTALL_INCLUDEDIR}"")
endif()

if(BUILD_SHARED_LIBS)
    set(ARCHIVE_DIRECTORY ""${BINARY_DIRECTORY}"")
else()
    set(ARCHIVE_DIRECTORY ""${LIBRARY_DIRECTORY}"")
endif()

if (ENABLE_ADDRESS_SANITIZER)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -g -fno-omit-frame-pointer"")
endif()

include(CheckCXXSymbolExists)

check_cxx_symbol_exists(""pathconf"" ""unistd.h"" HAS_PATHCONF)
if (HAS_PATHCONF)
    add_definitions(-DHAS_PATHCONF)
endif()

check_cxx_symbol_exists(""umask"" ""sys/stat.h"" HAS_UMASK)
if (HAS_UMASK)
    add_definitions(-DHAS_UMASK)
endif()

add_sdks()

# for user friendly cmake usage
include(setup_cmake_find_module)

# for generating make uninstall target
if (NOT TARGET uninstall)
    ADD_CUSTOM_TARGET(uninstall ""${CMAKE_COMMAND}"" -P ""${AWS_NATIVE_SDK_ROOT}/cmake/make_uninstall.cmake"")
else()
    ADD_CUSTOM_TARGET(uninstall-awssdk ""${CMAKE_COMMAND}"" -P ""${AWS_NATIVE_SDK_ROOT}/cmake/make_uninstall.cmake"")
endif()
",3.1,3.1
31557,gnustep,libobjc2,False,False,False,False,False,22,C,2020-05-02 18:37:22+00:00,2014-08-09 07:37:34+00:00,244,1273,"cmake_minimum_required(VERSION 3.1)

project(libobjc C ASM CXX)

INCLUDE (CheckCXXSourceCompiles)

set(CMAKE_C_FLAGS_DEBUG ""-O0 -Xclang -fno-inline ${CMAKE_C_FLAGS_DEBUG}"")
set(CMAKE_C_FLAGS_RELEASE ""-O3 ${CMAKE_C_FLAGS_RELEASE}"")
set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}"")

set(libobjc_VERSION 4.6)

set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Xclang -fexceptions -Xclang -fobjc-exceptions"")
if (MSVC)
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /EHas"")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /EHas"")
	set(CMAKE_C_FLAGS_DEBUG ""/Z7 ${CMAKE_C_FLAGS_DEBUG}"")
	set(CMAKE_SHARED_LINKER_FLAGS ""/DEBUG /INCREMENTAL:NO ${CMAKE_SHARED_LINKER_FLAGS}"")
	set(CMAKE_EXE_LINKER_FLAGS ""/DEBUG /INCREMENTAL:NO ${CMAKE_EXE_LINKER_FLAGS}"")
	set(objc_LINK_FLAGS ""/DEBUG /INCREMENTAL:NO ${objc_LINK_FLAGS}"")
endif()
# Build configuration
add_definitions( -DGNUSTEP -D__OBJC_RUNTIME_INTERNAL__=1)

set(CMAKE_CXX_STANDARD 14)

set(libobjc_ASM_SRCS 
	block_trampolines.S
	objc_msgSend.S)
set(libobjc_OBJCXX_SRCS 
	arc.mm
	)
set(libobjc_OBJC_SRCS 
	NSBlocks.m
	Protocol2.m
	associate.m
	blocks_runtime.m
	properties.m)
set(libobjc_C_SRCS 
	alias_table.c
	block_to_imp.c
	caps.c
	category_loader.c
	class_table.c
	dtable.c
	encoding2.c
	hooks.c
	ivar.c
	loader.c
	mutation.m
	protocol.c
	runtime.c
	sarray2.c
	selector_table.c
	sendmsg2.c
	)
set(libobjc_HDRS
	objc/Availability.h
	objc/Object.h
	objc/Protocol.h
	objc/blocks_private.h
	objc/blocks_runtime.h
	objc/capabilities.h
	objc/developer.h
	objc/encoding.h
	objc/hooks.h
	objc/message.h
	objc/objc-api.h
	objc/objc-arc.h
	objc/objc-auto.h
	objc/objc-class.h
	objc/objc-runtime.h
	objc/objc-visibility.h
	objc/objc.h
	objc/runtime-deprecated.h
	objc/runtime.h
	objc/slot.h)
set(libBlocksRuntime_COMPATIBILITY_HDRS
	Block.h
	Block_private.h
	)
# Windows does not use DWARF EH
if (WIN32)
	list(APPEND libobjc_CXX_SRCS eh_win32_msvc.cc)
else ()
	list(APPEND libobjc_C_SRCS eh_personality.c)
endif (WIN32)


# For release builds, we disable spamming the terminal with warnings about
# selector type mismatches
if (CMAKE_BUILD_TYPE STREQUAL Release)
	add_definitions(-DNO_SELECTOR_MISMATCH_WARNINGS)
else ()
	add_definitions(-DGC_DEBUG)
endif ()

set(TYPE_DEPENDENT_DISPATCH TRUE CACHE BOOL
	""Enable type-dependent dispatch"")
if (TYPE_DEPENDENT_DISPATCH)
	add_definitions(-DTYPE_DEPENDENT_DISPATCH)
endif ()
set(ENABLE_TRACING FALSE CACHE BOOL
	""Enable tracing support (slower, not recommended for deployment)"")
if (ENABLE_TRACING)
	add_definitions(-DWITH_TRACING=1)
endif (ENABLE_TRACING)

set(BOEHM_GC FALSE CACHE BOOL
	""Enable garbage collection support (not recommended)"")
if (BOEHM_GC)
	include(FindPkgConfig)
	pkg_check_modules(GC REQUIRED bdw-gc)
	link_directories(${GC_LIBRARY_DIRS})
	# If there's a threaded version, use it
	find_library(LIBGC gc-threaded PATHS ""${GC_LIBRARY_DIRS}"")
	if (LIBGC)
	else ()
		find_library(LIBGC gc PATHS GC_LIBRARY_DIRS)
	endif ()
	message(STATUS ""Using Boehm GC library: ${LIBGC}"")
	include_directories(GC_INCLUDE_DIRS)
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${GC_CFLAGS}"")
	set(CMAKE_OBJC_FLAGS ""${CMAKE_OBJC_FLAGS} -fobjc-gc"")
	set(objc_LINK_FLAGS ""${objc_LINK_FLAGS} ${GC_CFLAGS}"")
	add_definitions(-DENABLE_GC)
	list(APPEND libobjc_OBJC_SRCS gc_boehm.c)
else ()
	list(APPEND libobjc_OBJC_SRCS gc_none.c)
endif ()

if (WIN32)
	set(OLD_ABI_COMPAT_DEFAULT false)
else()
	set(OLD_ABI_COMPAT_DEFAULT true)
endif()

set(OLDABI_COMPAT ${OLD_ABI_COMPAT_DEFAULT} CACHE BOOL
	""Enable compatibility with GCC and old GNUstep ABIs"")

set(LEGACY_COMPAT FALSE CACHE BOOL
	""Enable legacy compatibility features"")

if (OLDABI_COMPAT)
	list(APPEND libobjc_C_SRCS legacy.c abi_version.c statics_loader.c)
	add_definitions(-DOLDABI_COMPAT=1)
endif()

if (LEGACY_COMPAT)
	list(APPEND libobjc_C_SRCS legacy_malloc.c)
else ()
	add_definitions(-DNO_LEGACY)
endif ()

set(LIBOBJC_NAME ""objc"" CACHE STRING 
	""Name of the Objective-C runtime library (e.g. objc2 for libobjc2)"")

set(INCLUDE_DIRECTORY ""objc"" CACHE STRING 
	""Subdirectory of the include path to install the headers."")


if (${CMAKE_C_COMPILER_ID} MATCHES Clang*)
	set(CMAKE_OBJC_FLAGS ""${CMAKE_OBJC_FLAGS} -Wno-deprecated-objc-isa-usage -Wno-objc-root-class"")
	if (${CMAKE_C_COMPILER_VERSION} VERSION_GREATER 3.1)
		set(CMAKE_OBJC_FLAGS ""${CMAKE_OBJC_FLAGS} -fobjc-runtime=gnustep-2.0"")
	endif ()
else (${CMAKE_C_COMPILER_ID} MATCHES Clang*)
	MESSAGE(""WARNING: It is strongly recommended that you compile with clang"")
endif (${CMAKE_C_COMPILER_ID} MATCHES Clang*)

if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL ""i686"")
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -march=i586"")
endif ()

set(INSTALL_TARGETS objc)

# On Windows, CMake adds /TC to the clang-cl flags and doesn't provide a way to
# tell it not to.  We fix this by telling clang do disregard that option,
# unconditionally (which means that it still defaults to C for .c files).
set(ENV{CCC_OVERRIDE_OPTIONS} ""x/TC x/Gm-"")

set_source_files_properties(
	${libobjc_ASM_SRCS}
	LANGUAGE C
	COMPILE_FLAGS ""${CMAKE_OBJC_FLAGS} -Xclang -x -Xclang assembler-with-cpp""
)

set_source_files_properties(
	${libobjc_CXX_SRCS}
	LANGUAGE CXX
	COMPILE_FLAGS ""${CMAKE_CXX_FLAGS}""
)

set_source_files_properties(
	${libobjc_OBJC_SRCS}
	COMPILE_FLAGS ""${CMAKE_OBJC_FLAGS} -Xclang -x -Xclang objective-c""
)

set_source_files_properties(
	${libobjc_OBJCXX_SRCS}
	COMPILE_FLAGS ""${CMAKE_OBJC_FLAGS} -Xclang -x -Xclang objective-c++""
)


#
# C++ Runtime interaction
#


function(test_cxx CXX_RUNTIME_NAME IS_STDLIB)
	set(CXX_RUNTIME_NAME_FULL ""${CMAKE_SHARED_LIBRARY_PREFIX}${CXX_RUNTIME_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}"")
	find_library(CXX_RUNTIME_LIB NAMES ${CXX_RUNTIME_NAME_FULL} ${CXX_RUNTIME_NAME})
	if (CXX_RUNTIME_LIB)
		message(STATUS ""Testing ${CXX_RUNTIME_LIB} as the C++ runtime library"")
		if (ANDROID)
			# pass on Android toolchain flags
			set(CXX_RUNTIME_FLAGS ""-DANDROID_NDK=${ANDROID_NDK}"" ""-DANDROID_ABI=${ANDROID_ABI}"" ""-DANDROID_ARM_MODE=${ANDROID_ARM_MODE}"" ""-DANDROID_ARM_NEON=${ANDROID_ARM_NEON}"" ""-DANDROID_LD=${ANDROID_LD}"" ""-DANDROID_PLATFORM=${ANDROID_PLATFORM}"" ""-DANDROID_STL=${ANDROID_STL}"")
		endif()
		try_compile(USERUNTIME 
			""${CMAKE_BINARY_DIR}/CMake""
			""${CMAKE_CURRENT_LIST_DIR}/CMake""
			test_cxx_runtime
			CMAKE_FLAGS ""-DCXX_RUNTIME=${CXX_RUNTIME_LIB}"" ${CXX_RUNTIME_FLAGS})
		if (USERUNTIME)
			set(CXX_RUNTIME ${CXX_RUNTIME_LIB} PARENT_SCOPE)
		else ()
			unset(CXX_RUNTIME_LIB CACHE)
		endif()
	endif()
endfunction()

set(ENABLE_OBJCXX true CACHE BOOL
	""Enable support for Objective-C++"")

set(CXXRT_IS_STDLIB false)

if(WIN32)
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(ASM_TARGET -m64)
	else()
		set(ASM_TARGET -m32)
	endif()
endif()


if (MSVC)
	set(ASSEMBLER ${CMAKE_ASM_COMPILER} CACHE STRING ""Assembler to use with Visual Studio (must be gcc / clang!)"")
	message(STATUS ""Using custom build commands to work around CMake bugs"")
	message(STATUS ""ASM compiler: ${ASSEMBLER}"")
	# CMake is completely broken when you try to build assembly files on Windows.
	add_custom_command(OUTPUT block_trampolines.obj
		COMMAND echo ${ASSEMBLER} ${ASM_TARGET} -c ""${CMAKE_SOURCE_DIR}/block_trampolines.S"" -o ""${CMAKE_BINARY_DIR}/block_trampolines.obj""
		COMMAND ${ASSEMBLER} ${ASM_TARGET} -c ""${CMAKE_SOURCE_DIR}/block_trampolines.S"" -o ""${CMAKE_BINARY_DIR}/block_trampolines.obj""
		MAIN_DEPENDENCY block_trampolines.S
	)
	add_custom_command(OUTPUT objc_msgSend.obj
		COMMAND echo ${ASSEMBLER} ${ASM_TARGET} -c ""${CMAKE_SOURCE_DIR}/objc_msgSend.S"" -o ""${CMAKE_BINARY_DIR}/objc_msgSend.obj""
		COMMAND ${ASSEMBLER} ${ASM_TARGET} -c ""${CMAKE_SOURCE_DIR}/objc_msgSend.S"" -o ""${CMAKE_BINARY_DIR}/objc_msgSend.obj""
		MAIN_DEPENDENCY objc_msgSend.S
		DEPENDS objc_msgSend.aarch64.S objc_msgSend.arm.S objc_msgSend.mips.S objc_msgSend.x86-32.S objc_msgSend.x86-64.S
	)
	set(libobjc_ASM_OBJS block_trampolines.obj objc_msgSend.obj)
endif()



if (ENABLE_OBJCXX)
	if (WIN32)
		message(STATUS ""Using MSVC-compatible exception model"")
	else ()
		message(STATUS ""Testing C++ interop"")
		# Try to find libcxxrt.so.  We can link to this to provide the C++ ABI
		# layer, if it exists.
		test_cxx(cxxrt false)
		# If it doesn't, then look for GNU libsupc++.so instead (either works,
		# they're ABI compatible).
		if (NOT CXX_RUNTIME)
			test_cxx(supc++ false)
		endif (NOT CXX_RUNTIME)
		if (NOT CXX_RUNTIME)
			test_cxx(c++abi false)
		endif (NOT CXX_RUNTIME)

		# If we have a C++ ABI library, then we can produce a single libobjc that
		# works for Objective-C and Objective-C++.  If not, then we need to provide
		# a separate libobjcxx.
		if (CXX_RUNTIME)
			message(STATUS ""Using ${CXX_RUNTIME} as the C++ runtime library"")
		else()
			message(STATUS ""Testing C++ standard library"")
			try_compile(USERUNTIME 
				""${CMAKE_BINARY_DIR}/CMake""
				""${CMAKE_CURRENT_LIST_DIR}/CMake""
				test_cxx_runtime)
			if (${USERUNTIME})
				message(STATUS ""libobjc will depend on C++ standard library"")
				set(CXXRT_IS_STDLIB true)
			else()
				message(STATUS ""No useable C++ runtime found"")
				set(ENABLE_OBJCXX false)
			endif()
		endif ()
		add_custom_command(OUTPUT eh_trampoline.s
			COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_FLAGS} -fPIC -S ""${CMAKE_SOURCE_DIR}/eh_trampoline.cc"" -o - -fexceptions -fno-inline | sed ""s/__gxx_personality_v0/test_eh_personality/g"" > ""${CMAKE_BINARY_DIR}/eh_trampoline.s""
			MAIN_DEPENDENCY eh_trampoline.cc)
		list(APPEND libobjc_ASM_SRCS eh_trampoline.s)
		list(APPEND libobjc_CXX_SRCS objcxx_eh.cc)
	endif ()
endif (ENABLE_OBJCXX)

add_library(objc SHARED ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_OBJCXX_SRCS} ${libobjc_ASM_OBJS})

if (ENABLE_OBJCXX)
	if (NOT CXXRT_IS_STDLIB)
		# We don't want to link the STL implementation (e.g. libstdc++) if
		# we have a separate C++ runtime.
		set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES """")
		target_link_libraries(objc ${CXX_RUNTIME})
	endif()
	list(APPEND libobjc_CXX_SRCS ${libobjcxx_CXX_SRCS})
	target_sources(objc PRIVATE ${libobjc_CXX_SRCS})
endif()


# Currently, we actually need pthreads, but we should use the platform's native
# threading implementation (we do for everything except thread-local storage)
set(CMAKE_THREAD_PREFER_PTHREAD)
include(FindThreads)
set(objc_LINK_FLAGS ""${objc_LINK_FLAGS} ${CMAKE_THREAD_LIBS_INIT}"")




set_target_properties(objc PROPERTIES
	LINKER_LANGUAGE C
	SOVERSION ${libobjc_VERSION}
	OUTPUT_NAME ${LIBOBJC_NAME}
	LINK_FLAGS ""${objc_LINK_FLAGS}""
	)

set_property(TARGET PROPERTY NO_SONAME true)

set(BUILD_STATIC_LIBOBJC false CACHE BOOL
	""Build the static version of libobjc"")
if (BUILD_STATIC_LIBOBJC)
	add_library(objc-static STATIC ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_CXX_SRCS})
	set_target_properties(objc-static PROPERTIES
		POSITION_INDEPENDENT_CODE true
		OUTPUT_NAME ${LIBOBJC_NAME})
	list(APPEND INSTALL_TARGETS objc-static)
endif ()

# Explicitly link libgc if we are compiling with gc support.
if (LIBGC)
	target_link_libraries(objc ${LIBGC})
endif ()

# Make weak symbols work on OS X
if (APPLE)
	set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS
		""${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -undefined dynamic_lookup"")
	set(CMAKE_C_LINK_FLAGS ""${CMAKE_C_LINK_FLAGS} -Wl,-undefined,dynamic_lookup"")
	set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} -Wl,-undefined,dynamic_lookup"")
endif ()

#
# Installation
#


find_program(GNUSTEP_CONFIG gnustep-config)
if (GNUSTEP_CONFIG)
	EXEC_PROGRAM(gnustep-config
		ARGS ""--installation-domain-for=libobjc2""
		OUTPUT_VARIABLE DEFAULT_INSTALL_TYPE)
endif ()


# If we have GNUstep environment variables, then default to installing in the
# GNUstep local environment.
if (DEFAULT_INSTALL_TYPE)
else ()
	set(DEFAULT_INSTALL_TYPE ""NONE"")
endif ()

if (NOT CMAKE_INSTALL_LIBDIR)
	set(CMAKE_INSTALL_LIBDIR lib)
endif ()


set(GNUSTEP_INSTALL_TYPE ${DEFAULT_INSTALL_TYPE} CACHE STRING
	""GNUstep installation type.  Options are NONE, SYSTEM, NETWORK or LOCAL."")
if (${GNUSTEP_INSTALL_TYPE} STREQUAL ""NONE"")
	SET(LIB_INSTALL_PATH ""${CMAKE_INSTALL_LIBDIR}"" CACHE STRING
		""Subdirectory of the root prefix where libraries are installed."")
	SET(HEADER_INSTALL_PATH ""include"")
	SET(PC_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
else ()
	EXEC_PROGRAM(gnustep-config
		ARGS ""--variable=GNUSTEP_${GNUSTEP_INSTALL_TYPE}_LIBRARIES""
		OUTPUT_VARIABLE LIB_INSTALL_PATH)
	EXEC_PROGRAM(gnustep-config
		ARGS ""--variable=GNUSTEP_${GNUSTEP_INSTALL_TYPE}_HEADERS""
		OUTPUT_VARIABLE HEADER_INSTALL_PATH)
	SET(PC_INSTALL_PREFIX ""/"")
endif ()
message(STATUS ""GNUstep install type set to ${GNUSTEP_INSTALL_TYPE}"")

install(TARGETS ${INSTALL_TARGETS}
	RUNTIME DESTINATION ${LIB_INSTALL_PATH}
	LIBRARY DESTINATION ${LIB_INSTALL_PATH}
	ARCHIVE DESTINATION ${LIB_INSTALL_PATH})
install(FILES ${libobjc_HDRS}
	DESTINATION ""${HEADER_INSTALL_PATH}/${INCLUDE_DIRECTORY}"")
install(FILES ${libBlocksRuntime_COMPATIBILITY_HDRS}
	DESTINATION ""${HEADER_INSTALL_PATH}"")

set(CPACK_GENERATOR TGZ CACHE STRING
	""Installer types to generate.  Sensible options include TGZ, RPM and DEB"")

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""GNUstep Objective-C Runtime"")
set(CPACK_PACKAGE_VENDOR ""The GNUstep Project"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/COPYING"")
set(CPACK_PACKAGE_VERSION_MAJOR ""2"")
set(CPACK_PACKAGE_VERSION_MINOR ""0"")
set(CPACK_PACKAGE_VERSION_PATCH ""0"")
set(CPACK_PACKAGE_CONTACT ""GNUstep Developer <gnustep-dev@gnu.org>"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}"")
if (UNIX)
	set(CPACK_STRIP_FILES true CACHE BOOL ""Strip libraries when packaging"")
endif ()
include (CPack)

# pkg-config descriptor

if (BOEHM_GC)
	set(PC_REQUIRES_PRIVATE_BOEHM_GC ""Requires.private: bdw-gc"")
endif ()
if (ENABLE_OBJCXX AND NOT CXXRT_IS_STDLIB)
	set(PC_LIBS_PRIVATE ""Libs.private: -l${CXX_RUNTIME}"")
endif()

configure_file(""libobjc.pc.in"" ""libobjc.pc"" @ONLY)
install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/libobjc.pc""
	DESTINATION ""${LIB_INSTALL_PATH}/pkgconfig""
)


# uninstall target
configure_file(
	""${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in""
	""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
	IMMEDIATE @ONLY)

add_custom_target(uninstall
	COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)


set(TESTS TRUE CACHE BOOL
	""Enable building the tests"")

if (TESTS)
	enable_testing()
	add_subdirectory(Test)
endif (TESTS)

CHECK_CXX_SOURCE_COMPILES(""
	#include <stdlib.h>
	extern \""C\"" {
	__attribute__((weak))
	void *__cxa_allocate_exception(size_t thrown_size) noexcept;
	}
	#include <exception>
	int main() { return 0; }"" CXA_ALLOCATE_EXCEPTION_NOEXCEPT_COMPILES)

if (CXA_ALLOCATE_EXCEPTION_NOEXCEPT_COMPILES)
	add_definitions(-DCXA_ALLOCATE_EXCEPTION_SPECIFIER=noexcept)
else ()
	add_definitions(-DCXA_ALLOCATE_EXCEPTION_SPECIFIER=)
endif ()
",3.1,3.1
31841,Dllieu,cpp_benchmark,False,False,False,False,False,1,C++,2019-11-29 14:02:18+00:00,2016-02-09 16:46:33+00:00,0,243,"cmake_minimum_required(VERSION 3.10)

project(experimental CXX)

include(cmake/compilation_flag.cmake)
include(cmake/external.cmake)
include(cmake/tools.cmake)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(PATH_LIB_EXPERIMENTAL ${CMAKE_CURRENT_SOURCE_DIR}/experimental/experimental)

enable_testing()
add_subdirectory(experimental/experimental)
add_subdirectory(experimental/tests)
add_subdirectory(experimental/benchmarks)
",3.10,3.1
31947,rock-multiagent,multiagent-fipa_acl,False,False,False,False,False,4,C++,2020-05-06 08:13:35+00:00,2014-12-17 14:22:50+00:00,2,642,"# CMakeLists.txt has to be located in the project folder and cmake has to be
# executed from 'project/build' with 'cmake ../'.

cmake_minimum_required(VERSION 3.1)
find_package(Rock)
rock_init(fipa_acl 1.4)
set(PROJECT_DESCRIPTION ""Library for FIPA Agent Communication Language and handling bit-efficient FIPA Messages"")
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_definitions(-DNUMERIC_DEPRECATE=1)
add_definitions(-g0)
add_definitions(-DTIXML_USE_STL=1)
add_definitions(-DBOOST_FILESYSTEM_VERSION=3)
add_definitions(-DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION)

find_package(Boost 1.44.0 REQUIRED filesystem unit_test_framework thread system)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})
if(NOT Boost_VERSION VERSION_LESS ""105400"")
    message(STATUS ""Enabling Phoenix V3 for boost spirit"")
    add_definitions(-DBOOST_SPIRIT_USE_PHOENIX_V3=1)
endif()

set(CMAKE_BUILD_TYPE RelWithDebInfo)
rock_standard_layout()

",3.1,3.1
32113,enz,pentobi,False,False,False,False,False,5,C++,2020-05-11 10:57:53+00:00,2017-02-02 14:35:43+00:00,25,6575,"cmake_minimum_required(VERSION 3.1.0)

project(Pentobi)
set(PENTOBI_VERSION 18.x)
set(PENTOBI_RELEASE_DATE 2020-05-11)

cmake_policy(SET CMP0043 NEW)
cmake_policy(SET CMP0071 NEW)

include(GNUInstallDirs)

option(PENTOBI_BUILD_GTP ""Build GTP interface"" OFF)
option(PENTOBI_BUILD_GUI ""Build GUI"" ON)
option(PENTOBI_BUILD_THUMBNAILER ""Build Gnome thumbnailer"" ${UNIX})
option(PENTOBI_BUILD_KDE_THUMBNAILER ""Build KDE thumbnailer"" OFF)
option(PENTOBI_OPEN_HELP_EXTERNALLY ""Force using web browser for displaying help"" OFF)
option(BUILD_TESTING ""Build tests"" OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/"")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""No build type selected, default to Release"")
  set(CMAKE_BUILD_TYPE Release CACHE STRING """" FORCE)
endif()

set(CMAKE_CXX_STANDARD 17)
if(CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_ID MATCHES ""Clang""))
  add_compile_options(-ffast-math -Wall -Wextra)
endif()

if(BUILD_TESTING)
  if(PENTOBI_BUILD_KDE_THUMBNAILER)
    configure_file(pentobi_kde_thumbnailer/CTestCustom.cmake
        ${CMAKE_BINARY_DIR} COPYONLY)
  endif()
  enable_testing()
endif()

if(UNIX)
  add_custom_target(dist
    COMMAND git archive --prefix=pentobi-${PENTOBI_VERSION}/ HEAD
    | xz -e > ${CMAKE_BINARY_DIR}/pentobi-${PENTOBI_VERSION}.tar.xz
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()

add_subdirectory(libboardgame_base)
add_subdirectory(libpentobi_base)
if(BUILD_TESTING)
    add_subdirectory(libboardgame_test)
endif()
if(PENTOBI_BUILD_GUI OR PENTOBI_BUILD_GTP)
    add_subdirectory(libboardgame_mcts)
    add_subdirectory(libpentobi_mcts)
endif()
if(PENTOBI_BUILD_GTP)
    add_subdirectory(libboardgame_gtp)
    add_subdirectory(libpentobi_gtp)
    add_subdirectory(pentobi_gtp)
    if(UNIX)
        add_subdirectory(twogtp)
    else()
        message(STATUS ""Not building twogtp, needs POSIX"")
    endif()
    add_subdirectory(learn_tool)
endif()
if(PENTOBI_BUILD_GUI)
    add_subdirectory(libpentobi_paint)
    add_subdirectory(pentobi)
    if(PENTOBI_BUILD_THUMBNAILER)
        add_subdirectory(libpentobi_thumbnail)
        add_subdirectory(pentobi_thumbnailer)
    endif()
endif()
if(PENTOBI_BUILD_KDE_THUMBNAILER)
    add_subdirectory(libpentobi_kde_thumbnailer)
    add_subdirectory(pentobi_kde_thumbnailer)
endif()

",3.1.0,3.1
32216,BelledonneCommunications,linphone,False,False,False,False,False,24,C,2020-05-15 16:40:58+00:00,2015-01-14 09:52:16+00:00,271,14578,"############################################################################
# CMakeLists.txt
# Copyright (C) 2010-2019  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)
project(linphone VERSION 4.4.0 LANGUAGES C CXX)


set(LINPHONE_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set(LINPHONE_MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(LINPHONE_MICRO_VERSION ${PROJECT_VERSION_PATCH})
set(LINPHONE_VERSION ${PROJECT_VERSION})
set(LINPHONE_SO_VERSION ""9"")

file(GLOB LINPHONE_PO_FILES RELATIVE ""${CMAKE_CURRENT_LIST_DIR}/po"" ""${CMAKE_CURRENT_LIST_DIR}/po/*.po"")
string(REGEX REPLACE ""([a-zA-Z_]+)\\.po"" ""\\1"" LINPHONE_ALL_LANGS_LIST ""${LINPHONE_PO_FILES}"")
string(REPLACE "";"" "" "" LINPHONE_ALL_LANGS ""${LINPHONE_ALL_LANGS_LIST}"")

include(CMakeDependentOption)
include(cmake/Tools.cmake)

option(ENABLE_SHARED ""Build shared library."" YES)
option(ENABLE_STATIC ""Build static library."" YES)

option(ENABLE_ADVANCED_IM ""Enable advanced instant messaging such as group chat."" YES)
option(ENABLE_CONSOLE_UI ""Turn on or off compilation of console interface."" YES)
option(ENABLE_CSHARP_WRAPPER ""Build the C# wrapper for Liblinphone."" OFF)
option(ENABLE_CXX_WRAPPER ""Build the C++ wrapper for Liblinphone."" YES)
option(ENABLE_DB_STORAGE ""Enable database storage."" YES)
option(ENABLE_SWIFT_WRAPPER ""Build the swift wrapper sources for Liblinphone."" OFF)
option(ENABLE_SWIFT_WRAPPER_COMPILATION ""Compile and package the swift wrapper framework from the built sources."" OFF)
option(ENABLE_JAZZY_DOC ""Build the jazzy doc for swift module of Liblinphone."" OFF)
option(ENABLE_DAEMON ""Enable the linphone daemon interface."" YES)
option(ENABLE_DATE ""Use build date in internal version number."" NO)
option(ENABLE_DEBUG_LOGS ""Turn on or off debug level logs."" NO)
option(ENABLE_DOC ""Enable API documentation generation."" NO)
option(ENABLE_LIME_X3DH ""Enable LIMEv2 and X3DH encryption protocol."" YES)
option(ENABLE_JAVA_WRAPPER ""Build the Java wrapper for Liblinphone."" OFF)
option(ENABLE_JAVADOC ""Add a target to generate documentation for Java API"" NO)
option(ENABLE_LDAP ""Enable LDAP support."" NO)
option(ENABLE_LIME ""Enable Instant Messaging Encryption."" YES)
option(ENABLE_RELATIVE_PREFIX ""Find resources relatively to the installation directory."" NO)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_TOOLS ""Turn on or off compilation of tools."" YES)
option(ENABLE_TUNNEL ""Turn on compilation of tunnel support."" NO)
option(ENABLE_TUTORIALS ""Enable compilation of tutorials."" YES)
option(ENABLE_UNIT_TESTS ""Enable compilation of unit tests."" YES)
option(ENABLE_UPDATE_CHECK ""Enable update check."" NO)
option(ENABLE_VCARD ""Turn on compilation of vcard4 support."" YES)
option(ENABLE_VIDEO ""Build with video support."" YES)
option(ENABLE_ASSETS ""Package sound assets."" YES)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)

cmake_dependent_option(ENABLE_NOTIFY ""Enable libnotify support."" YES ""ENABLE_GTK_UI;NOT APPLE"" NO)
cmake_dependent_option(ENABLE_ASSISTANT ""Turn on assistant compiling."" YES ""ENABLE_GTK_UI"" NO)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS NO)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE ""Release"")
endif()
if(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
	add_definitions(""-DDEBUG"")
endif()

if(ENABLE_STATIC)
	set(LINPHONE_LIBS_FOR_TOOLS linphone-static)
else()
	set(LINPHONE_LIBS_FOR_TOOLS linphone)
endif()
if(WIN32 AND NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
	list(APPEND LINPHONE_LIBS_FOR_TOOLS ""Ws2_32"" ""Iphlpapi"")
endif()

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(CheckSymbolExists)
include(CMakePushCheckState)
include(GNUInstallDirs)
include(CheckCXXCompilerFlag)

check_symbol_exists(getifaddrs ""sys/types.h;ifaddrs.h"" HAVE_GETIFADDRS)

if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

set(MSVC_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC"")
if(MSVC)
	list(APPEND CMAKE_REQUIRED_INCLUDES ""${MSVC_INCLUDE_DIR}"")
endif()

# find_package should be invoked here to check for libraries - however do NOT
# call include_directories here (see below)
if (ENABLE_VCARD)
	find_package(belcard CONFIG)
	if(NOT BELCARD_FOUND)
		message(WARNING ""Could not find the belcard library!"")
		set(ENABLE_VCARD OFF CACHE BOOL ""Enable vcard support."" FORCE)
	else()
		add_definitions(-DVCARD_ENABLED)
	endif()
endif()

find_package(BelleSIP CONFIG REQUIRED)
find_package(Mediastreamer2 CONFIG REQUIRED)
find_package(ortp CONFIG REQUIRED)
find_package(bctoolbox 0.0.3 CONFIG REQUIRED OPTIONAL_COMPONENTS tester)
find_package(belr CONFIG REQUIRED)

if(ENABLE_ADVANCED_IM)
	find_package(LibXsd REQUIRED)
	set(HAVE_ADVANCED_IM 1)
endif()

find_package(Sqlite3 REQUIRED)
find_package(XML2 REQUIRED)

if (ENABLE_DB_STORAGE)
	#APPLE platform does not use dlopen for soci backend
	if (APPLE OR ANDROID)
		find_package(Soci REQUIRED COMPONENTS sqlite3)
	else()
		find_package(Soci REQUIRED)
	endif()
	set(HAVE_DB_STORAGE 1)
endif()

find_package(ZLIB)

if(ENABLE_TUNNEL)
	if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
		include(""${EP_tunnel_CONFIG_DIR}/TunnelConfig.cmake"")
	else()
		find_package(Tunnel)
	endif()
	if(NOT TUNNEL_FOUND)
		message(WARNING ""Could not find the tunnel library!"")
		set(ENABLE_TUNNEL OFF CACHE BOOL ""Enable tunnel support."" FORCE)
	endif()
endif()
if(ENABLE_NOTIFY)
	find_package(Notify)
	if(NOTIFY_FOUND)
		set(HAVE_NOTIFY4 1)
	else()
		message(WARNING ""Could not find the notify library!"")
		set(ENABLE_NOTIFY OFF CACHE BOOL ""Enable libnotify support."" FORCE)
	endif()
endif()
if(ENABLE_ASSISTANT)
	set(BUILD_WIZARD 1)
endif()
if(ENABLE_LIME AND ENABLE_LIME_X3DH)
	message(WARNING ""Lime V1 and V2 cannot be used simultaneously!"")
endif()
if(ENABLE_LIME_X3DH)
	find_package(lime REQUIRED CONFIG)
	set(HAVE_LIME_X3DH TRUE)
endif()
if(ENABLE_LIME)
	#bzrtp is only required for LIME
	find_package(bzrtp REQUIRED CONFIG)
	set(HAVE_LIME 1)
endif()
if(ENABLE_CXX_WRAPPER OR ENABLE_CSHARP_WRAPPER OR ENABLE_JAVA_WRAPPER OR ENABLE_SWIFT_WRAPPER OR ENABLE_DOC)
	find_package(PythonInterp REQUIRED)
	check_python_module(pystache)
	check_python_module(six)
	if(ENABLE_DOC)
		check_python_module(sphinx)
		check_python_module(javasphinx)
		check_python_module(sphinx_csharp)
		#check_python_module(swift_domain)
	endif()
endif()

if(UNIX AND NOT APPLE)
	include(CheckIncludeFiles)
	check_include_files(libudev.h HAVE_LIBUDEV_H)
endif()

if(MSVC AND NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsPhone"" AND NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
	find_library(LIBGCC NAMES gcc)
	find_library(LIBMINGWEX NAMES mingwex)
endif()

if(NOT WIN32)
	find_package(Iconv QUIET)
endif()
if(ANDROID)
	find_package(CpuFeatures REQUIRED)
	if(CMAKE_ANDROID_NDK_VERSION VERSION_LESS 19)
		find_library(ANDROID_SUPPORT_LIBRARY NAMES support)
	endif()
endif()

set(LINPHONE_LDFLAGS ""${BELLESIP_LDFLAGS} ${MEDIASTREAMER2_LDFLAGS}"")

# include_directories must be called only UNDER THIS LINE in order to use our
# projects submodules first (we do NOT want to have system headers in first position)
include_directories(
	coreapi
	include
	src
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_BINARY_DIR}/coreapi/
)
set(LINPHONE_INCLUDE_DIRS
 	${BELLESIP_INCLUDE_DIRS}
 	${MEDIASTREAMER2_INCLUDE_DIRS}
 	${BCTOOLBOX_CORE_INCLUDE_DIRS}
 	${BELR_INCLUDE_DIRS}
)

if(ANDROID)
	include_directories(${CMAKE_CURRENT_BINARY_DIR}/java)
endif()
if(ENABLE_TUNNEL)
	list(APPEND LINPHONE_INCLUDE_DIRS ${TUNNEL_INCLUDE_DIRS})
endif()

list(APPEND LINPHONE_INCLUDE_DIRS ${XML2_INCLUDE_DIRS})
list(APPEND LINPHONE_INCLUDE_DIRS ${SQLITE3_INCLUDE_DIRS})

if(ZLIB_FOUND)
	list(APPEND LINPHONE_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})
	set(HAVE_ZLIB 1)
endif()
if(INTL_FOUND)
	set(HAVE_INTL 1)
	list(APPEND LINPHONE_INCLUDE_DIRS ${INTL_INCLUDE_DIRS})
endif()
if(MSVC)
	include_directories(${MSVC_INCLUDE_DIR})
endif()

set(LINPHONE_CPPFLAGS ${BELCARD_CPPFLAGS} ${BELLESIP_CPPFLAGS} ${MEDIASTREAMER2_CPPFLAGS} ${BCTOOLBOX_CPPFLAGS} ${BELR_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND LINPHONE_CPPFLAGS ""-DLINPHONE_STATIC"")
endif()
if(LINPHONE_CPPFLAGS)
	list(REMOVE_DUPLICATES LINPHONE_CPPFLAGS)
	add_definitions(${LINPHONE_CPPFLAGS})
endif()

if(ENABLE_DEBUG_LOGS)
	add_definitions(""-DDEBUG_LOGS"")
endif()

# Enable stdint.h limit macros on C++ files. (Windows only.)
if(MSVC)
	add_definitions(""-D__STDC_LIMIT_MACROS"")
endif()

set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
set(STRICT_OPTIONS_CXX )
set(STRICT_OPTIONS_OBJC )
if(MSVC)
	list(APPEND STRICT_OPTIONS_CPP ""/wd4995"") # Disable ""name was marked as #pragma deprecated"" warnings
	list(APPEND STRICT_OPTIONS_CPP ""/wd4996"") # Disable deprecated function warnings
	list(APPEND STRICT_OPTIONS_CPP ""/wd4800"") # Disable warning for cast from bool_t to bool
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""/WX"")
	endif()
else()
	list(APPEND STRICT_OPTIONS_CPP
		""-Wall""
		""-Wconversion""
		""-Werror=return-type""
		""-Winit-self""
		""-Wno-error=deprecated-declarations""
		""-Wpointer-arith""
		""-Wuninitialized""
		""-Wunused""
	)
	list(APPEND STRICT_OPTIONS_CXX
		""-Wnon-virtual-dtor""
		""-Woverloaded-virtual""
	)
	CHECK_CXX_COMPILER_FLAG(""-Wsuggest-override"" SUGGEST_OVERRIDE)
	if (SUGGEST_OVERRIDE)
		list(APPEND STRICT_OPTIONS_CXX ""-Wsuggest-override"" ""-Wno-error=suggest-override"" )
	endif ()
	list(APPEND STRICT_OPTIONS_C ""-Wstrict-prototypes"" ""-Werror=strict-prototypes"")
	if(CMAKE_C_COMPILER_ID STREQUAL ""GNU"")
		list(APPEND STRICT_OPTIONS_C ""-fno-inline-small-functions"")
	endif()
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Qunused-arguments"" ""-Wno-array-bounds"")
	endif()
	if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CXX ""-x c++"")
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_C ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-Wno-missing-field-initializers"" ""-fno-strict-aliasing"")
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-Wno-missing-field-initializers"" ""-fno-strict-aliasing"")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()

set(GETTEXT_PACKAGE ""liblinphone"")
if(ENABLE_RELATIVE_PREFIX)
	set(LINPHONE_DATA_DIR ""."")
else()
	set(LINPHONE_DATA_DIR ""${CMAKE_INSTALL_PREFIX}"")
endif()
set(LINPHONE_PLUGINS_DIR ""${LINPHONE_DATA_DIR}/${CMAKE_INSTALL_LIBDIR}/liblinphone/plugins"")

if(WIN32)
	set(LINPHONE_CONFIG_DIR ""Linphone"")
endif()

set(PACKAGE_LOCALE_DIR ""${LINPHONE_DATA_DIR}/${CMAKE_INSTALL_DATADIR}/locale"")
set(PACKAGE_DATA_DIR ""${LINPHONE_DATA_DIR}/${CMAKE_INSTALL_DATADIR}"")
set(PACKAGE_GRAMMAR_DIR ""${LINPHONE_DATA_DIR}/${CMAKE_INSTALL_DATADIR}/belr/grammars"")
set(PACKAGE_SOUND_DIR ""${LINPHONE_DATA_DIR}/${CMAKE_INSTALL_DATADIR}/sounds/linphone"")
set(PACKAGE_RING_DIR ""${PACKAGE_SOUND_DIR}/rings"")
set(PACKAGE_FREEDESKTOP_DIR ""${PACKAGE_DATA_DIR}/applications"")

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/config.h PROPERTIES GENERATED ON)
add_definitions(-DHAVE_CONFIG_H)


if(ENABLE_VIDEO)
	add_definitions(-DVIDEO_ENABLED)
endif()

if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
	set(EXPORT_TARGETS_NAME ""LinphoneBuilder"")
else()
	set(EXPORT_TARGETS_NAME ""Linphone"")
endif()

add_subdirectory(include)
add_subdirectory(java)
if(ENABLE_JAVA_WRAPPER)
	add_subdirectory(wrappers/java)
endif()
add_subdirectory(coreapi)
add_subdirectory(src)
add_subdirectory(share)
if(ENABLE_CONSOLE_UI)
	add_subdirectory(console)
endif()
if(ENABLE_DAEMON)
	add_subdirectory(daemon)
endif()
if(ENABLE_TOOLS)
	add_subdirectory(tools)
endif()
if(ENABLE_UNIT_TESTS)
	add_subdirectory(tester)
endif()
if(ENABLE_CXX_WRAPPER)
	add_subdirectory(wrappers/cpp)
endif()
if(ENABLE_CSHARP_WRAPPER)
	add_subdirectory(wrappers/csharp)
endif()
if(ENABLE_SWIFT_WRAPPER)
	add_subdirectory(wrappers/swift)
endif()

include(CMakePackageConfigHelpers)
set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_DATADIR}/Linphone/cmake"")

write_basic_package_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/LinphoneConfigVersion.cmake""
	VERSION ${LINPHONE_VERSION}
	COMPATIBILITY AnyNewerVersion
)
export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/LinphoneTargets.cmake""
)
configure_package_config_file(cmake/LinphoneConfig.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/LinphoneConfig.cmake""
	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
	NO_SET_AND_CHECK_MACRO
)

install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE LinphoneTargets.cmake
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/LinphoneConfig.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/LinphoneConfigVersion.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()
",3.1,3.1
32311,Axosoft,node-sentinel-file-watcher,False,False,False,False,False,43,C++,2020-04-28 20:22:36+00:00,2015-08-03 20:27:14+00:00,701,221,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
set (PROJECT_NAME ""NSFW"")
project (${PROJECT_NAME})

message (STATUS ""Running CMake version ${CMAKE_VERSION}"")

set (NSFW_INCLUDE_DIR ""${CMAKE_SOURCE_DIR}/include"")

add_subdirectory (src)
",3.1.0,3.1
32457,rncbc,qsynth,False,False,False,False,False,5,C++,2020-03-31 10:57:55+00:00,2015-09-22 14:25:58+00:00,26,698,"project(QSYNTH)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""Qsynth"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qsynth"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable system tray argument option.
option (CONFIG_SYSTEM_TRAY ""Enable system tray (default=yes)"" 1)

# Enable fluid_synth_get_channel_info function (DEPRECATED).
option (CONFIG_FLUID_CHANNEL_INFO ""Enable FluidSynth channel info support (DEPRECATED) (default=no)"" 0)
  
# Enable fluid_synth_set_midi_router function (DEPRECATED).
option (CONFIG_FLUID_MIDI_ROUTER ""Enable FluidSynth MIDI router support (DEPRECATED) (default=no)"" 0)

# Enable new_fluid_server function.
option (CONFIG_FLUID_SERVER ""Enable FluidSynth server (default=yes)"" 1)

# Enable unique/single instance.
option (CONFIG_XUNIQUE ""Enable unique/single instance (default=yes)"" 1)

# Enable gradient eye-candy.
option (CONFIG_GRADIENT ""Enable gradient eye-candy (default=yes)"" 1)

# Enable debugger stack-trace option (assumes --enable-debug).
option (CONFIG_STACKTRACE ""Enable debugger stack-trace (default=no)"" 0)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets)

if (CONFIG_XUNIQUE)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for libraries.
if (WIN32)
  check_function_exists (lroundf CONFIG_ROUND)
else ()
  find_library (MATH_LIBRARY m)
  # Check for round math function.
  if (MATH_LIBRARY)
    set (CMAKE_REQUIRED_LIBRARIES ""${MATH_LIBRARY};${CMAKE_REQUIRED_LIBRARIES}"")
    check_function_exists (lroundf CONFIG_ROUND)
  else ()
    message (FATAL_ERROR ""*** math library not found."")
  endif ()
endif ()


# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for FLUIDSYNTH library.
pkg_check_modules (FLUIDSYNTH REQUIRED fluidsynth)
if (FLUIDSYNTH_FOUND)
  set (CONFIG_FLUIDSYNTH 1)
  include_directories (${FLUIDSYNTH_INCLUDE_DIRS})
  link_directories (${FLUIDSYNTH_LIBRARY_DIRS})
# link_libraries (${FLUIDSYNTH_LIBRARIES})
  set (CMAKE_REQUIRED_LIBRARIES ""${FLUIDSYNTH_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  # Check for new_fluid_server function.
  if (CONFIG_FLUID_SERVER)
    check_function_exists (new_fluid_server CONFIG_FLUID_SERVER)
  endif ()
  # Check for fluid_synth_system_reset function.
  check_function_exists (fluid_synth_system_reset CONFIG_FLUID_SYSTEM_RESET)
  # Check for fluid_synth_set_bank_offset function.
  check_function_exists (fluid_synth_set_bank_offset CONFIG_FLUID_BANK_OFFSET)
  # Check for fluid_synth_get_channel_info function.
  if (CONFIG_FLUID_CHANNEL_INFO)
    check_function_exists (fluid_synth_get_channel_info CONFIG_FLUID_CHANNEL_INFO)
  endif()
  # Check for fluid_synth_set_midi_router function.
  if (CONFIG_FLUID_MIDI_ROUTER)
    check_function_exists (fluid_synth_set_midi_router CONFIG_FLUID_MIDI_ROUTER)
  endif()
  # Check for fluid_synth_unset_program function.
  check_function_exists (fluid_synth_unset_program CONFIG_FLUID_UNSET_PROGRAM)
  # Check for fluid_version_str function.
  check_function_exists (fluid_version_str CONFIG_FLUID_VERSION_STR)
  # Check for fluid_settings_dupstr function.
  check_function_exists (fluid_settings_dupstr CONFIG_FLUID_SETTINGS_DUPSTR)
  # Check for fluid_preset_get_banknum function.
  check_function_exists (fluid_preset_get_banknum CONFIG_FLUID_PRESET_GET_BANKNUM)
  # Check for fluid_preset_get_num function.
  check_function_exists (fluid_preset_get_num CONFIG_FLUID_PRESET_GET_NUM)
  # Check for fluid_preset_get_name function.
  check_function_exists (fluid_preset_get_name CONFIG_FLUID_PRESET_GET_NAME)
  # Check for fluid_preset_get_sfont function.
  check_function_exists (fluid_preset_get_sfont CONFIG_FLUID_PRESET_GET_SFONT)
  # Check for fluid_sfont_get_id function.
  check_function_exists (fluid_sfont_get_id CONFIG_FLUID_SFONT_GET_ID)
  # Check for fluid_sfont_get_name function.
  check_function_exists (fluid_sfont_get_name CONFIG_FLUID_SFONT_GET_NAME)
  # Check for fluid_sfont_iteration_start function.
  check_function_exists (fluid_sfont_iteration_start CONFIG_FLUID_SFONT_ITERATION_START)
  # Check for fluid_sfont_iteration_next function.
  check_function_exists (fluid_sfont_iteration_next CONFIG_FLUID_SFONT_ITERATION_NEXT)
  # Check for fluid_synth_get_chorus_speed function.
  check_function_exists (fluid_synth_get_chorus_speed CONFIG_FLUID_SYNTH_GET_CHORUS_SPEED)
  # Check for fluid_synth_get_chorus_depth function.
  check_function_exists (fluid_synth_get_chorus_depth CONFIG_FLUID_SYNTH_GET_CHORUS_DEPTH)
  # Check for FluidSynth API V2 (>= 2.0.0) specifics...
  if (CONFIG_FLUID_SFONT_ITERATION_START AND CONFIG_FLUID_SFONT_ITERATION_NEXT)
    # Check for fluid_settings_getnum_default function.
    check_function_exists (fluid_settings_getnum_default CONFIG_FLUID_SETTINGS_GETNUM_DEFAULT)
    # Check for fluid_settings_getint_default function.
    check_function_exists (fluid_settings_getint_default CONFIG_FLUID_SETTINGS_GETINT_DEFAULT)
    # Check for fluid_settings_getstr_default function.
    check_function_exists (fluid_settings_getstr_default CONFIG_FLUID_SETTINGS_GETSTR_DEFAULT)
    # Check for fluid_settings_foreach function.
    check_function_exists (fluid_settings_foreach CONFIG_FLUID_SETTINGS_FOREACH)
    # Check for fluid_settings_foreach_option function.
    check_function_exists (fluid_settings_foreach_option CONFIG_FLUID_SETTINGS_FOREACH_OPTION)
    # Check for new_fluid_server function.
    check_function_exists (new_fluid_server CONFIG_NEW_FLUID_SERVER)
  endif ()
else ()
  message (FATAL_ERROR ""*** FLUIDSYNTH library not found."")
  set (CONFIG_FLUIDSYNTH 0)
endif ()


add_subdirectory (src)

configure_file (qsynth.spec.in qsynth.spec IMMEDIATE @ONLY)

install (FILES qsynth.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qsynth.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qsynth.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  FluidSynth library support . . . . . . . . . . . ."" CONFIG_FLUIDSYNTH)
show_option (""  FluidSynth server support  . . . . . . . . . . . ."" CONFIG_FLUID_SERVER)
show_option (""  FluidSynth system reset support . .  . . . . . . ."" CONFIG_FLUID_SYSTEM_RESET)
show_option (""  FluidSynth bank offset support . . . . . . . . . ."" CONFIG_FLUID_BANK_OFFSET)
show_option (""  FluidSynth channel info support (DEPRECATED) . . ."" CONFIG_FLUID_CHANNEL_INFO)
show_option (""  FluidSynth MIDI router support  (DEPRECATED) . . ."" CONFIG_FLUID_MIDI_ROUTER)
show_option (""  FluidSynth unset program support . . . . . . . . ."" CONFIG_FLUID_UNSET_PROGRAM)
show_option (""  FluidSynth version string support  . . . . . . . ."" CONFIG_FLUID_VERSION_STR)
message     ("""")
show_option (""  System tray icon support . . . . . . . . . . . . ."" CONFIG_SYSTEM_TRAY)
message     ("""")
show_option (""  Unique/Single instance support . . . . . . . . . ."" CONFIG_XUNIQUE)
show_option (""  Gradient eye-candy . . . . . . . . . . . . . . . ."" CONFIG_GRADIENT)
show_option (""  Debugger stack-trace (gdb) . . . . . . . . . . . ."" CONFIG_STACKTRACE)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
32490,kdt3rd,gecko,False,False,False,False,False,2,C,2020-02-02 01:04:12+00:00,2014-08-24 03:30:27+00:00,13,1682,"# SPDX-License-Identifier: MIT
# Copyright contributors to the gecko project.

cmake_minimum_required(VERSION 3.10)

project(gecko
  VERSION 0.1.0
  DESCRIPTION ""Collection of tools for user interface and media processing""
  HOMEPAGE_URL ""https://github.com/kdt3rd/gecko""
  LANGUAGES C CXX ASM)

####
#### NB: Look at this file for all the relevant options that can be
####     set to control the enabled components of the build
####
include(cmake/GeckoSetup.cmake)
include(cmake/UtilityFunctions.cmake)

# generate a ""config"" library that will hold all the
# common link and includes
add_subdirectory(config)

# always build the libraries
add_subdirectory(libs)
# only build the applications if requested or this is the top-level
if(GECKO_EXTERN_BUILD_APPS OR CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
#  add_subdirectory(apps)
endif()

#######################################
# Set up main install / export
include(CMakePackageConfigHelpers)
write_basic_package_version_file(""${PROJECT_NAME}ConfigVersion.cmake""
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMajorVersion
)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)
install(EXPORT ${PROJECT_NAME}
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  FILE ${PROJECT_NAME}Config.cmake
  NAMESPACE ${PROJECT_NAME}::
  EXPORT_LINK_INTERFACE_LIBRARIES
)

#######################################
# Set up unit tests
include(CTest)
if(BUILD_TESTING AND (GECKO_EXTERN_BUILD_TESTS OR CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR))
  enable_testing()

  # we don't build the tests by default, and cmake
  # doesn't yet have a mechanism to add dependencies to
  # built-in targets (i.e. make test), so we have to do a
  # bit of extra work, make a custom target that all the
  # test binaries will mark themselves as dependents of
  # then we can also add run_tests and run_valgrind targets
  # to build everything and then run the tests
  add_custom_target(build_tests)
  add_custom_target(build_slow_tests)
  
  add_subdirectory(tests EXCLUDE_FROM_ALL)
  
  add_custom_target(run_tests
    COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --output-on-failure -E ""slow.*""
    VERBATIM
  )
  add_dependencies(run_tests build_tests)
  
  add_custom_target(run_slow_tests
    COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIG> -R ""slow.*""
    VERBATIM
  )
  add_dependencies(run_slow_tests build_tests)
  
  add_custom_target(run_all_tests
    COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIG>
    VERBATIM
  )
  add_dependencies(run_all_tests build_tests)
  
  add_custom_target(run_valgrind
    COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --force-new-ctest-process --test-action memcheck
    COMMAND cat ""${CMAKE_BINARY_DIR}/Testing/Temporary/MemoryChecker.*.log""
  )
  add_dependencies(run_valgrind build_tests)
endif()
",3.10,3.1
32514,codilime,veles,False,False,False,False,False,22,C++,2019-06-16 09:07:16+00:00,2017-01-12 06:57:48+00:00,690,637,"set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/"")

# HACK: An ugly hack to provide default compilation type.
if(DEFINED CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING ""Choose the type of
build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug
Release RelWithDebInfo MinSizeRel."")
else()
   set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build,
options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release
RelWithDebInfo MinSizeRel."")
endif()

if(APPLE)
  set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.10"" CACHE STRING ""Minimum macOS deployment version"")
endif()

project(VELES C CXX)
if(WIN32)
  if(CMAKE_SIZEOF_VOID_P EQUAL 4)
    message(FATAL_ERROR ""Windows 32-bit is not supported due to performance problems in msgpack"")
  endif()
  cmake_minimum_required(VERSION 3.10.0)
else()
  cmake_minimum_required(VERSION 3.1.0)
endif()

include(""cmake/googletest.cmake"")
include(""cmake/qt.cmake"")
include(""cmake/zlib.cmake"")
include(""cmake/msgpack.cmake"")
include(""cmake/cppgen.cmake"")
include(""cmake/server.cmake"")
include(""cmake/openssl.cmake"")

# Compiler flags
if(MINGW)
  # MinGW is not supported because of C++14 problems (and many others).
  message(FATAL_ERROR ""MinGW is not supported, use MSVC on Windows"")
endif()
set(CMAKE_CXX_STANDARD 14) # Use C++14
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
set(CMAKE_INSTALL_RPATH ""."")
if(${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")  # All warnings
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++14"")  # For clang-tidy
  set(ADDITIONAL_LINK_LIBRARIES ""pthread"")
endif()

# FreeBSD support
if(${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
  # Link BSD threading.
  list(APPEND ADDITIONAL_LINK_LIBRARIES ""thr"")
endif()

if(MSVC)
  # Uncomment this line to use instrumentation in Visual Studio.
  # set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /Profile"")

  # Set exception handling mode and linking mode.
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /EHsc "")
  # Build with multiple processes.
  # see: https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP "")
endif()
if(APPLE)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++14"")  # For clang-tidy
endif()

if(WIN32)
  set(WINDOWS_APPLICATION_OUT_DIRECTORY ""Veles UI"")
  # Overwrite default Debug/Release/RelWithDebInfo/MinSizeRel application directory.
  # We can't use CMAKE_RUNTIME_OUTPUT_DIRECTORY, because it appends config type to the path.
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${WINDOWS_APPLICATION_OUT_DIRECTORY})

  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${WINDOWS_APPLICATION_OUT_DIRECTORY})

  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${WINDOWS_APPLICATION_OUT_DIRECTORY})
endif()

# Sources
set(INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
set(SRC_DIR ${CMAKE_SOURCE_DIR}/src)
set(TEST_DIR ${CMAKE_SOURCE_DIR}/test)

include_directories(${INCLUDE_DIR})

qt5_add_resources(VISUALIZATION_SHADERS ${SRC_DIR}/visualization/shaders/shaders.qrc)

set(MSGPACK_CPP_FWD_HEADER ""${CMAKE_CURRENT_BINARY_DIR}/fwd_models.h"")
set(MSGPACK_CPP_HEADER ""${CMAKE_CURRENT_BINARY_DIR}/models.h"")
set(MSGPACK_CPP_SOURCE ""${CMAKE_CURRENT_BINARY_DIR}/models.cc"")
set(PYTHON_DIR ${CMAKE_SOURCE_DIR}/python)

add_custom_command(OUTPUT ${MSGPACK_CPP_HEADER} ${MSGPACK_CPP_SOURCE} ${MSGPACK_CPP_FWD_HEADER}
    COMMAND ${PYEXE} -m veles.cpp.generate ${CMAKE_CURRENT_BINARY_DIR}
        veles.data.repack
        veles.proto.node
        veles.proto.check
        veles.proto.chunk
        veles.proto.connection
        veles.proto.operation
        veles.proto.messages
        veles.proto.msgpackwrap
        veles.tests.schema.cpp_test_models
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/python
    COMMENT ""Generating msgpack C++ code from Python""
    DEPENDS cpp_python_gen
        ${PYTHON_DIR}/veles/cpp/generate.py
        ${PYTHON_DIR}/veles/data/repack.py
        ${PYTHON_DIR}/veles/proto/check.py
        ${PYTHON_DIR}/veles/proto/chunk.py
        ${PYTHON_DIR}/veles/proto/connection.py
        ${PYTHON_DIR}/veles/proto/exceptions.py
        ${PYTHON_DIR}/veles/proto/messages.py
        ${PYTHON_DIR}/veles/proto/msgpackwrap.py
        ${PYTHON_DIR}/veles/proto/operation.py
        ${PYTHON_DIR}/veles/proto/node.py
        ${PYTHON_DIR}/veles/schema/model.py
        ${PYTHON_DIR}/veles/schema/enumeration.py
        ${PYTHON_DIR}/veles/schema/fields.py
        ${PYTHON_DIR}/veles/tests/schema/cpp_test_models.py
    VERBATIM
)

file(GLOB KAITAI_HEADERS ""${INCLUDE_DIR}/kaitai/*.h"")
file(GLOB KAITAI_SOURCES ""${SRC_DIR}/kaitai/*.cc"")

# Resources
qt5_add_resources(RESOURCES resources/veles.qrc)
qt5_wrap_ui(FORMS
    ${SRC_DIR}/ui/dialogs/connectiondialog.ui
    ${SRC_DIR}/ui/connectionnotificationwidget.ui
    ${SRC_DIR}/ui/dialogs/createchunkdialog.ui
    ${SRC_DIR}/ui/databaseinfo.ui
    ${SRC_DIR}/ui/dialogs/gotoaddressdialog.ui
    ${SRC_DIR}/ui/logwidget.ui
    ${SRC_DIR}/ui/dialogs/optionsdialog.ui
    ${SRC_DIR}/ui/dialogs/searchdialog.ui
    ${SRC_DIR}/ui/shortcutselection.ui
    ${SRC_DIR}/ui/shortcutssettings.ui
    ${SRC_DIR}/visualization/selectrangedialog.ui
    ${SRC_DIR}/visualization/samplingmethoddialog.ui
)

if(WIN32)
  set(ICONS ${CMAKE_SOURCE_DIR}/resources/icons/veles.rc)
endif()

if(APPLE)
  set(ICONS ${CMAKE_SOURCE_DIR}/resources/icons/veles.icns)
  set(MACOSX_BUNDLE_ICON_FILE veles.icns)
  set_source_files_properties(${ICONS} PROPERTIES
      MACOSX_PACKAGE_LOCATION Resources)
endif()

if(WIN32 AND NOT ""${CMAKE_BUILD_TYPE}"" STREQUAL ""Debug"")
  # Don't create console window on non-debug builds.
  set(GUI_TYPE WIN32)
endif()

add_library(veles_base
    ${INCLUDE_DIR}/client/dbif.h
    ${INCLUDE_DIR}/client/networkclient.h
    ${INCLUDE_DIR}/client/node.h
    ${INCLUDE_DIR}/client/nodetree.h
    ${INCLUDE_DIR}/data/bindata.h
    ${INCLUDE_DIR}/data/field.h
    ${INCLUDE_DIR}/data/nodeid.h
    ${INCLUDE_DIR}/data/repack.h
    ${INCLUDE_DIR}/data/types.h
    ${INCLUDE_DIR}/db/getter.h
    ${INCLUDE_DIR}/db/universe.h
    ${INCLUDE_DIR}/dbif/error.h
    ${INCLUDE_DIR}/dbif/info.h
    ${INCLUDE_DIR}/dbif/method.h
    ${INCLUDE_DIR}/dbif/promise.h
    ${INCLUDE_DIR}/dbif/types.h
    ${INCLUDE_DIR}/dbif/universe.h
    ${INCLUDE_DIR}/network/msgpackobject.h
    ${INCLUDE_DIR}/network/msgpackwrapper.h
    ${INCLUDE_DIR}/parser/parser.h
    ${INCLUDE_DIR}/parser/stream.h
    ${INCLUDE_DIR}/parser/unpng.h
    ${INCLUDE_DIR}/parser/unpyc.h
    ${INCLUDE_DIR}/parser/utils.h
    ${INCLUDE_DIR}/proto/exceptions.h
    ${INCLUDE_DIR}/ui/color_picker_button.h
    ${INCLUDE_DIR}/ui/connectionmanager.h
    ${INCLUDE_DIR}/ui/databaseinfo.h
    ${INCLUDE_DIR}/ui/dialogs/connectiondialog.h
    ${INCLUDE_DIR}/ui/dialogs/createchunkdialog.h
    ${INCLUDE_DIR}/ui/dialogs/gotoaddressdialog.h
    ${INCLUDE_DIR}/ui/dialogs/optionsdialog.h
    ${INCLUDE_DIR}/ui/dialogs/searchdialog.h
    ${INCLUDE_DIR}/ui/dockwidget.h
    ${INCLUDE_DIR}/ui/dockwidget_native.h
    ${INCLUDE_DIR}/ui/fileblobitem.h
    ${INCLUDE_DIR}/ui/fileblobmodel.h
    ${INCLUDE_DIR}/ui/filters/activatedockeventfilter.h
    ${INCLUDE_DIR}/ui/filters/tabbareventfilter.h
    ${INCLUDE_DIR}/ui/hexedit.h
    ${INCLUDE_DIR}/ui/hexeditwidget.h
    ${INCLUDE_DIR}/ui/logwidget.h
    ${INCLUDE_DIR}/ui/mainwindowwithdetachabledockwidgets.h
    ${INCLUDE_DIR}/ui/nodetreewidget.h
    ${INCLUDE_DIR}/ui/nodewidget.h
    ${INCLUDE_DIR}/ui/rootfileblobitem.h
    ${INCLUDE_DIR}/ui/shortcutedit.h
    ${INCLUDE_DIR}/ui/shortcutssettings.h
    ${INCLUDE_DIR}/ui/simplefileblobitem.h
    ${INCLUDE_DIR}/ui/slice.h
    ${INCLUDE_DIR}/ui/spinbox.h
    ${INCLUDE_DIR}/ui/spinboxvalidator.h
    ${INCLUDE_DIR}/ui/subchunkfileblobitem.h
    ${INCLUDE_DIR}/ui/veles_mainwindow.h
    ${INCLUDE_DIR}/ui/velesapplication.h
    ${INCLUDE_DIR}/util/concurrency/threadpool.h
    ${INCLUDE_DIR}/util/edit.h
    ${INCLUDE_DIR}/util/encoders/base64_encoder.h
    ${INCLUDE_DIR}/util/encoders/c_data_encoder.h
    ${INCLUDE_DIR}/util/encoders/c_string_encoder.h
    ${INCLUDE_DIR}/util/encoders/factory.h
    ${INCLUDE_DIR}/util/encoders/hex_encoder.h
    ${INCLUDE_DIR}/util/encoders/idecoder.h
    ${INCLUDE_DIR}/util/encoders/iencoder.h
    ${INCLUDE_DIR}/util/encoders/text_encoder.h
    ${INCLUDE_DIR}/util/encoders/url_encoder.h
    ${INCLUDE_DIR}/util/icons.h
    ${INCLUDE_DIR}/util/int_bytes.h
    ${INCLUDE_DIR}/util/math.h
    ${INCLUDE_DIR}/util/misc.h
    ${INCLUDE_DIR}/util/sampling/fake_sampler.h
    ${INCLUDE_DIR}/util/sampling/isampler.h
    ${INCLUDE_DIR}/util/sampling/uniform_sampler.h
    ${INCLUDE_DIR}/util/settings/connection_client.h
    ${INCLUDE_DIR}/util/settings/hexedit.h
    ${INCLUDE_DIR}/util/settings/shortcuts.h
    ${INCLUDE_DIR}/util/settings/theme.h
    ${INCLUDE_DIR}/util/settings/visualization.h
    ${INCLUDE_DIR}/util/string_utils.h
    ${INCLUDE_DIR}/visualization/base.h
    ${INCLUDE_DIR}/visualization/digram.h
    ${INCLUDE_DIR}/visualization/manipulator.h
    ${INCLUDE_DIR}/visualization/minimap.h
    ${INCLUDE_DIR}/visualization/minimap_panel.h
    ${INCLUDE_DIR}/visualization/panel.h
    ${INCLUDE_DIR}/visualization/samplingmethoddialog.h
    ${INCLUDE_DIR}/visualization/selectrangedialog.h
    ${INCLUDE_DIR}/visualization/trigram.h

    ${SRC_DIR}/client/dbif.cc
    ${SRC_DIR}/client/networkclient.cc
    ${SRC_DIR}/client/nodetree.cc
    ${SRC_DIR}/data/bindata.cc
    ${SRC_DIR}/data/nodeid.cc
    ${SRC_DIR}/data/repack.cc
    ${SRC_DIR}/db/universe.cc
    ${SRC_DIR}/dbif/dbif.cc
    ${SRC_DIR}/network/msgpackobject.cc
    ${SRC_DIR}/parser/parser.cc
    ${SRC_DIR}/parser/unpng.cc
    ${SRC_DIR}/parser/unpyc.cc
    ${SRC_DIR}/parser/utils.cc
    ${SRC_DIR}/ui/color_picker_button.cc
    ${SRC_DIR}/ui/connectionmanager.cc
    ${SRC_DIR}/ui/databaseinfo.cc
    ${SRC_DIR}/ui/dialogs/connectiondialog.cc
    ${SRC_DIR}/ui/dialogs/createchunkdialog.cc
    ${SRC_DIR}/ui/dialogs/gotoaddressdialog.cc
    ${SRC_DIR}/ui/dialogs/optionsdialog.cc
    ${SRC_DIR}/ui/dialogs/searchdialog.cc
    ${SRC_DIR}/ui/dockwidget.cc
    ${SRC_DIR}/ui/dockwidget_native.cc
    ${SRC_DIR}/ui/fileblobitem.cc
    ${SRC_DIR}/ui/fileblobmodel.cc
    ${SRC_DIR}/ui/filters/activatedockeventfilter.cc
    ${SRC_DIR}/ui/filters/tabbareventfilter.cc
    ${SRC_DIR}/ui/hexedit.cc
    ${SRC_DIR}/ui/hexeditwidget.cc
    ${SRC_DIR}/ui/logwidget.cc
    ${SRC_DIR}/ui/main.cc
    ${SRC_DIR}/ui/mainwindowwithdetachabledockwidgets.cc
    ${SRC_DIR}/ui/nodetreewidget.cc
    ${SRC_DIR}/ui/nodewidget.cc
    ${SRC_DIR}/ui/rootfileblobitem.cc
    ${SRC_DIR}/ui/shortcutedit.cc
    ${SRC_DIR}/ui/shortcutssettings.cc
    ${SRC_DIR}/ui/spinbox.cc
    ${SRC_DIR}/ui/spinboxvalidator.cc
    ${SRC_DIR}/ui/subchunkfileblobitem.cc
    ${SRC_DIR}/ui/veles_mainwindow.cc
    ${SRC_DIR}/util/concurrency/threadpool.cc
    ${SRC_DIR}/util/edit.cc
    ${SRC_DIR}/util/encoders/base64_encoder.cc
    ${SRC_DIR}/util/encoders/c_data_encoder.cc
    ${SRC_DIR}/util/encoders/c_string_encoder.cc
    ${SRC_DIR}/util/encoders/factory.cc
    ${SRC_DIR}/util/encoders/hex_encoder.cc
    ${SRC_DIR}/util/encoders/text_encoder.cc
    ${SRC_DIR}/util/encoders/url_encoder.cc
    ${SRC_DIR}/util/icons.cc
    ${SRC_DIR}/util/math.cc
    ${SRC_DIR}/util/misc.cc
    ${SRC_DIR}/util/random.cc
    ${SRC_DIR}/util/sampling/fake_sampler.cc
    ${SRC_DIR}/util/sampling/isampler.cc
    ${SRC_DIR}/util/sampling/uniform_sampler.cc
    ${SRC_DIR}/util/settings/connection_client.cc
    ${SRC_DIR}/util/settings/hexedit.cc
    ${SRC_DIR}/util/settings/shortcuts.cc
    ${SRC_DIR}/util/settings/theme.cc
    ${SRC_DIR}/util/settings/visualization.cc
    ${SRC_DIR}/util/string_utils.cc
    ${SRC_DIR}/util/version.cc
    ${SRC_DIR}/visualization/base.cc
    ${SRC_DIR}/visualization/digram.cc
    ${SRC_DIR}/visualization/manipulator.cc
    ${SRC_DIR}/visualization/minimap.cc
    ${SRC_DIR}/visualization/minimap_panel.cc
    ${SRC_DIR}/visualization/panel.cc
    ${SRC_DIR}/visualization/samplingmethoddialog.cc
    ${SRC_DIR}/visualization/selectrangedialog.cc
    ${SRC_DIR}/visualization/trigram.cc

    ${KAITAI_HEADERS}
    ${MSGPACK_CPP_FWD_HEADER}
    ${MSGPACK_CPP_HEADER}
    ${MSGPACK_CPP_SOURCE}
    ${KAITAI_SOURCES}
    ${FORMS}
)

# Exe: Main executable
add_executable(main_exe
    ${GUI_TYPE}
    ${RESOURCES}
    ${ICONS}
    ${VISUALIZATION_SHADERS}
)

qt5_use_modules(veles_base Core Gui Widgets Network)

target_link_libraries(main_exe veles_base Qt5::Widgets ${ZLIB_LIBRARIES} ${ADDITIONAL_LINK_LIBRARIES})
set_target_properties(main_exe PROPERTIES OUTPUT_NAME ""veles"")
add_dependencies(main_exe openssl zlib msgpack-c)

if(GTEST_FOUND AND GMOCK_FOUND)
  include_directories(${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS})
  add_executable(run_test
      ${TEST_DIR}/run_test.cc
      ${TEST_DIR}/data/bindata.cc
      ${TEST_DIR}/data/copybits.cc
      ${TEST_DIR}/data/nodeid.cc
      ${TEST_DIR}/data/repack.cc
      ${TEST_DIR}/network/msgpackobject.cc
      ${TEST_DIR}/network/model.cc
      ${TEST_DIR}/util/encoders/base64_encoder.cc
      ${TEST_DIR}/util/encoders/c_data_encoder.cc
      ${TEST_DIR}/util/encoders/c_string_encoder.cc
      ${TEST_DIR}/util/encoders/hex_encoder.cc
      ${TEST_DIR}/util/encoders/text_encoder.cc
      ${TEST_DIR}/util/encoders/url_encoder.cc
      ${TEST_DIR}/util/encoders/factory.cc
      ${TEST_DIR}/util/sampling/mock_sampler.h
      ${TEST_DIR}/util/sampling/isampler.cc
      ${TEST_DIR}/util/sampling/uniform_sampler.cc
      ${TEST_DIR}/util/int_bytes.cc
      ${TEST_DIR}/util/edit.cc
  )

  target_link_libraries(run_test veles_base ${GTEST_LIBRARIES} ${GMOCK_LIBRARIES})

  add_custom_command(TARGET run_test
      COMMENT ""Running tests""
      COMMAND $<TARGET_FILE:run_test> ""--gtest_output=xml:results.xml""
      DEPENDS $<TARGET_FILE:run_test>
  )
else()
  message(""gtest and/or gmock not found - tests won't be built"")
endif()

# Post-build: linting

message(STATUS ""Looking for clang-format"")
find_program(CLANG_FORMAT NAMES clang-format-6.0 clang-format HINTS ${CLANG_TOOLS_PATH})

if(CLANG_FORMAT)
  message(STATUS ""Looking for clang-format - found"")
  file(GLOB_RECURSE FORMAT_ALL_SOURCE_FILES ${SRC_DIR}/*.cc ${INCLUDE_DIR}/*.h ${TEST_DIR}/*.cc ${TEST_DIR}/*.h)
  # On Windows, cmd.exe limits commands to 8192 characters.
  # Please be *very* cautious when editing this code: when command length
  # exceeds 8192 characters, the 8192th character is silently dropped and the
  # rest is glued together (sic!).
  # We pass arguments via a file to overcome the limit.
  set(FORMAT_CMDLINE_FILE ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/clang-format-cmdline.txt"")
  file(WRITE ${FORMAT_CMDLINE_FILE} ""-style=file\n"")
  file(APPEND ${FORMAT_CMDLINE_FILE} ""-sort-includes\n"")
  file(APPEND ${FORMAT_CMDLINE_FILE} ""-i\n"")
  foreach(FORMAT_SOURCE_FILE ${FORMAT_ALL_SOURCE_FILES})
    file(APPEND ${FORMAT_CMDLINE_FILE} ""${FORMAT_SOURCE_FILE}\n"")
  endforeach()
  add_custom_target(format COMMAND ${CLANG_FORMAT} ""\""@${FORMAT_CMDLINE_FILE}\"""")
else()
  message(STATUS ""Looking for clang-format - not found"")
  message(STATUS ""  Build target 'format' will not be available."")
endif()


message(STATUS ""Looking for clang-tidy"")
find_program(CLANG_TIDY NAMES clang-tidy-6.0 clang-tidy HINTS ${CLANG_TOOLS_PATH})

if(CLANG_TIDY)
  # Generate 'lint' target.
  # Currently we have to run clang-tidy by hand. Please fix this code if you
  # know a better solution.
  # Other unsuitable alternatives:
  #   - Use LLVM/share/clang/run-clang-tidy.py: We can't do it because it needs
  #     compile_commands.json file, which CMake can generate only for Make and
  #     ninja.
  #   - Use CMAKE_CXX_CLANG_TIDY: Requires CMake 3.6+ which isn't available on
  #     current Ubuntu LTS. This flag also seemed to have no effect on Windows.

  message(STATUS ""Looking for clang-tidy - found"")
  file(GLOB_RECURSE LINT_ALL_SOURCE_FILES ""${SRC_DIR}/*.cc"" ""${TEST_DIR}/*.cc"")

  # Don't lint kaitai-generated code, it contains too many issues.
  # TODO(mkow): Use FILTER after moving to CMake >= 3.6 (not supported in
  # Ubuntu 16.04 LTS).
  # list(FILTER LINT_ALL_SOURCE_FILES EXCLUDE REGEX "".*/kaitai/.*"")
  foreach(LINT_SRC_FILE ${LINT_ALL_SOURCE_FILES})
    if(LINT_SRC_FILE MATCHES "".*/kaitai/.*"")
      list(REMOVE_ITEM LINT_ALL_SOURCE_FILES ${LINT_SRC_FILE})
    endif()
  endforeach()

  # Get includes from the main file.
  get_property(LINT_INC_DIRS TARGET main_exe PROPERTY INCLUDE_DIRECTORIES)
  get_property(LINT_INC_DIRS_BASE TARGET veles_base PROPERTY INCLUDE_DIRECTORIES)
  list(APPEND LINT_INC_DIRS ${LINT_INC_DIRS_BASE})

  if(APPLE)
    # macOS hack - remove surplus include directories
    # TODO(mkow): Use FILTER (requires CMake >= 3.6):
    # list(FILTER LINT_INC_DIRS EXCLUDE REGEX ""Qt[^/]+\\.framework$"")
    foreach(LINT_INCLUDE_FILE ${LINT_INC_DIRS})
      if(LINT_INCLUDE_FILE MATCHES ""Qt[^/]+\\.framework$"")
        list(REMOVE_ITEM LINT_INC_DIRS ${LINT_INCLUDE_FILE})
      endif()
    endforeach()
  endif()

  # Remove duplicates.
  list(REMOVE_DUPLICATES LINT_INC_DIRS)

  # Use this hack, so that cmake will not escape space characters when passing
  # the list to COMMAND, for example by using ""-I$<JOIN:${LINT_INC_DIRS}, -I>""
  string(REPLACE "";"" "";-I"" LINT_INCLUDES ""${LINT_INC_DIRS}"")

  message(STATUS ""clang-tidy includes: -I${LINT_INCLUDES} -I${CMAKE_BINARY_DIR} -I${PROJECT_SOURCE_DIR}"")
  # Parse CMAKE_CXX_FLAGS to list, so spaces will not be escaped in COMMANDs.
  separate_arguments(LINT_CXX_FLAGS UNIX_COMMAND ${CMAKE_CXX_FLAGS})

  # As an alternative - we could use:
  #   list(APPEND LINT_CHECKS ""google-*"")
  #   list(APPEND LINT_CHECKS ""performance-*"")
  #   string(REPLACE "";"" "","" LINT_CHECKS_STR ""${LINT_CHECKS}"")
  #   set(CMAKE_CXX_CLANG_TIDY clang-tidy;-style=google;-checks=${LINT_CHECKS_STR}"")
  # and then all the magic should happen at compile time.
  # CMake 3.6+ is required for this (Ubuntu 18.04 LTS).

  add_custom_target(lint)

  # This target is needed so dependencies are not built for each clang-tidy call.
  add_custom_target(lint_depends
      DEPENDS
          ${MSGPACK_CPP_HEADER}
          ${MSGPACK_EXTRACT_PATH}
          ${FORMS}
  )

  # foreach is needed so maximum command line length is not reached.
  # Create intermediary targets to allow parallel checks with -jN.
  set(LINT_INDEX 0)
  foreach(LINT_SOURCE_FILE ${LINT_ALL_SOURCE_FILES})
    set(LINT_TARGET_NAME ""__lint-${LINT_INDEX}"")
    math(EXPR LINT_INDEX ""${LINT_INDEX}+1"")
    add_custom_target(
        ${LINT_TARGET_NAME}
        COMMAND
            ${CLANG_TIDY}
            # Test dir has some headers inside, don't skip them.
            ""\""-header-filter=((${INCLUDE_DIR})|(${TEST_DIR}))[/\\].*\""""
            -quiet
            ${LINT_SOURCE_FILE}
            --
            ${LINT_CXX_FLAGS}
            # Don't know how to force CMake to invoke compiler with -fPIC.
            ""$<$<NOT:$<OR:$<BOOL:${WIN32}>,$<BOOL:${WIN64}>>>:-fPIC>""
            # Nasty hack to set -iframework flag for Qt on macOS
            ""$<$<BOOL:${APPLE}>:-iframework${CMAKE_PREFIX_PATH}/lib>""
            -I${LINT_INCLUDES}
            -I${CMAKE_BINARY_DIR}
            -I${PROJECT_SOURCE_DIR}
        DEPENDS
            lint_depends
    )
    add_dependencies(lint ${LINT_TARGET_NAME})
  endforeach()
else()
  message(STATUS ""Looking for clang-tidy - not found"")
  message(STATUS ""  Build target 'lint' will not be available."")
endif()


# Post-build packaging

# Unix paths
if(CMAKE_HOST_UNIX AND NOT CMAKE_HOST_APPLE)
  set(CPACK_PACKAGE_CONTACT ""contact@veles.io"")
  set(CPACK_DEBIAN_PACKAGE_SECTION ""utils"")
  set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5core5a (>= 5.5.1), libqt5gui5 (>= 5.5.1),
      libqt5widgets5 (>= 5.5.1), libqt5network5 (>= 5.5.1), zlib1g (>= 1:1.2.8), g++,
      python3 (>= 3.5.0), python3-venv (>= 3.5.0), python3-dev (>= 3.5.0),
      openssl (>= 1.0.0), libffi-dev, libssl-dev (>= 1.0.0)""
  )
  install(TARGETS main_exe RUNTIME DESTINATION bin COMPONENT ""application"")

  install(FILES ""${PROJECT_SOURCE_DIR}/resources/install/veles.desktop"" DESTINATION share/applications/ COMPONENT ""application"")
  install(FILES ""${PROJECT_SOURCE_DIR}/resources/icons/veles.ico"" DESTINATION share/veles/ COMPONENT ""application"")
endif()

# Windows
if(WIN32)
  set_target_properties(main_exe PROPERTIES WIN32 TRUE)
  # Run winddeployqt if it can be found
  find_program(WINDEPLOYQT_EXECUTABLE NAMES windeployqt HINTS ${QTDIR} ENV QT PATH_SUFFIXES bin)
  add_custom_command(
      TARGET main_exe POST_BUILD
      COMMENT ""Ensuring Qt dependencies""
      COMMAND ${WINDEPLOYQT_EXECUTABLE} ${WINDEPLOYQT_ARGS} $<TARGET_FILE:main_exe>
      DEPENDS $<TARGET_FILE:main_exe>
  )
  # Copy winddeployqt output to the directory with the main UI binary.
  install(DIRECTORY ${WIN_DEPLOY_DIR} DESTINATION ${WINDOWS_APPLICATION_OUT_DIRECTORY} COMPONENT ""application"")
  add_custom_command(
      TARGET main_exe POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_directory ""${WIN_DEPLOY_DIR}"" ""${WINDOWS_APPLICATION_OUT_DIRECTORY}""
      DEPENDS $<TARGET_FILE:main_exe>
  )

  install(TARGETS main_exe RUNTIME DESTINATION ${WINDOWS_APPLICATION_OUT_DIRECTORY} COMPONENT ""application"")
  set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""ExecWait '\\\""$INSTDIR\\\\${WINDOWS_APPLICATION_OUT_DIRECTORY}\\\\${VCREDIST_BINARY}\\\"" /install /passive'"")
  install(FILES ""${OPENSSL_DLL_DIR}/libeay32.dll"" ""${OPENSSL_DLL_DIR}/ssleay32.dll"" DESTINATION ${WINDOWS_APPLICATION_OUT_DIRECTORY} COMPONENT ""application"")
  add_custom_command(
      TARGET main_exe POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different
          ""${OPENSSL_DLL_DIR}/libeay32.dll""
          ""${OPENSSL_DLL_DIR}/ssleay32.dll""
          ${WINDOWS_APPLICATION_OUT_DIRECTORY}
      COMMENT ""Copying OpenSSL DLLs""
  )
  set(CPACK_NSIS_EXECUTABLES_DIRECTORY ${WINDOWS_APPLICATION_OUT_DIRECTORY})
  set(CPACK_NSIS_MUI_FINISHPAGE_RUN ""veles"")
  set(CPACK_NSIS_INSTALLED_ICON_NAME ""${WINDOWS_APPLICATION_OUT_DIRECTORY}/veles.exe"")
  set(CPACK_NSIS_DISPLAY_NAME ""Veles"")
  set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY ""Codisec"")
  set(CPACK_PACKAGE_INSTALL_DIRECTORY ""Veles"")
  set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
  set(CPACK_NSIS_URL_INFO_ABOUT ""https://veles.io"")
  set(CPACK_NSIS_CONTACT ""contact@veles.io"")
  set(CPACK_RESOURCE_FILE_LICENSE ""${PROJECT_SOURCE_DIR}/resources/install/license.txt"")
  set(CPACK_PACKAGE_EXECUTABLES ""veles"" ""VELES"")
  set(CPACK_CREATE_DESKTOP_LINKS ""veles"")
  set(CPACK_NSIS_MODIFY_PATH ON)
endif()

# Apple
if(APPLE)
  set(CPACK_INSTALL_PREFIX ""/Applications"")
  set(CMAKE_MACOSX_RPATH on)
  # Finding MacDeployQt
  find_program(MACDEPLOYQT_EXECUTABLE
      macdeployqt
      ENV QT
      PATH_SUFFIXES ""5.7/clang_64/bin""
  )
  add_custom_command(TARGET main_exe POST_BUILD
      COMMENT ""Ensuring Qt dependencies""
      COMMAND ${MACDEPLOYQT_EXECUTABLE} ARGS ${CMAKE_CURRENT_BINARY_DIR}/\${CONFIGURATION}/$<TARGET_PROPERTY:main_exe,OUTPUT_NAME>.app ${MACDEPLOYQT_ARGS}
      DEPENDS $<TARGET_FILE:main_exe>
  )
  set_target_properties(main_exe PROPERTIES MACOSX_BUNDLE TRUE)
  set_target_properties(main_exe PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/resources/MacOSXBundleInfo.plist.in)
  install(TARGETS main_exe BUNDLE DESTINATION ""./"" COMPONENT ""application"")
  set(CPACK_PACKAGE_EXECUTABLES ""veles.app"" ""VELES"")
endif()

set(CPACK_COMPONENT_APPLICATION_DISPLAY_NAME ""Veles UI application"")
set(CPACK_COMPONENT_SERVER_DISPLAY_NAME ""Veles server"")
set(CPACK_COMPONENT_APPLICATION_REQUIRED ON)

# Few common CPack settings
set(CPACK_PACKAGE_VENDOR ""Codilime"")
set(CPACK_PACKAGE_NAME ""veles"")
string(TIMESTAMP VERSION ""%Y.%m"")
set(CPACK_PACKAGE_VERSION ""${VERSION}"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Veles tool for binary data analysis"")
set(CPACK_MONOLITHIC_INSTALL)
set(CPACK_STRIP_FILES false)
include(CPack)
",3.10.0,3.1
32518,lxde,lxqt-about,False,False,False,False,False,83,C++,2020-05-16 13:09:41+00:00,2013-08-06 10:45:04+00:00,14,304,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-about)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

include(GNUInstallDirs)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CPP_FILES
    aboutdialog/lxqtaboutdialog.cpp
    aboutdialog/technicalinfo.cpp
    translatorsinfo/translatorsinfo.cpp
    main.cpp
)

set(UI_FILES
    aboutdialog/lxqtaboutdialog.ui
)

# Minimum versions
set(LXQT_MINIMUM_VERSION ""0.15.0"")

find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

## Patch Version
set(LXQT_ABOUT_PATCH_VERSION 0)

set(LXQT_ABOUT_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_ABOUT_PATCH_VERSION})
add_definitions(
    ""-DLXQT_ABOUT_VERSION=\""${LXQT_ABOUT_VERSION}\""""
)

# Translations **********************************
include(LXQtTranslate)

lxqt_translate_ts(QM_FILES
    UPDATE_TRANSLATIONS ${UPDATE_TRANSLATIONS}
    SOURCES
        ${H_FILES}
        ${CPP_FILES}
        ${UI_FILES}
    INSTALL_DIR
        ""${LXQT_TRANSLATIONS_DIR}/${PROJECT_NAME}""
)

lxqt_app_translation_loader(QM_LOADER ${PROJECT_NAME})

lxqt_translate_desktop(DESKTOP_FILES
    SOURCES
    resources/lxqt-about.desktop.in
)
#************************************************

include(translatorsinfo/CMakeLists.txt)
get_translatorsinfo_qrc(translatorsinfo_qrc)

add_executable(${PROJECT_NAME}
    ${CPP_FILES}
    ${QM_FILES}
    ${DESKTOP_FILES}
    ${translatorsinfo_qrc}
    ${QM_LOADER}

)

target_link_libraries(${PROJECT_NAME}
    lxqt
)

install(TARGETS
    ${PROJECT_NAME}
    RUNTIME DESTINATION ""${CMAKE_INSTALL_BINDIR}""
    COMPONENT Runtime
)
install(FILES
    ${DESKTOP_FILES}
    DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/applications""
    COMPONENT Runtime
)
",3.1.0,3.1
32569,OpenSSE,opensse-schemes,False,False,False,False,False,1,C++,2020-04-28 09:47:16+00:00,2017-08-22 15:40:36+00:00,24,406,"cmake_minimum_required(VERSION 3.1)
project(opensse-schemes VERSION 0.3 DESCRIPTION ""OpenSSE's Schemes Implementation"")



list(
    APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/externals/CMake-codecov/cmake""
)
list(
    APPEND
        CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/externals/sanitizers-cmake/cmake""
)

# Build in Debug mode by default
set(default_build_type ""Debug"")

# Options
option(opensse_ENABLE_WALL ""Enable all warnings"" ON)
option(opensse_ENABLE_WEXTRA ""Enable extra warnings"" ON)
option(opensse_ENABLE_WERROR ""Make all warnings into errors"" ON)
option(
    opensse_OPTIMIZE_FOR_NATIVE_ARCH
    ""Enable compiler optimizations for the native processor architecture (if available)""
    ON
)

# Load modules

include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)

# enable code coverage
find_package(codecov)
list(
    APPEND
        LCOV_REMOVE_PATTERNS
        '${CMAKE_CURRENT_SOURCE_DIR}/test/*'
        '${CMAKE_CURRENT_SOURCE_DIR}/externals/*'
        '${CMAKE_CURRENT_SOURCE_DIR}/third_party/*'
        '*/deps/*' # For Travis
        '*/usr/*' # For Travis
        '*.pb.h'
)

# Find Sanitizers
find_package(Sanitizers)

# We use CMake's integrated testing features
enable_testing()

if(opensse_ENABLE_WALL)
    check_cxx_compiler_flag(""-Wall"" COMPILER_OPT_WALL_SUPPORTED)
    if(COMPILER_OPT_WALL_SUPPORTED)
        add_compile_options(-Wall)
    endif()
endif()

if(opensse_ENABLE_WEXTRA)
    check_cxx_compiler_flag(""-Wextra"" COMPILER_OPT_WEXTRA_SUPPORTED)
    if(COMPILER_OPT_WEXTRA_SUPPORTED)
        add_compile_options(-Wextra)
    endif()
endif()

if(opensse_ENABLE_WERROR)
    check_cxx_compiler_flag(""-Werror"" COMPILER_OPT_WERROR_SUPPORTED)
    if(COMPILER_OPT_WERROR_SUPPORTED)
        add_compile_options(-Werror -Wno-error=unknown-pragmas)
    endif()
endif()

if(opensse_OPTIMIZE_FOR_NATIVE_ARCH)
    check_cxx_compiler_flag(""-march=native"" COMPILER_OPT_ARCH_NATIVE_SUPPORTED)
    if(COMPILER_OPT_ARCH_NATIVE_SUPPORTED)
        add_compile_options(-march=native)
    endif()
endif()

# Go for external dependencies
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake"")

find_package(RocksDB REQUIRED)

find_package(Protobuf)
find_package(GRPC)
message(STATUS ""Protoc path: "" ${Protobuf_PROTOC_EXECUTABLE})
message(STATUS ""GRPC plugin path: "" ${GRPC_CPP_PLUGIN})

# Import spdlog
add_subdirectory(externals/spdlog)

# Disable memory locks because of race conditions.
set(ENABLE_MEMORY_LOCK OFF CACHE BOOL ""Disable Memory Lock"" FORCE)
add_subdirectory(third_party/crypto/src)

add_subdirectory(third_party/db-parser/src)

add_subdirectory(lib)
add_coverage(schemes)
add_coverage(runners)
add_sanitizers(schemes)
add_sanitizers(runners)

add_subdirectory(src)

foreach(runner ${runner_bins})
    add_sanitizers(${runner})
endforeach(runner ${runner_bins})

# Build googletest for the tests
set(BUILD_GMOCK OFF CACHE BOOL ""Disable GMock"" FORCE)
add_subdirectory(externals/googletest)
add_subdirectory(test)
add_coverage(check)
add_sanitizers(check)
add_sanitizers(sophos_debug)
add_sanitizers(diana_debug)
add_sanitizers(janus_debug)

coverage_evaluate()
",3.1,3.1
32644,jmc-88,tint3,False,False,False,False,False,1,C++,2019-05-15 23:51:02+00:00,2014-07-19 15:02:43+00:00,27,1323,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(tint3)

# Workaround for: https://gitlab.kitware.com/cmake/cmake/issues/16517
if(${CMAKE_VERSION} VERSION_LESS ""3.8.0"")
  set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME ""tint3"")
endif()

# Additional CMake modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

# Custom compiler flags
if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" OR
   CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
endif()

if(CMAKE_BUILD_TYPE STREQUAL ""Debug"")
  add_definitions(-D_TINT3_DEBUG)
elseif(CMAKE_BUILD_TYPE STREQUAL ""Release"" OR
       CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"")
  add_definitions(-DNDEBUG)
endif()

# Require C++11 support
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Link to libc++ whenever possible
include(FindLibCxx)

include(FindPkgConfig)
pkg_check_modules(PANGOCAIRO REQUIRED pangocairo)
pkg_check_modules(PANGO REQUIRED pango)
pkg_check_modules(CAIRO REQUIRED cairo cairo-xlib)
pkg_check_modules(GLIB2 REQUIRED glib-2.0)
pkg_check_modules(GOBJECT2 REQUIRED gobject-2.0)
pkg_check_modules(IMLIB2 REQUIRED imlib2>=1.4.2)

# Custom pkg-config wrapper because Arch Linux.
# See comments in the module source for details.
include(FindXsettingsClient)

find_package(
  X11 REQUIRED
  COMPONENTS
    Xcomposite Xdamage Xfixes Xinerama Xrender Xrandr)

include(CheckLibraryExists)
string(REPLACE "";"" "" "" FLAGS_REPLACED ""${IMLIB2_LDFLAGS}"")
set(CMAKE_REQUIRED_FLAGS ""${FLAGS_REPLACED}"")
check_library_exists(""${IMLIB2_LIBRARIES}"" ""imlib_context_set_display"" ""${IMLIB2_LIBRARY_DIRS}"" IMLIB_BUILT_WITH_X)
if(NOT IMLIB_BUILT_WITH_X)
  message(FATAL_ERROR ""Imlib is not built with X11 support"")
endif()

option(ENABLE_BATTERY ""Enable battery status plugin"" ON)
if(ENABLE_BATTERY)
  add_definitions(-DENABLE_BATTERY)
endif()

option(ENABLE_EXAMPLES ""Install additional tint2rc examples"" OFF)

option(ENABLE_SN ""Startup notification support"" ON)
if(ENABLE_SN)
  pkg_check_modules(SN REQUIRED libstartup-notification-1.0>=0.12)
  add_definitions(-DHAVE_SN -DSN_API_NOT_YET_FROZEN)
endif()

option(ENABLE_CURL ""Enable CURL for fetching remote resources"" ON)
if(ENABLE_CURL)
  find_package(CURL 7.30 REQUIRED)
  add_definitions(-DHAVE_CURL)
endif()

# Prefer GNU gold if available and requested.
option(ENABLE_GNU_GOLD ""Enable the GNU gold linker if available"" ON)
if(ENABLE_GNU_GOLD)
  execute_process(
    COMMAND
      ${CMAKE_CXX_COMPILER} -fuse-ld=gold -Wl,--version
    OUTPUT_VARIABLE LD_VERSION
    ERROR_QUIET)
  if(""${LD_VERSION}"" MATCHES ""GNU gold"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold"")
    set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold"")
  endif()
endif()

option(FORCE_COLOR_DIAGNOSTICS ""Always produce ANSI-colored output (GCC/Clang)."" ON)
if(${FORCE_COLOR_DIAGNOSTICS})
  if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    add_compile_options(-fcolor-diagnostics)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
    add_compile_options(-fdiagnostics-color=always)
  endif()
endif()

set(MANDIR share/man CACHE PATH ""Directory for man pages"")
set(DATADIR share CACHE PATH ""Directory for shared data"")
set(SYSCONFDIR /etc CACHE PATH ""Directory for configuration files"")
set(DOCDIR share/doc/tint3 CACHE PATH ""Directory for documentation files"")

# {{{ configuration files
#
# This section inspired by:
#       http://xit0.org/2013/04/cmake-use-git-branch-and-commit-details-in-project/

# Get the current working branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE)

# Get the latest abbreviated commit hash of the working branch
execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE)

configure_file(
  ${CMAKE_SOURCE_DIR}/src/version.hh.in
  ${CMAKE_BINARY_DIR}/generated/version.hh)

include(CheckCXXSourceRuns)
set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_CXX11_STANDARD_COMPILE_OPTION})
check_cxx_source_runs(
  ""#include <cmath>
  int main() {
    std::nearbyint(0.5);
  }""
  TINT3_HAVE_STD_NEARBYINT)
check_cxx_source_runs(
  ""#include <cmath>
  int main() {
    std::round(0.5);
  }""
  TINT3_HAVE_STD_ROUND)

configure_file(
  ${CMAKE_SOURCE_DIR}/src/cxx_features.hh.in
  ${CMAKE_BINARY_DIR}/generated/cxx_features.hh)

include(CheckSymbolExists)
check_symbol_exists(shm_open ""sys/mman.h"" TINT3_HAVE_SHM_OPEN)

configure_file(
  ${CMAKE_SOURCE_DIR}/src/unix_features.hh.in
  ${CMAKE_BINARY_DIR}/generated/unix_features.hh)

include_directories(${CMAKE_BINARY_DIR}/generated)

# }}} configuration files

# {{{ common rules

include_directories(
  ${PROJECT_BINARY_DIR}
  ""${PROJECT_SOURCE_DIR}/src""
  ""${PROJECT_SOURCE_DIR}/external_includes"")

# }}} common rules

# {{{ coverage rules

# Coveralls integration is disabled by default, to avoid accidental uploads of
# coverage results from local runs. Only the CI server should upload them.
option(COVERALLS ""Turn on Coveralls support"" OFF)

if(COVERALLS)
  # This part adapted from the original at:
  #   https://github.com/JoakimSoderberg/coveralls-cmake/blob/master/cmake/Coveralls.cmake
  if(NOT CMAKE_BUILD_TYPE STREQUAL ""Debug"")
    message(FATAL_ERROR ""Coveralls: code coverage results with an optimised build may be misleading! Use -DCMAKE_BUILD_TYPE=Debug."")
  endif()
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage"")
endif()

# }}} coverage rules

# {{{ test rules

include(TestTarget)
enable_testing()

# List of testdata files to copy
set(TESTDATA_SRCS
    src/launcher/testdata/applications/launcher_test.desktop
    src/launcher/testdata/.icons/UnitTestTheme/index.theme
    src/util/testdata/fs_test.txt)

# Generated list of output paths in the build directory
string(REGEX REPLACE ""([^;]+)"" ""${CMAKE_BINARY_DIR}/\\1"" TESTDATA_OUTS ""${TESTDATA_SRCS}"")

foreach(item IN LISTS TESTDATA_SRCS)
  add_custom_command(
    OUTPUT
      ""${CMAKE_BINARY_DIR}/${item}""
    COMMAND
      ${CMAKE_COMMAND} -E copy ""${CMAKE_SOURCE_DIR}/${item}"" ""${CMAKE_BINARY_DIR}/${item}""
    DEPENDS
      ""${CMAKE_SOURCE_DIR}/${item}"")
endforeach()

add_custom_target(
  testdata ALL
  DEPENDS
    ${TESTDATA_OUTS})

# }}} test rules

# {{{ install rules

install(FILES sample/tint3rc DESTINATION ${SYSCONFDIR}/xdg/tint3)
install(FILES AUTHORS.md README.md DESTINATION ${DOCDIR})

install(FILES data/tint3.desktop DESTINATION ${DATADIR}/applications)
install(FILES data/default_icon.png DESTINATION ${DATADIR}/tint3)

install(FILES data/logo/tint3.svg
        DESTINATION ${DATADIR}/icons/hicolor/scalable/apps)
foreach(size 16 32 48 64 128 256)
  install(FILES data/logo/tint3-${size}.png
          DESTINATION ${DATADIR}/icons/hicolor/${size}x${size}/apps
          RENAME tint3.png)
endforeach()

if(ENABLE_EXAMPLES)
    file(GLOB SAMPLEFILES sample/*.tint3rc)
    install(FILES ${SAMPLEFILES} DESTINATION ${DOCDIR}/examples)
endif()

# }}} install rules

add_subdirectory(abseil-cpp)
add_subdirectory(doc)
add_subdirectory(src)
add_subdirectory(test)
",3.1,3.1
32674,facebook,fbthrift,False,False,False,False,False,509,C++,2020-05-17 18:31:08+00:00,2013-07-02 18:15:51+00:00,1913,9665,"# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)

# Package information
project(""fbthrift"" C CXX)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(BIN_INSTALL_DIR bin CACHE STRING
    ""The subdirectory where the compiler binary should be installed"")
set(INCLUDE_INSTALL_DIR include CACHE STRING
    ""The subdirectory where include files should be installed"")
set(LIB_INSTALL_DIR lib CACHE STRING
    ""The subdirectory where libraries should be installed"")
set(CMAKE_INSTALL_DIR lib/cmake/fbthrift CACHE STRING
    ""The subdirectory where CMake package config files should be installed"")

set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}"")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Name the top level directories
set(THRIFT_HOME ${CMAKE_CURRENT_SOURCE_DIR})
set(THRIFT_BUILD ${CMAKE_CURRENT_BINARY_DIR})

# Add root dir so qualified includes work. E.g. #include ""thrift/compiler/$x.h""
include_directories(${THRIFT_HOME})
include_directories(${THRIFT_BUILD})

# Set directory of the Find$x.cmake files to properly include dependencies
set(CMAKE_MODULE_PATH
  ""${THRIFT_HOME}/thrift/cmake""
  # for in-fbsource builds
  ""${CMAKE_CURRENT_SOURCE_DIR}/../opensource/fbcode_builder/CMake""
  # For shipit-transformed builds
  ""${THRIFT_HOME}/build/fbcode_builder/CMake""
  ${CMAKE_MODULE_PATH})

# Find required dependencies
find_package(OpenSSL REQUIRED)

# Provide an option to control the -std argument for the C++ compiler.
# We don't use CMAKE_CXX_STANDARD since it requires at least CMake 3.8
# to support C++17.
set(CXX_STD ""gnu++1z""
  CACHE STRING
  ""The C++ standard argument to pass to the compiler. Defaults to gnu++1z.""
)
mark_as_advanced(CXX_STD)
if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES Clang
    OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES GNU)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=${CXX_STD}"")
endif()

# Enable modular builds
option(compiler_only ""Build the Thrift Compiler only"" OFF)
option(lib_only ""Build the Thrift Libraries only"" OFF)
if(compiler_only OR lib_only)
  set(build_all OFF)
else()
  set(build_all ON)
endif(compiler_only OR lib_only)

set(
  thriftpy AUTO
  CACHE BOOL
  ""Install the thrift/lib/py library as an FB Python archive manifest""
)
set_property(CACHE thriftpy PROPERTY STRINGS ON OFF AUTO)
option(thriftpy3
  ""Include thrift-py3 library and extensions in the build, requires Cython""
  OFF
)

# Find required dependencies for thrift/compiler
if(compiler_only OR build_all)
  find_package(BISON 3.0.4 REQUIRED)
  find_package(FLEX REQUIRED)
  include_directories(
    ${OPENSSL_INCLUDE_DIR}
  )
  set(THRIFT1 thrift1)
  set(THRIFTCPP2 thriftcpp2)
  include(ThriftLibrary.cmake)
  install(FILES ThriftLibrary.cmake DESTINATION ${INCLUDE_INSTALL_DIR}/thrift)
endif(compiler_only OR build_all)

# Find required dependencies for thrift/lib
if(lib_only OR build_all)
  find_package(Gflags REQUIRED)
  find_package(Glog REQUIRED)
  find_package(folly CONFIG REQUIRED)
  find_package(yarpl CONFIG REQUIRED) # transitive dep for rsocket
  find_package(rsocket CONFIG)
  find_package(fizz CONFIG REQUIRED)
  find_package(fmt CONFIG REQUIRED)
  find_package(wangle CONFIG REQUIRED)
  find_package(Zlib REQUIRED)
  find_package(Zstd REQUIRED)
  # https://cmake.org/cmake/help/v3.9/module/FindThreads.html
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads)
  include_directories(
    ${LIBGFLAGS_INCLUDE_DIR}
    ${GLOG_INCLUDE_DIRS}
    ${OPENSSL_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIRS}
    ${ZSTD_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}
  )
  add_definitions(""-DTHRIFT_HAVE_LIBSNAPPY=0"")
  if(lib_only)
    find_program(THRIFT1 thrift1)
    include(${THRIFT_COMPILER_INCLUDE}/thrift/ThriftLibrary.cmake)
  endif(lib_only)

  find_package(python-six)
  if(""${thriftpy}"" STREQUAL ""AUTO"")
    if(python-six_FOUND)
      message(STATUS
        ""Python dependencies found, enabling build of thrift/lib/py""
      )
    else()
      message(STATUS
        ""Python dependencies not found, will not build thrift/lib/py""
      )
    endif()
    set(thriftpy ""${python-six_FOUND}"")
  elseif(thriftpy AND NOT python-six_FOUND)
    message(FATAL_ERROR
        ""Unable to find python-six, but building thrift/lib/py was requested""
    )
  endif()
endif(lib_only OR build_all)

if(thriftpy3)
  find_package(PythonInterp 3.6 REQUIRED)
  find_package(PythonLibs 3 REQUIRED)
  find_package(Cython 0.28 REQUIRED)
endif()

# Add the test dependencies
# To run tests: `make test`
if(enable_tests)
  find_package(PythonInterp REQUIRED)
  find_package(GTest REQUIRED)
  find_package(GMock REQUIRED)
  include_directories(
    ${GTEST_INCLUDE_DIRS}
    ${GMOCK_INCLUDE_DIRS}
  )
  enable_testing()
endif(enable_tests)

# Create a generalized function for tests
function(thrift_gtest tname srcfile)
  add_executable(""${tname}-t"" ${srcfile})
  target_link_libraries(
    ""${tname}-t""

    ${ARGN}
    ${GTEST_BOTH_LIBRARIES}
    ${GMOCK_BOTH_LIBRARIES}
    pthread
  )
  gtest_add_tests(""${tname}-t"" """" ${srcfile})
endfunction(thrift_gtest)

add_subdirectory(thrift)
",3.1.3,3.1
32784,sasq64,apone,False,False,False,False,False,1,C,2019-06-06 21:40:33+00:00,2013-08-27 14:30:10+00:00,6,818,"cmake_minimum_required(VERSION 3.1.0)
project(chipmachine)

if(MSVC) 
	set(STDFLAG /std:c++17)
	set(FSLIB """")
elseif(APPLE)
	set(STDFLAG -std=c++17)
	set(FSLIB c++experimental)
else()
    set(STDFLAG -std=c++17)
	set(FSLIB stdc++fs)
endif()

add_executable(testing mods/coreutils/newfile.t.cpp mods/luainterpreter/luainterpreter.t.cpp mods/luainterpreter/luainterpreter.cpp)
target_link_libraries(testing ${FSLIB} pthread)
target_include_directories(testing PRIVATE mods)
target_compile_definitions(testing PRIVATE -DTESTING)

",3.1.0,3.1
32867,rncbc,qsampler,False,False,False,False,False,4,C++,2020-03-31 10:58:21+00:00,2015-09-22 14:36:50+00:00,11,1226,"project(QSAMPLER)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""Qsampler"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qsampler"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable libgig availability.
option (CONFIG_LIBGIG ""Enable libgig interface (default=yes)"" 1)

# Enable unique/single instance.
option (CONFIG_XUNIQUE ""Enable unique/single instance (default=yes)"" 1)

# Enable debugger stack-trace option (assumes --enable-debug).
option (CONFIG_STACKTRACE ""Enable debugger stack-trace (default=no)"" 0)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets)

if (CONFIG_XUNIQUE)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for libraries.
if (WIN32)
  check_function_exists (lroundf CONFIG_ROUND)
else ()
  find_library (MATH_LIBRARY m)
  # Check for round math function.
  if (MATH_LIBRARY)
    set (CMAKE_REQUIRED_LIBRARIES ""${MATH_LIBRARY};${CMAKE_REQUIRED_LIBRARIES}"")
    check_function_exists (lroundf CONFIG_ROUND)
  else ()
    message (FATAL_ERROR ""*** math library not found."")
  endif ()
endif ()

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for LSCP libraries.
pkg_check_modules (LSCP REQUIRED lscp)
if (LSCP_FOUND)
  set (CONFIG_LIBLSCP 1)
  include_directories (${LSCP_INCLUDE_DIRS})
  link_directories (${LSCP_LIBRARY_DIRS})
# link_libraries (${LSCP_LIBRARIES})
  set (CMAKE_REQUIRED_LIBRARIES ""${LSCP_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  # Check for for instrument_name in lscp_channel_info_t.
  check_include_file (lscp/client.h HAVE_LSCP_CLIENT_H)
  if (NOT HAVE_LSCP_CLIENT_H)
    set (CONFIG_INSTRUMENT_NAME 0)
  else ()
    set (CONFIG_INSTRUMENT_NAME 1)    
  endif ()
  # Check for mute/solo in lscp_channel_info_t.
  if (NOT HAVE_LSCP_CLIENT_H)
    set (CONFIG_MUTE_SOLO 0)
  else ()
    set (CONFIG_MUTE_SOLO 1)    
  endif ()
  if (CONFIG_MUTE_SOLO)
    check_function_exists (lscp_set_channel_mute CONFIG_MUTE_SOLO)
  endif ()
  if (CONFIG_MUTE_SOLO)
    check_function_exists (lscp_set_channel_solo CONFIG_MUTE_SOLO)
  endif ()
  # Check if MIDI instrument mapping is available.
  check_function_exists (lscp_map_midi_instrument CONFIG_MIDI_INSTRUMENT)
  # Check if FX sends is available.
  check_function_exists (lscp_create_fxsend CONFIG_FXSEND)
  # Check for FX send level in lscp_fxsend_info_t
  if (CONFIG_FXSEND)
    if (NOT HAVE_LSCP_CLIENT_H)
      set (CONFIG_FXSEND_LEVEL 0)
    else ()
      set (CONFIG_FXSEND_LEVEL 1)    
    endif ()
  endif ()
  # Check if FX send rename is available.
  if (CONFIG_FXSEND)
    check_function_exists (lscp_set_fxsend_name CONFIG_FXSEND_RENAME)
  endif ()
  # Check for audio_routing array type
  if (NOT HAVE_LSCP_CLIENT_H)
    set (CONFIG_AUDIO_ROUTING 0)
  else ()
    set (CONFIG_AUDIO_ROUTING 1)    
  endif ()
  # Check if global volume is available.
  check_function_exists (lscp_set_volume CONFIG_VOLUME)
  # Check if instrument editing is available.
  check_function_exists (lscp_edit_channel_instrument CONFIG_EDIT_INSTRUMENT)
  # Check for CHANNEL_MIDI LSCP event support in liblscp],
  check_include_file (lscp/event.h HAVE_LSCP_EVENT_H)
  if (NOT HAVE_LSCP_EVENT_H)
    set (CONFIG_EVENT_CHANNEL_MIDI 0)
  else ()
    set (CONFIG_EVENT_CHANNEL_MIDI 1)    
  endif ()
  # Check for DEVICE_MIDI LSCP event support in liblscp],
  if (NOT HAVE_LSCP_EVENT_H)
    set (CONFIG_EVENT_DEVICE_MIDI 0)
  else ()
    set (CONFIG_EVENT_DEVICE_MIDI 1)    
  endif ()
  # Check if max. voices / streams is available.
  check_function_exists (lscp_get_voices CONFIG_MAX_VOICES)
else ()
  message (FATAL_ERROR ""*** LSCP library not found."")
  set (CONFIG_LIBLSCP 0)
endif ()

# Check for GIG libraries.
if (CONFIG_LIBGIG)
  pkg_check_modules (GIG gig>=3.3.0)
  if (GIG_FOUND)
    include_directories (${GIG_INCLUDE_DIRS})
    link_directories (${GIG_LIBRARY_DIRS})
    link_libraries (${GIG_LIBRARIES})
#   set (CMAKE_REQUIRED_LIBRARIES ""${GIG_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # liggig supports fast information retrieval.
    set (CONFIG_LIBGIG_SETAUTOLOAD 1)
    # Check if libgig/SF.h is available.
    check_include_file_cxx (libgig/SF.h HAVE_LIBGIG_SF_H)
    if (NOT HAVE_LIBGIG_SF_H)
      set (CONFIG_LIBGIG_SF2 0)
    else ()
      set (CONFIG_LIBGIG_SF2 1)    
    endif ()
  else ()
    message (WARNING ""*** GIG library not found."")
    set (CONFIG_LIBGIG 0)
  endif ()
endif ()


add_subdirectory (src)

configure_file (qsampler.spec.in qsampler.spec IMMEDIATE @ONLY)

install (FILES qsampler.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qsampler.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qsampler.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  LSCP instrument name support . . . . . . . . . . ."" CONFIG_INSTRUMENT_NAME)
show_option (""  LSCP mute/solo support . . . . . . . . . . . . . ."" CONFIG_MUTE_SOLO)
show_option (""  LSCP MIDI instrument support . . . . . . . . . . ."" CONFIG_MIDI_INSTRUMENT)
show_option (""  LSCP FX send support . . . . . . . . . . . . . . ."" CONFIG_FXSEND)
show_option (""  LSCP FX send level support . . . . . . . . . . . ."" CONFIG_FXSEND_LEVEL)
show_option (""  LSCP FX send rename support  . . . . . . . . . . ."" CONFIG_FXSEND_RENAME)
show_option (""  LSCP audio routing support . . . . . . . . . . . ."" CONFIG_AUDIO_ROUTING)
show_option (""  LSCP volume support  . . . . . . . . . . . . . . ."" CONFIG_VOLUME)
show_option (""  LSCP edit instrument support . . . . . . . . . . ."" CONFIG_EDIT_INSTRUMENT)
show_option (""  GigaSampler instrument file support (libgig) . . ."" CONFIG_LIBGIG)
if (CONFIG_LIBGIG)
show_option (""  libgig supports fast information retrieval . . . ."" CONFIG_LIBGIG_SETAUTOLOAD)
show_option (""  libgig supports SoundFont2 instruments files . . ."" CONFIG_LIBGIG_SF2)
endif ()
show_option (""  LSCP channel MIDI event support  . . . . . . . . ."" CONFIG_EVENT_CHANNEL_MIDI)
show_option (""  LSCP device MIDI event support . . . . . . . . . ."" CONFIG_EVENT_DEVICE_MIDI)
show_option (""  LSCP runtime max. voices / disk streams support  ."" CONFIG_MAX_VOICES)
message     ("""")
show_option (""  Unique/Single instance support . . . . . . . . . ."" CONFIG_XUNIQUE)
show_option (""  Debugger stack-trace (gdb) . . . . . . . . . . . ."" CONFIG_STACKTRACE)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
32869,gemrb,gemrb,False,False,False,False,False,50,C++,2020-05-17 15:23:57+00:00,2012-01-29 15:26:50+00:00,534,16664,"cmake_minimum_required(VERSION 3.1)
if(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
	cmake_policy(SET CMP0005 NEW)
endif(COMMAND cmake_policy)

set(CMAKE_CXX_STANDARD 11)

# prevent in-source builds
IF(NOT INSOURCEBUILD AND (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR}))
	MESSAGE(FATAL_ERROR ""
		CMake generation for this project is not allowed within the source directory!
		Remove the CMake cache files and try again from another folder, e.g.:
		  rm -r CMakeCache.txt CMakeFiles/
		  mkdir build
		  cd build
		  cmake ..
		If you really want an in-source build, pass -DINSOURCEBUILD=1""
	)
ENDIF()

# If the user specifies -DCMAKE_BUILD_TYPE on the command line, take their definition
# and dump it in the cache along with proper documentation, otherwise set CMAKE_BUILD_TYPE
# to Release prior to calling PROJECT()
IF(DEFINED CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING ""Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
ELSE(DEFINED CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING ""Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
ENDIF(DEFINED CMAKE_BUILD_TYPE)

PROJECT(gemrb)

# Options list
SET(SDL_BACKEND ""Auto"" CACHE STRING ""libSDL version (possible values: Auto, SDL or SDL2)"")
SET_PROPERTY(CACHE SDL_BACKEND PROPERTY STRINGS Auto SDL SDL2)

SET(OPENGL_BACKEND ""None"" CACHE STRING ""OpenGL support (requires SDL2, possible values: None, OpenGL, GLES)"")
SET_PROPERTY(CACHE OPENGL_BACKEND PROPERTY STRINGS None OpenGL GLES)

OPTION(USE_SDLMIXER ""Enable SDL_mixer support"" ON)
OPTION(USE_OPENAL ""Enable OpenAL support"" ON)
OPTION(USE_LIBVLC ""Enable LibVLC support"" ON)
OPTION(USE_FREETYPE ""Enable FreeType support"" ON)
OPTION(USE_PNG ""Enable LibPNG support"" ON)
OPTION(USE_VORBIS ""Enable Vorbis support"" ON)
OPTION(USE_ICONV ""Enable Iconv support"" ON)

# try to extract the version from the source
FILE(READ ${CMAKE_CURRENT_SOURCE_DIR}/gemrb/includes/globals.h GLOBALS)
SET(GEMRB_VERSION """")
STRING(REGEX MATCH ""define VERSION_GEMRB .([^\""]*)"" GEMRB_VERSION ""${GLOBALS}"")
STRING(REGEX REPLACE ""define VERSION_GEMRB .([^\""]*)$"" ""\\1"" GEMRB_VERSION ""${GEMRB_VERSION}"")
if(GEMRB_VERSION STREQUAL """") # lookup failed
	set(GEMRB_VERSION ""unknown"")
endif()
message(STATUS ""Detected version: ${GEMRB_VERSION}"")
unset(GLOBALS)

IF(PREFIX)
	SET(CMAKE_INSTALL_PREFIX ${PREFIX})
	# cmake 3 makes internal use of this variable ...
	UNSET(PREFIX)
	UNSET(PREFIX CACHE)
ENDIF(PREFIX)

if (NOT LAYOUT)
	if (WIN32)
		set(LAYOUT ""home"")
	elseif (APPLE)
		set(LAYOUT ""bundle"")
		# favor mac frameworks over unix libraries
		set(CMAKE_FIND_FRAMEWORK FIRST)
	else (APPLE)
		set(LAYOUT ""fhs"")
	endif (WIN32)
endif (NOT LAYOUT)

SET(LAYOUT ""${LAYOUT}"" CACHE STRING ""Directory layout."")

# macro that sets a default (path) if one wasn't specified
MACRO(SET_PATH variable default)
	IF(NOT ${variable})
		SET(${variable} ${default})
	ENDIF(NOT ${variable})
ENDMACRO(SET_PATH)

if (${LAYOUT} MATCHES ""home"")
	SET_PATH( PLUGIN_DIR ${CMAKE_INSTALL_PREFIX}/plugins/ )
	SET_PATH( DATA_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( MAN_DIR ${CMAKE_INSTALL_PREFIX}/man/man6 )
	SET_PATH( BIN_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( SYSCONF_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( LIB_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( DOC_DIR ${CMAKE_INSTALL_PREFIX}/doc )
	SET_PATH( ICON_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( SVG_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( MENU_DIR ${CMAKE_INSTALL_PREFIX} )
	SET_PATH( EXAMPLE_CONF_DIR ${CMAKE_INSTALL_PREFIX} )
elseif (${LAYOUT} MATCHES ""fhs"")
	SET_PATH( LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib${LIBDIR_SUFFIX}/gemrb )
	SET_PATH( PLUGIN_DIR ${LIB_DIR}/plugins )
	SET_PATH( DATA_DIR ${CMAKE_INSTALL_PREFIX}/share/gemrb )
	SET_PATH( MAN_DIR ${CMAKE_INSTALL_PREFIX}/share/man/man6 )
	SET_PATH( BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin )
	IF( NOT SYSCONF_DIR )
		if ( ${CMAKE_INSTALL_PREFIX} STREQUAL ""/usr"" )
			SET( SYSCONF_DIR /etc/gemrb )
		else ()
			SET( SYSCONF_DIR ${CMAKE_INSTALL_PREFIX}/etc/gemrb )
		endif ()
	ENDIF( NOT SYSCONF_DIR )
	SET_PATH( DOC_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/gemrb )
	SET_PATH( ICON_DIR ${CMAKE_INSTALL_PREFIX}/share/pixmaps )
	SET_PATH( SVG_DIR ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps )
	SET_PATH( MENU_DIR ${CMAKE_INSTALL_PREFIX}/share/applications )
	SET_PATH( EXAMPLE_CONF_DIR ${SYSCONF_DIR} )
elseif (${LAYOUT} MATCHES ""opt"")
	SET_PATH( LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib${LIBDIR_SUFFIX} )
	SET_PATH( PLUGIN_DIR ${LIB_DIR}/plugins )
	SET_PATH( DATA_DIR ${CMAKE_INSTALL_PREFIX}/share/ )
	SET_PATH( MAN_DIR ${CMAKE_INSTALL_PREFIX}/man/man6 )
	SET_PATH( BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin )
	SET_PATH( SYSCONF_DIR ${CMAKE_INSTALL_PREFIX}/etc )
	SET_PATH( DOC_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/gemrb )
	SET_PATH( ICON_DIR ${CMAKE_INSTALL_PREFIX}/share/pixmaps )
	SET_PATH( SVG_DIR ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps )
	SET_PATH( MENU_DIR ${CMAKE_INSTALL_PREFIX}/share/applications )
	SET_PATH( EXAMPLE_CONF_DIR ${SYSCONF_DIR} )
else (${LAYOUT} MATCHES ""bundle"") # Mac or iOS
	SET(CMAKE_INSTALL_RPATH @loader_path/../Frameworks)
	SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE) 
	# most paths are irrelevant since the items will be bundled with application
	SET_PATH( BIN_DIR /Applications )
	# TODO: these should be copied during build and not install.
	SET_PATH( PLUGIN_DIR ""${BIN_DIR}/${PROJECT_NAME}.app/Contents/Plugins"" )
	SET_PATH( DOC_DIR ""${BIN_DIR}/${PROJECT_NAME}.app/Contents/Resources"" )
	SET_PATH( LIB_DIR @loader_path/../Frameworks )
endif (${LAYOUT} MATCHES ""home"")
# convert the slashes for windows' users' convenience
file(TO_NATIVE_PATH ${PLUGIN_DIR} DEFAULT_PLUGINS_DIR)
file(TO_NATIVE_PATH ./Cache2/ DEFAULT_CACHE_DIR)

# check if this is a release version
SET(RC """")
STRING(REGEX MATCH ""-git$"" RC ${GEMRB_VERSION})
if(RC STREQUAL """")
	set (GIT_VERSION 0)
else()
	set (GIT_VERSION 1)
endif()
MESSAGE(STATUS ""Git version bool: ${GIT_VERSION}"")

IF(CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang"")
	INCLUDE(CheckCXXCompilerFlag)
	if ((NOT DISABLE_WERROR) AND GIT_VERSION)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Werror -Wno-error=inline -Wno-error=cast-align -Wmissing-declarations"")
		if(CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
			# clang doesn't know as many -Wno-error directives, so we don't set up these in the shared path above
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wcast-align -Winline"")
			CHECK_CXX_COMPILER_FLAG(""-Wno-error=stringop-truncation"" NO_STRINGOP_TRUNCATION)
			if (NO_STRINGOP_TRUNCATION)
				set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-error=stringop-truncation"")
			endif ()
		else()
			# hit in python2 includes
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-error=deprecated-register"")
		endif ()
	endif ()
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -W -Wpointer-arith "")
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wno-format-y2k -Wno-long-long"")
	# only later c++ standards conditionally allow function/object pointer casts
	# gcc pragmas for disabling are broken: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53431
	if (CMAKE_CXX_COMPILER_ID MATCHES ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-error=pedantic"")
	elseif (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6 OR APPLE))
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-error=pedantic"")
	endif ()
	# mark chars explicitly signed (ARM defaults to unsigned)
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsigned-char"")
	# only export symbols explicitly marked to be exported.
	CHECK_CXX_COMPILER_FLAG(""-fvisibility=hidden"" VISIBILITY_HIDDEN)
	IF (VISIBILITY_HIDDEN AND NOT WIN32)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden"")
	ENDIF ()
	CHECK_CXX_COMPILER_FLAG(""-fno-stack-protector"" STACK_PROTECTOR)
	IF (STACK_PROTECTOR)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-stack-protector"")
	ENDIF ()
	# use a more lenient regex for finding documented switch fallthroughs (gcc7)
	CHECK_CXX_COMPILER_FLAG(""-Wimplicit-fallthrough"" FALLTHROUGH)
	IF (FALLTHROUGH AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wimplicit-fallthrough=2"")
	ENDIF ()
	if (WIN32)
		# GCC 4.5.0+ has shared libstdc++ without dllimport
		set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-auto-import"")
		set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--enable-auto-import"")
	endif (WIN32)
	# Ensure all plugin symbols exist.
	if (NOT APPLE AND NOT UNSAFE_PLUGIN)
		set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--no-undefined"")
	endif (NOT APPLE AND NOT UNSAFE_PLUGIN)
ENDIF()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/"")

IF(NOT STATIC_LINK)
	# prevent static libraries from being selected by FIND_LIBRARY
	LIST(REMOVE_ITEM CMAKE_FIND_LIBRARY_SUFFIXES "".a"")
ENDIF()

# extra search paths for windows builds through AppVeyor
IF(WIN32)
	set(APPVEYOR_DEP_DIR ""$ENV{APPVEYOR_DEPS}"")
	set(APPVEYOR_DEP_SEARCH_PATH
		${APPVEYOR_DEP_DIR}/include/SDL
		${APPVEYOR_DEP_DIR}/include/AL
		${APPVEYOR_DEP_DIR}/include/libpng12
		${APPVEYOR_DEP_DIR}/include/ogg
		${APPVEYOR_DEP_DIR}/include/vorbis
		${APPVEYOR_DEP_DIR}/include
		${APPVEYOR_DEP_DIR}/lib
		${APPVEYOR_DEP_DIR}
	)
	set(CMAKE_PREFIX_PATH ${APPVEYOR_DEP_SEARCH_PATH} ${CMAKE_PREFIX_PATH})
	message(STATUS ""SDLDIR: $ENV{SDLDIR}"")
	message(STATUS ""APPVEYOR env: ${APPVEYOR_DEP_DIR}"")
	message(STATUS ""APPVEYOR paths: ${APPVEYOR_DEP_SEARCH_PATH}"")
ENDIF()

# Check for all the required and optional dependencies
FIND_PACKAGE(PythonLibs 2.3 REQUIRED)
IF(PYTHONLIBS_FOUND)
	MESSAGE(STATUS ""Looking for Python libraries and headers: found"")
ELSE()
	MESSAGE(SEND_ERROR ""Looking for Python libraries and headers: not found!"")
	MESSAGE(FATAL_ERROR ""Please get them (www.python.org)"")
ENDIF()

# Autodetection mechanism
# Default priority to SDL
# If found both backends and USE_SDL2 is active, switching to SDL2
IF(SDL_BACKEND STREQUAL ""Auto"")
	MESSAGE(STATUS ""Autodetecting SDL backend..."")
	INCLUDE(FindSDL)
	INCLUDE(FindSDL2)
	IF(SDL_FOUND)
		MESSAGE(STATUS ""Found SDL 1.2, switching to SDL backend."")
		SET(SDL_BACKEND ""SDL"")
	ENDIF()
	IF((NOT SDL_FOUND AND SDL2_FOUND) OR (SDL_FOUND AND SDL2_FOUND AND USE_SDL2))
		MESSAGE(STATUS ""Found SDL 2.0, switching to SDL2 backend."")
		SET(SDL_BACKEND ""SDL2"")
	ENDIF()
	IF(NOT (SDL_FOUND OR SDL2_FOUND))
		MESSAGE(WARNING ""No SDL or SDL2 libraries found."")
		MESSAGE(FATAL_ERROR ""Please get SDL from www.libsdl.org"")
	ENDIF()
ENDIF()

IF((SDL_BACKEND STREQUAL ""SDL"") AND NOT USE_SDL2)
	INCLUDE(FindSDL)
	IF(USE_SDLMIXER)
		find_package(SDL_mixer MODULE)
	ENDIF()
ENDIF()

IF((SDL_BACKEND STREQUAL ""SDL2"") OR USE_SDL2)
	INCLUDE(FindSDL2)
	# unify SDL variables, so we don't have to differentiate later
	SET(SDL_INCLUDE_DIR ${SDL2_INCLUDE_DIR})
	SET(SDL_LIBRARY ${SDL2_LIBRARY})
	SET(SDL_FOUND ${SDL2_FOUND})

	IF(USE_SDLMIXER)
		find_package(SDL2_mixer MODULE)
		# unify variables, so we don't have to differentiate later
		SET(SDL_MIXER_INCLUDE_DIRS ${SDL2_MIXER_INCLUDE_DIRS})
		SET(SDL_MIXER_INCLUDE_DIRS ${SDL2_MIXER_INCLUDE_DIRS})
		SET(SDL_MIXER_VERSION_STRING ${SDL2_MIXER_VERSION_STRING})
		SET(SDL_MIXER_FOUND ${SDL2_MIXER_FOUND})
	ENDIF()
ENDIF()

# backward compatibility notice - remove USE_SDL2 and OPENGL_BACKEND in the future (added mid 2016)
IF(USE_SDL2)
	MESSAGE(WARNING ""USE_SDL2 has been deprecated, use SDL_BACKEND instead: Auto, SDL, SDL2."")
ENDIF()
IF(USE_OPENGL)
	MESSAGE(WARNING ""USE_OPENGL has been deprecated, use OPENGL_BACKEND instead: None, OpenGL, GLES."")
ENDIF()

IF(SDL_FOUND)
	MESSAGE(STATUS ""Looking for SDL: found"")
	# unify SDL variables, so we don't have to differentiate later
	MESSAGE(STATUS ""Looking for libSDL: found"")
ELSE()
	MESSAGE(WARNING ""Looking for SDL: not found!"")
	MESSAGE(FATAL_ERROR ""Please get SDL from www.libsdl.org"")
ENDIF()

IF(SDL_MIXER_FOUND)
	MESSAGE(STATUS ""Looking for SDL_mixer: found"")
ELSE()
	MESSAGE(WARNING ""Looking for SDL_mixer: not found!"")
	MESSAGE(WARNING ""If you want to build the SDL_mixer plugin, install SDL_mixer first."")
	MESSAGE(WARNING ""Make sure you use a version compatible with the chosen SDL version."")
ENDIF()

IF((NOT OPENGL_BACKEND STREQUAL ""None"") OR USE_OPENGL)
	IF(SDL_BACKEND STREQUAL ""SDL"")
		MESSAGE(FATAL_ERROR ""SDL2 is required for the OpenGL driver!"")
	ENDIF()
	INCLUDE(FindOpenGL)
	IF(NOT OPENGL_FOUND)
		MESSAGE(FATAL_ERROR ""OpenGL library not found!"")
	ENDIF()

	IF((OPENGL_BACKEND STREQUAL ""OpenGL"") OR (USE_OPENGL EQUAL 1))
		ADD_DEFINITIONS(""-DUSE_GL"")
		# Don't delete this - there is code that relies on -DUSE_OPENGL=1
		SET(USE_OPENGL 1)
		INCLUDE(FindGLEW)
		IF(GLEW_FOUND)
			MESSAGE(STATUS ""Looking for Glew: found"")
		ELSE()
			MESSAGE(SEND_ERROR ""Looking for Glew: not found!"")
			MESSAGE(FATAL_ERROR ""Please install the Glew library and headers first!"")
		ENDIF()
	ENDIF()

	IF((OPENGL_BACKEND STREQUAL ""GLES"") OR (USE_OPENGL EQUAL 2))
		# Don't delete this - there is code that relies on -DUSE_OPENGL=2
		SET(USE_OPENGL 2)
		# use GLES instead of regular GL
		SET(GLEW_LIBRARIES """")
		find_path(GLES2_H gl2.h PATH_SUFFIXES GLES2)
		IF(APPLE)
			find_path(GLES2_H gl.h PATH_SUFFIXES OpenGLES/ES2)
		ENDIF()
		IF(GLES2_H)
			MESSAGE(STATUS ""Looking for GLES2: found"")
		ELSE()
			MESSAGE(SEND_ERROR ""Looking for GLES2: not found!"")
			MESSAGE(FATAL_ERROR ""Please install the GLES2 library and headers first!"")
		ENDIF()
	ENDIF()
ENDIF()

INCLUDE(FindZLIB)
IF(ZLIB_FOUND)
	MESSAGE(STATUS ""Looking for Zlib: found"")
ELSE()
	MESSAGE(SEND_ERROR ""Looking for Zlib: not found!"")
	MESSAGE(FATAL_ERROR ""Please install the Zlib library and headers first!"")
ENDIF()

IF(UNIX)
	SET(CMAKE_THREAD_PREFER_PTHREAD true)
	FIND_PACKAGE(Threads REQUIRED)
ENDIF(UNIX)

IF(USE_OPENAL)
	INCLUDE(FindOpenAL)
	IF(OPENAL_FOUND)
		MESSAGE(STATUS ""Looking for OpenAL: found"")
	ELSE()
		MESSAGE(WARNING ""Looking for OpenAL: not found!"")
		MESSAGE(WARNING ""If you want to build the OpenAL plugin, get OpenAL from www.openal.org."")
		MESSAGE(WARNING ""If it just wasn't found, try setting the OPENALDIR environment variable."")
	ENDIF()
ENDIF()

IF(USE_LIBVLC AND NOT MSVC)
	find_package(LIBVLC MODULE)
	IF(LIBVLC_FOUND)
		MESSAGE(STATUS ""Looking for VLC: found"")
	ELSE()
		MESSAGE(WARNING ""Looking for VLC: not found!"")
		MESSAGE(WARNING ""If you want to build the VLC plugin, install VLC first."")
	ENDIF()
ENDIF()

IF(USE_FREETYPE)
	INCLUDE(FindFreetype)
	IF(FREETYPE_FOUND)
		MESSAGE(STATUS ""Looking for Freetype: found"")
		IF(USE_ICONV)
			INCLUDE(FindICONV)
			IF(NOT ICONV_FOUND)
				MESSAGE(WARNING ""Iconv not found. TTF plugin will not be able to translate non-unicode compatible TLK encodings."")
			ELSE()
				set(HAVE_ICONV 1)
			ENDIF()
		ENDIF()
	ELSE()
		MESSAGE(WARNING ""Looking for Freetype: not found!"")
		MESSAGE(WARNING ""If you want to build the TTF plugin, install Freetype first."")
	ENDIF()
ENDIF()

IF(USE_PNG)
	INCLUDE(FindPNG)
	IF(PNG_FOUND)
		MESSAGE(STATUS ""Looking for libPNG: found"")
	ELSE()
		MESSAGE(WARNING ""Looking for libPNG: not found!"")
		MESSAGE(WARNING ""GemRB will be built without any PNG support. Get it from www.libpng.org"" )
		MESSAGE(WARNING ""While no original game data is in PNG format, some mod data is and will need conversion."")
	ENDIF()
ENDIF()

IF(USE_VORBIS)
	FIND_LIBRARY(VORBIS_LIBRARY vorbisfile)
	IF(VORBIS_LIBRARY)
		find_path(VORBIS_FILE vorbisfile.h PATH_SUFFIXES vorbis)
		IF(VORBIS_FILE)
			MESSAGE(STATUS ""Looking for Ogg Vorbis support: found"")
		ELSE()
			unset(VORBIS_LIBRARY) # disable the build for this plugin
		ENDIF()
	ENDIF()
	IF(NOT VORBIS_LIBRARY)
		MESSAGE(WARNING ""Looking for Ogg Vorbis support: not found!"")
		MESSAGE(WARNING ""While no original game data is in OGG format, some mod data is and will need conversion."")
	ENDIF()
ENDIF()

# On Release builds cmake automatically defines NDEBUG, so we
# explicitly undefine it:
# This matches stripped (Release) and nonstripped (RelWithDebInfo) builds
if(CMAKE_BUILD_TYPE MATCHES ""Rel.*"" AND NOT MSVC)
	ADD_DEFINITIONS(""-UNDEBUG"")
endif()

if (STATIC_LINK)
	if (NOT WIN32)
		ADD_DEFINITIONS(""-DSTATIC_LINK"")
	else (NOT WIN32)
		unset(STATIC_LINK CACHE)
		MESSAGE(STATUS ""Static linking not (yet) supported on this platform."")
	endif (NOT WIN32)
endif (STATIC_LINK)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR} gemrb/includes gemrb/core)

# generate config.h
INCLUDE (config)

IF(APPLE)
	# Make sure we can find the 'ibtool' program. we need it to compile xibs
	find_program(IBTOOL ibtool HINTS ""/usr/bin"" ""${OSX_DEVELOPER_ROOT}/usr/bin"")
	IF (${IBTOOL} STREQUAL ""IBTOOL-NOTFOUND"")
  		MESSAGE (FATAL_ERROR ""ibtool can not be found and is needed to compile the .xib files. It should have been installed with 
                    the Apple developer tools. The default system paths were searched in addition to ${OSX_DEVELOPER_ROOT}/usr/bin"")
	ENDIF ()

	ADD_DEFINITIONS(""-x objective-c++"")
	INCLUDE_DIRECTORIES(apple)
	FIND_LIBRARY(COCOA_LIBRARY_PATH Cocoa)
	FIND_LIBRARY(COREFOUNDATION_LIBRARY CoreFoundation)
	# for objective-c++
	SET (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DTARGET_OS_MAC"")
	# for pure objective-c
	SET (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -x objective-c -DTARGET_OS_MAC"")
ENDIF(APPLE)

#Plugin addition macro
MACRO(ADD_GEMRB_PLUGIN plugin_name)
	SET (PLUGIN_BUILD_FILES ${ARGN})
	if (${ARGV1} STREQUAL ""COCOA"")
		LIST(REMOVE_ITEM PLUGIN_BUILD_FILES ""COCOA"")
		#this is an Apple thing
		if (APPLE)
			SET_SOURCE_FILES_PROPERTIES(
				CocoaWrapper.m
				PROPERTIES LANGUAGE C
			)
			message(STATUS ""Will link ${plugin_name} plugin to: ${BUNDLE_LOADER}"")
			SET (PLUGIN_BUILD_FILES ${PLUGIN_BUILD_FILES} CocoaWrapper.m)
		endif (APPLE)
	endif (${ARGV1} STREQUAL ""COCOA"")

	if (STATIC_LINK)
		ADD_LIBRARY(${plugin_name} STATIC ${PLUGIN_BUILD_FILES})
		set(plugins ""${plugins};${plugin_name}"" PARENT_SCOPE)
	else (STATIC_LINK)
		ADD_LIBRARY(${plugin_name} MODULE ${PLUGIN_BUILD_FILES})
		if (NOT UNSAFE_PLUGIN)
			TARGET_LINK_LIBRARIES(${plugin_name} gemrb_core ${CMAKE_THREAD_LIBS_INIT})
		endif (NOT UNSAFE_PLUGIN)
		if (CMAKE_SYSTEM_NAME STREQUAL ""NetBSD"")
			TARGET_LINK_LIBRARIES(${plugin_name} -shared-libgcc)
		elseif (CMAKE_SYSTEM_NAME STREQUAL ""OpenBSD"")
			TARGET_LINK_LIBRARIES(${plugin_name} -lc)
		elseif (CMAKE_SYSTEM_NAME STREQUAL ""Haiku"")
			TARGET_LINK_LIBRARIES(${plugin_name} -lbsd)
		endif (CMAKE_SYSTEM_NAME STREQUAL ""NetBSD"")
		INSTALL(TARGETS ${plugin_name} DESTINATION ${PLUGIN_DIR})
	endif (STATIC_LINK)

	IF (APPLE)
		SET_TARGET_PROPERTIES(${plugin_name} PROPERTIES PREFIX """"
			LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/gemrb/${PROJECT_NAME}.app/Contents/PlugIns)
	ELSE (APPLE)
		SET_TARGET_PROPERTIES(${plugin_name} PROPERTIES PREFIX """"
			INSTALL_RPATH ${LIB_DIR}
			LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/gemrb/plugins)
	ENDIF (APPLE)
ENDMACRO(ADD_GEMRB_PLUGIN)

# also put the chosen paths in the man page (Ubuntu)
CONFIGURE_FILE(
	""${CMAKE_CURRENT_SOURCE_DIR}/gemrb.6.in""
	""${CMAKE_CURRENT_BINARY_DIR}/gemrb.6""
	IMMEDIATE @ONLY
)

ADD_SUBDIRECTORY( gemrb )
IF (NOT APPLE)
	INSTALL( FILES ""${CMAKE_CURRENT_BINARY_DIR}/gemrb.6"" DESTINATION ${MAN_DIR} )
	if (NOT HAIKU)
		INSTALL( FILES artwork/gemrb-logo.png DESTINATION ${ICON_DIR} RENAME gemrb.png )
		INSTALL( FILES artwork/logo04-rb_only.svg DESTINATION ${SVG_DIR} RENAME gemrb.svg )
		INSTALL( FILES gemrb.desktop DESTINATION ${MENU_DIR} )
	ENDIF()
ENDIF()
INSTALL( FILES README.md INSTALL COPYING NEWS AUTHORS DESTINATION ${DOC_DIR} )
INSTALL( FILES admin/extend2da.py DESTINATION ${BIN_DIR}
		PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

CONFIGURE_FILE(
	""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
	""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
	IMMEDIATE @ONLY
)

# copy the variable, since the file uses @VERSION@
set(VERSION ${GEMRB_VERSION})
CONFIGURE_FILE(
	""${CMAKE_CURRENT_SOURCE_DIR}/gemrb.spec.in""
	""${CMAKE_CURRENT_BINARY_DIR}/gemrb.spec""
	IMMEDIATE @ONLY
)

ADD_CUSTOM_TARGET( uninstall
	""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"" )

# make dist for a gzipped tarball of current HEAD
set(ARCHIVE_NAME ${CMAKE_PROJECT_NAME}-${GEMRB_VERSION})
add_custom_target( dist
	COMMAND git archive --worktree-attributes --prefix=${ARCHIVE_NAME}/ HEAD
		| gzip --best > ${CMAKE_BINARY_DIR}/${ARCHIVE_NAME}.tar.gz
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

# pretty-print options macro
# as of 2.8 cmake does not support anything like EVAL
MACRO(PRINT_OPTION option)
if (${option})
	message(STATUS ""  ${option}: ${${option}}"")
else()
	message(STATUS ""  ${option}: disabled"")
endif()
ENDMACRO(PRINT_OPTION)

message(STATUS """")
message(STATUS ""These are the configured paths:"")
message(STATUS ""  PREFIX: ${CMAKE_INSTALL_PREFIX}"")
message(STATUS ""  LIB_DIR: ${LIB_DIR}"")
message(STATUS ""  PLUGIN_DIR: ${PLUGIN_DIR}"")
message(STATUS ""  BIN_DIR: ${BIN_DIR}"")
message(STATUS ""  DATA_DIR: ${DATA_DIR}"")
message(STATUS ""  MAN_DIR: ${MAN_DIR}"")
message(STATUS ""  SYSCONF_DIR: ${SYSCONF_DIR}"")
message(STATUS ""  DOC_DIR: ${DOC_DIR}"")
message(STATUS ""  ICON_DIR: ${ICON_DIR}"")
message(STATUS ""  SVG_DIR: ${SVG_DIR}"")
message(STATUS ""  MENU_DIR: ${MENU_DIR}"")
message(STATUS """")
message(STATUS ""Options:"")
PRINT_OPTION(LAYOUT)
PRINT_OPTION(NOCOLOR)
PRINT_OPTION(STATIC_LINK)
PRINT_OPTION(INSOURCEBUILD)
PRINT_OPTION(DISABLE_WERROR)
PRINT_OPTION(WIN32_USE_STDIO)
PRINT_OPTION(SDL_BACKEND)
PRINT_OPTION(OPENGL_BACKEND)
message(STATUS """")
message(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
message(STATUS ""Target bitness: ${CMAKE_SIZEOF_VOID_P}*8"")
message(STATUS """")
if ((NOT DISABLE_WERROR) AND GIT_VERSION)
	message(STATUS ""Compiler warnings are fatal."")
	message(STATUS ""If you hit one, let us know and rerun cmake with -DDISABLE_WERROR=1 to continue."")
	message(STATUS """")
endif()
",3.1,3.1
32910,Fxrh,Quaternion,False,False,False,False,False,29,C++,2020-04-19 18:27:18+00:00,2016-01-21 23:03:04+00:00,372,1615,"CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
if (POLICY CMP0092)
cmake_policy(SET CMP0092 NEW)
endif()

set(IDENTIFIER ""com.github.quaternion"")
set(COPYRIGHT ""Copyright © 2016-2018 QMatrixClient, 2019 The Quotient Project"")

project(quaternion VERSION 0.0.9.5 LANGUAGES CXX)

if(UNIX AND NOT APPLE)
    set(LINUX 1)
endif(UNIX AND NOT APPLE)

include(CheckCXXCompilerFlag)
if (NOT WIN32)
    include(GNUInstallDirs)
    include(cmake/ECMInstallIcons.cmake)
endif(NOT WIN32)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Debug' as none was specified"")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING ""Choose the type of build"" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

# Setup command line parameters for the compiler and linker
if (MSVC)
    add_compile_options(/EHsc /W4
        /wd4100 /wd4127 /wd4242 /wd4244 /wd4245 /wd4267 /wd4365 /wd4456 /wd4459
        /wd4464 /wd4505 /wd4514 /wd4571 /wd4619 /wd4623 /wd4625 /wd4626 /wd4706
        /wd4710 /wd4774 /wd4820 /wd4946 /wd5026 /wd5027)
else()
    foreach (FLAG """" all pedantic extra no-unused-parameter)
        CHECK_CXX_COMPILER_FLAG(""-W${FLAG}"" WARN_${FLAG}_SUPPORTED)
        if ( WARN_${FLAG}_SUPPORTED AND NOT CMAKE_CXX_FLAGS MATCHES ""(^| )-W?${FLAG}($| )"")
            add_compile_options(-W${FLAG})
        endif ()
    endforeach ()
endif()

# Find the libraries
find_package(Qt5 5.9 REQUIRED Widgets Network Quick Gui LinguistTools Multimedia DBus)
# Qt5_Prefix is only used to show Qt path in message()
# Qt5_BinDir is where all the binary tools for Qt are
if (QT_QMAKE_EXECUTABLE)
    get_filename_component(Qt5_BinDir ""${QT_QMAKE_EXECUTABLE}"" DIRECTORY)
    get_filename_component(Qt5_Prefix ""${Qt5_BinDir}/.."" ABSOLUTE)
else()
    get_filename_component(Qt5_BinDir ""${Qt5_DIR}/../../../bin"" ABSOLUTE)
    get_filename_component(Qt5_Prefix ""${Qt5_DIR}/../../../.."" ABSOLUTE)
endif()
if (USE_QQUICKWIDGET)
    find_package(Qt5 5.9 REQUIRED QuickWidgets)
elseif(NOT DISABLE_QQUICKWIDGET)
    # QQuickWidget only stopped crashing in Qt 5.12, use it by default if found
    find_package(Qt5 5.12 QUIET COMPONENTS QuickWidgets)
    if (Qt5QuickWidgets_FOUND)
        set(USE_QQUICKWIDGET ON)
    endif()
endif()

if(WIN32)
    enable_language(RC)
    include(CMakeDetermineRCCompiler)

    if(MINGW)
        set(CMAKE_RC_COMPILER_INIT windres)
        set(CMAKE_RC_COMPILE_OBJECT ""<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -I${CMAKE_CURRENT_BINARY_DIR} -i <SOURCE> -o <OBJECT>"")
    endif()
endif()

if ((NOT DEFINED USE_INTREE_LIBQMC OR USE_INTREE_LIBQMC)
        AND EXISTS ${PROJECT_SOURCE_DIR}/lib/lib/util.h)
    add_subdirectory(lib)
    include_directories(lib)
    if (NOT DEFINED USE_INTREE_LIBQMC)
        set (USE_INTREE_LIBQMC 1)
    endif ()
endif ()
if (NOT USE_INTREE_LIBQMC)
    find_package(Quotient 0.6 REQUIRED)
    if (NOT Quotient_FOUND)
        message( WARNING ""libQuotient not found; configuration will most likely fail."")
        message( WARNING ""Make sure you have installed libQuotient development files"")
        message( WARNING ""as a package or checked out the library sources in lib/."")
        message( WARNING ""See also BUILDING.md"")
    endif ()
endif ()

find_package(Qt5Keychain QUIET)
if (Qt5Keychain_FOUND)
    set(USE_KEYCHAIN ON)
endif()

message( STATUS )
message( STATUS ""============================================================================="" )
message( STATUS ""                          Quaternion Build Information"" )
message( STATUS ""============================================================================="" )
if (CMAKE_BUILD_TYPE)
    message( STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
endif(CMAKE_BUILD_TYPE)
message( STATUS ""Quaternion install prefix: ${CMAKE_INSTALL_PREFIX}"" )
# Get Git info if possible
find_package(Git)
if(GIT_FOUND)
    execute_process(COMMAND
        ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_SHA1
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    message( STATUS ""Git SHA1: ${GIT_SHA1}"")
endif()
message( STATUS ""Using compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}"" )
message( STATUS ""Using Qt ${Qt5_VERSION} at ${Qt5_Prefix}"" )
if (USE_INTREE_LIBQMC)
    message( STATUS ""Using in-tree libQuotient"")
    if (GIT_FOUND)
        execute_process(COMMAND
            ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib
            OUTPUT_VARIABLE LIB_GIT_SHA1
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        message( STATUS ""  Library git SHA1: ${LIB_GIT_SHA1}"")
    endif (GIT_FOUND)
else ()
    message( STATUS ""Using libQuotient ${Quotient_VERSION} at ${Quotient_DIR}"")
endif ()
if (USE_QQUICKWIDGET)
    message( STATUS ""Using QQuickWidget to render QML"")
endif(USE_QQUICKWIDGET)
if (USE_KEYCHAIN)
    message( STATUS ""Using Qt Keychain ${Qt5Keychain_VERSION} at ${Qt5Keychain_DIR}"")
endif ()
message( STATUS ""============================================================================="" )
message( STATUS )

# Set up source files
set(quaternion_SRCS
    client/quaternionroom.cpp
    client/imageprovider.cpp
    client/activitydetector.cpp
    client/dialog.cpp
    client/logindialog.cpp
    client/networkconfigdialog.cpp
    client/roomdialogs.cpp
    client/mainwindow.cpp
    client/roomlistdock.cpp
    client/userlistdock.cpp
    client/kchatedit.cpp
    client/chatedit.cpp
    client/chatroomwidget.cpp
    client/systemtrayicon.cpp
    client/models/messageeventmodel.cpp
    client/models/userlistmodel.cpp
    client/models/roomlistmodel.cpp
    client/models/abstractroomordering.cpp
    client/models/orderbytag.cpp
    client/main.cpp
    )

set(quaternion_QRC
    client/resources.qrc
    )

# quaternion_en.ts is updated explicitly by building trbase target,
# while all other translation files are created and updated externally at
# Lokalise.co
set(quaternion_en_TS client/translations/quaternion_en.ts)
QT5_CREATE_TRANSLATION(client/translations ${quaternion_SRCS} ${quaternion_QRC} ${quaternion_en_TS})
add_custom_target(trbase SOURCES ${quaternion_en_TS} VERBATIM)

set(quaternion_TS
    client/translations/quaternion_en_GB.ts
    client/translations/quaternion_de_DE.ts
    client/translations/quaternion_pl.ts
    client/translations/quaternion_ru.ts
    )
QT5_ADD_TRANSLATION(quaternion_QM ${quaternion_TS})

QT5_ADD_RESOURCES(quaternion_QRC_SRC ${quaternion_QRC})
set_property(SOURCE qrc_resources.cpp PROPERTY SKIP_AUTOMOC ON)

if(WIN32)
    set(quaternion_WINRC quaternion_win32.rc)
    set_property(SOURCE quaternion_win32.rc APPEND PROPERTY
        OBJECT_DEPENDS ${PROJECT_SOURCE_DIR}/icons/quaternion.ico
    )
endif()

if(APPLE)
    set(MACOSX_BUNDLE_GUI_IDENTIFIER ${IDENTIFIER})
    set(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})

    set(MACOSX_BUNDLE_COPYRIGHT ${COPYRIGHT})

    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${quaternion_VERSION})
    set(MACOSX_BUNDLE_BUNDLE_VERSION ${quaternion_VERSION})

    set(ICON_NAME ""quaternion.icns"")
    set(${PROJECT_NAME}_MAC_ICON ""${PROJECT_SOURCE_DIR}/icons/${ICON_NAME}"")
    set(MACOSX_BUNDLE_ICON_FILE ${ICON_NAME})
    set_property(SOURCE ""${${PROJECT_NAME}_MAC_ICON}"" PROPERTY
        MACOSX_PACKAGE_LOCATION Resources)
endif(APPLE)

# Windows, this is a GUI executable; OSX, make a bundle
add_executable(${PROJECT_NAME} WIN32 MACOSX_BUNDLE
    ${quaternion_SRCS} ${quaternion_QRC_SRC} ${quaternion_QM}
    ${quaternion_WINRC} ${${PROJECT_NAME}_MAC_ICON})

target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)

target_compile_definitions(${PROJECT_NAME} PRIVATE
    GIT_SHA1=""${GIT_SHA1}"" LIB_GIT_SHA1=""${LIB_GIT_SHA1}"")
target_link_libraries(${PROJECT_NAME}
    Quotient Qt5::Widgets Qt5::Quick Qt5::Qml Qt5::Gui Qt5::Network)

if (USE_QQUICKWIDGET)
    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_QQUICKWIDGET)
    target_link_libraries(${PROJECT_NAME} Qt5::QuickWidgets)
endif()

if(USE_KEYCHAIN)
    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_KEYCHAIN)
    target_link_libraries(${PROJECT_NAME} ${QTKEYCHAIN_LIBRARIES})
    include_directories(${QTKEYCHAIN_INCLUDE_DIR})
endif()

# macOS specific config for bundling
if (APPLE)
    set_property(TARGET ${PROJECT_NAME} PROPERTY MACOSX_BUNDLE_INFO_PLIST
                 ""${PROJECT_SOURCE_DIR}/cmake/MacOSXBundleInfo.plist.in"")
endif()

# Installation

if (NOT CMAKE_INSTALL_BINDIR)
    set(CMAKE_INSTALL_BINDIR ""."")
endif()

install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR})
if(LINUX)
    install(FILES linux/${IDENTIFIER}.desktop
            DESTINATION  ${CMAKE_INSTALL_DATADIR}/applications
            )
    install(FILES linux/${IDENTIFIER}.appdata.xml
            DESTINATION  ${CMAKE_INSTALL_DATADIR}/metainfo
            )
    install(FILES ${quaternion_QM}
            DESTINATION ${CMAKE_INSTALL_DATADIR}/Quotient/quaternion/translations
            )
    file(GLOB quaternion_icons icons/quaternion/*-apps-quaternion.png)
    ecm_install_icons(ICONS ${quaternion_icons} icons/quaternion/sc-apps-quaternion.svgz
                      DESTINATION ${CMAKE_INSTALL_DATADIR}/icons
                      )
endif(LINUX)

set(QML_DIR ${PROJECT_SOURCE_DIR}/client/qml)
if (NOT DEPLOY_VERBOSITY)
    set(DEPLOY_VERBOSITY 1) # The default for *deployqt tools, out of 0..3
endif()
if(WIN32)
    install(CODE ""
        message(STATUS \""Running windeployqt at \${CMAKE_INSTALL_PREFIX}\${CMAKE_INSTALL_BINDIR}\"")
        execute_process(
            COMMAND \""${Qt5_BinDir}/windeployqt\"" --verbose ${DEPLOY_VERBOSITY}
                --no-multimediaquick --no-declarative --no-test --no-winextras
                --qmldir \""${QML_DIR}\""
                \${CMAKE_INSTALL_PREFIX}\${CMAKE_INSTALL_BINDIR}
            RESULT_VARIABLE WDQ_RETVAL
        )
        if (WDQ_RETVAL)
            message( \""windeployqt returned \${WDQ_RETVAL} - check messages above\"")
        else()
            message( STATUS \""Quaternion and its dependencies have been deployed to \${CMAKE_INSTALL_PREFIX}.\"")
        endif()
    "")
    install(FILES ${quaternion_QM}
            DESTINATION ${CMAKE_INSTALL_BINDIR}/translations
           )
endif(WIN32)

# Packaging

if(APPLE)
    set(MACDEPLOYQT_ARGS ${PROJECT_NAME}.app -dmg -qmldir=""${QML_DIR}"" -verbose=${DEPLOY_VERBOSITY})
    add_custom_target(image
        COMMAND ""${Qt5_BinDir}/macdeployqt"" ${MACDEPLOYQT_ARGS}
        DEPENDS ${PROJECT_NAME}
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMENT ""Running ${MACDEPLOYQT} with args: ${MACDEPLOYQT_ARGS}""
    )
endif(APPLE)
",3.10,3.1
32971,dean0x7d,pybinding,False,False,False,False,False,2,C++,2020-04-20 23:45:28+00:00,2015-02-21 11:38:54+00:00,97,749,"cmake_minimum_required(VERSION 3.1)
project(pybinding)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build"" FORCE)
endif()

find_program(ccache_found ccache)
if(ccache_found)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif()

add_subdirectory(cppcore)
add_subdirectory(cppmodule)

if(EXISTS ${CMAKE_SOURCE_DIR}/docs)
    add_subdirectory(docs EXCLUDE_FROM_ALL)
endif()

if(TARGET catch)
    add_custom_target(tests COMMAND $<TARGET_FILE:catch> COMMAND ${PYTHON_EXECUTABLE} -m pytest
                      DEPENDS _pybinding WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()
",3.1,3.1
32982,rncbc,synthv1,False,False,False,False,False,2,C++,2020-05-05 08:09:37+00:00,2015-09-22 14:45:51+00:00,22,984,"project(SYNTHV1)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.9.14"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
else ()
  set (VERSION ""${VERSION}"")
endif ()

set (PACKAGE_NAME ""synthv1"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""synthv1"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable JACK standalone build.
option (CONFIG_JACK ""Enable JACK stand-alone build (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable ALSA MIDI support option.
option (CONFIG_ALSA_MIDI ""Enable ALSA MIDI support (default=yes)"" 1)

# Enable LV2 plugin build.
option (CONFIG_LV2 ""Enable LV2 plug-in build (default=yes)"" 1)

option (CONFIG_LV2_UI_X11 ""Enable LV2 plug-in X11 UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_EXTERNAL ""Enable LV2 plug-in External UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_IDLE ""Enable LV2 UI Idle interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_SHOW ""Enable LV2 UI Show interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_RESIZE ""Enable LV2 UI Resize interface support (default=yes)"" 1)

option (CONFIG_LV2_PROGRAMS ""Enable LV2 plug-in Programs support (default=yes)"" 1)

option (CONFIG_LV2_PATCH ""Enable LV2 plug-in Patch support (default=yes)"" 1)

option (CONFIG_LV2_PORT_EVENT ""Enable LV2 plug-in Port-event support (EXPERIMENTAL) (default=no)"" 0)


# Enable liblo availability.
option (CONFIG_LIBLO ""Enable liblo interface (default=yes)"" 1)

# Enable NSM support.
option (CONFIG_NSM ""Enable NSM support (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Make sure we get some subtle optimizations out there...
add_compile_options (-ffast-math)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for JACK libraries.
if (CONFIG_JACK)
  pkg_check_modules (JACK jack>=0.100.0)
  if (JACK_FOUND)
    include_directories (${JACK_INCLUDE_DIRS})
    link_directories (${JACK_LIBRARY_DIRS})
  # link_libraries (${JACK_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for JACK MIDI headers availability.
    if (CONFIG_JACK_MIDI)
      check_include_file (jack/midiport.h HAVE_JACK_MIDIPORT_H)
      if (NOT HAVE_JACK_MIDIPORT_H)
        set (CONFIG_JACK_MIDI 0)
      endif ()
    endif ()
    # Check for JACK session headers availability.
    if (CONFIG_JACK_SESSION)
      check_include_file (jack/session.h HAVE_JACK_SESSION_H)
      if (NOT HAVE_JACK_SESSION_H)
        set (CONFIG_JACK_SESSION 0)
      endif ()
    endif ()
    # Check for JACK session event callback availability.
    if (CONFIG_JACK_SESSION)
      check_function_exists (jack_set_session_callback CONFIG_JACK_SESSION)
    endif ()
    # Check for ALSA libraries.
    if (CONFIG_ALSA_MIDI)
      pkg_check_modules (ALSA alsa)
      set (CONFIG_ALSA_MIDI ${ALSA_FOUND})
      if (CONFIG_ALSA_MIDI)
        include_directories (${ALSA_INCLUDE_DIRS})
        link_directories (${ALSA_LIBRARY_DIRS})
        link_libraries (${ALSA_LIBRARIES})
      # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
      else ()
        message (WARNING ""*** ALSA library not found."")
      endif ()
    endif ()
  else ()
    message (WARNING ""*** JACK library not found."")
    set (CONFIG_JACK 0)
  endif ()
endif ()

if (NOT CONFIG_JACK)
  set (CONFIG_JACK_SESSION 0)
  set (CONFIG_JACK_MIDI 0)
  set (CONFIG_ALSA_MIDI 0)
  set (CONFIG_LIBLO 0)
  set (CONFIG_NSM 0)
endif ()

# Check for LIBLO libraries.
if (CONFIG_LIBLO)
  pkg_check_modules (LIBLO liblo)
  if (LIBLO_FOUND)
    include_directories (${LIBLO_INCLUDE_DIRS})
    link_directories (${LIBLO_LIBRARY_DIRS})
    link_libraries (${LIBLO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LIBLO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LIBLO library not found."")
    set (CONFIG_LIBLO 0)
  endif ()
endif ()

# Check for LV2 support.
if (CONFIG_LV2)
  pkg_check_modules (LV2 lv2)
  if (LV2_FOUND)
    include_directories (${LV2_INCLUDE_DIRS})
    link_directories (${LV2_LIBRARY_DIRS})
    link_libraries (${LV2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LV2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for LV2 Atom support.
    check_include_file (lv2/lv2plug.in/ns/ext/atom/atom.h HAVE_LV2_ATOM_H)
    if (NOT HAVE_LV2_ATOM_H)
      set (CONFIG_LV2_ATOM 0)
    else ()
      set (CONFIG_LV2_ATOM 1)
    endif ()
    set (CONFIG_LV2_ATOM_FORGE_OBJECT ${CONFIG_LV2_ATOM})
    set (CONFIG_LV2_ATOM_FORGE_KEY ${CONFIG_LV2_ATOM})
    # Check for LV2 UI support.
    check_include_file (lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_H)
    if (NOT HAVE_LV2_UI_H)
      set (CONFIG_LV2_UI 0)
    else ()
      set (CONFIG_LV2_UI 1)
    endif ()
    if (NOT CONFIG_LV2_UI)
      set (CONFIG_LV2_UI_X11 0)
      set (CONFIG_LV2_UI_EXTERNAL 0)
      set (CONFIG_LV2_UI_IDLE 0)
      set (CONFIG_LV2_UI_SHOW 0)
      set (CONFIG_LV2_UI_RESIZE 0)
    endif ()
  else ()
    message (WARNING ""*** LV2 SDK not found."")
    set (CONFIG_LV2 0)
  endif ()
endif ()

# Check for LV2 headers.
if (CONFIG_LV2)
  set (LV2_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/lv2)
  set (CMAKE_REQUIRED_INCLUDES ""${LV2_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
  include_directories (${LV2_INCLUDES})
else ()
  set (CONFIG_LV2_UI_X11 0)
  set (CONFIG_LV2_UI_EXTERNAL 0)
  set (CONFIG_LV2_UI_IDLE 0)
  set (CONFIG_LV2_UI_SHOW 0)
  set (CONFIG_LV2_UI_RESIZE 0)
  set (CONFIG_LV2_PROGRAMS 0)
  set (CONFIG_LV2_PATCH 0)
endif ()

if (CONFIG_LV2_UI_EXTERNAL)
  check_include_file (lv2_external_ui.h HAVE_LV2_EXTERNAL_UI_H)
  if (NOT HAVE_LV2_EXTERNAL_UI_H)
    set (CONFIG_LV2_UI_EXTERNAL 0)
  endif ()
endif ()

if (CONFIG_LV2_PROGRAMS)
  check_include_file (lv2_programs.h HAVE_LV2_PROGRAMS_H)
  if (NOT HAVE_LV2_PROGRAMS_H)
    set (CONFIG_LV2_PROGRAMS 0)
  endif ()
endif ()

if (CONFIG_LV2_PATCH)
  check_include_file (lv2/lv2plug.in/ns/ext/patch/patch.h HAVE_LV2_PATCH_H)
  if (NOT HAVE_LV2_PATCH_H)
    set (CONFIG_LV2_PATCH 0)
  endif ()
endif ()


add_subdirectory (src)


configure_file (synthv1.spec.in synthv1.spec IMMEDIATE @ONLY)

install (FILES synthv1.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES synthv1.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME synthv1.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK stand-alone build . . . . . . . . . . . . . ."" CONFIG_JACK)
show_option (""  JACK session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
show_option (""  ALSA MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_ALSA_MIDI)
show_option (""  LV2 plug-in build  . . . . . . . . . . . . . . . ."" CONFIG_LV2)
show_option (""  LV2 plug-in X11 UI support   . . . . . . . . . . ."" CONFIG_LV2_UI_X11)
show_option (""  LV2 plug-in External UI support  . . . . . . . . ."" CONFIG_LV2_UI_EXTERNAL)
show_option (""  LV2 plug-in UI Idle interface support  . . . . . ."" CONFIG_LV2_UI_IDLE)
show_option (""  LV2 plug-in UI Show interface support  . . . . . ."" CONFIG_LV2_UI_SHOW)
show_option (""  LV2 plug-in UI Resize interface support  . . . . ."" CONFIG_LV2_UI_RESIZE)
show_option (""  LV2 plug-in Programs support . . . . . . . . . . ."" CONFIG_LV2_PROGRAMS)
show_option (""  LV2 plug-in Patch support  . . . . . . . . . . . ."" CONFIG_LV2_PATCH)
show_option (""  LV2 plug-in Port-event support (EXPERIMENTAL)  . ."" CONFIG_LV2_PORT_EVENT)
show_option (""  OSC service support (liblo)  . . . . . . . . . . ."" CONFIG_LIBLO)
show_option (""  NSM (Non Session Management) support . . . . . . ."" CONFIG_NSM)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
32987,phyletica,ecoevolity,False,False,False,False,False,2,C++,2020-05-16 04:12:30+00:00,2015-12-12 03:31:45+00:00,4,769,"cmake_minimum_required (VERSION 3.1)

project(""ecoevolity"" C CXX)


#######################################################################
# Get local cmake modules
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/modules"")
include(PreventInSourceBuild)
include(FinalFile)


#######################################################################
# Course versioning
set(PROJECT_MAJOR_VERSION 0)
set(PROJECT_MINOR_VERSION 3)
set(PROJECT_PATCH_VERSION 2)
set(PROJECT_VERSION
    ${PROJECT_MAJOR_VERSION}.${PROJECT_MINOR_VERSION}.${PROJECT_PATCH_VERSION})


#######################################################################
# Testing
enable_testing(true)  # Enables unit-testing.


#######################################################################
# Project paths
get_filename_component(BASE_DIR ""${PROJECT_SOURCE_DIR}"" REALPATH)
set(SOURCE_DIR ""${BASE_DIR}/src"")
set(ECOEVOLITY_SOURCE_DIR ""${SOURCE_DIR}/ecoevolity"")
set(EXTERNAL_PROJECT_DIR ""${SOURCE_DIR}/external"")
set(NCL_SOURCE_DIR ""${EXTERNAL_PROJECT_DIR}/ncl"")
set(YAML_CPP_SOURCE_DIR ""${EXTERNAL_PROJECT_DIR}/yaml-cpp-master-7d2873c"")
set(TEST_DIR ""${BASE_DIR}/test"")
set(TEST_DATA_DIR ""${TEST_DIR}/data"")


#######################################################################
# Find and set up NCL variables
option (FORCE_BUNDLED_NCL ""Use included NCL library"" ON)
include(FindNCL)
include_directories(""${NCL_INCLUDE_DIRS}"")


#######################################################################
# Find and set up yaml-cpp variables
option (FORCE_BUNDLED_YAML_CPP ""Use included yaml-cpp library"" ON)
if (NOT FORCE_BUNDLED_YAML_CPP)
    include(FindYamlCpp)
else()
    set(YAML_CPP_FOUND OFF)
endif()

set(USING_BUNDLED_YAML_CPP OFF)
if (NOT YAML_CPP_FOUND)
    set(YAML_CPP_LIBRARY yaml)
    set(YAML_CPP_INCLUDE_DIR ""${YAML_CPP_SOURCE_DIR}/include"")
    set(USING_BUNDLED_YAML_CPP ON)
endif()
MESSAGE(STATUS ""USING_BUNDLED_YAML_CPP: ${USING_BUNDLED_YAML_CPP}"")


#######################################################################
# Find and set up threads variables
option (BUILD_WITH_THREADS ""Build to use multithreading"" OFF)
if (BUILD_WITH_THREADS)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
    add_definitions(-DBUILD_WITH_THREADS)
endif()
MESSAGE(STATUS ""BUILD_WITH_THREADS: ${BUILD_WITH_THREADS}"")


#######################################################################
# Compiler settings 
option (STATIC_LINKING ""Build with static links"" OFF)
if (STATIC_LINKING)
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static"")
endif()
MESSAGE(STATUS ""Using static linking: ${STATIC_LINKING}"")


if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif()
MESSAGE(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")

if (${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL ""Clang"" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL ""AppleClang"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -pedantic -Wall -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wundef -Werror -Wno-unused -Wstrict-overflow=2"")
    # NCL errors: -Wold-style-cast -Wsign-conversion 
    # yaml-cpp errors: -Wshadow -Wswitch-default
    if (${USING_BUNDLED_NCL} OR ${USING_BUNDLED_YAML_CPP})
        set(CMAKE_CXX_FLAGS ""-std=c++11 -pedantic -Wall"")
    endif()
    if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL ""AppleClang"")
        # set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -stdlib=libc++"")
        set(CMAKE_CXX_FLAGS ""-std=c++11 -pedantic -Wall"")
    endif()
    set(CMAKE_CXX_FLAGS_DEBUG ""-O0 -g3"")
    set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -DNDEBUG"")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELEASE} -g"")
endif()


#######################################################################
# Fine versioning

# configure a version file to pass CMake and Git settings to source code
include(TrackGitRevision)
get_git_revision_info(
    PROJECT_GIT_SHA1
    PROJECT_GIT_SHA1_SHORT
    PROJECT_GIT_BRANCH
    PROJECT_GIT_COMMIT_DATE
    PROJECT_GIT_COMMIT_TIMESTAMP)
if (PROJECT_GIT_SHA1)
    set(PROJECT_SOURCE_IDENTIFIER
        ""${PROJECT_GIT_BRANCH} ${PROJECT_GIT_SHA1_SHORT}: ${PROJECT_GIT_COMMIT_DATE}"")
    set(PROJECT_DETAILED_VERSION
        ""${PROJECT_VERSION} (${PROJECT_SOURCE_IDENTIFIER})"")
    set(PROJECT_SOURCE_IDENTIFIED 1)
else()
    set(PROJECT_SOURCE_IDENTIFIED 0)
    set(PROJECT_DETAILED_VERSION
        ""${PROJECT_VERSION}"")
endif()

# #cmakedefine creates a valid macro with the contents of the variable if
# it is not empty, and undefines and comments out the line if not
file(WRITE ${ECOEVOLITY_SOURCE_DIR}/version.hpp.in
""/**
 * This file is automatically generated during cmake configuration.
 * Do NOT modify the contents here; modify the root 'CMakelists.txt'
 * file instead.
 */

#ifndef ECOEVOLITY_VERSION_HPP
#define ECOEVOLITY_VERSION_HPP
#cmakedefine01 PROJECT_SOURCE_IDENTIFIED
#cmakedefine PROJECT_GIT_SHA1               \""${PROJECT_GIT_SHA1}\""
#cmakedefine PROJECT_GIT_SHA1_SHORT         \""${PROJECT_GIT_SHA1_SHORT}\""
#cmakedefine PROJECT_GIT_BRANCH             \""${PROJECT_GIT_BRANCH}\""
#cmakedefine PROJECT_GIT_COMMIT_DATE        \""${PROJECT_GIT_COMMIT_DATE}\""
#cmakedefine PROJECT_GIT_COMMIT_TIMESTAMP   \""${PROJECT_GIT_COMMIT_TIMESTAMP}\""
#cmakedefine PROJECT_SOURCE_IDENTIFIER      \""${PROJECT_SOURCE_IDENTIFIER}\""
#cmakedefine PROJECT_VERSION                \""${PROJECT_VERSION}\""
#cmakedefine PROJECT_DETAILED_VERSION       \""${PROJECT_DETAILED_VERSION}\""
#define PROJECT_NAME                   \""Ecoevolity\""
#endif
"")
configure_file(
    ""${ECOEVOLITY_SOURCE_DIR}/version.hpp.in""
    ""${ECOEVOLITY_SOURCE_DIR}/version.hpp"" @ONLY)

# add binary tree to search path so version.hpp can be found
include_directories(""${PROJECT_BINARY_DIR}"")


#######################################################################
# Add subdirectories 
add_subdirectory(""${SOURCE_DIR}"")
add_subdirectory(""${ECOEVOLITY_SOURCE_DIR}"")
add_subdirectory(""${EXTERNAL_PROJECT_DIR}"")
add_subdirectory(""${TEST_DIR}"")
add_subdirectory(""${TEST_DATA_DIR}"")


#######################################################################
# CPack settings 
set (CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set (CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt"")
set (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR_VERSION})
set (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR_VERSION})
set (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATCH_VERSION})
set (CPACK_GENERATOR ""TGZ"")
set (CPACK_SOURCE_PACKAGE_FILE_NAME
    ""${CMAKE_PROJECT_NAME}-${PROJECT_MAJOR_VERSION}.${PROJECT_MINOR_VERSION}.${PROJECT_PATCH_VERSION}-${PROJECT_GIT_BRANCH}-${PROJECT_GIT_SHA1_SHORT}-${PROJECT_GIT_COMMIT_TIMESTAMP}""
    )
set (CPACK_SOURCE_IGNORE_FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/;/.git/;~$;.swp$;${CPACK_SOURCE_IGNORE_FILES}""
    )
include (CPack)

add_custom_target (dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)
",3.1,3.1
33007,lxde,lxqt-powermanagement,False,False,False,False,False,74,C++,2020-05-15 09:56:57+00:00,2013-08-10 17:48:33+00:00,12,535,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-powermanagement)

include(GNUInstallDirs)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)

set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Svg ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(KF5IdleTime ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(KF5Solid ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-globalkeys-ui ${LXQT_GLOBALKEYS_MINIMUM_VERSION} REQUIRED)

message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

# Patch Version
set(LXQT_POWERMANAGEMENT_PATCH_VERSION 0)

set(LXQT_POWERMANAGEMENT_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_POWERMANAGEMENT_PATCH_VERSION})
add_definitions(
    ""-DLXQT_POWERMANAGEMENT_VERSION=\""${LXQT_POWERMANAGEMENT_VERSION}\""""
)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Translations **********************************
include(LXQtTranslate)

add_subdirectory(config)
add_subdirectory(src)
add_subdirectory(autostart)
",3.1.0,3.1
33374,qbasicer,qzdl,False,False,False,False,False,5,C++,2020-04-22 16:05:58+00:00,2011-01-12 00:16:24+00:00,69,506,"cmake_minimum_required(VERSION 3.10)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

project(qzdl LANGUAGES C CXX)
find_package(Qt5 COMPONENTS Core Widgets REQUIRED)

add_executable(
	zdl
	ZDLAboutDialog.cpp
	ZDLAdvancedMultiplayerDialog.cpp
	ZDLDMFlagCheckbox.cpp
	ZDLDMFlagManager.cpp
	ZDLFileList.cpp
	ZDLFileListable.cpp
	ZDLFilePane.cpp
	ZDLIWadList.cpp
	ZDLInfoBar.cpp
	ZDLInterface.cpp
	ZDLListWidget.cpp
	ZDLListable.cpp
	ZDLMainWindow.cpp
	ZDLMapFile.cpp
	ZDLMultiPane.cpp
	ZDLNameInput.cpp
	ZDLNameListable.cpp
	ZDLQSplitter.cpp
	ZDLSettingsPane.cpp
	ZDLSettingsTab.cpp
	ZDLSourcePortList.cpp
	ZDLWidget.cpp
	ZDMFlagPicker.cpp
	libwad.cpp
	qzdl.cpp
	${PROJECT_SOURCE_DIR}/zdlconf/zdlconf.cpp
	${PROJECT_SOURCE_DIR}/zdlconf/inih-r44/ini.c
)

target_include_directories(zdl PRIVATE ${PROJECT_SOURCE_DIR}/zdlconf)
target_include_directories(zdl PRIVATE ${PROJECT_SOURCE_DIR}/zdlconf/inih-r44)
target_link_libraries(zdl Qt5::Core Qt5::Widgets)
",3.10,3.1
33493,kennethshackleton,SKPokerEval,False,False,False,False,False,2,C++,2020-04-19 09:31:21+00:00,2011-07-19 13:55:40+00:00,174,277,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)

set(PROJECT_NAME SKPokerEval)
project(${PROJECT_NAME})

# Versioning.
set(SK_POKER_EVAL_VERSION_MAJOR 1)
set(SK_POKER_EVAL_VERSION_MINOR 9)
set(SK_POKER_EVAL_VERSION_PATCH 0)

# Get the current commit.
execute_process(
  COMMAND git log -1 --format=%H
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE SK_POKER_EVAL_GIT_COMMIT
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

configure_file (
  ""${PROJECT_SOURCE_DIR}/src/SKConfig.h.in""
  ""${PROJECT_BINARY_DIR}/generated/SKConfig.h""
)

# Includes.
include_directories(""${PROJECT_SOURCE_DIR}/generated"")

# Output directories.
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

set(CMAKE_CXX_FLAGS ""-g -Wall"")
set(CMAKE_CXX_STANDARD 11)

# Build
add_subdirectory(src)

# Testing
enable_testing()
add_subdirectory(lib/gtest-1.7.0)
include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})

add_executable(eval_tests tests/five_eval_tests.cpp tests/seven_eval_tests.cpp)

target_link_libraries(eval_tests gtest_main skpokereval)
add_test(NAME GTests COMMAND eval_tests)

",3.1.0,3.1
33522,MUME,MMapper,False,False,False,False,False,12,C++,2020-05-16 04:06:43+00:00,2014-09-20 05:26:27+00:00,15,1277,"cmake_minimum_required(VERSION 3.1.0)
project(mmapper CXX)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""Build type (default RelWithDebInfo)"" FORCE)
endif()

# Version
file(STRINGS ""MMAPPER_VERSION"" MMAPPER_VERSION)
message(STATUS ""MMapper version ${MMAPPER_VERSION} (${CMAKE_BUILD_TYPE} distribution)"")

# Options
option(WITH_ZLIB ""zlib compressed old save backwards compatability"" ON)
option(WITH_UPDATER ""Check GitHub for new releases"" ON)
option(WITH_OPENSSL ""Use OpenSSL for TLS encryption"" ON)
option(WITH_MINIUPNPC ""Use MiniUPnPc for group manager port forwarding"" ON)
option(WITH_MAP ""Download the default map"" ON)
option(WITH_TESTS ""Compile unit tests"" ON)
option(USE_TIDY ""Run clang-tidy with the compiler"" OFF)
option(USE_IWYU ""Run include-what-you-use with the compiler"" OFF)
option(USE_DISTCC ""Use distcc for distributed builds"" OFF)
option(USE_CODE_COVERAGE ""Run code coverage reporting"" OFF)
option(USE_COTIRE ""Run cotire to speed up the build"" OFF)
if(WIN32 AND MINGW)
   option(WITH_DRMINGW ""Include Dr. Mingw crash dumping (Windows only)"" ON)
endif()

find_package(Qt5 COMPONENTS REQUIRED Core Widgets Network OpenGL Test)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

if(Qt5Core_FOUND)
    if(Qt5Core_VERSION VERSION_LESS 5.9.0)
        message(FATAL_ERROR ""Minimum supported Qt version is 5.9"")
    endif()
    file(WRITE ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/CheckQtGLES20.cpp
        ""#include <QOpenGLFunctions_ES2>
        #ifndef QT_OPENGL_ES_2
        # error
        #endif
        int main(int argc, char** argv) { return 0; }"")
    try_compile(QT_HAS_GLES_20
                    ${CMAKE_BINARY_DIR}
                    ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/CheckQtGLES20.cpp
                    LINK_LIBRARIES Qt5::OpenGL
                    OUTPUT_VARIABLE OUTPUT)
    file(WRITE ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/CheckQtOpenGL20.cpp
        ""#include <QOpenGLFunctions_2_0>
        #ifndef GL_QUADS
        # error
        #endif
        int main(int argc, char** argv) { return 0; }"")
    try_compile(QT_HAS_OPENGL
                    ${CMAKE_BINARY_DIR}
                    ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/CheckQtOpenGL20.cpp
                    LINK_LIBRARIES Qt5::OpenGL
                    OUTPUT_VARIABLE OUTPUT)
     if(QT_HAS_GLES_20 AND QT_HAS_OPENGL)
         message(STATUS ""QOpenGLFunctions supports both GLES 2.0 and OpenGL 2.0"")
     elseif(QT_HAS_GLES_20)
         message(STATUS ""QOpenGLFunctions supports GLES 2.0"")
     elseif(QT_HAS_OPENGL)
         message(STATUS ""QOpenGLFunctions supports OpenGL 2.0"")
     else()
         message(FATAL_ERROR ""QOpenGLFunctions does not support GLES 2.0 or OpenGL 2.0"")
     endif()
endif()

if(APPLE)
    set(CMAKE_MACOSX_RPATH TRUE)
    # C++17 std::optional requires macOS 10.14
    set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.14"" CACHE STRING ""Minimum OS X deployment version"")
endif()

if(WIN32)
    # Target Windows 7 and above
    add_definitions(/DNTDDI_VERSION=0x06010000)
    add_definitions(/D_WIN32_WINNT=0x0601)
    # Reduce the size of the Windows header files
    add_definitions(/DWIN32_LEAN_AND_MEAN)
endif()

# Try to find the system copy of zlib
if(WITH_ZLIB)
    find_package(ZLIB)
    add_subdirectory(external/zlib)
    add_definitions(/DZLIB_CONST)
else()
    message(STATUS ""Building without zlib"")
    add_definitions(/DMMAPPER_NO_ZLIB)
endif()

if(WITH_OPENSSL)
    # Prevent 32bit OpenSSL linking error due to system C:/Windows/System32/libcrypto.dll
    if(MINGW AND ""${CMAKE_SIZEOF_VOID_P}"" EQUAL ""4"")
        set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .dll.a)
    endif()
    find_package(OpenSSL)
    add_subdirectory(external/openssl)
else()
    message(STATUS ""Building without OpenSSL TLS encryption"")
    add_definitions(/DMMAPPER_NO_OPENSSL)
endif()

if(WITH_MINIUPNPC)
    find_package(MiniUPnPc)
    add_subdirectory(external/miniupnpc)
else()
    message(STATUS ""Building without MiniUPnPc group manager port forwarding"")
    add_definitions(/DMMAPPER_NO_MINIUPNPC)
endif()

add_subdirectory(external/glm)

# Extract git branch and revision
if(EXISTS ""${PROJECT_SOURCE_DIR}/.git"")
    find_package(Git)
    if(GIT_FOUND)
        # Get the current working branch
        execute_process(
          COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
          OUTPUT_VARIABLE GIT_BRANCH
          OUTPUT_STRIP_TRAILING_WHITESPACE
        )

        # Fetch the latest tags
        execute_process(
          COMMAND ${GIT_EXECUTABLE} fetch --tags
          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        )

        # Describe the most recent tag, number of commits since, and abbreviated commit hash
        execute_process(
          COMMAND ${GIT_EXECUTABLE} describe --tags --always --long
          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
          OUTPUT_VARIABLE GIT_TAG_COMMIT_HASH
          OUTPUT_STRIP_TRAILING_WHITESPACE
        )

        # Detect if this checkout is a tag and extract its name if so
        execute_process(
          COMMAND ${GIT_EXECUTABLE} name-rev --name-only --tags --no-undefined HEAD
          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
          OUTPUT_VARIABLE GIT_TAG_NAME
          OUTPUT_STRIP_TRAILING_WHITESPACE
          ERROR_QUIET
        )

        # Detect last annotated tag for map downloading
        execute_process(
          COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=0
          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_LAST_ANNOTATED_TAG
          OUTPUT_STRIP_TRAILING_WHITESPACE
        )

        if(GIT_TAG_NAME)
           message(STATUS ""Building from branch ${GIT_BRANCH} with tag ${GIT_TAG_NAME}"")
           set(MMAPPER_VERSION_STRING ""${GIT_TAG_NAME}"")
           set(MMAPPER_BETA ""false"")
        else()
           message(STATUS ""Building from branch ${GIT_BRANCH} with ref ${GIT_TAG_COMMIT_HASH}"")
           set(MMAPPER_VERSION_STRING ""${GIT_TAG_COMMIT_HASH}"")
           set(MMAPPER_BETA ""true"")
        endif()
    endif()
endif()
if(NOT MMAPPER_VERSION_STRING)
    set(MMAPPER_VERSION_STRING ""${MMAPPER_VERSION}"")
    set(MMAPPER_BETA ""false"")
endif()
if(NOT GIT_BRANCH)
    set(GIT_BRANCH ""unknown"")
endif()

string(TOUPPER ""${CMAKE_BUILD_TYPE}"" CMAKE_BUILD_TYPE_UPPER)
if(CMAKE_BUILD_TYPE_UPPER STREQUAL ""DEBUG"")
    message(STATUS ""Debug build type: ${CMAKE_BUILD_TYPE}"")
    set(MMAPPER_IS_DEBUG ""YES"")
else()
    message(STATUS ""Release build type: ${CMAKE_BUILD_TYPE}"")
    set(MMAPPER_IS_DEBUG ""NO"")
endif()

if(WITH_DRMINGW)
    if(CMAKE_BUILD_TYPE_UPPER MATCHES ""^(DEBUG|RELWITHDEBINFO)$"")
        add_subdirectory(external/drmingw)
        add_definitions(/DWITH_DRMINGW)
    else()
        message(FATAL_ERROR ""Build MISSING debug symbols: use `-DWITH_DRMINGW=OFF` to build without crash reporting"")
    endif()
endif()

# Code Coverage Configuration
add_library(coverage_config INTERFACE)
if(USE_CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang"")
    message(STATUS ""Enabling code coverage reporting"")
    # Add required flags (GCC & LLVM/Clang)
    target_compile_options(coverage_config INTERFACE
        -O0        # no optimization
        -g         # generate debug info
        --coverage # sets all required flags
    )
    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
        target_link_options(coverage_config INTERFACE --coverage)
    else()
        target_link_libraries(coverage_config INTERFACE --coverage)
    endif()
endif()

if(MMAPPER_IS_DEBUG)
    set(CMAKE_VERBOSE_MAKEFILE true)

    if(NOT MSVC)
        # common options for gcc and clang
        add_compile_options(-O0)
        add_compile_options(-Wall -Wextra -pedantic)

        # -g     = debugging in OS native format (also note: -g is ignored by the linker)
        # -ggdb  = use gdb debugging format (defaults to -ggdb2)
        # -ggdb3 = adds macro definitions
        add_compile_options(-ggdb3)

        # improved debugging experience
        add_compile_options(-fno-omit-frame-pointer -fno-optimize-sibling-calls)
        add_compile_options(-fno-inline -fno-inline-functions)

        message(STATUS ""Forcing QT assertions"")
        add_definitions(-DQT_FORCE_ASSERTS)

        message(STATUS ""Using _GLIBCXX_DEBUG"")
        add_definitions(-D_GLIBCXX_DEBUG) # c++ STL debugging
    endif()
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
    message(STATUS ""Building with GCC (${CMAKE_CXX_COMPILER})"")
    if(MMAPPER_IS_DEBUG)
        if(FALSE)
            # This doesn't work on my machine. All the __asan_xxx symbols are undefined.
            message(""-- Building with GCC address sanitizer"")
            add_compile_options(-fsanitize=address)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
        endif()

        add_compile_options(-Waddress)
        add_compile_options(-Wcast-align)
        add_compile_options(-Wcast-qual)
        add_compile_options(-Wconversion)
        add_compile_options(-Wdelete-non-virtual-dtor -Wnon-virtual-dtor)
        add_compile_options(-Wendif-labels)
        add_compile_options(-Wenum-compare)
        add_compile_options(-Werror=switch)
        add_compile_options(-Wignored-qualifiers)
        add_compile_options(-Winit-self)
        add_compile_options(-Wmultichar)
        add_compile_options(-Wnarrowing)
        add_compile_options(-Wnonnull)
        add_compile_options(-Wnormalized)
        add_compile_options(-Wold-style-cast)
        add_compile_options(-Wparentheses)
        add_compile_options(-Wpointer-arith)
        add_compile_options(-Wredundant-decls)
        add_compile_options(-Wsequence-point)
        add_compile_options(-Wsign-conversion)
        add_compile_options(-Wsign-promo)
        add_compile_options(-Wstrict-aliasing)
        add_compile_options(-Wstrict-null-sentinel)
        add_compile_options(-Wsuggest-override)
        add_compile_options(-Wtype-limits)
        add_compile_options(-Wundef)
        add_compile_options(-Wuninitialized)
        add_compile_options(-Wunused-result)
        add_compile_options(-Wunused-variable)
        add_compile_options(-Wvla)
        add_compile_options(-Wwrite-strings)

        # always ignored
        add_compile_options(-Wno-system-headers)
        # add_compile_options(-Wno-unknown-pragmas)
        # add_compile_options(-Wno-deprecated-declarations)

        # always errors
        add_compile_options(-Werror=double-promotion)
        add_compile_options(-Werror=reorder)
        add_compile_options(-Werror=return-local-addr)
        add_compile_options(-Werror=return-type)
        add_compile_options(-Werror=sign-compare)
    endif(MMAPPER_IS_DEBUG)
elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    message(STATUS ""Building with Clang (${CMAKE_CXX_COMPILER})"")
    add_compile_options(-fno-standalone-debug)

    if(WIN32)
        # Clang on MSYS2 need an additional option to work
        add_compile_options(-femulated-tls)
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -femulated-tls"")
    endif()

    if(MMAPPER_IS_DEBUG)
        if(FALSE)
            # segfaults in ASAN initializer on 32-bit Ubuntu 18.04.1 with clang 6.0
            # note: apparently -fsanitize=address can't be used with gnu libc 2.25+
            # Ubuntu 18.04.1 has libc 2.27.
            message(STATUS ""Building with Clang address sanitizer"")
            add_compile_options(-fsanitize=address)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address"")
        endif()

        if(TRUE)
            message(STATUS ""Building with Clang undefined behavior sanitizer"")
            add_compile_options(-fsanitize=undefined)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined"")
        endif()

        if(WIN32)
            # Clang on MSYS2 needs an additional option for UBSAN to work
            add_compile_options(-fsanitize-undefined-trap-on-error)
            set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -fsanitize-undefined-trap-on-error"")
        endif()

        add_compile_options(-Weverything)
        add_compile_options(-Wno-c++98-c++11-compat-binary-literal) # never useful.
        add_compile_options(-Wno-c++98-compat) # never useful.
        add_compile_options(-Wno-c++98-compat-pedantic) # sometimes useful.
        add_compile_options(-Wno-covered-switch-default) # this is never an error; it's just extra info.
        # add_compile_options(-Wno-deprecated-declarations)
        add_compile_options(-Wno-documentation)
        add_compile_options(-Wno-global-constructors -Wno-exit-time-destructors) # these go together.
        add_compile_options(-Wno-padded) # this isn't usually a mistake; it's just extra info.
        add_compile_options(-Wno-redundant-parens) # MOCs spam this.
        add_compile_options(-Wno-unreachable-code-break) # break after [[noreturn]] function is not a mistake; omitting the break is a recipe for future disaster.

        # always errors
        add_compile_options(-Werror=cast-qual) # always a mistake unless you added the qualifier yourself.
        add_compile_options(-Werror=conversion)
        add_compile_options(-Werror=double-promotion)
        add_compile_options(-Werror=float-conversion)
        add_compile_options(-Werror=float-equal) # this is usually an error.
        add_compile_options(-Werror=implicit-fallthrough)
        add_compile_options(-Werror=inconsistent-missing-destructor-override)
        add_compile_options(-Werror=inconsistent-missing-override)
        add_compile_options(-Werror=newline-eof)
        add_compile_options(-Werror=old-style-cast)
        add_compile_options(-Werror=pedantic)
        add_compile_options(-Werror=return-stack-address)
        add_compile_options(-Werror=return-type)
        add_compile_options(-Werror=reorder)
        # ignore common idioms; otherwise shadowing is an error
        add_compile_options(-Werror=shadow -Wno-shadow-field-in-constructor -Wno-shadow-uncaptured-local)
        add_compile_options(-Werror=shorten-64-to-32)
        add_compile_options(-Werror=sign-conversion) # can warn about hard-to-spot bugs.
        add_compile_options(-Werror=switch)
        add_compile_options(-Werror=unused-result) # required for c++17 [[nodiscard]]
        add_compile_options(-Werror=weak-vtables) # can result in crashes for ODR violations.
    endif(MMAPPER_IS_DEBUG)
endif()

# Download arda.mm2
if(WITH_MAP)
    set(MMAPPER_MAP_FILE ""${CMAKE_BINARY_DIR}/map/arda.mm2"")
    if(NOT EXISTS ${MMAPPER_MAP_FILE})
        set(MMAPPER_MAP_URL ""https://github.com/MUME/MMapper/releases/download/v${MMAPPER_VERSION}/arda.mm2"")
        message(STATUS ""Fetching MMapper Map from: ${MMAPPER_MAP_URL}"")

        file(DOWNLOAD ${MMAPPER_MAP_URL} ${MMAPPER_MAP_FILE} STATUS MMAPPER_MAP_HTTP_STATUS)
        list(GET MMAPPER_MAP_HTTP_STATUS 0 MMAPPER_MAP_STATUS)

        if(MMAPPER_MAP_STATUS)
            file(REMOVE ${MMAPPER_MAP_FILE})
            if(GIT_LAST_ANNOTATED_TAG)
                set(MMAPPER_MAP_URL ""https://github.com/MUME/MMapper/releases/download/${GIT_LAST_ANNOTATED_TAG}/arda.mm2"")
                message(STATUS ""Map not found. Fetching alternative map from: ${MMAPPER_MAP_URL}"")
                file(DOWNLOAD ${MMAPPER_MAP_URL} ${MMAPPER_MAP_FILE} STATUS MMAPPER_MAP_HTTP_STATUS)
                list(GET MMAPPER_MAP_HTTP_STATUS 0 MMAPPER_MAP_STATUS)
            endif()
        endif()

        if(MMAPPER_MAP_STATUS)
            file(REMOVE ${MMAPPER_MAP_FILE})
            message(FATAL_ERROR ""Unable to download map: use `-DWITH_MAP=OFF` to not require a map"")
        else()
            message(STATUS ""Downloaded map to: ${MMAPPER_MAP_FILE}"")
        endif()
    else()
        message(STATUS ""Using cached MMapper map: ${MMAPPER_MAP_FILE}"")
    endif()
else()
    message(STATUS ""Building without default map as a resource"")
    add_definitions(/DMMAPPER_NO_MAP)
endif()

if(NOT WITH_UPDATER)
    add_definitions(/DMMAPPER_NO_UPDATER)
endif()

add_subdirectory(src)
add_subdirectory(appdata)
if(WITH_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

message("""") # blank line
include(FeatureSummary)
add_feature_info(""WITH_ZLIB"" WITH_ZLIB ""backwards compatability with old .mm2 saves"")
add_feature_info(""WITH_UPDATER"" WITH_UPDATER ""check GitHub for new releases"")
add_feature_info(""WITH_OPENSSL"" WITH_OPENSSL ""encrypt connection to MUME with TLS"")
add_feature_info(""WITH_MINIUPNPC"" WITH_MINIUPNPC ""port forwarding for group manager with UPnP IGD"")
add_feature_info(""WITH_MAP"" WITH_MAP ""include default map as a resource"")
add_feature_info(""WITH_TESTS"" WITH_MAP ""compile unit tests"")
add_feature_info(""USE_TIDY"" USE_TIDY """")
add_feature_info(""USE_IWYU"" USE_IWYU """")
add_feature_info(""USE_DISTCC"" USE_DISTCC """")
add_feature_info(""USE_CODE_COVERAGE"" USE_CODE_COVERAGE """")
add_feature_info(""USE_COTIRE"" USE_COTIRE """")
if(WIN32 AND MINGW)
    add_feature_info(""WITH_DRMINGW"" WITH_DRMINGW ""crash logging with Dr. Mingw (Windows only)"")
endif()
feature_summary(WHAT ENABLED_FEATURES DESCRIPTION ""Enabled options:"")
feature_summary(WHAT DISABLED_FEATURES DESCRIPTION ""Disabled options:"")
",3.1.0,3.1
33533,BelledonneCommunications,ortp,False,False,False,False,False,14,C,2020-05-14 16:29:24+00:00,2015-01-14 10:23:34+00:00,87,1876,"############################################################################
# CMakeLists.txt
# Copyright (C) 2010-2019  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)
project(oRTP VERSION 4.4.0)


set(ORTP_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set(ORTP_MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(ORTP_MICRO_VERSION ${PROJECT_VERSION_PATCH})
set(ORTP_VERSION ${PROJECT_VERSION})
set(ORTP_SO_VERSION ""14"") # incremented on September 17, 2019
set(ORTP_DOC_VERSION ""${ORTP_VERSION_MAJOR}.${ORTP_VERSION_MINOR}"")


option(ENABLE_SHARED ""Build shared library."" YES)
option(ENABLE_STATIC ""Build static library."" YES)
option(ENABLE_DOC ""Enable documentation generation with Doxygen."" YES)
option(ENABLE_NTP_TIMESTAMP ""Turn on NTP timestamping on packet reception."" NO)
option(ENABLE_PERF ""Disable costly features to reduce cpu consumtion and increase performance."" NO)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_TESTS ""Enable compilation of test programs."" NO)
option(ENABLE_DEBUG_LOGS ""Turn on or off debug level logs."" NO)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)
set(WITH_THREAD_STACK_SIZE ""0"" CACHE STRING ""Set thread stack size (0 is the OS default)."")


include(CheckIncludeFile)
include(CheckFunctionExists)
include(GNUInstallDirs)
include(CheckCSourceCompiles)
include(CheckSymbolExists)

if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

set(MSVC_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC"")
if(MSVC)
	list(APPEND CMAKE_REQUIRED_INCLUDES ""${MSVC_INCLUDE_DIR}"")
endif()

find_package(Threads)
find_library(LIBM NAMES m)

find_package(bctoolbox 0.2.0 REQUIRED)

check_include_file(sys/uio.h HAVE_SYS_UIO_H)
check_include_file(sys/audio.h HAVE_SYS_AUDIO_H)
if(NOT ANDROID)
	check_include_file(sys/shm.h HAVE_SYS_SHM_H)
endif()
check_c_source_compiles(""#include <stdatomic.h>
int main(int argc, char *argv[]) {
atomic_int currrent_ref;
atomic_init(&currrent_ref, 1);
atomic_int previous_ref = atomic_fetch_sub_explicit(&currrent_ref, 1, memory_order_release);
return 0;
}""
        HAVE_STDATOMIC_H)

check_function_exists(arc4random HAVE_ARC4RANDOM)
check_symbol_exists(recvmsg ""sys/socket.h"" HAVE_RECVMSG)
check_symbol_exists(sendmsg ""sys/socket.h"" HAVE_SENDMSG)

include(TestBigEndian)
test_big_endian(WORDS_BIGENDIAN)
if(WORDS_BIGENDIAN)
	set(ORTP_BIGENDIAN 1)
endif()


include_directories(
	include/
	src/
	${CMAKE_CURRENT_BINARY_DIR}
)
if(MSVC)
	include_directories(${MSVC_INCLUDE_DIR})
endif()


set(ORTP_CPPFLAGS ${BCTOOLBOX_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND ORTP_CPPFLAGS ""-DORTP_STATIC"")
endif()
if(ENABLE_PERF)
	set(PERF 1)
endif()
if(ENABLE_NTP_TIMESTAMP)
	set(ORTP_TIMESTAMP 1)
	list(APPEND ORTP_CPPFLAGS ""-DORTP_TIMESTAMP"")
endif()
if(ENABLE_DEBUG_LOGS)
	set(ORTP_DEBUG_MODE 1)
endif()
if(CMAKE_USE_PTHREADS_INIT)
	set(ORTP_DEFAULT_THREAD_STACK_SIZE ${WITH_THREAD_STACK_SIZE})
endif()
if(APPLE)
	set(__APPLE_USE_RFC_3542 1)
endif()
if(ORTP_CPPFLAGS)
	add_definitions(${ORTP_CPPFLAGS})
endif()
set(POSIXTIMER_INTERVAL 10000)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ortp-config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/ortp-config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/ortp-config.h PROPERTIES GENERATED ON)
add_definitions(-DHAVE_CONFIG_H)

# Enable stdint.h limit macros on C++ files. (Windows only.)
if(MSVC)
	add_definitions(""-D__STDC_LIMIT_MACROS"")
endif()

set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
if(MSVC)
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""/WX"")
	endif()
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else()
	list(APPEND STRICT_OPTIONS_CPP ""-Wall"" ""-Wuninitialized"")
	list(APPEND STRICT_OPTIONS_C ""-Wdeclaration-after-statement"" ""-Wstrict-prototypes"" ""-Wno-error=strict-prototypes"")
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Qunused-arguments"" ""-Wno-array-bounds"")
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-Wno-missing-field-initializers"" ""-fno-strict-aliasing"")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()

set(EXPORT_TARGET_NAME ortp)

add_subdirectory(include)
add_subdirectory(src)


if(ENABLE_DOC)
	find_package(Doxygen)
	if(DOXYGEN_FOUND)
		set(srcdir ${CMAKE_CURRENT_SOURCE_DIR})
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ortp.doxygen.in ${CMAKE_CURRENT_BINARY_DIR}/ortp.doxygen)
		file(GLOB DOC_INPUT_FILES
			include/ortp/[^.]*.h
			src/[^.]*.h
			src/[^.]*.c
		)
		add_custom_command(OUTPUT ""${CMAKE_CURRENT_BINARY_DIR}/doc/html/index.html""
			COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/ortp.doxygen
			DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/ortp.doxygen ${DOC_INPUT_FILES}
		)
		add_custom_target(ortp-html-doc ALL DEPENDS ""${CMAKE_CURRENT_BINARY_DIR}/doc/html/index.html"")
		install(DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/doc/html""
			DESTINATION ""${CMAKE_INSTALL_DATADIR}/doc/ortp-${ORTP_VERSION}"")
	endif()
endif()




set(prefix ${CMAKE_INSTALL_PREFIX})
set(exec_prefix ${prefix}/bin)
set(libdir ${prefix}/lib)
set(includedir ${prefix}/include)
set(ORTP_PKGCONFIG_VERSION ""${ORTP_VERSION}"")
set(ORTPDEPS_LIBS )

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ortp.pc.in ${CMAKE_CURRENT_BINARY_DIR}/ortp.pc)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ortp.pc DESTINATION ""${CMAKE_INSTALL_LIBDIR}/pkgconfig"")

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()

include(CMakePackageConfigHelpers)

set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_LIBDIR}/cmake/${EXPORT_TARGET_NAME}"")

write_basic_package_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGET_NAME}ConfigVersion.cmake""
	VERSION ${ORTP_VERSION}
	COMPATIBILITY AnyNewerVersion
)
export(EXPORT ""${EXPORT_TARGET_NAME}Targets""
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGET_NAME}Targets.cmake""
)

configure_package_config_file(ORTPConfig.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGET_NAME}Config.cmake""
	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
	NO_SET_AND_CHECK_MACRO
)

install(EXPORT ${EXPORT_TARGET_NAME}Targets
	FILE ""${EXPORT_TARGET_NAME}Targets.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGET_NAME}Config.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/${EXPORT_TARGET_NAME}ConfigVersion.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)
install(FILES 	""${CMAKE_CURRENT_SOURCE_DIR}/README.md"" 
	""${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.md"" 
	""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt"" 
	""${CMAKE_CURRENT_SOURCE_DIR}/AUTHORS.md"" 
	DESTINATION ""${CMAKE_INSTALL_DATADIR}/doc/ortp-${ORTP_DOC_VERSION}""
)
",3.1,3.1
33648,esonghori,TinyGarble,False,False,False,False,False,3,C++,2019-08-15 22:18:16+00:00,2014-08-27 23:11:31+00:00,70,1082,"cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
project (TinyGarble
  VERSION 3.0.0
  LANGUAGES CXX)

##############
if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.6.3"")
    message(FATAL_ERROR ""Insufficient gcc version, should be at least 4.6.3"")
  endif()
endif()

#############
enable_testing()
include_directories (${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR})

##############
# build type
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

if (CMAKE_BUILD_TYPE MATCHES Debug)
  message(""Debug build."")
elseif (CMAKE_BUILD_TYPE MATCHES Release)
  message(""Release build."")
else()
  message(""Some other build type."")
endif ()

###############
# Compiler flags
set(CMAKE_CXX_FLAGS
  ""${CMAKE_CXX_FLAGS} -Wall -Wno-strict-aliasing -march=native"")

# set -lrt for minunit testing lib.
if (UNIX)
  set(CMAKE_CXX_STANDARD_LIBRARIES ""-lrt -lpthread -ldl"")
endif (UNIX)

set (CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0 -g -DDEBUG"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG"")

###############
# Library

## Boost
set (Boost_USE_STATIC_LIBS OFF)
set (Boost_USE_MULTITHREADED ON)
set (Boost_USE_STATIC_RUNTIME OFF)
find_package (Boost 1.45.0
  REQUIRED
  COMPONENTS program_options)

if (Boost_FOUND)
  include_directories (${Boost_INCLUDE_DIRS})
endif (Boost_FOUND)

## OpenSSL
find_package (OpenSSL)

if (OPENSSL_FOUND)
	include_directories (${OPENSSL_INCLUDE_DIR})
endif (OPENSSL_FOUND)

###############
# Options
option (ENABLE_DUMP ""Enable dump hex feature"" OFF)
option (ENABLE_LOG ""Enable log feature"" OFF)
if (CMAKE_BUILD_TYPE MATCHES Debug)
	message(""Turn Log on."")
	SET(ENABLE_LOG ON BOOL ""Turn on logs in debug mode."")
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# configure a header file to pass some of the CMake settings
# to the source code
configure_file (
  ""util/tinygarble_config.h.in""
  ""util/tinygarble_config.h"")
###############
# Subdirectory
add_subdirectory (""a23"")
add_subdirectory (""crypto"")
add_subdirectory (""garbled_circuit"")
add_subdirectory (""scd"")
add_subdirectory (""tcpip"")
add_subdirectory (""util"")
",3.1.0,3.1
33673,awslabs,aws-sdk-cpp,False,False,False,False,False,70,C++,2020-05-15 19:15:58+00:00,2015-05-11 17:57:32+00:00,1027,2640,"#
# Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#  http://aws.amazon.com/apache2.0
#
# or in the ""license"" file accompanying this file. This file is distributed
# on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#

cmake_minimum_required (VERSION 3.1)
if(POLICY CMP0028)
    cmake_policy(SET CMP0028 NEW)
endif()
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()
if(POLICY CMP0054)
    cmake_policy(SET CMP0054 NEW)
endif()
if(POLICY CMP0056)
    cmake_policy(SET CMP0056 NEW)
endif()
if(POLICY CMP0057)
    cmake_policy(SET CMP0057 NEW) # support IN_LIST
endif()


# 3.0 or higher is strongly suggested; build settings (target_compile_options/etc...) sometimes do not get propagated properly under certain conditions prior to this version
# Making this a hard requirement is potentially disruptive to existing customers who aren't affected by the bad behavior though, so just warn for now
if(CMAKE_MAJOR_VERSION LESS 3)
    message(WARNING ""Building with CMake 3.0 or higher is strongly suggested; current version is ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}"")
endif()

get_filename_component(AWS_NATIVE_SDK_ROOT ""${CMAKE_CURRENT_SOURCE_DIR}"" ABSOLUTE)

# git is required for Android builds and building third-party dependencies
find_package(Git)

# Cmake invocation variables:
#   CUSTOM_MEMORY_MANAGEMENT - if set to ON, generates the sdk project files with custom memory management enabled, otherwise disables it
#   BUILD_ONLY - only build project identified by this variable, a semi-colon delimited list, if this is set we will build only the projects listed. Core will always be built as will its unit tests.
#                    Also if a high level client is specified then we will build its dependencies as well. If a project has tests, the tests will be built.
#   REGENERATE_CLIENTS - all clients being built on this run will be regenerated from the api definitions, this option involves some setup of python, java 8, jdk 1.8, and maven
#   ADD_CUSTOM_CLIENTS - semi-colon delimited list of format serviceName=<yourserviceName>,version=<theVersionNumber>;serviceName2=<yourOtherServiceName>,version=<versionNumber2>
#                          to use these arguments, you should add the api definition .normal.json file for your service to the api-description folder in the generator.
#   NDK_DIR - directory where the android NDK is installed; if not set, the location will be read from the ANDROID_NDK environment variable
#   CUSTOM_PLATFORM_DIR - directory where custom platform scripts, modules, and source resides
#   AWS_SDK_ADDITIONAL_LIBRARIES - names of additional libraries to link into aws-cpp-sdk-core in order to support unusual/unanticipated linking setups (static curl against static-something-other-than-openssl for example)

# TODO: convert boolean invocation variables to options
option(ENABLE_UNITY_BUILD ""If enabled, the SDK will be built using a single unified .cpp file for each service library.  Reduces the size of static library binaries on Windows and Linux"" OFF)
option(MINIMIZE_SIZE ""If enabled, the SDK will be built via a unity aggregation process that results in smaller static libraries; additionally, release binaries will favor size optimizations over speed"" OFF)
option(BUILD_SHARED_LIBS ""If enabled, all aws sdk libraries will be build as shared objects; otherwise all Aws libraries will be built as static objects"" ON)
option(FORCE_SHARED_CRT ""If enabled, will unconditionally link the standard libraries in dynamically, otherwise the standard library will be linked in based on the BUILD_SHARED_LIBS setting"" ON)
option(SIMPLE_INSTALL ""If enabled, removes all the additional indirection (platform/cpu/config) in the bin and lib directories on the install step"" ON)
option(NO_HTTP_CLIENT ""If enabled, no platform-default http client will be included in the library.  For the library to be used you will need to provide your own platform-specific implementation"" OFF)
option(NO_ENCRYPTION ""If enabled, no platform-default encryption will be included in the library.  For the library to be used you will need to provide your own platform-specific implementations"" OFF)
option(USE_IXML_HTTP_REQUEST_2 ""If enabled on windows, the com object IXmlHttpRequest2 will be used for the http stack"" OFF)
option(ENABLE_RTTI ""Flag to enable/disable rtti within the library"" ON)
option(ENABLE_TESTING ""Flag to enable/disable building unit and integration tests"" ON)
option(AUTORUN_UNIT_TESTS ""Flag to enable/disable automatically run unit tests after building"" ON)
option(ANDROID_BUILD_CURL ""When building for Android, should curl be built as well"" ON)
option(ANDROID_BUILD_OPENSSL ""When building for Android, should Openssl be built as well"" ON)
option(ANDROID_BUILD_ZLIB ""When building for Android, should Zlib be built as well"" ON)
option(FORCE_CURL ""Forces usage of the Curl client rather than the default OS-specific api"" OFF)
option(ENABLE_ADDRESS_SANITIZER ""Flags to enable/disable Address Sanitizer for gcc or clang"" OFF)
option(BYPASS_DEFAULT_PROXY ""Bypass the machine's default proxy settings when using IXmlHttpRequest2"" ON)
option(BUILD_DEPS ""Build third-party dependencies"" ON)
option(ENABLE_CURL_LOGGING ""If enabled, Curl's internal log will be piped to SDK's logger"" OFF)
option(ENABLE_HTTP_CLIENT_TESTING ""If enabled, corresponding http client test suites will be built and run"" OFF)
option(ENABLE_VIRTUAL_OPERATIONS ""This option usually works with REGENERATE_CLIENTS. \
                                If enabled when doing code generation, operation related functions in service clients will be marked as virtual. \
                                If disabled when doing code generation, virtual will not be added to operation functions and service client class will be marked as final. \
                                If disabled, SDK will add compiler flags '-ffunction-sections -fdata-sections' for gcc and clang when compiling. \
                                You can utilize this feature to work with your linker to reduce binary size of your application on Unix platforms when doing static linking in Release mode."" ON)

set(BUILD_ONLY """" CACHE STRING ""A semi-colon delimited list of the projects to build"")
set(CPP_STANDARD ""11"" CACHE STRING ""Flag to upgrade the C++ standard used. The default is 11. The minimum is 11."")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

#From https://stackoverflow.com/questions/18968979/how-to-get-colorized-output-with-cmake
if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset ""${Esc}[m"")
  set(ColourBold  ""${Esc}[1m"")
  set(Red         ""${Esc}[31m"")
  set(Green       ""${Esc}[32m"")
  set(Yellow      ""${Esc}[33m"")
  set(Blue        ""${Esc}[34m"")
  set(Magenta     ""${Esc}[35m"")
  set(Cyan        ""${Esc}[36m"")
  set(White       ""${Esc}[37m"")
  set(BoldRed     ""${Esc}[1;31m"")
  set(BoldGreen   ""${Esc}[1;32m"")
  set(BoldYellow  ""${Esc}[1;33m"")
  set(BoldBlue    ""${Esc}[1;34m"")
  set(BoldMagenta ""${Esc}[1;35m"")
  set(BoldCyan    ""${Esc}[1;36m"")
  set(BoldWhite   ""${Esc}[1;37m"")
endif()

# backwards compatibility with old command line params
if(""${STATIC_LINKING}"" STREQUAL ""1"")
    set(BUILD_SHARED_LIBS OFF)
endif()

if(MINIMIZE_SIZE)
    message(STATUS ""MINIMIZE_SIZE enabled"")
    set(ENABLE_UNITY_BUILD ON) # MINIMIZE_SIZE always implies UNITY_BUILD
endif()

set(PYTHON_CMD ""python"")

# CMAKE_MODULE_PATH is a CMAKE variable. It contains a list of paths
# which could be used to search CMAKE modules by ""include()"" or ""find_package()"", but the default value is empty.
# Add cmake dir to search list
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/cmake"")

# include() will ""load and run"" cmake script
include(resolve_platform)
include(CMakePackageConfigHelpers)

if (REGENERATE_CLIENTS AND NOT ENABLE_VIRTUAL_OPERATIONS)
    if (PLATFORM_LINUX OR PLATFORM_APPLE)
        Message(STATUS ""${BoldYellow}You are regenerating service client's source code and is turning ENABLE_VIRTUAL_OPERATIONS off. If you are targeting smaller binary size, read description string of ENABLE_VIRTUAL_OPERATIONS.${ColourReset}"")
    endif()
endif()

# use response files to prevent command-line-too-big errors for large libraries like iam
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS 1)
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES 1)
set(CMAKE_CXX_RESPONSE_FILE_LINK_FLAG ""@"")

if(COMMAND apply_pre_project_platform_settings)
    apply_pre_project_platform_settings()
endif()

include(initialize_project_version)

if (BUILD_SHARED_LIBS OR FORCE_SHARED_CRT)
    set(STATIC_CRT OFF)
else()
    set(STATIC_CRT ON)
endif()

# Add Linker search paths to RPATH so as to fix the problem where some linkers can't find cross-compiled depenpent libraries in customer paths when linking executables.
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)

# build third-party targets
if (BUILD_DEPS)
    # If building third party dependencies, we will move them to the same directory where SDK has been installed during installation.
    # Therefore, we should set rpath to $ORIGIN to let SDK find these third party dependencies.
    # Otherwise, customers are responsible for handling the linkage to these libraries.
    set(CMAKE_INSTALL_RPATH ""$ORIGIN"")
    set(AWS_DEPS_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/.deps)
    if (NOT DEFINED AWS_DEPS_INSTALL_DIR)
        if (DEFINED CMAKE_INSTALL_PREFIX)
            set(AWS_DEPS_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} CACHE STRING ""A string describes the path where 3rd-party dependencies will be or have been installed"")
        else()
            set(AWS_DEPS_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/.deps/install CACHE STRING ""A string describes the path where 3rd-party dependencies will be or have been installed"")
        endif()
    endif()
    if (NOT CMAKE_GENERATOR_PLATFORM STREQUAL """")
        set(GEN_PLATFORM_ARG ""-A${CMAKE_GENERATOR_PLATFORM}"")
    endif()
    file(MAKE_DIRECTORY ${AWS_DEPS_BUILD_DIR})
    if(TARGET_ARCH STREQUAL ""ANDROID"")
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
            -DANDROID_ABI=${ANDROID_ABI}
            -DANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN}
            -DANDROID_STL=${ANDROID_STL}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DGIT_EXECUTABLE=${GIT_EXECUTABLE}
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    elseif(TARGET_ARCH STREQUAL ""APPLE"" AND DEFINED CMAKE_OSX_ARCHITECTURES AND NOT CMAKE_OSX_ARCHITECTURES STREQUAL """")
        message(""Cross compiling third-party dependencies for architecture ${CMAKE_OSX_ARCHITECTURES}"")
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}
            -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
            -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
            -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/bin
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    else()
        execute_process(
            COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
            -DTARGET_ARCH=${TARGET_ARCH}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
            -DSTATIC_CRT=${STATIC_CRT}
            -DCMAKE_INSTALL_PREFIX=${AWS_DEPS_INSTALL_DIR}
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/bin
            ${GEN_PLATFORM_ARG}
            ${CMAKE_CURRENT_SOURCE_DIR}/third-party
            WORKING_DIRECTORY ${AWS_DEPS_BUILD_DIR}
            RESULT_VARIABLE BUILD_3P_EXIT_CODE)
    endif()

    if (NOT ${BUILD_3P_EXIT_CODE} EQUAL 0)
        message(FATAL_ERROR ""Failed to configure third-party libraries."")
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} --build ${AWS_DEPS_BUILD_DIR} --config ${CMAKE_BUILD_TYPE}
        RESULT_VARIABLE BUILD_3P_EXIT_CODE)

    if (NOT ${BUILD_3P_EXIT_CODE} EQUAL 0)
        message(FATAL_ERROR ""Failed to build third-party libraries."")
    endif()
    message(STATUS ""Third-party dependencies are installed at: ${AWS_DEPS_INSTALL_DIR}"")
    list(APPEND CMAKE_PREFIX_PATH ""${AWS_DEPS_INSTALL_DIR}"")
endif()
set(THIRD_PARTY_LIBS ""aws-c-event-stream;aws-checksums;aws-c-common"")

# build the sdk targets
project(""aws-cpp-sdk-all"" VERSION ""${PROJECT_VERSION}"" LANGUAGES CXX)

# http client, encryption, zlib
include(external_dependencies)

if(COMMAND apply_post_project_platform_settings)
    apply_post_project_platform_settings()
endif()

set(CMAKE_CONFIGURATION_TYPES
        Debug                   # Setup for easy debugging. No optimizations.
        DebugOpt                # An optimized version of Debug.
        Release                 # Fully optimized, no debugging information.
        RelWithDebInfo          # A debuggable version of Release.
        MinSizeRel              # Like Release, but optimized for memory rather than speed.
        )

include(compiler_settings)
# Instead of calling functions/macros inside included cmake scripts, we should call them in our main CMakeList.txt
set_msvc_flags()
set_msvc_warnings()

include(sdks)

include(utilities)

include(build_external)

if(ENABLE_BCRYPT_ENCRYPTION)
    set(CRYPTO_LIBS Bcrypt)
    set(CRYPTO_LIBS_ABSTRACT_NAME Bcrypt)
elseif(ENABLE_OPENSSL_ENCRYPTION)
    set(CRYPTO_LIBS ${OPENSSL_LIBRARIES} ${ZLIB_LIBRARIES})
    set(CRYPTO_LIBS_ABSTRACT_NAME crypto ssl z)
endif()

if(ENABLE_CURL_CLIENT)
    set(CLIENT_LIBS ${CURL_LIBRARIES})
    set(CLIENT_LIBS_ABSTRACT_NAME curl)
elseif(ENABLE_WINDOWS_CLIENT)
    if(USE_IXML_HTTP_REQUEST_2)
        set(CLIENT_LIBS msxml6 runtimeobject)
        set(CLIENT_LIBS_ABSTRACT_NAME msxml6 runtimeobject)
        if(BYPASS_DEFAULT_PROXY)
            list(APPEND CLIENT_LIBS winhttp)
            list(APPEND CLIENT_LIBS_ABSTRACT_NAME winhttp)
        endif()
    else()
        set(CLIENT_LIBS Wininet winhttp)
        set(CLIENT_LIBS_ABSTRACT_NAME Wininet winhttp)
    endif()
endif()

# setup user specified installation directory if any, regardless previous platform default settings
if (CMAKE_INSTALL_BINDIR)
    set(BINARY_DIRECTORY ""${CMAKE_INSTALL_BINDIR}"")
endif()

if (CMAKE_INSTALL_LIBDIR)
    set(LIBRARY_DIRECTORY ""${CMAKE_INSTALL_LIBDIR}"")
endif()

if (CMAKE_INSTALL_INCLUDEDIR)
    set(INCLUDE_DIRECTORY ""${CMAKE_INSTALL_INCLUDEDIR}"")
endif()

if(BUILD_SHARED_LIBS)
    set(ARCHIVE_DIRECTORY ""${BINARY_DIRECTORY}"")
else()
    set(ARCHIVE_DIRECTORY ""${LIBRARY_DIRECTORY}"")
endif()

if (ENABLE_ADDRESS_SANITIZER)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -g -fno-omit-frame-pointer"")
endif()

include(CheckCXXSymbolExists)

check_cxx_symbol_exists(""pathconf"" ""unistd.h"" HAS_PATHCONF)
if (HAS_PATHCONF)
    add_definitions(-DHAS_PATHCONF)
endif()

check_cxx_symbol_exists(""umask"" ""sys/stat.h"" HAS_UMASK)
if (HAS_UMASK)
    add_definitions(-DHAS_UMASK)
endif()

add_sdks()

# for user friendly cmake usage
include(setup_cmake_find_module)

# for generating make uninstall target
if (NOT TARGET uninstall)
    ADD_CUSTOM_TARGET(uninstall ""${CMAKE_COMMAND}"" -P ""${AWS_NATIVE_SDK_ROOT}/cmake/make_uninstall.cmake"")
else()
    ADD_CUSTOM_TARGET(uninstall-awssdk ""${CMAKE_COMMAND}"" -P ""${AWS_NATIVE_SDK_ROOT}/cmake/make_uninstall.cmake"")
endif()
",3.1,3.1
33712,lxde,pcmanfm-qt,False,False,False,False,False,118,C++,2020-05-17 05:51:20+00:00,2013-07-23 19:45:43+00:00,158,1209,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(pcmanfm-qt)

# PcmanFm-Qt Version
set(PCMANFM_QT_VERSION_MAJOR 0)
set(PCMANFM_QT_VERSION_MINOR 15)
set(PCMANFM_QT_VERSION_PATCH 1)

set(PCMANFM_QT_VERSION ${PCMANFM_QT_VERSION_MAJOR}.${PCMANFM_QT_VERSION_MINOR}.${PCMANFM_QT_VERSION_PATCH})

# Minimum versions
set(LIBFMQT_MINIMUM_VERSION ""0.15.1"")
set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(fm-qt ${LIBFMQT_MINIMUM_VERSION} REQUIRED)
find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)

message(STATUS ""Building ${PROJECT_NAME} with Qt ${Qt5Core_VERSION}"")

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
include(GNUInstallDirs)
include(LXQtPreventInSourceBuilds)
include(LXQtConfigVars)
include(LXQtTranslateTs)
include(LXQtTranslateDesktop)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

set(CMAKE_AUTOMOC TRUE)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_subdirectory(pcmanfm)

# manpage for pcmanfm-qt
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/pcmanfm-qt.1.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/pcmanfm-qt.1""
    @ONLY
)
install(FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/pcmanfm-qt.1""
    DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
)

# add Doxygen support to generate API docs
# References:
# http://majewsky.wordpress.com/2010/08/14/tip-of-the-day-cmake-and-doxygen/
# http://www.bluequartz.net/projects/EIM_Segmentation/SoftwareDocumentation/html/usewithcmakeproject.html
option(BUILD_DOCUMENTATION ""Use Doxygen to create the HTML based API documentation"" OFF)
if(BUILD_DOCUMENTATION)
    find_package(Doxygen REQUIRED)
    configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in"" ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile"" @ONLY)
    add_custom_target(doc ALL
        ${DOXYGEN_EXECUTABLE} ""${CMAKE_CURRENT_BINARY_DIR}/Doxyfile""
        WORKING_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}""
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )
    install(DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/docs"" DESTINATION ""${CMAKE_INSTALL_DOCDIR}"")
endif()

add_subdirectory(autostart)
add_subdirectory(config)
",3.1.0,3.1
33750,lxde,libqtxdg,False,False,False,False,False,30,C++,2020-04-27 10:29:36+00:00,2013-08-06 13:36:21+00:00,38,512,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(libqtxdg)

option(BUILD_TESTS ""Builds tests"" OFF)
option(BUILD_DEV_UTILS ""Builds and install development utils"" OFF)

# additional cmake files
set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

set(QTXDG_MAJOR_VERSION 3)
set(QTXDG_MINOR_VERSION 5)
set(QTXDG_PATCH_VERSION 0)
set(QTXDG_VERSION_STRING ${QTXDG_MAJOR_VERSION}.${QTXDG_MINOR_VERSION}.${QTXDG_PATCH_VERSION})

set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")
set(GLIB_MINIMUM_VERSION ""2.41.0"") # Mime Apps new implementation

find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED Widgets Svg Xml DBus)
find_package(GLIB ${GLIB_MINIMUM_VERSION} REQUIRED COMPONENTS gobject gio gio-unix)

include(GNUInstallDirs)             # Standard directories for installation
include(CMakePackageConfigHelpers)
include(GenerateExportHeader)

include(LXQtPreventInSourceBuilds)
include(LXQtCreatePkgConfigFile)
include(LXQtCreatePortableHeaders)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Add link optimizations. It make the .so around 33% smaller without any known
# drawback.
include(compiler_settings NO_POLICY_SCOPE)

set(CMAKE_AUTOMOC ON)

if (BUILD_TESTS)
    find_package(Qt5 ${QT_MINIMUM_VERSION} CONFIG REQUIRED Test)
endif()


set(QTXDGX_LIBRARY_NAME ""Qt5Xdg"")
set(QTXDGX_FILE_NAME ""qt5xdg"")

set(QTXDGX_ICONLOADER_LIBRARY_NAME ""Qt5XdgIconLoader"")
set(QTXDGX_ICONLOADER_FILE_NAME ""qt5xdgiconloader"")
set(QTXDGX_ICONENGINEPLUGIN_LIBRARY_NAME ""Qt5XdgIconPlugin"")

set(QTXDGX_PKG_CONFIG_DESCRIPTION ""Qt5Xdg, a Qt5 implementation of XDG standards"")
set(QTXDGX_PKG_CONFIG_REQUIRES ""Qt5Core >= ${QT_MINIMUM_VERSION}, Qt5Xml >= ${QT_MINIMUM_VERSION}, Qt5Widgets >= ${QT_MINIMUM_VERSION}, Qt5DBus >= ${QT_MINIMUM_VERSION}, Qt5XdgIconLoader = ${QTXDG_VERSION_STRING}"")

set(QTXDGX_ICONLOADER_PKG_CONFIG_DESCRIPTION ""Qt5XdgIconLader, a Qt5 XDG Icon Loader"")
set(QTXDGX_ICONLOADER_PKG_CONFIG_REQUIRES ""Qt5Gui >= ${QT_MINIMUM_VERSION}, Qt5Svg >= ${QT_MINIMUM_VERSION}"")

set(QTXDGX_INTREE_INCLUDEDIR ""${CMAKE_CURRENT_BINARY_DIR}/InTreeBuild/include"")

message(STATUS ""Building ${PROJECT_NAME} with Qt ${Qt5Core_VERSION}"")

add_subdirectory(src)

if(BUILD_TESTS)
    enable_testing()
    target_compile_definitions(${QTXDGX_LIBRARY_NAME}
        PRIVATE ""QTXDG_TESTS=\""1\""""
    )
    add_subdirectory(test)
else()
    message(STATUS """")
    message(STATUS ""For building tests use -DBUILD_TESTS=Yes option."")
    message(STATUS """")
endif()

if (BUILD_DEV_UTILS)
    add_subdirectory(util)
endif()

configure_package_config_file(
    ""${PROJECT_SOURCE_DIR}/cmake/${QTXDGX_FILE_NAME}-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config-version.cmake""
    VERSION ${QTXDG_VERSION_STRING}
    COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
    ""${PROJECT_SOURCE_DIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake.in""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake""
    INSTALL_DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
)

write_basic_package_version_file(
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config-version.cmake""
    VERSION ${QTXDG_VERSION_STRING}
    COMPATIBILITY AnyNewerVersion
)

lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${QTXDGX_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${QTXDGX_LIBRARY_NAME}
    DESCRIPTION ${QTXDGX_PKG_CONFIG_DESCRIPTION}
    INCLUDEDIRS ${QTXDGX_FILE_NAME}
    LIBS ${QTXDGX_LIBRARY_NAME}
    REQUIRES ${QTXDGX_PKG_CONFIG_REQUIRES}
    REQUIRES_PRIVATE ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    VERSION ${QTXDG_VERSION_STRING}
    INSTALL
)

lxqt_create_pkgconfig_file(
    PACKAGE_NAME ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    DESCRIPTIVE_NAME ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    DESCRIPTION ${QTXDGX_ICONLOADER_PKG_CONFIG_DESCRIPTION}
    INCLUDEDIRS ${QTXDGX_ICONLOADER_FILE_NAME}
    LIBS ${QTXDGX_ICONLOADER_LIBRARY_NAME}
    REQUIRES ${QTXDGX_ICONLOADER_PKG_CONFIG_REQUIRES}
    VERSION ${QTXDG_VERSION_STRING}
    INSTALL
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_FILE_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
    COMPONENT Devel
)

install(FILES
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config.cmake""
    ""${CMAKE_BINARY_DIR}/${QTXDGX_ICONLOADER_FILE_NAME}-config-version.cmake""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
    COMPONENT Devel
)

install(EXPORT
    ""${QTXDGX_FILE_NAME}-targets""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME}""
    FILE ""${QTXDGX_FILE_NAME}-targets.cmake""
    COMPONENT Devel
)

install(EXPORT
    ""${QTXDGX_ICONLOADER_FILE_NAME}-targets""
    DESTINATION ""${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_ICONLOADER_FILE_NAME}""
    FILE ""${QTXDGX_ICONLOADER_FILE_NAME}-targets.cmake""
    COMPONENT Devel
)

# uninstall target
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

#add_custom_target(uninstall
#    COMMAND ${CMAKE_COMMAND} -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"")
",3.1.0,3.1
33809,pletzer,fidibench,False,False,False,False,False,1,C++,2020-03-29 22:35:01+00:00,2015-03-17 14:26:49+00:00,3,244,"cmake_minimum_required (VERSION 3.1)
project(fidibench)

enable_language(Fortran)
enable_testing()

set(CMAKE_CXX_STANDARD 11)

set(OPT_FLAGS """" CACHE STRING ""compiler optimization flags"")

set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OPT_FLAGS}"")
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OPT_FLAGS}"")
set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} ${OPT_FLAGS}"")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
find_package(OpenMP)
# Cmake needs help with clang 
if (CMAKE_C_COMPILER_ID STREQUAL ""Clang"")
    # get the installation directory of LIBOMP
    execute_process (
        COMMAND bash -c ""brew --prefix libomp""
        OUTPUT_VARIABLE LIBOMP_DIR
    )
    string(REGEX REPLACE ""\n$"" """" LIBOMP_DIR ""${LIBOMP_DIR}"")
    set(LIBOMP_INCDIR ""${LIBOMP_DIR}/include"")
    set(LIBOMP_LIBDIR ""${LIBOMP_DIR}/lib"")
    if (OpenMP_C_FLAGS STREQUAL ""NOTFOUND"")
        set(OpenMP_C_FLAGS ""-I${LIBOMP_INCDIR} -L${LIBOMP_LIBDIR} -Xpreprocessor -fopenmp -lomp"")
        message(STATUS ""clang detected and OpenMP_C_FLAGS set to ${OpenMP_C_FLAGS}"")
    endif()
    if (OpenMP_CXX_FLAGS STREQUAL ""NOTFOUND"")
        set(OpenMP_CXX_FLAGS ""-I${LIBOMP_INCDIR} -L${LIBOMP_LIBDIR} -Xpreprocessor -fopenmp -lomp"")
        message(STATUS ""clang++ detected OpenMP_CXX_FLAGS set to ${OpenMP_CXX_FLAGS}"")
    endif()
endif()
find_package(PythonExecutable)
find_package(JuliaExecutable)

# Use cmake -D NUM_CELLS=# and -D NUM_TIME_STEPS=# to change default values
set(NUM_CELLS ""32"" CACHE STRING ""Number of cells along each direction when running tests"")
set(NUM_TIME_STEPS ""10"" CACHE STRING ""Number of time steps when running tests"")
set(NUM_PROCS ""8"" CACHE STRING ""Number of processes when running tests"")

# OpenACC
option(OPENACC ""Enable OpenACC support"" OFF)
option(INTEL_ANALYZER ""Add compiler options for Intel Analyzer"" OFF)

message(STATUS ""System: ${CMAKE_SYSTEM_NAME}"")
if (${CMAKE_SYSTEM_NAME} STREQUAL ""AIX"")
  # On Fitzroy AIX find_package(MPI) will fail 
  # unless one sets MPI_CXX_INCLUDE_PATH and 
  # MPI_CXX_LIBRARIES
  set(POE ""/usr/lpp/ppe.poe"")
  if(EXISTS ""${POE}/include"" AND EXISTS ""${POE}/lib"")
    set(MPI_INCLUDE_PATH ""${POE}/include"")
      set(MPI_LIBRARIES ""${POE}/lib/libmpi_r.a;${POE}/lib/libvtd_r.a"")
      set(MPI_C_INCLUDE_PATH ""${MPI_INCLUDE_PATH}"")
      set(MPI_C_LIBRARIES ""${MPI_LIBRARIES}"")
      set(MPI_CXX_INCLUDE_PATH ""${MPI_INCLUDE_PATH}"")
      set(MPI_CXX_LIBRARIES ""${MPI_LIBRARIES}"")
      # have not tested that part...
      set(MPI_Fortran_INCLUDE_PATH ""${MPI_INCLUDE_PATH}"")
      set(MPI_Fortran_LIBRARIES ""${MPI_LIBRARIES}"")
      message(STATUS ""Setting MPI_CXX_INCLUDE_PATH=${MPI_CXX_INCLUDE_PATH}"")
      message(STATUS ""Setting MPI_CXX_LIBRARIES=${MPI_CXX_LIBRARIES}"")
  endif()

  # add optimization flags on AIX
  if (${CMAKE_Fortran_COMPILER_ID} STREQUAL ""XL"")
    set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -O3 -qarch=pwr6 -qtune=pwr6 -q64 -qextname=get_rstart_fname -qinfo=all -qxflag=oldtab -qfree=f90 -qnoescape -qintlog"")
  endif()
  if (${CMAKE_CXX_COMPILER_ID} STREQUAL ""XL"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -q64 -qarch=pwr6 -qtune=pwr6 -qinfo=all"")
  endif()
  set(CMAKE_C_FLAGS ""${CMAKE_CXX_FLAGS}"")
  set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}"")

endif()

if (NOT DEFINED ""${CMAKE_BUILD_TYPE}"")
    set(CMAKE_BUILD_TYPE ""RelWithDebInfo"")
    message(STATUS ""Build type is ${CMAKE_BUILD_TYPE}"")
endif()

message(STATUS ""Fortran compiler Id: ${CMAKE_Fortran_COMPILER_ID}"")
message(STATUS ""C compiler Id      : ${CMAKE_C_COMPILER_ID}"")
message(STATUS ""C++ compiler Id    : ${CMAKE_CXX_COMPILER_ID}"")
if (${CMAKE_Fortran_COMPILER_ID} STREQUAL ""Cray"")
  set(MPI_Fortran_COMPILER ""ftn"")
endif()
if (${CMAKE_C_COMPILER_ID} STREQUAL ""Cray"")
  set(MPI_C_COMPILER ""cc"")
endif()
if (${CMAKE_CXX_COMPILER_ID} STREQUAL ""Cray"")
  set(MPI_CXX_COMPILER ""CC"")
endif()

message(STATUS ""Looking for MPI"")
find_package(MPI)
if (MPI_FOUND)
    set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
    set(CMAKE_C_COMPILER ${MPI_C_COMPILER})
    set(CMAKE_Fortran_COMPILER ${MPI_Fortran_COMPILER})
endif()

if (INTEL_ANALYZER)
   message(STATUS ""You selected INTEL_ANALYZER"")
   message(STATUS ""You may need to load the following modules:"")
   message(STATUS ""ml intel/2017a"")
   message(STATUS ""ml intel/2017a"")
   message(STATUS ""ml itac/2017.2.028"")
   message(STATUS ""source itacvars.sh impi5"")
   set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -g -tcollect $ENV{VT_ADD_LIBS}"")
   set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g -tcollect $ENV{VT_ADD_LIBS}"")
   set(CMAKE_Fortran_FLAGS 
      ""${CMAKE_CXX_FLAGS} -g -tcollect $ENV{VT_ADD_LIBS}"")
endif()

if ((NOT OPENACC) AND OPENMP_FOUND)
  add_definitions(-DHAVE_OPENMP)
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
  # There is no OpenMP fortran specific flag, fall back onto C flags
  set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} ${OpenMP_C_FLAGS}"")
else ()
  # OpenACC is incompatible with OpenMP, either one or the other or none
  if (OPENACC)
    message(STATUS ""OpenACC enabled"")
    # These are the PGI openACC flags -- need to find out what the 
    # corresponding options are for the CRAY, gcc, ... compilers 
    # (if they exist)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -acc -Minfo=acc"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -acc -Minfo=acc"")
    set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -acc -Minfo=acc"")
  endif () 
endif ()

# enable profiling and tracing with TAU
if (NOT ""${TAU_MAKEFILE}"" STREQUAL """")
  if (""${CMAKE_VERSION}"" VERSION_LESS 2.8.12)
    get_filename_component(TAU_LIBRARY_DIR ""${TAU_MAKEFILE}"" PATH)
    get_filename_component(TAU_DIR ""${TAU_LIBRARY_DIR}"" PATH)
  else ()
    get_filename_component(TAU_LIBRARY_DIR ""${TAU_MAKEFILE}"" DIRECTORY)
    get_filename_component(TAU_DIR ""${TAU_LIBRARY_DIR}"" DIRECTORY)
  endif ()
  message(""*******************************************************************"")
  message(""Building with TAU enabled, set the following prior to typing 'make'"")
  message(""export PATH=${TAU_DIR}/bin:$PATH"")
  message(""export TAU_MAKEFILE=${TAU_MAKEFILE}"")
  set(ENV{PATH} ""${TAU_DIR}/bin:$PATH"")
  set(ENV{TAU_MAKEFILE} ""${TAU_MAKEFILE}"")
  message(""********************************************************************"")
  set(CMAKE_CXX_COMPILER ""tau_cxx.sh"")
endif()

message(STATUS ""=============================================================="")
message(STATUS ""C       compiler: ${CMAKE_C_COMPILER}"")
message(STATUS ""           flags: ${CMAKE_C_FLAGS}"")
message(STATUS ""=============================================================="")
message(STATUS ""C++     compiler: ${CMAKE_CXX_COMPILER}"")
message(STATUS ""           flags: ${CMAKE_CXX_FLAGS}"")
message(STATUS ""=============================================================="")
message(STATUS ""Fortran compiler: ${CMAKE_Fortran_COMPILER}"")
message(STATUS ""           flags: ${CMAKE_Fortran_FLAGS}"")
message(STATUS ""=============================================================="")

add_subdirectory(scripts)
add_subdirectory(cxx)
add_subdirectory(laplacian)
add_subdirectory(upwind)
",3.1,3.1
33832,Yattabyte,Delta,False,False,False,False,False,1,C++,2019-12-31 18:19:57+00:00,2017-10-10 19:16:00+00:00,6,742,"################
### reVision ###
################
cmake_minimum_required(VERSION 3.10)
cmake_policy(SET CMP0079 NEW)
include(ExternalProject)
project(reVision VERSION 5.0.0 DESCRIPTION ""Video game engine project."")


# Get dependency directory locations from the user
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /MP /Oi /Ot /GF /Qpar /std:c++17 /Zc:rvalueCast /W3 /WX"")
set(CMAKE_CXX_FLAGS_SILENT ""${CMAKE_CXX_FLAGS} /MP /Oi /Ot /GF /Qpar /std:c++17 /Zc:rvalueCast- /W0 /WX-"")
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /Od /Gy /MDd /JMC"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /O2 /Ob2 /GL /MD"")
set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /LTCG:incremental"")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""${CMAKE_EXE_LINKER_FLAGS_DEBUG} /DEBUG:FASTLINK /INCREMENTAL:NO"")
set_property(GLOBAL PROPERTY VS_DEBUGGER_WORKING_DIRECTORY ""$(SolutionDir)app"")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER Other)


# Add our own source files
add_subdirectory( src )
target_include_directories(reVision PUBLIC ${PROJECT_SOURCE_DIR}/src)
link_libraries(reVision ""OpenGL32.lib"")


##################
# INCLUDE ASSIMP #
##################
set(CUSTOM_ASSIMP """" CACHE PATH ""ASSIMP root directory"")
if (CUSTOM_ASSIMP STREQUAL """")
	ExternalProject_Add(
		ASSIMP
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/assimp/assimp
		GIT_TAG master
		GIT_SHALLOW ON
		CMAKE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>	
			-DASSIMP_BUILD_ALL_EXPORTERS_BY_DEFAULT:BOOL=ON
			-DASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT:BOOL=ON
			-DASSIMP_BUILD_ASSIMP_TOOLS:BOOL=OFF
			-DASSIMP_BUILD_SAMPLES:BOOL=OFF
			-DASSIMP_BUILD_TESTS:BOOL=OFF
			-DASSIMP_NO_EXPORT:BOOL=ON
			-DBUILD_SHARED_LIBS:BOOL=OFF
			-DBUILD_STATIC_LIBS:BOOL=ON
			-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
			-DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS_SILENT}
			-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
			-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
			-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
			-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
		UPDATE_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(ASSIMP SOURCE_DIR)
	set (CUSTOM_ASSIMP ${SOURCE_DIR})
endif (CUSTOM_ASSIMP STREQUAL """")	
target_include_directories(reVision PRIVATE ${CUSTOM_ASSIMP}/include/ SYSTEM INTERFACE ${CUSTOM_ASSIMP}/include/)
target_link_libraries(reVision
	debug		${CUSTOM_ASSIMP}/lib/Debug/assimp-vc142-mtd.lib
	optimized	${CUSTOM_ASSIMP}/lib/Release/assimp-vc142-mt.lib
	debug		${CUSTOM_ASSIMP}/lib/Debug/IrrXMLd.lib
	optimized	${CUSTOM_ASSIMP}/lib/Release/IrrXML.lib
	debug		${CUSTOM_ASSIMP}/lib/Debug/zlibstaticd.lib
	optimized	${CUSTOM_ASSIMP}/lib/Release/zlibstatic.lib
)


##################
# INCLUDE BULLET #
##################
set(CUSTOM_BULLET """" CACHE PATH ""Bullet Physics library (BT) root directory"")
if (CUSTOM_BULLET STREQUAL """")
	ExternalProject_Add(
		BULLET
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/bulletphysics/bullet3
		GIT_TAG master
		GIT_SHALLOW ON
		CMAKE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>	
			-DBUILD_BULLET2_DEMOS:BOOL=OFF
			-DBUILD_BULLET3:BOOL=ON
			-DBUILD_CLSOCKET:BOOL=OFF
			-DBUILD_CPU_DEMOS:BOOL=OFF
			-DBUILD_ENET:BOOL=OFF
			-DBUILD_EXTRAS:BOOL=OFF
			-DBUILD_OPENGL3_DEMOS:BOOL=OFF
			-DBUILD_PYBULLET:BOOL=OFF
			-DBUILD_SHARED_LIBS:BOOL=OFF
			-DBUILD_STATIC_LIBS:BOOL=ON
			-DBUILD_UNIT_TESTS:BOOL=OFF
			-DINSTALL_LIBS:BOOL=OFF
			-DUSE_MSVC_FUNCTION_LEVEL_LINKING:BOOL=ON
			-DUSE_MSVC_INCREMENTAL_LINKING:BOOL=ON
			-DUSE_MSVC_RUNTIME_LIBRARY_DLL:BOOL=ON
			-DUSE_MSVC_STRING_POOLING:BOOL=ON
			-DUSE_SOFT_BODY_MULTI_BODY_DYNAMICS_WORLD:BOOL=ON			
			-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
			-DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS_SILENT}
			-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
			-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
			-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
			-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
		UPDATE_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(BULLET SOURCE_DIR)
	set (CUSTOM_BULLET ${SOURCE_DIR})	
endif (CUSTOM_BULLET STREQUAL  """")	
target_include_directories(reVision PRIVATE ${CUSTOM_BULLET}/src/ SYSTEM INTERFACE ${CUSTOM_BULLET}/src/)
target_link_libraries(reVision
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet2FileLoader_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet2FileLoader.lib
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet3Collision_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet3Collision.lib
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet3Common_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet3Common.lib
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet3Dynamics_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet3Dynamics.lib
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet3Geometry_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet3Geometry.lib
	debug		${CUSTOM_BULLET}/lib/Debug/Bullet3OpenCL_clew_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/Bullet3OpenCL_clew.lib
	debug		${CUSTOM_BULLET}/lib/Debug/BulletCollision_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/BulletCollision.lib
	debug		${CUSTOM_BULLET}/lib/Debug/BulletDynamics_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/BulletDynamics.lib
	debug		${CUSTOM_BULLET}/lib/Debug/BulletInverseDynamics_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/BulletInverseDynamics.lib
	debug		${CUSTOM_BULLET}/lib/Debug/BulletSoftBody_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/BulletSoftBody.lib
	debug		${CUSTOM_BULLET}/lib/Debug/LinearMath_Debug.lib
	optimized	${CUSTOM_BULLET}/lib/Release/LinearMath.lib
)


#####################
# INCLUDE FREEIMAGE #
#####################
set(CUSTOM_FREEIMAGE """" CACHE PATH ""FreeImage root directory"")
if (CUSTOM_FREEIMAGE STREQUAL """")
	ExternalProject_Add(
		FREEIMAGE
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF	
		URL http://downloads.sourceforge.net/freeimage/FreeImage3180Win32Win64.zip			
		CONFIGURE_COMMAND """"
		UPDATE_COMMAND """"
		BUILD_COMMAND """"
		INSTALL_COMMAND 
			${CMAKE_COMMAND} -E copy_if_different
			${CMAKE_CURRENT_BINARY_DIR}/external/src/FREEIMAGE/Dist/x64/FreeImage.dll 
			${PROJECT_SOURCE_DIR}/app/FreeImage.dll
	)
	ExternalProject_Get_Property(FREEIMAGE SOURCE_DIR)
	set (CUSTOM_FREEIMAGE ${SOURCE_DIR})	
endif (CUSTOM_FREEIMAGE STREQUAL """")	
target_include_directories(reVision 
	PRIVATE ${CUSTOM_FREEIMAGE}/dist/x64/ 
	PRIVATE ${CUSTOM_FREEIMAGE}/Wrapper/FreeImagePlus/dist/x64/ 	
	SYSTEM INTERFACE ${CUSTOM_FREEIMAGE}/dist/x64/ 
	SYSTEM INTERFACE ${CUSTOM_FREEIMAGE}/Wrapper/FreeImagePlus/dist/x64/ 
)
target_link_libraries(reVision
	${CUSTOM_FREEIMAGE}/dist/x64/FreeImage.lib	
	${CUSTOM_FREEIMAGE}/Wrapper/FreeImagePlus/dist/x64/FreeImagePlus.lib
)


################
# INCLUDE GLAD #
################
ExternalProject_Add(
	GLAD
	PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
	SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/src/glad/
	STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
	BUILD_IN_SOURCE ON
	BUILD_ALWAYS OFF
	CONFIGURE_COMMAND """"
	UPDATE_COMMAND """"
	BUILD_COMMAND """"
	INSTALL_COMMAND """"
)
ExternalProject_Get_Property(GLAD SOURCE_DIR)
target_include_directories(reVision PRIVATE ${SOURCE_DIR} SYSTEM INTERFACE ${SOURCE_DIR})


################
# INCLUDE GLFW #
################
set(CUSTOM_GLFW """" CACHE PATH ""OpenGL Framework library (GLFW) root directory"")
if (CUSTOM_GLFW STREQUAL """")
	ExternalProject_Add(
		GLFW
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/glfw/glfw
		GIT_TAG master
		GIT_SHALLOW ON
		CMAKE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>			
			-DBUILD_SHARED_LIBS:BOOL=OFF
			-DBUILD_STATIC_LIBS:BOOL=ON
			-DINSTALL_LIBS:BOOL=OFF
			-DGLFW_BUILD_DOCS:BOOL=OFF			
			-DGLFW_BUILD_EXAMPLES:BOOL=OFF
			-DGLFW_BUILD_TESTS:BOOL=OFF
			-DGLFW_INSTALL:BOOL=ON
			-DGLFW_USE_HYBRID_HPG:BOOL=ON
			-DUSE_MSVC_RUNTIME_LIBRARY_DLL:BOOL=ON
			-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
			-DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS_SILENT}
			-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
			-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
			-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
			-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
		UPDATE_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(GLFW SOURCE_DIR)
	set (CUSTOM_GLFW ${SOURCE_DIR})	
endif (CUSTOM_GLFW STREQUAL """")	
target_include_directories(reVision PRIVATE ${CUSTOM_GLFW}/include/ SYSTEM INTERFACE ${CUSTOM_GLFW}/include/)
target_link_libraries(reVision
	debug		${CUSTOM_GLFW}/src/Debug/glfw3.lib
	optimized	${CUSTOM_GLFW}/src/Release/glfw3.lib		
)


###############
# INCLUDE GLM #
###############
set(CUSTOM_GLM """" CACHE PATH ""GLM root directory"")
if (CUSTOM_GLM STREQUAL """")
	ExternalProject_Add(
		GLM
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/g-truc/glm
		GIT_TAG master
		GIT_SHALLOW ON
		CMAKE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
			-DBUILD_SHARED_LIBS:BOOL=OFF
			-DBUILD_STATIC_LIBS:BOOL=ON
			-DGLM_TEST_ENABLE:BOOL=OFF
			-DGLM_TEST_ENABLE_CXX_17:BOOL=ON		
			-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
			-DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS_SILENT}
			-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
			-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
			-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
			-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
		UPDATE_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(GLM SOURCE_DIR)
	set (CUSTOM_GLM ${SOURCE_DIR})
endif (CUSTOM_GLM STREQUAL """")	
target_include_directories(reVision PRIVATE ${CUSTOM_GLM} SYSTEM INTERFACE ${CUSTOM_GLM})
target_link_libraries(reVision
	debug		${CUSTOM_GLM}/glm/Debug/glm_static.lib
	optimized	${CUSTOM_GLM}/glm/Release/glm_static.lib
)


#####################
# INCLUDE DearIMGUI #
#####################
set(CUSTOM_IMGUI """" CACHE PATH ""DearIMGUI root directory"")
if (CUSTOM_IMGUI STREQUAL """")
	ExternalProject_Add(
		IMGUI
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/ocornut/imgui
		GIT_TAG docking
		GIT_SHALLOW ON
		CONFIGURE_COMMAND """"
		UPDATE_COMMAND """"
		BUILD_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(IMGUI SOURCE_DIR)
	set (CUSTOM_IMGUI ${SOURCE_DIR})
endif (CUSTOM_IMGUI STREQUAL """")	
target_include_directories(reVision PRIVATE ${CUSTOM_IMGUI} SYSTEM INTERFACE ${CUSTOM_IMGUI})


##################
# INCLUDE SOLOUD #
##################
set(CUSTOM_SOLOUD """" CACHE PATH ""SoLoud Audio Engine root directory"")
if (CUSTOM_SOLOUD STREQUAL """")
	ExternalProject_Add(
		SOLOUD
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/external/			
		STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/external/stamps/
		SOURCE_SUBDIR contrib
		BUILD_IN_SOURCE ON
		BUILD_ALWAYS OFF
		GIT_REPOSITORY https://github.com/jarikomppa/soloud
		GIT_TAG master
		GIT_SHALLOW ON
		CMAKE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>			
			-DBUILD_SHARED_LIBS:BOOL=OFF
			-DBUILD_STATIC_LIBS:BOOL=ON
			-DINSTALL_LIBS:BOOL=OFF
			-DSOLOUD_BACKEND_COREAUDIO:BOOL=OFF
			-DSOLOUD_BACKEND_NULL:BOOL=ON
			-DSOLOUD_BACKEND_OPENSLES:BOOL=OFF
			-DSOLOUD_BACKEND_SDL2:BOOL=OFF
			-DSOLOUD_BACKEND_WASAPI:BOOL=ON
			-DSOLOUD_BACKEND_WINMM:BOOL=ON
			-DSOLOUD_BACKEND_XAUDIO2:BOOL=ON
			-DSOLOUD_BUILD_DEMOS:BOOL=OFF
			-DSOLOUD_DYNAMIC:BOOL=OFF
			-DSOLOUD_STATIC:BOOL=ON
			-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
			-DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
			-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS_SILENT}
			-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
			-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
			-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
			-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
		UPDATE_COMMAND """"
		INSTALL_COMMAND """"
	)
	ExternalProject_Get_Property(SOLOUD SOURCE_DIR)
	set (CUSTOM_SOLOUD ${SOURCE_DIR})
endif (CUSTOM_SOLOUD STREQUAL """")	
target_include_directories(reVision PRIVATE ${CUSTOM_SOLOUD}/include/ SYSTEM INTERFACE ${CUSTOM_SOLOUD}/include/)
target_link_libraries(reVision
	debug		${CUSTOM_SOLOUD}/contrib/Debug/soloud.lib
	optimized	${CUSTOM_SOLOUD}/contrib/rELEASE/soloud.lib
)
 

#################
# DOXYGEN CHECK #
#################
find_package(Doxygen QUIET)
if (DOXYGEN_FOUND)
	option(GENERATE_DOCS ""Generate documentation using Doxygen"" true)
	if (GENERATE_DOCS)		
		set(DOXYGEN_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/docs/)
		set(DOXYGEN_MARKDOWN_SUPPORT YES)
		set(DOXYGEN_BUILTIN_STL_SUPPORT YES)
		set(DOXYGEN_JAVADOC_AUTOBRIEF YES)
		set(DOXYGEN_USE_MDFILE_AS_MAINPAGE ${PROJECT_SOURCE_DIR}/README.md)
		set(DOXYGEN_EXCLUDE ${PROJECT_SOURCE_DIR}/external/)
		doxygen_add_docs(Documentation ${PROJECT_SOURCE_DIR} COMMENT ""Generate docs"")
	endif (GENERATE_DOCS)
endif (DOXYGEN_FOUND)

 
# Visual studio specific setting: make the engine the startup project
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT reVision)",3.10,3.1
33870,linuxdeepin,deepin-installer-reborn,False,False,False,False,False,37,C++,2019-09-11 15:18:44+00:00,2016-08-15 02:34:00+00:00,27,2168,"cmake_minimum_required(VERSION 3.1)
project(deepin-installer C CXX)

# Import folders
add_subdirectory(data)
add_subdirectory(docs)
add_subdirectory(hooks)
add_subdirectory(check_hooks)
add_subdirectory(resources)
add_subdirectory(src)
add_subdirectory(tools)
",3.1,3.1
33919,FluidSynth,fluidsynth,False,False,False,False,False,38,C,2020-05-17 07:58:44+00:00,2017-06-24 15:09:55+00:00,584,2096,"# FluidSynth - A Software Synthesizer
#
# Copyright (C) 2003-2011 Peter Hanappe and others.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA

# CMake based build system. Pedro Lopez-Cabanillas <plcl@users.sf.net>

cmake_minimum_required ( VERSION 3.1.0 ) # because of CMAKE_C_STANDARD
project ( FluidSynth C )
set ( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_admin )

# FluidSynth package name
set ( PACKAGE ""fluidsynth"" )

# FluidSynth package version
set ( FLUIDSYNTH_VERSION_MAJOR 2 )
set ( FLUIDSYNTH_VERSION_MINOR 1 )
set ( FLUIDSYNTH_VERSION_MICRO 2 )
set ( VERSION ""${FLUIDSYNTH_VERSION_MAJOR}.${FLUIDSYNTH_VERSION_MINOR}.${FLUIDSYNTH_VERSION_MICRO}"" )
set ( FLUIDSYNTH_VERSION ""\""${VERSION}\"""" )

# libfluidsynth - Library version
# *** NOTICE ***
# Update library version upon each release (follow these steps in order)
# if any source code changes: REVISION++
# if any interfaces added/removed/changed: REVISION=0
# if any interfaces removed/changed (compatibility broken): CURRENT++
# if any interfaces have been added: AGE++
# if any interfaces have been removed/changed (compatibility broken): AGE=0
# This is not exactly the same algorithm as the libtool one, but the results are the same.
set ( LIB_VERSION_CURRENT 2 )
set ( LIB_VERSION_AGE 3 )
set ( LIB_VERSION_REVISION 2 )
set ( LIB_VERSION_INFO
      ""${LIB_VERSION_CURRENT}.${LIB_VERSION_AGE}.${LIB_VERSION_REVISION}"" )

# Options disabled by default
option ( enable-debug ""enable debugging (default=no)"" off )
option ( enable-floats ""enable type float instead of double for DSP samples"" off )
option ( enable-fpe-check ""enable Floating Point Exception checks and debug messages"" off )
option ( enable-portaudio ""compile PortAudio support"" off )
option ( enable-profiling ""profile the dsp code"" off )
option ( enable-trap-on-fpe ""enable SIGFPE trap on Floating Point Exceptions"" off )
option ( enable-ubsan ""compile and link against UBSan (for debugging fluidsynth internals)"" off )

# Options enabled by default
option ( enable-aufile ""compile support for sound file output"" on )
option ( BUILD_SHARED_LIBS ""Build a shared object or DLL"" on )
option ( enable-dbus ""compile DBUS support (if it is available)"" on )
option ( enable-ipv6  ""enable ipv6 support"" on )
option ( enable-jack ""compile JACK support (if it is available)"" on )
option ( enable-ladspa ""enable LADSPA effect units"" on )
option ( enable-libinstpatch ""use libinstpatch (if available) to load DLS and GIG files"" on )
option ( enable-libsndfile ""compile libsndfile support (if it is available)"" on )
option ( enable-midishare ""compile MidiShare support (if it is available)"" on )
option ( enable-opensles ""compile OpenSLES support (if it is available)"" off )
option ( enable-oboe ""compile Oboe support (requires OpenSLES and/or AAudio)"" off )
option ( enable-network ""enable network support (requires BSD sockets)"" on )
option ( enable-oss ""compile OSS support (if it is available)"" on )
option ( enable-dsound ""compile DirectSound support (if it is available)"" on )
option ( enable-waveout ""compile Windows WaveOut support (if it is available)"" on )
option ( enable-winmidi ""compile Windows MIDI support (if it is available)"" on )
option ( enable-sdl2 ""compile SDL2 audio support (if it is available)"" on )
option ( enable-pkgconfig ""use pkg-config to locate fluidsynth's (mostly optional) dependencies"" on )
option ( enable-pulseaudio ""compile PulseAudio support (if it is available)"" on )
option ( enable-readline ""compile readline lib line editing (if it is available)"" on )
option ( enable-threads ""enable multi-threading support (such as parallel voice synthesis)"" on )

# Platform specific options
if ( CMAKE_SYSTEM MATCHES ""Linux|FreeBSD|DragonFly"" )
    option ( enable-lash ""compile LASH support (if it is available)"" on )
    option ( enable-alsa ""compile ALSA support (if it is available)"" on )
endif ( CMAKE_SYSTEM MATCHES ""Linux|FreeBSD|DragonFly"" )

if ( CMAKE_SYSTEM MATCHES ""Linux"" )
    option ( enable-systemd ""compile systemd support (if it is available)"" on )
endif ( CMAKE_SYSTEM MATCHES ""Linux"" )

if ( CMAKE_SYSTEM MATCHES ""Darwin"" )
    option ( enable-coreaudio ""compile CoreAudio support (if it is available)"" on )
    option ( enable-coremidi ""compile CoreMIDI support (if it is available)"" on )
    option ( enable-framework ""create a Mac OSX style FluidSynth.framework"" on )
endif ( CMAKE_SYSTEM MATCHES ""Darwin"" )

if ( CMAKE_SYSTEM MATCHES ""OS2"" )
    option ( enable-dart ""compile DART support (if it is available)"" on )
    set ( enable-ipv6 off )
endif ( CMAKE_SYSTEM MATCHES ""OS2"" )

# Initialize the library directory name suffix.
if (NOT MINGW AND NOT MSVC AND NOT CMAKE_SYSTEM_NAME MATCHES ""FreeBSD|DragonFly"")
if ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
  set ( _init_lib_suffix ""64"" )
else ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
  set ( _init_lib_suffix """" )
endif ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
else ()
  set ( _init_lib_suffix """" )
endif()
set ( LIB_SUFFIX ${_init_lib_suffix} CACHE STRING
      ""library directory name suffix (32/64/nothing)"" )
mark_as_advanced ( LIB_SUFFIX )

# the default C standard to use for all targets
set(CMAKE_C_STANDARD 90)

# Compile with position independent code if the user requested a shared lib, i.e. no PIC if static requested.
# This is cmakes default behavior, but here it's explicitly required due to the use of libfluidsynth-OBJ as object library,
# which would otherwise always be compiled without PIC.
if ( NOT CMAKE_POSITION_INDEPENDENT_CODE )
    set ( CMAKE_POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS} )
endif ( NOT CMAKE_POSITION_INDEPENDENT_CODE )

# the default global visibility level for all target
# no visibility support on OS2
if ( NOT OS2 )
    set ( CMAKE_C_VISIBILITY_PRESET hidden )
endif ( NOT OS2 )

# enforce visibility control for all types of cmake targets
if ( POLICY CMP0063 )
  cmake_policy ( SET CMP0063 NEW )
endif ( POLICY CMP0063 )

# Default install directory names
include ( DefaultDirs )

# Basic C library checks
include ( CheckSTDC )
include ( CheckIncludeFile )
include ( CheckFunctionExists )
check_include_file ( string.h HAVE_STRING_H )
check_include_file ( stdlib.h HAVE_STDLIB_H )
check_include_file ( stdio.h HAVE_STDIO_H )
check_include_file ( math.h HAVE_MATH_H )
check_include_file ( errno.h HAVE_ERRNO_H )
check_include_file ( stdarg.h HAVE_STDARG_H )
check_include_file ( unistd.h HAVE_UNISTD_H )
check_include_file ( sys/mman.h HAVE_SYS_MMAN_H )
check_include_file ( sys/types.h HAVE_SYS_TYPES_H )
check_include_file ( sys/time.h HAVE_SYS_TIME_H )
check_include_file ( sys/stat.h HAVE_SYS_STAT_H )
check_include_file ( fcntl.h HAVE_FCNTL_H )
check_include_file ( sys/socket.h HAVE_SYS_SOCKET_H )
check_include_file ( netinet/in.h HAVE_NETINET_IN_H )
check_include_file ( netinet/tcp.h HAVE_NETINET_TCP_H )
check_include_file ( arpa/inet.h HAVE_ARPA_INET_H )
check_include_file ( limits.h  HAVE_LIMITS_H )
check_include_file ( pthread.h HAVE_PTHREAD_H )
check_include_file ( signal.h HAVE_SIGNAL_H )
check_include_file ( getopt.h HAVE_GETOPT_H )
check_include_file ( stdint.h HAVE_STDINT_H )
include ( TestInline )
include ( TestVLA )
include ( TestBigEndian )
test_big_endian ( WORDS_BIGENDIAN )

unset ( LIBFLUID_CPPFLAGS CACHE )
unset ( LIBFLUID_LIBS CACHE )
unset ( FLUID_CPPFLAGS CACHE )
unset ( FLUID_LIBS CACHE )
unset ( ENABLE_UBSAN CACHE )

if ( CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES ""Clang"" OR CMAKE_C_COMPILER_ID STREQUAL ""Intel"" )
  if ( NOT APPLE AND NOT OS2 )
    set ( CMAKE_EXE_LINKER_FLAGS
          ""${CMAKE_EXE_LINKER_FLAGS} -Wl,--as-needed"" )
    set ( CMAKE_SHARED_LINKER_FLAGS
          ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined"" )
  endif ( NOT APPLE AND NOT OS2 )

  # define some warning flags
  set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -W -Wpointer-arith -Wcast-qual -Wstrict-prototypes -Wno-unused-parameter -Wdeclaration-after-statement -Werror=implicit-function-declaration"" )

  # prepend to build type specific flags, to allow users to override
  set ( CMAKE_C_FLAGS_DEBUG ""-g ${CMAKE_C_FLAGS_DEBUG}"" )

  if ( CMAKE_C_COMPILER_ID STREQUAL ""Intel"" )
    # icc needs the restrict flag to recognize C99 restrict pointers
    set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -restrict"" )
  else () # not intel
    # gcc and clang support bad function cast and alignment warnings; add them as well.
    set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wbad-function-cast -Wcast-align"" )

    if ( enable-ubsan )
      set ( CMAKE_C_FLAGS ""-fsanitize=address,undefined ${CMAKE_C_FLAGS}"" )
      set ( CMAKE_EXE_LINKER_FLAGS ""-fsanitize=address,undefined ${CMAKE_EXE_LINKER_FLAGS}"" )
      set ( CMAKE_SHARED_LINKER_FLAGS ""-fsanitize=address,undefined ${CMAKE_SHARED_LINKER_FLAGS}"" )
      set ( ENABLE_UBSAN 1 )
    endif ( enable-ubsan )
  endif (CMAKE_C_COMPILER_ID STREQUAL ""Intel"" )
endif ( CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES ""Clang"" OR CMAKE_C_COMPILER_ID STREQUAL ""Intel"" )

# Windows
unset ( WINDOWS_LIBS CACHE )
unset ( DSOUND_SUPPORT CACHE )
unset ( WAVEOUT_SUPPORT CACHE )
unset ( WINMIDI_SUPPORT CACHE )
unset ( MINGW32 CACHE )
if ( WIN32 )
  include ( CheckIncludeFiles )

  # Check presence of MS include files
  check_include_file ( windows.h HAVE_WINDOWS_H )
  check_include_file ( io.h HAVE_IO_H )
  check_include_file ( dsound.h HAVE_DSOUND_H )
  check_include_files ( ""windows.h;mmsystem.h"" HAVE_MMSYSTEM_H )

  if ( enable-network )
    set ( WINDOWS_LIBS ""${WINDOWS_LIBS};ws2_32"" )
  endif ( enable-network )

  if ( enable-dsound AND HAVE_DSOUND_H )
    set ( WINDOWS_LIBS ""${WINDOWS_LIBS};dsound"" )
    set ( DSOUND_SUPPORT 1 )
  endif ()

  if ( enable-winmidi AND HAVE_MMSYSTEM_H )
    set ( WINDOWS_LIBS ""${WINDOWS_LIBS};winmm"" )
    set ( WINMIDI_SUPPORT 1 )
  endif ()

  if ( enable-waveout AND HAVE_MMSYSTEM_H )
    set ( WINDOWS_LIBS ""${WINDOWS_LIBS};winmm"" )
    set ( WAVEOUT_SUPPORT 1 )
  endif ()

  set ( LIBFLUID_CPPFLAGS ""-DFLUIDSYNTH_DLL_EXPORTS"" )
  set ( FLUID_CPPFLAGS ""-DFLUIDSYNTH_NOT_A_DLL"" )
  if  ( MSVC )
    # statically link in the CRT library to avoid a bunch of runtime DLL dependencies and allow 
    # the CI windows builds to be run under WinXP
    foreach ( flag_var
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL
        CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL
        CMAKE_CXX_FLAGS_RELWITHDEBINFO
        )
      if ( ${flag_var} MATCHES ""/MD"" )
        string ( REGEX REPLACE ""/MD"" ""/MT"" ${flag_var} ""${${flag_var}}"" )
      endif ( ${flag_var} MATCHES ""/MD"" )
    endforeach ( flag_var )

  else ( MSVC )
    # only set debug postfix if not MSVS building
    set ( CMAKE_DEBUG_POSTFIX ""_debug"" )
  endif ( MSVC )

  # MinGW compiler (a Windows GCC port)
  if ( MINGW )
    set ( MINGW32 1 )
    add_compile_options ( -mms-bitfields )
  endif  ( MINGW )
else ( WIN32 )
# Check PThreads, but not in Windows
  find_package ( Threads REQUIRED )
  set ( LIBFLUID_LIBS ""m"" ${CMAKE_THREAD_LIBS_INIT} )
endif ( WIN32 )

# IBM OS/2
unset ( DART_SUPPORT CACHE )
unset ( DART_LIBS CACHE )
unset ( DART_INCLUDE_DIRS CACHE )
if ( CMAKE_SYSTEM MATCHES ""OS2"" )
  set ( CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Zbin-files"" )
  set ( CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Zbin-files"" )
  if ( enable-dart )
    check_include_files ( ""os2.h;os2me.h"" HAVE_DART_H )
    set ( DART_SUPPORT ${HAVE_DART_H} )
    unset ( DART_INCLUDE_DIRS CACHE )
  endif ( enable-dart )
endif ( CMAKE_SYSTEM MATCHES ""OS2"" )

# Solaris / SunOS
if ( CMAKE_SYSTEM MATCHES ""SunOS"" )
  set ( FLUID_LIBS ""${FLUID_LIBS};nsl;socket"" )
  set ( LIBFLUID_LIBS ""${LIBFLUID_LIBS};nsl;socket"" )
endif ( CMAKE_SYSTEM MATCHES ""SunOS"" )

# Apple Mac OSX
unset ( COREAUDIO_SUPPORT CACHE )
unset ( COREAUDIO_LIBS CACHE )
unset ( COREMIDI_SUPPORT CACHE )
unset ( COREMIDI_LIBS CACHE )
unset ( DARWIN CACHE )
unset ( MACOSX_FRAMEWORK CACHE )
if ( CMAKE_SYSTEM MATCHES ""Darwin"" )
  set ( DARWIN 1 )
  set ( CMAKE_INSTALL_NAME_DIR
        ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR} )
  if ( enable-coreaudio )
    check_include_file ( CoreAudio/AudioHardware.h COREAUDIO_FOUND )
    if ( COREAUDIO_FOUND )
      set ( COREAUDIO_SUPPORT ${COREAUDIO_FOUND} )
      set ( COREAUDIO_LIBS ""-Wl,-framework,CoreAudio,-framework,AudioUnit"" )
    endif ( COREAUDIO_FOUND )
  endif ( enable-coreaudio )
  if ( enable-coremidi )
    check_include_file ( CoreMIDI/MIDIServices.h COREMIDI_FOUND )
    if ( COREMIDI_FOUND )
      set ( COREMIDI_SUPPORT ${COREMIDI_FOUND} )
      set ( COREMIDI_LIBS ""-Wl,-framework,CoreMIDI,-framework,CoreServices"" )
    endif ( COREMIDI_FOUND )
  endif ( enable-coremidi )
  if ( enable-framework )
    set ( MACOSX_FRAMEWORK 1 )
  endif ( enable-framework )
endif ( CMAKE_SYSTEM MATCHES ""Darwin"" )


unset ( HAVE_INETNTOP CACHE )
unset ( IPV6_SUPPORT CACHE )
CHECK_FUNCTION_EXISTS ( ""inet_ntop"" HAVE_INETNTOP )
if ( enable-ipv6 )
  if ( HAVE_INETNTOP )
    set ( IPV6_SUPPORT 1 )
  endif ( HAVE_INETNTOP )
endif ( enable-ipv6 )

unset ( NETWORK_SUPPORT )
if ( enable-network )
    set ( NETWORK_SUPPORT 1 )
endif ( enable-network )

unset ( WITH_FLOAT CACHE )
if ( enable-floats )
    set ( WITH_FLOAT 1 )
endif ( enable-floats )

unset ( WITH_PROFILING CACHE )
if ( enable-profiling )
    set ( WITH_PROFILING 1 )
    if ( CMAKE_C_COMPILER_ID STREQUAL ""Clang"" )
      set ( OPT_FLAGS ""-Rpass=loop-vectorize"" ) # -Rpass-analysis=loop-vectorize"" )
    elseif ( CMAKE_C_COMPILER_ID STREQUAL ""Intel"" )
      set ( OPT_FLAGS ""-qopt-report=3"" )
    elseif ( CMAKE_C_COMPILER_ID STREQUAL ""GNU"" )
      set ( OPT_FLAGS """" )
    endif ( )
    
    set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OPT_FLAGS}"" )
    
    if ( CMAKE_VERSION VERSION_GREATER ""3.6.0"" )
        find_program( CLANG_TIDY
                    NAMES ""clang-tidy""
                    DOC ""Path to clang-tidy executable"" )

        if ( CLANG_TIDY )
            message ( STATUS ""Found clang-tidy at ${CLANG_TIDY}"" )
            execute_process ( COMMAND ${CLANG_TIDY} ""--version"" )
            set ( CMAKE_C_CLANG_TIDY ${CLANG_TIDY} )
        endif ( CLANG_TIDY )
    endif ( CMAKE_VERSION VERSION_GREATER ""3.6.0"" )

endif ( enable-profiling )

unset ( ENABLE_TRAPONFPE CACHE )
unset ( TRAP_ON_FPE CACHE )
if ( enable-trap-on-fpe AND NOT APPLE AND NOT WIN32 )
    set ( ENABLE_TRAPONFPE 1 )
    set ( TRAP_ON_FPE 1 )
endif ( enable-trap-on-fpe AND NOT APPLE AND NOT WIN32 )

unset ( ENABLE_FPECHECK CACHE )
unset ( FPE_CHECK CACHE )
if ( enable-fpe-check AND NOT APPLE AND NOT WIN32 )
    set ( ENABLE_FPECHECK 1 )
    set ( FPE_CHECK 1 )
endif ( enable-fpe-check AND NOT APPLE AND NOT WIN32 )

if ( enable-debug )
    set ( CMAKE_BUILD_TYPE ""Debug"" CACHE STRING
          ""Choose the build type, options: Debug Release RelWithDebInfo MinSizeRel"" FORCE )
endif ( enable-debug )

if ( NOT CMAKE_BUILD_TYPE )
    set ( CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING
          ""Choose the build type, options: Debug Release RelWithDebInfo MinSizeRel"" FORCE )
endif ( NOT CMAKE_BUILD_TYPE )

unset ( ENABLE_DEBUG CACHE )
if ( CMAKE_BUILD_TYPE MATCHES ""Debug"" )
    set ( ENABLE_DEBUG 1 )
    add_definitions(-DDEBUG)
endif ( CMAKE_BUILD_TYPE MATCHES ""Debug"" )

# Additional targets to perform clang-format/clang-tidy
# Get all project files
file(GLOB_RECURSE
     ALL_SOURCE_FILES
     LIST_DIRECTORIES false
     ${CMAKE_SOURCE_DIR}/*.[chi]
     ${CMAKE_SOURCE_DIR}/*.[chi]pp
     ${CMAKE_SOURCE_DIR}/*.[chi]xx
     ${CMAKE_SOURCE_DIR}/*.cc
     ${CMAKE_SOURCE_DIR}/*.hh
     ${CMAKE_SOURCE_DIR}/*.ii
     ${CMAKE_SOURCE_DIR}/*.[CHI]
     )

find_program ( ASTYLE ""astyle"" )
if ( ASTYLE )
  add_custom_target(
    format
    COMMAND ${ASTYLE}
    -A1
    -xb
    -j
    -k3
    -p
    -f
    -n
    -U
    ${ALL_SOURCE_FILES}
    )
endif(ASTYLE)

if(NOT enable-pkgconfig)

    FIND_LIBRARY( GLIB_LIB NAMES glib glib-2.0 PATH GLIB_LIBRARY_DIR )
    FIND_LIBRARY( GTHREAD_LIB NAMES gthread gthread-2.0 PATH GTHREAD_LIBRARY_DIR )
    FIND_PATH( GLIBH_DIR glib.h PATH GLIB_INCLUDE_DIR )
    FIND_PATH( GLIBCONF_DIR glibconfig.h PATH GLIBCONF_INCLUDE_DIR )

    IF( GLIB_LIB MATCHES ""GLIB_LIB-NOTFOUND"" OR
            GTHREAD_LIB MATCHES ""GTHREAD_LIB-NOTFOUND"" OR
            GLIBH_DIR MATCHES ""GLIBH_DIR-NOTFOUND"" OR
            GLIBCONF_DIR MATCHES ""GLIBCONF_DIR-NOTFOUND"")
            message( WARNING ""Not sure if I found GLIB, continuing anyway."")
    ENDIF()

    SET( GLIB_INCLUDE_DIRS ${GLIBH_DIR} ${GLIBCONF_DIR} )
    SET( GLIB_LIBRARIES ${GLIB_LIB} ${GTHREAD_LIB} )

    message( STATUS ""GLIB_INCLUDE_DIRS: "" ${GLIB_INCLUDE_DIRS} )
    message( STATUS ""GLIB_LIBRARIES: "" ${GLIB_LIBRARIES} )

else(NOT enable-pkgconfig)

    find_package ( PkgConfig REQUIRED )

    # Mandatory libraries: glib and gthread
    pkg_check_modules ( GLIB REQUIRED glib-2.0>=2.6.5 gthread-2.0>=2.6.5 )

    if ( GLIB_glib-2.0_VERSION AND GLIB_glib-2.0_VERSION VERSION_LESS ""2.26.0"" )
        message ( WARNING ""Your version of glib is very old. This may cause problems with fluidsynth's sample cache on Windows. Consider updating to glib 2.26 or newer!"" )
    endif ( GLIB_glib-2.0_VERSION AND GLIB_glib-2.0_VERSION VERSION_LESS ""2.26.0"" )

    include ( UnsetPkgConfig )

    # Optional features
    unset ( LIBSNDFILE_SUPPORT CACHE )
    unset ( LIBSNDFILE_HASVORBIS CACHE )
    if ( enable-libsndfile )
    pkg_check_modules ( LIBSNDFILE sndfile>=1.0.0 )
    set ( LIBSNDFILE_SUPPORT ${LIBSNDFILE_FOUND} )
    if ( LIBSNDFILE_SUPPORT )
        pkg_check_modules ( LIBSNDFILE_VORBIS sndfile>=1.0.18 )
        set ( LIBSNDFILE_HASVORBIS ${LIBSNDFILE_VORBIS_FOUND} )
    endif ( LIBSNDFILE_SUPPORT )
    else ( enable-libsndfile )
    unset_pkg_config ( LIBSNDFILE )
    unset_pkg_config ( LIBSNDFILE_VORBIS )
    endif ( enable-libsndfile )

    unset ( PULSE_SUPPORT CACHE )
    if ( enable-pulseaudio )
    pkg_check_modules ( PULSE libpulse-simple>=0.9.8 )
    set ( PULSE_SUPPORT ${PULSE_FOUND} )
    else ( enable-pulseaudio )
    unset_pkg_config ( PULSE )
    endif ( enable-pulseaudio )

    unset ( ALSA_SUPPORT CACHE )
    if ( enable-alsa )
    pkg_check_modules ( ALSA alsa>=0.9.1 )
    set ( ALSA_SUPPORT ${ALSA_FOUND} )
    else ( enable-alsa )
    unset_pkg_config ( ALSA )
    endif ( enable-alsa )

    unset ( PORTAUDIO_SUPPORT CACHE )
    if ( enable-portaudio )
    pkg_check_modules ( PORTAUDIO portaudio-2.0>=19 )
    set ( PORTAUDIO_SUPPORT ${PORTAUDIO_FOUND} )
    else ( enable-portaudio )
    unset_pkg_config ( PORTAUDIO )
    endif ( enable-portaudio )

    unset ( JACK_SUPPORT CACHE )
    if ( enable-jack )
    pkg_check_modules ( JACK jack )
    set ( JACK_SUPPORT ${JACK_FOUND} )
    else ( enable-jack )
    unset_pkg_config ( JACK )
    endif ( enable-jack )

    unset ( LASH_SUPPORT CACHE )
    if ( enable-lash )
    pkg_check_modules ( LASH lash-1.0>=0.3 )
    if ( LASH_FOUND )
        set ( LASH_SUPPORT 1 )
        add_definitions ( -DHAVE_LASH )
    endif ( LASH_FOUND )
    else ( enable-lash )
    unset_pkg_config ( LASH )
    remove_definitions( -DHAVE_LASH )
    endif ( enable-lash )

    unset ( SYSTEMD_SUPPORT CACHE )
    if ( enable-systemd )
        pkg_check_modules ( SYSTEMD libsystemd )
        set ( SYSTEMD_SUPPORT ${SYSTEMD_FOUND} )
    else ( enable-systemd )
        unset_pkg_config ( SYSTEMD )
    endif ( enable-systemd )

    unset ( DBUS_SUPPORT CACHE )
    if ( enable-dbus )
    pkg_check_modules ( DBUS dbus-1>=1.0.0 )
    set ( DBUS_SUPPORT ${DBUS_FOUND} )
    else ( enable-dbus )
    unset_pkg_config ( DBUS )
    endif ( enable-dbus )

    unset ( LADSPA_SUPPORT CACHE )
    if ( enable-ladspa )
    check_include_file ( ladspa.h LADSPA_SUPPORT )
    if ( LADSPA_SUPPORT )
        pkg_check_modules ( GMODULE REQUIRED gmodule-2.0>=2.6.5 )
        set ( LADSPA 1 )
    endif ( LADSPA_SUPPORT )
    endif ( enable-ladspa )

    unset ( LIBINSTPATCH_SUPPORT CACHE )
    if ( enable-libinstpatch )
        pkg_check_modules ( LIBINSTPATCH libinstpatch-1.0>=1.1.0 )
        set ( LIBINSTPATCH_SUPPORT ${LIBINSTPATCH_FOUND} )
    endif ( enable-libinstpatch )

    unset ( SDL2_SUPPORT CACHE )
    if ( enable-sdl2 )
        pkg_check_modules ( SDL2 sdl2 )
        set ( SDL2_SUPPORT ${SDL2_FOUND} )
    else ( enable-sdl2 )
        unset_pkg_config ( SDL2 )
    endif ( enable-sdl2 )

    unset ( OBOE_SUPPORT CACHE )
    unset ( OBOE_LIBS CACHE )
    if ( enable-oboe )
    # enable C++ as it's needed for oboe
    enable_language ( CXX )
    pkg_check_modules ( OBOE oboe-1.0 )
    if ( OBOE_FOUND )
        set ( OBOE_SUPPORT 1 )
        set ( OBOE_LIBS ${OBOE_LIBRARIES} )
    endif ( OBOE_FOUND )
    endif ( enable-oboe )

    unset ( WITH_READLINE CACHE )
    unset ( READLINE_LIBS CACHE )
    if ( enable-readline )
    pkg_check_modules ( READLINE readline )
    if ( NOT READLINE_FOUND )
        find_package ( READLINE )
        set ( READLINE_FOUND ${HAVE_READLINE} )
    endif ( NOT READLINE_FOUND )
    if ( READLINE_FOUND )
        set ( WITH_READLINE 1 )
        set ( READLINE_LIBS ${READLINE_LIBRARIES} )
    endif ( READLINE_FOUND )
    endif ( enable-readline )

endif(NOT enable-pkgconfig)

unset ( AUFILE_SUPPORT CACHE )
if ( enable-aufile )
  set ( AUFILE_SUPPORT 1 )
endif ( enable-aufile )

unset ( OSS_SUPPORT CACHE )
if ( enable-oss )
  find_package ( OSS QUIET )
  set ( OSS_SUPPORT ${OSS_FOUND} )
endif ( enable-oss )

unset ( MIDISHARE_SUPPORT CACHE )
if ( enable-midishare )
  find_package ( MidiShare QUIET )
  set ( MIDISHARE_SUPPORT ${MidiShare_FOUND} )
  if ( MidiShare_FOUND )
    set ( MidiShare_LIBS ${MidiShare_LIBRARIES} )
  else ( MidiShare_FOUND )
    unset ( MidiShare_LIBS CACHE )
  endif ( MidiShare_FOUND )
else ( enable-midishare )
  unset ( MidiShare_LIBS CACHE )
endif ( enable-midishare )

unset ( OPENSLES_SUPPORT CACHE )
unset ( OpenSLES_LIBS CACHE )
if ( enable-opensles )
  check_include_file ( SLES/OpenSLES.h OPENSLES_SUPPORT )
  if ( OPENSLES_SUPPORT )
    find_library ( OpenSLES_LIBS OpenSLES )
    if ( NOT OpenSLES_LIBS )
      unset ( OPENSLES_SUPPORT )
    endif ( NOT OpenSLES_LIBS )
  endif ( OPENSLES_SUPPORT )
endif ( enable-opensles )

unset ( ENABLE_MIXER_THREADS CACHE )
if ( enable-threads )
  set ( ENABLE_MIXER_THREADS 1 )
endif ( enable-threads )

unset ( HAVE_OPENMP CACHE )
find_package ( OpenMP QUIET )
if ( OpenMP_FOUND OR OpenMP_C_FOUND )
    message(STATUS ""Found OpenMP ${OpenMP_C_SPEC_DATE}"")
    # require at least OMP 4.0
    if ( ( NOT OpenMP_C_SPEC_DATE LESS ""201307"" ) OR NOT ( OpenMP_C_VERSION VERSION_LESS ""4.0"" ) )
        set ( CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"" )
        set ( CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"" )

        # currently no need to link against openMP runtime lib(s). If need be, uncomment below.
        #  set ( CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"" )
        #  set ( LIBFLUID_LIBS ""${OpenMP_C_LIBRARIES};${LIBFLUID_LIBS}"" )
        set ( HAVE_OPENMP 1 )
    endif()
endif()

# manipulate some variables to setup a proper test env
set(TEST_SOUNDFONT ""${CMAKE_SOURCE_DIR}/sf2/VintageDreamsWaves-v2.sf2"")
set(TEST_SOUNDFONT_SF3 ""${CMAKE_SOURCE_DIR}/sf2/VintageDreamsWaves-v2.sf3"")

# Check for C99 float math

unset ( HAVE_SINF CACHE )
CHECK_FUNCTION_EXISTS ( ""sinf"" HAVE_SINF )
if ( HAVE_SINF )
  set ( HAVE_SINF 1 )
endif ( HAVE_SINF )

unset ( HAVE_COSF CACHE )
CHECK_FUNCTION_EXISTS ( ""cosf"" HAVE_COSF )
if ( HAVE_COSF )
  set ( HAVE_COSF 1 )
endif ( HAVE_COSF )

unset ( HAVE_FABSF CACHE )
CHECK_FUNCTION_EXISTS ( ""fabsf"" HAVE_FABSF )
if ( HAVE_FABSF )
  set ( HAVE_FABSF 1 )
endif ( HAVE_FABSF )

unset ( HAVE_POWF CACHE )
CHECK_FUNCTION_EXISTS ( ""powf"" HAVE_POWF )
if ( HAVE_POWF )
  set ( HAVE_POWF 1 )
endif ( HAVE_POWF )

unset ( HAVE_SQRTF CACHE )
CHECK_FUNCTION_EXISTS ( ""sqrtf"" HAVE_SQRTF )
if ( HAVE_SQRTF )
  set ( HAVE_SQRTF 1 )
endif ( HAVE_SQRTF )

unset ( HAVE_LOGF CACHE )
CHECK_FUNCTION_EXISTS ( ""logf"" HAVE_LOGF )
if ( HAVE_LOGF )
  set ( HAVE_LOGF 1 )
endif ( HAVE_LOGF )

# General configuration file
configure_file ( ${CMAKE_SOURCE_DIR}/src/config.cmake
                 ${CMAKE_BINARY_DIR}/config.h )

# Setup linker directories NOW, as the command will apply only to targets created after it has been called.
link_directories (
    ${GLIB_LIBRARY_DIRS}
    ${LASH_LIBRARY_DIRS}
    ${JACK_LIBRARY_DIRS}
    ${ALSA_LIBRARY_DIRS}
    ${PULSE_LIBRARY_DIRS}
    ${PORTAUDIO_LIBRARY_DIRS}
    ${LIBSNDFILE_LIBRARY_DIRS}
    ${DBUS_LIBRARY_DIRS}
    ${SDL2_LIBRARY_DIRS}
    ${OBOE_LIBRARY_DIRS}
    ${LIBINSTPATCH_LIBRARY_DIRS}
)

# Process subdirectories
add_subdirectory ( src )
add_subdirectory ( test )
add_subdirectory ( doc )

# pkg-config support
set ( prefix ""${CMAKE_INSTALL_PREFIX}"" )
set ( exec_prefix ""\${prefix}"" )
if ( IS_ABSOLUTE ""${LIB_INSTALL_DIR}"" )
  set ( libdir ""${LIB_INSTALL_DIR}"" )
else ()
  set ( libdir ""\${exec_prefix}/${LIB_INSTALL_DIR}"" )
endif ()
if ( IS_ABSOLUTE ""${INCLUDE_INSTALL_DIR}"" )
  set ( includedir ""${INCLUDE_INSTALL_DIR}"" )
else ()
  set ( includedir ""\${prefix}/${INCLUDE_INSTALL_DIR}"" )
endif ()
configure_file ( fluidsynth.pc.in
	${CMAKE_BINARY_DIR}/fluidsynth.pc IMMEDIATE @ONLY )
install ( FILES ${CMAKE_BINARY_DIR}/fluidsynth.pc
	DESTINATION ${LIB_INSTALL_DIR}/pkgconfig )

# Extra targets for Unix build environments
if ( UNIX )
    # RPM spec
    configure_file ( fluidsynth.spec.in
        ${CMAKE_BINARY_DIR}/fluidsynth.spec IMMEDIATE @ONLY )

    if ( DEFINED FLUID_DAEMON_ENV_FILE)
        configure_file ( fluidsynth.service.in
        ${CMAKE_BINARY_DIR}/fluidsynth.service @ONLY )

        configure_file ( fluidsynth.conf.in
        ${CMAKE_BINARY_DIR}/fluidsynth.conf @ONLY )

    endif ( DEFINED FLUID_DAEMON_ENV_FILE )

    # uninstall custom target
    configure_file ( ""${CMAKE_SOURCE_DIR}/cmake_admin/cmake_uninstall.cmake.in""
      ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"" IMMEDIATE @ONLY)
    add_custom_target ( uninstall
      ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"")

    # tarball custom target
    add_custom_target ( tarball
        COMMAND mkdir -p ${PACKAGE}-${VERSION}
        COMMAND cp -r bindings ${PACKAGE}-${VERSION}
        COMMAND cp -r cmake_admin ${PACKAGE}-${VERSION}
        COMMAND cp -r doc ${PACKAGE}-${VERSION}
        COMMAND cp -r include ${PACKAGE}-${VERSION}
        COMMAND cp -r src ${PACKAGE}-${VERSION}
        COMMAND cp AUTHORS ChangeLog CMakeLists.txt LICENSE ${PACKAGE}.* INSTALL NEWS README* THANKS TODO ${PACKAGE}-${VERSION}
#       COMMAND tar -cj --exclude .svn --exclude Makefile.am -f ${PACKAGE}-${VERSION}.tar.bz2 ${PACKAGE}-${VERSION}
#       COMMAND tar -cz --exclude .svn --exclude Makefile.am -f ${PACKAGE}-${VERSION}.tar.gz ${PACKAGE}-${VERSION}
#       COMMAND zip -qr ${PACKAGE}-${VERSION}.zip ${PACKAGE}-${VERSION} -x '*.svn*' -x '*Makefile.am'
        COMMAND tar -cj --exclude .svn -f ${PACKAGE}-${VERSION}.tar.bz2 ${PACKAGE}-${VERSION}
        COMMAND tar -cz --exclude .svn -f ${PACKAGE}-${VERSION}.tar.gz ${PACKAGE}-${VERSION}
        COMMAND zip -qr ${PACKAGE}-${VERSION}.zip ${PACKAGE}-${VERSION} -x '*.svn*'
        COMMAND rm -rf ${PACKAGE}-${VERSION}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    )

endif ( UNIX )

include ( report )

# CPack support
set ( CPACK_PACKAGE_DESCRIPTION_SUMMARY ""FluidSynth real-time synthesizer"" )
set ( CPACK_PACKAGE_VENDOR ""fluidsynth.org"" )
set ( CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md"" )
set ( CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE"" )
set ( CPACK_PACKAGE_VERSION_MAJOR ${FLUIDSYNTH_VERSION_MAJOR} )
set ( CPACK_PACKAGE_VERSION_MINOR ${FLUIDSYNTH_VERSION_MINOR} )
set ( CPACK_PACKAGE_VERSION_PATCH ${FLUIDSYNTH_VERSION_MICRO} )
set ( CPACK_PACKAGE_EXECUTABLES ""fluidsynth"" ""FluidSynth CLI"" )

# source packages
set ( CPACK_SOURCE_GENERATOR TGZ;TBZ2;ZIP )
set ( CPACK_SOURCE_IGNORE_FILES ""/.svn/;/build/;~$;.cproject;.project;/.settings/;${CPACK_SOURCE_IGNORE_FILES}"" )
set ( CPACK_SOURCE_PACKAGE_FILE_NAME ""${PACKAGE}-${VERSION}"" )
set ( CPACK_SOURCE_STRIP_FILES OFF )

# binary packages
include ( InstallRequiredSystemLibraries )
set ( CPACK_GENERATOR STGZ;TGZ;TBZ2;ZIP )
set ( CPACK_PACKAGE_NAME ${PACKAGE} )
set ( CPACK_STRIP_FILES ON )

include ( CPack )
",3.1.0,3.1
34070,PearCoding,PearRay,False,False,False,False,False,1,C++,2020-05-17 21:34:36+00:00,2015-10-28 12:33:36+00:00,6,776,"cmake_minimum_required(VERSION 3.1...3.15)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()

project(PearRay
	VERSION 0.12
	DESCRIPTION ""Experimental raytracer"")

set(PR_PLUGIN_VERSION ""1.0"")

#SETS
if(BUILD_SHARED_LIBS AND WIN32 AND NOT CYGWIN)
   	set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
else()
	set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin/)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
set(CMAKE_DEBUG_POSTFIX  ""_d"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)

set(VENDOR ""PearRay project 2015-2020"")
include(Git)

#CHECKS
MESSAGE(STATUS ""Building PearRay ${PearRay_VERSION}"")

if(MINGW)
	MESSAGE(WARNING ""Please don't use MinGW with PearRay, use the MSVC version instead"")
endif()

if(MSYS)
	MESSAGE(WARNING ""Please don't use MSYS with PearRay, use the MSVC version instead"")
endif()

if(CYGWIN)
	MESSAGE(WARNING ""Please don't use CYGWIN with PearRay, use the MSVC version instead"")
endif()

#PACKAGES
option(PR_WITH_ASSERTS 			""Compile with asserts on. Disable only in deployment code!"" ON)
option(PR_WITH_PYTHON 			""Compile with python API (using pybind11)."" ON)
option(PR_WITH_CLIENT 			""Compile commandline client. Strongly recommended!"" ON)
option(PR_WITH_MAIN_PLUGINS 	""Compile main plugins. Recommended!"" ON)
option(PR_WITH_EXTRA_PLUGINS 	""Compile extra plugins."" ON)
option(PR_EMBED_PLUGINS			""Embed plugins into utility library"" ON)
option(PR_WITH_DIAGNOSTIC 		""Compile the additional PearRayDiagnostic Viewer based on the QT library. Useful if no exr viewer is available"" ON)
option(PR_WITH_PROFILER 		""Compile with internal profiler."" ON)
option(PR_WITH_EXTRA_TOOLS		""Compile extra small tools."" ON)
option(PR_BUILD_TESTS 			""Build tests."" ON)
option(PR_BUILD_TESTS_PYTHON 	""Build tests for the python API. Requires PR_BUILD_TESTS to be ON"" ON)
option(PR_COMPRESS_SPEC_FILES 	""Compress spectral files with boost::zlib"" ON)
option(PR_GENERATE_COVERAGE 	""Generate coverage for debug builds - Currently only supported with the GCC compiler."" OFF)
option(PR_BUILD_DOCUMENTATION 	""Build documentation with doxygen."" ON)
option(PR_USE_LTO 				""Use linked time optimization if available."" ON)
option(PR_USE_LTO_ONLY_RELEASE 	""Use linked time optimization on release builds only."" OFF)
option(PR_USE_CCACHE 			""Use ccache if available."" ON)
# march should be default, as we use simdpp
option(PR_OPTIMIZE_FOR_NATIVE	""Build with -march=native if possible"" ON)

# Hardware feature switches
option(PR_DISABLE_HW_FEATURE_SSE3 		""Disable SSE3 support"" OFF)
option(PR_DISABLE_HW_FEATURE_SSSE3 		""Disable SSSE3 support"" OFF)
option(PR_DISABLE_HW_FEATURE_SSE4_1 	""Disable SSE4.1 support"" OFF)
option(PR_DISABLE_HW_FEATURE_SSE4_2 	""Disable SSE4.2 support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX		""Disable AVX support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX2 		""Disable AVX2 support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX512F 	""Disable AVX512F support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX512BW 	""Disable AVX512BW support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX512DQ 	""Disable AVX512DQ support"" OFF)
option(PR_DISABLE_HW_FEATURE_AVX512VL 	""Disable AVX512VL support"" OFF)
option(PR_DISABLE_HW_FEATURE_POPCNT 	""Disable POPCNT support"" OFF)
option(PR_DISABLE_HW_FEATURE_FMA4 		""Disable FMA4 support"" OFF)
option(PR_DISABLE_HW_FEATURE_FMA 		""Disable FMA3 support"" OFF)

# Algorithm options
option(PR_COLLIDER_FORCE_SINGLE_TRACE	""Force single ray tracing in every trace path"" OFF)
option(BUILD_SHARED_LIBS		""Build shared library"" OFF)

# Handle triangle intersection method
function (ListToString result delim)
    list(GET ARGV 2 temp)
    math(EXPR N ""${ARGC}-1"")
    foreach(IDX RANGE 3 ${N})
        list(GET ARGV ${IDX} STR)
        set(temp ""${temp}${delim}${STR}"")
    endforeach()
    set(${result} ""${temp}"" PARENT_SCOPE)
endfunction(ListToString)

set(_PR_TRI_OPTIONS ""MT"" ""PI"" ""PI_MEM"" ""PI_OFF"" ""WT"" ""BW9"" ""BW12"")
ListToString(_PR_TRI_OPTIONS_OUT "", "" ${_PR_TRI_OPTIONS})
list(GET _PR_TRI_OPTIONS 0 _PR_TRI_OPTIONS_DEF)
set(PR_TRIANGLE_INTERSECTION_METHOD ""${_PR_TRI_OPTIONS_DEF}"" CACHE STRING ""One of ${_PR_TRI_OPTIONS_OUT} triangle intersection methods"")
set_property(CACHE PR_TRIANGLE_INTERSECTION_METHOD PROPERTY STRINGS ${_PR_TRI_OPTIONS})

string(STRIP ""${PR_TRIANGLE_INTERSECTION_METHOD}"" _PR_TRIANGLE_INTERSECTION_METHOD_TMP)
string(TOUPPER ""${_PR_TRIANGLE_INTERSECTION_METHOD_TMP}"" _PR_TRIANGLE_INTERSECTION_METHOD_TMP)
list(FIND _PR_TRI_OPTIONS ""${_PR_TRIANGLE_INTERSECTION_METHOD_TMP}"" PR_TRIANGLE_INTERSECTION_METHOD_ID)
if(${PR_TRIANGLE_INTERSECTION_METHOD_ID} LESS 0)
	message(FATAL_ERROR ""Invalid intersection method given. Must be one of ${_PR_TRI_OPTIONS_OUT}"")
endif()
MESSAGE(STATUS ""Using triangle intersection method: ${_PR_TRIANGLE_INTERSECTION_METHOD_TMP}"")

# Include packages
set(CMAKE_INCLUDE_CURRENT_DIR			ON)
set(CMAKE_FIND_PACKAGE_PREFER_CONFIG	ON)
set(Boost_USE_MULTITHREADED				ON)
#set(Boost_VERBOSE						ON)

if(NOT WIN32)
	find_package(Threads REQUIRED)
endif()

find_package(Boost 1.45 COMPONENTS filesystem system iostreams program_options regex REQUIRED)
link_directories(${Boost_LIBRARY_DIRS})

if(PR_WITH_DIAGNOSTIC)
	find_package(Qt5 COMPONENTS Core Widgets Charts REQUIRED)
endif()

find_package(Eigen3 REQUIRED NO_MODULE)
find_package(OpenImageIO REQUIRED)
find_package(TBB REQUIRED COMPONENTS tbb)

# Optional
if(PR_USE_CCACHE)
	include(CCache)
endif()

find_package(OpenSubdiv COMPONENTS CPU)

#DEFINITIONS AND FLAGS
link_directories(${CMAKE_CURRENT_BINARY_DIR} ${Boost_LIBRARY_DIRS})

# Python API
if(PR_WITH_PYTHON)
	add_subdirectory(external/pybind11)
	set(PR_HAS_PYTHON_API ON)
endif()

# Due to problems with OpenEXR and C++17 we still use C++14 (Aug 2018)
# (Mai 2020) Update: OpenEXR works now, but Travis has an old version. So keeping it C++14 
# set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT PR_WITH_ASSERTS)
	add_definitions(-DDL_NO_ASSERTS -DPR_NO_ASSERTS)
endif()

# Configure
set(DL_WITH_TOOLS OFF CACHE BOOL """")
set(DL_WITH_PYTHON OFF CACHE BOOL """")
set(DL_BUILD_TESTS OFF CACHE BOOL """")
set(DL_BUILD_DOCUMENTATION OFF CACHE BOOL """")
add_subdirectory(external/DataLisp)

# Detect hardware
add_subdirectory(src/hardware)

configure_file(src/base/PR_Config.h.in              ${CMAKE_CURRENT_BINARY_DIR}/PR_Config.h)
configure_file(src/base/config/HW_Switch.inl.in     ${CMAKE_CURRENT_BINARY_DIR}/config/HW_Switch.inl)
configure_file(src/base/config/Git.h.in             ${CMAKE_CURRENT_BINARY_DIR}/config/Git.h)
configure_file(src/base/config/Version.h.in         ${CMAKE_CURRENT_BINARY_DIR}/config/Version.h)
configure_file(src/base/config/ColliderOptions.h.in ${CMAKE_CURRENT_BINARY_DIR}/config/ColliderOptions.h)
configure_file(src/base/config/TriangleOptions.h.in ${CMAKE_CURRENT_BINARY_DIR}/config/TriangleOptions.h)

include_directories(${CMAKE_CURRENT_BINARY_DIR}
			external/DataLisp/src ${CMAKE_CURRENT_BINARY_DIR}/external/DataLisp
			external/tinyobjloader external/libsimdpp
			${OIIO_INCLUDE_DIR})

# Extras
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include(Strip)
include(LTO)
include(ExtraUtils)
include(Deploy)

if(PR_GENERATE_COVERAGE AND (CMAKE_BUILD_TYPE MATCHES Debug))
	include(Coveralls)
	coveralls_turn_on_coverage()
endif()

# march
include(CheckCXXCompilerFlag)
if(PR_OPTIMIZE_FOR_NATIVE)
	CHECK_CXX_COMPILER_FLAG(""-march=native"" COMPILER_SUPPORTS_MARCH_NATIVE)
	if(COMPILER_SUPPORTS_MARCH_NATIVE)
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -march=native"")
	endif()
endif()

if(WIN32)
	if(PR_USE_AVX512)
		CHECK_CXX_COMPILER_FLAG(""/arch:AVX512"" COMPILER_SUPPORTS_AVX512)
		if(COMPILER_SUPPORTS_AVX512)
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:AVX512"")
		endif()
	elseif(PR_USE_AVX2)
		CHECK_CXX_COMPILER_FLAG(""/arch:AVX2"" COMPILER_SUPPORTS_AVX2)
		if(COMPILER_SUPPORTS_AVX2)
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:AVX2"")
		endif()
	elseif(PR_USE_AVX)
		CHECK_CXX_COMPILER_FLAG(""/arch:AVX"" COMPILER_SUPPORTS_AVX)
		if(COMPILER_SUPPORTS_AVX)
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /arch:AVX"")
		endif()
	endif()
endif()

# Libraries
add_subdirectory(src/base)
add_subdirectory(src/core)

# If embedded, plugins have to be imported first, as they are added TO pr_lib_utils
if(PR_EMBED_PLUGINS)
	add_subdirectory(src/plugins)
endif()

add_subdirectory(src/loader)

# If not embedded, plugins have to be imported later, as they are depended ON pr_lib_utils
if(NOT PR_EMBED_PLUGINS)
	add_subdirectory(src/plugins)
endif()

if(PR_HAS_PYTHON_API)
	add_subdirectory(src/python)
endif()

# Executables
if(PR_WITH_CLIENT)
	add_subdirectory(src/client)
endif()

if(${Qt5Widgets_FOUND})
	if(PR_WITH_DIAGNOSTIC)
		add_subdirectory(src/diagnostic)
	endif()
endif()

if(PR_WITH_EXTRA_TOOLS)
	add_subdirectory(src/tools)
endif()

# Tests
include(CTest) 
if(PR_BUILD_TESTS)
	add_subdirectory(src/sandbox)
	if(BUILD_TESTING)
		add_subdirectory(src/tests)
	endif()
endif()

# Documentation
if(PR_BUILD_DOCUMENTATION)
  include(Documentation)
endif()

# Coverage
if(PR_GENERATE_COVERAGE AND (CMAKE_BUILD_TYPE MATCHES Debug))
	include(Coverage)
endif()
",3.1...3.15,3.1
34135,joncampbell123,dosbox-x,False,False,False,False,False,39,C,2020-05-17 23:12:01+00:00,2014-05-17 07:34:15+00:00,732,10130,"cmake_minimum_required(VERSION 3.10)
project(dosbox-x C CXX) # C for CheckIncludeFiles
include(CheckTypeSize)
include(CheckIncludeFiles)
include(CheckFunctionExists) # for HAVE_MPROTECT, HAVE_SET_PRIORITY

### options with safe-defaults (laid out like config.h.in)
# Define if building universal (internal helper macro)
# #undef AC_APPLE_UNIVERSAL_BUILD

# Compiling on BSD
# #undef BSD

if(MSVC)
	set(C_ATTRIBUTE_ALWAYS_INLINE 0)
elseif(GNU)
	set(C_ATTRIBUTE_ALWAYS_INLINE 1)
else()
	message(FATAL_ERROR ""Option not implemented"")
endif()

if(MSVC OR GNU)
	set(C_ATTRIBUTE_FASTCALL 1)
else()
	message(FATAL_ERROR ""Option not implemented"")
endif()

option(C_AVCODEC ""Define to 1 to use FFMPEG libavcodec for video capture"" OFF)
if(C_AVCODEC)
	set(C_AVCODEC 1)
endif()

option(C_CORE_INLINE ""Define to 1 to use inlined memory functions in cpu core"" ON)
if(C_CORE_INLINE)
	set(C_CORE_INLINE 1)
endif()

option(C_DEBUG ""Define to 1 to enable internal debugger, requires libcurses"" OFF)
if(C_DEBUG)
	set(C_DEBUG 1)
endif()

option(C_DIRECTLPT ""Define to 1 if you want parallel passthrough support (Win32, Linux)"" OFF)
if(C_DIRECTLPT)
	set(C_DIRECTLPT 1)
endif()

option(C_DIRECTSERIAL ""Define to 1 if you want serial passthrough support (Win32, Posix and OS/2)"" OFF)
if(C_DIRECTSERIAL)
	set(C_DIRECTSERIAL 1)
endif()

option(C_DYNAMIC_X86 ""Define to 1 to use x86 dynamic cpu core"" ON)
if(C_DYNAMIC_X86)
	set(C_DYNAMIC_X86 1)
endif()

option(C_FLUIDSYNTH ""Define to 1 to enable fluidsynth MIDI synthesis"" OFF)
if(C_FLUIDSYNTH)
	set(C_FLUIDSYNTH 1)
endif()

option(C_FPU ""Define to 1 to enable floating point emulation"" ON)
if(C_FPU)
	set(C_FPU 1)
endif()

if(MSVC)
	set(HAVE__ATTRIBUTE__ 0)
elseif(GNU)
	set(HAVE__ATTRIBUTE__ 1)
else()
	message(FATAL_ERROR ""Option not implemented"")
endif()

if(MSVC)
	set(C_HAS_BUILTIN_EXPECT 0)
elseif(GNU)
	set(C_HAS_BUILTIN_EXPECT 1)
else()
	message(FATAL_ERROR ""Option not implemented"")
endif()

check_function_exists(mprotect HAVE_MPROTECT)
if(HAVE_MPROTECT)
  set(HAVE_MPROTECT 1)
endif()

option(C_HEAVY_DEBUG ""Define to 1 to enable heavy debugging, also have to enable C_DEBUG"" OFF)
if(C_HEAVY_DEBUG)
	set(C_HEAVY_DEBUG 1)
endif()

option(C_IPX ""Define to 1 to enable IPX over Internet networking, requires SDL_net"" OFF)
if(C_IPX)
	set(C_IPX 1)
endif()

option(C_LIBPNG ""Define to 1 if you have libpng"" ON)
if(C_LIBPNG)
	set(C_LIBPNG 1)
endif()

option(C_MODEM ""Define to 1 to enable internal modem support, requires SDL_net"" OFF)
if(C_MODEM)
	set(C_MODEM 1)
endif()

option(C_MT32 ""Define to 1 to enable MT32 emulation (x86/x86_64 only)"" OFF)
if(C_MT32)
	set(C_MT32 1)
endif()

option(C_NE2000 ""Define to 1 to enable NE2000 ethernet passthrough, requires libpcap"" OFF)
if(C_NE2000)
	set(C_NE2000 1)
endif()

option(C_OPENGL ""Define to 1 to use opengl display output support"" OFF)
if(C_OPENGL)
	set(C_OPENGL 1)
endif()

option(C_SDL1 ""Set to 1 to enable SDL 1.x support"" OFF)
if(C_SDL1)
	set(C_SDL1 1)
endif()

option(C_SDL2 ""Set to 1 to enable SDL 2.x support"" ON)
if(C_SDL2)
	set(C_SDL2 1)
endif()

# TODO C_SDL_NET

check_function_exists(setpriority HAVE_SET_PRIORITY)
if(HAVE_SET_PRIORITY)
  set(C_SET_PRIORITY 1)
endif()

option(C_SSHOT ""Define to 1 to enable screenshots, requires libpng"" ON)
if(C_SSHOT)
	set(C_SSHOT 1)
endif()

option(C_UNALIGNED_MEMORY ""Define to 1 to use a unaligned memory access"" ON)
if(C_UNALIGNED_MEMORY)
	set(C_UNALIGNED_MEMORY 1)
endif()

set(VERSION ""0.82.1"" CACHE STRING ""Version number of package"")
set(PACKAGE_STRING ""dosbox-x 0.821"" CACHE STRING ""Define to the full name and version of this package"")
# set(PACKAGE ""dosbox-x"" CACHE STRING ""Name of package"")
# set(PACKAGE_BUGREPORT ""https://github.com/joncampbell123/dosbox-x/issues"" CACHE STRING ""Define to the address where bug reports for this package should be sent"")
# set(PACKAGE_NAME ""dosbox-x"" CACHE STRING ""Define to the full name of this package"")
# set(PACKAGE_TARNAME ""dosbox-x"" CACHE STRING ""Define to the one symbol short name of this package"")
# set(PACKAGE_URL ""http://dosbox-x.software"" CACHE STRING ""Define to the home page for this package"")
# set(PACKAGE_VERSION ""0.821"" CACHE STRING ""Define to the version of this package"")
# set(_FILE_OFFSET_BITS ""64"" CACHE STRING ""Number of bits in a file offset, on hosts where this is settable"")

set_property(GLOBAL PROPERTY USE_FOLDERS ON) # solution filters in VS

include(${CMAKE_CURRENT_SOURCE_DIR}/include/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/aviwriter/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/builtin/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/cpu/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/cpu/core_dyn_x86/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/cpu/core_dynrec/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/cpu/core_full/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/cpu/core_normal/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/debug/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/dos/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/fpu/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/gui/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/parport/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/reSID/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/serialport/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/cbus/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/common/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/generic/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/sound/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/sound/getsnd/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/hardware/snd_pc98/x11/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/ints/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/libs/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/libs/gui_tk/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/libs/porttalk/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/libs/zmbv/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/misc/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/mt32/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/mt32/freeverb/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/mt32/sha1/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/CMakeLists.txt)
include(${CMAKE_CURRENT_SOURCE_DIR}/src/shell/CMakeLists.txt)

set(ROOT
	# suppresses default VS filters, desired but why official way fails ?
	""${CMAKE_BINARY_DIR}/config.h""
)
source_group(""\\"" FILES ${ROOT})

add_executable(dosbox-x
	${ROOT}
	${INCLUDES}
	${SRC}
	${SRC_AVIWRITER}
	${SRC_BUILTIN}
	${SRC_CPU}
	${SRC_CPU_CORE_DYN_X86}
	${SRC_CPU_CORE_DYN_REC}
	${SRC_CPU_CORE_FULL}
	${SRC_CPU_CORE_NORMAL}
	${SRC_DEBUG}
	${SRC_DOS}
	${SRC_FPU}
	${SRC_GUI}
	${SRC_HARDWARE}
	${SRC_HARDWARE_PARPORT}
	${SRC_HARDWARE_RESID}
	${SRC_HARDWARE_SERIALPORT}
	${SRC_HARDWARE_SND_PC98}
	${SRC_HARDWARE_SND_PC98_CBUS}
	${SRC_HARDWARE_SND_PC98_COMMON}
	${SRC_HARDWARE_SND_PC98_GENERIC}
	${SRC_HARDWARE_SND_PC98_SOUND}
	${SRC_HARDWARE_SND_PC98_SOUND_GETSND}
	${SRC_HARDWARE_SND_PC98_X11}
	${SRC_INTS}
	${SRC_LIBS}
	${SRC_LIBS_GUI_TK}
	${SRC_LIBS_PORTTALK}
	${SRC_LIBS_ZMBV}
	${SRC_MISC}
	${SRC_MT32}
	${SRC_MT32_FREEVERB}
	${SRC_MT32_SHA1}
	${SRC_PLATFORM}
	${SRC_SHELL}
)

CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILES(netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES(pwd.h HAVE_PWD_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES(sys/socket.h HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_TYPE_SIZE(""unsigned char"" SIZEOF_UNSIGNED_CHAR)
CHECK_TYPE_SIZE(""unsigned short"" SIZEOF_UNSIGNED_SHORT)
CHECK_TYPE_SIZE(""unsigned int"" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE(""unsigned long"" SIZEOF_UNSIGNED_LONG)
CHECK_TYPE_SIZE(""unsigned long long"" SIZEOF_UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE(""int *"" SIZEOF_INT_P)

configure_file(
	${CMAKE_CURRENT_SOURCE_DIR}/config.cmake.h
	${CMAKE_CURRENT_BINARY_DIR}/config.h
)

include_directories(""include"")
include_directories(${CMAKE_BINARY_DIR}) # unistd.h, config.h
include_directories(""."") # TODO fix dumb bios.cpp include syntax
include_directories(""src/aviwriter"")
include_directories(""src"") # TODO lazyflags in fpu_instructions.h
include_directories(""src/hardware/snd_pc98/cbus"")
include_directories(""src/hardware/snd_pc98/common"")
include_directories(""src/hardware/snd_pc98/generic"")
include_directories(""src/hardware/snd_pc98/sound"")
include_directories(""src/hardware/snd_pc98/sound/getsnd"")
include_directories(""src/hardware/snd_pc98/x11"")
include_directories(""${ZLIB_INCLUDE_DIR}/SDL2"") # nasty hack (vcpkg-specific)

if (NOT MSVC)
	# x86 intrinsic include in src/mt32/mmath.h fails on bare i686 target
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse4.1"")
endif ()

if (WIN32 AND (NOT MSVC))
	# Always build static binaries on MinGW
	SET(CMAKE_FIND_LIBRARY_SUFFIXES "".a"")
	SET(CMAKE_EXE_LINKER_FLAGS ""-static"")
endif ()

if (MSVC)
	# create fake unistd.h
	file(WRITE ""${CMAKE_BINARY_DIR}/unistd.h"" """") 
endif ()

if (WIN32)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D__WIN32__)
	add_definitions(-D CMAKE_BUILD) # shim for _nhandle
else ()
	set(SRC_LIBS_ZMBV """")
endif ()

if(C_SDL1)
	if (MSVC)
		find_path(SDL_INCLUDE_DIR .)
		find_path(LIBPNG_INCLUDE_DIR .)
		find_path(ZLIB_INCLUDE_DIR .)

		include_directories(""${SDL_INCLUDE_DIR}"")
		include_directories(""${LIBPNG_INCLUDE_DIR}"")
		include_directories(""${ZLIB_INCLUDE_DIR}"")

		find_library(SDL_LIBRARY sdl.lib)
		find_library(SDLMAIN_LIBRARY sdlmain.lib)
		find_library(LIBPNG_LIBRARY libpng16.lib)
		find_library(ZLIB_LIBRARY zlib.lib)
	else ()
		find_package(SDL REQUIRED)
		include_directories(${SDL_INCLUDE_DIR})
		find_package(PNG REQUIRED)
		include_directories(${PNG_INCLUDE_DIR})
		find_package(ZLIB REQUIRED)
		include_directories(${ZLIB_INCLUDE_DIR})
		find_package(OpenGL REQUIRED)
	endif ()

	if (WIN32)
		set(EXTRA_LIBS
				winmm
				imm32)
	endif ()

	if (MSVC)
		set(EXTRA_LIBS ${EXTRA_LIBS}
				opengl32.lib
				${SDL_LIBRARY}
				${SDLMAIN_LIBRARY}
				${LIBPNG_LIBRARY}
				${ZLIB_LIBRARY})
	else ()
		set(EXTRA_LIBS
				${SDL_LIBRARY}
				${OPENGL_LIBRARIES}
				${PNG_LIBRARIES}
				${ZLIB_LIBRARIES}
				${EXTRA_LIBS})
		if (WIN32)
			set(EXTRA_LIBS ${EXTRA_LIBS} dxguid)
		endif ()
	endif ()
elseif(C_SDL2)
	find_package(sdl2 REQUIRED)
	find_package(PNG REQUIRED)
	set(EXTRA_LIBS PNG::PNG)
	set(EXTRA_LIBS ${EXTRA_LIBS} SDL2::SDL2 SDL2::SDL2main)
else()
	message(FATAL_ERROR ""No SDL version selected !"")
endif()

if (C_SDL1 AND C_SDL2)
	message(FATAL_ERROR ""Either SDL1 or SDL2 must be selected, not both !"")
endif()

target_link_libraries(dosbox-x PRIVATE ${EXTRA_LIBS})

set_target_properties(dosbox-x PROPERTIES LINKER_LANGUAGE CXX)

# DEBUG print what's going on inside CMake
# get_cmake_property(_variableNames VARIABLES)
# list (SORT _variableNames)
# foreach (_variableName ${_variableNames})
	# message(STATUS ""${_variableName}=${${_variableName}}"")
# endforeach()
",3.10,3.1
34219,StanfordLegion,legion,False,False,False,False,False,37,C++,2020-05-17 20:15:10+00:00,2012-11-17 00:43:58+00:00,375,11943,"#------------------------------------------------------------------------------#
# Copyright 2020 Kitware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#------------------------------------------------------------------------------#

cmake_minimum_required(VERSION 3.1)
project(Legion)

#------------------------------------------------------------------------------#
# Some boilerplate to setup nice output directories
#------------------------------------------------------------------------------#

#for multilib distros
include(GNUInstallDirs)

list(INSERT CMAKE_MODULE_PATH 0 ""${Legion_SOURCE_DIR}/cmake"")
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Legion_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Legion_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Legion_BINARY_DIR}/bin)
endif()

#library api version, bump from time to time
set(SOVERSION 1)

set(INSTALL_SUFFIX """" CACHE STRING ""Suffix to add to installed libraries and binaries"")

#------------------------------------------------------------------------------#
# Build type and shared vs static library
#------------------------------------------------------------------------------#
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)
  set(CMAKE_BUILD_TYPE  Debug CACHE STRING ""Choose the type of build"" FORCE)
endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)

if (CMAKE_BUILD_TYPE AND ( CMAKE_BUILD_TYPE STREQUAL ""Debug""))
  # define variable for realm_defines.h
  set(DEBUG_REALM ON)
  # define variable for legion_defines.h
  set(DEBUG_LEGION ON)
endif()

set(BUILD_SHARED_LIBS OFF   CACHE BOOL   ""Whether or not to build shared libraries instead of static"")

#------------------------------------------------------------------------------#
# Architecture
#------------------------------------------------------------------------------#
if(BUILD_MARCH AND BUILD_MCPU)
  message(FATAL_ERROR ""BUILD_MARCH and BUILD_MCPU are incompatible"")
endif()

# Try -march first. On platforms that don't support it, GCC will issue
# a hard error, so we'll know not to use it.
if(BUILD_MARCH)
  set(INTERNAL_BUILD_MARCH ${BUILD_MARCH})
else()
  set(INTERNAL_BUILD_MARCH ""native"")
endif()

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(""-march=${INTERNAL_BUILD_MARCH}"" COMPILER_SUPPORTS_MARCH)
if(COMPILER_SUPPORTS_MARCH)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -march=${INTERNAL_BUILD_MARCH}"")
elseif(BUILD_MARCH)
  message(FATAL_ERROR ""The flag -march=${INTERNAL_BUILD_MARCH} is not supported by the compiler"")
else()
  unset(INTERNAL_BUILD_MARCH)
endif()

# Try -mcpu. We do this second because it is deprecated on x86, but
# GCC won't issue a hard error, so we can't tell if it worked or not.
if (NOT INTERNAL_BUILD_MARCH)
  if(BUILD_MCPU)
    set(INTERNAL_BUILD_MCPU ${BUILD_MCPU})
  else()
    set(INTERNAL_BUILD_MCPU ""native"")
  endif()

  check_cxx_compiler_flag(""-mcpu=${INTERNAL_BUILD_MCPU}"" COMPILER_SUPPORTS_MCPU)
  if(COMPILER_SUPPORTS_MCPU)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mcpu=${INTERNAL_BUILD_MCPU}"")
  elseif(BUILD_MCPU)
    message(FATAL_ERROR ""The flag -mcpu=${INTERNAL_BUILD_MCPU} is not supported by the compiler"")
  else()
    unset(INTERNAL_BUILD_MCPU)
  endif()
endif()

# Add flags for Power architectures
check_cxx_compiler_flag(""-maltivec -Werror"" COMPILER_SUPPORTS_MALTIVEC)
if(COMPILER_SUPPORTS_MALTIVEC)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -maltivec"")
endif()
check_cxx_compiler_flag(""-mabi=altivec -Werror"" COMPILER_SUPPORTS_MABI_ALTIVEC)
if(COMPILER_SUPPORTS_MABI_ALTIVEC)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mabi=altivec"")
endif()
check_cxx_compiler_flag(""-mvsx -Werror"" COMPILER_SUPPORTS_MVSX)
if(COMPILER_SUPPORTS_MVSX)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mvsx"")
endif()

# detect use of the cxx_defcheck wrapper and enable build checks
check_cxx_compiler_flag(""--defcheck __test__"" COMPILER_SUPPORTS_DEFCHECK)

#------------------------------------------------------------------------------#
# Optimizations
#------------------------------------------------------------------------------#

# For now we want the optimization flags to match on both normal make and cmake
# builds so we override the cmake defaults here for release, this changes 
# -O3 to -O2 and removes -DNDEBUG
set(CMAKE_CXX_FLAGS_RELEASE ""-O2"")

# Legion can't handle certain optimizations. See:
# https://github.com/StanfordLegion/legion/issues/168#issuecomment-244582958
check_cxx_compiler_flag(""-fno-strict-aliasing"" COMPILER_SUPPORTS_NO_STRICT_ALIASING)
if(COMPILER_SUPPORTS_NO_STRICT_ALIASING)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing"")
endif()

# if requested (and we know how to) make any warnings during the build fatal
option(Legion_BUILD_WARN_AS_ERROR ""Consider warnings during build of Legion to be fatal errors"" OFF)
if(Legion_BUILD_WARN_AS_ERROR)
  check_cxx_compiler_flag(""-Wall -Werror"" COMPILER_SUPPORTS_WALL_WERROR)
  if(COMPILER_SUPPORTS_WALL_WERROR)
    set(CXX_BUILD_WARNING_FLAGS -Wall -Werror)
  else()
    message(FATAL_ERROR ""cannot determine how to convert warnings to errors in C++ compiler"")
  endif()
else()
  set(CXX_BUILD_WARNING_FLAGS """")
endif()

#------------------------------------------------------------------------------#
# Minimum log level
#------------------------------------------------------------------------------#
set(Legion_OUTPUT_LEVEL ""DEBUG"" CACHE STRING ""Compile time logging level"")
set_property(CACHE Legion_OUTPUT_LEVEL PROPERTY STRINGS SPEW DEBUG INFO PRINT WARNING ERROR FATAL NONE)

# define variable for realm_defines.h
set(COMPILE_TIME_MIN_LEVEL LEVEL_${Legion_OUTPUT_LEVEL})

#------------------------------------------------------------------------------#
# OpenMP
#------------------------------------------------------------------------------#
option(Legion_USE_OpenMP ""Use OpenMP"" OFF)
if(Legion_USE_OpenMP)
  option(Legion_OpenMP_GOMP_SUPPORT ""Enable GOMP support for OpenMP"" ON)
  option(Legion_OpenMP_KMP_SUPPORT ""Enable KMP support for OpenMP"" ON)

  # define variable for realm_defines.h
  set(REALM_USE_OPENMP ON)
  if(Legion_OpenMP_GOMP_SUPPORT)
    set(REALM_OPENMP_GOMP_SUPPORT ON)
  endif()
  if(Legion_OpenMP_KMP_SUPPORT)
    set(REALM_OPENMP_KMP_SUPPORT ON)
  endif()
endif()

#------------------------------------------------------------------------------#
# Python
#------------------------------------------------------------------------------#
option(Legion_USE_Python ""Use Python"" OFF)
if(Legion_USE_Python)
  set(Legion_Python_Version """" CACHE STRING ""Minimum Python version"")

  # Note: Legion now supports several versions, so no need to be so forceful
  # set(Python_ADDITIONAL_VERSIONS 2.7)
  find_package(PythonInterp ${Legion_Python_Version} REQUIRED) # Needed to invoke setup.py for install
  find_package(PythonLibs ${Legion_Python_Version} REQUIRED)

  # define variables for realm_defines.h
  set(REALM_USE_PYTHON ON)
  set(REALM_PYTHON_LIB ""${PYTHON_LIBRARIES}"")
  set(REALM_PYTHON_VERSION_MAJOR ${PYTHON_VERSION_MAJOR})

  string(REPLACE ""."" "";"" PYTHON_VERSION_SPLIT ${PYTHONLIBS_VERSION_STRING})
  list(GET PYTHON_VERSION_SPLIT 0 PYTHON_VERSION_MAJOR)
endif()

set(BINDINGS_DEFAULT_MODULE """" CACHE STRING ""module to load by default in Python bindings, if any"")

#------------------------------------------------------------------------------#
# CUDA configuration
#------------------------------------------------------------------------------#
option(Legion_USE_CUDA ""Enable support for the CUDA runtime"" OFF)
if(Legion_USE_CUDA)
  set(Legion_CUDA_ARCH """" CACHE STRING ""Comma-separated list of CUDA architectures to build for (e.g. 60,70)"")

  if(NOT BUILD_SHARED_LIBS)
    set(CUDA_USE_STATIC_CUDA_RUNTIME ON)
  else()
    set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
  endif()
  find_package(CUDA REQUIRED)
  install(FILES ${Legion_SOURCE_DIR}/cmake/FindCUDA.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
  )
  install(FILES ${Legion_SOURCE_DIR}/cmake/newcmake/FindCUDA.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake/newcmake
  )

  # define variable for legion_defines.h
  set(LEGION_USE_CUDA ON)

  option(Legion_GPU_REDUCTIONS ""Support reductions natively on GPU"" ON)
  if(Legion_GPU_REDUCTIONS)
    set(LEGION_GPU_REDUCTIONS ON)
  endif()

  # define variable for realm_defines.h
  set(REALM_USE_CUDA ON)

  option(Legion_HIJACK_CUDART ""Hijack and rewrite application calls into the CUDA runtime"" ON)
  if(Legion_HIJACK_CUDART)
    set(REALM_USE_CUDART_HIJACK ON)
  endif()
endif()

#------------------------------------------------------------------------------#
# Kokkos configuration
#------------------------------------------------------------------------------#
option(Legion_USE_Kokkos ""Enable support for the Kokkos runtime"" OFF)
if(Legion_USE_Kokkos)
  # the kokkos interop stuff uses target_link_options, which doesn't show up
  #  until cmake 3.13
  cmake_minimum_required(VERSION 3.13)

  # cmake uses -DKokkos_DIR=.../lib/cmake to look in non-standard locations
  find_package(Kokkos REQUIRED)

  # in order to build using Kokkos' exported compile options, we need to use
  #  the same compiler, but Kokkos doesn't tell us what that is, so we need it
  #  from the configuration or the environment
  set(KOKKOS_CXX_COMPILER $ENV{KOKKOS_CXX_COMPILER} CACHE STRING
      ""C++ compiler used by Kokkos"")
  if(NOT KOKKOS_CXX_COMPILER)
    message(FATAL_ERROR ""to build correctly with Kokkos, the exact compiler used in the Kokkos build (typically set via CXX=... or -DCMAKE_CXX_COMPILER=...) must be provided in KOKKOS_CXX_COMPILER (either on the command line or from the environment)"")
  endif()

  set(REALM_USE_KOKKOS ON)
endif()

#------------------------------------------------------------------------------#
# network interface configuration
#------------------------------------------------------------------------------#
set(Legion_NETWORKS """" CACHE STRING ""Network backend(s) to use"")
separate_arguments(Legion_NETWORKS)

# compatibility mode - Legion_USE_GASNet==ON -> Legion_NETWORKS=gasnet1
option(Legion_USE_GASNet ""Enable the distributed GASNet backend"" OFF)
if(Legion_USE_GASNet)
  list(APPEND Legion_NETWORKS gasnet1)
endif()

#------------------------------------------------------------------------------#
# GASNet configuration
#------------------------------------------------------------------------------#
if(""${Legion_NETWORKS}"" MATCHES .*gasnet1.*)
  set(GASNet_THREADING par)
  set(GASNet_PREFERRED_CONDUITS aries gemini ibv)
  find_package(GASNet REQUIRED)
  if(NOT GASNet_THREADING STREQUAL ""par"")
    message(FATAL_ERROR ""GASNet threading mode \""${GASNet_THREADING}\"" is not currently supported by Legion"")
  endif()
  install(FILES ${Legion_SOURCE_DIR}/cmake/FindGASNet.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
  )

  # define variable for realm_defines.h
  set(REALM_USE_GASNET1 ON)
  string(TOUPPER ${GASNet_CONDUIT} CONDUIT)
  set(GASNET_CONDUIT_${CONDUIT} ON)
  # conduits other than udp support MPI interop
  if(NOT ${GASNet_CONDUIT} STREQUAL ""udp"")
    set(Legion_MPI_INTEROP ON)
  endif()
endif()

#------------------------------------------------------------------------------#
# MPI configuration
#------------------------------------------------------------------------------#
if(""${Legion_NETWORKS}"" MATCHES .*mpi.*)
  cmake_minimum_required(VERSION 3.9)
  find_package(MPI REQUIRED)
  # define variable for realm_defines.h
  set(REALM_USE_MPI ON)
  set(Legion_MPI_INTEROP ON)
endif()

#------------------------------------------------------------------------------#
# LLVM configuration
#------------------------------------------------------------------------------#
option(Legion_USE_LLVM ""Use LLVM JIT operations"" OFF)
option(Legion_ALLOW_MISSING_LLVM_LIBS ""Allow LLVM libraries to be missing at runtime"" OFF)
option(Legion_LINK_LLVM_LIBS ""Link LLVM libraries into Realm"" ON)
if(Legion_USE_LLVM)
  set(Legion_LLVM_COMPONENTS irreader jit mcjit x86)
  find_package(LLVM REQUIRED COMPONENTS ${Legion_LLVM_COMPONENTS})
  install(FILES ${Legion_SOURCE_DIR}/cmake/FindLLVM.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
  )

  # define variables for realm_defines.h
  set(REALM_USE_LLVM ON)
  if(Legion_ALLOW_MISSING_LLVM_LIBS)
    set(REALM_ALLOW_MISSING_LLVM_LIBS ON)
  endif()
  # just want REALM_LLVM_VERSION=<major><minor>
  string(REPLACE ""."" "";"" LLVM_VERSION_SPLIT ${LLVM_VERSION})
  list(GET LLVM_VERSION_SPLIT 0 1 REALM_LLVM_VERSION_LIST)
  string(REPLACE "";"" """" REALM_LLVM_VERSION ""${REALM_LLVM_VERSION_LIST}"")
endif()

#------------------------------------------------------------------------------#
# HDF5 configuration
#------------------------------------------------------------------------------#
option(Legion_USE_HDF5 ""Enable support for HDF5"" OFF)
if(Legion_USE_HDF5)
  find_package(HDF5 REQUIRED COMPONENTS C)

  # define variable for both legion_defines.h and realm_defines.h
  set(LEGION_USE_HDF5 ON)
  set(REALM_USE_HDF5 ON)
endif()

#------------------------------------------------------------------------------#
# libdl configuration
#------------------------------------------------------------------------------#
option(Legion_USE_LIBDL ""Enable support for libdl"" ON)
if(Legion_USE_LIBDL)
  # define variable for realm_defines.h
  set(REALM_USE_LIBDL ON)
endif()

#------------------------------------------------------------------------------#
# HWLOC configuration
#------------------------------------------------------------------------------#
option(Legion_USE_HWLOC ""Use hwloc for topology awareness"" OFF)
if(Legion_USE_HWLOC)
  find_package(HWLOC REQUIRED)
  install(FILES ${Legion_SOURCE_DIR}/cmake/FindHWLOC.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
  )
  set(REALM_USE_HWLOC ON)
endif()

#------------------------------------------------------------------------------#
# PAPI configuration
#------------------------------------------------------------------------------#
option(Legion_USE_PAPI ""Use PAPI for performance measurements"" OFF)
if(Legion_USE_PAPI)
  # no FindPAPI in cmake by default, so just find the lib and include path
  #  ourselves
  find_library(PAPI_LIBRARIES NAMES libpapi.so libpapi.a papi
    HINTS ${PAPI_ROOT}/lib $ENV{PAPI_ROOT}/lib ENV PAPI_LIB_DIR)
  find_path(PAPI_INCLUDE_DIRS NAMES papi.h
    HINTS ${PAPI_ROOT}/include $ENV{PAPI_ROOT}/include ENV PAPI_INC_DIR)
  if(PAPI_LIBRARIES AND PAPI_INCLUDE_DIRS)
    set(REALM_USE_PAPI ON)
  else()
    message(FATAL_ERROR
      "" Could not find PAPI - set PAPI_{ROOT,INC_DIR,LIB_DIR} if needed -- got:\n""
      ""   PAPI_LIBRARIES: ${PAPI_LIBRARIES}\n""
      ""   PAPI_INCLUDE_DIRS: ${PAPI_INCLUDE_DIRS}"")
  endif()
endif()

#------------------------------------------------------------------------------#
# zlib configuration
#------------------------------------------------------------------------------#
option(Legion_USE_ZLIB ""Enable support for zlib"" ON)
if(Legion_USE_ZLIB)
  find_package(ZLIB REQUIRED)
  # define variable for legion_defines.h
  set(LEGION_USE_ZLIB ON)
endif()
                                                                                          
#------------------------------------------------------------------------------#
# Fortran configuration
#------------------------------------------------------------------------------#
option(Legion_USE_Fortran ""Enable support for Fortran"" OFF)
if(Legion_USE_Fortran)
  enable_language(Fortran)
  set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -cpp"")
endif()

#------------------------------------------------------------------------------#
# Miscelaneous other options
#------------------------------------------------------------------------------#
set(Legion_MAX_DIM 3 CACHE STRING ""Maximum number of dimensions"")
set_property(CACHE Legion_MAX_DIM PROPERTY STRINGS 1 2 3 4 5 6 7 8 9)
mark_as_advanced(Legion_MAX_DIM)

# define variable for legion_defines.h
set(LEGION_MAX_DIM ${Legion_MAX_DIM})
set(REALM_MAX_DIM ${Legion_MAX_DIM})

set(Legion_MAX_FIELDS 512 CACHE STRING ""Maximum number of fields allocated to a single field space"")
set_property(CACHE Legion_MAX_FIELDS PROPERTY STRINGS 32 64 128 256 512 1024)
mark_as_advanced(Legion_MAX_FIELDS)

# define variable for legion_defines.h
set(LEGION_MAX_FIELDS ${Legion_MAX_FIELDS})

option(Legion_ENABLE_TLS ""Enable support for TLS storage of Legion context"" OFF)
mark_as_advanced(Legion_ENABLE_TLS)

# define variable for legion_defines.h
set(ENABLE_LEGION_TLS ${Legion_ENABLE_TLS})

option(Legion_WARNINGS_FATAL ""Make all runtime warnings fatal"" OFF)
set(LEGION_WARNINGS_FATAL ${Legion_WARNINGS_FATAL})

option(Legion_SPY ""Enable detailed logging for Legion Spy"" OFF)
set(LEGION_SPY ${Legion_SPY})

option(Legion_BOUNDS_CHECKS ""Enable bounds checking in Legion accessors"" OFF)
set(BOUNDS_CHECKS ${Legion_BOUNDS_CHECKS})

option(Legion_PRIVILEGE_CHECKS ""Enable privilege checking in Legion accessors"" OFF)
set(PRIVILEGE_CHECKS ${Legion_PRIVILEGE_CHECKS})

#------------------------------------------------------------------------------#
# Runtime library targets
#------------------------------------------------------------------------------#
add_subdirectory(runtime)

#------------------------------------------------------------------------------#
# Tools
#------------------------------------------------------------------------------#
add_subdirectory(tools)

#------------------------------------------------------------------------------#
# Documentation
#------------------------------------------------------------------------------#
add_subdirectory(doc)

#------------------------------------------------------------------------------#
# configure header
#------------------------------------------------------------------------------#
# Checking for all defines in the CXX Flags

string(REPLACE "" "" "";"" FLAGS_LIST ${CMAKE_CXX_FLAGS})
FOREACH(FLAG ${FLAGS_LIST})
  string (FIND ${FLAG} ""-D"" START_STR)
  if (${START_STR} EQUAL ""0"")
  string(REPLACE ""-D"" """" NEW_DEFINE ${FLAG})
  set (${NEW_DEFINE} ON)
  endif()
endforeach()


#------------------------------------------------------------------------------#
# Build-tree package generation
#------------------------------------------------------------------------------#
export(EXPORT LegionTargets
  NAMESPACE Legion::
  FILE ${Legion_BINARY_DIR}/LegionTargets.cmake
)
install(EXPORT LegionTargets
  NAMESPACE Legion::
  FILE LegionTargets.cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
)

configure_file(
  cmake/LegionConfigCommon.cmake.in
  ${Legion_BINARY_DIR}/LegionConfigCommon.cmake
  @ONLY
)
install(FILES ${Legion_BINARY_DIR}/LegionConfigCommon.cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
)

configure_file(
  cmake/LegionConfig-build.cmake.in
  ${Legion_BINARY_DIR}/LegionConfig.cmake
  @ONLY
)

install(FILES cmake/LegionConfig-install.cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/Legion/cmake
  RENAME LegionConfig.cmake
)

#------------------------------------------------------------------------------#
# Install into the CMake pacakge registry if explicitly selected to do so
#------------------------------------------------------------------------------#
set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON CACHE INTERNAL ""Disable the export(PACKAGE) command."")
option(Legion_USE_PACKAGE_REGISTRY ""Register the build tree with the CMake package registry"" OFF)
mark_as_advanced(Legion_USE_PACKAGE_REGISTRY)
if(Legion_USE_PACKAGE_REGISTRY)
  set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY OFF)
endif()
export(PACKAGE Legion)

#------------------------------------------------------------------------------#
# Examples and Applications
#------------------------------------------------------------------------------#
option(Legion_BUILD_ALL ""Build all Legion bindings, examples, tutorials and tests"" OFF)
option(Legion_BUILD_APPS ""Build Legion sample applications"" OFF)
option(Legion_BUILD_BINDINGS ""Build Legion language bindings"" OFF)
option(Legion_BUILD_EXAMPLES ""Build Legion examples"" OFF)
option(Legion_BUILD_TUTORIAL ""Build Legion tutorial"" OFF)
option(Legion_BUILD_TESTS ""Build Legion tests"" OFF)
option(Legion_ENABLE_TESTING ""Build and copy testing stuff"" OFF)
if(Legion_ENABLE_TESTING)
  enable_testing()
  # if Legion_TEST_LAUNCHER is set, split the string into a list
  separate_arguments(Legion_TEST_LAUNCHER)
  separate_arguments(Legion_TEST_ARGS)
  # if we are using kokkos and cuda, we must hardcode the use of 1 gpu right now
  if(Legion_USE_Kokkos AND Legion_USE_CUDA)
    list(APPEND Legion_TEST_ARGS -ll:gpu 1)
  endif()
  # similar restrictions for openmp
  if(Legion_USE_Kokkos AND Legion_USE_OpenMP)
    list(APPEND Legion_TEST_ARGS -ll:ocpu 1 -ll:onuma 0)
  endif()
endif()
if(Legion_BUILD_ALL OR Legion_BUILD_APPS OR Legion_BUILD_BINDINGS OR Legion_BUILD_EXAMPLES OR Legion_BUILD_TUTORIAL OR Legion_BUILD_TESTS)
  # Make a namespaced alias so in-build examples can use it the same way as if
  # it were imported
  add_library(Legion::Legion ALIAS Legion)
  add_library(Legion::Realm ALIAS Realm)

  if(Legion_USE_CUDA)
    # CUDA has some issues propogating target interface properties so we
    # have to extract them from the target and manually add them to the nvcc
    # flags
    set(PROP $<TARGET_PROPERTY:Legion::Legion,INTERFACE_COMPILE_OPTIONS>)
    set(CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} ${PROP}"")
    set(PROP $<TARGET_PROPERTY:Legion::Legion,INTERFACE_COMPILE_DEFINITIONS>)
    set(CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} $<$<BOOL:${PROP}>:-D$<JOIN:${PROP}, -D>>"")
    set(PROP $<TARGET_PROPERTY:Legion::Legion,INTERFACE_INCLUDE_DIRECTORIES>)
    set(CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} $<$<BOOL:${PROP}>:-I$<JOIN:${PROP}, -I>>"")
  endif()

  if(Legion_BUILD_ALL OR Legion_BUILD_APPS)
    add_subdirectory(apps)
  endif()
  if(Legion_BUILD_ALL OR Legion_BUILD_BINDINGS)
    add_subdirectory(bindings)
  endif()
  if(Legion_BUILD_ALL OR Legion_BUILD_EXAMPLES)
    add_subdirectory(examples)
  endif()
  if(Legion_BUILD_ALL OR Legion_BUILD_TUTORIAL)
    add_subdirectory(tutorial)
  endif()
  if(Legion_BUILD_ALL OR Legion_BUILD_TESTS)
    add_subdirectory(test)
  endif()
endif()

#------------------------------------------------------------------------------#
# Complex support
#------------------------------------------------------------------------------#

if(Legion_BUILD_ALL OR Legion_BUILD_BINDINGS)
  option(Legion_REDOP_COMPLEX ""Use reduction operators for complex types"" ON)
else()
  option(Legion_REDOP_COMPLEX ""Use reduction operators for complex types"" OFF)
endif()
if((Legion_BUILD_ALL OR Legion_BUILD_BINDINGS) AND NOT Legion_REDOP_COMPLEX)
  message(FATAL_ERROR ""Bindings require Legion_REDOP_COMPLEX to be set"")
endif()
if(Legion_REDOP_COMPLEX)
  # define variable for legion_defines.h
  set(LEGION_REDOP_COMPLEX ON)
endif()
mark_as_advanced(Legion_REDOP_COMPLEX)
if(Legion_REDOP_HALF)
  # define variable for legion_defines.h
  set(LEGION_REDOP_HALF ON)
endif()
mark_as_advanced(Legion_REDOP_HALF)

#------------------------------------------------------------------------------#
# Configure definition headers
#------------------------------------------------------------------------------#

configure_file(${PROJECT_SOURCE_DIR}/cmake/legion_defines.h.in
  ${PROJECT_BINARY_DIR}/runtime/legion_defines.h @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/runtime/legion_defines.h
  DESTINATION  ${CMAKE_INSTALL_INCLUDEDIR})

configure_file(${PROJECT_SOURCE_DIR}/cmake/realm_defines.h.in
  ${PROJECT_BINARY_DIR}/runtime/realm_defines.h @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/runtime/realm_defines.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

#------------------------------------------------------------------------------#
# vim: set tabstop=2 shiftwidth=2 expandtab :
#------------------------------------------------------------------------------#
",3.1,3.1
34354,kdeforche,wt,False,False,False,False,False,47,C,2020-05-15 08:39:04+00:00,2011-11-24 12:02:23+00:00,998,1942,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1...3.14)

SET(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE true)

PROJECT(WT)

SET(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH}
  ${WT_SOURCE_DIR}
  ${WT_SOURCE_DIR}/cmake
)

SET(VERSION_SERIES 4)
SET(VERSION_MAJOR 3)
SET(VERSION_MINOR 1)

IF(NOT SHARED_LIBS)
  IF(WIN32)
    OPTION(SHARED_LIBS ""Compile shared libraries"" OFF)
  ELSE(WIN32)
    OPTION(SHARED_LIBS ""Compile shared libraries"" ON)
  ENDIF(WIN32)
ENDIF(NOT SHARED_LIBS)

#
# Various things that must be configured by the user or packager ...
#
OPTION(BUILD_EXAMPLES ""Build examples"" ON)
OPTION(INSTALL_DOCUMENTATION ""Install documentation (tutorials and reference)"" OFF)
OPTION(INSTALL_EXAMPLES ""Install examples (binaries and source)"" OFF)
OPTION(INSTALL_RESOURCES ""Install resources directory"" ON)
OPTION(ENABLE_SSL ""Enable cryptography functions, using OpenSSL"" ON)
OPTION(ENABLE_HARU ""Enable Haru Free PDF Library, which is used to provide support for painting to PDF (WPdfImage)"" ON)
OPTION(ENABLE_PANGO ""Enable Pango Library, which is used for improved font support (WPdfImage and WRasterImage)"" ON)
OPTION(ENABLE_EXT ""Build Wt Ext library with JavaScript-only widgets (http://extjs.com/) DEPRECATED"" OFF)
OPTION(ENABLE_SQLITE ""Build SQLite3 backend for Wt::Dbo"" ON)
OPTION(ENABLE_POSTGRES ""Build PostgreSQL backend for Wt::Dbo"" ON)
OPTION(ENABLE_FIREBIRD ""Build FirebirdSQL backend for Wt::Dbo"" ON)
OPTION(ENABLE_MYSQL ""Build mariadb/mysql backend for Wt::Dbo"" ON)
OPTION(ENABLE_MSSQLSERVER ""Build Microsoft SQL Server backend for Wt::Dbo"" ON)
OPTION(ENABLE_QT4 ""Build Qt4 interworking library (libwtwithqt)"" ON)
OPTION(ENABLE_QT5 ""Build Qt5 interworking library (libwtwithqt5)"" ON)
OPTION(ENABLE_LIBWTTEST ""Build Wt::Test"" ON)
OPTION(ENABLE_LIBWTDBO ""Build Wt::Dbo"" ON)
OPTION(WT_NO_STD_LOCALE ""Build Wt to run on a system without std::locale support"" OFF)
OPTION(WT_NO_STD_WSTRING ""Build Wt to run on a system without std::wstring support"" OFF)
OPTION(ENABLE_OPENGL ""Build Wt with support for server-side opengl rendering"" ON)
OPTION(ENABLE_UNWIND ""Build Wt with stacktrace support using libunwind"" OFF)

IF(NOT CMAKE_CXX_STANDARD)
  SET(CMAKE_CXX_STANDARD 11)
ENDIF(NOT CMAKE_CXX_STANDARD)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

IF(MSVC)
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /bigobj"")
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
ENDIF(MSVC)

IF(APPLE)
  OPTION(USE_BOOST_FRAMEWORK ""Uses a Boost framework"" OFF)
ENDIF(APPLE)

IF(NOT DOCUMENTATION_DESTINATION)
  SET(DOCUMENTATION_DESTINATION share/doc/Wt)
ENDIF(NOT DOCUMENTATION_DESTINATION)
IF(NOT EXAMPLES_DESTINATION)
  SET(EXAMPLES_DESTINATION lib/Wt/examples)
ENDIF(NOT EXAMPLES_DESTINATION)

IF(WIN32)
  # required for all that uses boost.asio
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0600)

  IF(SHARED_LIBS)
    # See http://svn.boost.org/trac/boost/ticket/3465
    SET(WT_NO_BOOST_INTRUSIVE true)
  ENDIF(SHARED_LIBS)
ENDIF(WIN32)

# Fixup Windows declspec stuff
IF(NOT SHARED_LIBS)
  SET(WT_STATIC true)
  SET(WTHTTP_STATIC true)
  SET(WT_EXT_STATIC true)
  SET(WTDBO_STATIC true)
  SET(WTDBOSQLITE3_STATIC true)
  SET(WTDBOPOSTGRES_STATIC true)
  SET(WTDBOFIREBIRD_STATIC true)
  SET(WTDBOMYSQL_STATIC true)
  SET(WTDBOMSSQLSERVER_STATIC true)
ENDIF(NOT SHARED_LIBS)

IF(NOT MULTI_THREADED)
  OPTION(MULTI_THREADED ""Build multi-threaded httpd deamon (if possible)"" ON)
ENDIF(NOT MULTI_THREADED)

SET(BUILD_SHARED_LIBS ${SHARED_LIBS})

SET(DEBUG_LIB_POSTFIX ""d"" CACHE STRING ""String appended to debug libraries"")

SET(LIB_INSTALL_DIR ""lib"" CACHE STRING
  ""Name for library directory within ${CMAKE_INSTALL_PREFIX}"")

SET(CMAKE_INSTALL_DIR ""${LIB_INSTALL_DIR}/cmake"" CACHE STRING
  ""Name for CMake package configuration directory within ${CMAKE_INSTALL_PREFIX}"")

IF(WIN32)

  SET(RUNDIR ""c:/witty"") # Does not apply to win32

  IF(NOT DEFINED CONFIGDIR)
    SET(CONFIGDIR ${RUNDIR} CACHE STRING ""Path for the configuration files"")
  ENDIF(NOT DEFINED CONFIGDIR)

  SET(USERLIB_PREFIX_DEFAULT ""c:/libraries"")
  IF(MSVC)
    SET(BUILD_PARALLEL ""/MP"" CACHE STRING ""MSVC option for parallel builds (/MP or /MPx)"")
  ENDIF(MSVC)

ELSE(WIN32)

  IF(""${CMAKE_INSTALL_PREFIX}"" STREQUAL ""/usr"")
    SET(CONFIG_PREFIX """")
  ELSEIF(""${CMAKE_INSTALL_PREFIX}"" STREQUAL ""/usr/local"")
    SET(CONFIG_PREFIX """")
  ELSE()
    SET(CONFIG_PREFIX ${CMAKE_INSTALL_PREFIX})
  ENDIF()

  SET(RUNDIR ""${CONFIG_PREFIX}/var/run/wt"" CACHE PATH
    ""Default path for wt session management (only used by FCGI connector)"")

  IF(NOT DEFINED CONFIGDIR)
    SET(CONFIGDIR ""${CONFIG_PREFIX}/etc/wt"" CACHE STRING ""Path for the configuration files"")
  ENDIF( NOT DEFINED CONFIGDIR )

  # If the user specifies the standard CMAKE_PREFIX_PATH to find packages,
  # honour it.
  IF(CMAKE_PREFIX_PATH)
    SET(USERLIB_PREFIX_DEFAULT ${CMAKE_PREFIX_PATH})
  ELSE()
    SET(USERLIB_PREFIX_DEFAULT ""/usr"")
  ENDIF()

ENDIF(WIN32)

IF(DEFINED USERLIB_ROOT) # Deprecated <= 3.1.3
  SET(USERLIB_PREFIX ${USERLIB_ROOT} CACHE PATH
    ""Installation prefix of dependency libraries (by USERLIB_ROOT)"")
ELSE(DEFINED USERLIB_ROOT)
  SET(USERLIB_PREFIX ${USERLIB_PREFIX_DEFAULT} CACHE PATH
    ""Installation prefix of dependency libraries"")
ENDIF(DEFINED USERLIB_ROOT)

IF(WIN32)
  SET(BOOST_PREFIX_DEFAULT ""c:/Program Files/Boost"")
  OPTION(BOOST_DYNAMIC ""Link to boost DLLs (OFF means static link)"" OFF)
  OPTION(HARU_DYNAMIC ""Link to libharu DLLs (OFF means static link)"" OFF)
ELSE(WIN32)
  SET(BOOST_PREFIX_DEFAULT ${USERLIB_PREFIX})
ENDIF(WIN32)

IF(DEFINED BOOST_DIR) # Deprecated <= 3.1.3
  SET(BOOST_PREFIX ${BOOST_DIR} CACHE PATH
    ""Installation prefix of boost libraries (by BOOST_DIR)"")
ELSE(DEFINED BOOST_DIR)
  SET(BOOST_PREFIX ${BOOST_PREFIX_DEFAULT} CACHE PATH
    ""Installation prefix of boost libraries"")
ENDIF(DEFINED BOOST_DIR)

SET(FCGI_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of fcgi library (overrides USERLIB_PREFIX)"")
SET(POSTGRES_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of postgresql library (overrides USERLIB_PREFIX)"")
SET(ODBC_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of ODBC (unixODBC), required for MS SQL Server, not necessary on Windows (overrides USERLIB_PREFIX)"")
SET(FIREBIRD_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of FirebirdSql library. (overrides USERLIB_PREFIX)"")
SET(IBPP_SRC_DIRECTORY CACHE PATH
  ""Path to the SOURCE directory of the IBPP library (C++ Firebird client library, see ibpp.org), Wt includes an ibpp distribution which is used by default. To use a custom IBPP library configure this variable and enable the USE_SYSTEM_IBPP option."")
SET(MYSQL_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of mariadb client libraries (overrides USERLIB_PREFIX)"")
SET(SQLITE3_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of sqlite3 library (overrides USERLIB_PREFIX)"")
SET(HARU_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of libharu library (overrides USERLIB_PREFIX)"")
SET(SSL_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of SSL library (overrides USERLIB_PREFIX)"")
SET(ZLIB_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of zlib library (overrides USERLIB_PREFIX)"")
SET(GM_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Installation prefix of GraphicsMagick library (overrides USERLIB_PREFIX)"")
SET(SKIA_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Prefix of skia library (overrides USERLIB_PREFIX)"")
SET(ASIO_PREFIX ${USERLIB_PREFIX} CACHE PATH
  ""Prefix of Asio (overrides USERLIB_PREFIX), only used when WT_ASIO_IMPLEMENTATION is standalone"")
SET(UNWIND_PREFIX ${UNWIND_PREFIX} CACHE PATH
  ""Prefix of unwind library (overrides USERLIB_PREFIX)"")

OPTION(DEBUG ""Support for debugging, must be enabled also in wt_config.xml"" OFF)

IF(CYGWIN)
  OPTION(BUILD_TESTS ""Build Wt tests"" OFF)
ELSE(CYGWIN)
  OPTION(BUILD_TESTS ""Build Wt tests"" ON)
ENDIF(CYGWIN)

ADD_DEFINITIONS(-DWT_WITH_OLD_INTERNALPATH_API)
IF(CYGWIN)
  ADD_DEFINITIONS(-D__USE_W32_SOCKETS)
ENDIF(CYGWIN)

MARK_AS_ADVANCED( CONFIGDIR )

SET(CONFIGURATION ""${CONFIGDIR}/wt_config.xml"" CACHE PATH ""Path to the wt configuration file"")
SET(WTHTTP_CONFIGURATION ""${CONFIGDIR}/wthttpd"" CACHE PATH ""Path for the wthttpd configuration file"")

SET(WEBUSER apache CACHE STRING ""Webserver username (e.g. apache or www)"")
SET(WEBGROUP apache CACHE STRING ""Webserver groupname (e.g. apache or www or users)"")
IF(WIN32)
  SET(CONNECTOR_FCGI FALSE)
  IF(NOT MINGW)
    OPTION(CONNECTOR_ISAPI ""Compile in ISAPI connector (libwtisapi) ?"" ON)
  ENDIF(NOT MINGW)
ELSE(WIN32)
  OPTION(CONNECTOR_FCGI ""Compile in FCGI connector (libwtfcgi) ?"" ON)
  SET(CONNECTOR_ISAPI OFF)
ENDIF(WIN32)
OPTION(CONNECTOR_HTTP ""Compile in stand-alone httpd connector (libwthttp) ?"" ON)
SET(EXAMPLES_CONNECTOR wthttp CACHE STRING ""Connector used for examples"")

include (CheckSymbolExists)

find_package(PNG)

set(ZLIB_ROOT ${ZLIB_PREFIX})
find_package(ZLIB)

INCLUDE(cmake/WtFindBoost.txt)
INCLUDE(cmake/WtFindFcgi.txt)
INCLUDE(cmake/WtFindMysql.txt)
INCLUDE(cmake/WtFindPostgresql.txt)
INCLUDE(cmake/WtFindOdbc.txt)
INCLUDE(cmake/WtFindAsciidoc.txt)
INCLUDE(cmake/WtFindHaru.txt)
INCLUDE(cmake/WtFindGm.txt)
INCLUDE(cmake/WtFindGL.txt)
INCLUDE(cmake/WtFindSkia.txt)

set(OPENSSL_ROOT_DIR ${SSL_PREFIX})
find_package(OpenSSL)

IF (ENABLE_UNWIND)
  INCLUDE(cmake/WtFindUnwind.txt)
ENDIF (ENABLE_UNWIND)

IF (ENABLE_PANGO)
  INCLUDE(cmake/WtFindPangoFt2.txt)
ENDIF (ENABLE_PANGO)

INCLUDE(cmake/WtFindSystemLibraries.txt)

IF(ENABLE_QT4)
  FIND_PACKAGE(Qt4)

  IF(QT_FOUND)
    INCLUDE(${QT_USE_FILE})
  ENDIF(QT_FOUND)
ENDIF(ENABLE_QT4)

IF(ENABLE_QT5)
  FIND_PACKAGE(Qt5Core)
ENDIF(ENABLE_QT5)

set(WT_THREAD_LIB """")
IF(MULTI_THREADED)
  find_package(Threads)
  set(WT_THREAD_LIB Threads::Threads)
ENDIF(MULTI_THREADED)

IF(NOT BOOST_WT_FOUND)
  SET(ERR
     ""Could not find a boost installation in "" ${BOOST_PREFIX} "".\n\n""
      ""There are two methods in Wt to find boost:\n\n""
      ""1. Find boost through cmake (recommended)\n""
      ""This requires cmake 2.6, and is in ""
      ""that case the default (unless BOOST_COMPILER or BOOST_VERSION is ""
      ""defined). This method requires a multi-threaded boost installation.\n""
      ""You may need to add your boost version number to ""
      ""Boost_ADDITIONAL_VERSIONS, and/or set BOOST_PREFIX to the location ""
      ""where boost is installed.\n\n""
      ""2. Use the Wt-proprietary method to find boost.\n""
      ""This requires you to define three variables:\n""
      ""BOOST_PREFIX: set to the directory where you installed boost\n""
      ""BOOST_COMPILER: set to the compiler signature as you find them in ""
      ""library names (e.g.: gcc42)\n""
      ""BOOST_VERSION: set to the boost version, again as you find them in ""
      ""the library names (e.g.: 1_38)\n\n""
      ""Note 1: the code to discover boost is located in cmake/WtFindBoost.txt\n""
      ""Note 2: on windows, set BOOST_PREFIX to the full path, eg ""
      ""c:/Program Files/boost/boost_1_65_1"")
  MESSAGE(FATAL_ERROR ${ERR})
ENDIF(NOT BOOST_WT_FOUND)

IF(BOOST_WT_MT_FOUND)
  IF(MULTI_THREADED)
    MESSAGE(""** Enabling multi threading."")
    SET(MULTI_THREADED_BUILD true)
    SET(WT_THREADED true)
    ADD_DEFINITIONS(-D_REENTRANT -DBOOST_SPIRIT_THREADSAFE)
  ELSE(MULTI_THREADED)
    MESSAGE(""** Disabling multi threading."")
    SET(MULTI_THREADED_BUILD false)

    ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
  ENDIF(MULTI_THREADED)
ELSE(BOOST_WT_MT_FOUND)
  SET(MULTI_THREADED_BUILD false)
  MESSAGE(""** Disabling multi threading: could not find multi-threaded boost libraries"")
  ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
ENDIF(BOOST_WT_MT_FOUND)

# decide on GraphicsMagick vs skia
# todo: set default to whatever was found
IF (WIN32)
  SET(WT_WRASTERIMAGE_DEFAULT_IMPLEMENTATION ""Direct2D"")
ELSE (WIN32)
  SET(WT_WRASTERIMAGE_DEFAULT_IMPLEMENTATION ""none"")
ENDIF (WIN32)

SET(WT_WRASTERIMAGE_IMPLEMENTATION ${WT_WRASTERIMAGE_DEFAULT_IMPLEMENTATION} CACHE STRING ""Implementation for WRasterImage server-side rendering"")
IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 8)
  MESSAGE(STATUS ""Informational: WT_WRASTERIMAGE_IMPLEMENTATION should be either GraphicsMagick, skia, or Direct2D"")
ELSE (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 8)
  SET_PROPERTY(CACHE WT_WRASTERIMAGE_IMPLEMENTATION PROPERTY STRINGS GraphicsMagick skia Direct2D none)
ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 8)

IF (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL ""GraphicsMagick"")
  IF (NOT GM_FOUND)
    MESSAGE(FATAL_ERROR ""WT_WRASTERIMAGE_IMPLEMENTATION set to GraphicsMagick but GM is not found. Indicate the location of your graphicsmagick library using -DGM_PREFIX=..."")
  ENDIF (NOT GM_FOUND)
  SET(WT_HAS_WRASTERIMAGE true)
ELSEIF (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL ""skia"")
  IF (NOT SKIA_FOUND)
    MESSAGE(FATAL_ERROR ""WT_WRASTERIMAGE_IMPLEMENTATION set to skia but skia is not found. Indicate the location of your skia library using -DSKIA_PREFIX=..."")
  ENDIF (NOT SKIA_FOUND)
  SET(WT_HAS_WRASTERIMAGE true)
ELSEIF (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL ""Direct2D"")
  IF (WIN32)
    SET(WT_HAS_WRASTERIMAGE true)
  ENDIF (WIN32)
ELSE (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL ""GraphicsMagick"")
    MESSAGE(""** Disabled WRasterimage support. Set WT_WRASTERIMAGE_IMPLEMENTATION to GraphicsMagick, skia, or Direct2D."")
ENDIF (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL ""GraphicsMagick"")

IF((CMAKE_CXX_STANDARD EQUAL 17) OR (CMAKE_CXX_STANDARD GREATER 17))
SET(WT_CPP17_ANY_DEFAULT_IMPLEMENTATION ""std"")
ELSE()
SET(WT_CPP17_ANY_DEFAULT_IMPLEMENTATION ""thelink2012"")
ENDIF()
SET(WT_CPP17_ANY_IMPLEMENTATION ${WT_CPP17_ANY_DEFAULT_IMPLEMENTATION} CACHE STRING
  ""Implementation for Wt::cpp17::any. Defaults to \""thelink2012\"": an included implementation of any by GitHub user thelink2012. Use \""std\"" for std::any, or \""experimental\"" for std::experimental::any, if compiler support is available. You may have to change CMAKE_CXX_STANDARD to enable C++17 support in the compiler."")
SET_PROPERTY(CACHE WT_CPP17_ANY_IMPLEMENTATION PROPERTY STRINGS thelink2012 experimental std)

IF (${WT_CPP17_ANY_IMPLEMENTATION} STREQUAL ""thelink2012"")
  SET(WT_ANY_IS_THELINK2012_ANY ON)
ELSEIF (${WT_CPP17_ANY_IMPLEMENTATION} STREQUAL ""experimental"")
  SET(WT_ANY_IS_EXPERIMENTAL_ANY ON)
ELSEIF (${WT_CPP17_ANY_IMPLEMENTATION} STREQUAL ""std"")
  SET(WT_ANY_IS_STD_ANY ON)
ELSE (${WT_CPP17_ANY_IMPLEMENTATION} STREQUAL ""thelink2012"")
  MESSAGE(FATAL_ERROR ""WT_CPP17_ANY_IMPLEMENTATION must be one of thelink2012, experimental, or std"")
ENDIF (${WT_CPP17_ANY_IMPLEMENTATION} STREQUAL ""thelink2012"")

SET(WT_ASIO_DEFAULT_IMPLEMENTATION ""boost"")
SET(WT_ASIO_IMPLEMENTATION ${WT_ASIO_DEFAULT_IMPLEMENTATION} CACHE STRING
""Implementation of Asio to use. Defaults to \""boost\"". Use \""standalone\"" and provide its path in ASIO_PREFIX to use the standalone version."")
SET_PROPERTY(CACHE WT_ASIO_IMPLEMENTATION PROPERTY STRINGS boost standalone)

IF (${WT_ASIO_IMPLEMENTATION} STREQUAL ""boost"")
  SET(WT_ASIO_IS_BOOST_ASIO ON)
ELSEIF(${WT_ASIO_IMPLEMENTATION} STREQUAL ""standalone"")
  SET(WT_ASIO_IS_STANDALONE_ASIO ON)
ELSE(${WT_ASIO_IMPLEMENTATION} STREQUAL ""boost"")
  MESSAGE(FATAL_ERROR ""WT_ASIO_IMPLEMENTATION must be boost or standalone"")
ENDIF(${WT_ASIO_IMPLEMENTATION} STREQUAL ""boost"")

IF(WT_ASIO_IS_STANDALONE_ASIO)
IF(NOT EXISTS ""${ASIO_PREFIX}/include/asio.hpp"")
MESSAGE(FATAL_ERROR ""WT_ASIO_IMPLEMENTATION is set to standalone, but Asio was not found in ASIO_PREFIX"")
ENDIF(NOT EXISTS ""${ASIO_PREFIX}/include/asio.hpp"")
INCLUDE_DIRECTORIES(""${ASIO_PREFIX}/include"")
ENDIF(WT_ASIO_IS_STANDALONE_ASIO)

FIND_PACKAGE(Doxygen)

# Boost is used nearly everywhere, so we can put these here
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIRS})
LINK_DIRECTORIES(${BOOST_LIB_DIRS})
IF(WIN32)
  IF(BOOST_DYNAMIC)
    ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
  ELSE(BOOST_DYNAMIC)
    # You could expect that this is the default when BOOST_ALL_DYN_LINK
    # is not set, but this is problematic for cygwin
    ADD_DEFINITIONS(-DBOOST_THREAD_USE_LIB)
  ENDIF(BOOST_DYNAMIC)
  IF(HARU_DYNAMIC)
    ADD_DEFINITIONS(-DHPDF_DLL)
  ENDIF(HARU_DYNAMIC)
  ADD_DEFINITIONS(
      -D_CRT_SECURE_NO_WARNINGS
      -D_SCL_SECURE_NO_WARNINGS
      )
ENDIF(WIN32)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
      ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.""
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(DEBUG)
  SET(WT_DEBUG_ENABLED 1)
ELSE(DEBUG)
  SET(WT_DEBUG_ENABLED 0)
ENDIF(DEBUG)

IF(INSTALL_DOCUMENTATION)
  ADD_CUSTOM_TARGET(doc ALL)
ELSE(INSTALL_DOCUMENTATION)
  ADD_CUSTOM_TARGET(doc)
ENDIF(INSTALL_DOCUMENTATION)

IF (ASCIIDOC_FOUND)
  MACRO (ASCIIDOC_FILE target infile outfile)
    ADD_CUSTOM_TARGET(${target}
       ${ASCIIDOC_EXECUTABLE} -a toc -a numbered -a icons -a  theme=emweb -a pygments -a linkcss -o ${outfile} ${infile}
       COMMENT ""Asciidoc ${infile}"")
    ADD_DEPENDENCIES(doc ${target})
  ENDMACRO (ASCIIDOC_FILE)
ENDIF (ASCIIDOC_FOUND)

IF (DOXYGEN_FOUND)
  ADD_CUSTOM_TARGET(doxygen
    ${DOXYGEN_EXECUTABLE}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT ""Doxygen ..."")
  ADD_DEPENDENCIES(doc doxygen)
  ADD_CUSTOM_TARGET(doxygen-examples
    ${DOXYGEN_EXECUTABLE}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/examples
    COMMENT ""Doxygen for examples ..."")
  ADD_DEPENDENCIES(doc doxygen-examples)
ENDIF (DOXYGEN_FOUND)

# we enable rpath support for APPLE, this probably goes against policy
# linux distributions?
IF(APPLE)
  SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
  LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib"" isSystemDir)
  IF(""${isSystemDir}"" STREQUAL ""-1"")
    SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib"")
  ENDIF(""${isSystemDir}"" STREQUAL ""-1"")
  SET(CMAKE_MACOSX_RPATH TRUE)
ENDIF(APPLE)

SUBDIRS(src)

IF(BUILD_EXAMPLES)
  IF(WIN32)
    SUBDIRS(examples)
  ELSE(WIN32)
    IF (INSTALL_EXAMPLES)
      SUBDIRS(examples)
    ELSE (INSTALL_EXAMPLES)
      SUBDIRS(EXCLUDE_FROM_ALL examples)
    ENDIF (INSTALL_EXAMPLES)
  ENDIF(WIN32)
ENDIF(BUILD_EXAMPLES)

IF(BUILD_TESTS)
  SUBDIRS(test)
ENDIF(BUILD_TESTS)

IF(INSTALL_RESOURCES)
INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/resources DESTINATION
    ${CMAKE_INSTALL_PREFIX}/share/Wt/)
ENDIF(INSTALL_RESOURCES)

IF(INSTALL_EXAMPLES)
  INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/examples/ DESTINATION
      ${CMAKE_INSTALL_PREFIX}/${EXAMPLES_DESTINATION} PATTERN ""examples/*"")
ENDIF(INSTALL_EXAMPLES)

IF(INSTALL_DOCUMENTATION)
  INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/reference/html DESTINATION
    ${CMAKE_INSTALL_PREFIX}/${DOCUMENTATION_DESTINATION}/reference)
  INSTALL(FILES ${PROJECT_SOURCE_DIR}/doc/reference/wt.qch DESTINATION
    ${CMAKE_INSTALL_PREFIX}/${DOCUMENTATION_DESTINATION}/reference)
  INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/examples/html DESTINATION
    ${CMAKE_INSTALL_PREFIX}/${DOCUMENTATION_DESTINATION}/examples)
  INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/tutorial DESTINATION
    ${CMAKE_INSTALL_PREFIX}/${DOCUMENTATION_DESTINATION})
ENDIF(INSTALL_DOCUMENTATION)

IF(NOT EXISTS ${CONFIGDIR}/wt_config.xml)
  INSTALL(FILES ${WT_BINARY_DIR}/wt_config.xml DESTINATION ${CONFIGDIR})
ENDIF (NOT EXISTS ${CONFIGDIR}/wt_config.xml)

IF(ENABLE_HARU AND HARU_FOUND)
  SET(HAVE_HARU ON)
  SET(WT_HAS_WPDFIMAGE true)
ENDIF(ENABLE_HARU AND HARU_FOUND)

IF(ENABLE_SSL AND OPENSSL_FOUND)
  SET(HAVE_SSL ON)
  SET(WT_WITH_SSL true)
ENDIF(ENABLE_SSL AND OPENSSL_FOUND)

IF(ENABLE_PANGO AND PANGO_FT2_FOUND)
  SET(HAVE_PANGO ON)
ENDIF(ENABLE_PANGO AND PANGO_FT2_FOUND)

IF(ENABLE_OPENGL AND GL_FOUND AND WT_HAS_WRASTERIMAGE)
  SET(WT_USE_OPENGL TRUE)
  SET(HAVE_GL TRUE)
ENDIF(ENABLE_OPENGL AND GL_FOUND AND WT_HAS_WRASTERIMAGE)

IF(ENABLE_UNWIND AND UNWIND_FOUND)
  SET(HAVE_UNWIND ON)
ENDIF(ENABLE_UNWIND AND UNWIND_FOUND)

# Compile time constants & make sure our build finds it
FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Wt)
SET(WCONFIG_H_PATH ${CMAKE_CURRENT_BINARY_DIR}/Wt/WConfig.h)
CONFIGURE_FILE(
  ${WT_SOURCE_DIR}/WConfig.h.in
  ${WCONFIG_H_PATH}
)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INSTALL_FILES(/include/Wt FILES ${WCONFIG_H_PATH})

# Generate wt_config.xml from wt_config.xml.in
CONFIGURE_FILE(
  ${WT_SOURCE_DIR}/wt_config.xml.in
  ${WT_BINARY_DIR}/wt_config.xml
)

# CMake package configuration
IF(${Boost_USE_STATIC_LIBS})
  SET(_WTCONFIG_BOOST_STATIC ""ON"")
ELSE()
  SET(_WTCONFIG_BOOST_STATIC ""OFF"")
ENDIF()
IF (${WT_ASIO_IMPLEMENTATION} STREQUAL ""boost"")
  SET(_WTCONFIG_CMAKE_FIND_BOOST TRUE)
ELSEIF(${Boost_USE_STATIC_LIBS} AND NOT ${SHARED_LIBS})
  SET(_WTCONFIG_CMAKE_FIND_BOOST TRUE)
ELSE()
  SET(_WTCONFIG_CMAKE_FIND_BOOST FALSE)
ENDIF()
CONFIGURE_FILE(
  ${WT_SOURCE_DIR}/wt-config.cmake.in
  ${WT_BINARY_DIR}/wt-config.cmake
  @ONLY
)
UNSET(_WTCONFIG_CMAKE_FIND_BOOST)
UNSET(_WTCONFIG_BOOST_STATIC)
CONFIGURE_FILE(
  ${WT_SOURCE_DIR}/wt-config-version.cmake.in
  ${WT_BINARY_DIR}/wt-config-version.cmake
  @ONLY
)
INSTALL(FILES
  ${WT_BINARY_DIR}/wt-config.cmake
  ${WT_BINARY_DIR}/wt-config-version.cmake
  DESTINATION ${CMAKE_INSTALL_DIR}/wt)
",3.1...3.14,3.1
34415,rncbc,qmidinet,False,False,False,False,False,4,C++,2020-03-27 17:02:53+00:00,2015-09-22 14:39:56+00:00,18,258,"project(QMIDINET)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.6.3"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
endif ()

set (PACKAGE_NAME ""QmidiNet"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""qmidinet"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable ALSA MIDI support option.
option (CONFIG_ALSA_MIDI ""Enable ALSA MIDI support (default=yes)"" 1)

# Enable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable Network IPv6 support option.
option (CONFIG_IPV6 ""Enable Network IPv6 support (EXPERIMENTAL) (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Network)

if (CONFIG_IPV6)
  find_package (Qt5 REQUIRED COMPONENTS Network)
endif ()

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for ALSA libraries.
if (CONFIG_ALSA_MIDI)
  pkg_check_modules (ALSA alsa)
  if (ALSA_FOUND)
    include_directories (${ALSA_INCLUDE_DIRS})
    link_directories (${ALSA_LIBRARY_DIRS})
    link_libraries (${ALSA_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** ALSA library not found."")
    set (CONFIG_ALSA_MIDI 0)
  endif ()
endif ()

# Check for JACK libraries.
if (CONFIG_JACK_MIDI)
  pkg_check_modules (JACK jack>=0.100.0)
  if (JACK_FOUND)
    include_directories (${JACK_INCLUDE_DIRS})
    link_directories (${JACK_LIBRARY_DIRS})
    link_libraries (${JACK_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** JACK library not found."")
    set (CONFIG_JACK_MIDI 0)
  endif ()
endif ()


add_subdirectory (src)

configure_file (qmidinet.spec.in qmidinet.spec IMMEDIATE @ONLY)

install (FILES qmidinet.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES qmidinet.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME qmidinet.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  ALSA MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_ALSA_MIDI)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
message     ("""")
show_option (""  Network IPv6 support (EXPERIMENTAL)  . . . . . . ."" CONFIG_IPV6)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
34479,vadimcn,vscode-lldb,False,False,False,False,False,15,C++,2020-05-15 17:54:07+00:00,2016-01-11 06:37:39+00:00,647,734,"cmake_minimum_required(VERSION 3.10)
project(CodeLLDB)
enable_testing()

set(VERSION 1.5.0)

include(cmake/CopyFiles.cmake)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_INSTALL_PREFIX $ENV{HOME}/.vscode/extensions/vscode-lldb CACHE PATH ""Install location"")

set(LLDB_ROOT $ENV{LLDB_ROOT} CACHE PATH ""Root of LLDB build directory"")
if (LLDB_ROOT)
    message(""Using LLDB from ${LLDB_ROOT}"")
else()
    message(FATAL_ERROR ""LLDB_ROOT not set."" )
endif()

# General OS-specific definitions
if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
    set(DylibPrefix lib)
    set(DylibSuffix .so)
    set(NPM npm)
    set(PathSep "":"")
    set(DefaultTarget x86_64-unknown-linux-gnu)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL ""Darwin"")
    set(DylibPrefix lib)
    set(DylibSuffix .dylib)
    set(SymSuffix .dSYM)
    set(NPM npm)
    set(PathSep "":"")
    set(DefaultTarget x86_64-apple-darwin)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
    set(ExeSuffix .exe)
    set(DylibSuffix .dll)
    set(SymSuffix .pdb)
    set(NPM npm.cmd)
    set(PathSep ""$<SEMICOLON>"")
    set(DefaultTarget x86_64-pc-windows-msvc)
else()
    message(FATAL_ERROR ""${CMAKE_SYSTEM_NAME} target is not supported by this build script."")
endif()


if (NOT LLVM_TRIPLE)
set(LLVM_TRIPLE ${DefaultTarget})
endif()

set(WithEnv ${CMAKE_COMMAND} -E env)
set(UpdateFile ${CMAKE_COMMAND} -E copy_if_different)

add_subdirectory(adapter2)
add_subdirectory(lldb)

# Extension package content

set(PLATFORM_PACKAGE_URL ""https://github.com/vadimcn/vscode-lldb/releases/download/v\${version}/\${platformPackage}"" CACHE STRING """")
configure_file(package.json ${CMAKE_CURRENT_BINARY_DIR}/package.json @ONLY)
configure_file(webpack.config.js ${CMAKE_CURRENT_BINARY_DIR}/webpack.config.js @ONLY)
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/package-lock.json DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

# Run 'npm install'
execute_process(
    COMMAND ${NPM} install
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    RESULT_VARIABLE Result
)
if (NOT ${Result} EQUAL 0)
    message(FATAL_ERROR ""npm intall failed: ${Result}"")
endif()

# Copy it back, so we can commit the lock file.
file(COPY ${CMAKE_CURRENT_BINARY_DIR}/package-lock.json DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(update_lockfiles
    COMMAND ${UpdateFile} ${CMAKE_CURRENT_SOURCE_DIR}/package-lock.json ${CMAKE_CURRENT_BINARY_DIR}/package-lock.json
    COMMAND ${NPM} update
    COMMAND ${UpdateFile} ${CMAKE_CURRENT_BINARY_DIR}/package-lock.json ${CMAKE_CURRENT_SOURCE_DIR}/package-lock.json
    COMMAND cargo update
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    USES_TERMINAL
)

# Extension and tests

if (CMAKE_BUILD_TYPE MATCHES Release|RelWithDebInfo)
    set(WebpackMode production)
else()
    set(WebpackMode development)
endif()

add_custom_target(extension
    COMMAND
    COMMAND ${NPM} run webpack -- --display=minimal --mode=${WebpackMode} --output=${CMAKE_CURRENT_BINARY_DIR}/extension.js
        ${CMAKE_CURRENT_SOURCE_DIR}/extension/main.ts
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    USES_TERMINAL
)

add_custom_target(tests
    COMMAND ${NPM} run webpack -- --display=minimal --mode=${WebpackMode} --output=${CMAKE_CURRENT_BINARY_DIR}/tests.js
        ${CMAKE_CURRENT_SOURCE_DIR}/tests/adapter.test.ts
        ${CMAKE_CURRENT_SOURCE_DIR}/tests/util.test.ts
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    USES_TERMINAL
)

# Extension package resources

add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/README.md ${CMAKE_CURRENT_BINARY_DIR}/README.md)
add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.md ${CMAKE_CURRENT_BINARY_DIR}/CHANGELOG.md)
add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/lldb.png ${CMAKE_CURRENT_BINARY_DIR}/images/lldb.png)
add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/checked.svg ${CMAKE_CURRENT_BINARY_DIR}/images/checked.svg)
add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/unchecked.svg ${CMAKE_CURRENT_BINARY_DIR}/images/unchecked.svg)
add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/syntaxes/disassembly.json ${CMAKE_CURRENT_BINARY_DIR}/syntaxes/disassembly.json)

# For extension debugging

add_custom_target(dev_debugging
    DEPENDS codelldb debuggee extension ${PackageFiles}
)

# VSIX packages

set(PackagedFilesPortable
    README.md
    CHANGELOG.md
    extension.js
    formatters/*
    images/*
    syntaxes/*
)

set(PackagedFilesFull
    ${PackagedFilesPortable}
    platform.ok
    adapter2/*.py
    adapter2/codelldb
    adapter2/libcodelldb.so
    adapter2/libcodelldb_python.so
    adapter2/libcodelldb.dylib
    adapter2/libcodelldb_python.dylib
    adapter2/codelldb.exe
    adapter2/codelldb.dll
    adapter2/codelldb_python.dll
    lldb/bin/**/*
    lldb/lib/**/*
)

# Indicator file used to determine whether we have the platform package.
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/platform.ok """")

set(Content **)
foreach(Line ${PackagedFilesPortable})
    set(Content ${Content}\n!${Line})
endforeach()
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/vscodeignore-portable ${Content})

set(Content **)
foreach(Line ${PackagedFilesFull})
    set(Content ${Content}\n!${Line})
endforeach()
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/vscodeignore-full ${Content})

set(VsceOptions
    --baseContentUrl https://github.com/vadimcn/vscode-lldb/blob/v${VERSION}
    --baseImagesUrl https://github.com/vadimcn/vscode-lldb/raw/v${VERSION}
)

add_custom_target(vsix_portable
    DEPENDS extension ${PackageFiles}
    COMMAND ${UpdateFile} ${CMAKE_CURRENT_BINARY_DIR}/vscodeignore-portable ${CMAKE_CURRENT_BINARY_DIR}/.vscodeignore
    COMMAND ${NPM} run vsce -- package ${VsceOptions} -o ${CMAKE_CURRENT_BINARY_DIR}/codelldb-portable.vsix
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    USES_TERMINAL
)

add_custom_target(vsix_full
    DEPENDS extension lldb codelldb ${PackageFiles}
    COMMAND ${UpdateFile} ${CMAKE_CURRENT_BINARY_DIR}/vscodeignore-full ${CMAKE_CURRENT_BINARY_DIR}/.vscodeignore
    COMMAND ${NPM} run vsce -- package ${VsceOptions} -o ${CMAKE_CURRENT_BINARY_DIR}/codelldb-full.vsix
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    USES_TERMINAL
)

# Strip native binaries if building vsix_full

if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
    if (NOT CMAKE_STRIP)
        set(CMAKE_STRIP strip)
    endif()

    add_custom_target(strip_binaries
        DEPENDS lldb codelldb
        COMMAND find ${CMAKE_CURRENT_BINARY_DIR}/adapter2 -type f ""\\("" -executable -o -name ""*.so"" -o -name ""*.so.*"" ""\\)"" -print -exec ${CMAKE_STRIP} --strip-debug ""{}"" ""\;""
        COMMAND find ${CMAKE_CURRENT_BINARY_DIR}/lldb     -type f ""\\("" -executable -o -name ""*.so"" -o -name ""*.so.*"" ""\\)"" -not -name ""*.py"" -print -exec ${CMAKE_STRIP} --strip-debug ""{}"" ""\;""
        COMMENT ""Stripping debug info""
        USES_TERMINAL
    )
    add_dependencies(vsix_full strip_binaries)
endif()

# Build both VSIX packages, then extract vsix_portable to build/extracted

add_custom_target(vsix_extracted
    DEPENDS vsix_portable vsix_full
    COMMAND rm -rf ${CMAKE_CURRENT_BINARY_DIR}/extracted
    COMMAND unzip -o ${CMAKE_CURRENT_BINARY_DIR}/codelldb-full.vsix -d ${CMAKE_CURRENT_BINARY_DIR}/extracted
    COMMAND ${UpdateFile} ${CMAKE_CURRENT_BINARY_DIR}/extension/*.map ${CMAKE_CURRENT_BINARY_DIR}/extracted/extension/extension
)

# Debuggee

if (NOT ${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee)
    execute_process(
        COMMAND ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR}/debuggee -G ""${CMAKE_GENERATOR}""
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee
    )
    add_custom_target(debuggee
        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/debuggee
    )
else()
    # On Windows we want to check both MSVC PDB and GNU DWARF debug info kinds.
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee-msvc)
    execute_process(
        COMMAND ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR}/debuggee -G ""${CMAKE_GENERATOR}"" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee-msvc
    )
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee-gnu)
    execute_process(
        COMMAND ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR}/debuggee -G ""${CMAKE_GENERATOR}"" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/debuggee-gnu
    )
    add_custom_target(debuggee
        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/debuggee-msvc
        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/debuggee-gnu
    )
endif()

# Tests

set(MochaTest ${NPM} run mocha --
    -u tdd --timeout 30000 --exit
    --require source-map-support/register
    #-g ""rust_variables""
    ${CMAKE_BINARY_DIR}/tests.js
)

# Build everything for testing
add_dependencies(tests codelldb debuggee)

# Tests and test targets

if (${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
    set(TestTriples x86_64-pc-windows-gnu x86_64-pc-windows-msvc)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL ""Darwin"")
    set(TestTriples x86_64-apple-darwin)
else()
    set(TestTriples x86_64-unknown-linux-gnu)
endif()

foreach(TestTriple ${TestTriples})
    set(TestName adapter:${TestTriple})
    add_test(NAME ${TestName}
        COMMAND ${WithEnv} TARGET_TRIPLE=${TestTriple} NODE_PATH=${CMAKE_BINARY_DIR} BUILD_DIR=${CMAKE_BINARY_DIR} SOURCE_DIR=${CMAKE_SOURCE_DIR} ${MochaTest}
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
    set_property(TEST ${TestName} PROPERTY RUN_SERIAL TRUE)
endforeach(TestTriple)

add_custom_target(check
    DEPENDS tests cargo_test
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
)

# Install

install(CODE ""file(REMOVE_RECURSE \""${CMAKE_INSTALL_PREFIX}/codelldb\"")"")
install(
    DIRECTORY ${ExtensionRoot}
    DESTINATION .
)

# XtraClean

add_custom_target(xclean
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory CMakeFiles
    COMMAND ${CMAKE_COMMAND} -E remove_directory adapter2
    COMMAND ${CMAKE_COMMAND} -E remove_directory debuggee
    COMMAND ${CMAKE_COMMAND} -E remove_directory extension
    COMMAND ${CMAKE_COMMAND} -E remove_directory lldb
    COMMAND ${CMAKE_COMMAND} -E remove_directory node_modules
    COMMAND ${CMAKE_COMMAND} -E remove_directory target
    COMMAND ${CMAKE_COMMAND} -E remove_directory tests
    COMMAND ${CMAKE_COMMAND} -E remove_directory tmp
    COMMAND ${CMAKE_COMMAND} ..
)
",3.10,3.1
34520,real-logic,Aeron,False,False,False,False,False,73,Java,2020-05-17 02:53:51+00:00,2014-02-07 17:16:58+00:00,5023,12462,"#
# Copyright 2014-2020 Real Logic Limited.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)
cmake_policy(VERSION 3.1.3)

file(STRINGS version.txt AERON_VERSION_TXT LIMIT_COUNT 1 REGEX ""^[0-9]+(\\.[0-9]+)+"")
string(REGEX REPLACE ""^([0-9]+(\\.[0-9]+)+).*$"" ""\\1"" AERON_VERSION_FROM_FILE ""${AERON_VERSION_TXT}"")

if (${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
    message(FATAL_ERROR ""In-source builds not allowed. Please make a new directory (called a build directory)""
        ""and run CMake from there. You may need to remove CMakeCache.txt."")
endif ()

if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    set(STANDALONE_BUILD TRUE)
endif ()

option(BUILD_AERON_DRIVER ""Build Aeron driver"" ON)
option(BUILD_AERON_ARCHIVE_API ""Build Aeron Archive API"" OFF)

option(C_WARNINGS_AS_ERRORS ""Enable warnings as errors for C"" OFF)
option(CXX_WARNINGS_AS_ERRORS ""Enable warnings as errors for C++"" OFF)
option(SANITISE_BUILD ""Enable sanitise options"" OFF)
option(COVERAGE_BUILD ""Enable code coverage"" OFF)
option(AERON_TESTS ""Enable tests"" ${STANDALONE_BUILD})
option(AERON_SYSTEM_TESTS ""Enable system tests"" ${STANDALONE_BUILD})
option(AERON_SLOW_SYSTEM_TESTS ""Enable slow system tests"" OFF)
option(AERON_BUILD_SAMPLES ""Enable building the sample projects"" ${STANDALONE_BUILD})
option(LINK_SAMPLES_CLIENT_SHARED ""Enable shared linking for sample projects"" OFF)
option(AERON_BUILD_DOCUMENTATION ""Build Aeron documentation"" ${STANDALONE_BUILD})
option(AERON_INSTALL_TARGETS ""Enable installation step"" ${STANDALONE_BUILD})
if (UNIX)
    option(AERON_ENABLE_NONSTANDARD_OPTIMIZATIONS ""Enable Ofast for release builds"" ${STANDALONE_BUILD})
endif ()

unset(STANDALONE_BUILD)

include(ExternalProject)

project(""aeron"" VERSION ""${AERON_VERSION_FROM_FILE}"")

if (AERON_TESTS)
    enable_testing()
    include(CTest)
endif ()

# default built type is Release
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build"" FORCE)
endif (NOT CMAKE_BUILD_TYPE)

set(AERON_THIRDPARTY_BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/thirdparty"")

##########################################################
# gmock usage

if (AERON_TESTS)
    ExternalProject_Add(
        gmock
        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/googletest-release-1.10.0.zip
        URL_MD5 82358affdd7ab94854c8ee73a180fc53
        PREFIX ""${AERON_THIRDPARTY_BINARY_DIR}/gmock""
        CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};-DCMAKE_CXX_FLAGS=-D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING
        BUILD_BYPRODUCTS ""${AERON_THIRDPARTY_BINARY_DIR}/gmock/src/gmock-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX};${AERON_THIRDPARTY_BINARY_DIR}/gmock/src/gmock-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock_main${CMAKE_STATIC_LIBRARY_SUFFIX}""
        INSTALL_COMMAND """"
    )

    ExternalProject_Get_Property(gmock source_dir)
    set(GMOCK_SOURCE_DIR ${source_dir})
    ExternalProject_Get_Property(gmock binary_dir)
    set(GMOCK_BINARY_DIR ${binary_dir})

    if (MSVC AND CMAKE_BUILD_TYPE STREQUAL ""Debug"")
        set(GMOCK_POSTFIX ""d"")
    else ()
        set(GMOCK_POSTFIX """")
    endif ()

    set(GMOCK_LIBS
        ${GMOCK_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${GMOCK_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${GMOCK_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${GMOCK_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${GMOCK_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest_main${GMOCK_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
    )
endif ()

##########################################################
# HdrHistogram usage - use MD5 as means to identify snapshot

if (AERON_BUILD_SAMPLES)
    ExternalProject_Add(
        hdr_histogram
        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/HdrHistogram_c-0.9.13.zip
        URL_MD5 75954aba7caf5d4bbdb70bcbcef15a8a
        CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};-DCMAKE_C_STANDARD=99;-DCMAKE_PREFIX_PATH=${CMAKE_CURRENT_BINARY_DIR}/zlib64
        PREFIX ""${AERON_THIRDPARTY_BINARY_DIR}/hdr_histogram""
        BUILD_BYPRODUCTS ""${AERON_THIRDPARTY_BINARY_DIR}/hdr_histogram/src/hdr_histogram-build/src/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}hdr_histogram_static${CMAKE_STATIC_LIBRARY_SUFFIX}""
        INSTALL_COMMAND """"
    )

    ExternalProject_Get_Property(hdr_histogram source_dir)
    set(HDRHISTOGRAM_SOURCE_DIR ${source_dir})
    ExternalProject_Get_Property(hdr_histogram binary_dir)
    set(HDRHISTOGRAM_BINARY_DIR ${binary_dir})

    set(HDRHISTOGRAM_LIBS
        ${HDRHISTOGRAM_BINARY_DIR}/src/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}hdr_histogram_static${CMAKE_STATIC_LIBRARY_SUFFIX}
    )
endif ()

unset(AERON_THIRDPARTY_BINARY_DIR)

##########################################################
# Platform flags, etc.

find_package(Threads)

##########################################################
# Doxygen for generating doc

if (AERON_BUILD_DOCUMENTATION)
    find_package(Doxygen)
endif ()

if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_CXX_EXTENSIONS)
    set(CMAKE_CXX_EXTENSIONS OFF)
endif ()

if (NOT DEFINED CMAKE_C_STANDARD)
    set(CMAKE_C_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_C_EXTENSIONS)
    set(CMAKE_C_EXTENSIONS OFF)
endif ()

add_definitions(-DAERON_VERSION_TXT=""${AERON_VERSION_TXT}"")
add_definitions(-DAERON_VERSION_MAJOR=${aeron_VERSION_MAJOR})
add_definitions(-DAERON_VERSION_MINOR=${aeron_VERSION_MINOR})
add_definitions(-DAERON_VERSION_PATCH=${aeron_VERSION_PATCH})

# all UNIX-based platform compiler flags
if (UNIX)
    add_compile_options(-Wall -Wpedantic -Wextra -Wno-unused-parameter)

    if (C_WARNINGS_AS_ERRORS)
        add_compile_options($<$<COMPILE_LANGUAGE:C>:-Werror>)
    endif (C_WARNINGS_AS_ERRORS)

    if (CXX_WARNINGS_AS_ERRORS)
        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Werror>)
    endif (CXX_WARNINGS_AS_ERRORS)

    if (SANITISE_BUILD)
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fsanitize=leak -fsanitize=undefined"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=leak -fsanitize=undefined"")
    endif (SANITISE_BUILD)

    if (COVERAGE_BUILD)
        add_compile_options(-O0 -fno-inline --coverage -g)
        SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} --coverage"")
    endif (COVERAGE_BUILD)

    if (AERON_ENABLE_NONSTANDARD_OPTIMIZATIONS)
        add_compile_options($<$<CONFIG:Release>:-Ofast>)
    endif ()
endif ()

# platform specific flags
if (APPLE)
    add_compile_options(-Wsign-compare)
    add_definitions(-DDarwin)
    add_compile_options(-Wno-deprecated-register)
elseif (CYGWIN)
    add_definitions(-DWIN32)
    if (AERON_TESTS)
        add_definitions(-DGTEST_HAS_PTHREAD)
    endif ()
    set(CMAKE_CXX_EXTENSIONS ON)
elseif (MSVC)
    add_definitions(-DWIN32)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)
    add_definitions(-DNOMINMAX)

    if (${MSVC_VERSION} GREATER_EQUAL 1915)
        # Acknowledge that we understand MSVC resolved a byte alignment issue in this compiler
        add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)
    endif ()

    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd /Od /Zi /MP"")
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT /MP"")

    if (C_WARNINGS_AS_ERRORS)
        add_compile_options($<$<COMPILE_LANGUAGE:C>:/WX>)
    endif (C_WARNINGS_AS_ERRORS)

    if (CXX_WARNINGS_AS_ERRORS)
        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/WX>)
    endif (CXX_WARNINGS_AS_ERRORS)
endif ()


##########################################################
# Project variables, etc.

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/binaries"")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/lib"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/lib"")

if (AERON_BUILD_SAMPLES)
    set(AERON_SAMPLES_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-samples/src/main/cpp"")
endif ()

set(AERON_CLIENT_SOURCE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/main/cpp"")

set(AERON_C_CLIENT_SOURCE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/main/c"")

set(AERON_DRIVER_SOURCE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-driver/src/main/c"")

set(AERON_ARCHIVE_SOURCE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/cpp"")

if (AERON_TESTS)
    set(AERON_CLIENT_TEST_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/test/cpp"")
    set(AERON_DRIVER_TEST_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-driver/src/test/c"")
    set(AERON_C_CLIENT_TEST_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/test/c"")
    set(AERON_ARCHIVE_TEST_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/test/cpp"")
    set(AERON_SYSTEM_TEST_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-system-tests"")

    # gmock - includes gtest
    include_directories(${GMOCK_SOURCE_DIR}/googletest/include)
    include_directories(${GMOCK_SOURCE_DIR}/googlemock/include)
endif ()

if (AERON_BUILD_SAMPLES)
    # hdr_histogram
    include_directories(${HDRHISTOGRAM_SOURCE_DIR}/src)
endif ()

##########################################################

add_definitions(-D_FILE_OFFSET_BITS=64)

add_subdirectory(${AERON_C_CLIENT_SOURCE_PATH})

add_subdirectory(${AERON_CLIENT_SOURCE_PATH})
if (AERON_TESTS)
    add_subdirectory(${AERON_CLIENT_TEST_PATH})
    add_subdirectory(${AERON_C_CLIENT_TEST_PATH})
endif ()
if (AERON_BUILD_SAMPLES)
    add_subdirectory(${AERON_SAMPLES_PATH})
endif ()

if (BUILD_AERON_DRIVER)
    add_subdirectory(${AERON_DRIVER_SOURCE_PATH})
    if (AERON_TESTS)
        add_subdirectory(${AERON_DRIVER_TEST_PATH})
        add_subdirectory(${AERON_SYSTEM_TEST_PATH})
    endif ()
endif (BUILD_AERON_DRIVER)

if (BUILD_AERON_ARCHIVE_API)
    set(ARCHIVE_CODEC_TARGET_DIR ""${CMAKE_CURRENT_BINARY_DIR}/generated"")
    set(ARCHIVE_CODEC_SCHEMA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/resources/archive"")
    set(ARCHIVE_CODEC_WORKING_DIR ""${CMAKE_CURRENT_SOURCE_DIR}"")

    add_subdirectory(${AERON_ARCHIVE_SOURCE_PATH})
    set(AERON_ALL_JAR ""${CMAKE_CURRENT_SOURCE_DIR}/aeron-all/build/libs/aeron-all-${AERON_VERSION_TXT}.jar"")

    file(GLOB_RECURSE AERON_ALL_SOURCES
        ""${CMAKE_CURRENT_SOURCE_DIR}}/aeron-archive/src/main/java/*.java"")

    add_custom_command(OUTPUT ${AERON_ALL_JAR}
        COMMAND ./gradlew :aeron-all:clean :aeron-all:assemble --no-parallel -x javadoc
        DEPENDS ${AERON_ALL_SOURCES}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT ""Generating aeron-all jar"")

    add_custom_target(aeron-all-jar
        DEPENDS ${AERON_ALL_JAR})

    if (AERON_TESTS)
        add_subdirectory(${AERON_ARCHIVE_TEST_PATH})
    endif ()
endif (BUILD_AERON_ARCHIVE_API)
##########################################################
# doc target

if (AERON_BUILD_DOCUMENTATION AND DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)

    add_custom_target(
        doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )

    if (AERON_INSTALL_TARGETS)
        # install the doc if it has been built
        install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc DESTINATION share OPTIONAL)
    endif ()
endif ()

##########################################################
# package target

set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_PACKAGE_VERSION_MAJOR ""${aeron_VERSION_MAJOR}"")
set(CPACK_PACKAGE_VERSION_MINOR ""${aeron_VERSION_MINOR}"")
set(CPACK_PACKAGE_VERSION_PATCH ""${aeron_VERSION_PATCH}"")

set(CPACK_GENERATOR ""TGZ;STGZ"")
include(CPack)
",3.1.3,3.1
34648,Hiroyuki-Nagata,opennask,False,False,False,False,False,2,C,2019-01-16 14:31:42+00:00,2016-05-10 21:40:24+00:00,13,458,"message(STATUS ""Entering directory ."")
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
enable_testing()
project(root CXX)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake"")
project(root)

set(WINE ""/usr/bin/wine"" CACHE INTERNAL """")
set(WINE_NASK ""~/.wine/drive_c/MinGW/msys/1.0/bin/nask.exe"" CACHE INTERNAL """")
set(OD ""od"" CACHE INTERNAL """")
set(QEMU ""qemu-system-i386"" CACHE INTERNAL """")
set(QEMUOPT ""-m"" ""32"" ""-localtime"" ""-vga"" ""std"" ""-fda"" CACHE INTERNAL """")
set(QEMU_DEBUG_OPT ""-redir"" ""tcp:5555:127.0.0.1:1234"" ""&"" CACHE INTERNAL """")
set(BINOPT ""-fleading-underscore"" ""-m32"" ""-nostdlib"" ""-fno-pie"" ""-Wl,--oformat=binary"" CACHE INTERNAL """")

add_subdirectory(parasol)
add_subdirectory(objconv)
add_subdirectory(src)
add_subdirectory(golibc)
add_subdirectory(projects)

#-----------------------------------------------------------------------
# Checks for CppUTest
#
OPTION(USE_CPPUTEST ""Enable feature to test with cpputest (Dev)"" ON)
if (USE_CPPUTEST)
  add_definitions(-DUSE_CPPUTEST)
  add_subdirectory(test)
  add_subdirectory(data)
endif(USE_CPPUTEST)
",3.1.0,3.1
34889,siegelaaron94,sigma-five-engine,False,False,False,False,False,2,C++,2019-09-02 04:28:52+00:00,2015-12-30 05:08:23+00:00,4,580,"cmake_minimum_required(VERSION 3.10)
project(sigma-core)

add_library(sigma-core STATIC
	include/sigma/AABB.hpp
	include/sigma/buddy_array_allocator.hpp
	include/sigma/config.hpp
	include/sigma/context.hpp
	include/sigma/frustum.hpp
	include/sigma/game.hpp
	include/sigma/graphics/buffer.hpp
	include/sigma/graphics/cubemap.hpp
	include/sigma/graphics/directional_light.hpp
	include/sigma/graphics/material.hpp
	include/sigma/graphics/render_queue.hpp
	include/sigma/graphics/point_light.hpp
	include/sigma/graphics/post_process_effect.hpp
	include/sigma/graphics/renderer.hpp
	include/sigma/graphics/shader.hpp
	include/sigma/graphics/shadow_block.hpp
	include/sigma/graphics/spot_light.hpp
	include/sigma/graphics/standard_block.hpp
	include/sigma/graphics/static_mesh_instance.hpp
	include/sigma/graphics/static_mesh.hpp
	include/sigma/graphics/technique.hpp
	include/sigma/graphics/texture.hpp
	include/sigma/resource/cache.hpp
	include/sigma/resource/resource.hpp
	include/sigma/trackball_controller.hpp
	include/sigma/transform.hpp
	include/sigma/util/filesystem.hpp
	include/sigma/util/glm_serialize.hpp
	include/sigma/util/hash.hpp
	include/sigma/util/numeric.hpp
	include/sigma/util/std140_conversion.hpp
	include/sigma/util/string.hpp
	include/sigma/util/type_sequence.hpp
	include/sigma/util/variadic.hpp
	include/sigma/window.hpp
	src/sigma/buddy_array_allocator.cpp
	src/sigma/context.cpp
	src/sigma/frustum.cpp
	src/sigma/game.cpp
	src/sigma/graphics/buffer.cpp
	src/sigma/graphics/material.cpp
	src/sigma/graphics/render_queue.cpp
	src/sigma/graphics/renderer.cpp
	src/sigma/graphics/shader.cpp
	src/sigma/graphics/static_mesh.cpp
	src/sigma/graphics/texture.cpp
	src/sigma/resource/cache.cpp
	src/sigma/resource/resource.cpp
	src/sigma/trackball_controller.cpp
	src/sigma/util/filesystem.cpp
	src/sigma/window.cpp
)

target_include_directories(sigma-core PUBLIC include)
target_compile_definitions(sigma-core PUBLIC -DCEREAL_FUTURE_EXPERIMENTAL -DGLM_ENABLE_EXPERIMENTAL -DGLM_FORCE_CTOR_INIT PRIVATE -DSIGMA_EXPORT)
target_link_libraries(sigma-core PUBLIC ${CMAKE_DL_LIBS} Threads::Threads cereal::cereal glm)

if(COTIRE_CMAKE_MODULE_VERSION)
	cotire(sigma-core)
endif()

if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
	target_link_libraries(sigma-core PUBLIC c++experimental)
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
	target_link_libraries(sigma-core PUBLIC stdc++fs)
endif()

add_subdirectory(test)
add_subdirectory(benchmark)
",3.10,3.1
34948,erikd,libsamplerate,False,False,False,False,False,20,C,2020-05-01 01:54:21+00:00,2014-11-30 11:34:03+00:00,202,481,"cmake_minimum_required(VERSION 3.1)
project(libsamplerate VERSION 0.1.9 LANGUAGES C)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(IS_ROOT_PROJECT ON)
else()
    set(IS_ROOT_PROJECT OFF)
endif()

option(LIBSAMPLERATE_TESTS ""Enable to generate test targets"" ${IS_ROOT_PROJECT})
option(LIBSAMPLERATE_EXAMPLES ""Enable to generate examples"" ${IS_ROOT_PROJECT})
option(LIBSAMPLERATE_INSTALL ""Enable to add install directives"" ${IS_ROOT_PROJECT})

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED TRUE)

include(TestBigEndian)
include(CheckFunctionExists)
include(CheckIncludeFiles)
include(CheckSymbolExists)
include(ClipMode)
add_definitions(-DHAVE_CONFIG_H)

set(SAMPLERATE_SRC
	${PROJECT_SOURCE_DIR}/src/samplerate.c
	${PROJECT_SOURCE_DIR}/src/src_linear.c
	${PROJECT_SOURCE_DIR}/src/src_sinc.c
	${PROJECT_SOURCE_DIR}/src/src_zoh.c)

if(WIN32)
	set(OS_IS_WIN32 TRUE)
	set(SAMPLERATE_SRC
		${SAMPLERATE_SRC}
		${PROJECT_SOURCE_DIR}/Win32/libsamplerate-0.def)
	include_directories(Win32)
endif()

if(CMAKE_C_COMPILER_ID STREQUAL ""GNU"" OR CMAKE_C_COMPILER_ID MATCHES ""Clang"")
  option(LIBSAMPLERATE_ENABLE_SANITIZERS ""Enable ASAN and UBSAN"" OFF)

  if(LIBSAMPLERATE_ENABLE_SANITIZERS)
    # Use ASAN and UBSAN, make it fail on any error, improve stack traces
    set(sanitizer_flags -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer)

    add_compile_options(${sanitizer_flags})
    string(REPLACE "";"" "" "" sanitizer_flags ""${sanitizer_flags}"")
    string(APPEND CMAKE_EXE_LINKER_FLAGS "" ${sanitizer_flags}"")
    string(APPEND CMAKE_MODULE_LINKER_FLAGS "" ${sanitizer_flags}"")
    string(APPEND CMAKE_SHARED_LINKER_FLAGS "" ${sanitizer_flags}"")
  endif()
endif()

test_big_endian(CPU_IS_BIG_ENDIAN)
if(CPU_IS_BIG_ENDIAN)
	set(CPU_IS_LITTLE_ENDIAN 0)
else()
	set(CPU_IS_LITTLE_ENDIAN 1)
endif()

find_library(LIBSAMPLERATE_MATH_LIBRARY m)

# This will set CPU_CLIPS_NEGATIVE and CPU_CLIPS_POSITIVE
clip_mode()

check_function_exists(alarm HAVE_ALARM)
check_function_exists(signal HAVE_SIGNAL)

check_include_files(sys/times.h HAVE_SYS_TIMES_H)

check_symbol_exists(SIGALRM signal.h HAVE_SIGALRM)

find_package(ALSA)
set(HAVE_ALSA ${ALSA_FOUND})
if(ALSA_FOUND)
  include_directories(""${ALSA_INCLUDE_DIR}"")
endif()

find_package(Sndfile)
set(HAVE_SNDFILE ${SNDFILE_FOUND})
if(SNDFILE_FOUND)
  include_directories(""${SNDFILE_INCLUDE_DIR}"")
endif()

find_package(FFTW)
set(HAVE_FFTW3 ${FFTW_FOUND})
if(FFTW_FOUND)
  include_directories(""${FFTW_INCLUDE_DIR}"")
endif()

configure_file(${PROJECT_SOURCE_DIR}/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)

add_library(samplerate ${SAMPLERATE_SRC})

if(BUILD_SHARED_LIBS AND WIN32)
	if (MSVC)
		set_target_properties(samplerate PROPERTIES OUTPUT_NAME ""libsamplerate-0"")
	else()
		set_target_properties(samplerate PROPERTIES OUTPUT_NAME ""samplerate-0"")
	endif()
endif()

target_include_directories(samplerate PUBLIC
	${PROJECT_SOURCE_DIR}/src
  ${CMAKE_CURRENT_BINARY_DIR})

if(LIBSAMPLERATE_MATH_LIBRARY)
    target_link_libraries(samplerate PUBLIC ${LIBSAMPLERATE_MATH_LIBRARY})
endif()
    
if(LIBSAMPLERATE_TESTS)

	enable_testing()

	file(GLOB TEST_SRCS ${PROJECT_SOURCE_DIR}/tests/*_test.c)

	foreach(testSrc ${TEST_SRCS})
		get_filename_component(testName ${testSrc} NAME_WE)
		add_executable(${testName}
			${testSrc}
			${PROJECT_SOURCE_DIR}/tests/util.c
			${PROJECT_SOURCE_DIR}/tests/calc_snr.c)
	target_link_libraries(${testName} PUBLIC samplerate)
		if(FFTW_FOUND)
			target_link_libraries(${testName} PUBLIC ${FFTW_LIBRARY})
		endif()
		add_test(NAME ${testName} COMMAND ${testName})
	endforeach(testSrc)
endif()

if(LIBSAMPLERATE_EXAMPLES)
	set(EXAMPLE_SRCS
		${PROJECT_SOURCE_DIR}/examples/timewarp-file.c
		${PROJECT_SOURCE_DIR}/examples/varispeed-play.c)

	foreach(exampleSrc ${EXAMPLE_SRCS})
		get_filename_component(exampleName ${exampleSrc} NAME_WE)
		add_executable(${exampleName}
			${exampleSrc}
			${PROJECT_SOURCE_DIR}/examples/audio_out.c)
	target_link_libraries(${exampleName} PUBLIC samplerate)
		if(ALSA_FOUND)
			target_link_libraries(${exampleName} PUBLIC ${ALSA_LIBRARY})
		endif()
		if(SNDFILE_FOUND)
			target_link_libraries(${exampleName} PUBLIC ${SNDFILE_LIBRARY})
		endif()
		if(WIN32)
			target_link_libraries(${exampleName} PUBLIC winmm)
		endif()
		if (APPLE)
			target_link_libraries (${exampleName} PUBLIC  ""-framework CoreAudio"")
		endif()
	endforeach(exampleSrc)
endif() 

if(LIBSAMPLERATE_INSTALL)
	set(prefix ${CMAKE_INSTALL_PREFIX})
	set(exec_prefix ""\${prefix}"")
	set(includedir ""\${prefix}/include"")
	set(libdir ""\${exec_prefix}/lib"")
	set(VERSION ""${PROJECT_VERSION}"")
	if(LIBSAMPLERATE_MATH_LIBRARY)
		set(LIBS ""-lm"")
	endif()
	configure_file(samplerate.pc.in samplerate.pc @ONLY)

	install(TARGETS samplerate DESTINATION lib)
	install(FILES src/samplerate.h DESTINATION include)
	install(DIRECTORY doc/ DESTINATION share/doc/libsamplerate)
	install(FILES ${CMAKE_BINARY_DIR}/samplerate.pc DESTINATION lib/pkgconfig)
endif()
",3.1,3.1
35349,gadomski,cpd,False,False,False,False,False,6,C++,2020-02-05 13:11:06+00:00,2014-10-09 18:38:29+00:00,214,431,"cmake_minimum_required(VERSION 3.1)
set(CPD_LANGUAGES CXX)
set(CPD_VERSION 0.5.1)
set(CPD_SOVERSION 0)


# Policies
if(POLICY CMP0048) # Project version
    cmake_policy(SET CMP0048 NEW)
    project(cpd LANGUAGES ${CPD_LANGUAGES} VERSION ${CPD_VERSION})
else()
    project(cpd ${CPD_LANGUAGES})
endif()

if(POLICY CMP0042) # MACOSX_RPATH
    cmake_policy(SET CMP0042 NEW)
endif()

if(POLICY CMP0054) # Quoted variables in if statements
    cmake_policy(SET CMP0054 NEW)
endif()


# Upstream
set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
find_package(Eigen3 REQUIRED)
find_package(Fgt QUIET)
option(WITH_FGT ""Build with fgt"" ${Fgt_FOUND})
if(WITH_FGT)
    find_package(Fgt REQUIRED)
endif()


# Configuration
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
    option(BUILD_SHARED_LIBS ""Build shared libraries"" OFF)
else()
    option(BUILD_SHARED_LIBS ""Build shared libraries"" ON)
endif()

include(CMakePackageConfigHelpers)
write_basic_package_version_file(""${PROJECT_BINARY_DIR}/cmake/cpd-config-version.cmake"" VERSION ${CPD_VERSION} COMPATIBILITY AnyNewerVersion)
configure_file(cmake/cpd-config.cmake.in ""${PROJECT_BINARY_DIR}/cmake/cpd-config.cmake"" @ONLY)
install(FILES ""${PROJECT_BINARY_DIR}/cmake/cpd-config.cmake"" ""${PROJECT_BINARY_DIR}/cmake/cpd-config-version.cmake"" DESTINATION lib/cmake/cpd)
configure_file(src/version.cpp.in ""${PROJECT_BINARY_DIR}/src/version.cpp"")


# C++ library
set(library-src
    src/affine.cpp
    src/gauss_transform.cpp
    src/matrix.cpp
    src/nonrigid.cpp
    src/normalization.cpp
    src/rigid.cpp
    src/transform.cpp
    src/utils.cpp
    ""${PROJECT_BINARY_DIR}/src/version.cpp""
    )
if(WITH_FGT)
    list(APPEND library-src src/gauss_transform_fgt.cpp)
else()
    list(APPEND library-src src/gauss_transform_make_default.cpp)
endif()

add_library(Library-C++ ${library-src})
set_target_properties(Library-C++ PROPERTIES
    OUTPUT_NAME cpd
    VERSION ${CPD_VERSION}
    SOVERSION ${CPD_SOVERSION}
    )
target_include_directories(Library-C++
    PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
    ${EIGEN3_INCLUDE_DIR}
    )
target_compile_options(Library-C++ PUBLIC -std=c++11)
if(WITH_FGT)
    target_link_libraries(Library-C++ PUBLIC Fgt::Library-C++)
    target_compile_definitions(Library-C++ PUBLIC CPD_WITH_FGT)
endif()

option(WITH_STRICT_WARNINGS ""Build with stricter warnings"" ON)
if(WITH_STRICT_WARNINGS)
    if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
        target_compile_options(Library-C++ PRIVATE -Wall -pedantic -Wno-gnu-zero-variadic-macro-arguments)
    endif()
endif()


# Tests
option(WITH_TESTS ""Build test suite"" ON)
if(WITH_TESTS)
    enable_testing()
    add_subdirectory(""${PROJECT_SOURCE_DIR}/vendor/googletest-release-1.8.1/googletest"")
    add_subdirectory(tests)
endif()


# Install
install(TARGETS Library-C++ DESTINATION lib EXPORT cpd-targets)
install(DIRECTORY include/cpd DESTINATION include)
install(EXPORT cpd-targets NAMESPACE Cpd:: DESTINATION lib/cmake/cpd)


# Docs
find_package(Doxygen QUIET)
option(WITH_DOCS ""Add documentation target"" ${Doxygen_FOUND})
if(WITH_DOCS)
    find_package(Doxygen REQUIRED)
    configure_file(docs/Doxyfile.in ""${PROJECT_BINARY_DIR}/docs/Doxyfile"")
    add_custom_target(doc COMMAND ${DOXYGEN_EXECUTABLE} ""${PROJECT_BINARY_DIR}/docs/Doxyfile"")
endif()


# Components
find_package(jsoncpp QUIET)
option(WITH_JSONCPP ""Build with jsoncpp"" ${jsoncpp_FOUND})
if(WITH_JSONCPP)
    find_package(jsoncpp REQUIRED)
    add_subdirectory(components/jsoncpp)
endif()
",3.1,3.1
35513,s0vereign,QonGPU,False,False,False,False,False,4,C++,2019-01-15 01:41:39+00:00,2016-03-15 08:40:43+00:00,4,213,"cmake_minimum_required(VERSION 3.10)
project(QonGPU)

set(CMAKE_CXX_STANDARD 14)

include_directories(src/QonGPU/include)
include_directories(src/QonGPU/include/dynamic)
include_directories(src/QonGPU/include/output)
include_directories(src/QonGPU/include/params)
include_directories(src/QonGPU/include/potentials)
include_directories(src/QonGPU/include/static)

add_executable(QonGPU
        src/QonGPU/include/dynamic/CNKernels.h
        src/QonGPU/include/dynamic/ComplexOperators.h
        src/QonGPU/include/dynamic/CrankNicolson1D.cpp
        src/QonGPU/include/dynamic/CrankNicolson1D.hpp
        src/QonGPU/include/dynamic/cusparse_ops.hxx
        src/QonGPU/include/dynamic/MatrixGeneration.h
        src/QonGPU/include/dynamic/MemFunctors.h
        src/QonGPU/include/dynamic/spike_kernel.hxx
        src/QonGPU/include/dynamic/ThomasSerial.h
        src/QonGPU/include/dynamic/TimeOperator.hpp
        src/QonGPU/include/dynamic/TimeOperator1D.hpp
        src/QonGPU/include/dynamic/TimeOperator2D.hpp
        src/QonGPU/include/dynamic/TimeOperator3D.hpp
        src/QonGPU/include/dynamic/TridiagMult.h
        src/QonGPU/include/output/IOHandle.hpp
        src/QonGPU/include/output/IOHandle1D.cpp
        src/QonGPU/include/output/IOHandle1D.h
        src/QonGPU/include/params/Params.hpp
        src/QonGPU/include/params/Params1D.hpp
        src/QonGPU/include/params/Params2D.hpp
        src/QonGPU/include/params/Params3D.hpp
        src/QonGPU/include/potentials/Core1D.hpp
        src/QonGPU/include/potentials/Potential.hpp
        src/QonGPU/include/potentials/Potential1D.hpp
        src/QonGPU/include/potentials/Potential2D.hpp
        src/QonGPU/include/potentials/Potential3D.hpp
        src/QonGPU/include/static/Numerov.cpp
        src/QonGPU/include/static/Numerov.hpp
        src/QonGPU/include/static/Numerov1D.hpp
        src/QonGPU/include/static/StaticSolver.hpp
        src/QonGPU/include/static/StaticSolver1D.hpp
        src/QonGPU/include/static/StaticSolver2D.hpp
        src/QonGPU/include/static/StaticSolver3D.hpp
        src/QonGPU/include/AllHeader.hpp
        src/QonGPU/include/Domain.hpp
        src/QonGPU/include/SimDef.hpp
        CMakeLists.txt)
",3.10,3.1
35633,lreis2415,SEIMS,False,False,False,False,False,16,C++,2019-09-30 14:21:12+00:00,2016-12-07 01:31:52+00:00,15,4003,"# ----------------------------------------------------------------------------
#  Root CMake file for SEIMS.
#     Spatially Explicit Integrated Modeling System
#
#     Please from the off-tree build directory, invoke:
#       $ cmake <path/to/SEIMS>
#
#       Optional cmake options:
#         -DINSTALL_PREFIX=<path/to/install>
#         -DLLVM_ROOT_DIR Specific the root directory of brew installed LLVM, e.g., /usr/local/opt/llvm
#
#  Routine testing platforms and compilers include:
#     1. Windows 10 with Visual Studio 2010/2013/2015, MSMPI-v8.1, GDAL-1.11.4
#     2. Windows 10 with msys2/mingw64 (GCC-9.1.0), MSMPI-v8.1, GDAL-3.0
#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0
#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)
#     5. macOS 10.14.5 with Clang-10.0 with Xcode, OpenMPI-4.0.1, GDAL-2.4.2 (brew installed)
#
#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)
#  Latest updated: Jul. 21, 2019
#
#  Copyright (C) 2013-2019 Lreis, IGSNRR, CAS, and NJNU
# ----------------------------------------------------------------------------
### Disable in-source builds to prevent source tree corruption.
IF("" ${CMAKE_SOURCE_DIR}"" STREQUAL "" ${CMAKE_BINARY_DIR}"")
    MESSAGE(FATAL_ERROR ""
FATAL: In-source builds are not allowed.
       You should create a separate directory for build files."")
ENDIF()
CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)

if(POLICY CMP0015)
    cmake_policy(SET CMP0015 NEW)
endif()
if(POLICY CMP0054)
    cmake_policy(SET CMP0054 NEW)
endif()
if(POLICY CMP0074)
    cmake_policy(SET CMP0074 NEW)
endif()

### Set coding language
PROJECT(SEIMS_ALL CXX C)
### SEIMS Version.
SET(PRJNAME ""SEIMS"")
### Build Postfix
SET(CMAKE_DEBUG_POSTFIX ""d"" CACHE STRING ""Default Debug postfix"")
SET(CMAKE_RELEASE_POSTFIX """" CACHE STRING ""Default Release postfix"")
SET(CMAKE_RELWITHDEBINFO_POSTFIX ""rd"" CACHE STRING ""Default RelWithDebInfo postfix"")
SET(CMAKE_MINSIZEREL_POSTFIX ""s"" CACHE STRING ""Default MinSizeRel postfix"")
IF (CMAKE_BUILD_TYPE MATCHES ""Release"")
  SET(CMAKE_BUILD_POSTFIX ""${CMAKE_RELEASE_POSTFIX}"")
ELSEIF (CMAKE_BUILD_TYPE MATCHES ""MinSizeRel"")
  SET(CMAKE_BUILD_POSTFIX ""${CMAKE_MINSIZEREL_POSTFIX}"")
ELSEIF(CMAKE_BUILD_TYPE MATCHES ""RelWithDebInfo"")
  SET(CMAKE_BUILD_POSTFIX ""${CMAKE_RELWITHDEBINFO_POSTFIX}"")
ELSEIF(CMAKE_BUILD_TYPE MATCHES ""Debug"")
  SET(CMAKE_BUILD_POSTFIX ""${CMAKE_DEBUG_POSTFIX}"")
ELSE()
  SET(CMAKE_BUILD_POSTFIX """")
ENDIF()

### Set cmake find path
set(CMAKE_MODULE_PATH
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake
        ${CMAKE_MODULE_PATH}
   )

# Global flag to cause add_library to create shared libraries if on, otherwise static library.
option(BUILD_SHARED_LIBS ""Build shared libraries (DLLs)."" OFF)
# libraries built with hunter link against the dynamic CRT on windows
option(BUILD_WITH_STATIC_CRT ""Build against dynamic CRT on windows."" ON)
# Build documatation by doxygen
option(SEIMS_BUILD_DOC ""Build SEIMS documentation."" OFF)

### Detect compiler and target platform architecture.
INCLUDE(Utils)
SET(ENABLE_CXX11 1)
INCLUDE(DetectCXXCompiler)
### Use statically or dynamically linked CRT? Default: dynamic
IF(MSVC)
    INCLUDE(CRTLinkage)
ENDIF(MSVC)

### Set default or specified installation directory.
IF (INSTALL_PREFIX)
    SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX} CACHE PATH ""Set specified install path"" FORCE)
ELSE()
    SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/bin CACHE PATH ""Set default install path"" FORCE)
ENDIF ()
SET(INSTALL_DIR ${CMAKE_INSTALL_PREFIX})
SET(DOC_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/doc"" CACHE PATH ""Path to the documentation"")

### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.
IF(CMAKE_GENERATOR MATCHES ""Makefiles|Ninja"" AND ""${CMAKE_BUILD_TYPE}"" STREQUAL """")
    SET(CMAKE_BUILD_TYPE Release)
ENDIF()

### Allow project folders in MSVC and Xcode.
IF(MSVC OR XCODE)
    SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
ENDIF()

### OS platform.
if (WIN32)
    add_definitions(-DWINDOWS)
    if (MSVC)
        add_definitions(-DMSVC)
    endif ()
elseif (APPLE)
    add_definitions(-DMACOSX)
else ()
    add_definitions(-DLINUX)
endif ()

### Assume built-in pthreads on macOS X
IF(APPLE)
    set(CMAKE_THREAD_LIBS_INIT ""-lpthread"")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
ENDIF()

### Break in case of popular CMake configuration mistakes.
IF(NOT CMAKE_SIZEOF_VOID_P GREATER 0)
    MESSAGE(FATAL_ERROR ""CMake fails to determine the bitness of the target platform.
  Please check your CMake and compiler installation."")
ENDIF()

### Add standard paths or specified paths for Find libraries and headers.
INCLUDE(AddFindPaths)

### Find MPI which is required
FIND_PACKAGE(MPI REQUIRED)
IF(MPI_FOUND)
  SET(WITH_MPI 1)
  SET(PRJNAME ${PRJNAME}_MPI)
  MESSAGE(STATUS ""Compiling with MPI..."")
ELSE()
  MESSAGE(FATAL_ERROR ""FATAL: Could not find MPI, which is required for TauDEM and SEIMS!"")
ENDIF()

### Find OMP which is optional
IF(XCODE)
  # To use OpenMP in Xcode built by CMake, the recommended way is to 
  #   install llvm by 'brew install llvm', which has builtin 'libomp'
  IF (NOT LLVM_ROOT_DIR)
    SET(LLVM_ROOT_DIR ""/usr/local/opt/llvm"")
  ENDIF ()
  FIND_PACKAGE(LLVM)
  IF(LLVM_FOUND)
    geo_include_directories(${LLVM_LIBRARY_DIRS}/clang/${LLVM_VERSION_BASE_STRING}/include)
	SET(OpenMP_CXX_FLAGS ""-fopenmp"")
    SET(OpenMP_C_FLAGS ""-fopenmp"")
	FIND_LIBRARY(OpenMP_LIBRARY
		NAMES ""omp""
		HINTS ${LLVM_LIBRARY_DIRS}) 
    SET(OPENMP_FOUND 1)
  ENDIF ()
ELSE ()  
  FIND_PACKAGE(OpenMP)
ENDIF ()
IF(OPENMP_FOUND)
  SET(WITH_OPENMP 1)
  ADD_DEFINITIONS(-DSUPPORT_OMP)
  SET(PRJNAME ${PRJNAME}_OMP)
  MESSAGE(STATUS ""Compiling with OpenMP..."")
ENDIF()
SET(PRJNAME ${PRJNAME}_ALL)
PROJECT(${PRJNAME})

### Find GDAL which is required.
FIND_PACKAGE(GDAL REQUIRED)
IF (GDAL_FOUND)
  SET(WITH_GDAL 1)
  ADD_DEFINITIONS(-DUSE_GDAL)
ELSE ()
  MESSAGE(FATAL_ERROR ""FATAL: Could not find GDAL!"")
ENDIF ()


### Set specific packages.
INCLUDE(SetFlagMPI)
INCLUDE(SetFlagOpenMP)
INCLUDE(SetFlagGDAL)

### Bson and MongoC.
IF(BSON_ROOT)
  SET(ENV{BSON_ROOT} ${BSON_ROOT})
  SET(ENV{BSON_DIR} ${BSON_ROOT})
  SET(ENV{BSON_ROOT_DIR} ${BSON_ROOT})
ENDIF()
IF(MONGOC_ROOT)
  SET(ENV{MONGOC_ROOT} ${MONGOC_ROOT})
  SET(ENV{MONGOC_DIR} ${MONGOC_ROOT})
  SET(ENV{MONGOC_ROOT_DIR} ${MONGOC_ROOT})
ENDIF()
INCLUDE(FindBson)
INCLUDE(FindMongoC)

### Add subdirectories.
ADD_SUBDIRECTORY(./seims)
# ADD_SUBDIRECTORY(./gui)  # TODO
IF(SEIMS_BUILD_DOC)
  ADD_SUBDIRECTORY(./doc)
  ADD_CUSTOM_TARGET(travis_doc)
  ADD_CUSTOM_COMMAND(TARGET travis_doc
                     COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/doc/travis-doxygen.sh)
ENDIF()

### Build platform.
STATUS("""")
STATUS(""  Platform:"")
IF(NOT CMAKE_VERSION VERSION_LESS 2.8.11 AND NOT BUILD_INFO_SKIP_TIMESTAMP)
    STRING(TIMESTAMP TIMESTAMP """" UTC)
    IF(TIMESTAMP)
        STATUS(""    Timestamp:""  ${TIMESTAMP})
    ENDIF()
ENDIF()
STATUS(""    Host:""               ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_VERSION} ${CMAKE_HOST_SYSTEM_PROCESSOR})
IF(CMAKE_CROSSCOMPILING)
    STATUS(""    Target:""         ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION} ${CMAKE_SYSTEM_PROCESSOR})
ENDIF()
STATUS(""    CMake:""              ${CMAKE_VERSION})
STATUS(""    CMake generator:""    ${CMAKE_GENERATOR})
STATUS(""    CMake build tool:""   ${CMAKE_BUILD_TOOL})
IF(MSVC)
    STATUS(""    MSVC:""           ${MSVC_VERSION})
ENDIF()
IF(CMAKE_GENERATOR MATCHES Xcode)
    STATUS(""    Xcode:""          ${XCODE_VERSION})
ENDIF()
IF(NOT CMAKE_GENERATOR MATCHES ""Xcode|Visual Studio"")
    STATUS(""    Configuration:""  ${CMAKE_BUILD_TYPE})
ENDIF()

### C/C++ options.
IF(CMAKE_CXX_COMPILER_VERSION)
    SET(GEO_COMPILER_STR ""${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1} (ver ${CMAKE_CXX_COMPILER_VERSION})"")
ELSE()
    SET(GEO_COMPILER_STR ""${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}"")
ENDIF()
STRING(STRIP ""${GEO_COMPILER_STR}"" GEO_COMPILER_STR)

STATUS("""")
STATUS(""  C/C++:"")
IF(ENABLE_CXX11 OR HAVE_CXX11)
    STATUS(""    C++11:"" HAVE_CXX11 THEN YES ELSE NO)
ENDIF()
STATUS(""    C++ Compiler:""           ${GEO_COMPILER_STR})
STATUS(""    C++ flags (Release):""    ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE})
STATUS(""    C++ flags (Debug):""      ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG})
STATUS(""    C Compiler:""             ${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1})
STATUS(""    C flags (Release):""      ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE})
STATUS(""    C flags (Debug):""        ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG})
IF(WIN32)
    STATUS(""    Linker flags (Release):"" ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
    STATUS(""    Linker flags (Debug):""   ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
ELSE()
    STATUS(""    Linker flags (Release):"" ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
    STATUS(""    Linker flags (Debug):""   ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
ENDIF()

### Dependencies.
STATUS("""")
STATUS(""    Use MPI:""     MPI_FOUND      THEN ""YES (LIB: ${MPI_LIBRARIES}, INC: ${MPI_INCLUDE_PATH})"" ELSE ""NO"")
STATUS(""    Use OpenMP:""  OPENMP_FOUND   THEN ""YES"" ELSE ""NO"")
STATUS(""    Use GDAL:""    GDAL_FOUND     THEN ""YES (LIB: ${GDAL_LIBRARIES}, INC: ${GDAL_INCLUDE_DIR})"" ELSE ""NO"")
STATUS(""    Use BSON:""    BSON_FOUND     THEN ""YES (LIB: ${BSON_LIBRARIES}, INC: ${BSON_INCLUDE_DIR})"" ELSE ""NO"")
STATUS(""    Use MongoC:""  MONGOC_FOUND   THEN ""YES (LIB: ${MONGOC_LIBRARIES}, INC: ${MONGOC_INCLUDE_DIR})"" ELSE ""NO"")

### Auxiliary.
STATUS("""")
STATUS(""  Install path:"" ${INSTALL_DIR})
STATUS("""")
",3.1,3.1
35678,xiongziliang,ZLMediaKit,False,False,False,False,False,8,C++,2020-05-17 11:10:16+00:00,2017-04-01 08:30:25+00:00,1298,1694,"project(ZLMediaKit)
cmake_minimum_required(VERSION 3.1.3)
#使能c++11
set(CMAKE_CXX_STANDARD 11)
#加载自定义模块
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

#set(CMAKE_BUILD_TYPE ""Release"")

if(${CMAKE_BUILD_TYPE} MATCHES ""Release"")
    message(STATUS ""Release版本"")
    set(BuildType ""Release"")
else()
    set(BuildType ""Debug"")
    message(STATUS ""Debug版本"")
endif()

#设置bin和lib库目录
set(RELEASE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/release)
if (CMAKE_SYSTEM_NAME MATCHES ""Linux"")
    SET(LIBRARY_OUTPUT_PATH ${RELEASE_DIR}/linux/${BuildType})
    SET(EXECUTABLE_OUTPUT_PATH ${RELEASE_DIR}/linux/${BuildType})
    add_compile_options(-fPIC)
elseif (CMAKE_SYSTEM_NAME MATCHES ""Windows"")
    SET(LIBRARY_OUTPUT_PATH ${RELEASE_DIR}/windows/${BuildType})
    SET(EXECUTABLE_OUTPUT_PATH ${RELEASE_DIR}/windows/${BuildType})
elseif (CMAKE_SYSTEM_NAME MATCHES ""Darwin"")
    SET(LIBRARY_OUTPUT_PATH ${RELEASE_DIR}/mac/${BuildType})
    SET(EXECUTABLE_OUTPUT_PATH ${RELEASE_DIR}/mac/${BuildType})
endif ()

LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

#设置工程源码根目录
set(ToolKit_Root ${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/ZLToolKit/src)
set(MediaKit_Root ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(MediaServer_Root ${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/media-server)

#设置头文件目录
INCLUDE_DIRECTORIES(${ToolKit_Root})
INCLUDE_DIRECTORIES(${MediaKit_Root})

set(ENABLE_HLS true)
set(ENABLE_OPENSSL true)
set(ENABLE_MYSQL false)
set(ENABLE_FAAC false)
set(ENABLE_X264 false)
set(ENABLE_MP4 true)
set(ENABLE_RTPPROXY true)

set(LINK_LIB_LIST zlmediakit zltoolkit)

#查找openssl是否安装
find_package(OpenSSL QUIET)
if (OPENSSL_FOUND AND ENABLE_OPENSSL)
    message(STATUS ""found library:${OPENSSL_LIBRARIES},ENABLE_OPENSSL defined"")
    include_directories(${OPENSSL_INCLUDE_DIR})
    add_definitions(-DENABLE_OPENSSL)
    list(APPEND LINK_LIB_LIST ${OPENSSL_LIBRARIES})
endif ()

#查找mysql是否安装
find_package(MYSQL QUIET)
if (MYSQL_FOUND AND ENABLE_MYSQL)
    message(STATUS ""found library:${MYSQL_LIBRARIES},ENABLE_MYSQL defined"")
    include_directories(${MYSQL_INCLUDE_DIR})
    include_directories(${MYSQL_INCLUDE_DIR}/mysql)
    add_definitions(-DENABLE_MYSQL)
    list(APPEND LINK_LIB_LIST ${MYSQL_LIBRARIES})
endif ()

#查找x264是否安装
find_package(X264 QUIET)
if (X264_FOUND AND ENABLE_X264)
    message(STATUS ""found library:${X264_LIBRARIES},ENABLE_X264 defined"")
    include_directories(${X264_INCLUDE_DIRS})
    add_definitions(-DENABLE_X264)
    list(APPEND LINK_LIB_LIST ${X264_LIBRARIES})
endif ()

#查找faac是否安装
find_package(FAAC QUIET)
if (FAAC_FOUND AND ENABLE_FAAC)
    message(STATUS ""found library:${FAAC_LIBRARIES},ENABLE_FAAC defined"")
    include_directories(${FAAC_INCLUDE_DIR})
    add_definitions(-DENABLE_FAAC)
    list(APPEND LINK_LIB_LIST ${FAAC_LIBRARIES})
endif ()

if(${CMAKE_BUILD_TYPE} MATCHES ""Release"")
    #查找jemalloc是否安装
    find_package(JEMALLOC QUIET)
    if(JEMALLOC_FOUND)
        message(STATUS ""found library:\""${JEMALLOC_LIBRARIES}\"""")
        include_directories(${JEMALLOC_INCLUDE_DIR})
        list(APPEND  LINK_LIB_LIST ${JEMALLOC_LIBRARIES})
    endif()
endif()

set(VS_FALGS ""/wd4819 /wd4996 /wd4018 /wd4267 /wd4244 /wd4101 /wd4828 /wd4309 /wd4573"" )

#添加mpeg用于支持ts生成
if(ENABLE_HLS)
    message(STATUS ""ENABLE_HLS defined"")
    add_definitions(-DENABLE_HLS)

    aux_source_directory(${MediaServer_Root}/libmpeg/include src_mpeg)
    aux_source_directory(${MediaServer_Root}/libmpeg/source src_mpeg)
    include_directories(${MediaServer_Root}/libmpeg/include)

    add_library(mpeg STATIC ${src_mpeg})
    list(APPEND LINK_LIB_LIST mpeg)

	if(WIN32)
		set_target_properties(mpeg PROPERTIES COMPILE_FLAGS  ${VS_FALGS} )
	endif(WIN32)
endif()

#添加mov、flv库用于MP4录制
if(ENABLE_MP4)
    message(STATUS ""ENABLE_MP4 defined"")
    add_definitions(-DENABLE_MP4)

    aux_source_directory(${MediaServer_Root}/libmov/include src_mov)
    aux_source_directory(${MediaServer_Root}/libmov/source src_mov)	
	include_directories(${MediaServer_Root}/libmov/include)

    aux_source_directory(${MediaServer_Root}/libflv/include src_flv)
    aux_source_directory(${MediaServer_Root}/libflv/source src_flv)	
	include_directories(${MediaServer_Root}/libflv/include)

    add_library(mov STATIC ${src_mov})
	add_library(flv STATIC ${src_flv})
    list(APPEND LINK_LIB_LIST mov flv)

	if(WIN32)
		set_target_properties(mov flv PROPERTIES COMPILE_FLAGS  ${VS_FALGS} )
	endif(WIN32)
endif()

#添加rtp库用于rtp转ps/ts
if(ENABLE_RTPPROXY AND ENABLE_HLS)
    message(STATUS ""ENABLE_RTPPROXY defined"")
    aux_source_directory(${MediaServer_Root}/librtp/include src_rtp)
    aux_source_directory(${MediaServer_Root}/librtp/source src_rtp)
    aux_source_directory(${MediaServer_Root}/librtp/payload src_rtp)
    include_directories(${MediaServer_Root}/librtp/include)
    add_library(rtp STATIC ${src_rtp})
    add_definitions(-DENABLE_RTPPROXY)
    list(APPEND LINK_LIB_LIST rtp)
endif()

#收集源代码
file(GLOB ToolKit_src_list ${ToolKit_Root}/*/*.cpp ${ToolKit_Root}/*/*.h ${ToolKit_Root}/*/*.c)
if(IOS)
    list(APPEND ToolKit_src_list ${ToolKit_Root}/Network/Socket_ios.mm)
endif()

file(GLOB MediaKit_src_list ${MediaKit_Root}/*/*.cpp ${MediaKit_Root}/*/*.h ${MediaKit_Root}/*/*.c)

#去除win32的适配代码
if (NOT WIN32)
    list(REMOVE_ITEM ToolKit_src_list ${ToolKit_Root}/win32/getopt.c)
else()
    #防止Windows.h包含Winsock.h
    add_definitions(-DWIN32_LEAN_AND_MEAN -DMP4V2_NO_STDINT_DEFS -DOS_WINDOWS)
endif ()

#添加库
add_library(zltoolkit STATIC ${ToolKit_src_list})
add_library(zlmediakit STATIC ${MediaKit_src_list})

if (WIN32)
    list(APPEND LINK_LIB_LIST WS2_32 Iphlpapi shlwapi)
	set_target_properties(zltoolkit PROPERTIES COMPILE_FLAGS ${VS_FALGS} )
	set_target_properties(zlmediakit PROPERTIES COMPILE_FLAGS ${VS_FALGS} )
elseif(NOT ANDROID OR IOS)
    list(APPEND LINK_LIB_LIST pthread)
endif ()

#复制文件过来
execute_process(COMMAND cp -r ${CMAKE_CURRENT_SOURCE_DIR}/www ${EXECUTABLE_OUTPUT_PATH}/)
execute_process(COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/conf/config.ini ${EXECUTABLE_OUTPUT_PATH}/)

#添加c库
add_subdirectory(api)

if (NOT IOS)
    #测试程序
    add_subdirectory(tests)
    #主服务器
    add_subdirectory(server)
endif ()
",3.1.3,3.1
35826,Xaymar,obs-studio_amf-encoder-plugin,False,False,False,False,False,19,C++,2020-05-13 13:50:04+00:00,2016-07-03 09:53:18+00:00,293,1348,"# A Plugin that integrates the AMD AMF encoder into OBS Studio
# Copyright (C) 2016 - 2017 Michael Fabian Dirks
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

# CMake Setup
CMake_Minimum_Required(VERSION 3.1.0)
Include(""cmake/util.cmake"")

# Automatic Versioning
Set(VERSION_MAJOR 2)
Set(VERSION_MINOR 7)
Set(VERSION_PATCH 0)
Set(VERSION_TWEAK 0)
Set(PROJECT_COMMIT ""N/A"")
If(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/.git"")
	Set(GIT_RESULT """")
	Set(GIT_OUTPUT """")
	EXECUTE_PROCESS(
		COMMAND git rev-list --count --topo-order ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}..HEAD
		WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
		RESULT_VARIABLE GIT_RESULT
		OUTPUT_VARIABLE GIT_OUTPUT
		OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE ERROR_QUIET
	)
	If(GIT_RESULT EQUAL 0)
		Set(VERSION_TWEAK ${GIT_OUTPUT})
	EndIf()
	EXECUTE_PROCESS(
		COMMAND git rev-parse HEAD
		WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
		RESULT_VARIABLE GIT_RESULT
		OUTPUT_VARIABLE GIT_OUTPUT
		OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE ERROR_QUIET
	)
	If(GIT_RESULT EQUAL 0)
		Set(PROJECT_COMMIT ${GIT_OUTPUT})
	EndIf()
EndIf()

# Define Project
PROJECT(
	enc-amf
	VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_TWEAK}
)

################################################################################
# CMake / Compiler
################################################################################

# Detect Build Type
If(""${CMAKE_SOURCE_DIR}"" STREQUAL ""${PROJECT_SOURCE_DIR}"")
	Set(PropertyPrefix """")
Else()
	Set(PropertyPrefix ""${PROJECT_NAME}_"")
EndIf()

# Detect Architecture
math(EXPR BITS ""8*${CMAKE_SIZEOF_VOID_P}"")
IF(""${BITS}"" STREQUAL ""32"")
	SET(ARCH ""x86"")
Else()
	SET(ARCH ""x64"")
ENDIF()

# Configure Installer script
Configure_File(
	""${PROJECT_SOURCE_DIR}/ci/installer.in.iss""
	""${PROJECT_BINARY_DIR}/ci/installer.iss""
)

# Configure Version Header
Configure_File(
	""${PROJECT_SOURCE_DIR}/include/version.hpp.in""
	""${PROJECT_BINARY_DIR}/include/version.hpp""
)

# Windows Specific Resource Definition
If(WIN32)
	Set(PROJECT_PRODUCT_NAME ""OBS Studio AMD Encoder"")
	Set(PROJECT_DESCRIPTION """")
	Set(PROJECT_COMPANY_NAME ""Xaymar"")
	Set(PROJECT_COPYRIGHT ""Xaymar © 2016 - 2018"")
	Set(PROJECT_LEGAL_TRADEMARKS_1 ""Advanced Micro Devices, AMD, AMD Ryzen, Ryzen, AMD Radeon and Radeon are Trademarks of Advanced Micro Devices."")
	Set(PROJECT_LEGAL_TRADEMARKS_2 """")
	Set(PROJECT_DESCRIPTION ""AMD Encoder integration for OBS Studio"")

	Configure_File(
		""${PROJECT_SOURCE_DIR}/cmake/version.rc.in""
		""${PROJECT_BINARY_DIR}/cmake/version.rc""
		@ONLY
	)
EndIf()

# All Warnings, Extra Warnings, Pedantic
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
	# using Clang
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wno-missing-braces -Wmissing-field-initializers -Wno-c++98-compat-pedantic -Wold-style-cast -Wno-documentation -Wno-documentation-unknown-command -Wno-covered-switch-default -Wno-switch-enum"")
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
	# GCC: -fpermissive is required as GCC does not allow the same template to be in different namespaces.
	set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -Wpedantic -fpermissive -Wno-long-long -Wno-missing-braces -Wmissing-field-initializers"")
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Intel"")
	# using Intel C++
elseif (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
	# Force to always compile with W4
	if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
		string(REGEX REPLACE ""/W[0-4]"" ""/W4"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
	else()
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
	endif()
endif()
# C++ Standard and Extensions
## Use C++17 and no non-standard extensions.
set(_CXX_STANDARD 17)
set(_CXX_EXTENSIONS OFF)

math(EXPR BITS ""8*${CMAKE_SIZEOF_VOID_P}"")

################################################################################
# Options
################################################################################
set(${PropertyPrefix}OBS_NATIVE FALSE CACHE BOOL ""Use native obs-studio build"" FORCE)
set(${PropertyPrefix}OBS_REFERENCE FALSE CACHE BOOL ""Use referenced obs-studio build"" FORCE)
set(${PropertyPrefix}OBS_PACKAGE FALSE CACHE BOOL ""Use packaged obs-studio build"" FORCE)
set(${PropertyPrefix}OBS_DOWNLOAD FALSE CACHE BOOL ""Use downloaded obs-studio build"" FORCE)
mark_as_advanced(FORCE OBS_NATIVE OBS_PACKAGE OBS_REFERENCE OBS_DOWNLOAD)

if(NOT TARGET libobs)
	set(${PropertyPrefix}OBS_STUDIO_DIR """" CACHE PATH ""OBS Studio Source/Package Directory"")
	set(${PropertyPrefix}OBS_DOWNLOAD_VERSION ""24.0.1-ci"" CACHE STRING ""OBS Studio Version to download"")
endif()

if(NOT ${PropertyPrefix}OBS_NATIVE)
	set(${PropertyPrefix}OBS_DEPENDENCIES_DIR """" CACHE PATH ""Path to OBS Dependencies"")
	set(CMAKE_PACKAGE_PREFIX ""${CMAKE_BINARY_DIR}"" CACHE PATH ""Path for generated archives."")
	set(CMAKE_PACKAGE_NAME ""${PROJECT_NAME}"" CACHE STRING ""Name for the generated archives."")
	set(CMAKE_PACKAGE_SUFFIX_OVERRIDE """" CACHE STRING ""Override for the suffix."")
endif()

################################################################################
# Dependencies
################################################################################

# Detect OBS Studio Type
if(TARGET libobs)
	message(STATUS ""${PROJECT_NAME}: Using native obs-studio."")
	CacheSet(${PropertyPrefix}OBS_NATIVE TRUE)
else()
	CacheSet(${PropertyPrefix}OBS_NATIVE FALSE)
	if(EXISTS ""${OBS_STUDIO_DIR}/cmake/LibObs/LibObsConfig.cmake"")
		message(STATUS ""${PROJECT_NAME}: Using packaged obs-studio."")
		CacheSet(${PropertyPrefix}OBS_PACKAGE TRUE)
	elseif(EXISTS ""${OBS_STUDIO_DIR}/libobs/obs-module.h"")
		message(STATUS ""${PROJECT_NAME}: Using referenced obs-studio."")
		CacheSet(${PropertyPrefix}OBS_REFERENCE TRUE)
	else()
		message(STATUS ""${PROJECT_NAME}: No OBS Studio detected, using downloadable prebuilt binaries."")
		CacheSet(${PropertyPrefix}OBS_DOWNLOAD TRUE)
		if (WIN32)
			set(${PropertyPrefix}OBS_DOWNLOAD_URL ""https://github.com/Xaymar/obs-studio/releases/download/${OBS_DOWNLOAD_VERSION}/obs-studio-${ARCH}-0.0.0.0-vs2017.7z"")
		elseif(UNIX)
			set(${PropertyPrefix}OBS_DOWNLOAD_URL ""https://github.com/Xaymar/obs-studio/releases/download/${OBS_DOWNLOAD_VERSION}/obs-studio-${ARCH}-0.0.0.0-gcc.7z"")
		endif()
	endif()
endif()

If(NOT ${PropertyPrefix}OBS_NATIVE)
	Set(CMAKE_PACKAGE_PREFIX ""${CMAKE_BINARY_DIR}"" CACHE PATH ""Path for generated archives."")
	Set(CMAKE_PACKAGE_NAME ""${PROJECT_NAME}"" CACHE STRING ""Name for the generated archives."")
	Set(CMAKE_PACKAGE_SUFFIX_OVERRIDE """" CACHE STRING ""Override for the suffix."")
EndIf()

# CMake Modules
If(${PropertyPrefix}OBS_DOWNLOAD)
	Include(""cmake/DownloadProject.cmake"")
EndIf()
If(NOT ${PropertyPrefix}OBS_NATIVE)
	Include(""cmake/cppcheck.cmake"")
EndIf()

# Load OBS Studio
If(${PropertyPrefix}OBS_NATIVE)
	Option(BUILD_AMD_ENCODER ""Build AMD Encoder module"" ON)
	If (NOT BUILD_AMD_ENCODER)
		Message(STATUS ""Not building AMD Encoder"")
		Return()
	EndIf()
ElseIf(${PropertyPrefix}OBS_PACKAGE)
	Include(""${OBS_STUDIO_DIR}/cmake/LibObs/LibObsConfig.cmake"")
ElseIf(${PropertyPrefix}OBS_REFERENCE)
	Set(obsPath ""${OBS_STUDIO_DIR}"")
	Include(""${OBS_STUDIO_DIR}/cmake/external/Findlibobs.cmake"")
ElseIf(${PropertyPrefix}OBS_DOWNLOAD)
	download_project(
		PROJ libobs
		URL ${OBS_DOWNLOAD_URL}
		UPDATE_DISCONNECTED 1
	)
	INCLUDE(""${libobs_SOURCE_DIR}/cmake/LibObs/LibObsConfig.cmake"")
Else()
	Message(CRITICAL ""Impossible case reached, very system stability."")
	Return()
EndIf()

################################################################################
# Code
################################################################################
Set(PROJECT_HEADERS
	""${PROJECT_SOURCE_DIR}/include/amf.hpp""
	""${PROJECT_SOURCE_DIR}/include/amf-capabilities.hpp""
	""${PROJECT_SOURCE_DIR}/include/amf-encoder.hpp""
	""${PROJECT_SOURCE_DIR}/include/amf-encoder-h264.hpp""
	""${PROJECT_SOURCE_DIR}/include/enc-h264.hpp""
	""${PROJECT_SOURCE_DIR}/include/amf-encoder-h265.hpp""
	""${PROJECT_SOURCE_DIR}/include/enc-h265.hpp""
	""${PROJECT_SOURCE_DIR}/include/api-base.hpp""
	""${PROJECT_SOURCE_DIR}/include/api-host.hpp""
	""${PROJECT_SOURCE_DIR}/include/api-opengl.hpp""
	""${PROJECT_SOURCE_DIR}/include/utility.hpp""
	""${PROJECT_SOURCE_DIR}/include/plugin.hpp""
	""${PROJECT_SOURCE_DIR}/include/strings.hpp""
	""${PROJECT_BINARY_DIR}/include/version.hpp""
)
Set(PROJECT_SOURCES
	""${PROJECT_SOURCE_DIR}/source/amf.cpp""
	""${PROJECT_SOURCE_DIR}/source/amf-capabilities.cpp""
	""${PROJECT_SOURCE_DIR}/source/amf-encoder.cpp""
	""${PROJECT_SOURCE_DIR}/source/amf-encoder-h264.cpp""
	""${PROJECT_SOURCE_DIR}/source/enc-h264.cpp""
	""${PROJECT_SOURCE_DIR}/source/amf-encoder-h265.cpp""
	""${PROJECT_SOURCE_DIR}/source/enc-h265.cpp""
	""${PROJECT_SOURCE_DIR}/source/api-base.cpp""
	""${PROJECT_SOURCE_DIR}/source/api-host.cpp""
	""${PROJECT_SOURCE_DIR}/source/api-opengl.cpp""
	""${PROJECT_SOURCE_DIR}/source/utility.cpp""
	""${PROJECT_SOURCE_DIR}/source/plugin.cpp""
)
Set(PROJECT_DATA
	""${PROJECT_SOURCE_DIR}/resources/locale/en-US.ini""
	""${PROJECT_SOURCE_DIR}/LICENSE""
)
Set(PROJECT_LIBRARIES
	version
	winmm
)

If(WIN32) # Windows Only
	LIST(APPEND PROJECT_HEADERS
		""include/api-d3d9.hpp""
		""include/api-d3d11.hpp""
	)
	LIST(APPEND PROJECT_SOURCES
		""source/api-d3d9.cpp""
		""source/api-d3d11.cpp""
		""${PROJECT_BINARY_DIR}/cmake/version.rc""
	)
EndIf()

# Source Grouping
Source_Group(""Data Files"" FILES ${enc-amf_DATA})

################################################################################
# Target
################################################################################

Add_Library(${PROJECT_NAME} MODULE
	${PROJECT_HEADERS}
	${PROJECT_SOURCES}
	${PROJECT_DATA}
)
If(${PropertyPrefix}OBS_NATIVE)
	Set_Target_Properties(${PROJECT_NAME} PROPERTIES FOLDER ""plugins/enc-amf"")
EndIf()

# Include Directories
Target_Include_Directories(${PROJECT_NAME}
	PUBLIC
		""${PROJECT_BINARY_DIR}/include""
		""${PROJECT_SOURCE_DIR}/include""
		""${PROJECT_SOURCE_DIR}/AMF/amf/public/include""
	PRIVATE
		""${PROJECT_BINARY_DIR}/source""
		""${PROJECT_SOURCE_DIR}/source""
		""${PROJECT_BINARY_DIR}""
		""${PROJECT_SOURCE_DIR}""
		""${CMAKE_SOURCE_DIR}""
)

# OBS Studio
If(${PropertyPrefix}OBS_NATIVE)
	Target_Link_Libraries(${PROJECT_NAME}
		libobs
	)
ElseIf(${PropertyPrefix}OBS_REFERENCE)
	Target_Include_Directories(${PROJECT_NAME}
		PRIVATE
			""${OBS_STUDIO_DIR}/libobs""
	)
	Target_Link_Libraries(${PROJECT_NAME}
		""${LIBOBS_LIB}""
	)
ElseIf(${PropertyPrefix}OBS_PACKAGE)
	Target_Include_Directories(${PROJECT_NAME}
		PRIVATE
			""${OBS_STUDIO_DIR}/include""
	)
	Target_Link_Libraries(${PROJECT_NAME}
		libobs
	)
ElseIf(${PropertyPrefix}OBS_DOWNLOAD)
	Target_Link_Libraries(${PROJECT_NAME}
		libobs
	)
EndIf()

# Link Libraries
Target_Link_Libraries(${PROJECT_NAME}
	""${PROJECT_LIBRARIES}""
)

# Definitions
If (WIN32)
	Target_Compile_Definitions(${PROJECT_NAME}
		PRIVATE
			_CRT_SECURE_NO_WARNINGS
			# windows.h
			WIN32_LEAN_AND_MEAN
			NOGPICAPMASKS
			NOVIRTUALKEYCODES
			#NOWINMESSAGES
			NOWINSTYLES
			NOSYSMETRICS
			NOMENUS
			NOICONS
			NOKEYSTATES
			NOSYSCOMMANDS
			NORASTEROPS
			NOSHOWWINDOW
			NOATOM
			NOCLIPBOARD
			NOCOLOR
			NOCTLMGR
			NODRAWTEXT
			#NOGDI
			NOKERNEL
			#NOUSER
			#NONLS
			NOMB
			NOMEMMGR
			NOMETAFILE
			NOMINMAX
			#NOMSG
			NOOPENFILE
			NOSCROLL
			NOSERVICE
			NOSOUND
			#NOTEXTMETRIC
			NOWH
			NOWINOFFSETS
			NOCOMM
			NOKANJI
			NOHELP
			NOPROFILER
			NODEFERWINDOWPOS
			NOMCX
			NOIME
			NOMDI
			NOINOUT
	)
EndIf()

# File Version
If(WIN32)
	Set_Target_Properties(
		${PROJECT_NAME}
		PROPERTIES
		VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_VERSION_TWEAK}
		SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_VERSION_TWEAK}
	)
Else()
	Set_Target_Properties(
		${PROJECT_NAME}
		PROPERTIES
		VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_VERSION_TWEAK}
		SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_VERSION_TWEAK}
	)
EndIf()

# CPPCheck
If(NOT ${PropertyPrefix}OBS_NATIVE)
	SET(excludes )
	LIST(APPEND excludes ""${PROJECT_SOURCE_DIR}/AMF"")
	If(${PropertyPrefix}OBS_REFERENCE)
		LIST(APPEND excludes ""${OBS_STUDIO_DIR}/libobs"")
	ElseIf(${PropertyPrefix}OBS_PACKAGE)
		LIST(APPEND excludes ""${OBS_STUDIO_DIR}/libobs"")
	ElseIf(${PropertyPrefix}OBS_DOWNLOAD)
		LIST(APPEND excludes ""${libobs_SOURCE_DIR}"")
	EndIf()

	CppCheck(
		EXCLUDE ${excludes}
	)
	CppCheck_Add_Project(${PROJECT_NAME})
EndIf()

################################################################################
# Installation
################################################################################

If(${PropertyPrefix}OBS_NATIVE)
	install_obs_plugin_with_data(${PROJECT_NAME} resources)
Else()
	Install(
		TARGETS ${PROJECT_NAME}
		RUNTIME DESTINATION ""./obs-plugins/${BITS}bit/"" COMPONENT Runtime
		LIBRARY DESTINATION ""./obs-plugins/${BITS}bit/"" COMPONENT Runtime
	)
	IF(MSVC)
		Install(
			FILES $<TARGET_PDB_FILE:${PROJECT_NAME}>
			DESTINATION ""./obs-plugins/${BITS}bit/""
			OPTIONAL
		)
	ENDIF()

	Install(
		DIRECTORY ""${PROJECT_SOURCE_DIR}/resources/""
		DESTINATION ""./data/obs-plugins/${PROJECT_NAME}/""
	)

	If(""${CMAKE_PACKAGE_SUFFIX_OVERRIDE}"" STREQUAL """")
		Set(PackageFullName ""${CMAKE_PACKAGE_PREFIX}/${CMAKE_PACKAGE_NAME}-${PROJECT_VERSION}"")
	Else()
		Set(PackageFullName ""${CMAKE_PACKAGE_PREFIX}/${CMAKE_PACKAGE_NAME}-${CMAKE_PACKAGE_SUFFIX_OVERRIDE}"")
	EndIf()

	Add_Custom_Target(
		PACKAGE_7Z
		${CMAKE_COMMAND} -E tar cfv ""${PackageFullName}.7z"" --format=7zip --
			""${CMAKE_INSTALL_PREFIX}/obs-plugins""
			""${CMAKE_INSTALL_PREFIX}/data""
		WORKING_DIRECTORY ""${CMAKE_INSTALL_PREFIX}""
	)
	Add_Custom_Target(
		PACKAGE_ZIP
		${CMAKE_COMMAND} -E tar cfv ""${PackageFullName}.zip"" --format=zip --
			""${CMAKE_INSTALL_PREFIX}/obs-plugins""
			""${CMAKE_INSTALL_PREFIX}/data""
		WORKING_DIRECTORY ""${CMAKE_INSTALL_PREFIX}""
	)
EndIf()

################################################################################
# Child Projects
################################################################################

# Sub Project
Add_SubDirectory(amf-test)
",3.1.0,3.1
35869,sony,nnabla,False,False,False,False,False,73,Python,2020-05-15 20:43:47+00:00,2017-06-26 01:07:10+00:00,2333,1872,"# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required (VERSION 3.1)
#set(CMAKE_VERBOSE_MAKEFILE ON)

# NNabla project
project (nbla C CXX)

###############################################################################
# General settings
###############################################################################
# Using cmake scripts and modules
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/build-tools/cmake/Modules)
list(APPEND CMAKE_FIND_ROOT_PATH $ENV{CMAKE_FIND_ROOT_PATH})
include(${CMAKE_SOURCE_DIR}/build-tools/cmake/Utils.cmake)

###############################################################################
option(BUILD_CPP_LIB ""Build C++ Library"" ON)
option(BUILD_CPP_TEST ""Build testing"" OFF)
option(BUILD_CPP_UTILS ""Build C++ API and utilities"" OFF)
option(BUILD_PYTHON_PACKAGE ""Build python package"" ON)
option(MAKE_MANYLINUX_WHEEL ""Convert wheel to manylinux version"" OFF)

option(NBLA_VERBOSE_MEMORY_USAGE ""Enable debug print of memory usage"" OFF)
if(NBLA_VERBOSE_MEMORY_USAGE)
  add_definitions(-DNBLA_VERBOSE_MEMORY_USAGE)
endif()

###############################################################################
# Settings
###############################################################################
if (NOT PYTHON_COMMAND_NAME)
  if(NOT PYTHON_VERSION_MAJOR)
    set(PYTHON_COMMAND_NAME ""python3"")
  else()
    set(PYTHON_COMMAND_NAME ""python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}"")
  endif()
endif()

find_program(PP ${PYTHON_COMMAND_NAME})
if(NOT EXISTS ${PP})
  find_program(PP ""python3"")
  if(NOT EXISTS ${PP})
    message(FATAL_ERROR, ""python [${PYTHON_COMMAND_NAME}] not found. Please install python or check your settings."")
    error() # Place Unknown command to stop cmake process here.
  endif()
endif()
set(PYTHON_COMMAND ""${PP}"")


if(NOT EXISTS ${PROTOC_COMMAND})
  find_program(PROTOC_COMMAND protoc)
endif()
if(NOT EXISTS ${PROTOC_COMMAND})
  # If find_program fails.
  message(FATAL_ERROR, ""protoc not found. Please install protocol buffer compiler."")
  error() # Place Unknown command to stop cmake process here.
endif()

###############################################################################
# Preprocessing
###############################################################################
execute_process(
  COMMAND ${PYTHON_COMMAND}
          ${CMAKE_SOURCE_DIR}/build-tools/cmake/get_setup_build_dir.py
          OUTPUT_VARIABLE NBLA_SETUP_LIB_DIR_RAW)
string(STRIP ${NBLA_SETUP_LIB_DIR_RAW} NBLA_SETUP_LIB_DIR)

###############################################################################
# Code generator
###############################################################################

file(STRINGS ${CMAKE_SOURCE_DIR}/VERSION.txt versions NEWLINE_CONSUME)
string(REGEX REPLACE [[^([A-z0-9.\-_]+).*$]] [[\1]] version ${versions})
string(REGEX REPLACE [[^([0-9]+)\.([0-9]+)\.(.*)$]] [[\1]] version_major ${version})
string(REGEX REPLACE [[^([0-9]+)\.([0-9]+)\.(.*)$]] [[\2]] version_minor ${version})
string(REGEX REPLACE [[^([0-9]+)\.([0-9]+)\.(.*)$]] [[\3]] version_patch ${version})

set(CPACK_PACKAGE_NAME nnabla-cpplib${LIB_NAME_SUFFIX})

if(UNIX)
  find_program(LSB_RELEASE lsb_release)
  if(EXISTS ${LSB_RELEASE})
    execute_process(COMMAND ${LSB_RELEASE} -si
      OUTPUT_VARIABLE LSB_RELEASE_ID
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
    execute_process(COMMAND ${LSB_RELEASE} -sr
      OUTPUT_VARIABLE LSB_RELEASE_RELEASE
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
    set(CPACK_SYSTEM_NAME ${LSB_RELEASE_ID}${LSB_RELEASE_RELEASE})
  else()
    find_program(UNAME uname)
    if(EXISTS ${UNAME})
      execute_process(COMMAND ${UNAME} -s
        OUTPUT_VARIABLE UNAME_SYSTEM_NAME
        OUTPUT_STRIP_TRAILING_WHITESPACE
        )
      set(CPACK_SYSTEM_NAME ${UNAME_SYSTEM_NAME})
    endif()
  endif()
  find_program(UNAME uname)
  if(EXISTS ${UNAME})
    execute_process(COMMAND ${UNAME} -m
      OUTPUT_VARIABLE UNAME_MACHINE_NAME
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
    set(CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}_${UNAME_MACHINE_NAME})
  endif()
endif()

set(CPACK_PACKAGE_VERSION_MAJOR ${version_major})
set(CPACK_PACKAGE_VERSION_MINOR ${version_minor})
set(CPACK_PACKAGE_VERSION_PATCH ${version_patch})
set(CPACK_PACKAGE_CONTACT ""nnabla@googlegroups.com"")

file(MAKE_DIRECTORY  ${CMAKE_SOURCE_DIR}/src/nbla/proto)
execute_process(
  COMMAND
  ${PYTHON_COMMAND}
  ${CMAKE_SOURCE_DIR}/build-tools/code_generator/generate.py ${version}
  RESULT_VARIABLE GENERATE_RESULT)

if (NOT ${GENERATE_RESULT} EQUAL 0)
  message(FATAL_ERROR ""generate.py failed."")
endif ()

if (${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
    IS_NEWER_THAN
    ${CMAKE_SOURCE_DIR}/python/src/nnabla/utils//nnabla_pb2.py)
  execute_process(
    COMMAND
    ${PROTOC_COMMAND}
    --proto_path=${CMAKE_SOURCE_DIR}/src/nbla/proto/
    --python_out=${CMAKE_SOURCE_DIR}/python/src/nnabla/utils
    ${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
    RESULT_VARIABLE PROTOC_RESULT)
  if (NOT ${PROTOC_RESULT} EQUAL 0)
    message(FATAL_ERROR ""protoc for Python failed."")
  endif ()
endif()
                         
if (${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
    IS_NEWER_THAN
    ${CMAKE_SOURCE_DIR}/src/nbla_utils/nnabla.pb.cc)
execute_process(
  COMMAND
  ${PROTOC_COMMAND}
  --proto_path=${CMAKE_SOURCE_DIR}/src/nbla/proto/
  --cpp_out=${CMAKE_SOURCE_DIR}/src/nbla_utils
  ${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
  RESULT_VARIABLE PROTOC_RESULT)
  if (NOT ${PROTOC_RESULT} EQUAL 0)
    message(FATAL_ERROR ""protoc for C++ failed."")
  endif ()
endif()
  
###############################################################################
# C++ Library
###############################################################################
if(BUILD_CPP_LIB)
  ###############################################################################
  # Third party libraries
  ###############################################################################
  add_subdirectory(third_party)
  
  if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING
      ""Build type release is default on single-configuration build system like GNU make.""
      FORCE)
  endif()
  
  # Flags
  if(MSVC)
    # Force to always compile with W4
    if(CMAKE_CXX_FLAGS MATCHES ""/W[0-4]"")
      string(REGEX REPLACE ""/W[0-4]"" ""/W0"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}"")
    else()
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W0"")
    endif()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /bigobj"")
  endif()
  
  if(UNIX OR APPLE)
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
      set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    endif(CCACHE_FOUND)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fPIC -Wall"")
  endif()
  nbla_warnings_disable(CMAKE_CXX_FLAGS -Wno-sign-compare -Wno-uninitialized /wd4099)
  
  # Setting output directory naively
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  if (WIN32)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  else()
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  endif()
  
  ###############################################################################
  # C++ core
  ###############################################################################
  # includes
  list(APPEND NBLA_INCLUDE_DIRS
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/third_party/eigen-git-mirror-3.3.5)
  
  if(BUILD_CPP_UTILS)
    list(APPEND NBLA_INCLUDE_DIRS
      ${CMAKE_SOURCE_DIR}/third_party/cmdline-master)
  endif()
  
  include_directories(${NBLA_INCLUDE_DIRS};${PROJECT_BINARY_DIR})
  add_subdirectory(src/nbla)
  
  ###############################################################################
  # C++ Utilities
  ###############################################################################
  if(BUILD_CPP_UTILS)
    add_subdirectory(src/nbla_utils)
    add_subdirectory(src/nbla_cli)
    add_subdirectory(examples/cpp)
  endif()

  ###############################################################################
  # C++ Testing
  ###############################################################################
  if(BUILD_TEST)
    if (WIN32)
      set(BUILD_SHARED_LIBS ON CACHE BOOL
        ""Force to build gtest with dll on Windows."")
    endif()
    enable_testing()
    include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR} src/nbla/test/include)
    file(GLOB NBLA_TEST_SOURCES
            src/nbla/test/test_*.cpp
            src/nbla/test/parametric_functions/*.cpp)
    add_executable(cpplibtest ${NBLA_TEST_SOURCES})
    add_dependencies(cpplibtest ${NBLA_LIBRARY_NAME})
    target_link_libraries(cpplibtest gtest gtest_main)
    target_link_libraries(cpplibtest ${NBLA_LIBRARY_NAME})
    set_property(TARGET cpplibtest PROPERTY CXX_STANDARD 11)
    nbla_exclude_from_all(cpplibtest)  # Exclude target from all or default build
    add_test(NAME cpplibtest COMMAND cpplibtest)
  endif()

  ###############################################################################
  # Generate setup.cfg
  ###############################################################################
  if (NOT (DEFINED NBLA_PYTHON_BUILD_EXT_COMPILER))
    if (WIN32)
      set(NBLA_PYTHON_BUILD_EXT_COMPILER msvc)
    elseif(UNIX OR APPLE)
      set(NBLA_PYTHON_BUILD_EXT_COMPILER unix)
    else ()
      message(FATAL_ERROR
        ""Python build_ext compiler inference is only supported on Win, Unix or Apple."")
    endif()
    message(""Python build_ext compiler is inferred as '${NBLA_PYTHON_BUILD_EXT_COMPILER}'."")
    message(""You can specify a compiler manually setting a variable""
      "" NBLA_PYTHON_BUILD_EXT_COMPILER. You can see a list of supported""
      "" compiler by `python setup.py build_ext --help-compiler`."")
  endif()

  option(CONFIG_BUILD_DIR ${CMAKE_BINARY_DIR})
  
  # Two-step configure_file generation with generate-time property (target_file_name).
  # http://cmake.3232098.n2.nabble.com/cmp0026-file-GENERATE-and-configure-file-td7590275.html
  # Since multiple-configuration build system like Visual Studio requires
  # file(GENERATE ...) for each build config, we generate setup.cfg files for each
  # build type with suffix `-<config>`. You can switch the build type by replacing
  # the setup.cfg file by setup.cfg-<config>. The default setup.cfg is for Release build.
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.in
    ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.in.configured)
  
  file(GENERATE OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg-$<CONFIG>
    INPUT ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.in.configured)
  
  file(GENERATE OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg
    INPUT ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.in.configured
    CONDITION $<CONFIG:${CMAKE_BUILD_TYPE}>)
  
  set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg
    ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.in.configured
    ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg-$<CONFIG>)

endif() # BUILD_CPP_LIB

###############################################################################
# Python API
###############################################################################
if(BUILD_PYTHON_PACKAGE)

  if(NOT BUILD_CPP_LIB)
    if(NOT IS_DIRECTORY ${CPPLIB_BUILD_DIR})
      message(FATAL_ERROR ""Invalid CPPLIB_BUILD_DIR :[${CPPLIB_BUILD_DIR}]"")
    endif()
    if(NOT EXISTS ${CPPLIB_LIBRARY})
      if (${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"")
	string(REPLACE .so .dylib CPPLIB_LIBRARY ${CPPLIB_LIBRARY})
	if(NOT EXISTS ${CPPLIB_LIBRARY})
	  message(FATAL_ERROR ""Invalid CPPLIB_LIBRARY :[${CPPLIB_LIBRARY}]"")
	endif()
      else()
	message(FATAL_ERROR ""Invalid CPPLIB_LIBRARY :[${CPPLIB_LIBRARY}]"")
      endif()
    endif()
    
    set(NBLA_LIBRARY_NAME ${CPPLIB_LIBRARY})  # No one sets if !BUILD_CPP_LIB
    set(CPPLIB_LIBRARY_NAME nnabla${LIB_NAME_SUFFIX})
    set(CPPLIB_TARGET_FILE ${CPPLIB_LIBRARY})
    get_filename_component(CPPLIB_TARGET_FILE_NAME ${CPPLIB_TARGET_FILE} NAME)

    # TODO: Debug mode in windows
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg.build-wheel.in
      ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.cfg)
  endif()

  set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/python/test/solver/__pycache__
    ${CMAKE_CURRENT_SOURCE_DIR}/python/test/__pycache__
    ${CMAKE_CURRENT_SOURCE_DIR}/python/test/function/__pycache__
    ${CMAKE_CURRENT_SOURCE_DIR}/python/test/utils/__pycache__
    ${CMAKE_BINARY_DIR}/""build"")
  # http://stackoverflow.com/questions/13298504/using-cmake-with-setup-py
  file(GLOB_RECURSE NBLA_PYTHON_DEPS
    ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.py
    ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.pyx
    ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.pxd)
  file(GLOB_RECURSE NBLA_PYTHON_BUILD_OUTPUT_CYTHON
    ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.h)
  
  set(NBLA_PYTHON_SETUP ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.py)
  set(NBLA_PYTHON_OUTPUT ${CMAKE_BINARY_DIR}/build)
  set(NBLA_PYTHON_OUTPUT_WHEEL ${NBLA_PYTHON_OUTPUT}/.timestamp.wheel)
  set(NBLA_WHEEL_DEPENDS ${NBLA_PYTHON_DEPS} ${NBLA_LIBRARY_NAME})
  # Wheel
  if(UNIX)
    if(MAKE_MANYLINUX_WHEEL)
      add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
        COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
        COMMAND ${CMAKE_COMMAND} -E env
                WHEEL_SUFFIX=${WHEEL_SUFFIX}
                ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
        COMMAND ${CMAKE_SOURCE_DIR}/build-tools/auditwheel-nnabla ${CMAKE_BINARY_DIR}/dist/*-linux_*.whl
        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*-linux*.whl
        COMMAND ${CMAKE_COMMAND} -E touch ${NBLA_PYTHON_OUTPUT_WHEEL}
        DEPENDS ${NBLA_WHEEL_DEPENDS})
    else()
      add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
        COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
        COMMAND ${CMAKE_COMMAND} -E env
                WHEEL_SUFFIX=${WHEEL_SUFFIX}
                ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
        COMMAND ${CMAKE_COMMAND} -E touch ${NBLA_PYTHON_OUTPUT_WHEEL}
        DEPENDS ${NBLA_WHEEL_DEPENDS})
    endif()
  else()
    add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
      COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
      COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
      COMMAND ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
      COMMAND ${CMAKE_COMMAND} -E touch ${NBLA_PYTHON_OUTPUT_WHEEL}
      DEPENDS ${NBLA_WHEEL_DEPENDS})
  endif()
  if(BUILD_CPP_LIB)
    add_custom_target(wheel ALL DEPENDS ${NBLA_PYTHON_OUTPUT_WHEEL})
  else()
    add_custom_target(wheel DEPENDS ${NBLA_PYTHON_OUTPUT_WHEEL})
  endif()

  if(UNIX OR APPLE)
    add_custom_target(benchmark
      COMMAND cd ${CMAKE_CURRENT_SOURCE_DIR}/python/benchmark &&
      LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}
      PYTHONPATH=${CMAKE_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
      bash -c ""py.test -x"")
    add_dependencies(benchmark wheel)
  endif()
  
  #############################################################################
  # Document
  #############################################################################
  if(UNIX OR APPLE)
    add_custom_target(doc
      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc
      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/doxygen
      COMMAND cd ${CMAKE_SOURCE_DIR} &&
              cat build-tools/doxygen/config >Doxyfile &&
              echo OUTPUT_DIRECTORY  = ${CMAKE_BINARY_DIR}/doc/doxygen >>Doxyfile &&
              doxygen && rm -f Doxyfile
      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/sphinx
      COMMAND cd ${CMAKE_SOURCE_DIR} &&
              PYTHONPATH=${CMAKE_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
              sphinx-build -M html doc ${CMAKE_BINARY_DIR}/doc/sphinx -c doc
      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/protoc
      COMMAND mv ${CMAKE_BINARY_DIR}/doc/sphinx/doctrees ${CMAKE_BINARY_DIR}/doc
      COMMAND mv ${CMAKE_BINARY_DIR}/doc/sphinx/html ${CMAKE_BINARY_DIR}/doc
      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc/sphinx
      COMMAND mv ${CMAKE_BINARY_DIR}/doc/doxygen/html ${CMAKE_BINARY_DIR}/doc/html/doxygen
      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc/doxygen)
    add_dependencies(doc wheel)
    nbla_exclude_from_all(doc)
  endif()

endif() # BUILD_PYTHON_PACKAGE
",3.1,3.1
36012,lxde,obconf-qt,False,False,False,False,False,64,C++,2020-04-24 17:29:25+00:00,2013-07-18 19:11:19+00:00,14,331,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(obconf-qt)

find_program(SED_PROGRAM sed)

include(GNUInstallDirs)


# Minimum Versions
set(GLIB_MINIMUM_VERSION ""2.50.0"")
set(LXQTBT_MINIMUM_VERSION ""0.7.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

set(OBCONFQT_MAJOR_VERSION 0)
set(OBCONFQT_MINOR_VERSION 15)
set(OBCONFQT_PATCH_VERSION 0)
set(OBCONFQT_VERSION ${OBCONFQT_MAJOR_VERSION}.${OBCONFQT_MINOR_VERSION}.${OBCONFQT_PATCH_VERSION})
add_definitions(""-DOBCONFQT_VERSION=\""${OBCONFQT_VERSION}\"""")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_AUTOMOC ON)

find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)

find_package(GLIB ${GLIB_MINIMUM_VERSION} REQUIRED)

find_package(PkgConfig)
pkg_check_modules(OPENBOX REQUIRED
  obrender-3.5
  obt-3.5
)

include(LXQtPreventInSourceBuilds)
include(LXQtTranslateTs)
include(LXQtTranslateDesktop)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# add src subdirectory
add_subdirectory(src)

# install an icon for the application
install(
  FILES data/obconf-qt.png
  DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/48x48/apps""
)
",3.1.0,3.1
36016,nlohmann,json,False,False,False,False,False,157,C++,2020-05-17 20:53:49+00:00,2013-07-04 08:47:49+00:00,18456,3417,"cmake_minimum_required(VERSION 3.1)

##
## PROJECT
## name and version
##
project(nlohmann_json VERSION 3.7.3 LANGUAGES CXX)

##
## INCLUDE
##
##
include(ExternalProject)

##
## OPTIONS
##
option(JSON_BuildTests ""Build the unit tests when BUILD_TESTING is enabled."" ON)
option(JSON_Install ""Install CMake targets during install step."" ON)
option(JSON_MultipleHeaders ""Use non-amalgamated version of the library."" OFF)

##
## CONFIGURATION
##
include(GNUInstallDirs)

set(NLOHMANN_JSON_TARGET_NAME               ${PROJECT_NAME})
set(NLOHMANN_JSON_CONFIG_INSTALL_DIR        ""${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"" CACHE INTERNAL """")
set(NLOHMANN_JSON_INCLUDE_INSTALL_DIR       ""${CMAKE_INSTALL_INCLUDEDIR}"")
set(NLOHMANN_JSON_TARGETS_EXPORT_NAME       ""${PROJECT_NAME}Targets"")
set(NLOHMANN_JSON_CMAKE_CONFIG_TEMPLATE     ""cmake/config.cmake.in"")
set(NLOHMANN_JSON_CMAKE_CONFIG_DIR          ""${CMAKE_CURRENT_BINARY_DIR}"")
set(NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE ""${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}ConfigVersion.cmake"")
set(NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE ""${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}Config.cmake"")
set(NLOHMANN_JSON_CMAKE_PROJECT_TARGETS_FILE ""${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}Targets.cmake"")

if (JSON_MultipleHeaders)
    set(NLOHMANN_JSON_INCLUDE_BUILD_DIR ""${PROJECT_SOURCE_DIR}/include/"")
    message(STATUS ""Using the multi-header code from ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}"")
else()
    set(NLOHMANN_JSON_INCLUDE_BUILD_DIR ""${PROJECT_SOURCE_DIR}/single_include/"")
    message(STATUS ""Using the single-header code from ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}"")
endif()

##
## TARGET
## create target and add include path
##
add_library(${NLOHMANN_JSON_TARGET_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${NLOHMANN_JSON_TARGET_NAME} ALIAS ${NLOHMANN_JSON_TARGET_NAME})
if (${CMAKE_VERSION} VERSION_LESS ""3.8.0"")
    target_compile_features(${NLOHMANN_JSON_TARGET_NAME} INTERFACE cxx_range_for)
else()
    target_compile_features(${NLOHMANN_JSON_TARGET_NAME} INTERFACE cxx_std_11)
endif()

target_include_directories(
    ${NLOHMANN_JSON_TARGET_NAME}
    INTERFACE
    $<BUILD_INTERFACE:${NLOHMANN_JSON_INCLUDE_BUILD_DIR}>
    $<INSTALL_INTERFACE:include>
)

## add debug view definition file for msvc (natvis)
if (MSVC)
    set(NLOHMANN_ADD_NATVIS TRUE)
    set(NLOHMANN_NATVIS_FILE ""nlohmann_json.natvis"")
    target_sources(
        ${NLOHMANN_JSON_TARGET_NAME}
        INTERFACE
            $<INSTALL_INTERFACE:${NLOHMANN_NATVIS_FILE}>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${NLOHMANN_NATVIS_FILE}>
    )
endif()

##
## TESTS
## create and configure the unit test target
##
include(CTest) #adds option BUILD_TESTING (default ON)

if(BUILD_TESTING AND JSON_BuildTests)
    enable_testing()
    add_subdirectory(test)
endif()

##
## INSTALL
## install header files, generate and install cmake config files for find_package()
##
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE} COMPATIBILITY SameMajorVersion
)
configure_file(
    ${NLOHMANN_JSON_CMAKE_CONFIG_TEMPLATE}
    ${NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE}
    @ONLY
)

if(JSON_Install)
    install(
        DIRECTORY ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}
        DESTINATION ${NLOHMANN_JSON_INCLUDE_INSTALL_DIR}
    )
    install(
        FILES ${NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE} ${NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE}
        DESTINATION ${NLOHMANN_JSON_CONFIG_INSTALL_DIR}
    )
    if (NLOHMANN_ADD_NATVIS)
        install(
            FILES ${NLOHMANN_NATVIS_FILE}
            DESTINATION .
    )
    endif()
    export(
        TARGETS ${NLOHMANN_JSON_TARGET_NAME}
        NAMESPACE ${PROJECT_NAME}::
        FILE ${NLOHMANN_JSON_CMAKE_PROJECT_TARGETS_FILE}
    )
    install(
        TARGETS ${NLOHMANN_JSON_TARGET_NAME}
        EXPORT ${NLOHMANN_JSON_TARGETS_EXPORT_NAME}
        INCLUDES DESTINATION ${NLOHMANN_JSON_INCLUDE_INSTALL_DIR}
    )
    install(
        EXPORT ${NLOHMANN_JSON_TARGETS_EXPORT_NAME}
        NAMESPACE ${PROJECT_NAME}::
        DESTINATION ${NLOHMANN_JSON_CONFIG_INSTALL_DIR}
    )
endif()
",3.1,3.1
36228,zaps166,QMPlay2,False,False,False,False,False,18,C++,2020-05-13 12:45:16+00:00,2014-09-24 11:56:50+00:00,205,2286,"cmake_minimum_required(VERSION 3.1)
project(QMPlay2)

# Set default build type as Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

if(ANDROID)
    if(ANDROID_ABI STREQUAL ""armeabi-v7a"")
        set(ANDROID_EXTRA_LIBS_DIR ""${CMAKE_SYSROOT}/usr/lib/arm-linux-androideabi"")
    endif()
    set(ANDROID_EXTRA_LIBS
        ""${ANDROID_EXTRA_LIBS_DIR}/libavcodec.so,${ANDROID_EXTRA_LIBS_DIR}/libavformat.so,${ANDROID_EXTRA_LIBS_DIR}/libavutil.so,${ANDROID_EXTRA_LIBS_DIR}/libswresample.so,${ANDROID_EXTRA_LIBS_DIR}/libswscale.so""
    )
    set(ANDROID_PACKAGE_SOURCE_DIR ""${CMAKE_SOURCE_DIR}/src/gui/Android/manifest"")
endif()

# Silence warning about unused variable in QtCreator
set(QT_QMAKE_EXECUTABLE)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/src/cmake/Modules"")

include(FeatureSummary)

if(NOT CMAKE_HOST_WIN32 AND NOT ANDROID)
    find_package(PkgConfig REQUIRED)
else()
    find_package(DummyPkgConfig REQUIRED)
endif()

find_package(Qt5Widgets 5.6 REQUIRED)
if(Qt5Widgets_VERSION VERSION_LESS 5.6.3)
    message(AUTHOR_WARNING ""Qt5 >= 5.6.3, >= 5.9.1 is recommended"")
endif()

pkg_check_modules(LIBAVFORMAT REQUIRED libavformat>=57.71.100)
pkg_check_modules(LIBAVCODEC REQUIRED libavcodec>=57.89.100)
pkg_check_modules(LIBSWSCALE REQUIRED libswscale>=4.6.100)
pkg_check_modules(LIBAVUTIL REQUIRED libavutil>=55.58.100)
pkg_check_modules(LIBSWRESAMPLE REQUIRED libswresample>=2.7.100)

# Add FFmpeg link directories here, because it must be global.
# ""target_link_directories"" is supported since CMake 3.13, but QMPlay2 supports CMake 3.1.
link_directories(
    ${LIBAVFORMAT_LIBRARY_DIRS}
    ${LIBAVCODEC_LIBRARY_DIRS}
    ${LIBSWSCALE_LIBRARY_DIRS}
    ${LIBAVUTIL_LIBRARY_DIRS}
    ${LIBSWRESAMPLE_LIBRARY_DIRS}
)

set(CMAKE_LINK_DEPENDS_NO_SHARED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

if(${CMAKE_VERSION} VERSION_GREATER ""3.16.0"" OR ${CMAKE_VERSION} VERSION_EQUAL ""3.16.0"")
    option(USE_PCH ""Use precompiled headers"" OFF)
    add_feature_info(PCH USE_PCH ""Use precompiled headers"")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
    set(DEFAULT_ALSA ON)
    set(DEFAULT_PORTAUDIO OFF)
elseif(ANDROID)
    set(DEFAULT_ALSA OFF)
    set(DEFAULT_PORTAUDIO OFF)
else()
    set(DEFAULT_ALSA OFF)
    set(DEFAULT_PORTAUDIO ON)
endif()

if(APPLE OR ANDROID)
    set(DEFAULT_CUVID OFF)
else()
    set(DEFAULT_CUVID ON)
endif()

add_definitions(-D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -DQT_USE_FAST_OPERATOR_PLUS)

if(WIN32)
    option(USE_CMD ""Show CMD when running QMPlay2"" OFF)
    mark_as_advanced(USE_CMD)
    add_feature_info(CMD USE_CMD ""Show CMD when running QMPlay2"")
endif()

option(USE_OPENGL ""Build with OpenGL support"" ON)
add_feature_info(OpenGL USE_OPENGL ""Build with OpenGL support"")
if(USE_OPENGL)
    add_definitions(-DUSE_OPENGL)
endif()

if(NOT APPLE AND (Qt5Gui_VERSION VERSION_GREATER ""5.10.0"" OR Qt5Gui_VERSION VERSION_EQUAL ""5.10.0""))
    get_target_property(Qt5GuiFeatures Qt5::Gui INTERFACE_QT_ENABLED_FEATURES)
    list(FIND Qt5GuiFeatures ""vulkan"" Qt5Vulkan)
    if(${Qt5Vulkan} GREATER -1)
        set(VULKAN_AVAILABLE ON)
    endif()
endif()
option(USE_VULKAN ""Build with Vulkan support"" ${VULKAN_AVAILABLE})
add_feature_info(Vulkan USE_VULKAN ""Build with Vulkan support"")
if(USE_VULKAN)
    add_definitions(-DUSE_VULKAN)
endif()

option(USE_GLSLC ""Compile Vulkan shaders"" OFF)
add_feature_info(GLSLC USE_GLSLC ""Compile Vulkan shaders"")

if(NOT WIN32 AND NOT APPLE AND NOT ANDROID)
    option(USE_FREEDESKTOP_NOTIFICATIONS ""Use Freedesktop notifications"" ON)
    add_feature_info(""Freedesktop notifications"" USE_FREEDESKTOP_NOTIFICATIONS ""Use Freedesktop notifications"")
endif()

option(USE_MEDIABROWSER ""Build with MediaBrowser support"" ON)
add_feature_info(MediaBrowser USE_MEDIABROWSER ""Build with MediaBrowser support"")

option(USE_LASTFM ""Build with LastFM support"" ON)
add_feature_info(LastFM USE_LASTFM ""Build with LastFM support"")

option(USE_LYRICS ""Build with lyrics support"" ON)
add_feature_info(Lyrics USE_LYRICS ""Build with lyrics support"")

option(USE_LIBASS ""Build with libass support"" ON)
add_feature_info(libass USE_LIBASS ""Build with libass support"")

option(USE_INPUTS ""Build with Inputs module"" ON)
add_feature_info(Inputs USE_INPUTS ""Build with Inputs module"")

option(USE_MODPLUG ""Build with Modplug module"" ON)
add_feature_info(Modplug USE_MODPLUG ""Build with Modplug module"")

option(USE_EXTENSIONS ""Build with Extensions module"" ON)
add_feature_info(Extensions USE_EXTENSIONS ""Build with Extensions module"")

if(USE_EXTENSIONS AND NOT WIN32 AND NOT APPLE AND NOT ANDROID)
    option(USE_MPRIS2 ""Build Extensions with MPRIS2 support"" ON)
    add_feature_info(MPRIS2 USE_MPRIS2 ""Build Extensions with MPRIS2 support"")
endif()

option(USE_VISUALIZATIONS ""Build with Visualizations module"" ON)
add_feature_info(Visualizations USE_VISUALIZATIONS ""Build with Visualizations module"")

option(USE_AUDIOFILTERS ""Build with AudioFilters module"" ON)
add_feature_info(AudioFilters USE_AUDIOFILTERS ""Build with AudioFilters module"")

option(USE_VIDEOFILTERS ""Build with VideoFilters module"" ON)
add_feature_info(VideoFilters USE_VIDEOFILTERS ""Build with VideoFilters module"")

option(USE_PORTAUDIO ""Build with PortAudio module"" ${DEFAULT_PORTAUDIO})
add_feature_info(PortAudio USE_PORTAUDIO ""Build with PortAudio module"")

if(NOT DEFINED USE_TAGLIB)
    find_package(TagLib)
endif()
option(USE_TAGLIB ""Build with tags editor"" ${TAGLIB_FOUND})
add_feature_info(TagLib USE_TAGLIB ""Build with tags editor"")

if(NOT DEFINED USE_FFMPEG_VAAPI)
    pkg_check_modules(LIBS_VAAPI libva>=1.1.0 libva-drm)
endif()
option(USE_FFMPEG_VAAPI ""Build VAAPI acceleration into FFmpeg"" ${LIBS_VAAPI_FOUND})
add_feature_info(VAAPI USE_FFMPEG_VAAPI ""Build VAAPI acceleration into FFmpeg"")

if(NOT DEFINED USE_FFMPEG_VDPAU)
    pkg_check_modules(LIBS_VDPAU vdpau x11)
endif()
option(USE_FFMPEG_VDPAU ""Build VDPAU acceleration into FFmpeg"" ${LIBS_VDPAU_FOUND})
add_feature_info(VDPAU USE_FFMPEG_VDPAU ""Build VDPAU acceleration into FFmpeg"")

if(WIN32)
    option(USE_FFMPEG_DXVA2 ""Build DXVA2 acceleration into FFmpeg"" ON)
    add_feature_info(DXVA2 USE_FFMPEG_DXVA2 ""Build DXVA2 acceleration into FFmpeg"")

    if(USE_VULKAN)
        option(USE_FFMPEG_D3D11VA ""Build D3D11VA acceleration into FFmpeg"" ON)
        add_feature_info(DXVA2 USE_FFMPEG_D3D11VA ""Build D3D11VA acceleration into FFmpeg"")
    endif()
endif()

if(APPLE)
    option(USE_FFMPEG_VTB ""Build VideoToolBox acceleration into FFmpeg"" ON)
    add_feature_info(VTB USE_FFMPEG_VTB ""Build VideoToolBox acceleration into FFmpeg"")
endif()

if(NOT DEFINED USE_FFMPEG_AVDEVICE)
    if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
        pkg_check_modules(LIBAVDEVICE libavdevice)
        set(DEFAULT_AVDEVICE ${LIBAVDEVICE_FOUND})
    else()
        set(DEFAULT_AVDEVICE OFF)
    endif()
endif()
option(USE_FFMPEG_AVDEVICE ""Build FFmpeg with libavdevice suport"" ${DEFAULT_AVDEVICE})
add_feature_info(libavdevice USE_FFMPEG_AVDEVICE ""Build FFmpeg with libavdevice suport"")

if(NOT DEFINED USE_AUDIOCD)
    pkg_check_modules(LIBCD libcdio libcddb)
endif()
option(USE_AUDIOCD ""Build with AudioCD module"" ${LIBCD_FOUND})
add_feature_info(AudioCD USE_AUDIOCD ""Build with AudioCD module"")

option(USE_ALSA ""Build with ALSA module"" ${DEFAULT_ALSA})
add_feature_info(ALSA USE_ALSA ""Build with ALSA module"")

if(NOT DEFINED USE_CHIPTUNE_GME)
    find_package(GME)
endif()
option(USE_CHIPTUNE_GME ""Build Chiptune with GME support"" ${LIBGME_FOUND})
add_feature_info(""Chiptune GME"" USE_CHIPTUNE_GME ""Build Chiptune with GME support"")

if(NOT DEFINED USE_CHIPTUNE_SID)
    pkg_check_modules(LIBSIDPLAYFP libsidplayfp)
endif()
option(USE_CHIPTUNE_SID ""Build Chiptune with SIDPLAY support"" ${LIBSIDPLAYFP_FOUND})
add_feature_info(""Chiptune SIDPLAY"" USE_CHIPTUNE_SID ""Build Chiptune with SIDPLAY support"")

if(NOT DEFINED USE_PULSEAUDIO)
    pkg_check_modules(LIBPULSE libpulse-simple)
endif()
option(USE_PULSEAUDIO ""Build with PulseAudio module"" ${LIBPULSE_FOUND})
add_feature_info(PulseAudio USE_PULSEAUDIO ""Build with PulseAudio module"")

if(NOT DEFINED USE_XVIDEO)
    pkg_check_modules(LIB_X11_XV x11 xv)
endif()
option(USE_XVIDEO ""Build with XVideo module"" ${LIB_X11_XV_FOUND})
add_feature_info(XVideo USE_XVIDEO ""Build with XVideo module"")

option(USE_CUVID ""Build with CUVID module"" ${DEFAULT_CUVID})
add_feature_info(CUVID USE_CUVID ""Build with CUVID module"")

option(USE_NOTIFY ""Build additional notifications module"" ON)
add_feature_info(Notifications USE_NOTIFY ""Build additional notifications module"")

set(LANGUAGES ""All"" CACHE STRING ""A space-seperated list of translations to compile into QMPlay2 or \""All\"""")

if(USE_FFMPEG_VAAPI OR USE_FFMPEG_VDPAU)
    option(FIND_HWACCEL_DRIVERS_PATH ""Find drivers path for hwaccel, useful for universal package"" OFF)
    add_feature_info(FindHwaccelDrivers FIND_HWACCEL_DRIVERS_PATH ""Find drivers path for hwaccel"")
endif()

if(NOT WIN32)
    # get QMPlay2 version by running the version script
    execute_process(
        COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/version
        OUTPUT_VARIABLE QMPLAY2_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

option(USE_GIT_VERSION ""Append Git HEAD to QMPlay2 version (if exists)"" ON)
if(USE_GIT_VERSION)
    # get QMPlay2 Git HEAD by running git command
    execute_process(
        COMMAND git rev-parse --short HEAD
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE QMPLAY2_GIT_HEAD
        OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()
add_feature_info(""Git version"" QMPLAY2_GIT_HEAD ""Append Git HEAD to QMPlay2 version"")

if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" OR CMAKE_CXX_COMPILER_ID MATCHES ""Clang"") # GCC or Clang
    option(USE_LINK_TIME_OPTIMIZATION ""Enable link time optimization for release builds"" OFF)
    add_feature_info(""Link Time Optimization"" USE_LINK_TIME_OPTIMIZATION ""Enable link time optimization for release builds"")

    option(USE_ASAN ""Use Address Sanitizer"" OFF)
    add_feature_info(""Address Sanitizer"" USE_ASAN ""Use Address Sanitizer"")

    option(USE_UBSAN ""Use Undefined Behavior Sanitizer"" OFF)
    add_feature_info(""Undefined Behavior Sanitizer"" USE_UBSAN ""Use Undefined Behavior Sanitizer"")

    if(USE_ASAN)
        set(CMAKE_CXX_FLAGS ""-fsanitize=address -fno-omit-frame-pointer ${CMAKE_CXX_FLAGS}"")
        set(RELEASE_DEBUG_FLAG ""-g"")
    else()
        set(RELEASE_DEBUG_FLAG ""-g0"")
    endif()

    if(USE_UBSAN)
        set(CMAKE_CXX_FLAGS ""-fsanitize=undefined ${CMAKE_CXX_FLAGS}"")
    endif()

    # Hide symbols, and also make sure that debugging symbols are disabled
    set(CMAKE_CXX_FLAGS_RELEASE    ""${RELEASE_DEBUG_FLAG} -fvisibility=hidden -fvisibility-inlines-hidden ${CMAKE_CXX_FLAGS_RELEASE}"")
    set(CMAKE_CXX_FLAGS_MINSIZEREL ""${RELEASE_DEBUG_FLAG} -fvisibility=hidden -fvisibility-inlines-hidden ${CMAKE_CXX_FLAGS_MINSIZEREL}"")
    if(NOT USE_VULKAN)
        set(CMAKE_CXX_FLAGS_RELEASE    ""-fno-exceptions ${CMAKE_CXX_FLAGS_RELEASE}"")
        set(CMAKE_CXX_FLAGS_MINSIZEREL ""-fno-exceptions ${CMAKE_CXX_FLAGS_MINSIZEREL}"")
    endif()

    if(NOT CMAKE_BUILD_TYPE MATCHES ""Deb"")
        if(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
            # remove '-rdynamic' for Release build
            string(REPLACE ""-rdynamic"" """" CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS ${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS})
        endif()
        set(CMAKE_CXX_FLAGS ""-Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}"") # disable deprecated declarations warnings for Release build
    endif()
    # enable warnings
    set(CMAKE_CXX_FLAGS ""-Wall ${CMAKE_CXX_FLAGS}"")

    if(USE_LINK_TIME_OPTIMIZATION)
        set(CMAKE_CXX_FLAGS_RELEASE    ""-flto ${CMAKE_CXX_FLAGS_RELEASE}"")
        set(CMAKE_CXX_FLAGS_MINSIZEREL ""-flto ${CMAKE_CXX_FLAGS_RELEASE}"")
    endif()

    if(CMAKE_MODULE_LINKER_FLAGS)
        # allow undefined references for modules
        string(REPLACE ""-Wl,--no-undefined,"" ""-Wl,"" CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS})
        string(REPLACE ""-Wl,--no-undefined"" """" CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS})
        string(REPLACE ""--no-undefined,"" """" CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS})
        string(REPLACE "",--no-undefined"" """" CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS})
        string(REPLACE ""--no-undefined"" """" CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS})
    endif()
endif()

if(APPLE)
    set(MAC_BUNDLE_PATH ""${CMAKE_INSTALL_PREFIX}/QMPlay2.app"")

    # set paths to Bundle
    set(CMAKE_INSTALL_DATAROOTDIR ""${MAC_BUNDLE_PATH}/Contents/share"")
    set(CMAKE_INSTALL_LIBDIR      ""${MAC_BUNDLE_PATH}/Contents/MacOS"")
elseif(NOT WIN32)
    include(GNUInstallDirs)
endif()

if(NOT APPLE)
    set(INSTALL_PATH_ICONS ""${CMAKE_INSTALL_DATAROOTDIR}/icons"")
    set(INSTALL_PATH_MIME ""${CMAKE_INSTALL_DATAROOTDIR}/mime"")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL ""FreeBSD"" AND CMAKE_INSTALL_PREFIX STREQUAL ""/usr/local"")
    set(INSTALL_PATH_MAN ""man"") # exception for FreeBSD
else()
    set(INSTALL_PATH_MAN ${CMAKE_INSTALL_MANDIR})
endif()

if(APPLE)
    find_library(APPKIT_LIBRARY AppKit)
    find_library(IOKIT_LIBRARY IOKit)
    set(SOLID_ACTIONS_DEFAULT ""None"")
    set(DEFAULT_INSTALL_RPATH ON)
endif()

if(NOT WIN32 AND NOT APPLE)
    # RPATH
    option(SET_INSTALL_RPATH ""Set RPATH for executable after install"" ${DEFAULT_INSTALL_RPATH})

    # Solid actions
    set(SOLID_ACTIONS_INSTALL_PATH ${SOLID_ACTIONS_DEFAULT} CACHE STRING ""The destination path for the Solid actions (\""None\"" to disable)"")
endif()

if(USE_FREEDESKTOP_NOTIFICATIONS OR USE_MPRIS2)
    find_package(Qt5DBus REQUIRED)
endif()

if(USE_MEDIABROWSER)
    find_package(Qt5Qml REQUIRED)
    set(USE_QML ON)
endif()

find_package(Qt5Svg REQUIRED)
if(ANDROID)
    find_package(Qt5AndroidExtras REQUIRED)
endif()

if(USE_VULKAN)
    set(Vulkan_INCLUDE_DIRS ""${CMAKE_SOURCE_DIR}/src/qmplay2/vulkan/headers/include"")
    set(QMVK_LIBRARY_TYPE STATIC)
    set(QMVK_USE_PCH ${USE_PCH})
    add_subdirectory(src/qmvk)
endif()
add_subdirectory(src/qmplay2)
add_subdirectory(src/modules)
add_subdirectory(src/gui)
if(LANGUAGES)
    add_subdirectory(lang)
endif()

if(WIN32)
    install(FILES AUTHORS ChangeLog LICENSE README.md DESTINATION ${CMAKE_INSTALL_PREFIX})
else()
    install(FILES AUTHORS ChangeLog LICENSE README.md DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/qmplay2"")
endif()

if(NOT APPLE AND NOT WIN32)
    # uninstall target
    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/src/cmake/Uninstall.cmake.in""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
        IMMEDIATE @ONLY)

    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"")
endif()

feature_summary(WHAT ENABLED_FEATURES DESCRIPTION ""Enabled features:"")
feature_summary(WHAT DISABLED_FEATURES DESCRIPTION ""Disabled features:"")
message(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
",3.1,3.1
36320,Matroska-Org,libmatroska,False,False,False,False,False,10,C++,2020-05-17 02:24:40+00:00,2013-01-02 12:56:15+00:00,159,220,"cmake_minimum_required(VERSION 3.1.2)

project(matroska VERSION 1.5.2)

option(DISABLE_PKGCONFIG ""Disable PkgConfig module generation"" OFF)
option(DISABLE_CMAKE_CONFIG ""Disable CMake package config module generation"" OFF)

find_package(EBML 1.3.9 REQUIRED)

include(GNUInstallDirs)

set(libmatroska_SOURCES
  src/FileKax.cpp
  src/KaxAttached.cpp
  src/KaxAttachments.cpp
  src/KaxBlock.cpp
  src/KaxBlockData.cpp
  src/KaxCluster.cpp
  src/KaxContexts.cpp
  src/KaxCues.cpp
  src/KaxCuesData.cpp
  src/KaxInfoData.cpp
  src/KaxSeekHead.cpp
  src/KaxSegment.cpp
  src/KaxSemantic.cpp
  src/KaxTracks.cpp
  src/KaxVersion.cpp)

set(libmatroska_PUBLIC_HEADERS
  matroska/FileKax.h
  matroska/KaxAttached.h
  matroska/KaxAttachments.h
  matroska/KaxBlockData.h
  matroska/KaxBlock.h
  matroska/KaxChapters.h
  matroska/KaxClusterData.h
  matroska/KaxCluster.h
  matroska/KaxConfig.h
  matroska/KaxContentEncoding.h
  matroska/KaxContexts.h
  matroska/KaxCuesData.h
  matroska/KaxCues.h
  matroska/KaxDefines.h
  matroska/KaxInfoData.h
  matroska/KaxInfo.h
  matroska/KaxSeekHead.h
  matroska/KaxSegment.h
  matroska/KaxSemantic.h
  matroska/KaxTag.h
  matroska/KaxTags.h
  matroska/KaxTrackAudio.h
  matroska/KaxTrackEntryData.h
  matroska/KaxTracks.h
  matroska/KaxTrackVideo.h
  matroska/KaxTypes.h
  matroska/KaxVersion.h)

set (libmatroska_C_PUBLIC_HEADERS
  matroska/c/libmatroska.h
  matroska/c/libmatroska_t.h)

add_library(matroska ${libmatroska_SOURCES} ${libmatroska_PUBLIC_HEADERS} ${libmatroska_C_PUBLIC_HEADERS})
target_link_libraries(matroska PUBLIC EBML::ebml)
set_target_properties(matroska PROPERTIES
  VERSION 6.0.0
  SOVERSION 6)
target_include_directories(matroska
  PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
	PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
if(MSVC)
  target_compile_definitions(matroska PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

include(GenerateExportHeader)
generate_export_header(matroska EXPORT_MACRO_NAME MATROSKA_DLL_API)
target_sources(matroska
  PRIVATE
    ${CMAKE_CURRENT_BINARY_DIR}/matroska_export.h
)

if(NOT BUILD_SHARED_LIBS)
  target_compile_definitions(matroska PUBLIC MATROSKA_STATIC_DEFINE)
endif()

install(TARGETS matroska
  EXPORT MatroskaTargets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

install(FILES ${libmatroska_PUBLIC_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/matroska)
install(FILES ${libmatroska_C_PUBLIC_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/matroska/c)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/matroska_export.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/matroska)

if(NOT DISABLE_PKGCONFIG)
  set(prefix ${CMAKE_INSTALL_PREFIX})
  set(exec_prefix ""\$\{prefix\}"")
  set(libdir ""\$\{prefix\}/${CMAKE_INSTALL_LIBDIR}"")
  set(includedir ""\$\{prefix\}/${CMAKE_INSTALL_INCLUDEDIR}"")
  set(PACKAGE_VERSION ${PROJECT_VERSION})
  configure_file(libmatroska.pc.in libmatroska.pc @ONLY)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libmatroska.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()

if(NOT DISABLE_CMAKE_CONFIG)
  set(CMAKE_INSTALL_PACKAGEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/Matroska)
  include(CMakePackageConfigHelpers)
  configure_package_config_file(MatroskaConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/MatroskaConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
  write_basic_package_version_file(MatroskaConfigVersion.cmake COMPATIBILITY SameMajorVersion)
  install(EXPORT MatroskaTargets NAMESPACE Matroska:: DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/MatroskaConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/MatroskaConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})
endif()
",3.1.2,3.1
36369,Koromix,ty,False,False,False,False,False,3,C,2020-03-01 17:15:11+00:00,2014-08-29 18:14:34+00:00,97,1387,"# TyTools - public domain
# Niels Martignène <niels.martignene@protonmail.com>
# https://koromix.dev/tytools

# This software is in the public domain. Where that dedication is not
# recognized, you are granted a perpetual, irrevocable license to copy,
# distribute, and modify this file as you see fit.

# See the LICENSE file for more details.

set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.10"" CACHE STRING """")
cmake_minimum_required(VERSION 3.1)
project(TyTools C CXX)

if(CONFIG_VARIANT)
    if(IS_ABSOLUTE ${CONFIG_VARIANT})
        set(CONFIG_VARIANT_PATH ${CONFIG_VARIANT})
    else()
        set(CONFIG_VARIANT_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/variants/${CONFIG_VARIANT}"")
    endif()
    if(EXISTS ""${CONFIG_VARIANT_PATH}/variant.cmake"")
        include(""${CONFIG_VARIANT_PATH}/variant.cmake"")
    endif()

    set(USE_UNITY_BUILDS OFF CACHE BOOL """")
endif()

set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH})
include(""cmake/Utility.cmake"")

set(VERSION_DEFAULT ""0.9.0"" CACHE STRING ""Default version number"")
set(VERSION_WITH_GIT ON CACHE BOOL ""Compute version using git tags (fallback)"")

set(CONFIG_TYCMD_BUILD ON CACHE BOOL ""Build tycmd (Teensy command-line manager)"")
set(CONFIG_TYCMD_EXECUTABLE ""tycmd"" CACHE STRING ""Rename tycmd executable"")
set(CONFIG_TYCMD_NAME ""tycmd"" CACHE STRING ""Rename tycmd application"")

set(CONFIG_TYCOMMANDER_BUILD ON CACHE BOOL ""Build TyCommander (Teensy GUI manager)"")
if(WIN32 OR APPLE)
    set(CONFIG_TYCOMMANDER_EXECUTABLE ""TyCommander"" CACHE STRING ""Rename TyCommander executable"")
else()
    set(CONFIG_TYCOMMANDER_EXECUTABLE ""tycommander"" CACHE STRING ""Rename TyCommander executable"")
endif()
set(CONFIG_TYCOMMANDER_NAME ""TyCommander"" CACHE STRING ""Rename TyCommander application"")

set(CONFIG_TYUPDATER_BUILD ON CACHE BOOL ""Build TyUpdater (Teensy GUI updater)"")
if(WIN32 OR APPLE)
    set(CONFIG_TYUPDATER_EXECUTABLE ""TyUpdater"" CACHE STRING ""Rename TyUpdater executable"")
else()
    set(CONFIG_TYUPDATER_EXECUTABLE ""tyupdater"" CACHE STRING ""Rename TyUpdater executable"")
endif()
set(CONFIG_TYUPDATER_NAME ""TyUpdater"" CACHE STRING ""Rename TyUpdater application"")

set(CONFIG_URL_WEBSITE ""https://github.com/Koromix/tytools"" CACHE STRING ""Project website"")
set(CONFIG_URL_BUGS ""https://github.com/Koromix/tytools/issues"" CACHE STRING ""Project bug report page"")

set(CONFIG_PACKAGE_NAME ""TyTools"" CACHE STRING ""Package / installer name"")
set(CONFIG_PACKAGE_FILENAME ""TyTools"" CACHE STRING ""Package / installer filename"")

if(MSVC)
    set(USE_SHARED_MSVCRT OFF CACHE BOOL ""Build with shared version of MS CRT (/MD)"")
endif()
set(BUILD_EXAMPLES ON CACHE BOOL ""Build library examples"")

if(MSVC)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS)
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO"")

    if(NOT USE_SHARED_MSVCRT)
        foreach(lang C CXX)
            foreach(mode DEBUG RELEASE RELWITHDEBINFO MINSIZEREL)
                string(REPLACE ""/MD"" ""/MT"" CMAKE_${lang}_FLAGS_${mode} ""${CMAKE_${lang}_FLAGS_${mode}}"")
            endforeach()
        endforeach()
    endif()

    include_directories(contrib/msvc)
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -fvisibility=hidden -D_FILE_OFFSET_BITS=64 -Wall -Wextra -Wno-missing-field-initializers -Wno-missing-braces -Wshadow -Wconversion -Wformat=2"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11 -fvisibility=hidden -D_FILE_OFFSET_BITS=64 -Wall -Wextra -Wno-missing-field-initializers -Wold-style-cast -Wformat=2"")

    foreach(lang C CXX)
        foreach(mode RELEASE RELWITHDEBINFO MINSIZEREL)
            set(CMAKE_${lang}_FLAGS_${mode} ""${CMAKE_${lang}_FLAGS_${mode}} -D_FORTIFY_SOURCE=2"")
        endforeach()
    endforeach()

    if(MINGW)
        add_definitions(-D__USE_MINGW_ANSI_STDIO=1)
        # Latest approach to force MinGW to statically link libwinpthread, until a new
        # version breaks this one too.
        set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -Wl,-Bstatic"")
        set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++ -Wl,-Bstatic"")
        set(CMAKE_CXX_STANDARD_LIBRARIES ""${CMAKE_CXX_STANDARD_LIBRARIES} -lstdc++ -lwinpthread"")
    endif()
endif()

if(WIN32)
    add_definitions(-DWINVER=0x0602 -D_WIN32_WINNT=0x0602)
elseif(APPLE)
    if(POLICY CMP0042)
        cmake_policy(SET CMP0042 NEW)
    endif()

    # https://stackoverflow.com/questions/4929255/building-static-libraries-on-mac-using-cmake-and-gcc
    set(CMAKE_C_ARCHIVE_CREATE ""<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_CXX_ARCHIVE_CREATE ""<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>"")
    set(CMAKE_C_ARCHIVE_FINISH ""<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>"")
    set(CMAKE_CXX_ARCHIVE_FINISH ""<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>"")

    set(CMAKE_INSTALL_NAME_DIR ""@rpath"")
    set(CMAKE_INSTALL_RPATH ""@executable_path;@executable_path/../lib;@executable_path/../Frameworks"")
endif()

set(VERSION ${VERSION_DEFAULT})
if(VERSION_WITH_GIT AND EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/.git"")
    find_package(Git)
    if(GIT_FOUND)
        # Recompute the version string after each commit, does not work for tags though
        if(EXISTS ""${CMAKE_SOURCE_DIR}/.git/logs/HEAD"")
            configure_file(""${CMAKE_SOURCE_DIR}/.git/logs/HEAD"" git_logs_HEAD COPYONLY)
        endif()
        execute_process(
            COMMAND ${GIT_EXECUTABLE} describe --tags
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
            OUTPUT_VARIABLE VERSION
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        string(SUBSTRING ${VERSION} 1 -1 VERSION)
    endif()
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")

add_subdirectory(src/libhs)
add_subdirectory(src/libty)
if(CONFIG_TYCMD_BUILD)
    add_subdirectory(src/tycmd)
endif()
if(CONFIG_TYCOMMANDER_BUILD)
    add_subdirectory(src/tycommander)
    list(APPEND CPACK_PACKAGE_EXECUTABLES tycommander ""${CONFIG_TYCOMMANDER_NAME}"")
endif()
if(CONFIG_TYUPDATER_BUILD)
    add_subdirectory(src/tyupdater)
    list(APPEND CPACK_PACKAGE_EXECUTABLES tyupdater ""${CONFIG_TYUPDATER_NAME}"")
endif()

set(BUILD_TESTS ON CACHE BOOL ""Build unit tests and enable CTest"")
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests/libty)
endif()

set(CPACK_PACKAGE_NAME ""${CONFIG_PACKAGE_NAME}"")
string(REGEX REPLACE ""\\-.*$"" """" CPACK_PACKAGE_VERSION ""${VERSION}"")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ""${CONFIG_PACKAGE_FILENAME}"")

if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-win64"")
    else()
        set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-win32"")
    endif()
    if(CONFIG_TYCOMMANDER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYCOMMANDER_ICON_FILE_PREFIX}.ico"")
    elseif(CONFIG_TYUPDATER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYUPDATER_ICON_FILE_PREFIX}.ico"")
    endif()
    if (NOT CONFIG_VARIANT AND NOT CMAKE_CROSSCOMPILING)
        set(CPACK_GENERATOR ZIP WIX)
    else()
        set(CPACK_GENERATOR ZIP)
    endif()

    set(CPACK_WIX_UPGRADE_GUID ""72663aca-47a7-4b9b-aa53-aa067b872b8a"")
    set(CPACK_WIX_PRODUCT_ICON ""${CPACK_PACKAGE_ICON}"")
    set(CPACK_WIX_UI_BANNER ""${CMAKE_SOURCE_DIR}/contrib/images/wix_banner.jpg"")
    set(CPACK_WIX_UI_DIALOG ""${CMAKE_SOURCE_DIR}/contrib/images/wix_dialog.jpg"")
    set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/LICENSE.txt"")

    if(CONFIG_TYCOMMANDER_BUILD OR CONFIG_TYCMD_BUILD)
        # Someday, notepad will support LF newlines and this won't be necessary anymore
        file(WRITE ""${CMAKE_BINARY_DIR}/dos2unix.cmake"" ""configure_file(\${IN} \${OUT} NEWLINE_STYLE CRLF)"")
        add_custom_command(OUTPUT README_crlf.md COMMAND ${CMAKE_COMMAND}
            ARGS -DIN=""${CMAKE_SOURCE_DIR}/README.md"" -DOUT=""${CMAKE_BINARY_DIR}/README_crlf.md"" -P ""${CMAKE_BINARY_DIR}/dos2unix.cmake"")
        add_custom_command(OUTPUT LICENSE_crlf.txt COMMAND ${CMAKE_COMMAND}
            ARGS -DIN=""${CMAKE_SOURCE_DIR}/LICENSE.txt"" -DOUT=""${CMAKE_BINARY_DIR}/LICENSE_crlf.txt"" -P ""${CMAKE_BINARY_DIR}/dos2unix.cmake"")
        add_custom_target(crlf ALL DEPENDS README_crlf.md LICENSE_crlf.txt)

        install(FILES ""${CMAKE_BINARY_DIR}/README_crlf.md"" DESTINATION . RENAME README.txt)
        install(FILES ""${CMAKE_BINARY_DIR}/LICENSE_crlf.txt"" DESTINATION . RENAME LICENSE.txt)
    else()
        set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
    endif()
    if(MINGW)
        install(DIRECTORY contrib/mingw/ DESTINATION . FILES_MATCHING PATTERN *.txt)
    endif()

    include(CPack)
elseif(APPLE)
    set(CPACK_PACKAGE_FILE_NAME ""${CONFIG_PACKAGE_FILENAME}-${VERSION}-osx"")
    if(CONFIG_TYCOMMANDER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYCOMMANDER_ICON_FILE_PREFIX}.icns"")
    elseif(CONFIG_TYUPDATER_BUILD)
        set(CPACK_PACKAGE_ICON ""${TYUPDATER_ICON_FILE_PREFIX}.icns"")
    endif()
    set(CPACK_GENERATOR DragNDrop)

    if(CONFIG_TYCOMMANDER_BUILD OR CONFIG_TYCMD_BUILD)
        install(FILES README.md DESTINATION . RENAME README.txt)
        install(FILES LICENSE.txt DESTINATION .)
    endif()

    include(CPack)
endif()
",3.1,3.1
36432,Nitrokey,nitrokey-app,False,False,False,False,False,24,C++,2020-04-25 09:04:01+00:00,2014-11-17 19:20:30+00:00,181,1594,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0 FATAL_ERROR)
cmake_policy(SET CMP0043 OLD) # cmake --help-policy CMP0043

PROJECT(NitrokeyApp LANGUAGES CXX)
SET(PROJECT_VERSION ""1.4.0"")
set(LIBNK_MIN_VERSION 3.5)

include(GNUInstallDirs)


set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

OPTION(ADD_GIT_INFO ""Add information about source code version from Git repository"" TRUE)
set(BUILD_SHARED_LIBS ON CACHE BOOL ""Build all libraries as shared"")

IF (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE RelWithDebInfo)
ENDIF()
MESSAGE(""${PROJECT_NAME}: Build type: ${CMAKE_BUILD_TYPE}"")

IF(UNIX)
    OPTION(ADD_ASAN ""Use ASAN to show memory issues"" FALSE)
    OPTION(ADD_TSAN ""Use TSAN to show thread issues"" FALSE)
    IF(ADD_ASAN)
        SET(EXTRA_LIBS ${EXTRA_LIBS} asan )
        ADD_DEFINITIONS(-fsanitize=address -fno-omit-frame-pointer)
    ENDIF()
    IF(ADD_TSAN)
        SET(EXTRA_LIBS ${EXTRA_LIBS} tsan )
        ADD_DEFINITIONS(-fsanitize=thread -fno-omit-frame-pointer  -g) #use with clang
    ENDIF()
ENDIF()


#add CMake build info
ADD_DEFINITIONS(-DCMAKE_BUILD_TYPE=""${CMAKE_BUILD_TYPE}"")
ADD_DEFINITIONS(-DCMAKE_CXX_COMPILER=""${CMAKE_CXX_COMPILER_ID}, ${CMAKE_CXX_COMPILER}, built on: ${CMAKE_SYSTEM} "")
ADD_DEFINITIONS(-DCMAKE_CXX_FLAGS=""${CMAKE_CXX_FLAGS}"")


# QT configuration
FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Gui REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Svg REQUIRED)
FIND_PACKAGE(Qt5Concurrent REQUIRED)


# add git version info
IF(ADD_GIT_INFO)
execute_process(
        COMMAND git describe --always --abbrev=4 HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE
)
    add_definitions(-DGIT_VERSION=""${GIT_VERSION}"")
ELSE()
    add_definitions(-DGIT_VERSION="""")
ENDIF()

add_definitions(-DGUI_VERSION=""${PROJECT_VERSION}"")


# for out of source build
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Directory structure

SET(ROOTDIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(UIDIR ${ROOTDIR}/ui)
SET(SRCDIR ${ROOTDIR}/src)
SET(SRCUIDIR ${SRCDIR}/ui)
SET(UTILSDIR ${SRCDIR}/utils)


# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# Resource files
SET(qrc_files
    resources.qrc
)

# create translation files to include into resource file
# remember to add new translations files there
IF (UNIX AND NOT APPLE)
	ADD_SUBDIRECTORY(i18n)
	find_package(Qt5LinguistTools)
	file(GLOB i18n_files ""i18n/*.ts"")
	qt5_create_translation(i18n_resources ${SRCUIDIR} ${i18n_files})
	qt5_add_translation(TRANSLATION_QM ${i18n_files})
ENDIF()

IF (WIN32)
ELSEIF(APPLE)
ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"" OR ${CMAKE_SYSTEM_NAME} MATCHES ""BSD"")
    SET( platform_specific_sources ${SRCDIR}/systemutils.cpp)
ENDIF () # WIN32

INCLUDE_DIRECTORIES(
  ${UIDIR}
  ${SRCDIR}
  ${UTILSDIR}
  ${SRCUIDIR}
)

# c/cpp sources
SET(nitrokey_app_sources
    ${SRCUIDIR}/aboutdialog.cpp
    ${SRCUIDIR}/nitrokey-applet.cpp
    ${SRCDIR}/hotpslot.cpp
    ${SRCDIR}/main.cpp
    ${SRCDIR}/core/SecureString.cpp
    ${SRCUIDIR}/mainwindow.cpp
    ${SRCUIDIR}/pindialog.cpp
#    ${SRCUIDIR}/securitydialog.cpp
    ${SRCUIDIR}/stick20changepassworddialog.cpp
    ${SRCUIDIR}/stick20debugdialog.cpp
    ${SRCUIDIR}/stick20hiddenvolumedialog.cpp
    ${SRCUIDIR}/stick20lockfirmwaredialog.cpp
    ${SRCUIDIR}/stick20responsedialog.cpp
    ${SRCUIDIR}/stick20updatedialog.cpp
    ${platform_specific_sources}
        src/libada.cpp src/libada.h src/utils/bool_values.h src/GUI/Tray.cpp src/GUI/Tray.h src/GUI/Clipboard.cpp src/GUI/Clipboard.h src/GUI/Authentication.cpp src/GUI/Authentication.h src/core/ScopedGuard.h src/version.h src/GUI/StorageActions.cpp src/GUI/StorageActions.h
        src/ui/licensedialog.cpp
        src/GUI/ManageWindow.cpp
	src/GUI/graphicstools.cpp
        #        src/GUI/PasswordSafe.cpp src/GUI/PasswordSafe.h
        src/core/ThreadWorker.cpp src/core/ThreadWorker.h)

#INSTALL

# Freedesktop files
IF(NOT WIN32)
  install(DIRECTORY
    ${CMAKE_SOURCE_DIR}/data/icons/
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons
  )

  install(FILES
    ${CMAKE_SOURCE_DIR}/data/nitrokey-app.desktop
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications
  )

  install(FILES
    ${CMAKE_SOURCE_DIR}/data/com.nitrokey.nitrokey-app.appdata.xml
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/metainfo/
  )

  install(FILES
    ${CMAKE_SOURCE_DIR}/data/icons/hicolor/128x128/apps/nitrokey-app.png
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pixmaps
  )

  find_package(PkgConfig)

  # Install Nitrokey udev rules
  # Removed - should be provided by libnitrokey

  # Install autocompletion scripts
  set(PKG_GET_BASH_COMPLETION ${PKG_CONFIG_EXECUTABLE} --variable=completionsdir bash-completion)
  execute_process(COMMAND ${PKG_GET_BASH_COMPLETION} RESULT_VARIABLE ERR OUTPUT_VARIABLE BASH_COMPLETION_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(${ERR})
    set(BASH_COMPLETION_DIR ""etc/bash_completion.d"")
  ENDIF()
  string(REGEX REPLACE ""^/"" """" BASH_COMPLETION_DIR ""${BASH_COMPLETION_DIR}"")
  string(REGEX REPLACE ""^usr/"" """" BASH_COMPLETION_DIR ""${BASH_COMPLETION_DIR}"") # usual prefix is usr/local
  message(STATUS ""Setting bash-completion dir to ${BASH_COMPLETION_DIR}"")

  install(FILES
   ${CMAKE_SOURCE_DIR}/data/bash-autocomplete/nitrokey-app
    DESTINATION ${BASH_COMPLETION_DIR}
  )

ENDIF () # NOT WIN32


ADD_EXECUTABLE(nitrokey-app ${GUI_TYPE}
  ${nitrokey_app_sources}
  ${i18n_resources}
        ${qrc_files}
)

OPTION(ERROR_ON_WARNING ""Stop compilation on warning found (not supported for MSVC)"" OFF)
if (NOT MSVC)
    set(COMPILE_FLAGS ""-Wall -Wno-unused-function -Wcast-qual -Woverloaded-virtual"")
    #    IF(NOT APPLE)
    if (ERROR_ON_WARNING)
        set(COMPILE_FLAGS ""${COMPILE_FLAGS} -Werror"")
    endif()
    SET_TARGET_PROPERTIES(nitrokey-app PROPERTIES COMPILE_FLAGS ${COMPILE_FLAGS} )
    #    endif()
endif()

INSTALL(TARGETS nitrokey-app DESTINATION ${CMAKE_INSTALL_BINDIR})

TARGET_LINK_LIBRARIES(nitrokey-app
  ${EXTRA_LIBS}
#  ${platform_specific_libs}
  Qt5::Widgets Qt5::Core Qt5::Gui Qt5::Svg Qt5::Concurrent
)

# first try to find libnitrokey via pkg-config
find_package(PkgConfig)
pkg_search_module(LIBNITROKEY ${_pkgconfig_REQUIRED} libnitrokey-1 >= ${LIBNK_MIN_VERSION})

MESSAGE(STATUS ""Required libnitrokey version: ${LIBNK_MIN_VERSION}"")
if(LIBNITROKEY_FOUND)
  MESSAGE(STATUS ""Found system libnitrokey (Cflags: '${LIBNITROKEY_CFLAGS}' Libs: '${LIBNITROKEY_LDFLAGS}')"")
  if (BUILD_SHARED_LIBS)
    target_compile_options(nitrokey-app PRIVATE ${LIBNITROKEY_CFLAGS})
    target_link_libraries(nitrokey-app ${LIBNITROKEY_LDFLAGS})
  else()
    target_compile_options(nitrokey-app PRIVATE ${LIBNITROKEY_STATIC_CFLAGS})
    target_link_libraries(nitrokey-app ${LIBNITROKEY_STATIC_LDFLAGS})
  endif()
else()
  MESSAGE(""Using bundled libnitrokey"")
  add_subdirectory (libnitrokey)
  include_directories(libnitrokey)
  target_link_libraries(nitrokey-app nitrokey)
endif()

# ... same for cppcodec
pkg_search_module(CPPCODEC cppcodec-1)

if(CPPCODEC_FOUND)
  MESSAGE(STATUS ""Found system cppcodec (Cflags: '${CPPCODEC_CFLAGS}' Libs: '${CPPCODEC_LDFLAGS}')"")
  if (BUILD_SHARED_LIBS)
    target_compile_options(nitrokey-app PRIVATE ${CPPCODEC_CFLAGS})
    target_link_libraries(nitrokey-app ${CPPCODEC_LDFLAGS})
  else()
    target_compile_options(nitrokey-app PRIVATE ${CPPCODEC_STATIC_CFLAGS})
    target_link_libraries(nitrokey-app ${CPPCODEC_STATIC_LDFLAGS})
  endif()
else()
  MESSAGE(""Using bundled cppcodec"")
  include_directories(3rdparty/cppcodec)
endif()

# Packaging
SET(CPACK_GENERATOR
    ""DEB;RPM"")

SET(CPACK_PACKAGE_NAME ""nitrokey-app"" )
SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION} )
SET(CPACK_PACKAGE_DEPENDS """" )

# Deb
#execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE)
execute_process(COMMAND uname -m OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE)
SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION  ""Use and manage your Nitrokey"")

# We need to alter the architecture names as per distro rules
IF(""${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}"" MATCHES ""i[3-6]86"")
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)
ENDIF(""${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}"" MATCHES ""i[3-6]86"")
IF(""${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}"" MATCHES ""x86_64"")
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)
ENDIF(""${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}"" MATCHES ""x86_64"")

SET(PACKAGE_MAINTAINER ""Szczepan Zalega <szczepan@nitrokey.com>"" )
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER ${PACKAGE_MAINTAINER} )
SET(CPACK_DEBIAN_PACKAGE_PRIORITY ""optional"")
SET(CPACK_DEBIAN_PACKAGE_SECTION ""utils"")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS ""libqt5widgets5, libqt5gui5, libqt5core5a, libqt5svg5, libhidapi-libusb0"")
SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA ""${CMAKE_SOURCE_DIR}/debian/postinst"")


# Rpm
#execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE)
SET(CPACK_RPM_PACKAGE_DESCRIPTION  ""Use and manage your Nitrokey"")
SET(CPACK_RPM_PACKAGE_LICENSE ""GPLv3"")
SET(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSES/GPLv3"")
SET(CPACK_RPM_PACKAGE_SUMMARY ""Use and manage your Nitrokey"")
SET(CPACK_RPM_PACKAGE_VENDOR ""Nitrokey"")
SET(CPACK_RPM_PACKAGE_MAINTAINER ${PACKAGE_MAINTAINER} )
SET(CPACK_RPM_PACKAGE_PRIORITY ""optional"")
SET(CPACK_RPM_PACKAGE_SECTION ""utils"")

# Prevent RPM directory collisions by excluding those already provided by
# package dependencies. AFAIK this can't be automated.
LIST(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION 
    ""/etc/bash_completion.d""
    ""/etc/udev""
    ""/etc/udev/rules.d""
    ""/usr/lib/udev""
    ""/usr/lib/udev/rules.d""
    ""/usr/share/icons""
    ""/usr/share/icons/hicolor""
    ""/usr/share/icons/hicolor/16x16""
    ""/usr/share/icons/hicolor/16x16/apps""
    ""/usr/share/icons/hicolor/22x22""
    ""/usr/share/icons/hicolor/22x22/apps""
    ""/usr/share/icons/hicolor/24x24""
    ""/usr/share/icons/hicolor/24x24/apps""
    ""/usr/share/icons/hicolor/48x48""
    ""/usr/share/icons/hicolor/48x48/apps""
    ""/usr/share/icons/hicolor/32x32""
    ""/usr/share/icons/hicolor/32x32/apps""
    ""/usr/share/icons/hicolor/128x128""
    ""/usr/share/icons/hicolor/128x128/apps""
    ""/usr/share/icons/hicolor/scalable""
    ""/usr/share/icons/hicolor/scalable/apps""
    ""/usr/share/icons/ubuntu-mono-dark""
    ""/usr/share/icons/ubuntu-mono-dark/apps""
    ""/usr/share/icons/ubuntu-mono-dark/apps/22""
    ""/usr/share/icons/ubuntu-mono-dark/apps/24""
    ""/usr/share/icons/ubuntu-mono-dark/apps/48""
    ""/usr/share/icons/ubuntu-mono-dark/apps/16""
    ""/usr/share/icons/ubuntu-mono-light""
    ""/usr/share/icons/ubuntu-mono-light/apps""
    ""/usr/share/icons/ubuntu-mono-light/apps/22""
    ""/usr/share/icons/ubuntu-mono-light/apps/24""
    ""/usr/share/icons/ubuntu-mono-light/apps/48""
    ""/usr/share/icons/ubuntu-mono-light/apps/16""
    ""/usr/share/applications""
    ""/usr/share/pixmaps""
)

INCLUDE(CPack)
",3.1.0,3.1
36749,Martchus,passwordmanager,False,False,False,False,False,1,C++,2020-05-06 16:00:22+00:00,2015-04-22 17:14:52+00:00,3,287,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# set meta data
project(passwordmanager)
set(META_PROJECT_NAME ${PROJECT_NAME})
set(META_PROJECT_VARNAME password_manager)
set(META_PROJECT_TYPE application)
set(META_APP_NAME ""Password Manager"")
set(META_APP_CATEGORIES ""Utility;Security;"")
set(META_APP_AUTHOR ""Martchus"")
set(META_APP_URL ""https://github.com/${META_APP_AUTHOR}/${META_PROJECT_NAME}"")
set(META_APP_DESCRIPTION ""A simple password store using AES-256-CBC encryption via OpenSSL"")
set(META_GUI_OPTIONAL YES)
set(META_USE_QQC2 ON)
set(META_ANDROID_PACKAGE_NAME ""org.martchus.passwordmanager"")
set(META_VERSION_MAJOR 4)
set(META_VERSION_MINOR 1)
set(META_VERSION_PATCH 4)
set(PNG_ICON_NO_CROP ON)

# add project files
set(HEADER_FILES cli/cli.h model/entryfiltermodel.h model/entrymodel.h model/fieldmodel.h)
set(SRC_FILES cli/cli.cpp main.cpp)

set(GUI_HEADER_FILES model/entryfiltermodel.cpp model/entrymodel.cpp model/fieldmodel.cpp)
set(GUI_SRC_FILES model/entryfiltermodel.cpp model/entrymodel.cpp model/fieldmodel.cpp)

set(WIDGETS_HEADER_FILES
    gui/fielddelegate.h
    gui/initiategui.h
    gui/mainwindow.h
    gui/passwordgeneratordialog.h
    gui/stacksupport.h
    gui/undocommands.h)
set(WIDGETS_SRC_FILES
    gui/fielddelegate.cpp
    gui/initiategui.cpp
    gui/mainwindow.cpp
    gui/passwordgeneratordialog.cpp
    gui/stacksupport.cpp
    gui/undocommands.cpp
    resources/icons.qrc)
set(WIDGETS_UI_FILES gui/mainwindow.ui gui/passwordgeneratordialog.ui)

set(QML_HEADER_FILES quickgui/controller.h quickgui/initiatequick.h)
set(QML_SRC_FILES quickgui/controller.cpp quickgui/initiatequick.cpp resources/icons.qrc resources/qml.qrc)
if (ANDROID)
    list(APPEND QML_HEADER_FILES quickgui/android.h)
    list(APPEND QML_SRC_FILES quickgui/android.cpp)
endif ()

set(TS_FILES translations/${META_PROJECT_NAME}_de_DE.ts translations/${META_PROJECT_NAME}_en_US.ts)

set(ICON_FILES resources/icons/hicolor/scalable/apps/${META_PROJECT_NAME}.svg)

set(DOC_FILES README.md)

set(REQUIRED_ICONS
    application-exit
    applications-internet
    dialog-cancel
    dialog-ok
    dialog-ok-apply
    dialog-password
    document-close
    document-encrypt
    document-export
    document-new
    document-open
    document-open-recent
    document-properties
    document-save
    document-save-as
    edit-clear
    edit-copy
    edit-cut
    edit-delete
    edit-paste
    edit-redo
    edit-rename
    edit-undo
    emblem-warning
    flag-black
    flag-blue
    folder
    folder-add
    folder-symbolic
    go-next
    go-next-symbolic
    go-next-symbolic-rtl
    go-previous
    go-previous-symbolic
    go-previous-symbolic-rtl
    handle-right
    handle-sort
    overflow-menu-right
    overflow-menu-left
    help-about
    insert-text
    list-add
    list-remove
    password-copy
    password-generate
    password-show-off
    password-show-on
    preferences-desktop-icons
    preferences-desktop-locale
    qtcreator
    search
    story-editor
    system-file-manager
    system-run
    system-search
    username-copy
    window-close)

# find c++utilities
set(CONFIGURATION_PACKAGE_SUFFIX """"
    CACHE STRING ""sets the suffix for find_package() calls to packages configured via c++utilities"")
find_package(c++utilities${CONFIGURATION_PACKAGE_SUFFIX} 5.0.0 REQUIRED)
use_cpp_utilities()

# apply basic configuration
include(BasicConfig)

# find qtutilities
find_package(qtutilities${CONFIGURATION_PACKAGE_SUFFIX} 6.0.0 REQUIRED)
use_qt_utilities()

# find passwordfile
find_package(passwordfile${CONFIGURATION_PACKAGE_SUFFIX} 5.0.0 REQUIRED)
use_password_file()

# require at least Qt 5.8 for the Qt Quick GUI
if (QUICK_GUI)
    set(META_QT5_VERSION 5.8)
endif ()

# allow to enable undo support from the widgets GUI in the quick GUI as well (so the quick GUI will depend on Qt Widgets as
# well)
if (QUICK_GUI AND NOT WIDGETS_GUI)
    option(ENABLE_UNDO_SUPPORT_FOR_QUICK_GUI ""enables with undo/redo support for the Qt Quick GUI (requires Qt Widgets)"" ON)
    if (ENABLE_UNDO_SUPPORT_FOR_QUICK_GUI)
        list(APPEND ADDITIONAL_QT_MODULES Widgets)
        list(APPEND META_PUBLIC_COMPILE_DEFINITIONS ${META_PROJECT_VARNAME_UPPER}_ENABLE_UNDO_SUPPORT_FOR_QUICK_GUI)
        list(APPEND QML_HEADER_FILES gui/stacksupport.h gui/undocommands.h)
        list(APPEND QML_SRC_FILES gui/stacksupport.cpp gui/undocommands.cpp)
    endif ()
endif ()

# add further Qt/KF modules required by the Qt Quick GUI under Android
if (ANDROID AND QUICK_GUI)
    list(APPEND ADDITIONAL_QT_MODULES AndroidExtras)
    list(APPEND ADDITIONAL_KF_MODULES Kirigami2)
endif ()

# apply further configuration
if (WIDGETS_GUI OR QUICK_GUI)
    include(QtGuiConfig)
    include(QtConfig)
endif ()
include(WindowsResources)
include(AppTarget)
include(AndroidApk)
include(ShellCompletion)
include(ConfigHeader)

# create desktop file using previously defined meta data
add_desktop_file()
",3.1.0,3.1
36771,REGoth-project,REGoth,False,False,False,False,False,32,C++,2019-04-18 16:49:48+00:00,2016-06-05 22:35:35+00:00,567,1600,"cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0042 NEW)
project(REGoth)

set(CMAKE_CXX_STANDARD 14)


option (REGOTH_BUILD_WITH_INSTALLER_EXTRACTOR ""Compile with library to extract some installers of Gothic"" OFF) 


# Vim - You Complete Me
set(CMAKE_EXPORT_COMPILE_COMMANDS ""ON"")

set(BGFX_DEBUG 1)
add_definitions(-D__STDC_CONSTANT_MACROS)
add_definitions(-D__STDC_LIMIT_MACROS)

# clang-format
include(cmake/clang-format.cmake)

if(EMSCRIPTEN)

    # cmake -DCMAKE_TOOLCHAIN_FILE=""/usr/lib/emscripten/cmake/Modules/Platform/Emscripten.cmake"" ..

    SET(CMAKE_EXECUTABLE_SUFFIX "".html"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -g"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s LZ4=1"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --profiling"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s ASSERTIONS=0"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s USE_GLFW=3"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s USE_PTHREADS=2"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s TOTAL_MEMORY=924288000"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --preload-file ${CMAKE_CURRENT_SOURCE_DIR}/../content@/"")
endif()

if(ANDROID)
    set(BGFX_DEBUG 1)
    set(REGOTH_BUILD_WITH_INSTALLER_EXTRACTOR ON CACHE STRING """" FORCE)

    # Usage: cmake -DANDROID_NDK=$NDK -DCMAKE_TOOLCHAIN_FILE=$NDK/cmake/toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=23 -DLIBRARY_OUTPUT_PATH=. ..

    add_definitions(-D__gnu_linux__) # BGFX file reader needs to know this
    add_definitions(-D__ANDROID__) # Some like ""ANDROID"", like in the toolhain file, some expect __ANDROID__
    add_definitions(-Dalloca=__builtin_alloca) # imgui doesn't seem to take the crystax header from this
    add_definitions(-DBGFX_CONFIG_RENDERER_OPENGLES=30) # Need GLES3 for instancing

    # Fix other libraries
    set(BUILD_SQUISH_WITH_SSE2 OFF CACHE STRING """" FORCE) # No SSE2 on android

    # Make Apk.cmake compatible
    set(ARM_TARGET ${ANDROID_ABI})
    set(ANDROID_API_LEVEL ${ANDROID_NATIVE_API_LEVEL})

    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

    include_directories(${ANDROID_NDK}/sources/android/native_app_glue)
    #include_directories(src/android/compat)

    # TODO: Add a dummy file to supress a warning here
    file(GLOB ANDROID_SRC
        #${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c
        #src/android/compat/*.c
    )

    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -mno-unaligned-access"") # Unaligned access not supported on ARM
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O3 -ftree-vectorize"")
    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O0 -g"")
    #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x -ffor-scope -fno-rtti -pipe -ffunction-sections -fdata-sections -ffast-math -Wnon-virtual-dtor -Wreorder -Wsign-promo -fvisibility=hidden -fvisibility-inlines-hidden -Wstrict-null-sentinel -Os -funroll-all-loops -fpeel-loops -ftree-vectorize"")
    set(LINKER_FLAGS ""${LINKER_FLAGS} -nostartfiles, -Wl,--as-needed -Wl,--gc-sections -Wl,--no-undefined -Wl,--strip-all -Wl,-rpath-link=${ANDROID_NDK_SYSROOT}/usr/lib/ -L${ANDROID_NDK_SYSROOT}/usr/lib/"")

    add_library(android_glue STATIC ${ANDROID_SRC})

    # Stuff all android libraries in here
    target_link_libraries(android_glue log android bgfx_common EGL GLESv2)
    set_target_properties(android_glue PROPERTIES COMPILE_DEFINITIONS ""ANDROID"")

endif()

if (APPLE)
    ADD_DEFINITIONS(-DBGFX_CONFIG_MULTITHREADED=0)
endif()

if (CMAKE_COMPILER_IS_GNUCC)
    # add warning flags
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing -Wall -Wextra"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-reorder -Wno-unused-variable -Wno-unused-parameter -Wno-unused-function"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Werror=return-type"") # missing return is error

    # Fix up C++ standard
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.4)
        message(WARNING ""Compilation wasn't tested on GCC versions prior to 5.4 and might not be successful!"")
        SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++1y"")
    endif()
endif()

if(NOT ANDROID)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()

set(GAME_CONTENT_DIR ../content CACHE STRING ""Content-folder, containing VDF-Archives and other files."")
set(GAME_STARTUP_WORLD addonworld.zen CACHE STRING ""[Testing] World to load at program start"")

# Setup BGFX
add_definitions(-DBGFX_CONFIG_MAX_MATRIX_CACHE=131072) # Need to up this since everything got it's own matrix right now
add_definitions(-DBGFX_CONFIG_MAX_COMMAND_BUFFER_SIZE=231072) # FIXME: Flush some times at loading, so we don't exhaust the default setting of 64k
add_definitions(-DBGFX_CONFIG_MAX_INDEX_BUFFERS=65535)
add_definitions(-DBGFX_CONFIG_MAX_VERTEX_BUFFERS=65535) # TODO: Don't mess around with memory so much

# Set up GLM
add_definitions(-DGLM_FORCE_PURE) # FIXME: glm crashes using SSE because of some alignment issues
add_definitions(-DGLM_ENABLE_EXPERIMENTAL) # Quaternions

add_definitions(-D__STDC_LIMIT_MACROS)
add_definitions(-D__STDC_CONSTANT_MACROS)
add_definitions(-D__STDC_FORMAT_MACROS)

# Temp
if(NOT MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g"")
endif()

if(MINGW)
    set(COMPILER_PREFIX ""i686-mingw32"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -s"")
endif()

if(MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /EHsc /MP /bigobj"")
    add_definitions(-DNOMINMAX)
endif()

# Setup OpenMP
FIND_PACKAGE(OpenMP)
if(OPENMP_FOUND)
    message(""OPENMP FOUND"")
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}"")
endif()

# Setup bullet
if(MSVC)
    set(USE_MSVC_RUNTIME_LIBRARY_DLL ON)
endif()

# ------------------ Config-Header ------------------

configure_file(src/rgconfig.h.in ${PROJECT_BINARY_DIR}/src/rgconfig.h)
include_directories(${PROJECT_BINARY_DIR}/src)

add_definitions(-DBGFX_CONFIG_DEBUG=${BGFX_DEBUG})
add_subdirectory(lib/bgfx-cmake)
add_subdirectory(lib/ZenLib)

# Set up bullet
set(USE_GRAPHICAL_BENCHMARK OFF CACHE STRING """" FORCE)
set(USE_MSVC_RUNTIME_LIBRARY_DLL ON CACHE STRING """" FORCE) # Don't statically link this
set(BUILD_BULLET2_DEMOS OFF CACHE STRING """" FORCE) # No samples
set(BUILD_OPENGL3_DEMOS OFF CACHE STRING """" FORCE) # No samples
set(BUILD_UNIT_TESTS OFF CACHE STRING """" FORCE) # No tests
set(BUILD_CPU_DEMOS OFF CACHE STRING """" FORCE) # No samples
set(GLFW_BUILD_EXAMPLES OFF CACHE STRING """" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE STRING """" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE STRING """" FORCE)


set(BUILD_BULLET3 OFF CACHE STRING """" FORCE) # Can use bullet2, bullet3 wants to build examples...

add_subdirectory(lib/bullet3)
include_directories(lib/bullet3/src)

set(BULLET_LIBRARIES BulletSoftBody BulletDynamics BulletCollision LinearMath)
set(BULLET_MISC Bullet3Dynamics Bullet2FileLoader Bullet3Collision Bullet3Geometry Bullet3OpenCL_clew BulletFileLoader BulletWorldImporter BulletXmlWorldImporter ConvexDecomposition GIMPACTUtils HACD Test_BulletDynamics Test_BulletInverseDynamics Test_Collision)


# ------------------ Engine lib ------------------
file(GLOB ENGINE_SRC
        ""src/audio/*.cpp""
        ""src/components/*.cpp""
        ""src/components/*.h""
        ""src/engine/*.cpp""
        ""src/engine/*.h""
        ""src/handle/*.cpp""
        ""src/handle/*.h""
        ""src/memory/*.cpp""
        ""src/memory/*.h""
        ""src/content/*.cpp""
        ""src/content/*.h""
        ""src/render/*.cpp""
        ""src/render/*.h""
        ""src/utils/*.cpp""
        ""src/utils/*.h""
        ""src/math/*.cpp""
        ""src/math/*.h""
        ""src/ui/*.cpp""
        ""src/ui/*.h""
        ""src/logic/*.cpp""
        ""src/logic/*.h""
        ""src/physics/*.cpp""
        ""src/physics/*.h""
        ""src/logic/visuals/*.cpp""
        ""src/logic/visuals/*.h""
        ""src/logic/scriptExternals/*.cpp""
        ""src/logic/scriptExternals/*.h""
        ""src/logic/messages/*.cpp""
        ""src/logic/messages/*.h""
        ""src/logic/mobs/*.cpp""
        ""src/logic/mobs/*.h""
        )

add_library(engine STATIC ${ENGINE_SRC})
#set_target_properties(engine PROPERTIES LINKER_LANGUAGE C)
target_link_libraries(engine zenload daedalus vdfs utils bgfx bgfx_common bgfx3rdParty ${BULLET_LIBRARIES} adpcm)

if(REGOTH_BUILD_WITH_INSTALLER_EXTRACTOR)
    add_subdirectory(lib/CAB-Installer-Extractor)
    add_definitions(-DRE_WITH_INSTALLER_EXTRACTOR)
    target_link_libraries(engine gextract)
endif()

# ------------------ OpenAL ------------------

# Set up OpenAL

set(ALSOFT_CONFIG OFF CACHE BOOL """" FORCE)
set(ALSOFT_EXAMPLES OFF CACHE BOOL """" FORCE)
set(ALSOFT_INSTALL OFF CACHE BOOL """" FORCE)

if (UNIX)
    set(LIBTYPE STATIC CACHE STRING """" FORCE)
    if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
        set(ALSOFT_REQUIRE_ALSA ON CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_OSS OFF CACHE BOOL """" FORCE)
    elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
        set(ALSOFT_REQUIRE_ALSA OFF CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_OSS ON CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL """" FORCE)
    elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""OpenBSD"")
        set(ALSOFT_REQUIRE_ALSA OFF CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_OSS OFF CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_SNDIO ON CACHE BOOL """" FORCE)
        set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL """" FORCE)
    endif()
else()
    set(LIBTYPE SHARED CACHE STRING """" FORCE)
endif()

if(NOT EMSCRIPTEN)
    add_subdirectory(${CMAKE_SOURCE_DIR}/lib/openal-soft)
    include_directories(${CMAKE_SOURCE_DIR}/lib/openal-soft/include)

    if (UNIX)
        if (${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
          set(ALSOFT_REQUIRE_ALSA ON CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_OSS OFF CACHE BOOL """" FORCE)
        elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""FreeBSD"")
          set(ALSOFT_REQUIRE_ALSA OFF CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_OSS ON CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL """" FORCE)
        elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""OpenBSD"")
          set(ALSOFT_REQUIRE_ALSA OFF CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_OSS OFF CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_SNDIO ON CACHE BOOL """" FORCE)
          set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL """" FORCE)
        endif()
        target_link_libraries(engine OpenAL)
    elseif(WIN32)
        target_link_libraries(engine common OpenAL)
    endif()
endif()

# ---------------- libdmusic ----------------

# Disable unused utilities
set(DMUSIC_BUILD_UTILS OFF CACHE BOOL """" FORCE)
set(DMUSIC_BUILD_DMRENDER OFF CACHE BOOL """" FORCE)
set(DMUSIC_BUILD_DMPLAY OFF CACHE BOOL """" FORCE)
set(DMUSIC_BUILD_DLS2SF OFF CACHE BOOL """" FORCE)
set(DMUSIC_BUILD_SAMPLEDUMP OFF CACHE BOOL """" FORCE)

add_subdirectory(${CMAKE_SOURCE_DIR}/lib/libdmusic)
include_directories(${CMAKE_SOURCE_DIR}/lib/libdmusic/include)

target_link_libraries(engine dmusic)

# ------------------ Other ------------------

include_directories(src)
include_directories(lib)
include_directories(lib/ZenLib)
include_directories(lib/glm)
include_directories(lib/tinydir)
include_directories(lib/json)
include_directories(lib/CAB-Installer-Extractor/include)

if(NOT ANDROID)


    include_directories(lib/glfw/include)

    if(NOT EMSCRIPTEN)
        add_definitions(-DRE_USE_SOUND)
        add_subdirectory(lib/glfw)
        target_link_libraries(engine glfw)
    endif()
else()
    add_definitions(-DRE_USE_SOUND)
    target_link_libraries(engine android_glue)
endif()

add_subdirectory(lib/adpcm)
include_directories(lib/optional)

add_subdirectory(src/target)
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT REGoth)

file(COPY ""content/shaders"" DESTINATION ""${CMAKE_BINARY_DIR}/bin"")
",3.1,3.1
36841,electronicarts,EASTL,False,False,False,False,False,66,C++,2020-05-07 20:49:03+00:00,2015-12-15 21:04:13+00:00,4626,372,"#-------------------------------------------------------------------------------------------
# Copyright (C) Electronic Arts Inc.  All rights reserved.
#-------------------------------------------------------------------------------------------
cmake_minimum_required(VERSION 3.1)
project(EASTL CXX)

#-------------------------------------------------------------------------------------------
# Options
#-------------------------------------------------------------------------------------------
option(EASTL_BUILD_BENCHMARK ""Enable generation of build files for benchmark"" OFF)
option(EASTL_BUILD_TESTS ""Enable generation of build files for tests"" OFF)

#-------------------------------------------------------------------------------------------
# Compiler Flags
#-------------------------------------------------------------------------------------------
set (CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/scripts/CMake"")
include(CommonCppFlags)

#-------------------------------------------------------------------------------------------
# Library definition
#-------------------------------------------------------------------------------------------
file(GLOB EASTL_SOURCES ""source/*.cpp"")
add_library(EASTL ${EASTL_SOURCES})

if(EASTL_BUILD_BENCHMARK)
    add_subdirectory(benchmark)
endif()

if(EASTL_BUILD_TESTS)
    add_subdirectory(test)
endif()

#-------------------------------------------------------------------------------------------
# Defines
#-------------------------------------------------------------------------------------------
add_definitions(-D_CHAR16T)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
add_definitions(-D_SCL_SECURE_NO_WARNINGS)
add_definitions(-DEASTL_OPENSOURCE=1)

#-------------------------------------------------------------------------------------------
# Include dirs
#-------------------------------------------------------------------------------------------
target_include_directories(EASTL PUBLIC include)

#-------------------------------------------------------------------------------------------
# Dependencies
#-------------------------------------------------------------------------------------------
target_link_libraries(EASTL EABase)

",3.1,3.1
36968,falltergeist,falltergeist,False,False,False,False,False,27,C++,2020-05-08 10:46:23+00:00,2012-11-24 10:08:12+00:00,600,2049,"#
# Copyright 2012-2018 Falltergeist Developers.
#
# This file is part of Falltergeist.
#
# Falltergeist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Falltergeist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Falltergeist.  If not, see <http://www.gnu.org/licenses/>.
#

# It must be set before project
set(CMAKE_BUILD_TYPE ""Debug"" CACHE STRING ""Choose the type of build (by default Debug)"")

cmake_minimum_required(VERSION 3.1)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/modules)

project(falltergeist)
set(falltergeist_VERSION  0.3.1)

include_directories(src)

if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
	set(USE_CONAN TRUE)
endif()

if (USE_CONAN)
	include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
	conan_basic_setup()
endif()

find_package(ZLIB REQUIRED)
if(NOT ZLIB_FOUND)
	message(FATAL_ERROR ""zlib library not found"")
endif(NOT ZLIB_FOUND)
include_directories(${ZLIB_INCLUDE_DIRS})

find_package(SDL2 REQUIRED)
if(NOT SDL2_FOUND)
	message(FATAL_ERROR ""SDL2 library not found"")
endif(NOT SDL2_FOUND)
include_directories(${SDL2_INCLUDE_DIR})

find_package(SDL2_mixer REQUIRED)
if(NOT SDLMIXER_FOUND)
	message(FATAL_ERROR ""SDL2_mixer library not found"")
endif(NOT SDLMIXER_FOUND)
include_directories(${SDL_MIXER_INCLUDE_DIR})

find_package(SDL2_image REQUIRED)
if(NOT SDLIMAGE_FOUND)
	message(FATAL_ERROR ""SDL2_image library not found"")
endif(NOT SDLIMAGE_FOUND)
include_directories(${SDL_IMAGE_INCLUDE_DIR})

find_package(OpenGL REQUIRED)
if(NOT OPENGL_FOUND)
	message(FATAL_ERROR ""GL library not found"")
endif(NOT OPENGL_FOUND)
include_directories(${OPENGL_INCLUDE_DIR})

if (NOT USE_CONAN)
	find_package(GLEW REQUIRED)
	if(NOT GLEW_FOUND)
		message(FATAL_ERROR ""GLEW library not found"")
	endif(NOT GLEW_FOUND)
	include_directories(${GLEW_INCLUDE_DIR})
endif()

find_package(GLM REQUIRED)
if(NOT GLM_FOUND)
	message(FATAL_ERROR ""GLM library not found"")
endif(NOT GLM_FOUND)
include_directories(${GLM_INCLUDE_DIR})

file(GLOB_RECURSE SOURCES  src/*.cpp)

if(MSVC)
	set(_additional_includes ""package/windows.rc"" pchheader.cpp)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

add_executable(falltergeist main.cpp ${SOURCES} ${_additional_includes})

set_target_properties(falltergeist PROPERTIES
	CXX_STANDARD 14
	CXX_STANDARD_REQUIRED YES
	CXX_EXTENSIONS NO
)

if(MSVC)
	set_property(TARGET falltergeist
		APPEND PROPERTY LINK_FLAGS /NODEFAULTLIB:MSVCRT
	)
	include(cmake/modules/PrecompiledHeader.cmake)
	add_precompiled_header(falltergeist pchheader.h FORCEINCLUDE SOURCE_CXX pchheader.cpp)
else()
	add_definitions(-Wall)
endif()

if (CONAN_LIBS)
	target_link_libraries(falltergeist ${CONAN_LIBS})
else()
	target_link_libraries(falltergeist ${ZLIB_LIBRARIES} ${SDL2_LIBRARY} ${SDL_MIXER_LIBRARY} ${SDL_IMAGE_LIBRARY} ${OPENGL_gl_LIBRARY} ${GLEW_LIBRARY})
endif()

include(cmake/install/windows.cmake)
include(cmake/install/linux.cmake)
include(cmake/install/apple.cmake)
",3.1,3.1
37271,filipecn,Ponos,False,False,False,False,False,1,C++,2020-05-10 04:14:10+00:00,2016-04-26 23:00:29+00:00,0,276,"# avoid policy warning message
if (POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif (POLICY CMP0048)
# main project
project(PONOS)
cmake_minimum_required(VERSION 3.1)
cmake_policy(VERSION 3.1)
set(CMAKE_VERBOSE_MAKEFILE ON)
# path variables
set(ROOT_PROJECT_PATH ""${PROJECT_SOURCE_DIR}"")
set(BUILD_ROOT ${CMAKE_CURRENT_BINARY_DIR})
##########################################
##               options                ##
##########################################
option(BUILD_ALL ""build all libraries"" OFF)
option(BUILD_CIRCE ""build circe library"" OFF)
option(BUILD_HERMES ""build hermes library"" OFF)
option(BUILD_HELIOS ""build helios library"" OFF)
option(BUILD_POSEIDON ""build poseidon library"" OFF)
option(BUILD_ODYSSEUS ""build odysseus library"" OFF)
option(BUILD_TESTS ""build library unit tests"" OFF)
option(BUILD_EXAMPLES ""build library examples"" OFF)
option(BUILD_SHARED ""build shared library"" OFF)
option(BUILD_DOCS ""build library documentation"" OFF)
set(INSTALL_PATH ${BUILD_ROOT} CACHE STRING ""include and lib folders path"")
# cmake modules
set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/CMake"" ${CMAKE_MODULE_PATH})
# check for specific machine/compiler options.
include(ConfigCompilerFlags)
# include external libraries path
include(ExternalProject)
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/ext"")
# tests
include(catch2)
##########################################
##              projects                ##
##########################################
add_subdirectory(ponos)
if (BUILD_CIRCE OR BUILD_ALL)
    include(glfw)
    include(tinyobj)
    include(triangle)
#    include(ply)
    include(stb)
    include(glad)
    add_subdirectory(circe)
endif (BUILD_CIRCE OR BUILD_ALL)
if (BUILD_HERMES OR BUILD_ALL)
    add_subdirectory(hermes)
endif (BUILD_HERMES OR BUILD_ALL)
if (BUILD_HELIOS OR BUILD_ALL)
    #   add_subdirectory(helios)
endif (BUILD_HELIOS OR BUILD_ALL)
if (BUILD_POSEIDON OR BUILD_ALL)
    add_subdirectory(poseidon)
endif (BUILD_POSEIDON OR BUILD_ALL)
##########################################
##         output variables             ##
##########################################
get_directory_property(PONOS_HAS_PARENT PARENT_DIRECTORY)
if (PONOS_HAS_PARENT)
    set(PONOS_INCLUDES ${PONOS_SOURCE_DIR} ${CIRCE_SOURCE_DIR} ${GLAD_INCLUDES} PARENT_SCOPE)
    set(PONOS_EXTRA_LIBS ${GLAD_LIBS} PARENT_SCOPE)
endif (PONOS_HAS_PARENT)
##########################################
##           documentation              ##
##########################################
if(BUILD_DOCS)
    # check if Doxygen is installed
    find_package(Doxygen)
    find_package(Sphinx)
    if (DOXYGEN_FOUND AND SPHINX_FOUND)
        set(DOXYGEN_INPUT_DIRS ${PONOS_SOURCE_DIR}/ponos)
        set(DOXYGEN_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen)
        set(DOXYGEN_INDEX_FILE ${DOXYGEN_OUTPUT_DIR}/xml/index.xml)
        # set input and output files
        set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
        # create doxygen output dir
        file(MAKE_DIRECTORY ${DOXYGEN_OUTPUT_DIR})
        # request to configure the file
        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
        message(""Doxygen build started"")

        # note the option ALL which allows to build the docs together with the application
        add_custom_target( doc_doxygen ALL
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT ""Generating API documentation with Doxygen""
            VERBATIM )


        set(SPHINX_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/docs/source)
        set(SPHINX_BUILD ${CMAKE_CURRENT_BINARY_DIR}/docs/sphinx)

        add_custom_target(Sphinx ALL
                      COMMAND ${SPHINX_EXECUTABLE} -b html
                      # Tell Breathe where to find the Doxygen output
                      -Dbreathe_projects.Ponos=${DOXYGEN_OUTPUT_DIR}/xml
                      ${SPHINX_SOURCE} ${SPHINX_BUILD}
                      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                      COMMENT ""Generating documentation with Sphinx"")

    else (DOXYGEN_FOUND AND SPHINX_FOUND)
      message(""Doxygen need to be installed to generate the doxygen documentation"")
    endif (DOXYGEN_FOUND AND SPHINX_FOUND)
endif(BUILD_DOCS)",3.1,3.1
37381,mmp,pbrt-v3,False,False,False,False,False,39,C++,2020-04-11 18:51:10+00:00,2015-06-15 18:13:08+00:00,2968,730,"# TODO: many of the best practices described here
# (https://www.slideshare.net/DanielPfeifer1/cmake-48475415) are violated
# in this file. Would be nice to address some of these.

CMAKE_MINIMUM_REQUIRED ( VERSION 3.1.0 )

# For sanitizers
SET (CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH})

PROJECT ( PBRT-V3 )

OPTION(PBRT_FLOAT_AS_DOUBLE ""Use 64-bit floats"" OFF)

IF (PBRT_FLOAT_AS_DOUBLE)
  ADD_DEFINITIONS ( -D PBRT_FLOAT_AS_DOUBLE )
ENDIF()

OPTION(PBRT_SAMPLED_SPECTRUM ""Use SampledSpectrum rather than RGBSpectrum"" OFF)

IF (PBRT_SAMPLED_SPECTRUM)
  ADD_DEFINITIONS ( -D PBRT_SAMPLED_SPECTRUM )
ENDIF()

ENABLE_TESTING()

if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Release' as none was specified."")
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build."" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

if(NOT IS_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/src/ext/openexr/OpenEXR"")
  message(FATAL_ERROR ""The OpenEXR submodule directory is missing! ""
    ""You probably did not clone the project with --recursive. It is possible to recover ""
    ""by running \""git submodule update --init --recursive\"""")
endif()

if(NOT IS_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/src/ext/glog/cmake"")
  message(FATAL_ERROR ""The glog submodule directory is missing! ""
    ""You probably did not clone the project with --recursive, or you first checked out ""
    ""pbrt before it was added. It is possible to recover by running ""
    ""\""git submodule update --init --recursive\"""")
endif()

if(NOT IS_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/src/ext/ptex/src"")
  message(FATAL_ERROR ""The ptex submodule directory is missing! ""
    ""You probably did not clone the project with --recursive, or you first checked out ""
    ""pbrt before it was added. It is possible to recover by running ""
    ""\""git submodule update --init --recursive\"""")
endif()

if(NOT IS_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/src/ext/zlib/doc"")
  message(FATAL_ERROR ""The zlib submodule directory is missing! ""
    ""You probably did not clone the project with --recursive, or you first checked out ""
    ""pbrt before it was added. It is possible to recover by running ""
    ""\""git submodule update --init --recursive\"""")
endif()

FIND_PACKAGE ( Sanitizers )
FIND_PACKAGE ( Threads )

IF(CMAKE_BUILD_TYPE MATCHES RELEASE)
  ADD_DEFINITIONS (-DNDEBUG)
ENDIF()

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

###########################################################################
# Annoying compiler-specific details

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-conversion-null"")
ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-deprecated-register"")
ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

  FIND_PROGRAM(XIAR xiar)
  IF(XIAR)
    SET(CMAKE_AR ""${XIAR}"")
  ENDIF(XIAR)
  MARK_AS_ADVANCED(XIAR)

  FIND_PROGRAM(XILD xild)
  IF(XILD)
    SET(CMAKE_LINKER ""${XILD}"")
  ENDIF(XILD)
  MARK_AS_ADVANCED(XILD)

  # ICC will default to -fp-model fast=1, which performs value-unsafe optimizations which will
  # cause pbrt_test to fail. For safety, -fp-model precise is explicitly set here by default.
  set(FP_MODEL ""precise"" CACHE STRING ""The floating point model to compile with."")
  set_property(CACHE FP_MODEL PROPERTY STRINGS ""precise"" ""fast=1"" ""fast=2"")

  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fp-model ${FP_MODEL}"")
ENDIF()

IF(MSVC)
  ADD_DEFINITIONS (/D _CRT_SECURE_NO_WARNINGS)
ENDIF()

INCLUDE (CheckIncludeFiles)

CHECK_INCLUDE_FILES ( alloca.h HAVE_ALLOCA_H )
IF ( HAVE_ALLOCA_H )
  ADD_DEFINITIONS ( -D PBRT_HAVE_ALLOCA_H )
ENDIF ()

CHECK_INCLUDE_FILES ( memory.h HAVE_MEMORY_H )
IF ( HAVE_MEMORY_H )
  ADD_DEFINITIONS ( -D PBRT_HAVE_MEMORY_H )
ENDIF ()

###########################################################################
# Check for various C++11 features and set preprocessor variables or
# define workarounds.

INCLUDE (CheckCXXSourceCompiles)
INCLUDE (CheckCXXSourceRuns)

CHECK_CXX_SOURCE_COMPILES (
  ""int main() { float x = 0x1p-32f; }""
  HAVE_HEX_FP_CONSTANTS )
IF ( HAVE_HEX_FP_CONSTANTS )
  ADD_DEFINITIONS ( -D PBRT_HAVE_HEX_FP_CONSTANTS )
ENDIF ()

CHECK_CXX_SOURCE_COMPILES (
  ""int main() { int x = 0b101011; }""
  HAVE_BINARY_CONSTANTS )
IF ( HAVE_BINARY_CONSTANTS )
  ADD_DEFINITIONS ( -D PBRT_HAVE_BINARY_CONSTANTS )
ENDIF ()

CHECK_CXX_SOURCE_COMPILES (
  ""int main() { constexpr int x = 0; }""
  HAVE_CONSTEXPR )
IF ( HAVE_CONSTEXPR )
  ADD_DEFINITIONS ( -D PBRT_HAVE_CONSTEXPR )
  ADD_DEFINITIONS ( -D PBRT_CONSTEXPR=constexpr )
ELSE ()
  ADD_DEFINITIONS ( -D PBRT_CONSTEXPR=const )
ENDIF ()

CHECK_CXX_SOURCE_COMPILES (
  ""struct alignas(32) Foo { char x; }; int main() { }""
  HAVE_ALIGNAS )
IF ( HAVE_ALIGNAS )
  ADD_DEFINITIONS ( -D PBRT_HAVE_ALIGNAS )
ENDIF ()

CHECK_CXX_SOURCE_COMPILES (
  ""int main() { int x = alignof(double); }""
  HAVE_ALIGNOF )
IF ( HAVE_ALIGNOF )
  ADD_DEFINITIONS ( -D PBRT_HAVE_ALIGNOF )
ENDIF ()

CHECK_CXX_SOURCE_RUNS ( ""
#include <signal.h>
#include <string.h>
#include <sys/time.h>
void ReportProfileSample(int, siginfo_t *, void *) { }
int main() {
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_sigaction = ReportProfileSample;
    sa.sa_flags = SA_RESTART | SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    sigaction(SIGPROF, &sa, NULL);
    static struct itimerval timer;
    return setitimer(ITIMER_PROF, &timer, NULL) == 0 ? 0 : 1;
}
"" HAVE_ITIMER )
IF ( HAVE_ITIMER )
  ADD_DEFINITIONS ( -D PBRT_HAVE_ITIMER )
ENDIF()

CHECK_CXX_SOURCE_COMPILES ( ""
class Bar { public: Bar() { x = 0; } float x; };
struct Foo { union { int x[10]; Bar b; }; Foo() : b() { } };
int main() { Foo f; }
"" HAVE_NONPOD_IN_UNIONS )
IF ( HAVE_NONPOD_IN_UNIONS )
  ADD_DEFINITIONS ( -D PBRT_HAVE_NONPOD_IN_UNIONS )
ENDIF ()

CHECK_CXX_SOURCE_COMPILES ( ""
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
int main() {
   int fd = open(\""foo\"", O_RDONLY);
   struct stat s;
   fstat(fd, &s);
   size_t len = s.st_size;
   void *ptr = mmap(0, len, PROT_READ, MAP_FILE | MAP_SHARED, fd, 0);
   munmap(ptr, len);   
}
"" HAVE_MMAP )
if ( HAVE_MMAP )
  ADD_DEFINITIONS ( -D PBRT_HAVE_MMAP )
ENDIF ()

########################################
# noinline

CHECK_CXX_SOURCE_COMPILES (
""__declspec(noinline) void foo() { }
int main() { }""
HAVE_DECLSPEC_NOINLINE )

CHECK_CXX_SOURCE_COMPILES (
""__attribute__((noinline)) void foo() { }
int main() { }""
HAVE_ATTRIBUTE_NOINLINE )

IF ( HAVE_ATTRIBUTE_NOINLINE )
  ADD_DEFINITIONS ( -D ""PBRT_NOINLINE=__attribute__\\(\\(noinline\\)\\)"" )
ELSEIF ( HAVE_DECLSPEC_NOINLINE )
  ADD_DEFINITIONS ( -D ""PBRT_NOINLINE=__declspec(noinline)"" )
ELSE ()
  ADD_DEFINITIONS ( -D PBRT_NOINLINE )
ENDIF ()

########################################
# Aligned memory allocation

CHECK_CXX_SOURCE_COMPILES ( ""
#include <malloc.h>
int main() { void * ptr = _aligned_malloc(1024, 32); }
"" HAVE__ALIGNED_MALLOC )

CHECK_CXX_SOURCE_COMPILES ( ""
#include <stdlib.h>
int main() {
  void *ptr;
  posix_memalign(&ptr, 32, 1024);
} "" HAVE_POSIX_MEMALIGN )

CHECK_CXX_SOURCE_COMPILES ( ""
#include <malloc.h>
int main() {
    void *ptr = memalign(32, 1024);
} "" HAVE_MEMALIGN )

IF ( HAVE__ALIGNED_MALLOC )
  ADD_DEFINITIONS ( -D PBRT_HAVE__ALIGNED_MALLOC )
ELSEIF ( HAVE_POSIX_MEMALIGN )
  ADD_DEFINITIONS ( -D PBRT_HAVE_POSIX_MEMALIGN )
ELSEIF ( HAVE_MEMALIGN )
  ADD_DEFINITIONS ( -D PBRTHAVE_MEMALIGN )
ELSE ()
  MESSAGE ( SEND_ERROR ""Unable to find a way to allocate aligned memory"" )
ENDIF ()

########################################
# thread-local variables

CHECK_CXX_SOURCE_COMPILES ( ""
#ifdef __CYGWIN__
// Hack to work around https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64697
#error \""No thread_local on cygwin\""
#endif  // __CYGWIN__
thread_local int x; int main() { }
"" HAVE_THREAD_LOCAL )

CHECK_CXX_SOURCE_COMPILES ( ""
__declspec(thread) int x; int main() { }
"" HAVE_DECLSPEC_THREAD )

CHECK_CXX_SOURCE_COMPILES ( ""
__thread int x; int main() { }
"" HAVE___THREAD )

IF ( HAVE_THREAD_LOCAL )
  ADD_DEFINITIONS ( -D PBRT_THREAD_LOCAL=thread_local )
ELSEIF ( HAVE___THREAD )
  ADD_DEFINITIONS ( -D PBRT_THREAD_LOCAL=__thread )
ELSEIF ( HAVE_DECLSPEC_THREAD )
  ADD_DEFINITIONS ( -D ""PBRT_THREAD_LOCAL=__declspec(thread)"" )
ELSE ()
  MESSAGE ( SEND_ERROR ""Unable to find a way to declare a thread-local variable"")
ENDIF ()

###########################################################################
# zlib

FIND_PACKAGE ( ZLIB )
IF(NOT ZLIB_FOUND)
  # Build zlib
  SET(ZLIB_BUILD_STATIC_LIBS ON CACHE BOOL "" "" FORCE)
  SET(ZLIB_BUILD_SHARED_LIBS OFF CACHE BOOL "" "" FORCE)
  ADD_SUBDIRECTORY(src/ext/zlib)

  SET(ZLIB_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/src/ext/zlib"")
  SET(ZLIB_LIBRARY zlibstatic)
  SET_PROPERTY(TARGET zlibstatic PROPERTY FOLDER ""ext"")
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR} ""${CMAKE_CURRENT_BINARY_DIR}/src/ext/zlib"")
ENDIF()
INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})

###########################################################################
# OpenEXR

SET(ILMBASE_NAMESPACE_VERSIONING OFF CACHE BOOL "" "" FORCE)
SET(OPENEXR_NAMESPACE_VERSIONING OFF CACHE BOOL "" "" FORCE)
SET(OPENEXR_BUILD_SHARED_LIBS    OFF CACHE BOOL "" "" FORCE)
SET(ILMBASE_BUILD_SHARED_LIBS    OFF CACHE BOOL "" "" FORCE)

ADD_SUBDIRECTORY(src/ext/openexr)

SET_PROPERTY(TARGET IexMath eLut toFloat b44ExpLogTable dwaLookups IlmThread Half Iex Imath IlmImf PROPERTY FOLDER ""ext"")

INCLUDE_DIRECTORIES (
  src/ext/openexr/IlmBase/Imath
  src/ext/openexr/IlmBase/Half
  src/ext/openexr/IlmBase/Iex
  src/ext/openexr/OpenEXR/IlmImf
  ${CMAKE_BINARY_DIR}/src/ext/openexr/IlmBase/config
  ${CMAKE_BINARY_DIR}/src/ext/openexr/OpenEXR/config
)
IF(WIN32)
  SET(OPENEXR_LIBS IlmImf Imath Half ${ZLIB_LIBRARY})
ELSE()
  SET(OPENEXR_LIBS IlmImf Imath Half)
ENDIF()

###########################################################################
# glog

SET(WITH_GFLAGS OFF CACHE BOOL ""Use gflags"")
SET(BUILD_SHARED_LIBS OFF CACHE BOOL "" "" FORCE)
IF(WIN32)
  ADD_DEFINITIONS( -D GOOGLE_GLOG_DLL_DECL= )
ENDIF()
ADD_SUBDIRECTORY(src/ext/glog)
SET_PROPERTY(TARGET glog logging_unittest demangle_unittest utilities_unittest stl_logging_unittest PROPERTY FOLDER ""ext"")
INCLUDE_DIRECTORIES (
  src/ext/glog/src
  ${CMAKE_BINARY_DIR}/src/ext/glog
)

###########################################################################
# ptex

# work around https://github.com/wdas/ptex/issues/28
IF ( CMAKE_BUILD_TYPE )
  STRING ( TOLOWER ${CMAKE_BUILD_TYPE} LOWER_BUILD_TYPE )
  SET ( ENV{FLAVOR} ${LOWER_BUILD_TYPE} )
ENDIF ()
SET(PTEX_BUILD_SHARED_LIBS OFF CACHE BOOL "" "" FORCE)

SET(CMAKE_MACOSX_RPATH 1)
IF ( WIN32 )
  ADD_DEFINITIONS ( /D PTEX_STATIC)
ENDIF ()
ADD_SUBDIRECTORY(src/ext/ptex)
SET_PROPERTY(TARGET Ptex_static ptxinfo halftest ftest rtest wtest PROPERTY FOLDER ""ext"")
INCLUDE_DIRECTORIES ( src/ext/ptex/src/ptex )

###########################################################################
# On to pbrt...

SET ( PBRT_CORE_SOURCE
  src/core/api.cpp
  src/core/bssrdf.cpp
  src/core/camera.cpp
  src/core/efloat.cpp
  src/core/error.cpp
  src/core/fileutil.cpp
  src/core/film.cpp
  src/core/filter.cpp
  src/core/floatfile.cpp
  src/core/geometry.cpp
  src/core/imageio.cpp
  src/core/integrator.cpp
  src/core/interaction.cpp
  src/core/interpolation.cpp
  src/core/light.cpp
  src/core/lightdistrib.cpp
  src/core/lowdiscrepancy.cpp
  src/core/material.cpp
  src/core/medium.cpp
  src/core/memory.cpp
  src/core/microfacet.cpp
  src/core/parallel.cpp
  src/core/paramset.cpp
  src/core/parser.cpp
  src/core/primitive.cpp
  src/core/progressreporter.cpp
  src/core/quaternion.cpp
  src/core/reflection.cpp
  src/core/sampler.cpp
  src/core/sampling.cpp
  src/core/scene.cpp
  src/core/shape.cpp
  src/core/sobolmatrices.cpp
  src/core/spectrum.cpp
  src/core/stats.cpp
  src/core/texture.cpp
  src/core/transform.cpp
  )

SET ( PBRT_CORE_HEADERS
  src/core/api.h
  src/core/bssrdf.h
  src/core/camera.h
  src/core/efloat.h
  src/core/error.h
  src/core/fileutil.h
  src/core/film.h
  src/core/filter.h
  src/core/floatfile.h
  src/core/geometry.h
  src/core/imageio.h
  src/core/integrator.h
  src/core/interaction.h
  src/core/interpolation.h
  src/core/light.h
  src/core/lowdiscrepancy.h
  src/core/material.h
  src/core/medium.h
  src/core/memory.h
  src/core/microfacet.h
  src/core/mipmap.h
  src/core/parallel.h
  src/core/paramset.h
  src/core/parser.h
  src/core/pbrt.h
  src/core/primitive.h
  src/core/progressreporter.h
  src/core/quaternion.h
  src/core/reflection.h
  src/core/rng.h
  src/core/sampler.h
  src/core/sampling.h
  src/core/scene.h
  src/core/shape.h
  src/core/sobolmatrices.h
  src/core/spectrum.h
  src/core/stats.h
  src/core/stringprint.h
  src/core/texture.h
  src/core/transform.h
  )

FILE ( GLOB PBRT_SOURCE
  src/ext/*
  src/accelerators/*
  src/cameras/*
  src/filters/*
  src/integrators/*
  src/lights/*
  src/materials/*
  src/samplers/*
  src/shapes/*
  src/textures/*
  src/media/*
  )

INCLUDE_DIRECTORIES ( src )
INCLUDE_DIRECTORIES ( src/core )

# Visual Studio source folders
SOURCE_GROUP (core REGULAR_EXPRESSION src/core/.*)
SOURCE_GROUP (ext REGULAR_EXPRESSION src/ext/.*)
SOURCE_GROUP (accelerators REGULAR_EXPRESSION src/accelerators/.*)
SOURCE_GROUP (cameras REGULAR_EXPRESSION src/cameras/.*)
SOURCE_GROUP (filters REGULAR_EXPRESSION src/filters/.*)
SOURCE_GROUP (integrators REGULAR_EXPRESSION src/integrators/.*)
SOURCE_GROUP (lights REGULAR_EXPRESSION src/lights/.*)
SOURCE_GROUP (materials REGULAR_EXPRESSION src/materials/.*)
SOURCE_GROUP (samplers REGULAR_EXPRESSION src/samplers/.*)
SOURCE_GROUP (shapes REGULAR_EXPRESSION src/shapes/.*)
SOURCE_GROUP (textures REGULAR_EXPRESSION src/textures/.*)
SOURCE_GROUP (media REGULAR_EXPRESSION src/media/.*)

###########################################################################
# pbrt libraries and executables

ADD_LIBRARY ( pbrt STATIC
  ${PBRT_YACC_LEX_SOURCE}
  ${PBRT_CORE_SOURCE}
  ${PBRT_CORE_HEADERS}
  ${PBRT_SOURCE}
  )
ADD_SANITIZERS ( pbrt )

# A non-exhaustive but pretty representative set..
# Note that we work-around shoddy c++11 support in MSVC2013
# (constexpr, etc.), so don't test for that stuff here
SET ( PBRT_CXX11_FEATURES
  cxx_auto_type
  cxx_explicit_conversions
  cxx_lambdas
  cxx_nullptr
  cxx_range_for
  cxx_static_assert
)
TARGET_COMPILE_FEATURES ( pbrt PRIVATE ${PBRT_CXX11_FEATURES} )

IF (WIN32)
  # Avoid a name clash when building on Visual Studio
  SET_TARGET_PROPERTIES ( pbrt PROPERTIES OUTPUT_NAME libpbrt )
ENDIF()

SET(ALL_PBRT_LIBS
  pbrt
  ${CMAKE_THREAD_LIBS_INIT}
  ${OPENEXR_LIBS}
  glog
  Ptex_static
  ${ZLIB_LIBRARY}
)

# Main renderer
ADD_EXECUTABLE ( pbrt_exe src/main/pbrt.cpp )
ADD_SANITIZERS ( pbrt_exe )

SET_TARGET_PROPERTIES ( pbrt_exe PROPERTIES OUTPUT_NAME pbrt )
TARGET_COMPILE_FEATURES ( pbrt_exe PRIVATE ${PBRT_CXX11_FEATURES} )
TARGET_LINK_LIBRARIES ( pbrt_exe ${ALL_PBRT_LIBS} )

# Tools
ADD_EXECUTABLE ( bsdftest src/tools/bsdftest.cpp )
ADD_SANITIZERS ( bsdftest )
TARGET_COMPILE_FEATURES ( bsdftest PRIVATE ${PBRT_CXX11_FEATURES} )
TARGET_LINK_LIBRARIES ( bsdftest ${ALL_PBRT_LIBS} )

ADD_EXECUTABLE ( imgtool src/tools/imgtool.cpp )
ADD_SANITIZERS ( imgtool )
TARGET_COMPILE_FEATURES ( imgtool PRIVATE ${PBRT_CXX11_FEATURES} )
TARGET_LINK_LIBRARIES ( imgtool ${ALL_PBRT_LIBS} )

ADD_EXECUTABLE ( obj2pbrt src/tools/obj2pbrt.cpp )
TARGET_COMPILE_FEATURES ( obj2pbrt PRIVATE ${PBRT_CXX11_FEATURES} )
ADD_SANITIZERS ( obj2pbrt )

ADD_EXECUTABLE ( cyhair2pbrt src/tools/cyhair2pbrt.cpp )
ADD_SANITIZERS ( cyhair2pbrt )

# Unit test

FILE ( GLOB PBRT_TEST_SOURCE
  src/tests/*.cpp
  src/tests/gtest/*.cc
  )

ADD_EXECUTABLE ( pbrt_test ${PBRT_TEST_SOURCE} )
ADD_SANITIZERS ( pbrt_test )
TARGET_COMPILE_FEATURES ( pbrt_test PRIVATE ${PBRT_CXX11_FEATURES} )
TARGET_LINK_LIBRARIES ( pbrt_test ${ALL_PBRT_LIBS} )

ADD_TEST ( pbrt_unit_test pbrt_test )

# Installation

INSTALL ( TARGETS
  pbrt_exe
  bsdftest
  imgtool
  obj2pbrt
  cyhair2pbrt
  DESTINATION
  bin
  )

INSTALL ( TARGETS
  pbrt
  DESTINATION
  lib
  )
",3.1.0,3.1
37479,humanoid-path-planner,hpp-core,False,False,False,False,False,19,C++,2020-05-17 08:14:52+00:00,2014-03-26 12:59:17+00:00,9,1953,"#
# Copyright (c) 2010, 2011, 2020 CNRS
# Authors: Florent Lamiraux, Joseph Mirabel, Guilhem Saurel
#
#
# This file is part of hpp-core
# hpp-core is free software: you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation, either version
# 3 of the License, or (at your option) any later version.
#
# hpp-core is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# hpp-core  If not, see
# <http://www.gnu.org/licenses/>.

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

SET(CXX_DISABLE_WERROR TRUE)
SET(DOXYGEN_USE_MATHJAX YES)
SET(DOXYGEN_USE_TEMPLATE_CSS TRUE)
SET(PROJECT_USE_CMAKE_EXPORT TRUE)

SET(PROJECT_NAME hpp-core)
SET(PROJECT_DESCRIPTION ""Implement basic classes for canonical path planning for kinematic chains."")

INCLUDE(cmake/hpp.cmake)
INCLUDE(cmake/boost.cmake)

SET(CMAKE_MODULE_PATH
  ${CMAKE_SOURCE_DIR}/cmake-modules/
  ${CMAKE_MODULE_PATH})

COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

ADD_PROJECT_DEPENDENCY(hpp-pinocchio)
ADD_PROJECT_DEPENDENCY(hpp-util)
ADD_PROJECT_DEPENDENCY(hpp-statistics)
ADD_PROJECT_DEPENDENCY(hpp-constraints)

SET(BOOST_COMPONENTS system timer unit_test_framework)
SEARCH_FOR_BOOST()

# Declare Headers
SET(${PROJECT_NAME}_HEADERS
  include/hpp/core/basic-configuration-shooter.hh # DEPRECATED
  include/hpp/core/bi-rrt-planner.hh
  include/hpp/core/collision-path-validation-report.hh
  include/hpp/core/collision-validation.hh
  include/hpp/core/relative-motion.hh
  include/hpp/core/collision-validation-report.hh
  include/hpp/core/projection-error.hh
  include/hpp/core/configuration-shooter.hh
  include/hpp/core/configuration-shooter/uniform.hh
  include/hpp/core/configuration-shooter/gaussian.hh
  include/hpp/core/config-projector.hh
  include/hpp/core/config-validation.hh
  include/hpp/core/config-validations.hh
  include/hpp/core/connected-component.hh
  include/hpp/core/constraint.hh
  include/hpp/core/constraint-set.hh
  include/hpp/core/container.hh
  include/hpp/core/continuous-validation.hh
  include/hpp/core/continuous-validation/dichotomy.hh
  include/hpp/core/continuous-validation/progressive.hh
  include/hpp/core/continuous-validation/interval-validation.hh
  include/hpp/core/continuous-validation/body-pair-collision.hh
  include/hpp/core/continuous-validation/solid-solid-collision.hh
  include/hpp/core/diffusing-planner.hh
  include/hpp/core/distance/reeds-shepp.hh
  include/hpp/core/distance.hh
  include/hpp/core/distance-between-objects.hh
  include/hpp/core/dubins-path.hh
  include/hpp/core/edge.hh
  include/hpp/core/explicit-numerical-constraint.hh
  include/hpp/core/explicit-relative-transformation.hh
  include/hpp/core/fwd.hh
  include/hpp/core/joint-bound-validation.hh
  include/hpp/core/equation.hh
  include/hpp/core/obstacle-user.hh
  include/hpp/core/path-validations.hh
  include/hpp/core/path-validation/discretized.hh
  include/hpp/core/path-validation/discretized-collision-checking.hh
  include/hpp/core/path-validation/discretized-joint-bound.hh
  include/hpp/core/numerical-constraint.hh
  include/hpp/core/node.hh
  include/hpp/core/parameter.hh
  include/hpp/core/path.hh
  include/hpp/core/path-optimization/linear-constraint.hh
  include/hpp/core/path-optimization/partial-shortcut.hh
  include/hpp/core/path-optimization/quadratic-program.hh
  include/hpp/core/path-optimization/random-shortcut.hh
  include/hpp/core/path-optimization/simple-shortcut.hh
  include/hpp/core/path-optimization/simple-time-parameterization.hh
  include/hpp/core/path-optimization/spline-gradient-based.hh
  include/hpp/core/path-optimization/spline-gradient-based-abstract.hh
  include/hpp/core/path-optimizer.hh
  include/hpp/core/path-planner.hh
  include/hpp/core/path-planner/k-prm-star.hh
  include/hpp/core/path-validation.hh
  include/hpp/core/path-validation-report.hh
  include/hpp/core/path-vector.hh
  include/hpp/core/path/spline.hh
  include/hpp/core/path/hermite.hh
  include/hpp/core/reeds-shepp-path.hh
  include/hpp/core/kinodynamic-path.hh
  include/hpp/core/kinodynamic-oriented-path.hh
  include/hpp/core/plan-and-optimize.hh
  include/hpp/core/plugin.hh
  include/hpp/core/problem.hh
  include/hpp/core/problem-solver.hh
  include/hpp/core/roadmap.hh
  include/hpp/core/steering-method.hh
  include/hpp/core/steering-method/fwd.hh
  include/hpp/core/steering-method/straight.hh
  include/hpp/core/steering-method/car-like.hh
  include/hpp/core/steering-method/constant-curvature.hh
  include/hpp/core/steering-method/dubins.hh
  include/hpp/core/steering-method/hermite.hh
  include/hpp/core/steering-method/reeds-shepp.hh
  include/hpp/core/steering-method/spline.hh
  include/hpp/core/steering-method/snibud.hh
  include/hpp/core/steering-method/reeds-shepp.hh
  include/hpp/core/steering-method/steering-kinodynamic.hh
  include/hpp/core/straight-path.hh
  include/hpp/core/interpolated-path.hh
  include/hpp/core/validation-report.hh
  include/hpp/core/visibility-prm-planner.hh
  include/hpp/core/weighed-distance.hh
  include/hpp/core/kinodynamic-distance.hh
  include/hpp/core/path-projector/progressive.hh
  include/hpp/core/path-projector/dichotomy.hh
  include/hpp/core/path-projector/global.hh
  include/hpp/core/path-projector/recursive-hermite.hh
  include/hpp/core/path-projector.hh
  include/hpp/core/nearest-neighbor.hh
  include/hpp/core/parser/roadmap-factory.hh
  include/hpp/core/problem-target.hh
  include/hpp/core/problem-target/goal-configurations.hh
  include/hpp/core/problem-target/task-target.hh
  include/hpp/core/subchain-path.hh
  include/hpp/core/time-parameterization.hh
  include/hpp/core/time-parameterization/polynomial.hh
  )

SET(${PROJECT_NAME}_SOURCES
  src/astar.hh
  src/bi-rrt-planner.cc
  src/collision-validation.cc
  src/configuration-shooter/uniform.cc
  src/configuration-shooter/gaussian.cc
  src/config-projector.cc
  src/config-validations.cc
  src/connected-component.cc
  src/constraint.cc
  src/constraint-set.cc
  src/continuous-validation.cc
  src/continuous-validation/body-pair-collision.cc
  src/continuous-validation/dichotomy.cc
  src/continuous-validation/solid-solid-collision.cc
  src/continuous-validation/progressive.cc
  src/diffusing-planner.cc
  src/distance/reeds-shepp.cc
  src/distance-between-objects.cc
  src/dubins.hh
  src/dubins.cc
  src/dubins-path.cc
  src/extracted-path.hh
  src/interpolated-path.cc
  src/joint-bound-validation.cc
  src/obstacle-user.cc
  src/path-validations.cc
  src/path-validation/discretized.cc
  src/path-validation/discretized-collision-checking.cc
  src/path-validation/discretized-joint-bound.cc
  src/path-validation/no-validation.hh
  src/nearest-neighbor/basic.hh #
  src/nearest-neighbor/basic.cc #
  # src/nearest-neighbor/k-d-tree.cc #
  # src/nearest-neighbor/k-d-tree.hh #
  src/node.cc #
  src/parameter.cc #
  src/path.cc #
  src/path-optimizer.cc #
  src/path-optimization/linear-constraint.cc #
  src/path-optimization/spline-gradient-based-abstract.cc #
  src/path-optimization/partial-shortcut.cc #
  src/path-optimization/random-shortcut.cc
  src/path-optimization/simple-shortcut.cc
  src/path-optimization/simple-time-parameterization.cc#
  src/path-planner.cc #
  src/path-planner/k-prm-star.cc
  src/path-vector.cc #
  src/path/spline.cc
  src/path/hermite.cc
  src/plan-and-optimize.cc #
  src/plugin.cc # TODO : addObstacle
  src/problem.cc # TODO : addObstacle
  src/problem-solver.cc # TODO : addObstacle
  src/path-projector.cc
  src/path-projector/dichotomy.cc #
  src/path-projector/global.cc #
  src/path-projector/progressive.cc #
  src/path-projector/recursive-hermite.cc
  src/path-projector.cc #
  src/parser/roadmap-factory.cc #
  src/problem-target/goal-configurations.cc #
  src/problem-target/task-target.cc #
  src/reeds-shepp-path.cc
  src/relative-motion.cc
  src/kinodynamic-path.cc
  src/kinodynamic-oriented-path.cc
  src/steering-method/steering-kinodynamic.cc
  src/roadmap.cc
  src/steering-method/reeds-shepp.cc # TODO access type of joint
  src/steering-method/car-like.cc
  src/steering-method/constant-curvature.cc
  src/steering-method/dubins.cc
  src/steering-method/snibud.cc
  src/steering-method/spline.cc
  src/steering-method/straight.cc
  src/straight-path.cc
  src/interpolated-path.cc
  src/visibility-prm-planner.cc
  src/weighed-distance.cc
  src/kinodynamic-distance.cc
  src/path-projector/progressive.cc
  src/path-projector/dichotomy.cc
  src/path-projector/global.cc
  src/path-projector.cc
  src/parser/roadmap-factory.cc
  src/problem-target/goal-configurations.cc
  src/problem-target/task-target.cc
  )

ADD_LIBRARY(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE src)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:include>)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CMAKE_DL_LIBS}
    hpp-util::hpp-util pinocchio::pinocchio hpp-statistics::hpp-statistics hpp-constraints::hpp-constraints)

INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)

# GPL licenced part
SET(${PROJECT_NAME}_HEADERS_GPL
  src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp
  )
SET(${PROJECT_NAME}_HEADERS_GPL
  src/path-optimization/quadratic-program.cc
  src/path-optimization/spline-gradient-based.cc
  )
ADD_LIBRARY(${PROJECT_NAME}-gpl SHARED ${${PROJECT_NAME}_SOURCES_GPL} ${${PROJECT_NAME}_HEADERS_GPL})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}-gpl PRIVATE src)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}-gpl ${PROJECT_NAME})

INSTALL(TARGETS ${PROJECT_NAME}-gpl EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)

ADD_SUBDIRECTORY(plugins)
ADD_SUBDIRECTORY(tests)

# Add dependency toward hpp-core library in pkg-config file.
PKG_CONFIG_APPEND_LIBS(""hpp-core"")

IF(INSTALL_DOCUMENTATION)
  INSTALL (FILES doc/continuous-validation.pdf
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/doc/${PROJECT_NAME}/doxygen-html)
ENDIF(INSTALL_DOCUMENTATION)

SET(HPP_CORE_CMAKE_PLUGIN ""${CMAKE_INSTALL_PREFIX}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}-plugin.cmake"")
SET(PKG_CONFIG_EXTRA ""${PKG_CONFIG_EXTRA}\ncmake_plugin=${HPP_CORE_CMAKE_PLUGIN}"")
SET(PACKAGE_EXTRA_MACROS ""set(HPP_CORE_CMAKE_PLUGIN ${HPP_CORE_CMAKE_PLUGIN})"")
INSTALL(FILES cmake-modules/hpp-core-plugin.cmake
  DESTINATION lib/cmake/${PROJECT_NAME}
  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
",3.1,3.1
37639,QMatrixClient,Quaternion,False,False,False,False,False,29,C++,2020-04-19 18:27:18+00:00,2016-01-21 23:03:04+00:00,372,1615,"CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
if (POLICY CMP0092)
cmake_policy(SET CMP0092 NEW)
endif()

set(IDENTIFIER ""com.github.quaternion"")
set(COPYRIGHT ""Copyright © 2016-2018 QMatrixClient, 2019 The Quotient Project"")

project(quaternion VERSION 0.0.9.5 LANGUAGES CXX)

if(UNIX AND NOT APPLE)
    set(LINUX 1)
endif(UNIX AND NOT APPLE)

include(CheckCXXCompilerFlag)
if (NOT WIN32)
    include(GNUInstallDirs)
    include(cmake/ECMInstallIcons.cmake)
endif(NOT WIN32)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to 'Debug' as none was specified"")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING ""Choose the type of build"" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release""
    ""MinSizeRel"" ""RelWithDebInfo"")
endif()

# Setup command line parameters for the compiler and linker
if (MSVC)
    add_compile_options(/EHsc /W4
        /wd4100 /wd4127 /wd4242 /wd4244 /wd4245 /wd4267 /wd4365 /wd4456 /wd4459
        /wd4464 /wd4505 /wd4514 /wd4571 /wd4619 /wd4623 /wd4625 /wd4626 /wd4706
        /wd4710 /wd4774 /wd4820 /wd4946 /wd5026 /wd5027)
else()
    foreach (FLAG """" all pedantic extra no-unused-parameter)
        CHECK_CXX_COMPILER_FLAG(""-W${FLAG}"" WARN_${FLAG}_SUPPORTED)
        if ( WARN_${FLAG}_SUPPORTED AND NOT CMAKE_CXX_FLAGS MATCHES ""(^| )-W?${FLAG}($| )"")
            add_compile_options(-W${FLAG})
        endif ()
    endforeach ()
endif()

# Find the libraries
find_package(Qt5 5.9 REQUIRED Widgets Network Quick Gui LinguistTools Multimedia DBus)
# Qt5_Prefix is only used to show Qt path in message()
# Qt5_BinDir is where all the binary tools for Qt are
if (QT_QMAKE_EXECUTABLE)
    get_filename_component(Qt5_BinDir ""${QT_QMAKE_EXECUTABLE}"" DIRECTORY)
    get_filename_component(Qt5_Prefix ""${Qt5_BinDir}/.."" ABSOLUTE)
else()
    get_filename_component(Qt5_BinDir ""${Qt5_DIR}/../../../bin"" ABSOLUTE)
    get_filename_component(Qt5_Prefix ""${Qt5_DIR}/../../../.."" ABSOLUTE)
endif()
if (USE_QQUICKWIDGET)
    find_package(Qt5 5.9 REQUIRED QuickWidgets)
elseif(NOT DISABLE_QQUICKWIDGET)
    # QQuickWidget only stopped crashing in Qt 5.12, use it by default if found
    find_package(Qt5 5.12 QUIET COMPONENTS QuickWidgets)
    if (Qt5QuickWidgets_FOUND)
        set(USE_QQUICKWIDGET ON)
    endif()
endif()

if(WIN32)
    enable_language(RC)
    include(CMakeDetermineRCCompiler)

    if(MINGW)
        set(CMAKE_RC_COMPILER_INIT windres)
        set(CMAKE_RC_COMPILE_OBJECT ""<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -I${CMAKE_CURRENT_BINARY_DIR} -i <SOURCE> -o <OBJECT>"")
    endif()
endif()

if ((NOT DEFINED USE_INTREE_LIBQMC OR USE_INTREE_LIBQMC)
        AND EXISTS ${PROJECT_SOURCE_DIR}/lib/lib/util.h)
    add_subdirectory(lib)
    include_directories(lib)
    if (NOT DEFINED USE_INTREE_LIBQMC)
        set (USE_INTREE_LIBQMC 1)
    endif ()
endif ()
if (NOT USE_INTREE_LIBQMC)
    find_package(Quotient 0.6 REQUIRED)
    if (NOT Quotient_FOUND)
        message( WARNING ""libQuotient not found; configuration will most likely fail."")
        message( WARNING ""Make sure you have installed libQuotient development files"")
        message( WARNING ""as a package or checked out the library sources in lib/."")
        message( WARNING ""See also BUILDING.md"")
    endif ()
endif ()

find_package(Qt5Keychain QUIET)
if (Qt5Keychain_FOUND)
    set(USE_KEYCHAIN ON)
endif()

message( STATUS )
message( STATUS ""============================================================================="" )
message( STATUS ""                          Quaternion Build Information"" )
message( STATUS ""============================================================================="" )
if (CMAKE_BUILD_TYPE)
    message( STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
endif(CMAKE_BUILD_TYPE)
message( STATUS ""Quaternion install prefix: ${CMAKE_INSTALL_PREFIX}"" )
# Get Git info if possible
find_package(Git)
if(GIT_FOUND)
    execute_process(COMMAND
        ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_SHA1
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    message( STATUS ""Git SHA1: ${GIT_SHA1}"")
endif()
message( STATUS ""Using compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}"" )
message( STATUS ""Using Qt ${Qt5_VERSION} at ${Qt5_Prefix}"" )
if (USE_INTREE_LIBQMC)
    message( STATUS ""Using in-tree libQuotient"")
    if (GIT_FOUND)
        execute_process(COMMAND
            ""${GIT_EXECUTABLE}"" rev-parse -q HEAD
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib
            OUTPUT_VARIABLE LIB_GIT_SHA1
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        message( STATUS ""  Library git SHA1: ${LIB_GIT_SHA1}"")
    endif (GIT_FOUND)
else ()
    message( STATUS ""Using libQuotient ${Quotient_VERSION} at ${Quotient_DIR}"")
endif ()
if (USE_QQUICKWIDGET)
    message( STATUS ""Using QQuickWidget to render QML"")
endif(USE_QQUICKWIDGET)
if (USE_KEYCHAIN)
    message( STATUS ""Using Qt Keychain ${Qt5Keychain_VERSION} at ${Qt5Keychain_DIR}"")
endif ()
message( STATUS ""============================================================================="" )
message( STATUS )

# Set up source files
set(quaternion_SRCS
    client/quaternionroom.cpp
    client/imageprovider.cpp
    client/activitydetector.cpp
    client/dialog.cpp
    client/logindialog.cpp
    client/networkconfigdialog.cpp
    client/roomdialogs.cpp
    client/mainwindow.cpp
    client/roomlistdock.cpp
    client/userlistdock.cpp
    client/kchatedit.cpp
    client/chatedit.cpp
    client/chatroomwidget.cpp
    client/systemtrayicon.cpp
    client/models/messageeventmodel.cpp
    client/models/userlistmodel.cpp
    client/models/roomlistmodel.cpp
    client/models/abstractroomordering.cpp
    client/models/orderbytag.cpp
    client/main.cpp
    )

set(quaternion_QRC
    client/resources.qrc
    )

# quaternion_en.ts is updated explicitly by building trbase target,
# while all other translation files are created and updated externally at
# Lokalise.co
set(quaternion_en_TS client/translations/quaternion_en.ts)
QT5_CREATE_TRANSLATION(client/translations ${quaternion_SRCS} ${quaternion_QRC} ${quaternion_en_TS})
add_custom_target(trbase SOURCES ${quaternion_en_TS} VERBATIM)

set(quaternion_TS
    client/translations/quaternion_en_GB.ts
    client/translations/quaternion_de_DE.ts
    client/translations/quaternion_pl.ts
    client/translations/quaternion_ru.ts
    )
QT5_ADD_TRANSLATION(quaternion_QM ${quaternion_TS})

QT5_ADD_RESOURCES(quaternion_QRC_SRC ${quaternion_QRC})
set_property(SOURCE qrc_resources.cpp PROPERTY SKIP_AUTOMOC ON)

if(WIN32)
    set(quaternion_WINRC quaternion_win32.rc)
    set_property(SOURCE quaternion_win32.rc APPEND PROPERTY
        OBJECT_DEPENDS ${PROJECT_SOURCE_DIR}/icons/quaternion.ico
    )
endif()

if(APPLE)
    set(MACOSX_BUNDLE_GUI_IDENTIFIER ${IDENTIFIER})
    set(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})

    set(MACOSX_BUNDLE_COPYRIGHT ${COPYRIGHT})

    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${quaternion_VERSION})
    set(MACOSX_BUNDLE_BUNDLE_VERSION ${quaternion_VERSION})

    set(ICON_NAME ""quaternion.icns"")
    set(${PROJECT_NAME}_MAC_ICON ""${PROJECT_SOURCE_DIR}/icons/${ICON_NAME}"")
    set(MACOSX_BUNDLE_ICON_FILE ${ICON_NAME})
    set_property(SOURCE ""${${PROJECT_NAME}_MAC_ICON}"" PROPERTY
        MACOSX_PACKAGE_LOCATION Resources)
endif(APPLE)

# Windows, this is a GUI executable; OSX, make a bundle
add_executable(${PROJECT_NAME} WIN32 MACOSX_BUNDLE
    ${quaternion_SRCS} ${quaternion_QRC_SRC} ${quaternion_QM}
    ${quaternion_WINRC} ${${PROJECT_NAME}_MAC_ICON})

target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)

target_compile_definitions(${PROJECT_NAME} PRIVATE
    GIT_SHA1=""${GIT_SHA1}"" LIB_GIT_SHA1=""${LIB_GIT_SHA1}"")
target_link_libraries(${PROJECT_NAME}
    Quotient Qt5::Widgets Qt5::Quick Qt5::Qml Qt5::Gui Qt5::Network)

if (USE_QQUICKWIDGET)
    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_QQUICKWIDGET)
    target_link_libraries(${PROJECT_NAME} Qt5::QuickWidgets)
endif()

if(USE_KEYCHAIN)
    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_KEYCHAIN)
    target_link_libraries(${PROJECT_NAME} ${QTKEYCHAIN_LIBRARIES})
    include_directories(${QTKEYCHAIN_INCLUDE_DIR})
endif()

# macOS specific config for bundling
if (APPLE)
    set_property(TARGET ${PROJECT_NAME} PROPERTY MACOSX_BUNDLE_INFO_PLIST
                 ""${PROJECT_SOURCE_DIR}/cmake/MacOSXBundleInfo.plist.in"")
endif()

# Installation

if (NOT CMAKE_INSTALL_BINDIR)
    set(CMAKE_INSTALL_BINDIR ""."")
endif()

install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR})
if(LINUX)
    install(FILES linux/${IDENTIFIER}.desktop
            DESTINATION  ${CMAKE_INSTALL_DATADIR}/applications
            )
    install(FILES linux/${IDENTIFIER}.appdata.xml
            DESTINATION  ${CMAKE_INSTALL_DATADIR}/metainfo
            )
    install(FILES ${quaternion_QM}
            DESTINATION ${CMAKE_INSTALL_DATADIR}/Quotient/quaternion/translations
            )
    file(GLOB quaternion_icons icons/quaternion/*-apps-quaternion.png)
    ecm_install_icons(ICONS ${quaternion_icons} icons/quaternion/sc-apps-quaternion.svgz
                      DESTINATION ${CMAKE_INSTALL_DATADIR}/icons
                      )
endif(LINUX)

set(QML_DIR ${PROJECT_SOURCE_DIR}/client/qml)
if (NOT DEPLOY_VERBOSITY)
    set(DEPLOY_VERBOSITY 1) # The default for *deployqt tools, out of 0..3
endif()
if(WIN32)
    install(CODE ""
        message(STATUS \""Running windeployqt at \${CMAKE_INSTALL_PREFIX}\${CMAKE_INSTALL_BINDIR}\"")
        execute_process(
            COMMAND \""${Qt5_BinDir}/windeployqt\"" --verbose ${DEPLOY_VERBOSITY}
                --no-multimediaquick --no-declarative --no-test --no-winextras
                --qmldir \""${QML_DIR}\""
                \${CMAKE_INSTALL_PREFIX}\${CMAKE_INSTALL_BINDIR}
            RESULT_VARIABLE WDQ_RETVAL
        )
        if (WDQ_RETVAL)
            message( \""windeployqt returned \${WDQ_RETVAL} - check messages above\"")
        else()
            message( STATUS \""Quaternion and its dependencies have been deployed to \${CMAKE_INSTALL_PREFIX}.\"")
        endif()
    "")
    install(FILES ${quaternion_QM}
            DESTINATION ${CMAKE_INSTALL_BINDIR}/translations
           )
endif(WIN32)

# Packaging

if(APPLE)
    set(MACDEPLOYQT_ARGS ${PROJECT_NAME}.app -dmg -qmldir=""${QML_DIR}"" -verbose=${DEPLOY_VERBOSITY})
    add_custom_target(image
        COMMAND ""${Qt5_BinDir}/macdeployqt"" ${MACDEPLOYQT_ARGS}
        DEPENDS ${PROJECT_NAME}
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMENT ""Running ${MACDEPLOYQT} with args: ${MACDEPLOYQT_ARGS}""
    )
endif(APPLE)
",3.10,3.1
37669,lxde,lxqt-notificationd,False,False,False,False,False,85,C++,2020-05-05 14:16:07+00:00,2013-08-06 10:46:57+00:00,36,455,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
# CMP0000: Call the cmake_minimum_required() command at the beginning of the top-level
# CMakeLists.txt file even before calling the project() command.
# The cmake_minimum_required(VERSION) command implicitly invokes the cmake_policy(VERSION)
# command to specify that the current project code is written for the given range of CMake
# versions.
project(lxqt-notificationd)

include(GNUInstallDirs)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(UPDATE_TRANSLATIONS ""Update source translation translations/*.ts files"" OFF)
option(LXQT_NOTIFICATION_BUILD_TESTS ""Build LXQt Notification tests"" OFF)

set(KF5_MINIMUM_VERSION ""5.36.0"")
set(LXQT_MINIMUM_VERSION ""0.15.0"")
set(QT_MINIMUM_VERSION ""5.10.0"")

find_package(Qt5DBus ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
find_package(lxqt ${LXQT_MINIMUM_VERSION} REQUIRED)
message(STATUS ""Building with Qt${Qt5Core_VERSION}"")

# Patch Version
set(LXQT_NOTIFICATIOND_PATCH_VERSION 0)

set(LXQT_NOTIFICATIOND_VERSION ${LXQT_MAJOR_VERSION}.${LXQT_MINOR_VERSION}.${LXQT_NOTIFICATIOND_PATCH_VERSION})
add_definitions(
    ""-DLXQT_NOTIFICATIOND_VERSION=\""${LXQT_NOTIFICATIOND_VERSION}\""""
)

include(LXQtPreventInSourceBuilds)
include(LXQtCompilerSettings NO_POLICY_SCOPE)

# Translations **********************************
include(LXQtTranslate)

add_subdirectory(config)
add_subdirectory(src)
if (LXQT_NOTIFICATION_BUILD_TESTS)
    add_subdirectory(test)
endif()

## merged from lxqt-common
add_subdirectory(autostart)
",3.1.0,3.1
37791,kaspermarstal,SimpleElastix,False,False,False,False,False,53,SWIG,2020-05-17 15:54:50+00:00,2014-11-20 09:51:10+00:00,272,7847,"cmake_minimum_required ( VERSION 3.10 FATAL_ERROR )

# Explicitly add INCREMENTAL linking option to command lines.
# http://www.cmake.org/pipermail/cmake/2010-February/035174.html
SET(MSVC_INCREMENTAL_DEFAULT ON)

project ( SimpleITK )

cmake_policy( VERSION 3.10 )

foreach(p
    )
  if(POLICY ${p})
    cmake_policy(SET ${p} NEW)
  endif()
endforeach()

# Include extra CMake files
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_CURRENT_SOURCE_DIR}/CMake"")

#-----------------------------------------------------------------------------
# Version information
include(Version.cmake)

set(SimpleITK_VERSION ""${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
if(DEFINED SimpleITK_VERSION_PATCH)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.${SimpleITK_VERSION_PATCH}"")
  if(DEFINED SimpleITK_VERSION_TWEAK)
    set(SimpleITK_VERSION ""${SimpleITK_VERSION}.${SimpleITK_VERSION_TWEAK}"")
  endif()
endif()

if(DEFINED SimpleITK_VERSION_RC)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}${SimpleITK_VERSION_RC}"")
endif()
if(DEFINED SimpleITK_VERSION_POST)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.post${SimpleITK_VERSION_POST}"")
elseif(DEFINED SimpleITK_VERSION_DEV)
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}.dev${SimpleITK_VERSION_DEV}"")
endif()

option( SimpleITK_BUILD_DISTRIBUTE ""Remove '-g#####' from version. ( for official distribution only )"" OFF )
mark_as_advanced( SimpleITK_BUILD_DISTRIBUTE )
if( NOT SimpleITK_BUILD_DISTRIBUTE )
  set(SimpleITK_VERSION ""${SimpleITK_VERSION}-g${SimpleITK_VERSION_HASH}"")
endif()

message(STATUS ""Building SimpleITK version \""${SimpleITK_VERSION}\"""")


#-----------------------------------------------------------
# Check and set required flags for compilation
# This must be done before any other try compiles based tests are
# done.
include(sitkCheckRequiredFlags)
include(sitkCompilerWarningsSettings)

include( sitkSITKLegacyNaming )
include( sitkForbidDownloadsOption )
include( sitkTargetUseITK )

find_package(ITK REQUIRED )
#we require certain packages be turned on in ITK
include(sitkCheckForITKModuleDependencies)

if(ITK_FOUND)
  # NOTE: We are purposely not calling UseITK yet. However, we must make
  # sure the requred compilation and linker flags are set. Since, we
  # are trying to encapsulate ITK, we need to very carefully control
  # in access to the headers and libraries, hence each SimpleITK
  # library will call UseITK.

  # Add compiler flags needed to use ITK.
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${ITK_REQUIRED_C_FLAGS}"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS}"")
  set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")
  set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")
  set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}"")

  link_directories( ""${ITK_LIBRARY_DIRS}"")
endif()


list(APPEND SimpleITK_PRIVATE_COMPILE_OPTIONS ${CXX_ADDITIONAL_WARNING_FLAGS})

#-----------------------------------------------------------
# Configure Elastix

find_package(Elastix REQUIRED)
include(${ELASTIX_USE_FILE})

if(ELASTIX_USE_OPENMP)
  find_package(OpenMP QUIET)
  if( OPENMP_FOUND )
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
  endif()
endif()

# Check if libraries are available
if(ELASTIX_BUILD_EXECUTABLE)
  message(FATAL_ERROR ""SimpleElastix requires elastix libraries, please set ELASTIX_BUILD_EXECUTABLE=OFF and rebuild elastix."")
endif()

#----------------------------------------------------------
# Place all options to go into sitkConfigure.h here
option(BUILD_SHARED_LIBS ""Build SimpleITK ITK with shared libraries. This does not effect wrapped languages."" OFF)
set(SITK_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})

set(SimpleITK_EXPLICIT_INSTATIATION_DEFAULT OFF)
if(MSCV)
  set(SimpleITK_EXPLICIT_INSTATIATION_DEFAULT ON)
endif()
option(SimpleITK_EXPLICIT_INSTANTIATION ""Enable an ITK static library of explicitly instantiated templates."" ${SimpleITK_EXPLICIT_INSTATIATION_DEFAULT})
sitk_legacy_naming(SimpleITK_EXPLICIT_INSTANTIATION)

if ( MSVC AND SITK_BUILD_SHARED_LIBS )
  set( SITK_SimpleITKExplit_STATIC 1 )
endif()

set( SimpleITK_INT64_PIXELIDS_DEFAULT ON )
if( MSVC )
  # See http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:MSVC_VERSION
  # and https://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Version_history
  #   1500 = VS  9.0 (Visual Studio 2008)
  #   1600 = VS 10.0 (Visual Studio 2010)
  #   1700 = VS 11.0 (Visual Studio 2012)
  if(MSVC_VERSION VERSION_LESS 1600)
    # with this option on the linker runs out of memory
    set( SimpleITK_INT64_PIXELIDS_DEFAULT OFF )
  endif()
endif()
option( SimpleITK_INT64_PIXELIDS ""Instantiate 64-bit integer pixels, including unsigned, vector and label maps.""
  ${SimpleITK_INT64_PIXELIDS_DEFAULT} )
sitk_legacy_naming(SimpleITK_INT64_PIXELIDS)



set(SimpleITK_4D_IMAGES_DEFAULT ON)
# 1900 = VS 14.0 (Visual Studio 2015)
if(MSVC AND MSVC_VERSION VERSION_LESS 1900)
  set( SimpleITK_4D_IMAGES_DEFAULT OFF )
  message(""disable"")
endif()
option( SimpleITK_4D_IMAGES ""Add Image and I/O support for four spatial dimensions."" ${SimpleITK_4D_IMAGES_DEFAULT} )
mark_as_advanced( SimpleITK_4D_IMAGES )
sitk_legacy_naming( SimpleITK_4D_IMAGES )


# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()

set ( SimpleITK_INCLUDE_DIRS
      ${CMAKE_SOURCE_DIR}/Code/Common/include
      ${CMAKE_SOURCE_DIR}/Code/Registration/include
      ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include
      ${CMAKE_SOURCE_DIR}/Code/IO/include
      ${CMAKE_SOURCE_DIR}/Code/Elastix/include
      ${CMAKE_BINARY_DIR}/Code/BasicFilters/include
      ${CMAKE_BINARY_DIR}/Code/Common/include
      )

set ( SimpleITK_LIBRARIES SimpleITKCommon SimpleITKIO SimpleITKRegistration ElastixImageFilter TransformixImageFilter )

if (SimpleITK_EXPLICIT_INSTANTIATION)
  list ( APPEND SimpleITK_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Code/Explicit/include )
  # This library is linked privately to SimpleITK libraries and is not
  # part of the public link interface
  #list ( APPEND SimpleITK_LIBRARIES  SimpleITKExplicit )
endif()

set( SimpleITK_LIBRARIES ${SimpleITK_LIBRARIES}  CACHE INTERNAL """" )

# Be sure to clear these each time
set ( GENERATED_TEST_LIST """" CACHE INTERNAL """" )
set ( GENERATED_FILTER_LIST """" CACHE INTERNAL """" )
set ( GENERATED_TEST_SOURCE_LIST """" CACHE INTERNAL """" )

# Create cached list of all template components
file( GLOB template_components
      ${SimpleITK_SOURCE_DIR}/ExpandTemplateGenerator/Components/[^.]*.h.in
      ${SimpleITK_SOURCE_DIR}/ExpandTemplateGenerator/Components/[^.]*.cxx.in
    )
set ( template_components ${template_components} CACHE INTERNAL """" )


#------------------------------------------------------------------------------
# Variables for use in install rules:

if(NOT SimpleITK_INSTALL_RUNTIME_DIR)
  set(SimpleITK_INSTALL_RUNTIME_DIR ""bin"")
endif()
if(NOT SimpleITK_INSTALL_LIBRARY_DIR)
  set(SimpleITK_INSTALL_LIBRARY_DIR ""lib"")
endif()
if(NOT SimpleITK_INSTALL_ARCHIVE_DIR)
  set(SimpleITK_INSTALL_ARCHIVE_DIR ""lib"")
endif()
if(NOT SimpleITK_INSTALL_INCLUDE_DIR)
  set(SimpleITK_INSTALL_INCLUDE_DIR ""include/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
endif()
if(NOT SimpleITK_INSTALL_DOC_DIR)
  set(SimpleITK_INSTALL_DOC_DIR share/doc/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
endif()
if(NOT SimpleITK_INSTALL_PACKAGE_DIR)
  set(SimpleITK_INSTALL_PACKAGE_DIR ""${SimpleITK_INSTALL_LIBRARY_DIR}/cmake/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}"")
endif()

function(sitk_install_exported_target tgt)
  # Remove the build tree's SimpleITKTargets file if this is the first call:
  get_property(first_time GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET)
  if(NOT first_time)
    file(REMOVE ${CMAKE_BINARY_DIR}/SimpleITKTargets.cmake)
    set_property(GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET 1)
  endif()

  get_target_property( type ${tgt} TYPE )
  if (type STREQUAL ""STATIC_LIBRARY"" OR
      type STREQUAL ""MODULE_LIBRARY"" OR
      type STREQUAL ""SHARED_LIBRARY"")
    set_property(TARGET ${tgt} PROPERTY VERSION 1)
    set_property(TARGET ${tgt} PROPERTY SOVERSION 1)
    set_property(TARGET ${tgt} PROPERTY
      OUTPUT_NAME ${tgt}-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
  endif()

  export(TARGETS ${tgt}
    APPEND FILE ""${CMAKE_BINARY_DIR}/SimpleITKTargets.cmake""
    )

  install(TARGETS ${tgt}
    EXPORT SimpleITKTargets
    RUNTIME DESTINATION ${SimpleITK_INSTALL_RUNTIME_DIR} COMPONENT Runtime
    LIBRARY DESTINATION ${SimpleITK_INSTALL_LIBRARY_DIR} COMPONENT Runtime
    ARCHIVE DESTINATION ${SimpleITK_INSTALL_ARCHIVE_DIR} COMPONENT Development
    )
endfunction()

include(sitkStripOption)

#------------------------------------------------------------------------------
# These are some system specific compiler options needed to build SimpleITK

include(CheckCXXCompilerFlag)

if( NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE )
  set( CMAKE_POSITION_INDEPENDENT_CODE 1 )
endif()


if( NOT DEFINED CMAKE_C_VISIBILITY_PRESET )
  set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET )
  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_VISIBILITY_INLINES_HIDDEN )
  set( CMAKE_VISIBILITY_INLINES_HIDDEN 1 )
endif()


#-----------------------------------------------------------
# Place all checks and try compile variable for sitkConfigure.h here

include(CheckIncludeFileCXX)


# check for stdint
# This generates a configuration error if the compiler is not supported
check_include_file_cxx( stdint.h SITK_HAS_STDINT_H )
if(NOT SITK_HAS_STDINT_H)
  message(FATAL_ERROR ""Unable to find require \""stdint.h\"" header file."")
endif()

#------------------------------------------------------------------------------
# assemble a list of important documentation from Simple ITK and ITK

set ( SimpleITK_DOC_FILES
  ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE""
  ""${CMAKE_CURRENT_SOURCE_DIR}/NOTICE""
  ""${CMAKE_CURRENT_SOURCE_DIR}/README.md""
  )

# add important files from ITK

# if using from build tree then ITK_USE_FILE will be
# ITK_SOURCE_DIR/CMake/UseITK.cmake. The needed docs should be in the
# root of the source tree
get_filename_component( _itk_root ""${ITK_USE_FILE}"" PATH )
get_filename_component( _itk_root ""${_itk_root}"" PATH )

set(_itk_doc_search_paths ""${_itk_root}"")

get_filename_component( _itk_root ""${_itk_root}"" PATH )
get_filename_component( _itk_root ""${_itk_root}"" PATH )
list( APPEND _itk_doc_search_paths
   ""${_itk_root}/share/doc/ITK-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}""
   ""${_itk_root}/share/doc/ITK""
)


#
# Only append file if it exists
#
function(append_if_exists list_var file)
   if( EXISTS ${file} )
     list( APPEND ${list_var} ${file} )
     set( ${list_var} ${${list_var}} PARENT_SCOPE )
   endif()
endfunction()

foreach( _p IN LISTS _itk_doc_search_paths)
  if( EXISTS ""${_p}/NOTICE"" )
    append_if_exists(ITK_DOC_FILES ""${_p}/NOTICE"")
    append_if_exists(ITK_DOC_FILES ""${_p}/README.txt"")
    append_if_exists(ITK_DOC_FILES ""${_p}/README.md"")
    break()
  endif()
endforeach()

if( NOT ITK_DOC_FILES )
  message( WARNING ""Unable to file ITK's NOTICE File!\n This file will not be included in SimpleITK packaging!"" )
endif()


foreach(_f IN LISTS ITK_DOC_FILES)
  get_filename_component( _name ""${_f}"" NAME )
  set( _o ""${CMAKE_CURRENT_BINARY_DIR}/ITK-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}-${_name}"" )
  configure_file( ""${_f}""  ""${_o}"" )
  list( APPEND SimpleITK_DOC_FILES ""${_o}"" )
endforeach()


#------------------------------------------------------------------------------
# Set up Documentation
include(${SimpleITK_SOURCE_DIR}/Utilities/Doxygen/Doxygen.cmake)

#------------------------------------------------------------------------------
# Set up wrapping.
#
# Use CMake file which present options for wrapped languages, and finds languages as needed
#
include(sitkLanguageOptions)

#------------------------------------------------------------------------------
# Ensure that development strips have been setup
# include(sitkCheckSourceTree)
# This has been disabled for SimpleElastix.

#-----------------------------------------------------------------------------
if(NOT EXISTS ""${SimpleITK_SOURCE_DIR}/.ExternalData/README.rst"")
  # This file is always present in version-controlled source trees
  # so we must have been extracted from a source tarball with no
  # data objects needed for testing.  Turn off tests by default
  # since enabling them requires network access or manual data
  # store configuration.
  option(BUILD_TESTING ""Build the testing tree."" OFF)
endif()

#------------------------------------------------------------------------------
# set things up for testing, this configuration needs to occour before
# we enter the sub-directories
include(CTest)

#------------------------------------------------------------------------------
# Go to subdirectories
add_subdirectory ( Utilities )
add_subdirectory ( Code )
add_subdirectory ( Wrapping )

#------------------------------------------------------------------------------
# ITK uses KWStyle for checking the coding style
include(${SimpleITK_SOURCE_DIR}/Utilities/KWStyle/KWStyle.cmake)

#------------------------------------------------------------------------------
# set things up for testing, if enabled

if ( BUILD_TESTING )

  include( sitkAddTest )

  enable_testing()
  add_subdirectory ( Testing )

  set(BUILDNAME ""${BUILDNAME}"" CACHE STRING ""Name of build on the dashboard"")
  configure_file(CMake/CTestCustom.cmake.in CTestCustom.cmake)
endif()

# optional examples directory with testing
option(BUILD_EXAMPLES ""Build the Examples directory."" ON)

if(BUILD_EXAMPLES)
  add_subdirectory ( Examples )
endif()


#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the build tree.
set(SimpleITKConfig_TREE ""build"")
set(SimpleITKConfig_CODE """")
set(SimpleITKConfig_INCLUDE_DIRS ${SimpleITK_INCLUDE_DIRS})

configure_file(SimpleITKConfig.cmake.in
               SimpleITKConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the install tree.
set(SimpleITKConfig_TREE ""install"")

set(SimpleITKConfig_CODE ""set(SimpleITK_INSTALL_PREFIX \""\${_SimpleITKConfig_DIR}\"")"")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE ""/"" "";"" _count ""${SimpleITK_INSTALL_PACKAGE_DIR}"")
foreach(p ${_count})
  set(SimpleITKConfig_CODE ""${SimpleITKConfig_CODE}
get_filename_component(SimpleITK_INSTALL_PREFIX \""\${SimpleITK_INSTALL_PREFIX}\"" PATH)"")
endforeach(p)
set(SimpleITKConfig_CODE ""${SimpleITKConfig_CODE}\n"")

set(SimpleITKConfig_INCLUDE_DIRS
  ""\${SimpleITK_INSTALL_PREFIX}/${SimpleITK_INSTALL_INCLUDE_DIR}"")

configure_file(SimpleITKConfig.cmake.in
               CMakeFiles/SimpleITKConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Help other projects use SimpleITK
configure_file(UseSimpleITK.cmake.in
               UseSimpleITK.cmake COPYONLY IMMEDIATE)

configure_file(SimpleITKConfigVersion.cmake.in
               SimpleITKConfigVersion.cmake @ONLY IMMEDIATE)


#------------------------------------------------------------------------------
# INSTALLATION

install(FILES ${SimpleITK_BINARY_DIR}/CMakeFiles/SimpleITKConfig.cmake
              ${SimpleITK_BINARY_DIR}/SimpleITKConfigVersion.cmake
              ${SimpleITK_BINARY_DIR}/UseSimpleITK.cmake
  DESTINATION ${SimpleITK_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

install(EXPORT SimpleITKTargets
  DESTINATION ${SimpleITK_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

file( GLOB __files
  ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/BasicFilters/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/Common/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/Common/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/Elastix/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/Elastix/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/IO/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/IO/include/[^.]*.hxx
  ${CMAKE_SOURCE_DIR}/Code/Registration/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Code/Registration/include/[^.]*.hxx
  )

install(FILES ${__files}
  DESTINATION ${SimpleITK_INSTALL_INCLUDE_DIR}
  COMPONENT Development)

install(
  DIRECTORY
    ${CMAKE_SOURCE_DIR}/Code/Common/include/Ancillary
  DESTINATION
    ${SimpleITK_INSTALL_INCLUDE_DIR}/
  COMPONENT Development
  FILES_MATCHING PATTERN ""*.h""
)

install(FILES ${SimpleITK_DOC_FILES} DESTINATION ""${SimpleITK_INSTALL_DOC_DIR}"" COMPONENT Runtime)

#------------------------------------------------------------------------------
# CPack

set(CPACK_SOURCE_IGNORE_FILES  ""${ITK_MODULES_DISABLED_CPACK};/\\\\.git"")
set(CPACK_PACKAGE_VERSION_MAJOR ""${SimpleITK_VERSION_MAJOR}"")
set(CPACK_PACKAGE_VERSION_MINOR ""${SimpleITK_VERSION_MINOR}"")
set(CPACK_PACKAGE_VERSION_PATCH ""${SimpleITK_VERSION_PATCH}"")


include( CPack )

if(BUILD_TESTING)
  if(COMMAND ExternalData_Add_Target )
    ExternalData_Add_Target( SimpleITKData )
  endif()
endif()
",3.10,3.1
37951,OpenShot,libopenshot-audio,False,False,False,False,False,5,C++,2020-05-07 22:25:17+00:00,2015-03-09 21:01:23+00:00,84,232,"#################### CMakeLists.txt (libopenshot-audio) ######################
# @brief CMake build file for libopenshot-audio (used to generate makefiles)
# @author Jonathan Thomas <jonathan@openshot.org>
#
# @section LICENSE
#
# Copyright (c) 2008-2019 OpenShot Studios, LLC
# <http://www.openshotstudios.com/>. This file is part of
# OpenShot Audio Library (libopenshot-audio), an open-source project dedicated
# to delivering high quality audio editing and playback solutions to the
# world. For more information visit <http://www.openshot.org/>.
#
# OpenShot Audio Library (libopenshot-audio) is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# OpenShot Audio Library (libopenshot-audio) is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenShot Audio Library. If not, see <http://www.gnu.org/licenses/>.
################################################################################

cmake_minimum_required(VERSION 3.1...3.14 FATAL_ERROR)

message(""\
-----------------------------------------------------------------
          Welcome to the OpenShot Build System!

CMake will now check libopenshot-audio's build dependencies and
inform you of any missing files or other issues.

For more information, please visit <http://www.openshot.org/>.
-----------------------------------------------------------------"")

################ ADD CMAKE MODULES ##################
set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/Modules"")

################ PROJECT VERSION ####################
set(PROJECT_VERSION_FULL ""0.2.0"")
set(PROJECT_SO_VERSION 7)

# Remove the dash and anything following, to get the #.#.# version for project()
STRING(REGEX REPLACE ""\-.*$"" """" VERSION_NUM ""${PROJECT_VERSION_FULL}"")

################### SETUP PROJECT ###################
# This will define the following variables
# PROJECT_NAME
# PROJECT_VERSION, libopenshot-audio_VERSION
# PROJECT_VERSION_MAJOR, libopenshot-audio_VERSION_MAJOR
# PROJECT_VERSION_MINOR, libopenshot-audio_VERSION_MINOR
# PROJECT_VERSION_PATCH, libopenshot-audio_VERSION_PATCH
PROJECT(libopenshot-audio LANGUAGES C CXX VERSION ${VERSION_NUM})

# JuceHeader.h needs a hexadecimal version number for the project
if(CMAKE_VERSION VERSION_GREATER 3.13)
  math(EXPR PROJECT_VERSION_HEX
    ""(${PROJECT_VERSION_MAJOR} << 16) + \
     (${PROJECT_VERSION_MINOR} << 8) + \
     (${PROJECT_VERSION_PATCH})"" OUTPUT_FORMAT HEXADECIMAL )
else()
  # Compile and run a C++ program to generate the hex version
  set(HEX_COMPILE_DEFINITIONS
    -DVERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    -DVERSION_MINOR=${PROJECT_VERSION_MINOR}
    -DVERSION_PATCH=${PROJECT_VERSION_PATCH}
  )
  try_run(HEX_VERSION_RUN HEX_VERSION_BUILD
    ${CMAKE_CURRENT_BINARY_DIR}/hex_version
    ${PROJECT_SOURCE_DIR}/src/hex_version.cpp
    COMPILE_DEFINITIONS ${HEX_COMPILE_DEFINITIONS}
    RUN_OUTPUT_VARIABLE HEX_VERSION_OUTPUT
  )
  if (NOT HEX_VERSION_BUILD)
    message(ERROR ""Failed to compile hex-version utility!"")
  elseif(HEX_VERSION_RUN STREQUAL FAILED_TO_RUN)
    message(ERROR ""Could not execute hex-version utility!"")
  else()
    set(PROJECT_VERSION_HEX ${HEX_VERSION_OUTPUT})
  endif()
endif()

message(""\
Generating build files for ${PROJECT_NAME} \
version ${PROJECT_VERSION_FULL} (${PROJECT_VERSION_HEX})"" )
message(""SO/API/ABI Version: ${PROJECT_SO_VERSION}"" )


# Define install paths according to system conventions
# XXX: This must be AFTER THE PROJECT() COMMAND w/ languages enabled,
#      in order to properly configure CMAKE_INSTALL_LIBDIR path
include(GNUInstallDirs)

########## Configure headers ##############
configure_file(include/JuceHeader.h.in include/JuceHeader.h @ONLY)
configure_file(include/AppConfig.h.in include/AppConfig.h @ONLY)
# We'll want those installed later
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/libopenshot-audio )

# Juce requires either DEBUG or NDEBUG to be defined on MacOS.
# -DNDEBUG is set by cmake for all release configs, so add
# -DDEBUG for debug builds. We'll do this for all OSes, even
# though only MacOS requires it.
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG"")
# Make sure we've picked some build type, default to debug
if(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL """")
	set(CMAKE_BUILD_TYPE ""Debug"")
endif()


# Enable stack-unwinding support in c objects on gcc-based platforms.
# Failing to do so will cause your program to be terminated when a png
# or a jpeg exception is thrown on linux or macosx.
IF (CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fexceptions"")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF (WIN32)
	# Find the base directory of the ASIO SDK (if any)
	find_path(ASIO_SDK_DIR iasiodrv.h PATHS $ENV{ASIO_SDK_DIR} )

	IF (ASIO_SDK_DIR)
		MESSAGE(""FOUND ASIO_SDK_DIR: ${ASIO_SDK_DIR}"")
		ADD_DEFINITIONS(-DJUCE_ASIO=1)
		INCLUDE_DIRECTORIES(${ASIO_SDK_DIR})
	ELSE(ASIO_SDK_DIR)
		MESSAGE(""ASIO_SDK_DIR NOT FOUND"")
		ADD_DEFINITIONS(-DJUCE_ASIO=0)
	ENDIF (ASIO_SDK_DIR)

	# Tell Visual Studio not to automatically link system DLLs
	ADD_DEFINITIONS(-DJUCE_DONT_AUTOLINK_TO_WIN32_LIBRARIES)

	# Order here can be important!
	# For example, winmm.lib must come before kernel32.lib (if linked)
	# or older 32-bit windows versions will have linking issues for
	# certain entry points
	SET(JUCE_PLATFORM_SPECIFIC_LIBRARIES
                winmm.lib
                ws2_32.lib
                wininet.lib
                version.lib
                Shlwapi.dll
		)
endif()

if(UNIX AND APPLE)
	SET(JUCE_PLATFORM_SPECIFIC_DIR build/macosx/platform_specific_code)
	SET(JUCE_PLATFORM_SPECIFIC_LIBRARIES ""-framework Carbon -framework Cocoa -framework CoreFoundation -framework CoreAudio -framework CoreMidi -framework IOKit -framework AGL -framework AudioToolbox -framework QuartzCore -lobjc -framework Accelerate"")
	SET(CMAKE_CXX_FLAGS "" ${CMAKE_CXX_FLAGS} -flax-vector-conversions"")
endif()

# Default extension for source files
if(UNIX AND APPLE)
  SET(SOURCE_EXTENSION ""mm"")
else ()
  SET(SOURCE_EXTENSION ""cpp"")
endif()

# List of modules to build
set(JUCE_MODULES
	audio_basics
	audio_devices
	audio_formats
	core
	data_structures
	events )
# Convert to list of source files (extension based on OS)
foreach(j_module IN LISTS JUCE_MODULES)
	list(APPEND JUCE_SOURCES
		JuceLibraryCode/include_juce_${j_module}.${SOURCE_EXTENSION} )
endforeach()

add_library(openshot-audio SHARED ${JUCE_SOURCES} )

# Include header directories
target_include_directories(openshot-audio PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/JuceLibraryCode/modules>
	$<INSTALL_INTERFACE:include/libopenshot-audio> )

# Set SONAME and other library properties
set_target_properties(openshot-audio
		PROPERTIES
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_SO_VERSION}
		CXX_STANDARD 11
		CXX_STANDARD_REQUIRED YES
		CXX_EXTENSIONS OFF
		MACOSX_RPATH OFF
		INSTALL_NAME_DIR ""${CMAKE_INSTALL_PREFIX}/lib"")

# Threading library -- uses IMPORTED target Threads::Threads (since CMake 3.1)
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
target_link_libraries(openshot-audio PUBLIC Threads::Threads)

# ALSA (Linux only)
if(UNIX AND NOT APPLE)
  find_package(ALSA REQUIRED)
  if (ALSA_FOUND AND NOT TARGET ALSA::ALSA) # CMake < 3.12
    add_library(ALSA::ALSA INTERFACE IMPORTED)
    set_target_properties(ALSA::ALSA PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES ${ALSA_INCLUDE_DIR}
      INTERFACE_LINK_LIBRARIES ${ALSA_LIBRARIES})
  endif()
  target_compile_definitions(openshot-audio PUBLIC LINUX)
  target_link_libraries(openshot-audio PUBLIC ALSA::ALSA)
endif()

# ZLIB -- uses IMPORTED target ZLIB::ZLIB which has existed since CMake 3.1
find_package(ZLIB REQUIRED)
target_link_libraries(openshot-audio PUBLIC ZLIB::ZLIB)

target_link_libraries(openshot-audio PUBLIC
		${CMAKE_DL_LIBS}
		${JUCE_PLATFORM_SPECIFIC_LIBRARIES} )

# PROCESS SUB-DIRECTORIES
add_subdirectory(src)


#################### INSTALLATION #####################

# Install Header Files
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/JuceLibraryCode/modules/
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/libopenshot-audio
	FILES_MATCHING PATTERN ""*.h"" )

# Install library
INSTALL(TARGETS openshot-audio
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
	RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR} )

# Install manpage
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/doc/openshot-audio-test-sound.1
	DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 )

########### DOCUMENTATION ##########
# We need Python to process the source for Doxygen...
find_package(PythonInterp 3)

if(PYTHONINTERP_FOUND)
    # Pre-process the sources to fix documentation formatting
    add_custom_target(process-source-files
        COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/process_source_files.py ${CMAKE_CURRENT_SOURCE_DIR}/JuceLibraryCode/modules ""docs""
        COMMENT ""Formatting source code for documentation""
        VERBATIM )

    # Processed docs are removed on ""make clean""
    set_property(DIRECTORY
        APPEND PROPERTY
        ADDITIONAL_MAKE_CLEAN_FILES ""docs"" )

    # Find Doxygen (used for documentation)
    include(cmake/Modules/UseDoxygen.cmake)

    # Make sure process-source comes before Doxygen targets,
    # assuming UseDoxygen found the tools and created them
    if(TARGET doc)
        add_dependencies(doc process-source-files)
    endif()
    if(TARGET doxygen)
        add_dependencies(doxygen process-source-files)
    endif()
endif()

# Doxygen was found
if (TARGET doc)
    message(STATUS ""Doxygen found, documentation target enabled"")
    message(""\nTo compile documentation in doc/html, run: 'make doc'"")

    # Install docs, if the user builds them with `make doc`
    install(CODE ""MESSAGE(\""Checking for documentation files to install...\"")"")
    install(CODE ""MESSAGE(\""(Compile with 'make doc' command, requires Python3 and Doxygen)\"")"")

    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html/
        DESTINATION ${CMAKE_INSTALL_DOCDIR}/API
        MESSAGE_NEVER # Don't spew about file copies
        OPTIONAL )    # No error if the docs aren't found
endif()
",3.1...3.14,3.1
38221,jakubfi,em400,False,False,False,False,False,3,C,2020-05-15 14:57:46+00:00,2012-09-16 09:21:52+00:00,14,1255,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
project(em400
	DESCRIPTION ""MERA-400 emulator""
	LANGUAGES C
)

include(GNUInstallDirs)
include(cmake/appversion.cmake)

# ---- Libraries ---------------------------------------------------------

find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)
find_package(Threads REQUIRED)
find_package(emdas REQUIRED)
find_package(emcrk REQUIRED)
find_package(emawp REQUIRED)
find_library(MATH_LIBRARY m)
find_library(RT_LIBRARY rt)

set(CURSES_NEED_NCURSES TRUE)
find_package(Curses REQUIRED)
find_path(READLINE_INCLUDE_DIR readline/readline.h)
find_library(READLINE_LIBRARY readline)

include(FindALSA)
include(cmake/FindPulseAudio.cmake)
find_library(PULSEAUDIO_SIMPLE_LIBRARY pulse-simple)

if(PULSEAUDIO_FOUND OR ALSA_FOUND)
	message(STATUS ""Sound enabled: ALSA: ${ALSA_FOUND}, PulseAudio: ${PULSEAUDIO_FOUND}"")
else()
	message(STATUS ""No supported sound libraries found, disabling sound"")
endif()

# ---- Sources -----------------------------------------------------------

set(SOURCES_EM400
	src/em400.c
	src/cfg.c
	src/log.c
	src/log_crk.c

	src/utils/utils.c
	src/utils/elst.c
	src/utils/fdbridge.c

	src/cpu/instructions.c
	src/cpu/clock.c
	src/cpu/cpu.c
	src/cpu/interrupts.c
	src/cpu/iset.c
	src/cpu/alu.c
	src/cpu/cp.c

	src/mem/mem.c
	src/mem/mega.c
	src/mem/elwro.c

	src/fpga/iobus.c

	src/io/io.c
	src/io/chan.c
	src/io/cchar.c
	src/io/cchar_term.c
	src/io/cchar_flop8.c
	src/io/iotester.c

	src/io/dev/dev.c
	src/io/dev/e4image.c
	src/io/dev/term.c
	src/io/dev/winchester.c
	src/io/dev/flop5.c
	src/io/dev/punchrd.c
	src/io/dev/puncher.c
	src/io/dev/terminal.c
	src/io/dev/printer.c

	src/io/mx/mx.c
	src/io/mx/cmds.c
	src/io/mx/irq.c
	src/io/mx/event.c
	src/io/mx/line.c
	src/io/mx/proto_common.c
	src/io/mx/proto_winchester.c
	src/io/mx/proto_floppy.c
	src/io/mx/proto_tape.c
	src/io/mx/proto_puncher.c
	src/io/mx/proto_punchrd.c
	src/io/mx/proto_terminal.c
	src/io/mx/proto_som_puncher.c
	src/io/mx/proto_som_punchrd.c
	src/io/mx/proto_som_terminal.c

	src/ui/ui.c

	src/ui/cmd/cmd.c
	src/ui/cmd/commands.c
	src/ui/cmd/utils.c

	src/ectl/cpu.c
	src/ectl/est.c
	src/ectl/brk.c

	src/sound/file.c
	src/sound/sound.c
	src/sound/biquad.c
	src/cpu/buzzer.c
)

if(ALSA_FOUND)
	list(APPEND SOURCES_EM400 src/sound/alsa.c)
endif()
if(PULSEAUDIO_FOUND)
	list(APPEND SOURCES_EM400 src/sound/pulseaudio.c)
endif()

bison_target(cfg_parser
	src/cfg_parser.y
	${CMAKE_CURRENT_BINARY_DIR}/cfg_parser.c
	DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/cfg_parser.h
	COMPILE_FLAGS ""-p cyy""
)
flex_target(cfg_scanner
	src/cfg_scanner.l
	${CMAKE_CURRENT_BINARY_DIR}/cfg_scanner.c
	COMPILE_FLAGS ""-P cyy --never-interactive""
)
add_flex_bison_dependency(cfg_scanner cfg_parser)

bison_target(ectl_parser
	src/ectl/parser.y
	${CMAKE_CURRENT_BINARY_DIR}/ectl_parser.c
	DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/ectl_parser.h
	COMPILE_FLAGS ""-p ectl_yy""
)
flex_target(ectl_scanner
	src/ectl/scanner.l
	${CMAKE_CURRENT_BINARY_DIR}/ectl_scanner.c
	COMPILE_FLAGS ""-P ectl_yy --never-interactive""
)
add_flex_bison_dependency(ectl_scanner ectl_parser)

# TODO: cleanup
bison_target(debugger_parser
	src/ui/curses/parser.y
	${CMAKE_CURRENT_BINARY_DIR}/debugger_parser.c
)
flex_target(debugger_scanner
	src/ui/curses/scanner.l
	${CMAKE_CURRENT_BINARY_DIR}/debugger_scanner.c
	COMPILE_FLAGS ""--never-interactive""
)
add_flex_bison_dependency(debugger_scanner debugger_parser)
set(SOURCES_DEBUGGER
	src/ui/curses/awin.c
	src/ui/curses/awinch.c
	src/ui/curses/debugger.c
	src/ui/curses/eval.c
	src/ui/curses/cmd.c
	src/ui/curses/ui.c
	src/ui/curses/keywords.c
	src/ui/curses/decode.c
	${BISON_debugger_parser_OUTPUTS}
	${FLEX_debugger_scanner_OUTPUTS}
)
set(DEBUGGER_LIBS ${CURSES_LIBRARIES} ${READLINE_LIBRARY})

# ---- Target: em400 -----------------------------------------------------

add_executable(em400
	${SOURCES_EM400}
	${SOURCES_DEBUGGER}
	${BISON_cfg_parser_OUTPUTS}
	${FLEX_cfg_scanner_OUTPUTS}
	${BISON_ectl_parser_OUTPUTS}
	${FLEX_ectl_scanner_OUTPUTS}
)

set_property(TARGET em400 PROPERTY C_STANDARD 99)
target_include_directories(em400 PUBLIC SYSTEM ${EMCRK_INCLUDE_DIRS})
target_include_directories(em400 PUBLIC SYSTEM ${EMAWP_INCLUDE_DIRS})
target_include_directories(em400 PUBLIC SYSTEM ${EMDAS_INCLUDE_DIRS})
target_include_directories(em400 PRIVATE ${CMAKE_SOURCE_DIR}/src)
target_include_directories(em400 PUBLIC ${CMAKE_SOURCE_DIR}/include)
target_include_directories(em400 PRIVATE ${CMAKE_BINARY_DIR})
target_compile_definitions(em400 PRIVATE EM400_VERSION=""${APP_VERSION}"")
target_compile_options(em400 PUBLIC -Wall)

target_link_libraries(em400
	${DEBUGGER_LIBS}
	${EMDAS_LIBRARIES}
	${EMCRK_LIBRARIES}
	${EMAWP_LIBRARIES}
	${FLEX_LIBRARIES} ${BISON_LIBRARIES}
	${CMAKE_THREAD_LIBS_INIT}
	${RT_LIBRARY}
	${MATH_LIBRARY}
)

if(ALSA_FOUND)
	target_include_directories(em400 PUBLIC SYSTEM ${ALSA_INCLUDE_DIRS})
	target_link_libraries(em400 ${ALSA_LIBRARIES})
	target_compile_definitions(em400 PRIVATE HAVE_ALSA)
endif()
if(PULSEAUDIO_FOUND)
	target_include_directories(em400 PUBLIC SYSTEM  ${PULSEAUDIO_INCLUDE_DIRS})
	target_link_libraries(em400 ${PULSEAUDIO_LIBRARIES} ${PULSEAUDIO_SIMPLE_LIBRARY})
	target_compile_definitions(em400 PRIVATE HAVE_PULSEAUDIO)
endif()

install(TARGETS em400
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# ---- Target: emitool ---------------------------------------------------

add_executable(emitool
	src/emitool.c
	src/io/dev/e4image.c
)
set_property(TARGET emitool PROPERTY C_STANDARD 99)
target_include_directories(emitool PRIVATE ${CMAKE_SOURCE_DIR}/src)
target_compile_options(emitool PUBLIC -Wall)

install(TARGETS emitool
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# ---- Target: embin -----------------------------------------------------

add_executable(embin
	src/embin.c
	src/utils/utils.c
)
set_property(TARGET embin PROPERTY C_STANDARD 99)
target_include_directories(embin PRIVATE ${CMAKE_SOURCE_DIR}/src)
target_compile_options(embin PUBLIC -Wall)

install(TARGETS embin
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# vim: tabstop=4
",3.1,3.1
38312,fcitx,fcitx-configtool,False,False,False,False,False,13,C,2020-05-06 07:02:59+00:00,2012-05-22 03:23:55+00:00,19,267,"cmake_minimum_required(VERSION 3.1)

project(fcitx-configtool)

set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_C_STANDARD 99)

option(ENABLE_GTK2 ""Enable GTK2 Version"" Off)
option(ENABLE_GTK3 ""Enable GTK3 Version"" On)

set(CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"" ${CMAKE_MODULE_PATH})

find_package(PkgConfig REQUIRED)

if(ENABLE_GTK3)
  pkg_check_modules(FCITX_GCLIENT ""fcitx-gclient>=4.2.9"" REQUIRED)
  pkg_check_modules(GTK3 ""gtk+-3.0>=3.20"" REQUIRED)
endif()

if(ENABLE_GTK2)
  pkg_check_modules(GTK2 ""gtk+-2.0>=2.22"" REQUIRED)
endif()

pkg_check_modules(ISO_CODES ""iso-codes"" REQUIRED)
_pkgconfig_invoke(""iso-codes"" ISO_CODES PREFIX """" ""--variable=prefix"")

find_package(Fcitx 4.2.8 REQUIRED)
_fcitx_add_uninstall_target()
_fcitx_translate_add_handler(
  ""${PROJECT_SOURCE_DIR}/cmake/fcitx-extract-glade.sh"" glade)

add_definitions(""-D_GNU_SOURCE"")
set(CMAKE_C_FLAGS ""-Wall -Wextra -Wno-sign-compare -Wno-unused-local-typedefs -Wno-unused-parameter -fvisibility=hidden ${CMAKE_C_FLAGS}"")
set(CMAKE_CXX_FLAGS ""-Wall -Wextra -Wno-sign-compare -Wno-unused-local-typedefs -Wno-unused-parameter -fvisibility=hidden ${CMAKE_CXX_FLAGS}"")
set(CMAKE_SHARED_LINKER_FLAGS ""-Wl,--no-undefined,--as-needed ${CMAKE_SHARED_LINKER_FLAGS}"")
set(CMAKE_MODULE_LINKER_FLAGS ""-Wl,--no-undefined,--as-needed ${CMAKE_MODULE_LINKER_FLAGS}"")

string(REGEX REPLACE ""^([0-9]+)\\.[0-9]+\\.[0-9]+.*"" ""\\1"" FCITX4_MAJOR_VERSION ""${FCITX4_VERSION}"")
string(REGEX REPLACE ""^[0-9]+\\.([0-9]+)\\.[0-9]+.*"" ""\\1"" FCITX4_MINOR_VERSION ""${FCITX4_VERSION}"")
string(REGEX REPLACE ""^[0-9]+\\.[0-9]+\\.([0-9]+).*"" ""\\1"" FCITX4_PATCH_VERSION ""${FCITX4_VERSION}"")

set(datadir ${CMAKE_INSTALL_PREFIX}/share)
set(localedir ${CMAKE_INSTALL_PREFIX}/share/locale)
set(exec_prefix ""${CMAKE_INSTALL_PREFIX}"")
set(liblocaledir ${CMAKE_INSTALL_PREFIX}/lib/locale)

configure_file(config.h.in config.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_subdirectory(po)
add_subdirectory(gtk3)
add_subdirectory(gtk)
",3.1,3.1
38447,thezbyg,gpick,False,False,False,False,False,6,C++,2020-05-12 20:30:05+00:00,2015-03-21 10:06:00+00:00,209,444,"cmake_minimum_required(VERSION 3.1)
project(gpick)
option(ENABLE_NLS ""compile with gettext support"" true)
option(USE_GTK3 ""use GTK3 instead of GTK2"" true)
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
file(GLOB SOURCES
	source/*.cpp source/*.h
	source/color_names/*.cpp source/color_names/*.h
	source/dbus/*.cpp source/dbus/*.h source/dbus/*.c
	source/gtk/*.cpp source/gtk/*.h
	source/i18n/*.cpp source/i18n/*.h
	source/layout/*.cpp source/layout/*.h
	source/lua/*.cpp source/lua/*.h
	source/tools/*.cpp source/tools/*.h
	source/transformation/*.cpp source/transformation/*.h
)
list(REMOVE_ITEM SOURCES source/Color.cpp source/Color.h source/MathUtil.cpp source/MathUtil.h source/lua/Script.cpp source/lua/Script.h)
include(Version)
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/source/version/Version.cpp.in"" ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/Version.cpp"" @ONLY)
list(APPEND SOURCES ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/Version.cpp"")
find_package(Boost 1.58 COMPONENTS filesystem system unit_test_framework REQUIRED)
find_package(PkgConfig)
if (PkgConfig_FOUND)
	if (USE_GTK3)
		pkg_check_modules(GTK3 gtk+-3.0>=3.0)
	else()
		pkg_check_modules(GTK2 gtk+-2.0>=2.24)
		pkg_check_modules(GioUnix gio-unix-2.0>=2.24)
	endif()
	pkg_search_module(Lua lua5.3>=5.3 lua5>=5.3 lua>=5.3 lua5.2>=5.2 lua>=5.2)
	pkg_check_modules(Expat expat>=1.0)
endif (PkgConfig_FOUND)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
find_package(Ragel 6.9 REQUIRED)

function(set_compile_options target)
	if (MSVC)
		target_compile_options(${target} PRIVATE /MD /utf-8)
		target_compile_options(${target} PRIVATE $<$<COMPILE_LANGUAGE:C>:/TP>)
		target_compile_definitions(${target} PRIVATE UNICODE GSEAL_ENABLE)
		if (ENABLE_NLS)
			target_compile_definitions(${target} PRIVATE ENABLE_NLS)
		endif()
	else()
		target_compile_options(${target} PRIVATE -Wall -Wfloat-conversion)
		target_compile_options(${target} PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-std=c++14>)
		if (ENABLE_NLS)
			target_compile_definitions(${target} PRIVATE ENABLE_NLS ""LOCALEDIR=${CMAKE_INSTALL_PREFIX}/share/locale"")
		endif()
	endif()
endfunction()

function(add_gtk_options target)
	if (USE_GTK3)
		target_link_libraries(${target} PRIVATE
			${GTK3_LIBRARIES}
		)
		target_include_directories(${target} PRIVATE
			${GTK3_INCLUDE_DIRS}
		)
	else()
		target_link_libraries(${target} PRIVATE
			${GTK2_LIBRARIES}
			${GioUnix_LIBRARIES}
		)
		target_include_directories(${target} PRIVATE
			${GTK2_INCLUDE_DIRS}
			${GioUnix_INCLUDE_DIRS}
		)
	endif()
endfunction()

file(GLOB MATH_SOURCES source/MathUtil.cpp source/MathUtil.h)
add_library(gpick-math ${MATH_SOURCES})
set_compile_options(gpick-math)
target_include_directories(gpick-math PRIVATE source)

file(GLOB COLOR_SOURCES source/Color.cpp source/Color.h)
add_library(gpick-color ${COLOR_SOURCES})
set_compile_options(gpick-color)
target_link_libraries(gpick-color PRIVATE gpick-math)
target_include_directories(gpick-color PRIVATE source)

file(GLOB COMMON_SOURCES source/common/*.cpp source/common/*.h)
add_library(gpick-common ${COMMON_SOURCES})
set_compile_options(gpick-common)
target_include_directories(gpick-common PRIVATE source)

file(GLOB DYNV_SOURCES source/dynv/*.cpp source/dynv/*.h)
add_library(gpick-dynv ${DYNV_SOURCES})
set_compile_options(gpick-dynv)
target_link_libraries(gpick-dynv PRIVATE gpick-color)
target_include_directories(gpick-dynv PRIVATE
	source
	${Expat_INCLUDE_DIRS}
)

file(GLOB LUA_SOURCES source/lua/Script.cpp source/lua/Script.h)
add_library(gpick-lua ${LUA_SOURCES})
set_compile_options(gpick-lua)
target_link_libraries(gpick-lua PRIVATE
	${Lua_LIBRARIES}
)
target_include_directories(gpick-lua PRIVATE
	source
	${Lua_INCLUDE_DIRS}
)

file(GLOB PARSER_SOURCES source/parser/*.cpp source/parser/*.h)
ragel_target(text_file_parser source/parser/TextFileParser.rl ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/TextFileParser.cpp)
list(APPEND PARSER_SOURCES ${RAGEL_text_file_parser_OUTPUTS})
add_library(gpick-parser ${PARSER_SOURCES})
set_compile_options(gpick-parser)
target_include_directories(gpick-parser PRIVATE source)

if (ENABLE_NLS)
	find_package(Gettext REQUIRED)
	file(GLOB TRANSLATIONS share/locale/*/LC_MESSAGES/gpick.po)
	foreach(translation ${TRANSLATIONS})
		file(RELATIVE_PATH name ""${CMAKE_CURRENT_SOURCE_DIR}"" ${translation})
		get_filename_component(dir ${name} DIRECTORY)
		msgfmt_target(translation ${translation} ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${dir}/gpick.mo)
		set(MSGFMT_translation_COMPILE_FLAGS ""--check-format --check-domain"")
		list(APPEND TRANSLATION_FILES ${MSGFMT_translation_OUTPUTS})
	endforeach()
	add_custom_target(translations ALL DEPENDS ${TRANSLATION_FILES})
	file(GLOB LUA_SOURCES share/gpick/*.lua)
	add_custom_target(template
		COMMAND ${XGETTEXT_EXECUTABLE} --keyword=_ --keyword=N_ --from-code=UTF-8 --package-name=gpick --package-version=0.0 --output=${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/template_c.pot ${SOURCES}
		COMMAND ${XGETTEXT_EXECUTABLE} --language=C++ --keyword=_ --keyword=N_ --from-code=UTF-8 --package-name=gpick --package-version=0.0 --output=${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/template_lua.pot ${LUA_SOURCES}
		COMMAND ${MSGCAT_EXECUTABLE} --use-first ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/template_c.pot ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/template_lua.pot --output-file=${CMAKE_CURRENT_BINARY_DIR}/template.pot
	)
endif()

add_executable(gpick ${SOURCES})
set_compile_options(gpick)
add_gtk_options(gpick)
target_link_libraries(gpick PRIVATE
	gpick-color
	gpick-math
	gpick-dynv
	gpick-lua
	gpick-parser
	gpick-common
	${Boost_FILESYSTEM_LIBRARY}
	${Boost_SYSTEM_LIBRARY}
	${Lua_LIBRARIES}
	${Expat_LIBRARIES}
	Threads::Threads
)
target_include_directories(gpick PRIVATE
	source
	${Boost_INCLUDE_DIRS}
	${Lua_INCLUDE_DIRS}
	${Expat_INCLUDE_DIRS}
)

file(GLOB TESTS_SOURCES source/test/*.cpp source/test/*.h)
add_executable(tests ${TESTS_SOURCES})
set_compile_options(tests)
target_compile_definitions(tests PRIVATE BOOST_TEST_DYN_LINK)
target_link_libraries(tests PRIVATE
	gpick-color
	gpick-math
	gpick-dynv
	gpick-lua
	gpick-parser
	gpick-common
	${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
	${Lua_LIBRARIES}
	${Expat_LIBRARIES}
	Threads::Threads
)
target_include_directories(tests PRIVATE
	source
	${Boost_INCLUDE_DIRS}
	${Lua_INCLUDE_DIRS}
	${Expat_INCLUDE_DIRS}
)

install(TARGETS gpick DESTINATION bin)
install(FILES share/metainfo/gpick.appdata.xml DESTINATION share/metainfo)
install(FILES share/applications/gpick.desktop DESTINATION share/applications)
install(FILES share/mime/packages/gpick.xml DESTINATION share/mime/packages)
install(FILES share/doc/gpick/copyright DESTINATION share/doc/gpick)
install(FILES share/man/man1/gpick.1 DESTINATION share/man/man1)
file(GLOB RESOURCE_FILES share/gpick/*.png share/gpick/*.lua share/gpick/*.txt)
install(FILES ${RESOURCE_FILES} DESTINATION share/gpick)
install(DIRECTORY share/icons DESTINATION share)
if (ENABLE_NLS)
	foreach(translation ${TRANSLATION_FILES})
		file(RELATIVE_PATH name ""${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}"" ${translation})
		get_filename_component(dir ${name} DIRECTORY)
		install(FILES ${translation} DESTINATION ${dir})
	endforeach()
endif()
",3.1,3.1
38471,dafer45,TBTK,False,False,False,False,False,3,C++,2020-05-17 18:55:36+00:00,2016-02-02 20:43:21+00:00,80,1976,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

PROJECT(TBTK)

EXECUTE_PROCESS(
	COMMAND git rev-parse --short HEAD
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	OUTPUT_VARIABLE TBTK_VERSION_GIT_HASH
	OUTPUT_STRIP_TRAILING_WHITESPACE
)

ENABLE_TESTING()

LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/CMake/Modules/"")

INCLUDE(TBTKVersionInfo)
INCLUDE(TBTKBuildOptions)

#Detect packages
FIND_PACKAGE(BLAS QUIET REQUIRED)
FIND_PACKAGE(LAPACK QUIET REQUIRED)
FIND_PACKAGE(HDF5 QUIET)
FIND_PACKAGE(ARPACK QUIET)
FIND_PACKAGE(CUDA QUIET)
FIND_PACKAGE(CURL QUIET)
FIND_PACKAGE(Eigen3 QUIET)
FIND_PACKAGE(FFTW3 QUIET)
FIND_PACKAGE(GMP QUIET)
FIND_PACKAGE(Gnuplot QUIET)
FIND_PACKAGE(OpenCV QUIET)
FIND_PACKAGE(OpenBLAS QUIET)
FIND_PACKAGE(OpenMP QUIET)
FIND_PACKAGE(Python QUIET)
FIND_PACKAGE(SuperLU QUIET)
FIND_PACKAGE(wxWidgets QUIET)

#Detect packages with pkg-config
FIND_PACKAGE(PkgConfig QUIET)
IF(PKG_CONFIG_FOUND)
	PKG_CHECK_MODULES(LIBINT2 libint2)
ENDIF(PKG_CONFIG_FOUND)

#Print which extension enabling libraries that were found.
MESSAGE("""")
MESSAGE(""============================== OPTIONAL LIBRARIES =============================="")
MESSAGE(""Libraries that enables extensions that were found (empty box means not found)."")
MESSAGE(""--------------------------------------------------------------------------------"")
IF(ARPACK_FOUND)
	MESSAGE(""[X] ARPACK"")
ELSE(ARPACK_FOUND)
	MESSAGE(""[ ] ARPACK"")
ENDIF(ARPACK_FOUND)

IF(CUDA_FOUND)
	MESSAGE(""[X] CUDA"")
	ADD_DEFINITIONS(-DTBTK_CUDA_ENABLED)
ELSE(CUDA_FOUND)
	MESSAGE(""[ ] CUDA"")
ENDIF(CUDA_FOUND)

IF(CURL_FOUND)
	MESSAGE(""[X] cURL"")
ELSE(CURL_FOUND)
	MESSAGE(""[ ] cURL"")
ENDIF(CURL_FOUND)

IF(EIGEN3_FOUND)
	MESSAGE(""[X] Eigen3"")
	INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIRS})
ELSE(EIGEN3_FOUND)
	MESSAGE(""[ ] Eigen3"")
ENDIF(EIGEN3_FOUND)

IF(FFTW3_FOUND)
	MESSAGE(""[X] FFTW3"")
ELSE(FFTW3_FOUND)
	MESSAGE(""[ ] FFTW3"")
ENDIF(FFTW3_FOUND)

IF(GMP_FOUND)
	MESSAGE(""[X] GMP"")
	INCLUDE_DIRECTORIES(${GMP_INCLUDES})
ELSE(GMP_FOUND)
	MESSAGE(""[ ] GMP"")
ENDIF(GMP_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(GNUPLOT_FOUND)
		MESSAGE(""[X] Gnuplot"")
	ELSE(GNUPLOT_FOUND)
		MESSAGE(""[ ] Gnuplot"")
	ENDIF(GNUPLOT_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

IF(HDF5_FOUND)
	MESSAGE(""[X] HDF5"")
ELSE(HDF5_FOUND)
	MESSAGE(""[ ] HDF5"")
ENDIF(HDF5_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(LIBINT2_FOUND)
		MESSAGE(""[X] Libint2"")
		INCLUDE_DIRECTORIES(${LIBINT2_INCLUDE_DIRS})
		SET(TBTK_LINK_LIBRARIES ${LIBINT2_LIBRARIES})
	ELSE(LIBINT2_FOUND)
		MESSAGE(""[ ] Libint2"")
	ENDIF(LIBINT2_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

IF(OpenCV_FOUND)
	MESSAGE(""[X] OpenCV"")
ELSE(OpenCV_FOUND)
	MESSAGE(""[ ] OpenCV"")
ENDIF(OpenCV_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(OpenBLAS_FOUND)
		MESSAGE(""[X] OpenBLAS"")
	ELSE(OpenBLAS_FOUND)
		MESSAGE(""[ ] OpenBLAS"")
	ENDIF(OpenBLAS_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

IF(OpenMP_FOUND OR OPENMP_FOUND)
	MESSAGE(""[X] OpenMP"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}"")
	ADD_DEFINITIONS(-DTBTK_USE_OPEN_MP)
ELSE(OpenMP_FOUND OR OPENMP_FOUND)
	MESSAGE(""[ ] OpenMP"")
ENDIF(OpenMP_FOUND OR OPENMP_FOUND)

IF(Python_FOUND)
	MESSAGE(""[X] Python "" ${TBTK_PYTHON_VERSION})
	IF(TBTK_PYTHON_COMPILED)
		MESSAGE(""	[X] Python ${TBTK_PYTHON_VERSION}"")
	ELSE(TBTK_PYTHON_COMPILED)
		MESSAGE(""	[ ] Python"")
	ENDIF(TBTK_PYTHON_COMPILED)
	IF(TBTK_PYTHON_NUMPY_COMPILED)
		MESSAGE(""	[X] Numpy (C/C++ development library)"")
	ELSE(TBTK_PYTHON_NUMPY_COMPILED)
		MESSAGE(""	[ ] Numpy (C/C++ development library)"")
	ENDIF(TBTK_PYTHON_NUMPY_COMPILED)
	IF(TBTK_PYTHON_MATPLOTLIB_COMPILED)
		MESSAGE(""	[X] Matplotlib"")
	ELSE(TBTK_PYTHON_MATPLOTLIB_COMPILED)
		MESSAGE(""	[ ] Matplotlib"")
	ENDIF(TBTK_PYTHON_MATPLOTLIB_COMPILED)
	INCLUDE_DIRECTORIES(${PYTHON_INCLUDES})
	LIST(APPEND TBTK_LINK_LIBRARIES ${PYTHON_LIBRARIES})
ELSE(Python_FOUND)
	MESSAGE(""[ ] Python (with matplotlib and numpy)"")
	IF(TBTK_PYTHON_COMPILED)
		MESSAGE(""	[X] Python ${TBTK_PYTHON_VERSION}"")
	ELSE(TBTK_PYTHON_COMPILED)
		MESSAGE(""	[ ] Python"")
	ENDIF(TBTK_PYTHON_COMPILED)
	IF(TBTK_PYTHON_NUMPY_COMPILED)
		MESSAGE(""	[X] Numpy (C/C++ development library)"")
	ELSE(TBTK_PYTHON_NUMPY_COMPILED)
		MESSAGE(""	[ ] Numpy (C/C++ development library)"")
	ENDIF(TBTK_PYTHON_NUMPY_COMPILED)
	IF(TBTK_PYTHON_MATPLOTLIB_COMPILED)
		MESSAGE(""	[X] Matplotlib"")
	ELSE(TBTK_PYTHON_MATPLOTLIB_COMPILED)
		MESSAGE(""	[ ] Matplotlib"")
	ENDIF(TBTK_PYTHON_MATPLOTLIB_COMPILED)
ENDIF(Python_FOUND)

IF(SuperLU_FOUND)
	MESSAGE(""[X] SuperLU"")
	INCLUDE_DIRECTORIES(${SUPER_LU_INCLUDES})
	LIST(APPEND TBTK_LINK_LIBRARIES ${SUPER_LU_LIBRARIES})
ELSE(SuperLU_FOUND)
	MESSAGE(""[ ] SuperLU"")
ENDIF(SuperLU_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(wxWidgets_FOUND)
		MESSAGE(""[X] wxWidgets"")
		INCLUDE(${wxWidgets_USE_FILE})
		SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${wxWidgets_CXX_FLAGS}"")
		LIST(APPEND TBTK_LINK_LIBRARIES ${wxWidgets_LIBRARIES})
	ELSE(wxWidgets_FOUND)
		MESSAGE(""[ ] wxWidgets"")
	ENDIF(wxWidgets_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)
MESSAGE(""================================================================================"")

#Setup flags for building extensions and print which extensions that will be
#built.
MESSAGE("""")
MESSAGE(""================================== EXTENSIONS =================================="")
MESSAGE(""Extensions that will be built (empty box means the extension will not be built)."")
MESSAGE(""--------------------------------------------------------------------------------"")
IF(ARPACK_FOUND AND SuperLU_FOUND)
	MESSAGE(""[X] ArnoldiIterator"")
	SET(COMPILE_ARNOLDI_ITERATOR TRUE)
ELSE(ARPACK_FOUND AND SuperLU_FOUND)
	MESSAGE(""[ ] ArnoldiIterator"")
ENDIF(ARPACK_FOUND AND SuperLU_FOUND)

IF(CUDA_FOUND)
	MESSAGE(""[X] CUDA"")
	SET(COMPILE_CUDA TRUE)
	SET(CUDA_NVCC_FLAGS ""${CUDA_NVCC_FLAGS} -D_MWAITXINTRIN_H_INCLUDED -D_FORCE_INLINES -D__STRICT_ANSI__"")
ELSE(CUDA_FOUND)
	MESSAGE(""[ ] CUDA"")
ENDIF(CUDA_FOUND)

IF(CURL_FOUND)
	MESSAGE(""[X] Resource"")
	SET(COMPILE_RESOURCE TRUE)
	IF(TBTK_ENABLE_ALL_OPTIONS)
		MESSAGE(""[X] DataManager"")
		SET(COMPILE_DATA_MANAGER TRUE)
	ENDIF(TBTK_ENABLE_ALL_OPTIONS)
ELSE(CURL_FOUND)
	MESSAGE(""[ ] Resource"")
	IF(TBTK_ENABLE_ALL_OPTIONS)
		MESSAGE(""[ ] DataManager"")
	ENDIF(TBTK_ENABLE_ALL_OPTIONS)
ENDIF(CURL_FOUND)

IF(FFTW3_FOUND)
	MESSAGE(""[X] FourierTransform"")
	SET(COMPILE_FOURIER_TRANSFORM TRUE)
ELSE(FFTW3_FOUND)
	MESSAGE(""[ ] FourierTransform"")
ENDIF(FFTW3_FOUND)

IF(GMP_FOUND)
	MESSAGE(""[X] ArbitraryPrecision"")
	SET(COMPILE_ARBITRARY_PRECISION TRUE)
ELSE(GMP_FOUND)
	MESSAGE(""[ ] ArbitraryPrecision"")
ENDIF(GMP_FOUND)

IF(HDF5_FOUND)
	MESSAGE(""[X] FileReader/FileWriter (deprecated)"")
	SET(COMPILE_FILE_READER_WRITER TRUE)
	INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
ELSE(HDF5_FOUND)
	MESSAGE(""[ ] FileReader/FileWriter (deprecated)"")
ENDIF(HDF5_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(LIBINT2_FOUND AND EIGEN3_FOUND)
		MESSAGE(""[X] Gaussian basis functions (libint2)"")
		SET(COMPILE_LIBINT2 TRUE)
	ELSE(LIBINT2_FOUND AND EIGEN3_FOUND)
		MESSAGE(""[ ] Gaussian basis functions (libint2)"")
	ENDIF(LIBINT2_FOUND AND EIGEN3_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

IF(OpenCV_FOUND)
	MESSAGE(""[X] Plotter (deprecated)"")
	SET(COMPILE_PLOTTER TRUE)
	IF(TBTK_ENABLE_ALL_OPTIONS)
		MESSAGE(""[X] RayTracer"")
		SET(COMPILE_RAY_TRACER TRUE)
	ENDIF(TBTK_ENABLE_ALL_OPTIONS)
ELSE(OpenCV_FOUND)
	MESSAGE(""[ ] Plotter (deprecated)"")
	IF(TBTK_ENABLE_ALL_OPTIONS)
		MESSAGE(""[ ] RayTracer"")
	ENDIF(TBTK_ENABLE_ALL_OPTIONS)
ENDIF(OpenCV_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(OpenBLAS_FOUND)
		MESSAGE(""[X] OpenBLAS"")
	ELSE(OpenBLAS_FOUND)
		MESSAGE(""[ ] OpenBLAS"")
	ENDIF(OpenBLAS_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

IF(Python_FOUND)
	MESSAGE(""[X] Plotter (matplotlib)"")
	SET(COMPILE_MATPLOTLIB_PLOTTER TRUE)
ELSE(Python_FOUND)
	MESSAGE(""[ ] Plotter (matplotlib)"")
ENDIF(Python_FOUND)

IF(SuperLU_FOUND)
	MESSAGE(""[X] LinearEquationSolver"")
	SET(COMPILE_LINEAR_EQUATION_SOLVER TRUE)
	MESSAGE(""[X] LUSolver"")
	SET(COMPILE_LU_SOLVER TRUE)
ELSE(SuperLU_FOUND)
	MESSAGE(""[ ] LinearEquationSolver"")
	MESSAGE(""[ ] LUSolver"")
ENDIF(SuperLU_FOUND)

IF(TBTK_ENABLE_ALL_OPTIONS)
	IF(wxWidgets_FOUND AND OpenCV_FOUND)
		MESSAGE(""[X] GUI"")
		SET(COMPILE_GUI TRUE)
	ELSE(wxWidgets_FOUND AND OpenCV_FOUND)
		MESSAGE(""[ ] GUI"")
	ENDIF(wxWidgets_FOUND AND OpenCV_FOUND)
ENDIF(TBTK_ENABLE_ALL_OPTIONS)

MESSAGE(""================================================================================"")

#C++ flags
SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -Wall -O3"")
IF(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"" OR ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""AppleClang"")
	SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-undefined-var-template"")
ENDIF(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"" OR ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""AppleClang"")

#Include paths
INCLUDE_DIRECTORIES(
	json/
	External/
#	hdf5/hdf5-build/hdf5/include/
#	${HDF5_INCLUDE_DIRS}
)

INCLUDE_DIRECTORIES(
	Lib/include/
	Lib/include/Builders/
	Lib/include/Core/
	Lib/include/Elements/
	Lib/include/Exceptions/
	Lib/include/FiniteDifferences/
	Lib/include/GUI/
#	Lib/include/Lattices/
#	Lib/include/Lattices/D2/
#	Lib/include/Lattices/D3/
	Lib/include/ManyParticle/
	Lib/include/ManyParticle/TBTK/FockStateMap/
	Lib/include/ManyParticle/TBTK/FockStateRule/
#	Lib/include/Properties/
#	Lib/include/PropertyExtractors/
#	Lib/include/Solvers/
	Lib/include/Resource/
	Lib/include/SpecializedSolvers/
	Lib/include/StatesAndOperators/
	Lib/include/Uncategorized/
	Lib/include/Utilities/
)

#Resource paths
ADD_DEFINITIONS(-DTBTK_RESOURCE_PATH=""${CMAKE_INSTALL_PREFIX}/share/TBTK"")

IF(${COMPILE_ARNOLDI_ITERATOR})
#	INCLUDE_DIRECTORIES(Lib/include/TBTK/Solver/ArnoldiIterator/)
#	INCLUDE_DIRECTORIES(Lib/include/TBTK/PropertyExtractor/ArnoldiIterator/)
ENDIF(${COMPILE_ARNOLDI_ITERATOR})

IF(${COMPILE_DATA_MANAGER})
	INCLUDE_DIRECTORIES(Lib/include/DataManager/)
ENDIF(${COMPILE_DATA_MANAGER})

IF(${COMPILE_FOURIER_TRANSFORM})
	INCLUDE_DIRECTORIES(Lib/include/FourierTransform/)
ENDIF(${COMPILE_FOURIER_TRANSFORM})

IF(${COMPILE_GUI})
	INCLUDE_DIRECTORIES(Lib/include/GUI/)
ENDIF(${COMPILE_GUI})

IF(${COMPILE_LINEAR_EQUATION_SOLVER})
	INCLUDE_DIRECTORIES(Lib/include/TBTK/Solver/LinearEquationSolver/)
ENDIF(${COMPILE_LINEAR_EQUATION_SOLVER})

IF(${COMPILE_LU_SOLVER})
	INCLUDE_DIRECTORIES(Lib/include/TBTK/Solver/LUSolver/)
ENDIF(${COMPILE_LU_SOLVER})

IF(${COMPILE_PLOTTER})
	INCLUDE_DIRECTORIES(Lib/include/Plotter/)
ENDIF(${COMPILE_PLOTTER})

IF(${COMPILE_PLOTTER2})
	INCLUDE_DIRECTORIES(Lib/include/Plotter2/)
ENDIF(${COMPILE_PLOTTER2})

IF(${COMPILE_RESOURCE})
	INCLUDE_DIRECTORIES(Lib/include/Resource/)
ENDIF(${COMPILE_RESOURCE})

IF(${COMPILE_RAY_TRACER})
	INCLUDE_DIRECTORIES(Lib/include/RayTracer/)
ENDIF(${COMPILE_RAY_TRACER})

#Add subdirectory.
ADD_SUBDIRECTORY(Lib/include/)
ADD_SUBDIRECTORY(Lib/src/)
ADD_SUBDIRECTORY(json/TBTK)
ADD_SUBDIRECTORY(Templates/)
ADD_SUBDIRECTORY(Tools/)
ADD_SUBDIRECTORY(Visualization/python/)
ADD_SUBDIRECTORY(Validation/)
ADD_SUBDIRECTORY(Test/)
ADD_SUBDIRECTORY(doc/)

#Create TBTKVersion.cmake.
INCLUDE(CMakePackageConfigHelpers)
WRITE_BASIC_PACKAGE_VERSION_FILE(
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/TBTKVersion.cmake""
	VERSION ${TBTK_VERSION}
	COMPATIBILITY AnyNewerVersion
)

#Create TBTKTargets.cmake.
EXPORT(
	EXPORT TBTKLibraries
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/CMake/TBTKTargets.cmake""
	NAMESPACE TBTK::
)

#Copy TBTKConfigure.cmake to installation folder.
CONFIGURE_FILE(
	CMake/TBTKConfigTemplate.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/TBTKConfig.cmake""
	COPYONLY
)

#Copy Find modules to build folder.
CONFIGURE_FILE(
	CMake/Modules/FindARPACK.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindARPACK.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/FindFFTW3.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindFFTW3.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/FindGMP.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindGMP.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/FindOpenBLAS.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindOpenBLAS.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/FindPython.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindPython.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/FindSuperLU.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/FindSuperLU.cmake""
	COPYONLY
)

#Copy TBTKVersionInfo.cmake, TBTKGitInfo.cmake, and TBTKBuildOptions to build
#folder.
CONFIGURE_FILE(
	CMake/Modules/TBTKVersionInfo.cmake
	""${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/TBTKVersionInfo.cmake""
	COPYONLY
)
CONFIGURE_FILE(
	CMake/Modules/TBTKGitInfo.cmake
	${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/TBTKGitInfo.cmake
)
CONFIGURE_FILE(
	CMake/Modules/TBTKBuildOptions.cmake
	${CMAKE_CURRENT_BINARY_DIR}/CMake/Modules/TBTKBuildOptions.cmake
)

#Installation rules for configuration files.
SET(ConfigPackageLocation lib/TBTK/CMake)
INSTALL(
	EXPORT TBTKLibraries
	FILE TBTKTargets.cmake
	NAMESPACE TBTK::
	DESTINATION ${ConfigPackageLocation}
)
INSTALL(
	FILES ${CMAKE_CURRENT_BINARY_DIR}/CMake/TBTKConfig.cmake ""${CMAKE_CURRENT_BINARY_DIR}/CMake/TBTKVersion.cmake""
	DESTINATION ${ConfigPackageLocation}
	COMPONENT Devel
)
INSTALL(
	DIRECTORY ${TBTK_BINARY_DIR}/CMake/Modules
	DESTINATION ${ConfigPackageLocation}
	FILES_MATCHING PATTERN *.cmake
)

#MESSAGE(""Installation path that will be used if installed: ${CMAKE_INSTALL_PREFIX}"")

IF(UNIX)
	MESSAGE("""")
	MESSAGE(""================================= WHAT'S NEXT? ================================="")
	MESSAGE(""TBTK build scripts successfully generated. The following options are now"")
	MESSAGE(""available."")
	MESSAGE(""--------------------------------------------------------------------------------"")
	MESSAGE(""make\t\t\tBuild TBTK."")
	MESSAGE(""sudo make install\tInstall TBTK to '${CMAKE_INSTALL_PREFIX}'."")
#	MESSAGE(""\nType 'make' to build TBTK, followed by 'sudo make install' to install."")
	IF(${TBTK_TESTING_ENABLED})
		MESSAGE(""make test\t\tRun tests."")
#		MESSAGE(""Type 'make test' to run tests."")
	ENDIF(${TBTK_TESTING_ENABLED})
	IF(${TBTK_DOCUMENTATION_ENABLED})
		MESSAGE(""make documentation\tBuild the documentation. The documentation will be found"")
		MESSAGE(""\t\t\tat '${CMAKE_BINARY_DIR}/doc/html/index.html'."")
#		MESSAGE(""Type 'make documentation' to run tests."")
	ENDIF(${TBTK_DOCUMENTATION_ENABLED})
	MESSAGE(""--------------------------------------------------------------------------------"")
	MESSAGE(""Once TBTK has been installed, you can also type 'TBTK' in the terminal for"")
	MESSAGE(""further instructions."")
	MESSAGE(""================================================================================\n"")
ENDIF(UNIX)
",3.1,3.1
38735,CelestiaProject,Celestia,False,False,False,False,False,27,C++,2020-05-17 15:41:02+00:00,2016-10-26 19:37:31+00:00,600,5851,"cmake_minimum_required(VERSION 3.1.0)

option(LEGACY_OPENGL_LIBS ""Use legacy OpenGL libraries instead of glvnd library (Default: off)"" OFF)

if(POLICY CMP0071)
  cmake_policy(SET CMP0071 OLD)
endif()

if(POLICY CMP0072)
  if(LEGACY_OPENGL_LIBS)
    cmake_policy(SET CMP0072 OLD)
  else()
    cmake_policy(SET CMP0072 NEW)
  endif()
endif()

# Remove leading and trailing whitespace from libraries linked
if(POLICY CMP0004)
  cmake_policy(SET CMP0004 OLD)
endif()

project(celestia VERSION 1.7.0 LANGUAGES C CXX)
set(DISPLAY_NAME ""Celestia"")
#
#
#
option(ENABLE_CELX    ""Enable celx scripting, requires Lua library? (Default: on)"" ON)
option(ENABLE_SPICE   ""Use spice library? (Default: off)"" OFF)
option(ENABLE_NLS     ""Enable interface translation? (Default: on)"" ON)
option(ENABLE_GLUT    ""Build simple Glut frontend? (Default: on)"" OFF)
option(ENABLE_GTK     ""Build GTK2 frontend (Unix only)? (Default: off)"" OFF)
option(ENABLE_QT      ""Build Qt frontend? (Default: on)"" ON)
option(ENABLE_SDL     ""Build SDL frontend? (Default: off)"" OFF)
option(ENABLE_WIN     ""Build Windows native frontend? (Default: on)"" ON)
option(ENABLE_THEORA  ""Support video capture to OGG Theora? (Default: on)"" ON)
option(ENABLE_TOOLS   ""Build different tools? (Default: off)"" OFF)
option(NATIVE_OSX_APP ""Support native OSX paths read data from (Default: off)"" OFF)
option(FAST_MATH      ""Build with unsafe fast-math compiller option (Default: off)"" OFF)
option(ENABLE_TTF     ""Use TrueType fonts instead of TXF (Default: off)"" OFF)
option(ENABLE_TESTS   ""Enable unit tests? (Default: off)"" OFF)
option(ENABLE_DATA    ""Install data from content submodule? (Default: on)"" ON)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type."" FORCE)
endif()

set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(UNIX AND (NOT APPLE) AND (NOT CYGWIN))
  set(_UNIX true)
endif()

# _USE_MATH_DEFINES enables use of math constants like M_PI,
# which are by default disabled in standard C++ mode (like std=c++11 instead of std=gnu11)
add_definitions(-D_USE_MATH_DEFINES)

# Let CMake handle setting C++11 (since 3.1)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 11)

# Use our cmake files
list(INSERT CMAKE_MODULE_PATH 0 ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

if((NOT WIN32) AND (NOT NATIVE_OSX_APP))
  include(GNUInstallDirs)
  include(rpath)
endif()
include(CheckIncludeFiles)
include(CheckIncludeFileCXX)
include(FastMath)
if(NOT WIN32)
  include(cotire)
else()
  macro(cotire _target)
  endmacro()
endif()

#
# Compile options
#
if(MSVC)
  # Disabled warnings
  # C4244, C4267, C4503: implicit type conversion to a smaller type
  # C4786: long names in templates
  # C4800: forcing value to bool
  # Additional options
  # bigobj: generate more object sections than allowed by default
  add_compile_options(""/wd4244"" ""/wd4267"" ""/wd4503"" ""/wd4800"" ""/bigobj"")
endif()

if(NOT WIN32)
  # Qt requires -fPIC, so build all code with it
  # It's always set on windows
  add_compile_options(-fPIC)
endif()

EnableFastMath(${FAST_MATH})

#
# NLS (Gettext) support
#
if(ENABLE_NLS)
  find_package(Gettext)
  if(NOT GETTEXT_FOUND)
    message(WARNING ""Gettext is not found, traslations won't be created."")
  endif()
  include(FixGettext)

  find_package(Intl REQUIRED)
  include_directories(${Intl_INCLUDE_DIRS})
  link_libraries(${Intl_LIBRARIES})

  # begin static libintl support
  # libintl.a may depend on libiconv.a and libcharset.a
  # this is the case of vcpkg + mingw, for example
  macro(try_compile_intl)
    set(_argv ${ARGV})
    try_compile(INTLLIB ${CMAKE_BINARY_DIR}
                ""${CMAKE_SOURCE_DIR}/checks/intl.cpp""
                LINK_LIBRARIES ${_argv}
                CMAKE_FLAGS ""-DINCLUDE_DIRECTORIES=${Intl_INCLUDE_DIRS}"")
  endmacro()

  try_compile_intl(${Intl_LIBRARIES})
  if (NOT INTLLIB)
    message(STATUS ""Checking for libiconv and libcharset dependencies of libintl"")
    find_package(Iconv REQUIRED)
    link_libraries(${Iconv_LIBRARIES})

    try_compile_intl(${Intl_LIBRARIES} ${Iconv_LIBRARIES})
    if (NOT INTLLIB)
      find_library(Charset_LIBRARY NAMES libcharset charset HINTS Charset_DIR)
      try_compile_intl(${Intl_LIBRARIES} ${Iconv_LIBRARIES} ${Charset_LIBRARY})
      if (NOT INTLLIB)
        message(FATAL_ERROR ""LibIntl has unknown dependencies"")
      else()
        link_libraries(${Charset_LIBRARY})
      endif()
    endif()
  endif()
  # end static libintl support

  add_definitions(-DENABLE_NLS)
else()
  message(STATUS ""NLS is disabled. Not looking for gettext and libintl."")
endif()

if(ENABLE_SPICE)
  find_package(Cspice)
  if(NOT CSPICE_FOUND)
    message(STATUS ""Using cspice submodule"")
    add_subdirectory(""${CMAKE_SOURCE_DIR}/thirdparty/Spice"")
    get_target_property(SPICE_INCLUDE_DIR Spice INCLUDE_DIRECTORIES)
    include_directories(${SPICE_INCLUDE_DIR})
    message(STATUS ""Spice include directories: ${SPICE_INCLUDE_DIR}"")
    add_library(CSPICE::CSPICE ALIAS Spice)
  else()
    include_directories(${CSPICE_INCLUDE_DIR})
  endif()
  add_definitions(-DUSE_SPICE)
else()
  message(STATUS ""NAIF SPICE is disabled. Not looking for cspice library."")
endif()

if(_UNIX)
  find_package(PkgConfig)
endif()

if(_UNIX AND ENABLE_THEORA)
  pkg_search_module(THEORA theora REQUIRED)
  include_directories(${THEORA_INCLUDE_DIRS})
  link_libraries(${THEORA_LIBRARIES})
  add_definitions(-DTHEORA)
endif()

if(WIN32)
  link_libraries(""vfw32"" ""comctl32"" ""winmm"")
endif()

find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIRS})
link_libraries(${OPENGL_LIBRARIES})

find_package(Libepoxy REQUIRED)
link_libraries(libepoxy::libepoxy)
include_directories(${LIBEPOXY_INCLUDE_DIR})

find_package(Eigen3 3.3 NO_MODULE) # -DEigen3_DIR=...
if(TARGET Eigen3::Eigen)
  message(STATUS ""Found Eigen3 ${EIGEN3_VERSION_STRING}"")
  link_libraries(Eigen3::Eigen)
else()
  message(STATUS ""Using Eigen submodule"")
  include_directories(""${CMAKE_SOURCE_DIR}/thirdparty/Eigen"")
endif()

find_package(fmt 4.0.0 CONFIG QUIET)
if(fmt_FOUND)
  link_libraries(fmt::fmt)
else()
  message(STATUS ""Using fmt submodule"")
  add_subdirectory(""${CMAKE_SOURCE_DIR}/thirdparty/fmt"")
  link_libraries(fmt::fmt)
endif()

find_package(PNG REQUIRED)
add_definitions(${PNG_DEFINITIONS})
link_libraries(PNG::PNG)

find_package(JPEG REQUIRED) # -DJPEG_LIBRARY=...
include_directories(${JPEG_INCLUDE_DIRS})
link_libraries(${JPEG_LIBRARIES})

if(ENABLE_CELX)
  add_definitions(-DCELX)

  find_package(LuaJIT)
  if(NOT LUAJIT_FOUND)
    find_package(Lua REQUIRED)
  endif()
  include_directories(${LUA_INCLUDE_DIR})
  link_libraries(${LUA_LIBRARIES})
else()
  message(STATUS ""CELX is disabled. Not looking for LUA libraries."")
endif()

if(ENABLE_TTF)
  find_package(Freetype REQUIRED)
  link_libraries(Freetype::Freetype)
else()
  add_definitions(-DNO_TTF=1)
endif()

#[[
get_cmake_property(_variableNames VARIABLES)
list (SORT _variableNames)
foreach (_variableName ${_variableNames})
    message(STATUS ""${_variableName}=${${_variableName}}"")
endforeach()
]]#

# macOS Bundling
if(NATIVE_OSX_APP)
  message(STATUS ""Generating Info.plist for macOS Bundle"")
  configure_file(${CMAKE_SOURCE_DIR}/Info.plist.in ${CMAKE_BINARY_DIR}/Info.plist @ONLY)
endif()

if(NATIVE_OSX_APP)
  set(CMAKE_INSTALL_PREFIX ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}.app/Contents"")
  set(CMAKE_INSTALL_FULL_LOCALEDIR ""${CMAKE_INSTALL_PREFIX}/Resources/locale"")
  set(CMAKE_INSTALL_BINDIR ""MacOS"")
  set(DATADIR ""${CMAKE_INSTALL_PREFIX}/Resources"")
  set(FULL_DATADIR ""${CMAKE_INSTALL_PREFIX}/Resources"")
elseif(WIN32)
  set(CMAKE_INSTALL_BINDIR ""."")
  set(CMAKE_INSTALL_DATAROOTDIR ""."")
  set(CMAKE_INSTALL_DATADIR ""."")
  set(CMAKE_INSTALL_FULL_LOCALEDIR ""locale"")
  set(DATADIR ""${CMAKE_INSTALL_DATADIR}"")
  set(FULL_DATADIR ""."")
else()
  set(DATADIR ""${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}"")
  set(FULL_DATADIR ""${CMAKE_INSTALL_FULL_DATADIR}/${PROJECT_NAME}"")
endif()

if(NOT GIT_COMMIT)
  find_program(GIT_FOUND git)
  if(GIT_FOUND)
    execute_process(
      COMMAND git log --pretty=format:%h -1
      WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
      OUTPUT_VARIABLE GIT_COMMIT
    )
    if(""${GIT_COMMIT}"" STREQUAL """")
      set(GIT_COMMIT ""unknown"")
    endif()
  else()
    set(GIT_COMMIT ""unknown"")
  endif()
endif()

#
# Compile definitions
#
add_definitions(
  -DVERSION=""${PROJECT_VERSION}""
  -DPACKAGE=""celestia""
  -DGIT_COMMIT=""${GIT_COMMIT}""
)

if(NOT NATIVE_OSX_APP)
  add_definitions(
    -DLOCALEDIR=""${CMAKE_INSTALL_FULL_LOCALEDIR}""
    -DCONFIG_DATA_DIR=""${FULL_DATADIR}""
    -DHIP_DATA_DIR=""${FULL_DATADIR}""
    -DSPLASH_DIR=""${FULL_DATADIR}/splash""
  )
endif()

if(WIN32)
  add_definitions(
    -D_CRT_SECURE_NO_WARNINGS
    -D_SCL_SECURE_NO_WARNINGS
    -DNOMINMAX
    -DWIN32_LEAN_AND_MEAN
    -DWINVER=0x0601
    -D_WIN32_WINNT=0x0601
  )
  # Fix the issue: https://github.com/CelestiaProject/Celestia/issues/364
  add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)
endif()

if(APPLE)
  if(NATIVE_OSX_APP)
    add_definitions(-DNATIVE_OSX_APP)
  endif()
  add_definitions(-DGL_SILENCE_DEPRECATION)
endif()

string(TOLOWER ""${CMAKE_BUILD_TYPE}"" build_type_lc)
if(""${build_type_lc}"" STREQUAL ""debug"")
  add_definitions(-D_DEBUG -DDEBUG)
else()
  add_definitions(-DNO_DEBUG -DEIGEN_NO_DEBUG)
endif()

# Turning all debug on dramatically decreases performance
if(OCTREE_DEBUG)
  add_definitions(-DOCTREE_DEBUG)
endif()

include_directories(""${CMAKE_SOURCE_DIR}/src"" ${CMAKE_BINARY_DIR})

# configure a header file to pass some of the CMake settings
# to the source code
include(CheckSymbolExists)
check_symbol_exists(wordexp wordexp.h HAVE_WORDEXP)
check_include_files(byteswap.h HAVE_BYTESWAP_H)
check_include_file_cxx(experimental/filesystem HAVE_EXPERIMENTAL_FILESYSTEM)

if(HAVE_EXPERIMENTAL_FILESYSTEM)
  if(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
    find_library(CLANG_FS_LIBRARY ""c++fs"")
    if(CLANG_FS_LIBRARY)
      set(FS_LIBRARY c++fs)
    else()
      set(FS_LIBRARY stdc++fs)
    endif()
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
    set(FS_LIBRARY stdc++fs)
  endif()

  try_compile(CXXFSLIB ${CMAKE_BINARY_DIR} ""${CMAKE_SOURCE_DIR}/checks/cxxfs.cpp"" LINK_LIBRARIES ""${FS_LIBRARY}"")
  if(CXXFSLIB)
    link_libraries(""${FS_LIBRARY}"")
  else()
    set(HAVE_EXPERIMENTAL_FILESYSTEM OFF)
    message(WARNING ""C++ experimental filesystem library is unusable!\nWill use own implementation."")
  endif()
endif()

configure_file(""config.h.in"" ""config.h"")

set(BASE_DATA_SOURCES
  demo.cel
  guide.cel
  start.cel
  celestia.cfg
  controls.txt
)
install(FILES ${BASE_DATA_SOURCES} DESTINATION ${DATADIR})
install(FILES ""splash.png"" DESTINATION ""${DATADIR}/splash"")

if(NATIVE_OSX_APP)
  install(FILES ${CMAKE_BINARY_DIR}/Info.plist DESTINATION .)
endif()

add_subdirectory(src)
add_subdirectory(po)
add_subdirectory(po2)
add_subdirectory(fonts)
add_subdirectory(images)
add_subdirectory(locale)
add_subdirectory(scripts)
add_subdirectory(shaders)

if(ENABLE_DATA)
  add_subdirectory(content)
endif()

if(ENABLE_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()
",3.1.0,3.1
38815,DalePutnam,D-NES,False,False,False,False,False,1,C,2020-05-10 03:42:09+00:00,2014-03-19 07:50:46+00:00,0,298,"cmake_minimum_required(VERSION 3.10.2)

project(D-NES)

# Default build type is release
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE ""Release"" CACHE STRING 
         ""Build Type: Set to \""Release\"" for optimized or \""Debug\"" for a debug build"" FORCE)
endif (NOT CMAKE_BUILD_TYPE)

# Output final binary to 'bin' directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Use C++14
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Check for OpenGL and GLX
find_package(OpenGL COMPONENTS OpenGL GLX REQUIRED)

# Check for ALSA
find_package(ALSA REQUIRED)

# Check for X11
find_package(X11 REQUIRED)

# Check for wxWidgets
find_package(wxWidgets COMPONENTS core base REQUIRED)

# Check for GTK3
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK3 REQUIRED gtk+-3.0)

add_subdirectory(src/Emulator)
add_subdirectory(src/FrontEnd)
",3.10.2,3.1
38872,Microsoft,bond,False,False,False,False,False,53,C++,2020-05-17 05:36:36+00:00,2014-12-15 01:05:31+00:00,2136,1333,"cmake_minimum_required (VERSION 3.1)

project (bond)
cmake_policy (SET CMP0022 NEW)

set (CMAKE_MODULE_PATH
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/cmake-modules)

# Initialize before ThirdParty
set (BOND_ENABLE_GRPC
    ""TRUE""
    CACHE BOOL ""If FALSE, then do not build gRPC integration"")
set (BOND_FIND_RAPIDJSON
    ""FALSE""
    CACHE BOOL ""If FALSE, then use and install rapidjson from thirdparty subdirectory"")
# We need to include third-party CMake modules before we configure our own
# settings so that we don't apply our settings to third-party code.
add_subdirectory (thirdparty)

enable_testing()

set (BOND_IDL ${CMAKE_CURRENT_SOURCE_DIR}/idl)
set (BOND_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/cpp/inc)
set (BOND_PYTHON_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/python/inc)
set (BOND_GENERATED ${CMAKE_CURRENT_SOURCE_DIR}/cpp/generated)
set (BOND_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src)
set (BOND_COMPAT_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test/compat)

include (Config)
include (Bond)
include (NoDebug)
include (Compiler)
include (PythonTest)

add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} -C ${CMAKE_CFG_INTDIR} --output-on-failure)

if (NOT BOND_GBC_PATH)
    add_subfolder (compiler ""compiler"")
    if (NOT BOND_SKIP_GBC_TESTS)
        add_dependencies (check gbc-tests)
    endif()
endif()

add_subdirectory (cpp)
add_subfolder (doc ""doc"")
add_python_subdirectory (python)
add_subdirectory (examples)

if (BOND_ENABLE_JAVA)
    add_subdirectory (java)
endif()


install (DIRECTORY
    cpp/inc/bond
    cpp/generated/bond
    python/inc/bond
    DESTINATION include
    PATTERN *.cpp EXCLUDE)

install (EXPORT bond
    DESTINATION lib/bond
    EXPORT_LINK_INTERFACE_LIBRARIES)

if (NOT BOND_FIND_RAPIDJSON)
    install (DIRECTORY
        thirdparty/rapidjson/include/rapidjson
        DESTINATION include
        PATTERN *.cpp EXCLUDE)
endif()

# if BOND_GBC_PATH is set we must copy over that gbc to the install location
if (BOND_GBC_PATH)
  if (WIN32)
    set(INSTALLED_GBC_NAME gbc.exe)
  else()
    set(INSTALLED_GBC_NAME gbc)
  endif()

  install (
    FILES ${BOND_GBC_PATH}
    DESTINATION bin
    RENAME ${INSTALLED_GBC_NAME})
endif()
",3.1,3.1
38925,hbirchtree,coffeecutie,False,False,False,False,False,1,C++,2020-05-15 18:24:08+00:00,2015-04-22 22:14:38+00:00,4,3496,"cmake_minimum_required( VERSION 3.10 )
cmake_policy ( SET CMP0048 NEW )
cmake_policy ( SET CMP0069 NEW )

project( 
    Coffee 
    LANGUAGES C CXX
    VERSION 4.0
    )

include ( toolchain/cmake/Modules/SubprojectFunctions.cmake )

init_project()

include ( GitDependencies )

dependency_get (
    SOURCE hbirchtree/native-library-bundle
    TAG appimage-v1
    NAMES
        appimage-runtime
    )

set ( NATIVE_LIB_BUNDLE_TAG ""rel-0.3.5.0.23"" )

set ( COFFEE_EXT_LIBRARY_DIR
    ""${CMAKE_SOURCE_DIR}/src/libs""
    )

set ( COFFEE_ASSET_DIRECTORY ""${CMAKE_SOURCE_DIR}/sample_data"" )

if(BUILD_LIBRARIES)
    add_subdirectory( src )
endif()

if(BUILD_LIBRARIES AND BUILD_BINARIES)
    # Tools, includes the GUI profiler
    if(BUILD_UTILITIES)
        add_subdirectory(tools)
    endif()

    # Add subdir for example applications
    if(BUILD_EXAMPLES)
        add_subdirectory(examples)
    endif()

    if(BUILD_TESTS)
        option ( SKIP_HIGHMEM_TESTS ""Skip high-memory tests"" OFF )
        option ( SKIP_LINKAGE_TEST ""Skip test of dynamic linking"" ON )
        option ( SKIP_OPENVR_TEST
            ""Skip tests of OpenVR, it requires a display and hardware"" ON )
        option ( SKIP_GRAPHIC_TESTS
            ""Skip tests depending on headful configuration"" ON )

        add_subdirectory(tests)
    endif()
endif()

# Add documentation directory, not built by default (increases build time)
add_subdirectory(toolchain/docs-gen)

end_project()
",3.10,3.1
39087,psi-im,psimedia,False,False,False,False,False,13,C++,2020-05-15 11:31:55+00:00,2011-11-21 19:18:31+00:00,16,520,"project(gstprovider LANGUAGES CXX)

cmake_minimum_required(VERSION 3.1.0)

get_directory_property(IS_SUBPROJECT PARENT_DIRECTORY)

set(CMAKE_CXX_STANDARD 14)

set( CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${PROJECT_SOURCE_DIR}/cmake/modules
)
#Detect MXE cross-compilation
if( (CMAKE_CROSSCOMPILING) AND (DEFINED MSYS) )
    message(STATUS ""MXE environment detected"")
    option(USE_MXE ""Use MXE toolkit"" ON)
    message(STATUS ""MXE root path: ${CMAKE_PREFIX_PATH}"")
endif()

# On Windows debug library should have 'd' postfix.
if(WIN32)
    set(CMAKE_DEBUG_POSTFIX ""d"")
    if(NOT USE_MXE)
        if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
            set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_x86_64})
        else()
            set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_x86})
        endif()
        if(GST_SDK)
            set(GST_BIN_DIR ""${GST_SDK}/bin"")
            set(GST_LIB_DIR ""${GST_SDK}/lib"")
            set(GST_INC_DIR ""${GST_SDK}/include"")
            include_directories(
                ${GST_LIB_DIR}
                ${GST_INC_DIR}
            )
            link_directories(
                ${GST_BIN_DIR}
                ${GST_LIB_DIR}
            )
            #try to find pkg-config executable in GST_BIN_DIR
            find_program(PKG_EXEC pkg-config PATHS ${GST_BIN_DIR})
            if(NOT ""${PKG_EXEC}"" STREQUAL ""PKG_EXEC-NOTFOUND"")
                set(PKG_CONFIG_EXECUTABLE ${PKG_EXEC})
            endif()
        endif()
    endif()
elseif(APPLE)
    set(CMAKE_DEBUG_POSTFIX ""_debug"")
endif(WIN32)

find_package(PkgConfig REQUIRED)

option(USE_PSI ""Use gstprovider module for Psi client. Should be disabled for Psi+ client"" ON)
option(BUILD_DEMO ""Build psimedia-demo"" ON)
option(BUILD_PSIPLUGIN ""Build a regular Psi plugin"" ON)
option(BUILD_GSTPLUGIN ""Build a standalone plugin"" OFF)

if(BUILD_PSIPLUGIN)
    find_package(PsiPluginsApi REQUIRED)
    if(PsiPluginsApi_FOUND)
        include_directories(${PsiPluginsApi_INCLUDE_DIR})
        include(${PsiPluginsApi_DIR}/variables.cmake)
    endif()
endif()

if(NOT DEFINED USE_PSI)
    if(MAIN_PROGRAM_NAME AND (${MAIN_PROGRAM_NAME} STREQUAL ""psi""))
        set(USE_PSI ON)
    else()
        set(USE_PSI OFF)
    endif()
elseif(USE_PSI)
    set(MAIN_PROGRAM_NAME ""psi"")
elseif(NOT USE_PSI)
    set(MAIN_PROGRAM_NAME ""psi-plus"")
endif()
set(CLIENT_NAME ${MAIN_PROGRAM_NAME})

message(STATUS ""${PROJECT_NAME} module will be installed in plugins directory for client: \""${CLIENT_NAME}\"""")

#add extra search paths for libraries and includes
if(WIN32)
    set(BIN_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}"" CACHE STRING ""Directory where binary will be installed"")
    set(LIB_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/plugins"" CACHE STRING ""Directory where plugin will be installed"")
else(WIN32)
    set(LIB_SUFFIX """" CACHE STRING ""Define suffix of directory name (32/64)"" )
    set(BIN_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/bin"" CACHE STRING ""Directory where binary will be installed"")
    set(LIB_INSTALL_DIR ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/${CLIENT_NAME}/plugins"" CACHE STRING ""Directory where plugin will be installed"")
endif(WIN32)

if(NOT IS_SUBPROJECT)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/psimedia"")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/"")
    find_program(CLF_BIN clang-format DOC ""Path to clang-format binary"")
    if(CLF_BIN)
    #Obtain list of source files
        file(GLOB_RECURSE SRC_LIST
            *.c
            *.cc
            *.cpp
            *.hpp
            *.h
            *.mm
        )
        add_custom_target(fix-codestyle
            COMMAND ${CLF_BIN}
            --verbose
            -style=file
            -i ${SRC_LIST}
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            COMMENT ""Fix codestyle with clang-format""
            VERBATIM
        )
    endif()
endif()

if(BUILD_DEMO)
  add_subdirectory(demo)
  add_subdirectory(gstplugin)
elseif(BUILD_GSTPLUGIN)
  add_subdirectory(gstplugin)
endif()
if(BUILD_PSIPLUGIN)
  add_subdirectory(psiplugin)
endif()
add_subdirectory(gstprovider)
",3.1.0,3.1
39146,CICM,HoaLibrary-Light,False,False,False,False,False,7,C++,2019-07-29 19:36:45+00:00,2014-12-20 13:35:08+00:00,64,440,"#--------------------------------------
# Project settings
#--------------------------------------

cmake_minimum_required(VERSION 3.1)

project(HoaLibrary CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_SUPPRESS_REGENERATION true)

#--------------------------------------
# Options
#--------------------------------------

option(HOA_BUILD_TESTS ""Build HoaLibrary tests"" ON)
option(GCOV_SUPPORT ""Build for gcov"" OFF)

#--------------------------------------
# Options
#--------------------------------------

set(HOALIBRARY_TARGET_NAME ${PROJECT_NAME})
set(HOALIBRARY_INCLUDE_BUILD_DIR ""${PROJECT_SOURCE_DIR}/Sources/"")
set(HOALIBRARY_THIRD_PARTY_DIR ""${PROJECT_SOURCE_DIR}/ThirdParty"")

#--------------------------------------
# Compiler settings
#--------------------------------------

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MACOSX_RPATH ON)
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.9)
set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD ""c++14"")
set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY ""libc++"")

if(UNIX)
  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -pedantic"")
  else()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -W -Wall"")
  endif()
elseif(MSVC)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W4"")
endif()

#--------------------------------------
# Create Library
#--------------------------------------

add_library(${HOALIBRARY_TARGET_NAME} INTERFACE)
add_library(
  ${PROJECT_NAME}::${HOALIBRARY_TARGET_NAME}
  ALIAS ${HOALIBRARY_TARGET_NAME}
)

#--------------------------------------

# Eigen
set(EIGEN3_DIR ""${HOALIBRARY_THIRD_PARTY_DIR}/Eigen/"" CACHE PATH ""Path to Eigen3 library"")
set(EIGEN3_INCLUDE_DIR ${EIGEN3_DIR})

target_include_directories(${HOALIBRARY_TARGET_NAME} INTERFACE ${EIGEN3_INCLUDE_DIR})

#--------------------------------------

target_include_directories(
  ${HOALIBRARY_TARGET_NAME}
  INTERFACE
    $<BUILD_INTERFACE:${HOALIBRARY_INCLUDE_BUILD_DIR}>
    $<INSTALL_INTERFACE:include>
)

file(GLOB HOALIBRARY_SOURCES ${HOALIBRARY_INCLUDE_BUILD_DIR}*.hpp)

target_sources(
  ${HOALIBRARY_TARGET_NAME}
  INTERFACE
    $<BUILD_INTERFACE:${HOALIBRARY_SOURCES}>
)

#--------------------------------------
# Tests
#--------------------------------------

if(${HOA_BUILD_TESTS})
  enable_testing()
  file(GLOB TESTSOURCES ${PROJECT_SOURCE_DIR}/Tests/*.cpp)
  source_group(Tests FILES ${TESTSOURCES})
  include_directories(${PROJECT_SOURCE_DIR}/Tests)

  add_executable(hoatest ${TESTSOURCES} ${HOALIBRARY_SOURCES})
  target_link_libraries(hoatest ${HOALIBRARY_TARGET_NAME})
  add_test(hoatestall hoatest)

  if(${GCOV_SUPPORT})
      set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage"")
      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage"")
      set(CMAKE_EXE_LINKER_FLAGS=""-fprofile-arcs -ftest-coverage"")
      target_link_libraries(hoatest gcov)
  endif()
endif()
",3.1,3.1
39219,PADrend,Rendering,False,False,False,False,False,7,C++,2020-02-26 10:57:04+00:00,2013-10-17 13:20:41+00:00,3,261,"#
# This file is part of the Rendering library.
# Copyright (C) 2009-2013 Benjamin Eikel <benjamin@eikel.org>
# Copyright (C) 2014-2019 Sascha Brandt <sascha@brandt.graphics>
#
# This library is subject to the terms of the Mozilla Public License, v. 2.0.
# You should have received a copy of the MPL along with this library; see the 
# file LICENSE. If not, you can obtain one at http://mozilla.org/MPL/2.0/.
#
cmake_minimum_required(VERSION 3.1.0)
project(Rendering VERSION 0.3.0)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set up install directories
include(GNUInstallDirs)
set(CMAKE_INSTALL_CMAKECONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/Rendering)

add_library(Rendering SHARED
	Mesh/Mesh.cpp
	Mesh/MeshDataStrategy.cpp
	Mesh/MeshIndexData.cpp
	Mesh/MeshVertexData.cpp
	Mesh/VertexAccessor.cpp
	Mesh/VertexAttribute.cpp
	Mesh/VertexAttributeAccessors.cpp
	Mesh/VertexAttributeIds.cpp
	Mesh/VertexDescription.cpp
	MeshUtils/ConnectivityAccessor.cpp
	MeshUtils/LocalMeshDataHolder.cpp
	MeshUtils/MarchingCubesMeshBuilder.cpp
	MeshUtils/MeshBuilder.cpp
	MeshUtils/MeshUtils.cpp
	MeshUtils/PlatonicSolids.cpp
	MeshUtils/PrimitiveShapes.cpp
	MeshUtils/QuadtreeMeshBuilder.cpp
	MeshUtils/QuadtreeMeshBuilderDebug.cpp
	MeshUtils/Simplification.cpp
	MeshUtils/TriangleAccessor.cpp
	MeshUtils/WireShapes.cpp
	RenderingContext/internal/StatusHandler_glCompatibility.cpp
	RenderingContext/internal/StatusHandler_glCore.cpp
	RenderingContext/internal/StatusHandler_sgUniforms.cpp
	RenderingContext/RenderingContext.cpp
	RenderingContext/RenderingParameters.cpp
	Serialization/GenericAttributeSerialization.cpp
	Serialization/Serialization.cpp
	Serialization/StreamerMD2.cpp
	Serialization/StreamerMMF.cpp
	Serialization/StreamerMTL.cpp
	Serialization/StreamerMVBO.cpp
	Serialization/StreamerNGC.cpp
	Serialization/StreamerOBJ.cpp
	Serialization/StreamerPKM.cpp
	Serialization/StreamerPLY.cpp
	Serialization/StreamerXYZ.cpp
	Shader/Shader.cpp
	Shader/ShaderObjectInfo.cpp
	Shader/ShaderUtils.cpp
	Shader/Uniform.cpp
	Shader/UniformRegistry.cpp
	Texture/Texture.cpp
	Texture/TextureUtils.cpp
	BufferObject.cpp
	Draw.cpp
	DrawCompound.cpp
	FBO.cpp
	Helper.cpp
	OcclusionQuery.cpp
	PBO.cpp
	QueryObject.cpp
	StatisticsQuery.cpp
	TextRenderer.cpp
)

# Dependency to Geometry
if(NOT TARGET Geometry)
	find_package(Geometry 0.3.0 REQUIRED NO_MODULE)
endif()
target_link_libraries(Rendering LINK_PUBLIC Geometry)

# Dependency to Util
if(NOT TARGET Util)
	find_package(Util 0.3.0 REQUIRED NO_MODULE)
endif()
target_link_libraries(Rendering LINK_PUBLIC Util)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Dependency to an OpenGL implementation
#find_package(GLImplementation REQUIRED)
#target_compile_definitions(Rendering PRIVATE ""${GLIMPLEMENTATION_DEFINITIONS}"")
#target_include_directories(Rendering PRIVATE ${GLIMPLEMENTATION_INCLUDE_DIRS})
#target_link_libraries(Rendering LINK_PRIVATE ${GLIMPLEMENTATION_LIBRARIES})

# Extern libraries
add_subdirectory(extern)
target_link_libraries(Rendering PRIVATE RenderingExtern)

# Set version of library
set_target_properties(Rendering PROPERTIES VERSION ${Rendering_VERSION}
																					 SOVERSION ${Rendering_VERSION_MAJOR}
																					 LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}"")
add_subdirectory(tests)

# Install the header files
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/Mesh/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/Mesh COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/MeshUtils/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/MeshUtils COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/RenderingContext/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/RenderingContext COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/Serialization/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/Serialization COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/Shader/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/Shader COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/Texture/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering/Texture COMPONENT headers)
file(GLOB RENDERING_HEADERS ""${CMAKE_CURRENT_SOURCE_DIR}/*.h"")
install(FILES ${RENDERING_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Rendering COMPONENT headers)

# Install the library
install(TARGETS Rendering EXPORT LibraryExport
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT runtimelibraries
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT runtimelibraries
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT developmentlibraries
)

# Set include directories for users of this library
target_include_directories(Rendering
													 INTERFACE
													 ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>""
													 ""$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>"")

# Library export
install(EXPORT LibraryExport DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} FILE RenderingTargets.cmake COMPONENT developmentlibraries)

# Create the configuration files
include(CMakePackageConfigHelpers)
configure_package_config_file(RenderingConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/RenderingConfig.cmake
															INSTALL_DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR}
															PATH_VARS CMAKE_INSTALL_CMAKECONFIGDIR
															NO_SET_AND_CHECK_MACRO
															NO_CHECK_REQUIRED_COMPONENTS_MACRO)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/RenderingConfigVersion.cmake
																 VERSION ${Rendering_VERSION}
																 COMPATIBILITY SameMajorVersion)

# Install the configuration files
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/RenderingConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/RenderingConfigVersion.cmake
		DESTINATION ${CMAKE_INSTALL_CMAKECONFIGDIR} COMPONENT developmentlibraries)

# Packaging
include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_NAME ""librendering${Rendering_VERSION_MAJOR}"")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Rendering library"")
set(CPACK_PACKAGE_VENDOR ""Benjamin Eikel; Claudius Jaehn; Ralf Petring; Sascha Brandt"")
set(CPACK_PACKAGE_CONTACT ""Benjamin Eikel <benjamin@eikel.org>"")
set(CPACK_PACKAGE_VERSION_MAJOR ${Rendering_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${Rendering_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${Rendering_VERSION_PATCH})
set(CPACK_PACKAGE_FILE_NAME ""libRendering"")
set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(CPACK_STRIP_FILES ON)

include(CPack)
",3.1.0,3.1
39224,CQMP,Maxent,False,False,False,False,False,14,C++,2019-09-27 21:00:43+00:00,2014-09-30 18:56:56+00:00,13,352,"cmake_minimum_required(VERSION 3.1)
project (MAXENT)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
find_package(ALPSCore 2.0 REQUIRED)

list(APPEND LINK_ALL ${ALPSCore_LIBRARIES})
#note: LAPACK also finds BLAS
find_package(LAPACK)
if(LAPACK_FOUND AND USE_LAPACK)
    set(HAVE_BLAS 1)
    set(HAVE_LAPACK 1)
    message(STATUS ""Using LAPACK and BLAS routines for SVD"")
    list(APPEND LINK_ALL ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})
else()
    set(HAVE_BLAS 0)
    set(HAVE_LAPACK 0)
endif()
configure_file(
	""${PROJECT_SOURCE_DIR}/cmake/maxent_config.hpp.in""
	""${PROJECT_BINARY_DIR}/config/maxent_config.hpp""
    )

include_directories(""${PROJECT_BINARY_DIR}/config"")
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
message(STATUS ""Finding packages, please stand by..."")
find_package(GSL REQUIRED)
list(APPEND LINK_ALL ${GSL_LIBRARIES})

# new ALPSCore provides Eigen
if (NOT ALPSCore_HAS_EIGEN_VERSION)
  find_package (Eigen3 3.1 REQUIRED)
endif()

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(-Wno-return-type-c-linkage SUPPORTS_FLAG)
if(SUPPORTS_FLAG)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-return-type-c-linkage"")
endif()

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -O2 -DNDEBUG"")

#let gcc take advantage of Eigen3 vectorization
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2"")
endif()

include_directories(${GSL_INCLUDE_DIR})
include_directories(${EIGEN3_INCLUDE_DIR})

set(LIB_FILES 
  ./src/maxent_helper.cpp
  ./src/maxent_params.cpp
  ./src/maxent_grid.cpp
  ./src/maxent_kernel.cpp
  ./src/maxent_simulation.cpp
  ./src/maxent_backcont.cpp
  ./src/default_model.cpp
  )

ADD_LIBRARY(libmaxent ${LIB_FILES})
target_link_libraries(libmaxent ${LINK_ALL})
#remove default ""lib"" prefix
set_target_properties(libmaxent PROPERTIES PREFIX """")
#executable
add_executable(maxent 
  ./src/maxent.cpp
  )
target_link_libraries(maxent libmaxent ${LINK_ALL})

#testing setup
option(Testing ""Enable testing"" ON)

if (Testing)
  add_library(gtest ./test/gtest-all.cc ./test/gtest_main.cc)
  list(APPEND LINK_ALL libmaxent)
  enable_testing(test)
  add_subdirectory(test)
endif (Testing)


#add companion utilities
add_subdirectory(legendre_convert)
add_subdirectory(kk) 
if(PADE)
  add_subdirectory(pade/pade_arbitrary_degree)
endif(PADE)

#install
install(TARGETS maxent DESTINATION bin)
",3.1,3.1
39343,openpnp,openpnp-capture,False,False,False,False,False,5,C,2020-05-07 01:31:33+00:00,2017-02-17 06:14:08+00:00,31,305,"#
# CMAKE build file for OpenPnP Capture library
#
# This generates make files for several build systems,
# such as GNU Make, Ninja and visual studio
#
# When invoking on Windows systems, make sure the
# compiler (Visual Studio) is in the search path.
#
# Author: Niels A. Moseley, Jason von Nieda
#

cmake_minimum_required(VERSION 3.1)
project (openpnp-capture)

# make sure the libjpegturbo is compiled with the
# position independent flag -fPIC
IF (UNIX)
    set(POSITION_INDEPENDENT_CODE TRUE)
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fPIC"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fPIC"")
ENDIF()

# make CMAKE search the current cmake dir inside the
# current project
set (CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

# force C++11 standard
set(CMAKE_CXX_STANDARD 11)

# load module that gets info from GIT 
# see: http://brianmilco.blogspot.nl/2012/11/cmake-automatically-use-git-tags-as.html
include(GetGitRevisionDescription)

# create library version from GIT tag using cmake/version.h.in as a template
# and write it to common/version.h
git_describe(GITVERSION --tags)
MESSAGE(STATUS ""Using GIT tag: "" ${GITVERSION} )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/common/version.h)

# determine number of bits of compiler
if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
  set( COMPILERBITS ""64 bit"")
else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
  set( COMPILERBITS ""32 bit"")
endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )

# check the build type and set the build type string
if(CMAKE_BUILD_TYPE MATCHES Release)
    add_definitions(-D__BUILDTYPE__=""release"")
else(CMAKE_BUILD_TYPE MATCHES Release)
    add_definitions(-D__BUILDTYPE__=""debug"")
endif(CMAKE_BUILD_TYPE MATCHES Release)


# add include directory 
include_directories(include)

IF (WIN32)
	# build with static runtime rather than DLL based so that we
	# don't have to distribute it
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
	set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")

    # set the platform identification string
    add_definitions(-D__PLATFORM__=""Win ${COMPILERBITS}"")
    
    # remove annoying 'unsafe' function warnings
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)

    # add files for WIN32
    set (SOURCE common/libmain.cpp
                common/context.cpp
                common/logging.cpp
                common/stream.cpp
                win/platformcontext.cpp
                win/platformstream.cpp)

    # create the library
    add_library(openpnp-capture SHARED ${SOURCE})

    # add windows-specific test application
    add_subdirectory(win/tests)

ELSEIF(APPLE)
    # set the platform identification string
    add_definitions(-D__PLATFORM__=""OSX ${COMPILERBITS}"")

    set (SOURCE common/libmain.cpp
                common/context.cpp
                common/logging.cpp
                common/stream.cpp
                mac/platformcontext.mm
                mac/platformstream.mm
                mac/uvcctrl.mm)


    # create the library
    add_library(openpnp-capture SHARED ${SOURCE})

    # include OS X specific frameworks
    target_link_libraries(openpnp-capture
        ""-framework AVFoundation""
        ""-framework Foundation""
        ""-framework CoreMedia""
        ""-framework CoreVideo""
        ""-framework Accelerate""
        ""-framework IOKit""
        )

    # add mac specific test application
    add_subdirectory(mac/tests)

ELSEIF(UNIX)

    # compile libjpeg-turbo for MJPEG decoding support
    # right now, we need to disable SIMD because it
    # causes a compile problem.. we need to fix this
    # later...
    
    set(ENABLE_SHARED OFF)
    set(WITH_SIMD OFF)      
    add_subdirectory(linux/contrib/libjpeg-turbo-dev)

    # set the platform identification string
    add_definitions(-D__PLATFORM__=""Linux ${COMPILERBITS}"")

    set (SOURCE common/libmain.cpp
                common/context.cpp
                common/logging.cpp
                common/stream.cpp
                linux/platformcontext.cpp
                linux/platformstream.cpp
                linux/mjpeghelper.cpp
                linux/yuvconverters.cpp)

    # force include directories for libjpeg-turbo
    include_directories(SYSTEM ""${CMAKE_CURRENT_SOURCE_DIR}/linux/contrib/libjpeg-turbo-dev"")
    
    # create our capture library
    add_library(openpnp-capture SHARED ${SOURCE})

    # add pthreads library 
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)    
    target_link_libraries(openpnp-capture Threads::Threads)

    # add turbojpeg-static library
    target_link_libraries(openpnp-capture turbojpeg-static)

    # add linux-specific test application
    add_subdirectory(linux/tests)

ENDIF()

",3.1,3.1
39388,nikp123,cava,False,False,False,False,False,30,C,2020-05-17 22:28:02+00:00,2016-10-22 08:28:53+00:00,55,715,"project(xava C CXX)
cmake_minimum_required(VERSION 3.1)

# default build configuration, adjust this to your liking
option(SHMEM ""SHMEM"" OFF)
option(SDL2 ""SDL2"" ON)
option(X11 ""X11"" ON)
option(ALSA ""ALSA"" ON)
option(PULSEAUDIO ""PULSEAUDIO"" ON)
option(SNDIO ""SNDIO"" ON)
option(PORTAUDIO ""PORTAUDIO"" ON)


if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
endif()

set(CMAKE_C_STANDARD 11)
set(xava_VERSION_MAJOR 0)
set(xava_VERSION_MINOR 6)
set(xava_VERSION_PATCH 3)
set(xava_VERSION_TWEAK 0)

set(xava_VERSION ""${xava_VERSION_MAJOR}.${xava_VERSION_MINOR}.${xava_VERSION_PATCH}.${xava_VERSION_TWEAK}"")

add_definitions(-DPACKAGE=""xava"" -DVERSION=""${xava_VERSION}"")
add_definitions(-DPREFIX=""${CMAKE_INSTALL_PREFIX}"")

find_package(PkgConfig REQUIRED)

# iniparser
find_library(INIPARSER iniparser)
if(NOT INIPARSER)
	message(STATUS ""iniparser not found on system, building from source."")
	if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/.git)
		execute_process(COMMAND git submodule update --init)
		add_library(iniparser
				lib/iniparser/src/dictionary.c
				lib/iniparser/src/iniparser.c)
		add_definitions(-DINIPARSER)
	else()
		message(FATAL_ERROR ""Cannot build iniparser from source since the project \
is not being built inside a git repository.\nIf you want iniparser \
to be built automatically, clone this repository instead of downloading it."")
	endif()
else()
	# certain distros like ubuntu put iniparser in a subdirectory ""iniparser""
	# this is just a non-destructive way to accomidate that case

	find_file(INIPARSER_INCLUDE_FILE iniparser/iniparser.h ${CMAKE_SYSTEM_INCLUDE_PATH})
	if(NOT ${INIPARSER_INCLUDE_FILE} STREQUAL ""INIPARSER_INCLUDE_FILE-NOTFOUND"")
		string(REGEX REPLACE ""iniparser.h"" """" INIPARSER_INCLUDE_DIR ${INIPARSER_INCLUDE_FILE})
		list(APPEND INCLUDE_DIRS ${INIPARSER_INCLUDE_DIR})
	endif()
endif()

if(DEFINE_LEGACYINIPARSER AND INIPARSER)
	add_definitions(-DLEGACYINIPARSER)
endif()

# math lib
find_library(MATH_LIB m)
if(NOT MATH_LIB)
  message(FATAL_ERROR ""math library not found"")
endif()

# pthread
find_library(THREAD_LIB pthread)
if(NOT THREAD_LIB)
	message(FATAL_ERROR ""pthread library not found"")
endif()

# fftw3
pkg_check_modules(FFTW3 REQUIRED fftw3)
list(APPEND INCLUDE_DIRS ""${FFTW3_INCLUDE_DIRS}"")
list(APPEND LINK_DIRS ""${FFTW3_LIBRARY_DIRS}"")


# Optional features
set(ADDITIONAL_SOURCES """")
set(ADDITIONAL_LIBRARIES """")

# shmem
if(SHMEM)
	add_definitions(-DSHMEM)
	list(APPEND ADDITIONAL_LIBRARIES ""-lrt"")
	list(APPEND ADDITIONAL_SOURCES ""src/input/shmem.c"")
endif()

# OS-Specific inclusions
if(NOT (MSYS OR MINGW OR MSVC))
	message(STATUS ""Not a Windows platform, can use POSIX now!"")
	list(APPEND ADDITIONAL_SOURCES ""src/input/fifo.c"")
endif()

# SDL2
if(SDL2)
	pkg_check_modules(SDL2 QUIET sdl2)
	if(SDL2_FOUND)
		list(APPEND ADDITIONAL_SOURCES ""src/output/graphical_sdl.c"")
		list(APPEND INCLUDE_DIRS ""${SDL2_INCLUDE_DIRS}"")
		list(APPEND LINK_DIRS ""${SDL2_LIBRARY_DIRS}"")
		list(APPEND ADDITIONAL_LIBRARIES ""${SDL2_LIBRARIES}"")
		add_definitions(-DSDL)
	else()
		message(STATUS ""SDL2 library not found"")
	endif()
endif()

# Xorg
if(X11)
	pkg_check_modules(X11 QUIET x11 xfixes)
	if(X11_FOUND)
		add_definitions(-DXLIB)
		list(APPEND ADDITIONAL_SOURCES ""src/output/graphical_x.c"")
		list(APPEND INCLUDE_DIRS ""${X11_INCLUDE_DIRS}"")
		list(APPEND LINK_DIRS ""${X11_LIBRARY_DIRS}"")
		list(APPEND ADDITIONAL_LIBRARIES ""${X11_LIBRARIES}"")
		
		# GLX
		pkg_check_modules(GL QUIET gl xrender)
		if(GL_FOUND)
			add_definitions(-DGLX -DGL)
			list(APPEND INCLUDE_DIRS ""${GL_INCLUDE_DIRS}"")
			list(APPEND LINK_DIRS ""${GL_LIBRARY_DIRS}"")
			list(APPEND ADDITIONAL_LIBRARIES ""${GL_LIBRARIES}"")
		else()
			message(STATUS ""GL and or Xrender library not found"")
		endif()
	else()
		message(STATUS ""X11 and/or Xfixes library not found"")
	endif()
endif()


# winapi
if(MSYS OR MINGW OR MSVC)
	find_library(GDI_LIB gdi32)
	if(GDI_LIB)
		find_library(WGL_LIB opengl32)
		if(WGL_LIB)
			find_library(GLU_LIB glu32)
			if(GLU_LIB)
				find_library(DWM_LIB dwmapi)
				if(DWM_LIB)
					add_definitions(-DWIN -DGL)
					list(APPEND ADDITIONAL_SOURCES ""src/output/graphical_win.c"")
					list(APPEND ADDITIONAL_SOURCES ""src/input/wasapi.cpp"")
					list(APPEND ADDITIONAL_LIBRARIES ""-lgdi32"")
					list(APPEND ADDITIONAL_LIBRARIES ""-lopengl32"")
					list(APPEND ADDITIONAL_LIBRARIES ""-lglu32"")
					list(APPEND ADDITIONAL_LIBRARIES ""-ldwmapi"")
				else()
					message(""DWMAPI library not found"")
				endif()
			else()
				message(""GLU library not found"")
			endif()
		else()
			message(""openGL library not found"")
		endif()
	else()
		message(STATUS ""GDI library not found"")
	endif()
	
	if(CMAKE_BUILD_TYPE STREQUAL ""Release"")
		message(STATUS ""Since release build, console is being disabled"")
		SET(CMAKE_EXE_LINKER_FLAGS  ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS} -mwindows"")

		# Prepare NSI file for compilation
		configure_file(""assets/windows/xava.nsi.template"" ""xava.nsi"" NEWLINE_STYLE CRLF)
	endif()
endif()

# alsa
if(ALSA)
	pkg_check_modules(ALSA QUIET alsa)
	if(ALSA_FOUND)
		add_definitions(-DALSA)
		list(APPEND INCLUDE_DIRS ""${ALSA_INCLUDE_DIRS}"")
		list(APPEND LINK_DIRS ""${ALSA_LIBRARY_DIRS}"")
		list(APPEND ADDITIONAL_SOURCES ""src/input/alsa.c"")
		list(APPEND ADDITIONAL_LIBRARIES ""${ALSA_LIBRARIES}"")
	else()
		message(STATUS ""alsa library not found"")
	endif()
endif()

# pulseaudio
if(PULSEAUDIO)
	pkg_check_modules(PULSEAUDIO QUIET libpulse libpulse-simple)
	if(PULSEAUDIO_FOUND)
		add_definitions(-DPULSE)
		list(APPEND INCLUDE_DIRS ""${PULSEAUDIO_INCLUDE_DIRS}"")
		list(APPEND LINK_DIRS ""${PULSEAUDIO_LIBRARY_DIRS}"")
		list(APPEND ADDITIONAL_SOURCES ""src/input/pulse.c"")
		list(APPEND ADDITIONAL_LIBRARIES ""${PULSEAUDIO_LIBRARIES}"")
	else()
		message(STATUS ""pulseaudio library not found"")
	endif()
endif()

# sndio
if(SNDIO)
	find_library(SNDIO_LIB sndio)
	if(SNDIO_LIB)
		add_definitions(-DSNDIO)
		list(APPEND ADDITIONAL_SOURCES ""src/input/sndio.c"")
		list(APPEND ADDITIONAL_LIBRARIES ""-lsndio"")
	else()
		message(STATUS ""sndio library not found"")
	endif()
endif()

# portaudio
if(PORTAUDIO)
	pkg_check_modules(PORTAUDIO QUIET portaudio-2.0)
	if(PORTAUDIO_FOUND)
		add_definitions(-DPORTAUDIO)
		list(APPEND INCLUDE_DIRS ""${PORTAUDIO_INCLUDE_DIRS}"")
		list(APPEND LINK_DIRS ""${PORTAUDIO_LIBRARY_DIRS}"")
		list(APPEND ADDITIONAL_SOURCES ""src/input/portaudio.c"")
		list(APPEND ADDITIONAL_LIBRARIES ""${PORTAUDIO_LIBRARIES}"")
	else()
		message(STATUS ""portaudio library not found"")
	endif()
endif()

if((UNIX AND NOT APPLE) OR (MSYS OR MINGW OR MSVC))
	list(APPEND ADDITIONAL_SOURCES ""src/misc/inode_watcher.c"")
endif()

# Shitty workaround that doesnt work for BSD, Minix or anything with any amount of POSIX compatibility
# Blame: https://stackoverflow.com/questions/9160335/os-specific-instructions-in-cmake-how-to
# Also CMAKE_SYSTEM_NAME doesn't work, so I've tried my options. 
# Please fix this whoever has time and reads this.
if(UNIX AND NOT APPLE)
	# Add proper version info to the desktop shortcut file
	configure_file(""assets/linux/xava.desktop.template"" ""xava.desktop"" NEWLINE_STYLE UNIX)
endif()

# Build executable
add_executable(
	xava
	${ADDITIONAL_SOURCES}
	src/output/graphical.c
	src/shared.c
	src/config.c
	src/xava.c
)

include_directories(${INCLUDE_DIRS})
link_directories(${LINK_DIRS})

# Link executable
target_link_libraries(xava ${ADDITIONAL_LIBRARIES} m ${FFTW3_LIBRARIES} pthread iniparser)

# Install
install (TARGETS xava DESTINATION bin)
install (FILES LICENSE DESTINATION share/licenses/xava)
install (FILES example_files/config RENAME config.example DESTINATION share/xava)
install (FILES ${CMAKE_BINARY_DIR}/xava.desktop DESTINATION share/applications)
install (FILES assets/linux/xava.svg DESTINATION share/icons/hicolor/scalable/apps)

",3.1,3.1
39621,eschnett,SimulationIO,False,False,False,False,False,3,C++,2020-02-15 03:28:54+00:00,2015-10-07 23:35:11+00:00,4,779,"# CMake setup

cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0048 NEW)

set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)

project(SimulationIO VERSION 9.0.0 LANGUAGES C CXX)
set(PROJECT_DESCRIPTION
  ""SimulationIO: Efficient and convenient I/O for large PDE simulations"")
set(PROJECT_URL ""https://github.com/eschnett/SimulationIO"")

set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH} ""${PROJECT_SOURCE_DIR}/cmake/Modules"")

# External dependencies

OPTION(ENABLE_ASDF_CXX ""Enable asdf-cxx backend"" ON)
if(ENABLE_ASDF_CXX)
  find_package(asdf-cxx 7.0.0)
endif()
if(ASDF_CXX_FOUND)
  if(ASDF_CXX_VERSION_STRING VERSION_LESS 7.0.0)
    message(ASDF_CXX_VERSION)
    message(SEND_ERROR ""asdf-cxx version 7.0.0 or later is required"")
  endif()
  include_directories(${ASDF_CXX_INCLUDE_DIR})
  set(LIBS ${LIBS} ${ASDF_CXX_LIBRARY})
  set(HAVE_ASDF_CXX 1)
else()
  set(HAVE_ASDF_CXX 0)
endif()
# TODO: Add cmake config file to asdf-cxx so that its dependencies are
# automatically required

if(ENABLE_ASDF_CXX)
  find_package(BZip2)
  if(BZIP2_FOUND)
    include_directories(${BZIP2_INCLUDE_DIR})
    set(LIBS ${LIBS} ${BZIP2_LIBRARIES})
  endif()

  find_package(OpenSSL)
  if(OPENSSL_FOUND)
    include_directories(${OPENSSL_INCLUDE_DIR})
    set(LIBS ${LIBS} ${OPENSSL_CRYPTO_LIBRARY})
  endif()

  find_package(yaml-cpp REQUIRED)
  include_directories(${YAML_CPP_INCLUDE_DIR})
  set(LIBS ${LIBS} ${YAML_CPP_LIBRARIES})

  find_package(ZLIB)
  if(ZLIB_FOUND)
    include_directories(${ZLIB_INCLUDE_DIRS})
    set(LIBS ${LIBS} ${ZLIB_LIBRARIES})
  endif()
endif()

OPTION(ENABLE_HDF5 ""Enable HDF5 backend"" ON)
if(ENABLE_HDF5)
  find_package(HDF5 1.10.1 COMPONENTS C CXX)
endif()
if(HDF5_FOUND)
  if(HDF5_VERSION VERSION_LESS 1.10.1)
    message(HDF5_VERSION)
    message(SEND_ERROR ""HDF5 version 1.10.1 or later is required"")
  endif()
  include_directories(${HDF5_INCLUDE_DIRS})
  set(LIBS ${LIBS} ${HDF5_LIBRARIES})
  set(HAVE_HDF5 1)
else()
  set(HAVE_HDF5 0)
endif()

if(HDF5_FOUND)
  # Note: We only look for MPI since HDF5 might require MPI
  find_package(MPI)
  # It seems that MPI_INCLUDE_DIRS and MPI_LIBRARIES are old names, and
  # MPI_CXX_INCLUDE_PATH and MPI_CXX_LIBRARIES are newer names
  if(MPI_FOUND)
    include_directories(${MPI_INCLUDE_DIRS} ${MPI_CXX_INCLUDE_PATH})
    set(LIBS ${LIBS} ${MPI_LIBRARIES} ${MPI_CXX_LIBRARIES})
  endif()
endif()

OPTION(ENABLE_RNPL ""Enable RNPL (SDF) backend"" ON)
if(ENABLE_RNPL)
  find_package(RNPL)
endif()
if(RNPL_FOUND)
  include_directories(${RNPL_INCLUDE_DIRS})
  set(LIBS ${LIBS} ${RNPL_LIBRARIES})
  set(HAVE_RNPL 1)
else()
  set(HAVE_RNPL 0)
endif()

OPTION(ENABLE_TILEDB ""Enable TileDB backend"" ON)
if(ENABLE_TILEDB)
  find_package(TILEDB)
endif()
if(TILEDB_FOUND)
  include_directories(${TILEDB_INCLUDE_DIRS})
  set(LIBS ${LIBS} tiledb)
  set(HAVE_TILEDB 1)
else()
  set(HAVE_TILEDB 0)
endif()
# set(HAVE_TILEDB 0)

set(Python_ADDITIONAL_VERSIONS 3.0)
# This sets PYTHONINTERP_FOUND
find_package(PythonInterp)
# This sets PYTHONLIBS_FOUND
find_package(PythonLibs)
if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND)
  include_directories(${PYTHON_INCLUDE_DIRS})
endif()

if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND)
  if(HDF5_FOUND)
    find_package(H5Py)
  endif()
  find_package(NumPy)
endif()

if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND AND
    (NOT HDF5_FOUND OR H5PY_FOUND) AND NUMPY_FOUND)
  find_package(SWIG)
endif()
if(SWIG_FOUND)
  include(${SWIG_USE_FILE})
endif()

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

# Main project

configure_file(
  ""${PROJECT_SOURCE_DIR}/Config.hpp.in""
  ""${PROJECT_BINARY_DIR}/Config.hpp""
  )

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(""${PROJECT_SOURCE_DIR}"" ""${PROJECT_BINARY_DIR}"")

string(REPLACE
  ""-DNDEBUG"" """"
  CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")

set(SIO_SRCS
  Basis.cpp
  BasisVector.cpp
  Buffer.cpp
  Common.cpp
  Config.cpp
  Configuration.cpp
  CoordinateField.cpp
  CoordinateSystem.cpp
  DataBlock.cpp
  DiscreteField.cpp
  DiscreteFieldBlock.cpp
  DiscreteFieldBlockComponent.cpp
  Discretization.cpp
  DiscretizationBlock.cpp
  Field.cpp
  H5Helpers.cpp
  Helpers.cpp
  Manifold.cpp
  Parameter.cpp
  ParameterValue.cpp
  Project.cpp
  SubDiscretization.cpp
  TangentSpace.cpp
  TensorComponent.cpp
  TensorType.cpp
  )

add_library(SimulationIO ${SIO_SRCS})
target_link_libraries(SimulationIO ${LIBS})
set_property(TARGET SimulationIO PROPERTY POSITION_INDEPENDENT_CODE TRUE)

# SWIG bindings

#  AND H5PY_FOUND AND ASDF_FOUND
if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND AND SWIG_FOUND)
  set_source_files_properties(RegionCalculus.i PROPERTIES CPLUSPLUS ON)
  swig_add_library(RegionCalculus LANGUAGE python SOURCES RegionCalculus.i)
  swig_link_libraries(RegionCalculus ${LIBS} ${PYTHON_LIBRARIES})

  set_source_files_properties(SimulationIO.i PROPERTIES CPLUSPLUS ON)
  swig_add_library(SimulationIO LANGUAGE python SOURCES SimulationIO.i)
  swig_link_libraries(SimulationIO SimulationIO ${PYTHON_LIBRARIES})
endif()

# Tools

set(EXES)
if(HDF5_FOUND)
  list(APPEND EXES 
    sio-benchmark
    sio-convert-carpet-output
    sio-convert-to-carpet
    sio-copy
    sio-example
    sio-example-attach
    sio-list
    sio-merge
    sio-filter
    )
  if(RNPL_FOUND)
    list(APPEND EXES 
      sio-convert-from-rnpl-sdf
      )
  endif()
endif()
if(ASDF_CXX_FOUND)
  list(APPEND EXES 
    sio-copy-asdf
    sio-list-asdf
    sio-example-asdf
    )
endif()
if(HDF5_FOUND AND ASDF_CXX_FOUND)
  list(APPEND EXES 
    sio-convert-hdf5-to-asdf
    )
endif()
if(TILEDB_FOUND)
  list(APPEND EXES 
    sio-example-attach-tiledb
    )
endif()

if(HDF5_FOUND)
  add_executable(sio-benchmark benchmark.cpp)
  target_link_libraries(sio-benchmark SimulationIO)

  add_executable(sio-convert-carpet-output convert-carpet-output.cpp)
  target_link_libraries(sio-convert-carpet-output SimulationIO)

  add_executable(sio-convert-to-carpet convert-to-carpet.cpp)
  target_link_libraries(sio-convert-to-carpet SimulationIO)

  add_executable(sio-copy copy.cpp)
  target_link_libraries(sio-copy SimulationIO)

  add_executable(sio-example example.cpp)
  target_link_libraries(sio-example SimulationIO)

  add_executable(sio-example-attach example-attach.cpp)
  target_link_libraries(sio-example-attach SimulationIO)

  add_executable(sio-list list.cpp)
  target_link_libraries(sio-list SimulationIO)

  add_executable(sio-merge merge.cpp)
  target_link_libraries(sio-merge SimulationIO)

  add_executable(sio-filter filter.cpp)
  target_link_libraries(sio-filter SimulationIO)

  if(RNPL_FOUND)
    add_executable(sio-convert-from-rnpl-sdf convert-from-rnpl-sdf.cpp)
    target_link_libraries(sio-convert-from-rnpl-sdf SimulationIO)
  endif()
endif()

if(ASDF_CXX_FOUND)
  add_executable(sio-copy-asdf copy-asdf.cpp)
  target_link_libraries(sio-copy-asdf SimulationIO)

  add_executable(sio-example-asdf example-asdf.cpp)
  target_link_libraries(sio-example-asdf SimulationIO)

  add_executable(sio-list-asdf list-asdf.cpp)
  target_link_libraries(sio-list-asdf SimulationIO)
endif()

if(HDF5_FOUND AND ASDF_CXX_FOUND)
  add_executable(sio-convert-hdf5-to-asdf convert-hdf5-to-asdf.cpp)
  target_link_libraries(sio-convert-hdf5-to-asdf SimulationIO)
endif()

if(TILEDB_FOUND)
  add_executable(sio-example-attach-tiledb example-attach-tiledb.cpp)
  target_link_libraries(sio-example-attach-tiledb SimulationIO)
endif()

# Tests

set(GOOGLETEST_DIR ""googletest-release-1.8.0/googletest"")
include_directories(""${GOOGLETEST_DIR}/include"" ""${GOOGLETEST_DIR}"")

add_executable(test_RegionCalculus
  test_RegionCalculus.cpp ""${GOOGLETEST_DIR}/src/gtest-all.cc"")
target_link_libraries(test_RegionCalculus ${LIBS} Threads::Threads)

add_executable(test_SimulationIO
  test_SimulationIO.cpp ""${GOOGLETEST_DIR}/src/gtest-all.cc"")
target_link_libraries(test_SimulationIO SimulationIO Threads::Threads)

enable_testing()
add_test(NAME test_RegionCalculus COMMAND ./test_RegionCalculus)
add_test(NAME test_SimulationIO COMMAND ./test_SimulationIO)
if(HDF5_FOUND)
  add_test(NAME example COMMAND ./sio-example)
  add_test(NAME list COMMAND ./sio-list example.s5)
  add_test(NAME example-attach COMMAND ./sio-example-attach)
  add_test(NAME list-attach COMMAND ./sio-list example-attach.s5)
  add_test(NAME copy COMMAND ./sio-copy example.s5 example2.s5)
  add_test(NAME list2 COMMAND ./sio-list example2.s5)
endif()
if(ASDF_CXX_FOUND)
  add_test(NAME example-asdf COMMAND ./sio-example-asdf)
  add_test(NAME list-asdf COMMAND asdf-ls example.asdf)
  add_test(NAME list-asdf2 COMMAND ./sio-list-asdf example.asdf)
  add_test(NAME copy-asdf COMMAND ./sio-copy-asdf example.asdf example2.asdf)
  add_test(NAME list-asdf3 COMMAND ./sio-list-asdf example2.asdf)
  add_test(NAME compare-asdf
    COMMAND ${CMAKE_SOURCE_DIR}/diff-commands.sh
            ""./sio-list-asdf example.asdf"" ""./sio-list-asdf example2.asdf"")
endif()
if(HDF5_FOUND AND ASDF_CXX_FOUND)
  add_test(NAME convert-hdf5-asdf
    COMMAND ./sio-convert-hdf5-to-asdf example.s5 example3.asdf)
  add_test(NAME compare-hdf5-asdf
    COMMAND ${CMAKE_SOURCE_DIR}/diff-commands.sh
              ""./sio-list-asdf example.asdf"" ""./sio-list-asdf example3.asdf"")
endif()
if(TILEDB_FOUND)
  add_test(NAME example-attach-tiledb COMMAND ./sio-example-attach-tiledb)
endif()
if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND AND H5PY_FOUND AND
     NUMPY_FOUND AND SWIG_FOUND)
  if(HDF5_FOUND)
    add_test(NAME python-example
      COMMAND
      env ""PYTHONPATH=${PROJECT_BINARY_DIR}:$ENV{PYTHONPATH}""
      ${PYTHON_EXECUTABLE} ""${PROJECT_SOURCE_DIR}/python-example.py"")
    add_test(NAME python-example-attach
      COMMAND
      env ""PYTHONPATH=${PROJECT_BINARY_DIR}:$ENV{PYTHONPATH}""
      ${PYTHON_EXECUTABLE} ""${PROJECT_SOURCE_DIR}/python-example-attach.py"")
    add_test(NAME python-read
      COMMAND
      env ""PYTHONPATH=${PROJECT_BINARY_DIR}:$ENV{PYTHONPATH}""
      ${PYTHON_EXECUTABLE} ""${PROJECT_SOURCE_DIR}/python-read.py"")
    add_test(NAME h5format_convert
      COMMAND h5format_convert python-example.s5)
    if(H5PY_FOUND)
      add_test(NAME python-read-h5py
        COMMAND
        env ""PYTHONPATH=${PROJECT_BINARY_DIR}:$ENV{PYTHONPATH}""
        ${PYTHON_EXECUTABLE} ""${PROJECT_SOURCE_DIR}/python-read-h5py.py"")
    endif()
  endif()
  if(ASDF_FOUND)
    add_test(NAME python-example-asdf
      COMMAND
      env ""PYTHONPATH=${PROJECT_BINARY_DIR}:$ENV{PYTHONPATH}""
      ${PYTHON_EXECUTABLE} ""${PROJECT_SOURCE_DIR}/python-example-asdf.py"")
  endif()
endif()

# Install

set(HEADERS
  Basis.hpp
  BasisVector.hpp
  Buffer.hpp
  Common.hpp
  Configuration.hpp
  CoordinateField.hpp
  CoordinateSystem.hpp
  DataBlock.hpp
  DiscreteField.hpp
  DiscreteFieldBlock.hpp
  DiscreteFieldBlockComponent.hpp
  Discretization.hpp
  DiscretizationBlock.hpp
  Field.hpp
  H5Helpers.hpp
  Helpers.hpp
  Manifold.hpp
  Parameter.hpp
  ParameterValue.hpp
  Project.hpp
  RegionCalculus.hpp
  SimulationIO.hpp
  SubDiscretization.hpp
  TangentSpace.hpp
  TensorComponent.hpp
  TensorType.hpp
  )

install(FILES ${HEADERS} DESTINATION include/SimulationIO)
install(FILES ""${PROJECT_BINARY_DIR}/Config.hpp""
  DESTINATION include/SimulationIO)
install(TARGETS SimulationIO DESTINATION lib)
install(TARGETS ${EXES} DESTINATION bin)

if(PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND AND
    H5PY_FOUND AND NUMPY_FOUND AND SWIG_FOUND)
  install(TARGETS ${SWIG_MODULE_RegionCalculus_REAL_NAME} DESTINATION lib)
  install(TARGETS ${SWIG_MODULE_SimulationIO_REAL_NAME} DESTINATION lib)
endif()

set(PKG_CONFIG_REQUIRES ""hdf5 mpi"")
set(PKG_CONFIG_INCLUDEDIR ""\${prefix}/include/SimulationIO"")
set(PKG_CONFIG_LIBDIR ""\${prefix}/lib"")
set(PKG_CONFIG_CFLAGS ""-I\${includedir}"")
set(PKG_CONFIG_LIBS ""-L\${libdir} -lSimulationIO"")

configure_file(
  ""${PROJECT_SOURCE_DIR}/pkg-config.pc.in""
  ""${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc""
)

install(FILES ""${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc""
  DESTINATION lib/pkgconfig)
",3.1,3.1
39684,AntonioND,giibiiadvance,False,False,False,False,False,3,C,2020-05-14 18:14:19+00:00,2014-03-06 23:22:26+00:00,116,397,"# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (c) 2020, Antonio Niño Díaz
#
# GiiBiiAdvance - GBA/GB emulator

cmake_minimum_required(VERSION 3.10)
project(GiiBiiAdvance)
enable_language(CXX C)

set(CXX_STANDARD 14)
set(CXX_EXTENSIONS ON)
set(CXX_STANDARD_REQUIRED ON)

set(C_STANDARD 11)
set(C_EXTENSIONS ON)
set(C_STANDARD_REQUIRED ON)

add_executable(giibiiadvance)

# This isn't meant to be generic, it's only here to help during development.
if (CMAKE_C_COMPILER_ID STREQUAL ""GNU"")
    target_compile_options(giibiiadvance
        PRIVATE
            -Wall
            -Wformat-truncation=0
            -Wextra
            -Wno-sign-compare
    )
endif()

target_sources(giibiiadvance
    PRIVATE
        source/config.c
        source/debug_utils.c
        source/file_explorer.c
        source/file_utils.c
        source/font_data.c
        source/font_utils.c
        source/general_utils.c
        source/input_utils.c
        source/main.c
        source/png_utils.c
        source/sound_utils.c
        source/text_data.c
        source/window_handler.c
        source/window_icon_data.c
        source/webcam_utils.cpp
        source/gb_core/camera.c
        source/gb_core/cpu.c
        source/gb_core/daa_table.c
        source/gb_core/debug.c
        source/gb_core/debug_video.c
        source/gb_core/dma.c
        source/gb_core/gb_main.c
        source/gb_core/general.c
        source/gb_core/interrupts.c
        source/gb_core/licensees.c
        source/gb_core/mbc.c
        source/gb_core/memory.c
        source/gb_core/memory_dmg.c
        source/gb_core/memory_gbc.c
        source/gb_core/noise.c
        source/gb_core/ppu.c
        source/gb_core/ppu_dmg.c
        source/gb_core/ppu_gbc.c
        source/gb_core/rom.c
        source/gb_core/serial.c
        source/gb_core/sgb.c
        source/gb_core/sound.c
        source/gb_core/video.c
        source/gba_core/arm.c
        source/gba_core/bios.c
        source/gba_core/cpu.c
        source/gba_core/disassembler.c
        source/gba_core/dma.c
        source/gba_core/gba.c
        source/gba_core/gba_debug_video.c
        source/gba_core/interrupts.c
        source/gba_core/memory.c
        source/gba_core/rom.c
        source/gba_core/save.c
        source/gba_core/sound.c
        source/gba_core/thumb.c
        source/gba_core/timers.c
        source/gba_core/video.c
        source/gui/win_gba_disassembler.c
        source/gui/win_gba_ioviewer.c
        source/gui/win_gba_mapviewer.c
        source/gui/win_gba_memviewer.c
        source/gui/win_gba_palviewer.c
        source/gui/win_gba_sprviewer.c
        source/gui/win_gba_tileviewer.c
        source/gui/win_gb_disassembler.c
        source/gui/win_gb_gbcamviewer.c
        source/gui/win_gb_ioviewer.c
        source/gui/win_gb_mapviewer.c
        source/gui/win_gb_memviewer.c
        source/gui/win_gb_palviewer.c
        source/gui/win_gb_sgbviewer.c
        source/gui/win_gb_sprviewer.c
        source/gui/win_gb_tileviewer.c
        source/gui/win_main.c
        source/gui/win_main_config.c
        source/gui/win_main_config_input.c
        source/gui/win_utils.c
        source/gui/win_utils_draw.c
        source/gui/win_utils_events.c
)

# libpng and SLD2 are required

find_package(PNG REQUIRED)
find_package(SDL2 REQUIRED)

target_include_directories(giibiiadvance
    PRIVATE
        ${PNG_INCLUDE_DIRS}
        ${SDL2_INCLUDE_DIRS}
)
target_link_libraries(giibiiadvance
    PRIVATE
        ${PNG_LIBRARIES}
        ${SDL2_LIBRARIES}
)

# OpenCV is optional. If found, let the user build with GB Camera emulation.

find_package(OpenCV 4)

if(OpenCV_FOUND)
    option(ENABLE_CAMERA ""Enable Game Boy Camera emulation"" ON)
else()
    set(ENABLE_CAMERA OFF)
endif()

if(ENABLE_CAMERA)
    target_include_directories(giibiiadvance
        PRIVATE
            ${OpenCV_INCLUDE_DIRS}
    )
    target_link_libraries(giibiiadvance
        PRIVATE
            ${OpenCV_LIBRARIES}
    )
else()
    target_compile_definitions(giibiiadvance
        PRIVATE
            -DNO_CAMERA_EMULATION
    )
endif()

# OpenGL is optional. It can be used as library to output graphics.

find_package(OpenGL)

if(OPENGL_FOUND)
    option(ENABLE_OPENGL ""Compile with OpenGL"" ON)
else()
    set(ENABLE_OPENGL OFF)
endif()

if(ENABLE_OPENGL)
    target_compile_definitions(giibiiadvance
        PRIVATE
            -DENABLE_OPENGL
    )
    target_include_directories(giibiiadvance
        PRIVATE
            ${OPENGL_INCLUDE_DIRS}
    )
    target_link_libraries(giibiiadvance
        PRIVATE
            ${OPENGL_LIBRARIES}
    )
endif()

# In x86 CPUs, replace part of the CPU interpreter by inline assembly.

option(ENABLE_ASM_X86 ""Compile with inline assembly"" ON)

if(ENABLE_ASM_X86)
    target_compile_definitions(giibiiadvance
        PRIVATE
            -DENABLE_ASM_X86
    )
endif()
",3.10,3.1
39786,tulip5,tulip,False,False,False,False,False,9,C++,2020-05-15 10:51:53+00:00,2016-03-26 17:11:54+00:00,81,11523,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

# Remove CMake warnings related to Qt5
IF(POLICY CMP0020)
  CMAKE_POLICY(SET CMP0020 NEW)
ENDIF(POLICY CMP0020)

# Needed by clang compiler provided by MacPorts or homebrew
IF(POLICY CMP0025)
  CMAKE_POLICY(SET CMP0025 NEW)
ENDIF(POLICY CMP0025)

# Remove CMake warnings related to rpath on MacOS
IF(POLICY CMP0042)
  CMAKE_POLICY(SET CMP0042 NEW)
ENDIF(POLICY CMP0042)

# Ensure CMAKE_BUILD_WITH_INSTALL_RPATH is still honored with CMake >= 3.9
# This is needed in order to build tulip-python wheels on MacOS
IF(POLICY CMP0068)
  CMAKE_POLICY(SET CMP0068 OLD)
ENDIF(POLICY CMP0068)

# Force the use of the legacy libGL.so for CMake >= 3.11
IF(POLICY CMP0072)
  CMAKE_POLICY(SET CMP0072 OLD)
ENDIF(POLICY CMP0072)

# enable the use of ccache for Tulip developers to speed up the build process
IF(NOT MSVC)
  SET(TULIP_USE_CCACHE OFF CACHE BOOL ""Do you want to use ccache to speed up the build process during Tulip development ? [OFF|ON]"")
  IF(TULIP_USE_CCACHE)
    FIND_PROGRAM(CCACHE_PROGRAM ccache)
    IF(CCACHE_PROGRAM)
      SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}"")
    ENDIF(CCACHE_PROGRAM)
  ENDIF(TULIP_USE_CCACHE)
ENDIF(NOT MSVC)

PROJECT(tulip)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

#convert CMAKE_INSTALL_PREFIX path into a cmake style path with unix /
#this is to avoid a path with a '\' as the last character which may be seen as
#an escape character (e.g. \"")
FILE(TO_CMAKE_PATH ""${CMAKE_INSTALL_PREFIX}"" CMAKE_INSTALL_PREFIX)

# Force build type to release with debug info if none has been provided
IF(NOT MSVC AND ""${CMAKE_BUILD_TYPE}"" STREQUAL """")
  SET(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING """" FORCE)
ENDIF(NOT MSVC AND ""${CMAKE_BUILD_TYPE}"" STREQUAL """")

## ========================================================
## Check processor architecture
## ========================================================
STRING(COMPARE EQUAL ""${CMAKE_SIZEOF_VOID_P}"" ""8"" X86_64)
IF(X86_64)
  SET(PROCESSOR_ARCHITECTURE ""64"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DX86_64"")
ELSE(X86_64)
  SET(PROCESSOR_ARCHITECTURE ""32"")
ENDIF(X86_64)

## ========================================================
## Consider *BSD as Linux
## ========================================================
STRING(COMPARE EQUAL ""${CMAKE_SYSTEM_NAME}"" ""Linux"" LINUX)
IF(NOT LINUX)
  STRING(FIND ""${CMAKE_SYSTEM_NAME}"" ""BSD"" BSD_POS)
  IF(BSD_POS GREATER -1)
    SET(LINUX TRUE)
    SET(BSD TRUE)
  ENDIF()
ENDIF(NOT LINUX)

## ========================================================
## AppImage build
## ========================================================
IF (TULIP_BUILD_FOR_APPIMAGE)
  ADD_DEFINITIONS(""-DAPPIMAGE_BUILD"")
ENDIF (TULIP_BUILD_FOR_APPIMAGE)

## ========================================================
## Install paths
## ========================================================

INCLUDE(GNUInstallDirs)

SET(TulipLibInstallDir ${CMAKE_INSTALL_LIBDIR})
SET(TulipPluginsInstallDir ${TulipLibInstallDir}/tulip)
SET(TulipGlyphPluginsInstallDir ${TulipPluginsInstallDir}/glyph)
SET(TulipViewPluginsInstallDir ${TulipPluginsInstallDir}/view)
SET(TulipInteractorPluginsInstallDir ${TulipPluginsInstallDir}/interactor)
SET(TulipPerspectivePluginsInstallDir ${TulipPluginsInstallDir}/perspective)
SET(TulipBinInstallDir ${CMAKE_INSTALL_BINDIR})
SET(TulipIncludeInstallDir ${CMAKE_INSTALL_INCLUDEDIR})
SET(TulipShareInstallDir ${CMAKE_INSTALL_DATADIR}/tulip)
SET(TulipBitmapInstallDir ${TulipShareInstallDir}/bitmaps)

## ========================================================
## Tulip CMake macros
## ========================================================
INCLUDE(cmake/TulipUseFile.cmake)

## ========================================================
## Tulip version variables
## ========================================================
SET(TulipMajorVersion 5)
SET(TulipMinorVersion 4)
SET(TulipReleaseVersion ""0"")
SET(TulipVersionSeparator .)
IF(MSVC) #specific options for Visual Studio
  SET(TulipVersionSeparator _)
ENDIF()
SET(TulipVersion ""${TulipMajorVersion}${TulipVersionSeparator}${TulipMinorVersion}${TulipVersionSeparator}${TulipReleaseVersion}"")
SET(TulipMMVersion ""${TulipMajorVersion}${TulipVersionSeparator}${TulipMinorVersion}"")
SET(TulipMinorVersionTwoDigits ""${TulipMinorVersion}"")
# Use two digits for the minor version when generating the Tulip integer version number
# as there was a 4.10 release that breaks preprocessor test like TULIP_INT_VERSION >= 4100 since the 5.0 release
# (see https://sourceforge.net/p/auber/bugs/869/)
STRING(LENGTH ""${TulipMinorVersion}"" TulipMinorVersionNbDigits)
IF(TulipMinorVersionNbDigits LESS 2)
  SET(TulipMinorVersionTwoDigits ""0${TulipMinorVersion}"")
ENDIF(TulipMinorVersionNbDigits LESS 2)
SET(TulipIntMMVersion ""${TulipMajorVersion}${TulipMinorVersionTwoDigits}"")
IF(TulipReleaseVersion MATCHES ""^[0-9]+$"")
  SET(TulipIntVersion ""${TulipMajorVersion}${TulipMinorVersionTwoDigits}${TulipReleaseVersion}"")
ELSE(TulipReleaseVersion MATCHES ""^[0-9]+$"")
  # just a hack to force the display of the full Tulip version in window title bar
  # when it contains non digit characters (like alpha, beta, dev, ...)
  SET(TulipIntVersion ""${TulipMajorVersion}${TulipMinorVersion}1"")
  INCLUDE(cmake/GetGitRevisionDescription.cmake)
  IF(EXISTS ${PROJECT_SOURCE_DIR}/.git AND NOT TULIP_BUILD_FOR_APPIMAGE)
    SET(TULIP_SOURCE_DIR ${PROJECT_SOURCE_DIR})
    GET_GIT_HEAD_REVISION(TULIP_REFSPEC TULIP_GIT_REVISION)
    CONFIGURE_FILE(utils/cmake-templates/GIT_COMMIT.in ${CMAKE_CURRENT_BINARY_DIR}/GIT_COMMIT)
    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/GIT_COMMIT
            DESTINATION ${TulipShareInstallDir})
  ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/.git AND NOT TULIP_BUILD_FOR_APPIMAGE)
ENDIF(TulipReleaseVersion MATCHES ""^[0-9]+$"")

## ========================================================
## Tulip libraries names
## ========================================================
SET(LibTulipCoreName ""tulip-core-${TulipMMVersion}"")
SET(LibTulipOGLName ""tulip-ogl-${TulipMMVersion}"")
SET(LibTulipGUIName ""tulip-gui-${TulipMMVersion}"")
SET(LibTulipPythonName ""tulip-python-${TulipMMVersion}"")
SET(LibTulipOGDFName ""tulip-ogdf-${TulipMMVersion}"")
SET(LibStlPythonBindingsName ""stl-python-bindings"")
SET(LibTulipCorePythonBindingsName ""tulip-core-python-bindings"")
SET(LibTulipGUIPythonBindingsName ""tulip-gui-python-bindings"")
SET(TulipLibs ${LibTulipCoreName} ${LibTulipOGLName} ${LibTulipGUIName} ${LibTulipOGDFName})

## ========================================================
## Current year (used in documentation config files)
## ========================================================
STRING(TIMESTAMP CurrentYear ""%Y"")

## ========================================================
## Compiler-specific options
## ========================================================

TULIP_SET_COMPILER_OPTIONS()

## ========================================================
## CORE ONLY
## this used to have a minimal build of Tulip without
## any of the opengl, qt or python components
## ========================================================
IF(NOT EXISTS ${PROJECT_SOURCE_DIR}/cmake/FindQtX.cmake OR EMSCRIPTEN)
  SET(TULIP_BUILD_CORE_ONLY ON)
  MESSAGE(""You can only configure a core build of Tulip."")
ELSE()
  SET(TULIP_BUILD_CORE_ONLY OFF CACHE BOOL ""Do you want a minimal build of Tulip (no OpenGL rendering, no Qt gui, no documentation) ? [ON|OFF]"")
ENDIF()

IF(TULIP_BUILD_CORE_ONLY AND LINUX)
# the macro ADD_CORE_FILES will be used
# to collect the files needed to build a minimal Tulip
# in the directory pointed by CMAKE_CURRENT_SOURCE_DIR
  MACRO(ADD_CORE_FILES files)
    SET(CURRENT_SOURCE_DIR ""."")
    IF(${CMAKE_CURRENT_SOURCE_DIR} STRGREATER ${PROJECT_SOURCE_DIR})
      EXECUTE_PROCESS(COMMAND echo -n ${CMAKE_CURRENT_SOURCE_DIR}
                      COMMAND sed ""s,${PROJECT_SOURCE_DIR}/,,""
                      OUTPUT_VARIABLE CURRENT_SOURCE_DIR)
    ENDIF()
    IF(${files} STREQUAL ""."")
      SET(ENV{CORE_FILES} ""$ENV{CORE_FILES} \$(find ${CURRENT_SOURCE_DIR} -path \""*/.svn\"" -prune -o -type f -print)"")
    ELSE()
      FOREACH(core_file ${ARGV})
        SET(ENV{CORE_FILES} ""$ENV{CORE_FILES} ${CURRENT_SOURCE_DIR}/${core_file}"")
      ENDFOREACH()
    ENDIF()
  ENDMACRO()
  ADD_CORE_FILES(CMakeLists.txt cmake/cmake_uninstall.cmake.in cmake/TulipUseFile.cmake cmake/FindCppUnit.cmake cmake/FindTulip.cmake)
# the macro ADD_CORE_DIRECTORY_EXCEPT will be used
# to exclude the files not needed to build a minimal Tulip
# in the directory pointed by CMAKE_CURRENT_SOURCE_DIR
  MACRO(ADD_CORE_DIRECTORY_EXCEPT files)
    SET(CURRENT_SOURCE_DIR ""."")
    IF(${CMAKE_CURRENT_SOURCE_DIR} STRGREATER ${PROJECT_SOURCE_DIR})
      EXECUTE_PROCESS(COMMAND echo -n ${CMAKE_CURRENT_SOURCE_DIR}
                      COMMAND sed ""s,${PROJECT_SOURCE_DIR}/,,""
                      OUTPUT_VARIABLE CURRENT_SOURCE_DIR)
    ENDIF()
    SET(find_command ""\$(find ${CURRENT_SOURCE_DIR} -path \""*/.svn\"" -prune -o -type f"")
    FOREACH(exclude_file ${ARGV})
      SET(find_command ""${find_command} -a ! -name \""${exclude_file}\"""")
    ENDFOREACH()
    SET(ENV{CORE_FILES} ""$ENV{CORE_FILES} ${find_command} -print)"")
  ENDMACRO()
ELSE()
  MACRO(ADD_CORE_FILES files)
  ENDMACRO()
  MACRO(ADD_CORE_DIRECTORY_EXCEPT files)
  ENDMACRO()
ENDIF()

SET(TULIP_BUILD_PYTHON_COMPONENTS ON CACHE BOOL ""Do you want to build Tulip Python components ? [ON|OFF]"")
IF(TULIP_BUILD_PYTHON_COMPONENTS)
  SET(TULIP_PYTHON_ROOT_FOLDER ${CMAKE_BINARY_DIR}/library/tulip-python/bindings/tulip-core/tulip_module)
  SET(TULIP_PYTHON_FOLDER ${TULIP_PYTHON_ROOT_FOLDER}/tulip)
  SET(TULIPGUI_PYTHON_ROOT_FOLDER ${CMAKE_BINARY_DIR}/library/tulip-python/bindings/tulip-gui/tulipgui_module)
  SET(TULIPGUI_PYTHON_FOLDER ${TULIPGUI_PYTHON_ROOT_FOLDER}/tulipgui)
  SET(TULIP_PYTHON_NATIVE_FOLDER ${TULIP_PYTHON_FOLDER}/native)
  SET(TULIPGUI_PYTHON_NATIVE_FOLDER ${TULIPGUI_PYTHON_FOLDER}/native)
  SET(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET OFF CACHE BOOL ""Add a wheel make target for generating Python tulip-core module wheel ? [ON|OFF]"")
  IF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
    SET(TULIP_BUILD_CORE_ONLY ON)
    IF(APPLE)
      # build binaries with install rpath when generating Tulip Python wheels
      # for MacOs as we don't install the project in that case
      SET(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
    ELSEIF(LINUX)
      FILE(READ /etc/issue LINUX_ISSUE)
      IF((NOT ""${LINUX_ISSUE}"" MATCHES "".*CentOS release 5\\.11 \\(Final\\).*"" AND NOT ""${LINUX_ISSUE}"" MATCHES "".*CentOS release 6\\.10 \\(Final\\).*"") OR NOT EXISTS /usr/local/bin/auditwheel)
        MESSAGE(FATAL_ERROR ""Python binary wheels for Linux platform must be compiled using the CentOS (5.11 or 6.10) docker images provided by the manylinux project from the Python Packaging Authority.\nSee https://github.com/pypa/manylinux for more details."")
      ENDIF()
      # build binaries with install rpath when generating Tulip Python wheels for Linux
      # as we don't install the project in that case
      SET(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
    ENDIF(APPLE)
  ENDIF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
ENDIF(TULIP_BUILD_PYTHON_COMPONENTS)

## ========================================================
## Required packages
## ========================================================
IF(MINGW)
  # Set some common libraries and headers search paths for MinGW
  SET(CMAKE_LIBRARY_PATH ""${MINGW_BIN_PATH};${MINGW_LIB_PATH};${MINGW_LIB64_PATH};${CMAKE_LIBRARY_PATH}"")
  SET(CMAKE_INCLUDE_PATH ""${MINGW_INCLUDE_PATH};${MINGW_INCLUDE_PATH}/freetype2;${MINGW_INCLUDE_PATH}/libpng*;${CMAKE_INCLUDE_PATH}"")

  # Check if libintl is present in the MinGW build environment
  FIND_LIBRARY(INTL_LIBRARY intl PATHS ${MINGW_LIB_PATH} ${MINGW_LIB64_PATH} NO_DEFAULT_PATH)
ELSE(MINGW)
  FIND_LIBRARY(INTL_LIBRARY intl)
ENDIF(MINGW)
MARK_AS_ADVANCED(INTL_LIBRARY)

# Don't need to find zlib when compiling with emscripten as there is an available emscripten port of it
IF(NOT EMSCRIPTEN)

  # ZLIB
  FIND_PACKAGE(ZLIB REQUIRED)

ENDIF(NOT EMSCRIPTEN)

# Qhull
SET(TULIP_USE_THIRDPARTY_QHULL OFF CACHE BOOL ""If activated, force the use of reentrant qhull library located in thirdparty instead of trying to find it on the system."")
IF(NOT TULIP_USE_THIRDPARTY_QHULL)
  FIND_PACKAGE(Qhull)
ELSE(NOT TULIP_USE_THIRDPARTY_QHULL)
  UNSET(QHULL_FOUND CACHE)
ENDIF(NOT TULIP_USE_THIRDPARTY_QHULL)


#Yajl
FIND_PACKAGE(Yajl)

IF(NOT TULIP_BUILD_CORE_ONLY)
  # OpenGL
  FIND_PACKAGE(OpenGL REQUIRED)

  # Glew
  FIND_PACKAGE(GLEW REQUIRED)
  # if needed, when using cmake 3.15, define some undefined glew variables
  IF(NOT ${CMAKE_VERSION} VERSION_LESS ""3.15.0"")
    IF(NOT GLEW_INCLUDE_DIR)
      GET_TARGET_PROPERTY(GLEW_INCLUDE_DIR GLEW::GLEW INTERFACE_INCLUDE_DIRECTORIES)
    ENDIF(NOT GLEW_INCLUDE_DIR)
    IF(NOT GLEW_LIBRARY)
      SET(GLEW_LIBRARY GLEW::GLEW)
    ENDIF(NOT GLEW_LIBRARY)
  ENDIF(NOT ${CMAKE_VERSION} VERSION_LESS ""3.15.0"")

IF(TULIP_BUILD_GL_TEX_LOADER)
  # Jpeg
  FIND_PACKAGE(JPEG REQUIRED)

  # Png
  FIND_PACKAGE(PNG REQUIRED)
ENDIF(TULIP_BUILD_GL_TEX_LOADER)

  # Freetype
  FIND_PACKAGE(Freetype REQUIRED)

  # Qt
  FIND_PACKAGE(QtX)

  # Quazip
SET(TULIP_USE_THIRDPARTY_QUAZIP OFF CACHE BOOL ""If activated, force the use of quazip library located in thirdparty instead of trying to find it on the system."")
IF(NOT TULIP_USE_THIRDPARTY_QUAZIP)
  FIND_PACKAGE(QuaZip)
ELSE(NOT TULIP_USE_THIRDPARTY_QUAZIP)
  UNSET(QUAZIP_FOUND CACHE)
ENDIF(NOT TULIP_USE_THIRDPARTY_QUAZIP)
ENDIF(NOT TULIP_BUILD_CORE_ONLY)

# Python
IF(TULIP_BUILD_PYTHON_COMPONENTS)
  INCLUDE(cmake/TulipPython.cmake)
ENDIF(TULIP_BUILD_PYTHON_COMPONENTS)

## ========================================================
## Include and library paths
## ========================================================
SET(GZStreamInclude ${PROJECT_SOURCE_DIR}/thirdparty/gzstream/)
SET(GZStreamLibrary gzstream-tulip-${TulipMMVersion})
IF(NOT TULIP_BUILD_CORE_ONLY)
  IF(QUAZIP_FOUND)
    SET(QuazipInclude ${QUAZIP_INCLUDE_DIRS})
    SET(QuazipLibrary ${QUAZIP_LIBRARIES})
  ELSE(QUAZIP_FOUND)
    SET(QuazipInclude ${PROJECT_SOURCE_DIR}/thirdparty/quazip/)
    SET(QuazipLibrary quazip-tulip-${TulipMMVersion})
  ENDIF(QUAZIP_FOUND)

  SET(FTGLInclude ${PROJECT_SOURCE_DIR}/thirdparty/ftgl/)
  SET(FTGLLibrary ftgl-tulip-${TulipMMVersion})
  SET(Tess2Include ${PROJECT_SOURCE_DIR}/thirdparty/libtess2/Include)
  SET(Tess2Library tess2-tulip-${TulipMMVersion})
ENDIF(NOT TULIP_BUILD_CORE_ONLY)

SET(OGDFInclude ${PROJECT_SOURCE_DIR}/thirdparty/OGDF/include)
SET(OGDFBuildInclude ${PROJECT_BINARY_DIR}/thirdparty/OGDF/include)
SET(OGDFLibrary OGDF-tulip-${TulipMMVersion})

IF(QHULL_FOUND)
  SET(QhullInclude ${QHULL_INCLUDE_DIRS})
  SET(QhullLibrary ${QHULL_LIBRARIES})
ELSE(QHULL_FOUND)
  SET(HAVE_REENTRANT_QHULL TRUE)
  SET(QhullInclude ${PROJECT_SOURCE_DIR}/thirdparty/libqhull)
  SET(QhullLibrary qhullstatic)
ENDIF(QHULL_FOUND)

IF(YAJL_FOUND)
  SET(YajlInclude ${YAJL_INCLUDE_DIRS})
  SET(YajlLibrary ${YAJL_LIBRARIES})
ELSE(YAJL_FOUND)
  SET(YajlInclude ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/yajl/src ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/yajl/src/api ${CMAKE_CURRENT_BINARY_DIR}/thirdparty/yajl/yajl-2.1.0/include)
  SET(YajlLibrary yajl-tulip-${TulipMMVersion})
ENDIF(YAJL_FOUND)

SET(UTF8CppInclude ${PROJECT_SOURCE_DIR}/thirdparty/utf8-cpp/source)

SET(TulipCoreInclude ${PROJECT_SOURCE_DIR}/library/tulip-core/include/)
SET(TulipCoreBuildInclude ${PROJECT_BINARY_DIR}/library/tulip-core/include/)
SET(TulipOGLInclude ${PROJECT_SOURCE_DIR}/library/tulip-ogl/include/)
SET(TulipOGDFInclude ${PROJECT_SOURCE_DIR}/library/tulip-ogdf/)
SET(TulipGUIInclude ${PROJECT_SOURCE_DIR}/library/tulip-gui/include/)
SET(TulipUIGUIInclude ${PROJECT_BINARY_DIR}/library/tulip-gui/src/)
SET(TulipGUIBuildInclude ${PROJECT_BINARY_DIR}/library/tulip-gui/include/)
SET(TulipPythonInclude ${PROJECT_SOURCE_DIR}/library/tulip-python/include)

## ========================================================
## Point RPATH to lib folder
## ========================================================
# On MacOS, use rpaths (i.e. the ""install_name"" field of shared libraries will be @rpath)
# This is already enabled by default for CMake >= 3.0 (see http://www.cmake.org/cmake/help/v3.0/prop_tgt/MACOSX_RPATH.html)
SET(CMAKE_MACOSX_RPATH ON)
FUNCTION(ADD_LIBRARY name)
  _ADD_LIBRARY(${name} ${ARGN})
  IF(APPLE)
    # relative locations of Tulip dylibs dependencies are not the sames when generating Python wheel
    IF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
      SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""@loader_path/;@loader_path/../"")
    ELSE(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
      SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""@loader_path/../lib;@loader_path/../Frameworks;${QT_FRAMEWORKS_DIR}"")
    ENDIF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
  ELSE(APPLE)
    # CMake >= 3.1.0 does not allow to set the INSTALL_RPATH property on INTERFACE_LIBRARY target type
    GET_TARGET_PROPERTY(TARGET_TYPE ${name} TYPE)
    IF(NOT ""${TARGET_TYPE}"" STREQUAL ""INTERFACE_LIBRARY"")
      SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""$ORIGIN:$ORIGIN/../:$ORIGIN/../../"")
      IF(MSVC)
        SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ""${CMAKE_CURRENT_BINARY_DIR}"")
        SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ""${CMAKE_CURRENT_BINARY_DIR}"")
        SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ""${CMAKE_CURRENT_BINARY_DIR}"")
        SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ""${CMAKE_CURRENT_BINARY_DIR}"")
        # MSVC linker PDB files are only generated for shared libraries
        IF(""${ARGV1}"" STREQUAL ""SHARED"")
          SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_NAME_DEBUG ""${name}"")
          SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_NAME_RELWITHDEBINFO ""${name}"")
          SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_OUTPUT_DIRECTORY_DEBUG ""${CMAKE_CURRENT_BINARY_DIR}"")
          SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_OUTPUT_DIRECTORY_RELWITHDEBINFO ""${CMAKE_CURRENT_BINARY_DIR}"")
          INSTALL(FILES $<TARGET_PDB_FILE:${name}> DESTINATION ${TulipShareInstallDir}/pdb CONFIGURATIONS Debug)
          INSTALL(FILES $<TARGET_PDB_FILE:${name}> DESTINATION ${TulipShareInstallDir}/pdb CONFIGURATIONS RelWithDebInfo)
        ENDIF(""${ARGV1}"" STREQUAL ""SHARED"")
      ENDIF(MSVC)
    ENDIF(NOT ""${TARGET_TYPE}"" STREQUAL ""INTERFACE_LIBRARY"")
  ENDIF(APPLE)
  IF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
    ADD_DEPENDENCIES(wheel ${name})
  ENDIF(TULIP_ACTIVATE_PYTHON_WHEEL_TARGET)
ENDFUNCTION()

FUNCTION(ADD_EXECUTABLE name)
  _ADD_EXECUTABLE(${name} ${ARGN})
  IF(APPLE)
    SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""@loader_path/../${CMAKE_INSTALL_LIBDIR};@loader_path/../Frameworks;${QT_FRAMEWORKS_DIR}"")
  ELSEIF(LINUX)
    SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""$ORIGIN/../${CMAKE_INSTALL_LIBDIR}"")
  ELSE()
    SET_TARGET_PROPERTIES(${name} PROPERTIES INSTALL_RPATH ""$ORIGIN"")
  ENDIF()
  IF(MSVC)
    SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ""${CMAKE_CURRENT_BINARY_DIR}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ""${CMAKE_CURRENT_BINARY_DIR}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ""${CMAKE_CURRENT_BINARY_DIR}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ""${CMAKE_CURRENT_BINARY_DIR}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_NAME_DEBUG ""${name}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_NAME_RELWITHDEBINFO ""${name}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_OUTPUT_DIRECTORY_DEBUG ""${CMAKE_CURRENT_BINARY_DIR}"")
    SET_TARGET_PROPERTIES(${name} PROPERTIES PDB_OUTPUT_DIRECTORY_RELWITHDEBINFO ""${CMAKE_CURRENT_BINARY_DIR}"")
    INSTALL(FILES $<TARGET_PDB_FILE:${name}> DESTINATION ${TulipShareInstallDir}/pdb CONFIGURATIONS Debug)
    INSTALL(FILES $<TARGET_PDB_FILE:${name}> DESTINATION ${TulipShareInstallDir}/pdb CONFIGURATIONS RelWithDebInfo)
  ENDIF(MSVC)
ENDFUNCTION()

## ========================================================
## Tests
## ========================================================
IF(EXISTS ${CMAKE_SOURCE_DIR}/tests/CMakeLists.txt)
  SET(TULIP_BUILD_TESTS OFF CACHE BOOL ""Do you want to build the tests ? [OFF|ON]"")
ELSE()
  SET(TULIP_BUILD_TESTS OFF)
ENDIF()

## ========================================================
## Create library/tulip/include/tulip/TulipRelease.h base on TulipRelease.h.in
## ========================================================
STRING(COMPARE EQUAL ""${CMAKE_BUILD_TYPE}"" ""Release"" result1)
STRING(COMPARE EQUAL ""${CMAKE_BUILD_TYPE}"" ""RelWithDebInfo"" result2)
IF(${result1} OR ${result2})
  SET(TulipBuildIsRelease 1)
ELSE()
  SET(TulipBuildIsRelease 0)
ENDIF()
CONFIGURE_FILE(""library/tulip-core/include/tulip/TulipRelease.h.in"" ""library/tulip-core/include/tulip/TulipRelease.h"")

## ========================================================
## Configure file for uninstall target
## ========================================================

IF(LINUX)
  IF(""${CMAKE_INSTALL_PREFIX}"" MATCHES ""^/home.*$"")
    SET(DESKTOP_CONFIG_INSTALL_PREFIX ""$ENV{HOME}/.local"")
  ELSE(""${CMAKE_INSTALL_PREFIX}"" MATCHES ""^/home.*$"")
    SET(DESKTOP_CONFIG_INSTALL_PREFIX ""${CMAKE_INSTALL_PREFIX}"")
  ENDIF(""${CMAKE_INSTALL_PREFIX}"" MATCHES ""^/home.*$"")
ENDIF(LINUX)

CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"" ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"" IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake VERBATIM)

ADD_SUBDIRECTORY(thirdparty)
ADD_SUBDIRECTORY(library)
ADD_SUBDIRECTORY(plugins)
IF(NOT TULIP_BUILD_CORE_ONLY)
  ADD_SUBDIRECTORY(doc)
  ADD_SUBDIRECTORY(textures)
  ADD_SUBDIRECTORY(externalplugins)
  ADD_SUBDIRECTORY(demos)
  ADD_SUBDIRECTORY(software)
ENDIF(NOT TULIP_BUILD_CORE_ONLY)

IF(TULIP_BUILD_TESTS)
  INCLUDE(CTest)
  ENABLE_TESTING()
  IF(CMAKE_CONFIGURATION_TYPES)
    ADD_CUSTOM_TARGET(runTests COMMAND ${CMAKE_CTEST_COMMAND} --force-new-ctest-process --output-on-failure --build-config ""$<CONFIGURATION>"")
  ELSE(CMAKE_CONFIGURATION_TYPES)
    ADD_CUSTOM_TARGET(runTests COMMAND ${CMAKE_CTEST_COMMAND} --force-new-ctest-process --output-on-failure)
  ENDIF(CMAKE_CONFIGURATION_TYPES)
  ADD_SUBDIRECTORY(tests)
ENDIF(TULIP_BUILD_TESTS)

INSTALL(FILES AUTHORS
              COPYING.LESSER
        DESTINATION ${TulipShareInstallDir})

INSTALL(FILES cmake/FindTULIP.cmake
        RENAME TULIPConfig.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/TULIP/)

CONFIGURE_FILE(cmake/TULIPConfigVersion.cmake.in ${CMAKE_BINARY_DIR}/cmake/TULIPConfigVersion.cmake @ONLY)

INSTALL(FILES cmake/TulipUseFile.cmake
              ${CMAKE_BINARY_DIR}/cmake/TULIPConfigVersion.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/TULIP/)

## ========================================================
## tulip-config script
## ========================================================
SET(prefix ""${CMAKE_INSTALL_PREFIX}"")
SET(exec_prefix ""\${prefix}"")
SET(includedir ""\${prefix}/${TulipIncludeInstallDir}"")
SET(libdir ""\${prefix}/${TulipLibInstallDir}"")
SET(libversion ""${TulipMMVersion}"")
SET(VERSION ""${TulipVersion}"")
SET(WIN_VERSION ""${TulipMajorVersion}.${TulipMinorVersion}"")
IF(""${OPENGL_INCLUDE_DIR}"" STRGREATER """")
  SET(GL_INCLUDES ""-I${OPENGL_INCLUDE_DIR}"")
ENDIF(""${OPENGL_INCLUDE_DIR}"" STRGREATER """")
IF(WIN32)
  SET(GL_LDFLAGS ""-l${OPENGL_gl_LIBRARY} ${GLEW_LIBRARY}"")
ELSE(WIN32)
  SET(GL_LDFLAGS ""${OPENGL_gl_LIBRARY} ${GLEW_LIBRARY}"")
ENDIF(WIN32)
SET(QT_LDFLAGS ""${QT_QTCORE_LIBRARY_RELEASE} ${QT_QTGUI_LIBRARY_RELEASE} ${QT_QTOPENGL_LIBRARY_RELEASE} ${QT_QTXML_LIBRARY_RELEASE} ${QT_QTNETWORK_LIBRARY_RELEASE} ${QT_QTWEBKIT_LIBRARY_RELEASE}"")

# if needed, enable C++11 in tulip-config --cxxflags
IF(CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
  SET(TULIP_CONFIG_CXX11_FLAGS ""-std=c++0x"")
ELSE(CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
  IF((CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.1) OR CLANG)
    SET(TULIP_CONFIG_CXX11_FLAGS ""-std=c++11"")
  ENDIF((CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.1) OR CLANG)
ENDIF(CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
IF(CLANG AND APPLE)
  SET(TULIP_CONFIG_CXX11_FLAGS ""-std=c++11 -stdlib=libc++"")
ENDIF(CLANG AND APPLE)

CONFIGURE_FILE(""tulip-config.in"" ""tulip-config"" @ONLY)
INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/tulip-config DESTINATION ${TulipBinInstallDir})

IF(NOT TULIP_BUILD_CORE_ONLY)

  ADD_SUBDIRECTORY(bundlers)
  # ADD_SUBDIRECTORY(deploy)

  IF(MSVC)
    INCLUDE(InstallRequiredSystemLibraries)
    IF(OPENMP_FOUND)
      IF(MSVC90)
        INSTALL(PROGRAMS ""${MSVC90_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC90.OPENMP/vcomp90.dll"" DESTINATION ${TulipBinInstallDir})
      ENDIF(MSVC90)
      IF(MSVC10)
        INSTALL(PROGRAMS ""${MSVC10_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC100.OPENMP/vcomp100.dll"" DESTINATION ${TulipBinInstallDir})
      ENDIF(MSVC10)
      IF(MSVC11)
        INSTALL(PROGRAMS ""${MSVC11_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC110.OPENMP/vcomp110.dll"" DESTINATION ${TulipBinInstallDir})
      ENDIF(MSVC11)
      IF(MSVC12)
        INSTALL(PROGRAMS ""${MSVC12_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC120.OPENMP/vcomp120.dll"" DESTINATION ${TulipBinInstallDir})
      ENDIF(MSVC12)
      IF(MSVC14 AND MSVC_VERSION EQUAL 1900)
        INSTALL(PROGRAMS ""${MSVC_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC140.OPENMP/vcomp140.dll"" DESTINATION ${TulipBinInstallDir})
      # for Visual Studio 15.0 2017
      ELSEIF(MSVC14 AND MSVC_VERSION EQUAL 1910)
        INSTALL(PROGRAMS ""${MSVC_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC150.OPENMP/vcomp140.dll"" DESTINATION ${TulipBinInstallDir})
      ELSEIF(MSVC14 AND MSVC_VERSION EQUAL 1912)
        INSTALL(PROGRAMS ""${MSVC_REDIST_DIR}/${CMAKE_MSVC_ARCH}/Microsoft.VC141.OPENMP/vcomp140.dll"" DESTINATION ${TulipBinInstallDir})
      ENDIF()
    ENDIF(OPENMP_FOUND)
  ENDIF(MSVC)

  IF(WIN32)
    # initialize the list of bundle libs (second arg of FIXUP_BUNDLE),
    # updated in plugins/view/GeographicView,
    # and finally used in software/tulip_perpective/CMakeLists.txt
    SET_PROPERTY(GLOBAL PROPERTY FIXUP_BUNDLE_LIBS """")

    GET_FILENAME_COMPONENT(NSIS_PATH ""[HKEY_LOCAL_MACHINE\\SOFTWARE\\NSIS]"" ABSOLUTE)
    STRING(COMPARE EQUAL ""${NSIS_PATH}"" """" NSIS_PATH_EMPTY)
    IF(NSIS_PATH_EMPTY)
      GET_FILENAME_COMPONENT(NSIS_PATH ""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\NSIS]"" ABSOLUTE)
      STRING(COMPARE EQUAL ""${NSIS_PATH}"" """" NSIS_PATH_EMPTY)
    ENDIF(NSIS_PATH_EMPTY)

    IF(NOT NSIS_PATH_EMPTY)

      IF(NOT TULIP_BUILD_PYTHON_COMPONENTS OR EXISTS ""${NSIS_PATH}/Plugins/inetc.dll"" OR EXISTS ""${NSIS_PATH}/Plugins/x86-ansi/inetc.dll"")

        STRING(REPLACE ""/"" ""\\"" NSIS_PATH ""${NSIS_PATH}"")
        STRING(REPLACE ""/"" ""\\"" BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}"")
        STRING(REPLACE ""/"" ""\\"" TLP_DIR ""${CMAKE_INSTALL_PREFIX}"")
        STRING(REPLACE ""/"" ""\\"" QTX_PLUGINS_DIR ""${QT_PLUGINS_DIR}"")

        IF(TulipBuildIsRelease OR MSVC)
          SET(DEBUG_MODE ""FALSE"")
        ELSE(TulipBuildIsRelease OR MSVC)
          SET(DEBUG_MODE ""TRUE"")
        ENDIF(TulipBuildIsRelease OR MSVC)

        ADD_CUSTOM_TARGET(bundle
                          COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake
                          COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/bundlers/win/win_bundle.bat ${CMAKE_CURRENT_BINARY_DIR}/bundlers/win/win_bundle.bat
                          COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/bundlers/win/FileAssociation.nsh ${CMAKE_CURRENT_BINARY_DIR}/FileAssociation.nsh
                          COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/COPYING.LESSER ${CMAKE_CURRENT_BINARY_DIR}/bundlers/win/COPYING.LESSER
                          COMMAND cmd //C win_bundle.bat \""${NSIS_PATH}\"" \""${TLP_DIR}\"" \""${BINARY_DIR}\"" ${DEBUG_MODE}
                          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bundlers/win)

      ELSE(NOT TULIP_BUILD_PYTHON_COMPONENTS OR EXISTS ""${NSIS_PATH}/Plugins/inetc.dll"" OR EXISTS ""${NSIS_PATH}/Plugins/x86-ansi/inetc.dll"")

        MESSAGE(""NSIS Inetc plugin is required to build the Tulip installer."")
        MESSAGE(""Extract ${CMAKE_CURRENT_SOURCE_DIR}/bundlers/win/Inetc.zip in ${NSIS_PATH}."")

      ENDIF(NOT TULIP_BUILD_PYTHON_COMPONENTS OR EXISTS ""${NSIS_PATH}/Plugins/inetc.dll"" OR EXISTS ""${NSIS_PATH}/Plugins/x86-ansi/inetc.dll"")

    ELSE(NOT NSIS_PATH_EMPTY)

      MESSAGE(""Nullsoft Scriptable Install System is not installed on your system"")
      MESSAGE(""Tulip installer can not be generated without Nullsoft NSIS."")

    ENDIF(NOT NSIS_PATH_EMPTY)

  ENDIF(WIN32)

  IF(APPLE)

    CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/bundlers/mac/mac_bundle.sh.in"" ""${CMAKE_CURRENT_BINARY_DIR}/bundlers/mac/mac_bundle.sh"" @ONLY)
    ADD_CUSTOM_TARGET(bundle
                      COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake
                      COMMAND sh mac_bundle.sh ${CMAKE_CURRENT_BINARY_DIR}
                      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bundlers/mac)

  ENDIF(APPLE)

  IF(LINUX)
    CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/bundlers/linux/make_appimage_bundle.sh.in"" ""${CMAKE_CURRENT_BINARY_DIR}/bundlers/linux/make_appimage_bundle.sh"" @ONLY)
  ENDIF(LINUX)

ELSE(NOT TULIP_BUILD_CORE_ONLY)

  IF(LINUX)
  # generate script to make a tar archive of minimal set of tulip core files
    SET(make_tar_file ${PROJECT_BINARY_DIR}/tar-tulip-${TulipVersion}-corefiles.sh)
    EXECUTE_PROCESS(COMMAND rm ${make_tar_file} OUTPUT_QUIET ERROR_QUIET)
    EXECUTE_PROCESS(COMMAND echo ""#!/bin/sh
if [ $# -eq 0 ]; then
TAR_FILE=${PROJECT_BINARY_DIR}/tulip-${TulipVersion}-corefiles.tar.gz
else
TAR_FILE=$1
fi
cd ${PROJECT_SOURCE_DIR}
tar zcvf \${TAR_FILE} $ENV{CORE_FILES}
echo archive \${TAR_FILE} successfully generated"" OUTPUT_FILE ${make_tar_file})

    MESSAGE(STATUS ""${make_tar_file} successfully generated"")
  ENDIF(LINUX)

ENDIF(NOT TULIP_BUILD_CORE_ONLY)
",3.1,3.1
39868,KhronosGroup,Vulkan-Tools,False,False,False,False,False,127,C,2020-05-14 19:37:01+00:00,2018-05-03 20:00:01+00:00,114,7129,"# ~~~
# Copyright (c) 2014-2018 Valve Corporation
# Copyright (c) 2014-2018 LunarG, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ~~~

# CMake project initialization ---------------------------------------------------------------------------------------------------
# This section contains pre-project() initialization, and ends with the project() command.

cmake_minimum_required(VERSION 3.10.2)

# Apple: Must be set before enable_language() or project() as it may influence configuration of the toolchain and flags.
set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.12"" CACHE STRING ""Minimum OS X deployment version"")

project(Vulkan-Tools)

# find_package(), include() and global project settings --------------------------------------------------------------------------

find_package(PythonInterp 3 QUIET)

# User-interface declarations ----------------------------------------------------------------------------------------------------
# This section contains variables that affect development GUIs (e.g. CMake GUI and IDEs), such as option(), folders, and variables
# with the CACHE property.

# Enable beta Vulkan extensions
add_definitions(-DVK_ENABLE_BETA_EXTENSIONS)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

option(BUILD_CUBE ""Build cube"" ON)
option(BUILD_VULKANINFO ""Build vulkaninfo"" ON)
option(BUILD_ICD ""Build icd"" ON)
# Installing the Mock ICD to system directories is probably not desired since this ICD is not a very complete implementation.
# Require the user to ask that it be installed if they really want it.
option(INSTALL_ICD ""Install icd"" OFF)

# Enable IDE GUI folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
# ""Helper"" targets that don't have interesting source code should set their FOLDER property to this
set(TOOLS_HELPER_FOLDER ""Helper Targets"")

option(USE_CCACHE ""Use ccache"" OFF)
if(USE_CCACHE)
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    endif()
endif()

# ~~~
# Find Vulkan Headers and Loader
# Search order:
#  User-supplied CMAKE_PREFIX_PATH containing paths to the header and/or loader install dirs
#  CMake options VULKAN_HEADERS_INSTALL_DIR and/or VULKAN_LOADER_INSTALL_DIR
#  Env vars VULKAN_HEADERS_INSTALL_DIR and/or VULKAN_LOADER_INSTALL_DIR
#  If on MacOS
#   CMake option MOTLENVK_REPO_ROOT
#   Env vars MOLTENVK_REPO_ROOT
#  Fallback to FindVulkan operation using SDK install or system installed components.
# ~~~
set(VULKAN_HEADERS_INSTALL_DIR ""HEADERS-NOTFOUND"" CACHE PATH ""Absolute path to a Vulkan-Headers install directory"")
set(VULKAN_LOADER_INSTALL_DIR ""LOADER-NOTFOUND"" CACHE PATH ""Absolute path to a Vulkan-Loader install directory"")
if(WIN32 AND ""${VULKAN_LOADER_INSTALL_DIR}"" STREQUAL ""LOADER-NOTFOUND"")
    if(CMAKE_CL_64)
        set(VULKAN_LOADER_INSTALL_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/external/x64"")
    else()
        set(VULKAN_LOADER_INSTALL_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/external/x86"")
    endif()
endif()
set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH};${VULKAN_HEADERS_INSTALL_DIR};${VULKAN_LOADER_INSTALL_DIR};
    $ENV{VULKAN_HEADERS_INSTALL_DIR};$ENV{VULKAN_LOADER_INSTALL_DIR})

if(APPLE)
    set(MOLTENVK_REPO_ROOT ""MOLTENVK-NOTFOUND"" CACHE PATH ""Absolute path to a MoltenVK repo directory"")
    if(NOT MOLTENVK_REPO_ROOT AND NOT DEFINED ENV{MOLTENVK_REPO_ROOT})
        message(FATAL_ERROR ""Must define location of MoltenVK repo -- see BUILD.md"")
    endif()

    if(NOT MOLTENVK_REPO_ROOT)
        set(MOLTENVK_REPO_ROOT $ENV{MOLTENVK_REPO_ROOT})
    endif()
    message(STATUS ""Using MoltenVK repo location at ${MOLTENVK_REPO_ROOT}"")
endif()
message(STATUS ""Using find_package to locate Vulkan"")
find_package(Vulkan)
find_package(VulkanHeaders)
get_filename_component(Vulkan_LIBRARY_DIR ${Vulkan_LIBRARY} DIRECTORY)
message(STATUS ""Vulkan FOUND = ${Vulkan_FOUND}"")
message(STATUS ""Vulkan Lib Dir = ${Vulkan_LIBRARY_DIR}"")
message(STATUS ""Vulkan Lib = ${Vulkan_LIBRARY}"")
message(STATUS ""Vulkan Headers Include = ${VulkanHeaders_INCLUDE_DIR}"")
message(STATUS ""Vulkan Headers Registry = ${VulkanRegistry_DIR}"")

include(GNUInstallDirs)

if(WIN32 AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    # Windows: if install locations not set by user, set install prefix to ""<build_dir>\install"".
    set(CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE PATH ""default install path"" FORCE)
endif()

# uninstall target
if(NOT TARGET uninstall)
    configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
                   ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
                   IMMEDIATE
                   @ONLY)

    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
    set_target_properties(uninstall PROPERTIES FOLDER ${TOOLS_HELPER_FOLDER})
endif()

if(APPLE)
    # CMake versions 3 or later need CMAKE_MACOSX_RPATH defined. This avoids the CMP0042 policy message.
    set(CMAKE_MACOSX_RPATH 1)
endif()

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES ""Clang"")
    set(COMMON_COMPILE_FLAGS ""-Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers"")
    set(COMMON_COMPILE_FLAGS ""${COMMON_COMPILE_FLAGS} -fno-strict-aliasing -fno-builtin-memcmp"")

    # For GCC version 7.1 or greater, we need to disable the implicit fallthrough warning since there's no consistent way to satisfy
    # all compilers until they all accept the C++17 standard
    if(CMAKE_COMPILER_IS_GNUCC AND NOT (CMAKE_CXX_COMPILER_VERSION LESS 7.1))
        set(COMMON_COMPILE_FLAGS ""${COMMON_COMPILE_FLAGS} -Wimplicit-fallthrough=0"")
    endif()

    if(APPLE)
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${COMMON_COMPILE_FLAGS}"")
    else()
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=c99 ${COMMON_COMPILE_FLAGS}"")
    endif()
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${COMMON_COMPILE_FLAGS} -std=c++11 -fno-rtti"")
    if(UNIX)
        set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fvisibility=hidden"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden"")
    endif()
endif()

# Optional codegen target
if(PYTHONINTERP_FOUND)
    add_custom_target(VulkanTools_generated_source
                      COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/generate_source.py
                              ${VulkanRegistry_DIR} --incremental
                      )
else()
    message(""WARNING: VulkanTools_generated_source target requires python 3"")
endif()

if(APPLE)
    include(mac_common.cmake)
endif()

if(BUILD_CUBE)
    add_subdirectory(cube)
endif()

if(BUILD_VULKANINFO)
    add_subdirectory(vulkaninfo)
endif()

if(BUILD_ICD)
    add_subdirectory(icd)
endif()
",3.10.2,3.1
39899,gabyx,ExecutionGraph,False,False,False,False,False,4,C++,2020-05-12 21:24:11+00:00,2017-03-04 12:51:13+00:00,24,838,"#The CMake Minimum version that is required.
cmake_minimum_required(VERSION 3.10)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/"" ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/external"")
message(STATUS ""Module path is now set to: "" ${CMAKE_MODULE_PATH} )

# Define the Project ===============================================
set(ExecutionGraphProjectName ""ExecutionGraph"")
message(STATUS ""Project name is: "" ${ExecutionGraphProjectName})
project(${ExecutionGraphProjectName})
enable_language(CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON) # Needed by VS Code for Intellisense

if(OS_MACOSX)
    if(NOT ""${CMAKE_OSX_SYSROOT}"" )
        message(FATAL_ERROR ""OSX_SYSROOT needs to be defined!"")
    endif()
endif()

#Optional Stuff ========================================================
mark_as_advanced( CMAKE_DEBUG_POSTFIX )
set(CMAKE_DEBUG_POSTFIX ""-dbg"" CACHE STRING ""Debug postfix for library/executable"")

mark_as_advanced(ExecutionGraph_USE_LEAK_SANITIZER)
set(ExecutionGraph_USE_LEAK_SANITIZER OFF CACHE BOOL ""Use the leak sanitizer!"" )
mark_as_advanced(ExecutionGraph_USE_ADDRESS_SANITIZER)
set(ExecutionGraph_USE_ADDRESS_SANITIZER ON CACHE BOOL ""Use the address sanitizer!"" )

mark_as_advanced(ExecutionGraph_BUILD_LIBRARY)
set(ExecutionGraph_BUILD_LIBRARY ON CACHE BOOL ""Build a shared library"")

mark_as_advanced(ExecutionGraph_BUILD_TESTS)
set(ExecutionGraph_BUILD_TESTS ON CACHE BOOL ""Build the tests"")

mark_as_advanced(ExecutionGraph_BUILD_BENCHMARKS)
set(ExecutionGraph_BUILD_BENCHMARKS OFF CACHE BOOL ""Build the benchmarks"")

mark_as_advanced(ExecutionGraph_BUILD_EXAMPLE)
set(ExecutionGraph_BUILD_EXAMPLE OFF CACHE BOOL ""Build the example, the library is automatically built if this is true"")

mark_as_advanced(ExecutionGraph_BUILD_GUI)
set(ExecutionGraph_BUILD_GUI ON CACHE BOOL ""Build Graphical User Interface for the Execution Graph"")
set(ExecutionGraph_USE_CEF_DSYM_FILE ON CACHE BOOL ""Use the CEF Debug Symbols"")

mark_as_advanced( ExecutionGraph_FORCE_MSGLOG_LEVEL)
set(ExecutionGraph_FORCE_MSGLOG_LEVEL ""DEBUG"" CACHE STRING ""Force the message log level (TRACE, DEBUG, INFO, WARN, ERROR, FATAL)"")

mark_as_advanced(ExecutionGraph_THROW_IF_BAD_SOCKET_CASTS)
set(ExecutionGraph_THROW_IF_BAD_SOCKET_CASTS ON CACHE BOOL ""Force an exception if a bad socket cast happens! (if false, the exception is thrown only in Debug mode!)"")

#mark_as_advanced( ExecutionGraph_USE_OPENMP)
#set(ExecutionGraph_USE_OPENMP ON CACHE BOOL ""Try to use OpenMp for parallel speedup"")

set(ExecutionGraph_EXTERNAL_BUILD_DIR ""${CMAKE_BINARY_DIR}/external"" CACHE STRING ""Folder where all external shit is build!"")
set(ExecutionGraph_EXTERNAL_INSTALL_DIR ""${ExecutionGraph_EXTERNAL_BUILD_DIR}/install"")
#=======================================================================

# Load print macros
include(PrintMacros)
# Load important modules
include(FirstCMakeRun)
# Speed up the build
include(cotire) 

# Define Install Directories
# Install stuff (default location is not some where on the system! for safty reasons)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX ""${CMAKE_BINARY_DIR}/install"" CACHE STRING ""Install prefix (e.g. /usr/local/)"" FORCE)
endif()
if(UNIX)
    include(GNUInstallDirs)
    set(ExecutionGraph_INC_INSTALL_DIR ""${CMAKE_INSTALL_INCDIR}"") 
    set(ExecutionGraph_RUNTIME_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"") 
    set(ExecutionGraph_LIBRARY_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")
    set(ExecutionGraph_ARCHIVE_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")
    set(ExecutionGraph_FRAMEWORK_INSTALL_DIR ""${CMAKE_INSTALL_LIBDIR}"")

    set(ExecutionGraph_INSTALL_FULL_LIBDIR ""${CMAKE_INSTALL_FULL_LIBDIR}"")

    set(ExecutionGraph_CMAKE_CONFIG_INSTALL_DIR ""${CMAKE_INSTALL_DATADIR}/executionGraph/cmake"")
    set(ExecutionGraph_ADDITIONAL_FILES_INSTALL_DIR ""${CMAKE_INSTALL_DATADIR}/executionGraph"")
elseif(WINDOWS)
    set(ExecutionGraph_INC_INSTALL_DIR ""include"") 
    set(ExecutionGraph_RUNTIME_INSTALL_DIR ""bin"") 
    set(ExecutionGraph_LIBRARY_INSTALL_DIR ""bin"")
    set(ExecutionGraph_ARCHIVE_INSTALL_DIR ""lib"")
    set(ExecutionGraph_FRAMEWORK_INSTALL_DIR ""bin"")

    set(ExecutionGraph_CMAKE_CONFIG_INSTALL_DIR ""cmake"")
    set(ExecutionGraph_ADDITIONAL_FILES_INSTALL_DIR ""./"")
else()
	message(FATAL_ERROR ""Could not set install folders for this platform!"")
endif()

# set the rpath for executables
set(CMAKE_SKIP_BUILD_RPATH OFF)            # use, i.e. don't skip the full RPATH for the build tree
set(CMAKE_BUILD_WITH_INSTALL_RPATH OFF)    # when building, don't use the install RPATH already (but later on when installing)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF) # NO automatic rpath for INSTALL
if(APPLE)
  set(MACOSX_RPATH ON CACHE STRING ""Set this to off if you dont want @rpath in install names"") # uses a install name @rpath/... for libraries
elseif(UNIX)
elseif(WINDOWS)
endif()

# Handle superbuild first ===============
option (USE_SUPERBUILD ""Whether or not a superbuild should be invoked"" ON)
if (USE_SUPERBUILD)
  project (SUPERBUILD NONE)
  # execute the superbuild (this script will be invoked again without the
  # USE_SUPERBUILD option this time)
  include (SuperBuild)
  message(""SuperBuild configured! -> exit..."")
  return()                      # stop processing this file further
endif()
# Set the superbuild off into the cache! super build should only run once!
set(USE_SUPERBUILD OFF CACHE STRING ""If a superbuild should be made (building all dependencies)"" FORCE)

message(STATUS "" ================================================================="")
message(STATUS ""                   NORMAL BUILD CONFIGURE [START]                 "")
message(STATUS "" ================================================================="")

set(ExecutionGraph_BINARY_DIR ${PROJECT_BINARY_DIR})
set(ExecutionGraph_ROOT_DIR   ${PROJECT_SOURCE_DIR})

# use CCACHE if possible
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
endif(CCACHE_FOUND)

message(""Default Compiler Flags: '${CMAKE_CXX_FLAGS}' | '${CMAKE_CXX_FLAGS_DEBUG}' | '${CMAKE_CXX_FLAGS_RELEASE}'"")
message(""Default Linker Flags: '${CMAKE_EXE_LINKER_FLAGS}' | '${CMAKE_SHARED_LINKER_FLAGS}' | '${CMAKE_STATIC_LINKER_FLAGS}'"")

# Dependencies =========================================================
add_library(ExecutionGraph::Core-Dependencies INTERFACE IMPORTED)
# Define Eigen
# find_package(Eigen3Lib REQUIRED)
# list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""eigenLib"")
# Try to find Meta 
find_package(MetaLib REQUIRED)
list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""metaLib"")

# Try to find the fmt library
find_package(FmtLib REQUIRED)
list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""fmtLib"")

# Try to find the RTTR library 
find_package(RTTRLib REQUIRED)
list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""rttrLib"")
# Try to find flatbuffer library
find_package(FlatBuffersLib REQUIRED)
list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""flatbuffersLib"")
# Try to find the crossguid library
find_package(CrossGUIDLib REQUIRED)
 list(APPEND ExecutionGraph_LINK_TARGETS_CORE_DEP ""crossguidLib"")

set_target_properties(ExecutionGraph::Core-Dependencies PROPERTIES INTERFACE_LINK_LIBRARIES ""${ExecutionGraph_LINK_TARGETS_CORE_DEP}"")

if(${ExecutionGraph_BUILD_GUI})
    add_library(ExecutionGraphGui::Core-Dependencies INTERFACE IMPORTED)
    
    # Try to find the Argumentparser
    find_package(ArgsLib REQUIRED)
    list(APPEND ExecutionGraphGui_LINK_TARGETS_CORE_DEP ""argsLib"")

    # Try to find the spdlog
    find_package(SpdLogLib REQUIRED)
    list(APPEND ExecutionGraphGui_LINK_TARGETS_CORE_DEP ""spdlogLib"")

    # Try to find the memory library
    find_package(MemoryLib REQUIRED)
    list(APPEND ExecutionGraphGui_LINK_TARGETS_CORE_DEP ""memoryLib"")

    find_package(BoostBeastLib REQUIRED)
    list(APPEND ExecutionGraphGui_LINK_TARGETS_CORE_DEP ""boostBeastLib"")

    set_target_properties(ExecutionGraphGui::Core-Dependencies PROPERTIES
                          INTERFACE_LINK_LIBRARIES ""${ExecutionGraphGui_LINK_TARGETS_CORE_DEP}"")
endif()


if(ExecutionGraph_USE_OPENMP)

    include(ProcessorCount)
    ProcessorCount(NPROCESSES)

    find_package(OpenMP)
    if(OpenMP_FOUND)
        set(ExecutionGraph_OPENMP_SUPPORT ON)

        mark_as_advanced( ExecutionGraph_OPENMP_USE_NTHREADS)
        set(ExecutionGraph_OPENMP_USE_NTHREADS OFF CACHE BOOL ""If the number of threads should be fixed, otherwise determined at runtime!"")

        if(ExecutionGraph_OPENMP_USE_NTHREADS)
            set(ExecutionGraph_OPENMP_NTHREADS ${NPROCESSES} CACHE STRING ""The number of threads to use."")
            mark_as_advanced( ExecutionGraph_OPENMP_NTHREADS )
        endif()

    else()
        set(ExecutionGraph_OPENMP_SUPPORT OFF)
    endif()
endif()
# ======================================================================

# Get Version
include(GetVersion)
get_version_ExecutionGraph()

# Define all ExecutionGraph Source files
include(DefineExecutionGraphSources)
set(ExecutionGraph_INCLUDE_DIR ""${PROJECT_SOURCE_DIR}/include/ExecutionGraph"")
set(ExecutionGraph_EXTERNAL_INCLUDE_DIRS ""${PROJECT_SOURCE_DIR}/external/"")

#Include all relevant sources
include_all_source_ExecutionGraph(ExecutionGraph_SRC
                                  ExecutionGraph_INC
                                  ExecutionGraph_INC_DIRS
                                  ExecutionGraph_DEPENDING_TARGETS
                                  ${PROJECT_SOURCE_DIR} ${ExecutionGraph_BINARY_DIR} )

set(ExecutionGraph_LICENSE_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set(ExecutionGraph_README_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")

if( ${ExecutionGraph_BUILD_EXAMPLE} OR ${ExecutionGraph_BUILD_TESTS} OR ${ExecutionGraph_BUILD_GUI} OR ${ExecutionGraph_BUILD_BENCHMARKS})
  set(ExecutionGraph_BUILD_LIBRARY On CACHE BOOL ""Build a shared library"" FORCE)
endif()

if(ExecutionGraph_BUILD_LIBRARY)
    add_subdirectory(lib)
endif()

if(ExecutionGraph_BUILD_TESTS)
    enable_testing()
    add_custom_target(build_and_test ${CMAKE_CTEST_COMMAND} -V)
    add_subdirectory(tests)
endif()

if(ExecutionGraph_BUILD_BENCHMARKS)
    enable_testing()
    add_custom_target(build_and_benchmark ${CMAKE_CTEST_COMMAND} -V)
    add_subdirectory(benchmarks)
endif()

if(ExecutionGraph_BUILD_EXAMPLE)
    add_subdirectory(examples)
endif()

if(ExecutionGraph_BUILD_GUI)
    add_subdirectory(gui)
endif()

message(STATUS ""================================================================="")
message(STATUS ""                   NORMAL BUILD CONFIGURE [DONE ]                "")
message(STATUS ""================================================================="")",3.10,3.1
39949,GM2Calc,GM2Calc,False,False,False,False,False,3,C++,2020-05-17 15:46:09+00:00,2015-08-04 10:23:59+00:00,3,936,"cmake_minimum_required(VERSION 3.1)

project(GM2Calc
  DESCRIPTION ""Calculation of the anomalous magnetic moment of the muon in the MSSM""
  LANGUAGES C CXX)

include(GNUInstallDirs)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED YES)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
  ${PROJECT_SOURCE_DIR}/cmake/Eigen
  ${PROJECT_SOURCE_DIR}/cmake/Mathematica)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

if(EXISTS ${PROJECT_BINARY_DIR}/conanbuildinfo.cmake)
  include(${PROJECT_BINARY_DIR}/conanbuildinfo.cmake)
  conan_basic_setup()
endif()

# determine GM2Calc version
file(
  STRINGS ""${PROJECT_SOURCE_DIR}/include/gm2calc/gm2_version.h"" _gm2calc_version_line
  REGEX ""^#define[ \t]+GM2CALC_VERSION[ \t]+\""([0-9.]+)\""$"")
string(REGEX REPLACE ""^#define[ \t]+GM2CALC_VERSION[ \t]+\""([0-9.]+)\""$"" ""\\1"" GM2Calc_VERSION ""${_gm2calc_version_line}"")

find_package(Boost 1.37.0 REQUIRED)
find_package(Eigen3 3.1 REQUIRED)
find_package(Mathematica COMPONENTS MathLink)

add_subdirectory(src)
add_subdirectory(examples)
add_subdirectory(doc)

if(EXISTS ""${PROJECT_SOURCE_DIR}/test"")
  enable_testing()
  add_subdirectory(test)
endif()

# install public headers
install(
  DIRECTORY ""${PROJECT_SOURCE_DIR}/include/gm2calc""
  DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}"")

# generate gm2calc.pc file for pkg-config
configure_file(
  ""${PROJECT_SOURCE_DIR}/cmake/gm2calc.pc.in""
  ""${PROJECT_BINARY_DIR}/gm2calc.pc""
  @ONLY)

# install gm2calc.pc file
install(
  FILES ""${PROJECT_BINARY_DIR}/gm2calc.pc""
  DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig"")
",3.1,3.1
40078,qgis,QGIS,False,False,False,False,False,379,C++,2020-05-18 00:03:23+00:00,2011-05-02 08:06:26+00:00,3602,62954,"#############################################################
# CMake settings
CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)
SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_AUTORCC ON)
# set path to additional CMake modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
# POLICIES
CMAKE_POLICY (SET CMP0048 NEW)
CMAKE_POLICY (SET CMP0053 NEW)
CMAKE_POLICY (SET CMP0071 NEW)

# don't relink it only the shared object changes
SET(CMAKE_LINK_DEPENDS_NO_SHARED ON)

#############################################################
# Project and version
SET(CPACK_PACKAGE_VERSION_MAJOR ""3"")
SET(CPACK_PACKAGE_VERSION_MINOR ""13"")
SET(CPACK_PACKAGE_VERSION_PATCH ""0"")
SET(COMPLETE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
SET(RELEASE_NAME ""Master"")
PROJECT(qgis VERSION ${COMPLETE_VERSION})

IF (APPLE)
  SET(QGIS_APP_NAME ""QGIS"")
ELSE (APPLE)
  SET(QGIS_APP_NAME ""qgis"")
ENDIF (APPLE)

# Note the version no is Mmmpp for Major/minor/patch, 0-padded, thus '10100' for 1.1.0
MATH(EXPR QGIS_VERSION_INT ""${CPACK_PACKAGE_VERSION_MAJOR}*10000+${CPACK_PACKAGE_VERSION_MINOR}*100+${CPACK_PACKAGE_VERSION_PATCH}"")
MESSAGE(STATUS ""QGIS version: ${COMPLETE_VERSION} ${RELEASE_NAME} (${QGIS_VERSION_INT})"")

#############################################################
IF (APPLE)
  # QGIS custom dependencies package from qgis/QGIS-Mac-Packager
  # they can be downloaded from https://qgis.org/downloads/macos/qgis-deps
  # and extracted to /opt/QGIS/qgis-deps-<deps-version>/stage
  SET (QGIS_MAC_DEPS_DIR """" CACHE PATH ""Path to QGIS Mac custom dependencies directory"")

  # Setup LIB_DIR and CMAKE_PREFIX_PATH to help CMake's
  # find_packages to look for these libraries instead of system libraries
  IF ( QGIS_MAC_DEPS_DIR )
    SET(ENV{LIB_DIR} ${QGIS_MAC_DEPS_DIR})
    LIST(APPEND CMAKE_PREFIX_PATH ${QGIS_MAC_DEPS_DIR})
  ENDIF ( QGIS_MAC_DEPS_DIR )
ENDIF (APPLE)

#############################################################
# Configure OpenCL if available
SET(HAVE_OPENCL FALSE)
IF (${CMAKE_HOST_SYSTEM_NAME} MATCHES ""BSD$"")
  OPTION(USE_OPENCL ""Use OpenCL"" OFF)
ELSE (${CMAKE_HOST_SYSTEM_NAME} MATCHES ""BSD$"")
  OPTION(USE_OPENCL ""Use OpenCL"" ON)
ENDIF (${CMAKE_HOST_SYSTEM_NAME} MATCHES ""BSD$"")
IF (USE_OPENCL)
    FIND_PACKAGE(OpenCL)
    IF(${OpenCL_FOUND})
        SET(HAVE_OPENCL TRUE)
        # Fixup for standard FindOpenCL module not assigning proper framework headers directory
        IF (APPLE AND ""${OpenCL_INCLUDE_DIR}"" MATCHES ""OpenCL\\.framework/?$"")
            SET(OpenCL_INCLUDE_DIR ""${OpenCL_INCLUDE_DIR}/Headers"" CACHE PATH """" FORCE)
            SET(OpenCL_INCLUDE_DIRS ${OpenCL_INCLUDE_DIR})
        ENDIF ()
        FIND_PACKAGE(OpenCLhpp)
        IF(NOT OPENCL_HPP_FOUND)
            # Use internal headers copied from OpenCL-CLHPP project
            SET(OPENCL_HPP_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/external/opencl-clhpp/include CACHE PATH """" FORCE)
            MESSAGE(STATUS ""Couldn't find OpenCL C++ headers, using internal: ${OPENCL_HPP_INCLUDE_DIR}"")
        ENDIF(NOT OPENCL_HPP_FOUND)
        SET(OpenCL_INCLUDE_DIRS ${OpenCL_INCLUDE_DIRS} ${OPENCL_HPP_INCLUDE_DIR})
    ELSE(${OpenCL_FOUND})
        MESSAGE(STATUS ""Couldn't find OpenCL: support DISABLED"")
    ENDIF(${OpenCL_FOUND})
ENDIF(USE_OPENCL)

# Configure CCache if available
IF(NOT MSVC)
  option(USE_CCACHE ""Use ccache"" ON)
  if (USE_CCACHE)
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    endif(CCACHE_FOUND)
  endif(USE_CCACHE)
endif(NOT MSVC)

IF (IOS)
    SET (DEFAULT_FORCE_STATIC_LIBS TRUE)
    SET (DEFAULT_FORCE_STATIC_PROVIDERS TRUE)
ELSE (IOS)
    SET (DEFAULT_FORCE_STATIC_LIBS FALSE)
    SET (DEFAULT_FORCE_STATIC_PROVIDERS FALSE)
ENDIF (IOS)

SET (FORCE_STATIC_LIBS ${DEFAULT_FORCE_STATIC_LIBS} CACHE BOOL ""Determines whether libraries should be static only"")
MARK_AS_ADVANCED(FORCE_STATIC_LIBS)
IF (FORCE_STATIC_LIBS)
  SET (LIBRARY_TYPE STATIC)
ELSE (FORCE_STATIC_LIBS)
  SET (LIBRARY_TYPE SHARED)
ENDIF (FORCE_STATIC_LIBS)

SET (FORCE_STATIC_PROVIDERS ${DEFAULT_FORCE_STATIC_PROVIDERS} CACHE BOOL ""Determines whether data providers should be static only"")
MARK_AS_ADVANCED(FORCE_STATIC_PROVIDERS)
IF (FORCE_STATIC_PROVIDERS)
  # following variable is used in qgsconfig.h
  SET (HAVE_STATIC_PROVIDERS TRUE)
ENDIF (FORCE_STATIC_PROVIDERS)

# in generated makefiles use relative paths so the project dir is moveable
# Note commented out since it cause problems but it would be nice to resolve these and enable
#
# issue is caused by INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}) near the end of this file generating incorrect path
#SET (CMAKE_USE_RELATIVE_PATHS ON)

SET (WITH_CORE TRUE CACHE BOOL ""Determines whether QGIS core should be built."")
MARK_AS_ADVANCED(WITH_CORE)

IF(WITH_CORE)
  # Only GRASS 7 is currently supported but we keep dual version support in cmake for possible future switch to GRASS 8.
  # Try to configure and build GRASS plugin by default
  FOREACH (GRASS_SEARCH_VERSION 7)
    # Legacy note:
    # For GRASS 6 there were used cached variables without version suffix so that existing caches didn't have to be reconfigured.
    # Cached variables were: WITH_GRASS, WITH_GRASS7, GRASS_PREFIX, GRASS_PREFIX7, GRASS_INCLUDE_DIR, GRASS_INCLUDE_DIR7
    # Everywhere else each variable has version major appended.
    # Normal variables were: GRASS_FOUND6, GRASS_FOUND7, GRASS_MAJOR_VERSION6, GRASS_MAJOR_VERSION7, etc.
    # In addition there is also GRASS_FOUND, which is TRUE if at least one version of GRASS was found
    SET (GRASS_CACHE_VERSION ${GRASS_SEARCH_VERSION})
    SET (WITH_GRASS${GRASS_CACHE_VERSION} TRUE CACHE BOOL ""Determines whether GRASS ${GRASS_SEARCH_VERSION} plugin should be built"")
    IF (WITH_GRASS${GRASS_CACHE_VERSION})
      FIND_PACKAGE(GRASS ${GRASS_SEARCH_VERSION})
      SET (GRASS_PREFIX${GRASS_CACHE_VERSION} ${GRASS_PREFIX${GRASS_SEARCH_VERSION}} CACHE PATH ""Path to GRASS ${GRASS_SEARCH_VERSION} base directory"")
    ENDIF (WITH_GRASS${GRASS_CACHE_VERSION})
  ENDFOREACH (GRASS_SEARCH_VERSION)

  SET (WITH_GUI TRUE CACHE BOOL ""Determines whether QGIS GUI library (and everything built on top of it) should be built"")

  SET (WITH_ANALYSIS TRUE CACHE BOOL ""Determines whether QGIS analysis library should be built"")

  SET (WITH_DESKTOP TRUE CACHE BOOL ""Determines whether QGIS desktop should be built"")

  SET (WITH_3D FALSE CACHE BOOL ""Determines whether QGIS 3D library should be built"")

  SET (WITH_QUICK FALSE CACHE BOOL ""Determines whether QGIS Quick library should be built"")

  SET (WITH_QGIS_PROCESS TRUE CACHE BOOL ""Determines whether the standalone \""qgis_process\"" tool should be built"")

  # try to configure and build python bindings by default
  SET (WITH_BINDINGS TRUE CACHE BOOL ""Determines whether python bindings should be built"")
  IF (WITH_BINDINGS)
    # By default bindings will be installed only to QGIS directory
    # Someone might want to install it to python site-packages directory
    # as otherwise user has to use PYTHONPATH environment variable to add
    # QGIS bindings to package search path
    SET (BINDINGS_GLOBAL_INSTALL FALSE CACHE BOOL ""Install bindings to global python directory? (might need root)"")
    SET (SIP_GLOBAL_INSTALL FALSE CACHE BOOL ""Install sip source files to system sip directory? (might need root)"")
    SET (WITH_STAGED_PLUGINS TRUE CACHE BOOL ""Stage-install core Python plugins to run from build directory? (utilities and console are always staged)"")
    SET (WITH_PY_COMPILE FALSE CACHE BOOL ""Determines whether Python modules in staged or installed locations are byte-compiled"")
    # concatenate QScintilla2 API files
    IF (WITH_GUI)
      SET (WITH_QSCIAPI TRUE CACHE BOOL ""Whether to generate PyQGIS QScintilla2 API file. (For devs) run 'make qsci-pap-src' in between QGIS build and install to regenerate .pap file in source tree for console auto-completion."")
      # keep casual users from updating their source tree via WITH_QSCIAPI
      MARK_AS_ADVANCED (WITH_QSCIAPI)
    ENDIF (WITH_GUI)
    ADD_DEFINITIONS(-DWITH_BINDINGS)
  ENDIF (WITH_BINDINGS)

  # server disabled default because it needs FastCGI (which is optional dependency)
  SET (WITH_SERVER FALSE CACHE BOOL ""Determines whether QGIS server should be built"")
  IF(WITH_SERVER)
    SET (SERVER_SKIP_ECW FALSE CACHE BOOL ""Determines whether QGIS server should disable ECW (ECW in server apps requires a special license)"")

    SET (WITH_SERVER_PLUGINS ${WITH_BINDINGS} CACHE BOOL ""Determines whether QGIS server support for python plugins should be built"")
    IF(WITH_SERVER_PLUGINS AND NOT WITH_BINDINGS)
      MESSAGE(FATAL_ERROR ""Server plugins are not supported without python bindings. Enable WITH_BINDINGS or disable WITH_SERVER_PLUGINS"")
    ENDIF(WITH_SERVER_PLUGINS AND NOT WITH_BINDINGS)
    IF(WITH_SERVER_PLUGINS)
      SET(HAVE_SERVER_PYTHON_PLUGINS TRUE)
    ENDIF(WITH_SERVER_PLUGINS)
  ENDIF(WITH_SERVER)

  # Custom widgets
  SET (WITH_CUSTOM_WIDGETS FALSE CACHE BOOL ""Determines whether QGIS custom widgets for Qt Designer should be built"")

  IF (NOT WITH_GUI)
    SET (HAVE_GUI FALSE)    # used in qgsconfig.h
    # force value of some options
    IF(WITH_DESKTOP)
      MESSAGE(FATAL_ERROR ""Desktop cannot be built without gui. Enable WITH_GUI or disable WITH_DESKTOP."")
    ENDIF(WITH_DESKTOP)
    IF(WITH_CUSTOM_WIDGETS)
      MESSAGE(FATAL_ERROR ""Custom widgets cannot be built without gui. Enable WITH_GUI or disable WITH_CUSTOM_WIDGETS."")
    ENDIF(WITH_CUSTOM_WIDGETS)
  ELSE ()
    SET (HAVE_GUI TRUE)     # used in qgsconfig.h
  ENDIF()

  IF ( WITH_DESKTOP AND NOT WITH_ANALYSIS )
    MESSAGE(FATAL_ERROR ""Desktop cannot be built without analysis"")
  ENDIF()

  IF ( WITH_QGIS_PROCESS AND NOT WITH_ANALYSIS )
    MESSAGE(FATAL_ERROR ""Process tool cannot be built without analysis"")
  ENDIF()

  IF ( WITH_DESKTOP )
    # The qgis_desktop target is meant to build a minimal but complete running QGIS during development
    # This should help to reduce compile time while still having a ""complete enough"" QGIS for most of the development
    ADD_CUSTOM_TARGET(qgis_desktop
      DEPENDS qgis qgispython pycore pygui pyanalysis postgresprovider staged-plugins pyplugin-installer resources svg doc icons
    )
  ENDIF ()

  # try to configure and build MDAL support
  SET (WITH_INTERNAL_MDAL TRUE CACHE BOOL ""Determines whether MDAL support should be built"")
  IF (NOT WITH_INTERNAL_MDAL)
    SET (MDAL_PREFIX """" CACHE PATH ""Path to MDAL base directory"")
  ENDIF (NOT WITH_INTERNAL_MDAL)

  # try to configure and build POSTGRESQL support
  SET (WITH_POSTGRESQL TRUE CACHE BOOL ""Determines whether POSTGRESQL support should be built"")
  IF (WITH_POSTGRESQL)
    SET (POSTGRESQL_PREFIX """" CACHE PATH ""Path to POSTGRESQL base directory"")
  ENDIF (WITH_POSTGRESQL)

  SET (WITH_QSPATIALITE FALSE CACHE BOOL ""Determines whether QSPATIALITE sql driver should be built"")

  SET (WITH_ORACLE FALSE CACHE BOOL ""Determines whether Oracle support should be built"")
  IF(WITH_ORACLE)
    SET(HAVE_ORACLE TRUE)
    SET(ORACLE_INCLUDEDIR """" CACHE STRING ""Path to OCI headers"")
    SET(ORACLE_LIBDIR """" CACHE STRING ""Path to OCI libraries"")
  ENDIF(WITH_ORACLE)

  #BUILD WITH QtMobility by default on android only. Other platform can force it
  IF (ANDROID)
      SET (DEFAULT_WITH_QTMOBILITY TRUE)
  ELSE (ANDROID)
      SET (DEFAULT_WITH_QTMOBILITY FALSE)
  ENDIF (ANDROID)
  SET (WITH_QTMOBILITY ${DEFAULT_WITH_QTMOBILITY} CACHE BOOL ""Determines if QtMobility related code should be build (for example internal GPS)"")

  SET (WITH_GEOREFERENCER TRUE CACHE BOOL ""Determines whether GeoReferencer plugin should be built"")

  SET (WITH_GLOBE FALSE CACHE BOOL ""Determines whether Globe plugin should be built"")
  IF (WITH_GLOBE)
    SET(QT_USE_QTOPENGL 1)
    FIND_PACKAGE(OSGEARTH REQUIRED)
    IF (OSGEARTHQT_LIBRARY)
      # following variable is used in qgsconfig.h
      SET(HAVE_OSGEARTHQT TRUE)
    ENDIF (OSGEARTHQT_LIBRARY)
  ENDIF (WITH_GLOBE)

  SET (WITH_THREAD_LOCAL TRUE CACHE BOOL ""Determines whether std::thread_local should be used"")
  MARK_AS_ADVANCED(WITH_THREAD_LOCAL)

  IF (MINGW OR CMAKE_SYSTEM_NAME STREQUAL ""OpenBSD"")
    # MingW has broken support for thread_local, so force disabling it
    # see
    # https://sourceforge.net/p/mingw-w64/bugs/445/
    # https://sourceforge.net/p/mingw-w64/bugs/527/
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80816

    # also OpenBSD has no thread_local support, see https://github.com/qgis/QGIS/issues/25248

  ELSE (MINGW OR CMAKE_SYSTEM_NAME STREQUAL ""OpenBSD"")
    IF (WITH_THREAD_LOCAL)
      SET (USE_THREAD_LOCAL TRUE)  # used in qgsconfig.h
    ENDIF (WITH_THREAD_LOCAL)
  ENDIF (MINGW OR CMAKE_SYSTEM_NAME STREQUAL ""OpenBSD"")

  # Compile flag. Make it possible to turn it off.
  SET (PEDANTIC TRUE CACHE BOOL ""Determines if we should compile in pedantic mode."")

  # whether coverage tests should be performed
  SET (ENABLE_COVERAGE FALSE CACHE BOOL ""Perform coverage tests?"")

  # whether coverage documentation should be generated
  SET (GENERATE_COVERAGE_DOCS FALSE CACHE BOOL ""Generate coverage docs (requires lcov)?"")

  # hide this variable because building of python bindings might fail
  # if set to other directory than expected
  MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)

  IF (MSVC AND CMAKE_GENERATOR MATCHES ""NMake"")
    # following variable is also used in qgsconfig.h
    SET (USING_NMAKE TRUE)
  ENDIF (MSVC AND CMAKE_GENERATOR MATCHES ""NMake"")

  IF (CMAKE_GENERATOR MATCHES ""Ninja"")
    # following variable is also used in qgsconfig.h
    SET (USING_NINJA TRUE)
  ENDIF (CMAKE_GENERATOR MATCHES ""Ninja"")

  #############################################################
  # check if lexer and parser are not missing
  # http://www.mail-archive.com/cmake@cmake.org/msg02861.html

  INCLUDE(Flex)

  FIND_FLEX()

  IF (NOT FLEX_EXECUTABLE)
    MESSAGE(FATAL_ERROR ""Couldn't find Flex"")
  ENDIF (NOT FLEX_EXECUTABLE)

  INCLUDE(Bison)

  FIND_BISON()

  IF (NOT BISON_EXECUTABLE)
    MESSAGE(FATAL_ERROR ""Couldn't find Bison"")
  ENDIF (NOT BISON_EXECUTABLE)

  #############################################################
  # search for dependencies

  IF(NOT WIN32 AND NOT ANDROID)
    INCLUDE(CheckFunctionExists)
    CHECK_FUNCTION_EXISTS(openpty OPENPTY_IN_LIBC)
    IF(NOT OPENPTY_IN_LIBC)
      SET(CMAKE_REQUIRED_INCLUDES util.h)
      SET(CMAKE_REQUIRED_LIBRARIES util)
      CHECK_FUNCTION_EXISTS(openpty NEED_LIBUTIL)
      IF(NEED_LIBUTIL)
        SET(OPENPTY_LIBRARY util)
      ELSE(NEED_LIBUTIL)
        MESSAGE (SEND_ERROR ""openpty not found!"")
      ENDIF(NEED_LIBUTIL)
    ENDIF(NOT OPENPTY_IN_LIBC)
  ENDIF(NOT WIN32 AND NOT ANDROID)

  # required
  FIND_PACKAGE(Proj)
  FIND_PACKAGE(GEOS)
  FIND_PACKAGE(GDAL)
  FIND_PACKAGE(Expat REQUIRED)
  FIND_PACKAGE(Spatialindex REQUIRED)
  IF (WITH_GUI)
    FIND_PACKAGE(Qwt REQUIRED)
  ENDIF (WITH_GUI)
  FIND_PACKAGE(LibZip REQUIRED)

  FIND_PACKAGE(Sqlite3)
  IF (NOT SQLITE3_FOUND)
    MESSAGE (SEND_ERROR ""sqlite3 dependency was not found!"")
  ENDIF (NOT SQLITE3_FOUND)

  FIND_PACKAGE(Protobuf REQUIRED)   # for decoding of vector tiles in MVT format
  MESSAGE(STATUS ""Found Protobuf: ${Protobuf_LIBRARIES}"")
  IF (NOT Protobuf_PROTOC_EXECUTABLE)
    MESSAGE (SEND_ERROR ""Protobuf library's 'protoc' tool was not found!"")
  ENDIF ()
  FIND_PACKAGE(ZLIB REQUIRED)       # for decompression of vector tiles in MBTiles file
  MESSAGE(STATUS ""Found zlib: ${ZLIB_LIBRARIES}"")

  # optional
  IF (WITH_POSTGRESQL)
    FIND_PACKAGE(Postgres) # PostgreSQL provider
  ENDIF (WITH_POSTGRESQL)

  IF (NOT WITH_INTERNAL_MDAL)
    FIND_PACKAGE(MDAL REQUIRED) # MDAL provider
  ENDIF (NOT WITH_INTERNAL_MDAL)

  FIND_PACKAGE(SpatiaLite REQUIRED)

  IF (NOT PROJ_FOUND OR NOT GEOS_FOUND OR NOT GDAL_FOUND)
    MESSAGE (SEND_ERROR ""Some dependencies were not found! Proj: ${PROJ_FOUND}, Geos: ${GEOS_FOUND}, GDAL: ${GDAL_FOUND}"")
  ENDIF (NOT PROJ_FOUND OR NOT GEOS_FOUND OR NOT GDAL_FOUND)

  IF (POSTGRES_FOUND)
    # following variable is used in qgsconfig.h
    SET (HAVE_POSTGRESQL TRUE)
  ENDIF (POSTGRES_FOUND)

  SET (WITH_QTWEBKIT TRUE CACHE BOOL ""Enable QtWebkit support"")
  IF (WITH_QTWEBKIT)
    ADD_DEFINITIONS(-DWITH_QTWEBKIT)
    MESSAGE(STATUS ""Qt WebKit support enabled"")
  ELSE (WITH_QTWEBKIT)
    MESSAGE(STATUS ""Qt WebKit support DISABLED."")
  ENDIF(WITH_QTWEBKIT)
  #############################################################
  # search for Qt5
  SET(QT_MIN_VERSION 5.9.0)

  # Use Qt5SerialPort optionally for GPS
  SET (WITH_QT5SERIALPORT TRUE CACHE BOOL ""Determines whether Qt5SerialPort should be tried for GPS positioning"")
  IF (WITH_QT5SERIALPORT)
      FIND_PACKAGE(Qt5SerialPort REQUIRED)
      # following variable is used in qgsconfig.h
      SET (HAVE_QT5SERIALPORT TRUE)
  ENDIF(WITH_QT5SERIALPORT)

  FIND_PACKAGE(Qt5Core QUIET)
  FIND_PACKAGE(Qt5Gui REQUIRED)
  FIND_PACKAGE(Qt5Widgets REQUIRED)
  FIND_PACKAGE(Qt5Network REQUIRED)
  FIND_PACKAGE(Qt5Xml REQUIRED)
  FIND_PACKAGE(Qt5Svg REQUIRED)
  FIND_PACKAGE(Qt5Concurrent REQUIRED)
  IF (NOT IOS)
    FIND_PACKAGE(Qt5PrintSupport REQUIRED)
  ELSE(NOT IOS)
    ADD_DEFINITIONS(-DQT_NO_PRINTER)
  ENDIF(NOT IOS)
  FIND_PACKAGE(Qt5Positioning)
  IF (WITH_QTWEBKIT)
    FIND_PACKAGE(Qt5WebKit REQUIRED)
    FIND_PACKAGE(Qt5WebKitWidgets REQUIRED)
  ENDIF(WITH_QTWEBKIT)
  FIND_PACKAGE(Qt5Test REQUIRED)
  FIND_PACKAGE(Qt5UiTools REQUIRED)
  FIND_PACKAGE(Qt5Sql REQUIRED)
  IF (WITH_3D)
    FIND_PACKAGE(Qt53DCore REQUIRED)
    FIND_PACKAGE(Qt53DRender REQUIRED)
    FIND_PACKAGE(Qt53DInput REQUIRED)
    FIND_PACKAGE(Qt53DLogic REQUIRED)
    FIND_PACKAGE(Qt53DExtras REQUIRED)
    SET(HAVE_3D TRUE)  # used in qgsconfig.h
  ENDIF (WITH_3D)
  IF (APPLE)
    FIND_PACKAGE(Qt5MacExtras REQUIRED)
  ENDIF (APPLE)

  # get the Qt plugins directory
  GET_TARGET_PROPERTY(QMAKE_EXECUTABLE Qt5::qmake LOCATION)
  EXEC_PROGRAM(${QMAKE_EXECUTABLE} ARGS ""-query QT_INSTALL_PLUGINS"" RETURN_VALUE return_code OUTPUT_VARIABLE QT_PLUGINS_DIR )

  MESSAGE(STATUS ""Found Qt version: ${Qt5Core_VERSION_STRING}"")
  IF (WITH_QUICK)
    FIND_PACKAGE(Qt5Qml REQUIRED)
    FIND_PACKAGE(Qt5Quick REQUIRED)
    IF(${CMAKE_SYSTEM_NAME} MATCHES ""Android"")
        FIND_PACKAGE(Qt5AndroidExtras)
    ELSE(${CMAKE_SYSTEM_NAME} MATCHES ""Android"")
        FIND_PACKAGE(QtQmlTools)
    ENDIF(${CMAKE_SYSTEM_NAME} MATCHES ""Android"")

    # following variable is used in qgsconfig.h
    SET (HAVE_QUICK TRUE)
  ENDIF (WITH_QUICK)

  IF(WITH_QTWEBKIT)
    SET(OPTIONAL_QTWEBKIT ${Qt5WebKitWidgets_LIBRARIES})
  ENDIF(WITH_QTWEBKIT)

  IF (WITH_QTMOBILITY)
    FIND_PACKAGE(QtMobility 1.1.0)
  ENDIF (WITH_QTMOBILITY)

  # search for QScintilla2 (C++ lib)
  IF (WITH_GUI)
    FIND_PACKAGE(QScintilla REQUIRED)
  ENDIF (WITH_GUI)

  # Password helper
  FIND_PACKAGE(QtKeychain REQUIRED)
  # Master password hash and authentication encryption
  FIND_PACKAGE(QCA REQUIRED)
  # Check for runtime dependency of qca-ossl plugin
  # REQUIRED if unit tests are to be run from build directory
  IF(NOT MSVC)
  include(QCAMacros)
  FIND_QCAOSSL_PLUGIN_CPP(ENABLE_TESTS)
  ENDIF(NOT MSVC)

  IF (APPLE)
    # Libtasn1 is for DER-encoded PKI ASN.1 parsing/extracting workarounds
    FIND_PACKAGE(Libtasn1 REQUIRED)
  ENDIF (APPLE)

  IF (SUPPRESS_QT_WARNINGS)
    # Newer versions of UseQt4.cmake include Qt with -isystem automatically
    # This can be used to force this behavior on older systems
    # Can be removed as soon as Travis-CI updates from precise
    INCLUDE_DIRECTORIES(SYSTEM ${QT_INCLUDE_DIR})
  ENDIF (SUPPRESS_QT_WARNINGS)

  # Disable automatic conversion from QString to ASCII 8-bit strings (char *)
  # (Keeps code compatible with Qt/Mac/64bit)
  ADD_DEFINITIONS(-DQT_NO_CAST_TO_ASCII)
ENDIF(WITH_CORE)

SET(CMAKE_AUTOMOC ON)

# build our version of astyle
SET (WITH_ASTYLE FALSE CACHE BOOL ""If you plan to contribute you should reindent with scripts/prepare_commit.sh (using 'our' astyle)"")

# QML
SET(QML_IMPORT_PATH ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"" CACHE PATH ""QML directory for QML autocomplete"")

#############################################################
# testing
# whether unit tests should be build
SET (ENABLE_TESTS TRUE CACHE BOOL ""Build unit tests?"")
IF (ENABLE_TESTS)
SET( QT_USE_QTTEST  TRUE )
ENABLE_TESTING()
# Adds some testing specific build targets e.g. make Experimental
INCLUDE(Dart)
# Additional test configuration options e.g. max upload size of test report
CONFIGURE_FILE(
  ""${CMAKE_SOURCE_DIR}/cmake_templates/CTestCustom.cmake.in""
  ""${CMAKE_BINARY_DIR}/CTestCustom.cmake""
  IMMEDIATE @ONLY)
# For server side testing we have no X, we can use xvfb as a fake x
# sudo apt-get install xvfb
add_custom_target(check COMMAND xvfb-run --server-args=-screen\ 0\ 1024x768x24 ctest --output-on-failure)
ENDIF(ENABLE_TESTS)

IF (WITH_CORE)
# ModelTest
  SET(ENABLE_MODELTEST FALSE CACHE BOOL ""Enable QT ModelTest (not for production)"")
ENDIF (WITH_CORE)

#############################################################
# enable use of c++11 features where available
# full c++11 support in clang 3.3+: http://clang.llvm.org/cxx_status.html
# for Mac, this is probably Apple LLVM 4.2 (based on LLVM 3.2svn, in XCode 4.6+)
#   or definitely Apple LLVM 5.0 (based on LLVM 3.3svn, in Xcode 5+):
#   https://gist.github.com/yamaya/2924292

SET(CMAKE_CXX_STANDARD 11)

#############################################################
# enable warnings

IF (PEDANTIC)
  MESSAGE (STATUS ""Pedantic compiler settings enabled"")
  IF(MSVC)
    SET(_warnings """")
    IF (NOT USING_NMAKE AND NOT USING_NINJA)
      SET(_warnings ""${_warnings} /W4"" )
    ENDIF (NOT USING_NMAKE AND NOT USING_NINJA)

    # disable warnings
    SET(_warnings ""${_warnings} /wd4091 "")  # 'typedef': ignored on left of '' when no variable is declared (occurs in MS DbgHelp.h header)
    SET(_warnings ""${_warnings} /wd4100 "")  # unused formal parameters
    SET(_warnings ""${_warnings} /wd4127 "")  # constant conditional expressions (used in Qt template classes)
    SET(_warnings ""${_warnings} /wd4190 "")  # 'identifier' has C-linkage specified, but returns UDT 'identifier2' which is incompatible with C
    SET(_warnings ""${_warnings} /wd4231 "")  # nonstandard extension used : 'identifier' before template explicit instantiation (used in Qt template classes)
    SET(_warnings ""${_warnings} /wd4244 "")  # conversion from '...' to '...' possible loss of data
    SET(_warnings ""${_warnings} /wd4251 "")  # needs to have dll-interface to be used by clients of class (occurs in Qt template classes)
    SET(_warnings ""${_warnings} /wd4267 "")  # 'argument': conversion from 'size_t' to 'int', possible loss of data
    SET(_warnings ""${_warnings} /wd4275 "")  # non dll-interface class '...' used as base for dll-interface class '...'
    SET(_warnings ""${_warnings} /wd4290 "")  # c++ exception specification ignored except to indicate a function is not __declspec(nothrow) (occurs in sip generated bindings)
    SET(_warnings ""${_warnings} /wd4456 "")  # declaration of '...' hides previous local declaration
    SET(_warnings ""${_warnings} /wd4457 "")  # declaration of '...' hides a function parameter
    SET(_warnings ""${_warnings} /wd4458 "")  # declaration of '...' hides class member
    SET(_warnings ""${_warnings} /wd4505 "")  # unreferenced local function has been removed (QgsRasterDataProvider::extent)
    SET(_warnings ""${_warnings} /wd4510 "")  # default constructor could not be generated (sqlite3_index_info, QMap)
    SET(_warnings ""${_warnings} /wd4512 "")  # assignment operator could not be generated (sqlite3_index_info)
    SET(_warnings ""${_warnings} /wd4610 "")  # user defined constructor required (sqlite3_index_info)
    SET(_warnings ""${_warnings} /wd4706 "")  # assignment within conditional expression (pal)
    SET(_warnings ""${_warnings} /wd4714 "")  # function '...' marked as __forceinline not inlined (QString::toLower/toUpper/trimmed)
    SET(_warnings ""${_warnings} /wd4800 "")  # 'int' : forcing value to bool 'true' or 'false' (performance warning)
    SET(_warnings ""${_warnings} /wd4996 "")  # '...': was declared deprecated (unfortunately triggered when implementing deprecated interfaces even when it is deprecated too)
    SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${_warnings}"")
    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${_warnings}"")
  ELSE (MSVC)
    # add warnings via flags (not as definitions as on Mac -Wall can not be overridden per language )
    SET(_warnings ""-Wall -Wextra -Wno-long-long -Wformat-security -Wno-strict-aliasing"")

    SET(WERROR FALSE CACHE BOOL ""Treat build warnings as errors."")
    IF (WERROR)
      SET(_warnings ""${_warnings} -Werror"")
    ENDIF(WERROR)
    SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${_warnings}"")

    # c++ only warnings

    SET(_warnings ""${_warnings} -Wnon-virtual-dtor"")

    # unavoidable - we can't avoid these, as older, supported compilers do not support removing the redundant move
    SET(_warnings ""${_warnings} -Wno-redundant-move"")

    IF(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.9.999)
      # heaps of these thrown by Qt headers at the moment (sep 2019)
      SET(_warnings ""${_warnings} -Wno-deprecated-copy"")
    ENDIF(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.9.999)

    SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${_warnings}"")

    # Qt produces lots of warnings with strict aliasing (as of Qt 4.4.0 & GCC 4.3)
    # There are redundant declarations in Qt and GDAL
    # ADD_DEFINITIONS( -fstrict-aliasing -Wstrict-aliasing=1 -Wredundant-decls )

    IF (""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
      SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-return-type-c-linkage -Wno-overloaded-virtual -Wimplicit-fallthrough"")
    ENDIF (""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")

    # add any extra CXXFLAGS flags set by user. can be -D CXX_EXTRA_FLAGS or environment variable
    # command line -D option overrides environment variable
    # e.g. useful for suppressing transient upstream warnings in dependencies, like Qt
    SET(CXX_EXTRA_FLAGS """" CACHE STRING ""Additional appended CXXFLAGS"")
    IF (""${CXX_EXTRA_FLAGS}"" STREQUAL """" AND DEFINED $ENV{CXX_EXTRA_FLAGS})
      SET(CXX_EXTRA_FLAGS ""$ENV{CXX_EXTRA_FLAGS}"")
    ENDIF (""${CXX_EXTRA_FLAGS}"" STREQUAL """" AND DEFINED $ENV{CXX_EXTRA_FLAGS})
    IF (NOT ""${CXX_EXTRA_FLAGS}"" STREQUAL """")
      MESSAGE (STATUS ""Appending CXX_EXTRA_FLAGS"")
      SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${CXX_EXTRA_FLAGS}"")
    ENDIF (NOT ""${CXX_EXTRA_FLAGS}"" STREQUAL """")
  ENDIF (MSVC)

ENDIF (PEDANTIC)

IF (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Qunused-arguments"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Qunused-arguments"")
  SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Qunused-arguments"")
  SET(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Qunused-arguments"")
  SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Qunused-arguments"")
ENDIF (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")

IF(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)"")
  # spatialite crashes on ppc - see bugs.debian.org/603986
  ADD_DEFINITIONS( -fno-strict-aliasing )
ENDIF(CMAKE_SYSTEM_PROCESSOR MATCHES ""^(powerpc|ppc)"")

IF (CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  MESSAGE (STATUS ""Debug output enabled"")
  SET(QGISDEBUG TRUE)
ELSE (CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  SET(QGISDEBUG FALSE)
ENDIF (CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)

IF(MSVC)
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /utf-8"")
  SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /utf-8"")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}"")
  SET(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG}"")
  # disable macros that offend std::numeric_limits<T>::min()/max()
  ADD_DEFINITIONS(-DNOMINMAX)
ENDIF(MSVC)

# Prevent build when Qt api deprecated before this Qt version is used:
ADD_DEFINITIONS(-DQT_DEPRECATED_WARNINGS)
# Unfortunately Qwt uses deprecated QString::null in headers, preventing this being raised above 5.8
ADD_DEFINITIONS(-DQT_DISABLE_DEPRECATED_BEFORE=0x050800)

IF(ENABLE_COVERAGE)
  INCLUDE(""cmake/modules/coverage/CodeCoverage.cmake"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage --coverage"")
  SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage --coverage"")
  SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage --coverage"")
  SET(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage --coverage"")
  SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage --coverage"")
  SETUP_TARGET_FOR_COVERAGE(qgis_coverage ctest coverage)
ENDIF(ENABLE_COVERAGE)

#############################################################
# platform specific stuff
IF (WITH_CORE)
  IF (WIN32)
    SET (DEFAULT_LIB_SUBDIR     lib)
    SET (DEFAULT_LIBEXEC_SUBDIR .)
    SET (DEFAULT_DATA_SUBDIR    .)
    SET (DEFAULT_PLUGIN_SUBDIR  plugins)
    SET (DEFAULT_INCLUDE_SUBDIR include)
    SET (DEFAULT_QML_SUBDIR     qml)

    SET (DEFAULT_SERVER_MODULE_SUBDIR server)

    IF (MSVC)
      SET (DEFAULT_BIN_SUBDIR bin)
      SET (DEFAULT_CGIBIN_SUBDIR bin)
      # put all the build products into a single directory
      # under build (doesn't affect install target) to make for
      # easier debugging.

      # Turn on defines for non standard maths stuff
      ADD_DEFINITIONS(-D_USE_MATH_DEFINES)

      # Turn off deprecation warnings
      ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
      ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)

      IF (INSTALL_DEPS)
        INSTALL(DIRECTORY ${INSTALL_DEPS} DESTINATION .)
      ENDIF (INSTALL_DEPS)
    ELSE(MSVC)
      SET (DEFAULT_BIN_SUBDIR .)
      SET (DEFAULT_CGIBIN_SUBDIR .)
    ENDIF(MSVC)
  ELSE (WIN32)

    IF (APPLE)
      IF (POLICY CMP0042) # in CMake 3.0.0+
        SET (CMAKE_MACOSX_RPATH OFF) # otherwise ON by default
      ENDIF (POLICY CMP0042)
      IF (POLICY CMP0068) # in CMake 3.9.0+
        cmake_policy(SET CMP0068 NEW)
      ENDIF (POLICY CMP0068)
      # for Mac OS X, everything is put inside an application bundle
      # save the root install prefix for the app later
      SET (QGIS_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
      SET (QGIS_MACAPP_PREFIX ${CMAKE_INSTALL_PREFIX}/${QGIS_APP_NAME}.app/Contents)
      # common prefix for components, let cmake handle it
      SET (CMAKE_INSTALL_PREFIX ${QGIS_MACAPP_PREFIX}/MacOS)
      # 5 bundling levels, each includes previous
      #  -1  nothing
      #   0  fixup the library paths for all QGIS libraries with @loader_path
      #   1  Qt frameworks
      #   2  non-system libraries, ""standard""
      #   3  non-system frameworks, ""standalone""
      SET (QGIS_MACAPP_BUNDLE 1 CACHE STRING ""What to bundle into app package"")
      SET (QGIS_MACAPP_BUNDLE_USER """" CACHE STRING ""Path to user bundling script"")
      SET (QGIS_MACAPP_INSTALL_DEV FALSE CACHE BOOL ""Install developer frameworks"")
      SET (QGIS_MACAPP_DEV_PREFIX ""/Library/Frameworks"" CACHE STRING ""Path to install developer frameworks"")
      # if we have @loader_path, >=OSX 10.5 (darwin 9+)
      IF (CMAKE_SYSTEM_VERSION VERSION_GREATER 9.0.0 OR CMAKE_SYSTEM_VERSION VERSION_EQUAL 9.0.0)
          SET (OSX_HAVE_LOADERPATH 1)
      ELSE ()
          SET (OSX_HAVE_LOADERPATH 0)
      ENDIF ()

      SET (DEFAULT_BIN_SUBDIR      bin)
      SET (QGIS_BIN_SUBDIR_REV     ..)
      SET (DEFAULT_CGIBIN_SUBDIR   fcgi-bin)
      SET (QGIS_CGIBIN_SUBDIR_REV  ..)
      SET (DEFAULT_LIB_SUBDIR      lib)
      SET (QGIS_LIB_SUBDIR_REV     ..)
      SET (QGIS_FW_SUBDIR          ../Frameworks)
      SET (QGIS_FW_SUBDIR_REV      ../MacOS)
      SET (DEFAULT_DATA_SUBDIR     ../Resources)
      SET (QGIS_DATA_SUBDIR_REV    ../MacOS)
      SET (DEFAULT_LIBEXEC_SUBDIR  lib/qgis)
      SET (QGIS_LIBEXEC_SUBDIR_REV ../..)
      SET (DEFAULT_PLUGIN_SUBDIR   ../PlugIns/qgis)
      SET (QGIS_PLUGIN_SUBDIR_REV  ../../MacOS)
      SET (DEFAULT_INCLUDE_SUBDIR  include/qgis)
      SET (DEFAULT_QML_SUBDIR     qml)

      # Set server moodules path to DEFAULT_LIBEXEC_SUBDIR+'/server'
      SET (DEFAULT_SERVER_MODULE_SUBDIR ${DEFAULT_LIBEXEC_SUBDIR}/server)

      # path for framework references when running from build directory
      # changed later to reference in-app resources upon install
      SET (CMAKE_INSTALL_NAME_DIR ${CMAKE_BINARY_DIR}/output/lib)
      IF (WITH_GLOBE)
        SET (OSG_PLUGINS_PATH """" CACHE PATH ""Path to OSG plugins for bundling"")
      ENDIF (WITH_GLOBE)
      # recent cmakes force SDKs, recent SDKs don't have user symlinks
      # need to find non-system frameworks
      # cmake bug #0007250 - CMAKE_SHARED_LINKER_FLAGS ignored when creating
      # a framework, so these need to be manually handled with LINK_FLAGS options
      SET (CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -F/Library/Frameworks"")
      SET (CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -F/Library/Frameworks"")
      SET (CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -F/Library/Frameworks"")

    ELSE (APPLE)
      # UNIX
      SET (DEFAULT_BIN_SUBDIR     bin)
      SET (DEFAULT_CGIBIN_SUBDIR  bin)
      SET (DEFAULT_LIB_SUBDIR     lib${LIB_SUFFIX})
      SET (DEFAULT_DATA_SUBDIR    share/qgis)
      SET (DEFAULT_LIBEXEC_SUBDIR lib${LIB_SUFFIX}/qgis)
      SET (DEFAULT_PLUGIN_SUBDIR  lib${LIB_SUFFIX}/qgis/plugins)
      SET (DEFAULT_INCLUDE_SUBDIR include/qgis)
      SET (DEFAULT_QML_SUBDIR     qml)

      SET (DEFAULT_SERVER_MODULE_SUBDIR ${DEFAULT_LIBEXEC_SUBDIR}/server)
    ENDIF (APPLE)

  ENDIF (WIN32)

  IF (ANDROID)
    SET (DEFAULT_PLUGIN_SUBDIR  lib)
    SET (DEFAULT_DATA_SUBDIR    files/share)
    string(REPLACE ""<CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME>"" """" CMAKE_CXX_CREATE_SHARED_MODULE ""${CMAKE_CXX_CREATE_SHARED_MODULE}"")
  ENDIF (ANDROID)

  #assume we have escaped compiler directives
  #eventually we want to change this to new
  #since we don't need to jump through so many
  #hoops to escape compiler directives then
  IF(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
    IF(NOT ""${CMAKE_VERSION}"" VERSION_LESS ""3.3"")
      cmake_policy(SET CMP0063 NEW)
    ENDIF(NOT ""${CMAKE_VERSION}"" VERSION_LESS ""3.3"")
    IF(MSVC)
      cmake_policy(SET CMP0020 NEW)
    ENDIF(MSVC)
  ENDIF(COMMAND cmake_policy)

  if(""${CMAKE_SYSTEM_NAME}""  MATCHES ""Linux"")
    SET(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined"")
    SET(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,--no-undefined"")
    SET(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-undefined"")
  endif() #""${CMAKE_SYSTEM_NAME}""  MATCHES ""Linux"")

  SET(CMAKE_CXX_VISIBILITY_PRESET hidden)
  INCLUDE(GenerateExportHeader)

  SET (ADD_CLAZY_CHECKS ${DEFAULT_MANUAL_SUBDIR} CACHE STRING ""Add default set of clazy checks which should not raise any warnings"")
  MARK_AS_ADVANCED (ADD_CLAZY_CHECKS)
  IF (ADD_CLAZY_CHECKS)
  SET(CMAKE_CXX_BASE_FLAGS ""${CMAKE_CXX_FLAGS}"")
  SET(CLAZY_BASE_CHECKS ""connect-3arg-lambda,lambda-unique-connection,empty-qstringliteral,fully-qualified-moc-types,lambda-in-connect,lowercase-qml-type-name,qcolor-from-literal,qfileinfo-exists,qmap-with-pointer-key,unused-non-trivial-variable,overridden-signal,qdeleteall,qstring-left,skipped-base-method,missing-qobject-macro,isempty-vs-count"")
  SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_BASE_FLAGS} -Xclang -plugin-arg-clazy -Xclang ${CLAZY_BASE_CHECKS}"")
  ENDIF (ADD_CLAZY_CHECKS)
ENDIF (WITH_CORE)

#############################################################
# user-changeable settings which can be used to customize
# layout of QGIS installation
# (default values are platform-specific)

SET (QGIS_BIN_SUBDIR     ${DEFAULT_BIN_SUBDIR}     CACHE STRING ""Subdirectory where executables will be installed"")
SET (QGIS_CGIBIN_SUBDIR  ${DEFAULT_CGIBIN_SUBDIR}  CACHE STRING ""Subdirectory where CGI executables will be installed"")
SET (QGIS_LIB_SUBDIR     ${DEFAULT_LIB_SUBDIR}     CACHE STRING ""Subdirectory where libraries will be installed"")
SET (QGIS_LIBEXEC_SUBDIR ${DEFAULT_LIBEXEC_SUBDIR} CACHE STRING ""Subdirectory where private executables will be installed"")
SET (QGIS_DATA_SUBDIR    ${DEFAULT_DATA_SUBDIR}    CACHE STRING ""Subdirectory where QGIS data will be installed"")
SET (QGIS_PLUGIN_SUBDIR  ${DEFAULT_PLUGIN_SUBDIR}  CACHE STRING ""Subdirectory where plugins will be installed"")
SET (QGIS_INCLUDE_SUBDIR ${DEFAULT_INCLUDE_SUBDIR} CACHE STRING ""Subdirectory where header files will be installed"")
SET (QGIS_QML_SUBDIR     ${DEFAULT_QML_SUBDIR}     CACHE STRING ""Subdirectory where qml files/libraries will be installed"")

SET (QGIS_SERVER_MODULE_SUBDIR  ${DEFAULT_SERVER_MODULE_SUBDIR}  CACHE STRING ""Subdirectory where server modules will be installed"")

# mark *_SUBDIR variables as advanced as this is not something
# that an average user would use
MARK_AS_ADVANCED (QGIS_BIN_SUBDIR QGIS_CGIBIN_SUBDIR QGIS_LIB_SUBDIR QGIS_LIBEXEC_SUBDIR QGIS_DATA_SUBDIR QGIS_PLUGIN_SUBDIR QGIS_INCLUDE_SUBDIR)

# full paths for the installation
SET (QGIS_BIN_DIR     ${QGIS_BIN_SUBDIR})
SET (QGIS_CGIBIN_DIR  ${QGIS_CGIBIN_SUBDIR})
SET (QGIS_LIB_DIR     ${QGIS_LIB_SUBDIR})
SET (QGIS_LIBEXEC_DIR ${QGIS_LIBEXEC_SUBDIR})
SET (QGIS_DATA_DIR    ${QGIS_DATA_SUBDIR})
SET (QGIS_PLUGIN_DIR  ${QGIS_PLUGIN_SUBDIR})
SET (QGIS_INCLUDE_DIR ${QGIS_INCLUDE_SUBDIR})
SET (QGIS_QML_DIR     ${QGIS_QML_SUBDIR})

SET (QGIS_SERVER_MODULE_DIR ${QGIS_SERVER_MODULE_SUBDIR})

# set the default locations where the targets (executables, libraries) will land when compiled
# this is to allow running qgis from the source tree without having to actually do a ""make install""
SET (QGIS_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${QGIS_OUTPUT_DIRECTORY}/${QGIS_BIN_SUBDIR})
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${QGIS_OUTPUT_DIRECTORY}/${QGIS_LIB_SUBDIR})

# write a marker with source directory path into the output's bin directory
# if run from the build directory QGIS will detect it and alter the paths
FILE(WRITE ${QGIS_OUTPUT_DIRECTORY}/${QGIS_BIN_SUBDIR}/qgisbuildpath.txt ""${CMAKE_SOURCE_DIR}\n${QGIS_OUTPUT_DIRECTORY}"")

# manual page - makes sense only on unix systems
IF (UNIX AND NOT APPLE)
  SET (DEFAULT_MANUAL_SUBDIR  man)
  SET (QGIS_MANUAL_SUBDIR  ${DEFAULT_MANUAL_SUBDIR}  CACHE STRING ""Subdirectory where manual files will be installed"")
  MARK_AS_ADVANCED (QGIS_MANUAL_SUBDIR)
  SET (QGIS_MANUAL_DIR  ${CMAKE_INSTALL_PREFIX}/${QGIS_MANUAL_SUBDIR})
ENDIF (UNIX AND NOT APPLE)

SET (DISABLE_DEPRECATED FALSE CACHE BOOL ""If set to true, it will disable deprecated functionality to prepare for the next generation of QGIS"")
IF (DISABLE_DEPRECATED)
  ADD_DEFINITIONS(-DQGIS_DISABLE_DEPRECATED)
ENDIF (DISABLE_DEPRECATED)


#############################################################
# Python build dependency

FIND_PACKAGE(PythonLibrary REQUIRED)

#############################################################
# Python bindings

IF (WITH_CORE AND WITH_BINDINGS)

  FIND_PACKAGE(PythonLibrary REQUIRED)

  # python support: check for interpreter, sip, pyqt5
  FIND_PACKAGE(PyQt5 REQUIRED)
  SET(PYQT_SIP_FLAGS ${PYQT5_SIP_FLAGS})
  SET(PYQT_SIP_DIR ${PYQT5_SIP_DIR})
  SEPARATE_ARGUMENTS(PYQT_SIP_FLAGS) # convert space separated values to a list

  FIND_PACKAGE(SIP REQUIRED)
  FIND_PACKAGE(Qsci REQUIRED)
  INCLUDE(PythonMacros)
  INCLUDE(PyQtMacros)
  INCLUDE(SIPMacros)

  SET(SIP_INCLUDES ${PYQT_SIP_DIR} ${CMAKE_SOURCE_DIR}/python)
  SET(SIP_CONCAT_PARTS 4)

  IF (NOT BINDINGS_GLOBAL_INSTALL)
    SET(PYTHON_SITE_PACKAGES_DIR ${QGIS_DATA_DIR}/python)
  ENDIF (NOT BINDINGS_GLOBAL_INSTALL)

  IF (WITH_CUSTOM_WIDGETS)
    SET(PYUIC_WIDGET_PLUGIN_DIRECTORY ${PYQT5_MOD_DIR}/uic/widget-plugins/)
  ENDIF (WITH_CUSTOM_WIDGETS)

ENDIF (WITH_CORE AND WITH_BINDINGS)

#############################################################
# create qgsconfig.h
# installed with app target
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake_templates/qgsconfig.h.in ${CMAKE_BINARY_DIR}/qgsconfig.h)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

#############################################################
# create qgsversion.h
INCLUDE(CreateQgsVersion)
CREATE_QGSVERSION()

####################################################
# Added by Jef to prevent python core and gui libs linking to other qgisCore and qgisGui libs
# that may be in the same install prefix
IF (WITH_CORE)
  LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/src/core ${CMAKE_BINARY_DIR}/src/gui)
ENDIF (WITH_CORE)

####################################################
# clang-tidy
SET (WITH_CLANG_TIDY FALSE CACHE BOOL ""Use Clang tidy"")
MARK_AS_ADVANCED(WITH_CLANG_TIDY)
IF (WITH_CORE)
  IF(WITH_CLANG_TIDY)
    FIND_PROGRAM(
      CLANG_TIDY_EXE
      NAMES ""clang-tidy""
      DOC ""Path to clang-tidy executable""
      )
    IF(NOT CLANG_TIDY_EXE)
      MESSAGE(STATUS ""clang-tidy not found."")
    ELSE(NOT CLANG_TIDY_EXE)
      MESSAGE(STATUS ""clang-tidy found: ${CLANG_TIDY_EXE}"")
      SET(DO_CLANG_TIDY ""${CLANG_TIDY_EXE}"" ""-checks=*,-clang-analyzer-alpha.*,-cppcoreguidelines*,-readability-implicit-bool-cast,-llvm-include-order,-cert-err58-cpp,-modernize-pass-by-value,-google-readability-braces-around-statements,-modernize-use-auto,-modernize-loop-convert,-readability-else-after-return,-readability-braces-around-statements,-google-runtime-references,-readability-named-parameter,-google-default-arguments,-google-readability-todo,-readability-inconsistent-declaration-parameter-name,-cert-flp30-c,-google-readability-casting,-clang-analyzer-security.FloatLoopCounter,-google-runtime-int,-modernize-use-using,-google-explicit-constructor,-google-build-using-namespace,-cert-err34-c,-clang-analyzer-core.CallAndMessage,-google-readability-function-size,-modernize-make-shared,-modernize-use-nullptr,-clang-analyzer-cplusplus.NewDeleteLeaks,-clang-analyzer-core.NonNullParamChecker,performance-unnecessary-copy-initialization,-readability-simplify-boolean-expr,-modernize-raw-string-literal,-performance-unnecessary-copy-initialization"")
    ENDIF(NOT CLANG_TIDY_EXE)
  ENDIF(WITH_CLANG_TIDY)
ENDIF (WITH_CORE)

#############################################################
# process subdirs

#create a variable to specify where our test data is
#so that unit tests can use TEST_DATA_DIR to locate
#the test data. See CMakeLists in test dirs for more info
#TEST_DATA_DIR is also used by QgsRenderChecker currently in core
SET (TEST_DATA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata"")

ADD_SUBDIRECTORY(doc)

IF (WITH_CORE)
  ADD_SUBDIRECTORY(src)
  ADD_SUBDIRECTORY(images)
  ADD_SUBDIRECTORY(resources)
  ADD_SUBDIRECTORY(i18n)

  IF (WITH_BINDINGS)
    ADD_SUBDIRECTORY(python)
  ENDIF (WITH_BINDINGS)

  IF (APPLE)
    # must be last for install, so install_name_tool can do its work
    ADD_SUBDIRECTORY(mac)

    # allow QGIS to be run directly from build directory and to run unit tests
    EXECUTE_PROCESS(COMMAND /bin/mkdir -p ""${QGIS_OUTPUT_DIRECTORY}/lib"")
    EXECUTE_PROCESS(
      COMMAND /bin/ln -fs ../../Plugins/qgis/qgisgrass6.framework lib/
      WORKING_DIRECTORY ""${QGIS_OUTPUT_DIRECTORY}""
    )
    EXECUTE_PROCESS(
      COMMAND /bin/ln -fs ../../Plugins/qgis/qgisgrass7.framework lib/
      WORKING_DIRECTORY ""${QGIS_OUTPUT_DIRECTORY}""
    )
  ENDIF (APPLE)

  # manual page - makes sense only on unix systems
  IF (UNIX AND NOT APPLE)
    INSTALL (FILES qgis.1 DESTINATION ${QGIS_MANUAL_DIR}/man1)
  ENDIF (UNIX AND NOT APPLE)

  INSTALL(FILES cmake/FindQGIS.cmake DESTINATION ${QGIS_DATA_DIR})
ENDIF (WITH_CORE)

IF (WITH_ASTYLE)
  ADD_SUBDIRECTORY(external/astyle)
ENDIF(WITH_ASTYLE)

IF (ENABLE_TESTS)
  ADD_SUBDIRECTORY(tests)
  SET (CTEST_BINARY_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/output/bin"" )
  MESSAGE (STATUS ""Ctest Binary Directory set to: ${CTEST_BINARY_DIRECTORY}"")
ENDIF (ENABLE_TESTS)

#############################################################
# Post-install commands
IF (WITH_CORE)
  ADD_SUBDIRECTORY(postinstall)
ENDIF (WITH_CORE)

#############################################################
# Uninstall stuff see: http://www.vtk.org/Wiki/CMake_FAQ
IF (WITH_CORE)
  CONFIGURE_FILE(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

  ADD_CUSTOM_TARGET(uninstall
    ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"")
ENDIF (WITH_CORE)

#############################################################
# Enable packaging
IF (WITH_CORE)
  # Do not warn about runtime libs when building using VS Express
  IF(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)
    SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)
  ENDIF()
  INCLUDE(InstallRequiredSystemLibraries)

  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""QGIS"")
  SET(CPACK_PACKAGE_VENDOR ""Open Source Geospatial Foundation"")
  SET(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README"")
  SET(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_CURRENT_SOURCE_DIR}/COPYING"")
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY ""QGIS ${COMPLETE_VERSION}"")
  IF(WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backslashes.
    SET(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/win_build\\\\sidebar.bmp"")
    SET(CPACK_NSIS_INSTALLED_ICON_NAME ""\\\\qgis.exe"")
    SET(CPACK_NSIS_DISPLAY_NAME ""${CPACK_PACKAGE_INSTALL_DIRECTORY} QGIS"")
    SET(CPACK_NSIS_HELP_LINK ""http:\\\\\\\\qgis.org"")
    SET(CPACK_NSIS_URL_INFO_ABOUT ""http:\\\\\\\\qgis.org"")
    SET(CPACK_NSIS_CONTACT ""info@qgis.org"")
    SET(CPACK_NSIS_MODIFY_PATH ON)

  #  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""  !include \\\""${CMAKE_SOURCE_DIR}\\\\win_build\\\\extra.nsh\\\"""")
  ELSE(WIN32 AND NOT UNIX)
    #SET(CPACK_STRIP_FILES ""QGIS"")
    #SET(CPACK_SOURCE_STRIP_FILES """")
  ENDIF(WIN32 AND NOT UNIX)
  SET(CPACK_PACKAGE_EXECUTABLES ""qgis"" ""QGIS"")
  SET(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md"")
  INCLUDE(CPack)
ENDIF (WITH_CORE)

IF (UNIX AND NOT APPLE)
  ADD_SUBDIRECTORY(linux)
ENDIF (UNIX AND NOT APPLE)
",3.1.0,3.1
40194,ElementW,Diggler,False,False,False,False,False,1,C,2019-05-30 10:45:48+00:00,2016-01-02 15:28:11+00:00,6,246,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

project(Diggler C CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_LEGACY_CYGWIN_WIN32 0)

if(""${CMAKE_CURRENT_SOURCE_DIR}"" STREQUAL ""${PROJECT_BINARY_DIR}"")
  # Forbid in-tree builds. With CMake, doing an in-tree build breaks out-of-tree ones
  # when generating from .in files into the source directory, overriding the path of out-of-tree
  # generated ones.
  # TL;DR: in-tree build = BAD IDEA.
  file(REMOVE_RECURSE CMakeFiles CMakeCache.txt)
  message(FATAL_ERROR
    ""You are doing an in-tree build (i.e. the source and binary directories are the same).\
In-tree builds aren't supported and will *never* be.\
Make a \""build\"" directory and run cmake here.
\
Don't forget to remove CMakeFiles and CMakeCache.txt."")
endif()

### Find path to build dir, relative if possible, to symlink resources directories
file(RELATIVE_PATH REL_BUILD_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_BINARY_DIR})
string(FIND ""${REL_BUILD_PATH}"" "".."" RBP_2DOTPOS)
# If we're going up, use absolute path
if(${RBP_2DOTPOS} EQUAL 0)
  set(PATH_TO_TOPDIR ${CMAKE_CURRENT_SOURCE_DIR})
else()
  file(RELATIVE_PATH PATH_TO_TOPDIR ${PROJECT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
endif()
message("">> Path to topdir: ${PATH_TO_TOPDIR}"")

### Compiler & build options
if(MINGW)
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -municode -mwindows"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -municode -mwindows"")
  add_definitions(-DHAS_INET_PTON=1) # Override ENet's CMakeFile broken pton/ntop detection
  add_definitions(-DHAS_INET_NTOP=1)
endif()
# Disable narrow convert warnings and disable deprecated GLM degrees usage
add_definitions(-DGLM_FORCE_RADIANS)
add_definitions(-DGLM_ENABLE_EXPERIMENTAL)
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-narrowing -ffast-math"")
set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"") # -Wextra"")

if(NOT CMAKE_BUILD_TYPE) # Defaults to release
  set(CMAKE_BUILD_TYPE Release CACHE STRING ""Build type: Debug or Release"" FORCE)
endif()

if(""${CMAKE_SYSTEM_NAME}"" MATCHES ""Linux"")
  set(LINUX TRUE)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" OR CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(USE_GCC_LTO FALSE CACHE BOOL ""Use GCC LTOs"")

  # Compile as Position Independent Code
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fPIC"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fPIC"")

  if(LINUX AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
    # On Linux GCC, make the whole executable position-independent
    set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pie"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pie"")
  endif()
endif()

message("">> Using ${CMAKE_BUILD_TYPE} build configuration"")
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O0 -DDEBUG -g"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3"")
set(CMAKE_CXX_FLAGS_MINSIZEREL ""${CMAKE_CXX_FLAGS_MINSIZEREL} -Os"")
if(USE_GCC_LTO)
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -flto"")
endif()

### Packages
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/ext/enet"")
set(ENET_INCLUDE_DIRS ""${CMAKE_CURRENT_SOURCE_DIR}/ext/enet/include"")
set(ENET_LIBRARIES enet)
add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/ext/lzo"")
add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/ext/etc"")
find_package(glm QUIET)
find_package(OpenAL REQUIRED)
find_package(PkgConfig REQUIRED)

find_package(meiose REQUIRED)
if(NOT MEIOSE_FOUND)
  message(FATAL_ERROR ""Bundled meiose not found. Have you checked out submodules?
git submodule update --init"")
endif()

find_package(Optional REQUIRED)

pkg_search_module(GLFW REQUIRED glfw3)
pkg_search_module(SQLITE3 REQUIRED sqlite3)
pkg_search_module(LIBSODIUM REQUIRED libsodium)
include_directories(BEFORE
  ""${CMAKE_CURRENT_SOURCE_DIR}/include""
  ${ETC_INCLUDE_DIRS}
  ${MEIOSE_INCLUDE_DIR}
  ${LZO_INCLUDE_DIRS}
  ${ENET_INCLUDE_DIRS}
  ${GLFW_INCLUDE_DIRS}
  ${LIBSODIUM_INCLUDE_DIRS}
  ${SQLITE3_INCLUDE_DIRS}
  ${OPENAL_INCLUDE_DIR}
  ${OPTIONAL_INCLUDE_DIR}
)

### Allow subdirs to add params to the `diggler` target
# Sources
set_property(GLOBAL PROPERTY DIGGLER_SOURCE_FILES """")
function(diggler_add_sources)
  get_property(SRCS GLOBAL PROPERTY DIGGLER_SOURCE_FILES)
  list(APPEND SRCS ${ARGV})
  set_property(GLOBAL PROPERTY DIGGLER_SOURCE_FILES ""${SRCS}"")
endfunction(diggler_add_sources)

# Definitions
set_property(GLOBAL PROPERTY DIGGLER_DEFINITIONS """")
function(diggler_add_definition)
  get_property(DEFS GLOBAL PROPERTY DIGGLER_DEFINITIONS)
  list(APPEND DEFS ""${ARGV0}"")
  set_property(GLOBAL PROPERTY DIGGLER_DEFINITIONS ""${DEFS}"")
endfunction(diggler_add_definition)

# Include directories
set_property(GLOBAL PROPERTY DIGGLER_INCLUDE_DIRECTORIES """")
function(diggler_include_directories)
  get_property(INCDIRS GLOBAL PROPERTY DIGGLER_INCLUDE_DIRECTORIES)
  list(APPEND INCDIRS ${ARGV})
  set_property(GLOBAL PROPERTY DIGGLER_INCLUDE_DIRECTORIES ""${INCDIRS}"")
endfunction(diggler_include_directories)

# Link libraries
set_property(GLOBAL PROPERTY DIGGLER_LINK_LIBRARIES """")
function(diggler_link_libraries)
  get_property(LIBS GLOBAL PROPERTY DIGGLER_LINK_LIBRARIES)
  list(APPEND LIBS ${ARGV})
  set_property(GLOBAL PROPERTY DIGGLER_LINK_LIBRARIES ""${LIBS}"")
endfunction(diggler_link_libraries)

set(DIGGLER_USED_ROOT_CMAKELISTS TRUE)

add_subdirectory(""${CMAKE_CURRENT_SOURCE_DIR}/src"")

### Create target and apply parameters
# Include directories
get_property(INCDIRS GLOBAL PROPERTY DIGGLER_INCLUDE_DIRECTORIES)
include_directories(BEFORE ${INCDIRS})

# Sources
get_property(SRCS GLOBAL PROPERTY DIGGLER_SOURCE_FILES)
add_executable(diggler ${SRCS})

# Definitions
get_property(DEFS GLOBAL PROPERTY DIGGLER_DEFINITIONS)
target_compile_definitions(diggler PUBLIC ${DEFS})

# Link libraries
get_property(LIBS GLOBAL PROPERTY DIGGLER_LINK_LIBRARIES)
target_link_libraries(diggler
  ${LIBS}
  ${ETC_LIBRARIES}
  ${MEIOSE_LIBRARY}
  ${LZO_LIBRARIES}
  ${ENET_LIBRARIES}
  ${GLFW_LIBRARIES}
  ${LIBSODIUM_LIBRARIES}
  ${SQLITE3_LIBRARIES}
  ${OPENAL_LIBRARY}
  pthread
)

if(MINGW)
  target_link_libraries(diggler
    stdc++
    ws2_32
    openal.dll
    winmm
  )
endif()

if(NOT WIN32 AND NOT MINGW)
  add_custom_command(TARGET diggler PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E create_symlink ""${PATH_TO_TOPDIR}/assets""
    ""${PROJECT_BINARY_DIR}/assets"")
endif()

#install(TARGETS digglerz RUNTIME DESTINATION bin)

find_package(Doxygen)
if (DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc
    COMMENT ""Generate code documentation with Doxygen"" VERBATIM
  )
endif()
",3.1.0,3.1
40231,lwtnn,lwtnn,False,False,False,False,False,8,C++,2019-10-04 06:35:14+00:00,2015-09-22 17:18:35+00:00,76,421,"
# Set the minimum CMake version required to build the project.
cmake_minimum_required( VERSION 3.1 )

# Silence some warnings on macOS with new CMake versions.
if( NOT ${CMAKE_VERSION} VERSION_LESS 3.9 )
   cmake_policy( SET CMP0068 NEW )
endif()

# Set the project's name and version.
project( lwtnn VERSION 2.10 )

# Enable using CTest in the project.
include( CTest )

# Set up the ""C++ version"" to use.
set( CMAKE_CXX_STANDARD_REQUIRED 11 CACHE STRING
   ""Minimum C++ standard required for the build"" )
set( CMAKE_CXX_STANDARD 11 CACHE STRING
   ""C++ standard to use for the build"" )
set( CMAKE_CXX_EXTENSIONS FALSE CACHE BOOL
   ""(Dis)allow using compiler extensions"" )

# If the user didn't request a build type explicitly, use an optimised
# build with debug symbols.
if( ""${CMAKE_BUILD_TYPE}"" STREQUAL """" )
   set( CMAKE_BUILD_TYPE ""RelWithDebInfo"" )
endif()
message( STATUS ""Using build type: ${CMAKE_BUILD_TYPE}"" )

# Set the warning flag(s) to use.
set( CMAKE_CXX_FLAGS ""-Wall -pedantic -Wextra -Wcomment -Wunused-value"" )

# Turn off the usage of RPATH completely:
set( CMAKE_SKIP_RPATH ON )
set( CMAKE_SKIP_BUILD_RPATH ON )
set( CMAKE_SKIP_INSTALL_RPATH ON )

# Set the location of the built libraries/executables inside the build
# directory.
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )

# Make the project's modules visible to CMake.
list( INSERT CMAKE_MODULE_PATH 0 ${CMAKE_SOURCE_DIR}/cmake )

# Figure out where to take ""externals"" from. Either using externals already
# available on the build system, or downloading the necessary code as part
# of the build of this project.

# Figure out what to do with Boost.
option( BUILTIN_BOOST ""Acquire Boost as part of building this project"" OFF )
if( BUILTIN_BOOST )
   # Download and install the Boost headers using ExternalProject. Note that
   # we don't need any of the Boost libraries, so we're not using Boost's own
   # build system. And we only need the Boost headers during the build
   # ""privately"", so the headers are not installed with the project.
   include( ExternalProject )
   ExternalProject_Add( Boost
      PREFIX ${CMAKE_BINARY_DIR}/externals
      INSTALL_DIR ${CMAKE_BINARY_DIR}/externals/Boost
      URL
      ""https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz""
      URL_MD5 ""319c6ffbbeccc366f14bb68767a6db79""
      BUILD_IN_SOURCE 1
      CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo ""No configuration for Boost""
      BUILD_COMMAND ${CMAKE_COMMAND} -E echo ""No build step for Boost""
      INSTALL_COMMAND ${CMAKE_COMMAND} -E copy_directory <SOURCE_DIR>/boost
      <INSTALL_DIR>/include/boost )
   # Set the include path to use.
   set( Boost_INCLUDE_DIRS
      $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/externals/Boost/include> )
   # Tell the user what will happen.
   message( STATUS ""Using a privately downloaded Boost version for the build"" )
else()
   # Look for Boost on the build system.
   find_package( Boost 1.54.0 REQUIRED )
endif()

# Figure out what to do with Eigen.
option( BUILTIN_EIGEN ""Acquire Eigen as part of building this project"" OFF )
if( BUILTIN_EIGEN )
   # Download and install Eigen using ExternalProject.
   include( ExternalProject )
   ExternalProject_Add( Eigen
      PREFIX ${CMAKE_BINARY_DIR}/externals
      INSTALL_DIR ${CMAKE_BINARY_DIR}/externals/Eigen
      URL ""https://bitbucket.org/eigen/eigen/get/3.2.9.tar.bz2""
      URL_MD5 ""de11bfbfe2fd2dc4b32e8f416f58ee98""
      DOWNLOAD_NAME ""eigen-3.2.9.tar.bz2""
      CMAKE_CACHE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> )
   # The eigen headers are needed by clients of this project as well, so let's
   # install them with the project.
   install( DIRECTORY ${CMAKE_BINARY_DIR}/externals/Eigen/
      DESTINATION . USE_SOURCE_PERMISSIONS )
   # Set the include path to use.
   set( EIGEN3_INCLUDE_DIR
      $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/externals/Eigen/include/eigen3>
      $<INSTALL_INTERFACE:include/eigen3> )
   # Tell the user what will happen.
   message( STATUS ""Using a privately downloaded Eigen version for the build"" )
else()
   # Look for Eigen on the build system.
   find_package( Eigen3 REQUIRED )
endif()

# Public header files for the shared/static library.
set( lib_headers include/lwtnn/Exceptions.hh include/lwtnn/Graph.hh
   include/lwtnn/InputPreprocessor.hh include/lwtnn/LightweightGraph.hh
   include/lwtnn/LightweightNeuralNetwork.hh include/lwtnn/NNLayerConfig.hh
   include/lwtnn/NanReplacer.hh include/lwtnn/Source.hh include/lwtnn/Stack.hh
   include/lwtnn/Stack.hh include/lwtnn/lightweight_network_config.hh
   include/lwtnn/lightweight_nn_streamers.hh include/lwtnn/parse_json.hh )
# Source files for the shared/static library.
set( lib_sources src/Exceptions.cxx src/Graph.cxx src/InputPreprocessor.cxx
   src/LightweightGraph.cxx src/LightweightNeuralNetwork.cxx src/NanReplacer.cxx
   src/Stack.cxx src/lightweight_nn_streamers.cxx src/parse_json.cxx
   src/test_utilities.hh src/test_utilities.cxx )

# Build the shared library.
add_library( lwtnn SHARED ${lib_headers} ${lib_sources} )
target_include_directories( lwtnn
   PUBLIC ${EIGEN3_INCLUDE_DIR}
   $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>
   PRIVATE ${Boost_INCLUDE_DIRS} )
set_property( TARGET lwtnn
   PROPERTY PUBLIC_HEADER ${lib_headers} )
if( BUILTIN_BOOST )
   add_dependencies( lwtnn Boost )
endif()
if( BUILTIN_EIGEN )
   add_dependencies( lwtnn Eigen )
endif()

# Build the static library.
add_library( lwtnn-stat ${lib_headers} ${lib_sources} )
target_include_directories( lwtnn-stat
   PUBLIC ${EIGEN3_INCLUDE_DIR}
   $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>
   PRIVATE ${Boost_INCLUDE_DIRS} )
set_property( TARGET lwtnn-stat
   PROPERTY PUBLIC_HEADER ${lib_headers} )
if( BUILTIN_BOOST )
   add_dependencies( lwtnn-stat Boost )
endif()
if( BUILTIN_EIGEN )
   add_dependencies( lwtnn-stat Eigen )
endif()

# Install the libraries.
install( TARGETS lwtnn lwtnn-stat
   EXPORT lwtnnTargets
   ARCHIVE DESTINATION lib
   LIBRARY DESTINATION lib
   PUBLIC_HEADER DESTINATION include/lwtnn )

# Helper macro for building the projects' executables.
macro( lwtnn_add_executable name )
   # Declare the executable.
   add_executable( ${name} src/${name}.cxx )
   # Set its properties.
   target_link_libraries( ${name} lwtnn-stat )
   target_include_directories( ${name} SYSTEM PRIVATE ${Boost_INCLUDE_DIRS} )
   # Install it.
   install( TARGETS ${name}
      EXPORT lwtnnTargets
      RUNTIME DESTINATION bin )
endmacro( lwtnn_add_executable )

# Build/install all executables of the project.
lwtnn_add_executable( lwtnn-benchmark-rnn )
lwtnn_add_executable( lwtnn-dump-config )
lwtnn_add_executable( lwtnn-test-arbitrary-net )
lwtnn_add_executable( lwtnn-test-graph )
lwtnn_add_executable( lwtnn-test-lightweight-graph )
lwtnn_add_executable( lwtnn-test-rnn )

# Install the converter scripts.
install( FILES
   converters/keras_layer_converters_common.py
   converters/keras_v1_layer_converters.py
   converters/keras_v2_layer_converters.py
   DESTINATION converters )
install( PROGRAMS
   converters/keras2json.py
   converters/sequential2graph.py
   converters/kerasfunc2json.py
   converters/sklearn2json.py
   DESTINATION converters )

# Helper macro for building the project's unit tests.
macro( lwtnn_add_test name )
   # Build the unit-test executable:
   add_executable( ${name} ${ARGN} )
   target_link_libraries( ${name} lwtnn-stat )
   set_target_properties( ${name} PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/test-bin"" )
   # Set up the test itself:
   add_test( NAME ${name}_ctest
      COMMAND ${CMAKE_BINARY_DIR}/test-bin/${name}
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/test-bin )
endmacro( lwtnn_add_test )

# Set up the test(s) of the project.
lwtnn_add_test( test-nn-streamers tests/test-nn-streamers.cxx )

# Install the CMake description of the project.
install( EXPORT lwtnnTargets
   FILE lwtnnConfig-targets.cmake
   DESTINATION cmake
   NAMESPACE ""lwtnn::"" )
configure_file( ${CMAKE_SOURCE_DIR}/cmake/lwtnnConfig-version.cmake.in
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/lwtnnConfig-version.cmake @ONLY )
install( FILES ${CMAKE_SOURCE_DIR}/cmake/lwtnnConfig.cmake
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/lwtnnConfig-version.cmake
   DESTINATION cmake )
",3.1,3.1
40413,savoirfairelinux,ring-client-gnome,False,False,False,False,False,29,C++,2020-05-13 20:15:46+00:00,2015-11-05 19:25:35+00:00,63,1052,"CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

# First, check is the compiler is new enough, most version of Clang are fine
# until problems arise, checking for GCC is enough
IF (CMAKE_COMPILER_IS_GNUCC)
   EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
   IF (GCC_VERSION VERSION_GREATER 4.8 OR GCC_VERSION VERSION_EQUAL 4.8)
      MESSAGE(STATUS ""Found GCC version >= 4.8: "" ${GCC_VERSION})
   ELSE()
      MESSAGE(FATAL_ERROR ""Your version of GCC is too old, please install GCC 4.8 or later"")
   ENDIF()
ENDIF()

set (CMAKE_CXX_STANDARD 14)

# set project name and version
PROJECT(jami-client-gnome)

IF(EXISTS ""${PROJECT_SOURCE_DIR}/version.txt"")
   FILE (STRINGS ""version.txt"" PROJECT_VERSION)
ELSE()
   SET (PROJECT_VERSION ""development"")
ENDIF()

# set build date
IF( NOT (""$ENV{SOURCE_DATE_EPOCH}"" STREQUAL """"))
  EXECUTE_PROCESS(
    COMMAND date -u -d ""1970-01-01 UTC $ENV{SOURCE_DATE_EPOCH} seconds"" ""+%Y-%m-%d %H:%M:%S UTC""
    OUTPUT_VARIABLE CLIENT_BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
ELSEIF( ""${CLIENT_BUILD_DATE}"" STREQUAL """")
  EXECUTE_PROCESS(
    COMMAND date -u ""+%Y-%m-%d %H:%M:%S UTC""
    OUTPUT_VARIABLE CLIENT_BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
ENDIF()

# add the binary tree to the search path for include files
# so that we will find config.h
INCLUDE_DIRECTORIES(""${PROJECT_BINARY_DIR}"")

LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake"")

# include custom cmake modules
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/GResources.cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/GSettings.cmake)

# make sure we're using Qt5
SET(ENABLE_QT5 true)

# for now, set debug as default
SET(CMAKE_BUILD_TYPE Debug)

# during packaging the CMAKE_INSTALL_PREFIX is used to specify where to install the files, but it
# may not be the same as where the package will put them, use JAMI_INSTALL_PREFIX to let the client
# know at runtime where to expect installed files to be located
SET(JAMI_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}
  CACHE PATH ""prefix where the package will be installed on the user's system (eg: /usr/local); defaults to the CMAKE_INSTALL_PREFIX""
)

# Check if LRC's location is manually specified with -DLibRingClient_PROJECT_DIR
IF(LibRingClient_PROJECT_DIR)
   SET(LIB_RING_CLIENT_INCLUDE_DIR ${LibRingClient_PROJECT_DIR}/src)
   # TODO: maybe allow a way to specify a different build dir
   SET(LIB_RING_LIBRARY_INCLUDE_DIR ${LibRingClient_PROJECT_DIR}/build)

   # check for the existence of the directories;
   # if the dirs have missing or outdated files then we will just get build/link errors
   IF(EXISTS ""${LIB_RING_CLIENT_INCLUDE_DIR}/"")
      MESSAGE(""will expect lrc headers in ${LIB_RING_CLIENT_INCLUDE_DIR}"")
      IF(EXISTS ""${LIB_RING_LIBRARY_INCLUDE_DIR}/"")
         MESSAGE(""will expect lrc libraries in "" ${LIB_RING_LIBRARY_INCLUDE_DIR})
         SET(LibRingClient_FOUND true)
         SET(LIB_RING_CLIENT_LIBRARY ringclient)
      ELSE()
         MESSAGE( FATAL_ERROR ""${LIB_RING_LIBRARY_INCLUDE_DIR} does not exist"")
      ENDIF(EXISTS ""${LIB_RING_LIBRARY_INCLUDE_DIR}/"")
   ELSE()
      MESSAGE( FATAL_ERROR ""${LIB_RING_CLIENT_INCLUDE_DIR} does not exist"")
   ENDIF(EXISTS ""${LIB_RING_CLIENT_INCLUDE_DIR}/"")
ELSE(LibRingClient_PROJECT_DIR)
   FIND_PACKAGE(LibRingClient REQUIRED)
ENDIF(LibRingClient_PROJECT_DIR)

# find packages
FIND_PACKAGE(PkgConfig REQUIRED)
PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0>=3.10)
PKG_CHECK_MODULES(GLIB REQUIRED glib-2.0>=2.40)
FIND_PACKAGE(Qt5Core REQUIRED)
PKG_CHECK_MODULES(CLUTTER REQUIRED clutter-1.0)
PKG_CHECK_MODULES(CLUTTERGTK REQUIRED clutter-gtk-1.0)
PKG_CHECK_MODULES(LIBNOTIFY libnotify>=0.7.6) #optional
IF( LIBNOTIFY_FOUND )
    pkg_check_modules(CANBERRA REQUIRED libcanberra-gtk3>=0.25)
ENDIF()
FIND_PACKAGE(Gettext) #optional for translations
PKG_CHECK_MODULES(LIBQRENCODE libqrencode>=3.4)
PKG_CHECK_MODULES(LIBNM libnm>=1.0) #optional to detect changes in the network

# Both appindicators are optional. ayatana-appindicator is better
# maintained and it works best across all desktop environments.
PKG_CHECK_MODULES(APPINDICATOR ayatana-appindicator3-0.1)
IF( APPINDICATOR_FOUND )
    SET(HAVE_AYATANAAPPINDICATOR 1)
    SET(HAVE_APPINDICATOR 1)
ELSE()
    PKG_CHECK_MODULES(APPINDICATOR appindicator3-0.1)
    IF( APPINDICATOR_FOUND )
        SET(HAVE_AYATANAAPPINDICATOR 0)
        SET(HAVE_APPINDICATOR 1)
    ELSE()
        SET(HAVE_AYATANAAPPINDICATOR 0)
        SET(HAVE_APPINDICATOR 0)
    ENDIF()
ENDIF()

PKG_CHECK_MODULES(WEBKIT webkit2gtk-4.0)
IF(NOT WEBKIT_FOUND)
    PKG_CHECK_MODULES(WEBKIT REQUIRED webkit2gtk-3.0)
ENDIF()

# include libs
INCLUDE_DIRECTORIES(${GTK3_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${LIB_RING_CLIENT_INCLUDE_DIR})
INCLUDE_DIRECTORIES(SYSTEM ${Qt5Core_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES(${CLUTTER_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CLUTTERGTK_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${LIBNOTIFY_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${APPINDICATOR_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${LIBNM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${WEBKIT_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CANBERRA_INCLUDE_DIRS})

# link libs
LINK_DIRECTORIES(${GTK3_LIBRARY_DIRS})
LINK_DIRECTORIES(${LIB_RING_LIBRARY_INCLUDE_DIR})
LINK_DIRECTORIES(${Qt5Core_LIBRARY_DIRS} )
LINK_DIRECTORIES(${CLUTTER_LIBRARY_DIRS})
LINK_DIRECTORIES(${CLUTTERGTK_LIBRARY_DIRS})
LINK_DIRECTORIES(${LIBNOTIFY_LIBRARY_DIRS})
LINK_DIRECTORIES(${APPINDICATOR_LIBRARY_DIRS})
LINK_DIRECTORIES(${LIBNM_LIBRARY_DIRS})
LINK_DIRECTORIES(${WEBKIT_LIBRARY_DIRS})
LINK_DIRECTORIES(${CANBERRA_LIBRARY_DIRS})

# lib compiler flags
ADD_DEFINITIONS(${GTK3_CFLAGS})
ADD_DEFINITIONS(${GTK3_CFLAGS_OTHER})
ADD_DEFINITIONS(${LIB_RING_LIBRARY_CFLAGS})
ADD_DEFINITIONS(${Qt5Core_CFLAGS})
ADD_DEFINITIONS(${CLUTTER_CFLAGS})
ADD_DEFINITIONS(${CLUTTERGTK_CFLAGS})
ADD_DEFINITIONS(${LIBNOTIFY_CFLAGS})
ADD_DEFINITIONS(${APPINDICATOR_CFLAGS})
ADD_DEFINITIONS(${LIBNM_CFLAGS})
ADD_DEFINITIONS(${WEBKIT_CFLAGS})
ADD_DEFINITIONS(${CANBERRA_CFLAGS})

IF(NOT ${ENABLE_STATIC} MATCHES false)
  SET(QT5_MODULE_PATH ${QT5_PATH}/lib/cmake)
  FIND_PACKAGE(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED Core DBus)
  FIND_PACKAGE(Qt5DBus REQUIRED)
  INCLUDE_DIRECTORIES(SYSTEM ${Qt5DBus_INCLUDE_DIRS} )
  LINK_DIRECTORIES(${Qt5DBus_LIBRARY_DIRS} )
  ADD_DEFINITIONS(${Qt5DBus_CFLAGS})
ENDIF()

# warnings
ADD_DEFINITIONS(
   -Wall
   -Wextra
   -Wno-cpp
   -Wmissing-noreturn
   -Wpointer-arith
   -Wcast-align
   -Wwrite-strings
   -Wformat-nonliteral
   -Wformat-security
   -Wswitch-enum
   -Winit-self
   -Wmissing-include-dirs
   -Wundef
   -Wmissing-format-attribute
   -Wno-reorder
   -Wunused
   -Wuninitialized
   -Woverloaded-virtual
   -Wsuggest-attribute=const
   -Wunused-value
   -Wdouble-promotion
   -Wnonnull
   -Wsequence-point
   -Wunused-but-set-parameter
   -Wsizeof-pointer-memaccess
   -Wvarargs
)

# more warnings
IF (CMAKE_COMPILER_IS_GNUCC)
   IF (GCC_VERSION VERSION_GREATER 4.9 OR GCC_VERSION VERSION_EQUAL 4.9)
      ADD_DEFINITIONS(
         -Wconditionally-supported
         -Wdate-time
         -Wdelete-incomplete
         -Wfloat-conversion
      )
   ENDIF()

   IF (GCC_VERSION VERSION_GREATER 5.0 OR GCC_VERSION VERSION_EQUAL 5.0)
      ADD_DEFINITIONS(
         -Wsuggest-override
         -Wsuggest-final-types
         -Wsuggest-final-methods
         -Wbool-compare
         -Wformat-signedness
         -Wlogical-not-parentheses
         -Wnormalized
         -Wshift-count-negative
         -Wshift-count-overflow
         -Wsized-deallocation
         -Wsizeof-array-argument
      )
   ENDIF()

ENDIF()

# get git version on every build
SET(GIT_REVISION_INPUT_FILE ${PROJECT_SOURCE_DIR}/src/revision.h.in)
SET(GIT_REVISION_OUTPUT_FILE ${PROJECT_BINARY_DIR}/revision.h)

ADD_CUSTOM_TARGET(
   git_revision ALL
   COMMAND ${CMAKE_COMMAND}
      -DGIT_REVISION_INPUT_FILE=${GIT_REVISION_INPUT_FILE}
      -DGIT_REVISION_OUTPUT_FILE=${GIT_REVISION_OUTPUT_FILE}
      -DCLIENT_BUILD_DATE=${CLIENT_BUILD_DATE}
      -P ${CMAKE_SOURCE_DIR}/cmake/GitRevision.cmake
   COMMENT ""generating ${GIT_REVISION_OUTPUT_FILE}""
)

ADD_CUSTOM_COMMAND(
   OUTPUT ${GIT_REVISION_OUTPUT_FILE}
   DEPENDS git_revision
)

# source files to compile
SET( SRC_FILES
   src/main.cpp
   src/client.h
   src/client.cpp
   src/client_options.h
   src/client_options.c
   src/mainwindow.h
   src/mainwindow.cpp
   src/incomingcallview.h
   src/incomingcallview.cpp
   src/currentcallview.h
   src/currentcallview.cpp
   src/models/gtkaccessproxymodel.h
   src/models/gtkaccessproxymodel.cpp
   src/models/gtkqtreemodel.h
   src/models/gtkqtreemodel.cpp
   src/utils/drawing.h
   src/utils/drawing.cpp
   src/video/video_widget.h
   src/video/video_widget.cpp
   src/accountcreationwizard.h
   src/accountcreationwizard.cpp
   src/accountmigrationview.h
   src/accountmigrationview.cpp
   src/usernameregistrationbox.h
   src/usernameregistrationbox.cpp
   src/models/activeitemproxymodel.h
   src/models/activeitemproxymodel.cpp
   src/defines.h
   src/video/xrectsel.h
   src/video/xrectsel.c
   src/dialogs.h
   src/dialogs.c
   src/mediasettingsview.h
   src/mediasettingsview.cpp
   src/newaccountsettingsview.h
   src/newaccountsettingsview.cpp
   src/generalsettingsview.h
   src/generalsettingsview.cpp
   src/native/pixbufmanipulator.h
   src/native/pixbufmanipulator.cpp
   src/utils/models.h
   src/utils/models.cpp
   src/notifier.h
   src/notifier.cpp
   src/utils/files.h
   src/utils/files.cpp
   ${GIT_REVISION_OUTPUT_FILE}
   src/native/dbuserrorhandler.h
   src/native/dbuserrorhandler.cpp
   src/welcomeview.h
   src/welcomeview.cpp
   src/webkitchatcontainer.h
   src/webkitchatcontainer.cpp
   src/chatview.h
   src/messagingwidget.h
   src/messagingwidget.cpp
   src/chatview.cpp
   src/avatarmanipulation.h
   src/avatarmanipulation.cpp
   src/cc-crop-area.h
   src/cc-crop-area.c
   src/conversationsview.h
   src/conversationsview.cpp
   src/conversationpopupmenu.h
   src/conversationpopupmenu.cpp
   src/accountinfopointer.h
   src/profileview.h
   src/profileview.cpp
   # Generated marshals
   src/marshals.h
   src/marshals.cpp
)

# compile glib resource files to c code
GLIB_COMPILE_RESOURCES( GLIB_RESOURCES_RING
   SOURCE
      pixmaps/pixmaps.gresource.xml
      ui/ui.gresource.xml
      web/web.gresource.xml
      sounds/sounds.gresource.xml
)

# IF(${ENABLE_TEST} MATCHES true)
#    ADD_SUBDIRECTORY( src/test)
# ENDIF()

# for translations
IF (GETTEXT_FOUND)

  # get all translation files; they're expected to be named using the following convention:
  # '<lang code>[_<country code].po'
  # eg: fr_CA.po (the country code is optional)
  FILE(GLOB PO_FILES ${CMAKE_SOURCE_DIR}/po/*.po)

  # Install each of the translation files
  FOREACH(PO_FILE IN LISTS PO_FILES)
    # extract the language (and optional country code) from the filename
    GET_FILENAME_COMPONENT(LANG ${PO_FILE} NAME_WE)
    GETTEXT_PROCESS_PO_FILES(${LANG} ALL PO_FILES ${PO_FILE})

    SET(TRANSLATIONS_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/share/locale/${LANG}/LC_MESSAGES)

    # install to share/locale and rename each to ring-client-gnome.mo
    INSTALL(
      FILES ${PROJECT_BINARY_DIR}/${LANG}.gmo
      DESTINATION ${TRANSLATIONS_INSTALL_DIR}
      RENAME ${PROJECT_NAME}.mo
    )
  ENDFOREACH(PO_FILE)

ENDIF(GETTEXT_FOUND)

# install and compile glib gsettings schema
add_schema(""net.jami.Jami.gschema.xml"" GSCHEMA_RING)

ADD_EXECUTABLE(jami-gnome ${GLIB_RESOURCES_RING} ${GSCHEMA_RING} ${SRC_FILES})

IF(NOT ${ENABLE_STATIC} MATCHES false)
TARGET_LINK_LIBRARIES(jami-gnome
   ${LIB_RING_CLIENT_LIBRARY}
   ${GTK3_LIBRARIES}
   ${Qt5Core_LIBRARIES}
   ${Qt5DBus_LIBRARIES}
   ${CLUTTER_LIBRARIES}
   ${CLUTTERGTK_LIBRARIES}
   ${LIBNOTIFY_LIBRARIES}
   ${APPINDICATOR_LIBRARIES}
   ${LIBNM_LIBRARIES}
   ${WEBKIT_LIBRARIES}
   ${LIBQRENCODE_LIBRARIES}
   ${CANBERRA_LIBRARIES}
   -lpthread
   -lrt
   )
ELSE()
TARGET_LINK_LIBRARIES(jami-gnome
   ${LIB_RING_CLIENT_LIBRARY}
   ${GTK3_LIBRARIES}
   ${Qt5Core_LIBRARIES}
   ${CLUTTER_LIBRARIES}
   ${CLUTTERGTK_LIBRARIES}
   ${LIBNOTIFY_LIBRARIES}
   ${APPINDICATOR_LIBRARIES}
   ${LIBNM_LIBRARIES}
   ${WEBKIT_LIBRARIES}
   ${LIBQRENCODE_LIBRARIES}
   ${CANBERRA_LIBRARIES}
   )
ENDIF()

# configure libnotify variable for config.h file
IF( LIBNOTIFY_FOUND )
   SET(USE_LIBNOTIFY 1)
   SET(USE_CANBERRA 1)
ELSE()
   SET(USE_LIBNOTIFY 0)
ENDIF()

# configure libnm variable for config.h file
IF( LIBNM_FOUND )
   SET(USE_LIBNM 1)
ELSE()
   SET(USE_LIBNM 0)
ENDIF()

# configure libcanberra variable for config.h file
IF( CANBERRA_FOUND )
   SET(USE_CANBERRA 1)
ELSE()
   SET(USE_CANBERRA 0)
ENDIF()

# create config header file to pass cmake settings to source code
CONFIGURE_FILE (
   ""${PROJECT_SOURCE_DIR}/src/config.h.in""
   ""${PROJECT_BINARY_DIR}/config.h""
)

INSTALL(TARGETS jami-gnome
   RUNTIME DESTINATION bin
)

# install .desktop in XDG desktop dir so that it is recognized by the system
INSTALL(FILES ${PROJECT_SOURCE_DIR}/jami-gnome.desktop
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/applications
)

# install audio files
INSTALL(FILES ${PROJECT_SOURCE_DIR}/sounds/ringtone_notify.wav
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/sounds/jami-gnome
)

# install .desktop in the jami-gnome data dir, so that it can be copied to the
# autostart dir by the client
INSTALL(FILES ${PROJECT_SOURCE_DIR}/jami-gnome.desktop.autostart
   DESTINATION
      ${CMAKE_INSTALL_PREFIX}/share/jami-gnome
   PERMISSIONS
      WORLD_READ
      OWNER_WRITE
      OWNER_READ
      GROUP_READ
   RENAME
      jami-gnome.desktop
)

INSTALL(FILES pixmaps/jami.svg
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps
)

INSTALL(FILES jami-gnome.appdata.xml
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/metainfo/
)

# install shell script which will launch Jami
INSTALL(
   FILES
      ""${PROJECT_SOURCE_DIR}/src/jami""
   DESTINATION
      ${CMAKE_INSTALL_PREFIX}/bin
   PERMISSIONS
      WORLD_READ
      OWNER_WRITE
      OWNER_READ
      GROUP_READ
      OWNER_EXECUTE
      GROUP_EXECUTE
      WORLD_EXECUTE
)

INSTALL(CODE ""
    EXECUTE_PROCESS(COMMAND rm ${CMAKE_INSTALL_PREFIX}/bin/ring.cx -f)
    EXECUTE_PROCESS(COMMAND ln -s ${CMAKE_INSTALL_PREFIX}/bin/jami ${CMAKE_INSTALL_PREFIX}/bin/ring.cx)
    "")

# add a target to generate API documentation with Doxygen
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile @ONLY)
    ADD_CUSTOM_TARGET(doc
        COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/doc
        COMMENT ""Generating API documentation with Doxygen"" VERBATIM
    )

    # create doc/README.md symlink to README since Doxygen doesn't understand file with no extension
    ADD_CUSTOM_COMMAND(
        TARGET doc
        PRE_BUILD
        COMMAND ln -sf ${CMAKE_CURRENT_SOURCE_DIR}/README ${CMAKE_CURRENT_SOURCE_DIR}/doc/README.md
    )
ENDIF(DOXYGEN_FOUND)

# uninstall target
CONFIGURE_FILE(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
",3.1.0,3.1
40468,limemicro,lms7suite,False,False,False,False,False,34,C,2020-05-06 13:45:47+00:00,2015-07-07 09:25:08+00:00,265,1972,"########################################################################
## Create lime-suite project
########################################################################
cmake_minimum_required(VERSION 3.1.3)
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release;RelWithDebInfo"" CACHE TYPE INTERNAL FORCE)
project(""LimeSuite"")

option(BUILD_SHARED_LIBS ""Build the shared library"" ON)

#include modules for finding CyAPI
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

cmake_policy(SET CMP0015 OLD)
if(${CMAKE_MAJOR_VERSION} GREATER 2)
    cmake_policy(SET CMP0043 NEW)
endif()

list(FIND CMAKE_CONFIGURATION_TYPES ""${CMAKE_BUILD_TYPE}"" index)
if (${index} EQUAL -1)
   set(CMAKE_BUILD_TYPE ""Release"")
endif()

########################################################################
# Gather version information from the changelog
# LIME_SUITE_API_VERSION in VersionInfo.h reflects the major/minor
########################################################################
file(READ ""${PROJECT_SOURCE_DIR}/Changelog.txt"" changelog_txt)
string(REGEX MATCH ""Release ([0-9]+)\\.([0-9]+)\\.([0-9]+) \\("" CHANGELOG_MATCH ""${changelog_txt}"")
if(NOT CHANGELOG_MATCH)
    message(FATAL_ERROR ""Failed to extract version number from Changelog.txt"")
endif(NOT CHANGELOG_MATCH)
set(VERSION_MAJOR ""${CMAKE_MATCH_1}"")
set(VERSION_MINOR ""${CMAKE_MATCH_2}"")
set(VERSION_PATCH ""${CMAKE_MATCH_3}"")

# the ABI compatibility number should be incremented when the ABI changes
# the format is to use the same major and minor, but to have an incrementing
# number if there are changes within the major.minor release series
set(LIME_SUITE_SOVER ""${VERSION_MAJOR}.${VERSION_MINOR}-1"")

# packagers may specify -DLIME_SUITE_EXTVER=""foo"" to replace the git hash
if (NOT LIME_SUITE_EXTVER)
    include(${PROJECT_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake)
    get_git_head_revision(GITREFSPEC GITHASH)
    if (GITHASH)
        string(SUBSTRING ""${GITHASH}"" 0 8 GITHASH)
        set(LIME_SUITE_EXTVER ""g${GITHASH}"")
    else (GITHASH)
        set(LIME_SUITE_EXTVER ""unknown"")
    endif (GITHASH)
endif()

set(LIME_SUITE_LIBVER ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")
set(LIME_SUITE_VERSION ""${LIME_SUITE_LIBVER}-${LIME_SUITE_EXTVER}"")
string(TIMESTAMP BUILD_TIMESTAMP ""%Y-%m-%d"")

#LIME_SUITE_ROOT is compiled into the library to locate the install base.
#By default, the LIME_SUITE_ROOT is set to the CMAKE_INSTALL_PREFIX.
#However users may overload this by specifying -DLIME_SUITE_ROOT=<path>.
set(LIME_SUITE_ROOT ""${CMAKE_INSTALL_PREFIX}"" CACHE PATH
    ""Installation root for lime::getLimeSuiteRoot()"")
file(TO_CMAKE_PATH ""${LIME_SUITE_ROOT}"" LIME_SUITE_ROOT)

########################################################################
## compiler flags
########################################################################

#C++11 is a required language feature for this project
set(CMAKE_CXX_STANDARD 11)

#is this processor x86? set variable X86
if(CMAKE_SYSTEM_PROCESSOR MATCHES ""i686.*|i386.*|x86.*|amd64.*|AMD64.*"")
    set(X86 TRUE)
else()
    set(X86 FALSE)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)

    #enable C++11 on older versions of cmake
    if (CMAKE_VERSION VERSION_LESS ""3.1"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
    endif()

    #enable warnings in Debug configurations
    if (NOT CMAKE_BUILD_TYPE STREQUAL ""Release"")
    	add_compile_options(-Wall -Wpedantic)
    endif()

    #symbols are only exported from libraries/modules explicitly
    add_compile_options(-fvisibility=hidden)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")

    #default SIMD configuration uses native build flags
    #when packaging and x86, use sse3 so the binaries work across multiple x86 variants
    if(NOT DEFAULT_SIMD_FLAGS)
        set(DEFAULT_SIMD_FLAGS ""native"")
    endif()
    if (""${CMAKE_INSTALL_PREFIX}"" STREQUAL ""/usr"" AND X86)
        set(DEFAULT_SIMD_FLAGS ""SSE3"")
    endif()

    SET(ENABLE_SIMD_FLAGS ""${DEFAULT_SIMD_FLAGS}"" CACHE STRING ""Set compiler SIMD flags"")
    SET_PROPERTY(CACHE ENABLE_SIMD_FLAGS PROPERTY STRINGS none native SSE3 SSE4.2 AVX AVX2) 

    if(${ENABLE_SIMD_FLAGS} MATCHES ""native"")
        add_definitions(-march=native)
        if(X86)
            add_definitions(-mfpmath=both)
        endif()
        message(STATUS ""Enabling native optimizations"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX2"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mavx -mfma -mavx2 -mfpmath=both)
        message(STATUS ""Enabling AVX2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mavx -mfpmath=both)
        message(STATUS ""Enabling AVX instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE4.2"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mfpmath=both)
        message(STATUS ""Enabling SSE4.2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE3"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mfpmath=both)
        message(STATUS ""Enabling SSE3 instructions"")
    endif()

endif()

if (MSVC)
    include_directories(${PROJECT_SOURCE_DIR}/external/msvc)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    set( MSVC_MULTITHREAD_COMPILE_FLAGS ""/MP"")
    set( CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} ${MSVC_MULTITHREAD_COMPILE_FLAGS}"" )

    SET(ENABLE_SIMD_FLAGS ""SSE2"" CACHE STRING ""Set compiler SIMD flags"")
    SET_PROPERTY(CACHE ENABLE_SIMD_FLAGS PROPERTY STRINGS none SSE2 AVX AVX2) 

    if(${ENABLE_SIMD_FLAGS} MATCHES ""AVX2"")
        add_definitions(/arch:AVX2)
        message(STATUS ""Enabling AVX2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX"")
        add_definitions(/arch:AVX)
        message(STATUS ""Enabling AVX instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE2"")
        add_definitions(/arch:SSE2)
        message(STATUS ""Enabling SSE2 instructions"")
    endif()
endif(MSVC)

if (APPLE)
   add_definitions(-D__unix__=1) #we use this for unix detection, but clang does not define it
endif(APPLE)

########################################################################
# rpath setup - http://www.cmake.org/Wiki/CMake_RPATH_handling
########################################################################
# use, i.e. don't skip the full RPATH for the build tree
option(CMAKE_SKIP_BUILD_RPATH ""skip rpath build"" FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
option(CMAKE_BUILD_WITH_INSTALL_RPATH ""build with install rpath"" FALSE)

# the RPATH to be used when installing, but only if it's not a system directory
option(CMAKE_AUTOSET_INSTALL_RPATH TRUE)
if(CMAKE_AUTOSET_INSTALL_RPATH)
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}"" isSystemDir)
IF(""${isSystemDir}"" STREQUAL ""-1"")
    SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}"")
ENDIF(""${isSystemDir}"" STREQUAL ""-1"")
endif(CMAKE_AUTOSET_INSTALL_RPATH)

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
option(CMAKE_INSTALL_RPATH_USE_LINK_PATH ""build with automatic rpath"" TRUE)

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
endif()

########################################################################
## lime suite build
########################################################################
add_subdirectory(src)
add_subdirectory(mcu_program)
add_subdirectory(LimeUtil)
add_subdirectory(QuickTest)

########################################################################
## SoapySDR bindings for LMS7 RFIC driver
########################################################################
add_subdirectory(SoapyLMS7)

########################################################################
## udev rules for linux usb
########################################################################
if (DEFINED UDEV_RULES_PATH)
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/udev-rules/64-limesuite.rules
        DESTINATION ${UDEV_RULES_PATH})
endif()

########################################################################
## Doxygen
########################################################################
find_package(Doxygen QUIET)
include(FeatureSummary)
include(CMakeDependentOption)
cmake_dependent_option(ENABLE_API_DOXYGEN ""Enable LMS API Doxygen documentation"" OFF ""DOXYGEN_FOUND"" OFF)
add_feature_info(LimeSuiteDocAPI ENABLE_API_DOXYGEN ""LMS API Doxygen documentation"")
if (ENABLE_API_DOXYGEN)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/DoxyfileAPI.in ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile @ONLY)
  add_custom_target(docAPI ALL
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile 
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating LMS API documentation with Doxygen"" VERBATIM
    )
endif()

if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile 
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating documentation with Doxygen"" VERBATIM
    )
endif()

########################################################################
# CMake Project config files
########################################################################
if (ENABLE_HEADERS AND ENABLE_LIBRARY)
    configure_file(
        ${PROJECT_SOURCE_DIR}/cmake/Modules/LimeSuiteConfigVersion.in.cmake
        ${PROJECT_BINARY_DIR}/LimeSuiteConfigVersion.cmake
    @ONLY)

    install(FILES
        ${PROJECT_SOURCE_DIR}/cmake/Modules/LimeSuiteConfig.cmake
        ${PROJECT_BINARY_DIR}/LimeSuiteConfigVersion.cmake
        DESTINATION lib${LIB_SUFFIX}/cmake/${PROJECT_NAME})
endif (ENABLE_HEADERS AND ENABLE_LIBRARY)

########################################################################
## freedesktop environment integration
########################################################################
add_subdirectory(Desktop)

########################################################################
## Octave plugin integration
########################################################################
add_subdirectory(octave)

#########################################################################
# summary
#########################################################################
include(FeatureSummary)
message(STATUS """")
message(STATUS ""######################################################"")
message(STATUS ""## ${PROJECT_NAME} enabled features"")
message(STATUS ""######################################################"")
feature_summary(WHAT ENABLED_FEATURES)
message(STATUS ""######################################################"")
message(STATUS ""## ${PROJECT_NAME} disabled features"")
message(STATUS ""######################################################"")
feature_summary(WHAT DISABLED_FEATURES)
message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}"")
message(STATUS ""Build timestamp: ${BUILD_TIMESTAMP}"")
message(STATUS ""Lime Suite version: ${LIME_SUITE_VERSION}"")
message(STATUS ""ABI/so version: ${LIME_SUITE_SOVER}"")
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/DownloadImages.cmake)

########################################################################
# uninstall target
########################################################################
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

#only add uninstall target if this is the top project
if(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})
add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif()


",3.1.3,3.1
40651,sourceryinstitute,opencoarrays,False,False,False,False,False,18,Fortran,2020-05-15 18:35:43+00:00,2015-04-21 19:32:26+00:00,128,1852,"cmake_minimum_required(VERSION 3.10)

cmake_policy(VERSION 3.10...3.14)

if(DEFINED ENV{SOURCE_DATE_EPOCH})
  set(SOURCE_DATE_EPOCH ""$ENV{SOURCE_DATE_EPOCH}"")
endif()

set(CMAKE_SKIP_RPATH ON
  CACHE BOOL ""Don't add a build-dir rpath"")
set(CMAKE_BUILD_WITH_INSTALL_RPATH ON
  CACHE BOOL ""Build using the install rpath"")
set(CMAKE_BUILD_RPATH_USE_ORIGIN ON
  CACHE BOOL ""Use relative rpaths"")
# Set the type/configuration of build to perform
set ( CMAKE_CONFIGURATION_TYPES ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"" ""CodeCoverage"" )
set ( CMAKE_BUILD_TYPE ""Release""
  CACHE STRING ""Select which configuration to build."" )
set_property ( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_CONFIGURATION_TYPES} )

# Add option and check environment to determine if developer tests should be run
set( _TF OFF )
if( NOT DEFINED ENV{OPENCOARRAYS_DEVELOPER})
  set ( ENV{OPENCOARRAYS_DEVELOPER} FALSE )
endif()
if($ENV{OPENCOARRAYS_DEVELOPER})
  set( _TF ON )
endif()
option(CAF_RUN_DEVELOPER_TESTS ""Run tests intended only for developers"" ${_TF})
mark_as_advanced(CAF_RUN_DEVELOPER_TESTS)
option( CAF_ENABLE_ISO_Fortran_BINDING
  ""Build and install F2018 C interop iso_fortran_binding.h header; experimental!""
  ${_TF} )


# Name project and specify source languages
# Parse version from .VERSION file so that more info can be added and easier to get from scripts
file(STRINGS "".VERSION"" first_line
  LIMIT_COUNT 1
  )

string(REGEX MATCH ""[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?""
  OpenCoarraysVersion ""${first_line}"")

if((NOT (OpenCoarraysVersion MATCHES ""[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?"")) AND (EXISTS ""${CMAKE_SOURCE_DIR}/.git""))
  find_package(Git QUIET)
  if(GIT_FOUND)
    execute_process(COMMAND ""${GIT_EXECUTABLE}"" describe --abbrev=0
      WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
      RESULT_VARIABLE git_status
      OUTPUT_VARIABLE git_output
      OUTPUT_STRIP_TRAILING_WHITESPACE)
    if((git_status STREQUAL ""0"") AND (git_output MATCHES ""[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?""))
      set(OpenCoarraysVersion ""${git_output}"")
    endif()
    execute_process(COMMAND ""${GIT_EXECUTABLE}"" describe --always
      WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
      RESULT_VARIABLE git_status
      OUTPUT_VARIABLE full_git_describe
      OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(NOT (git_status STREQUAL ""0""))
      set(full_git_describe NOTFOUND)
    endif()
    # Create a source distribution target using git archive
    # e.g., `make dist` will package a release using current git state
    add_custom_target(dist
      COMMAND ""${CMAKE_COMMAND}"" -P ""${CMAKE_SOURCE_DIR}/cmake/makeDist.cmake"" ""${CMAKE_SOURCE_DIR}"" ""${CMAKE_BINARY_DIR}""
      VERBATIM)
  else()
    message( WARNING ""Could not find git executable!"")
  endif()
endif()

if(NOT (OpenCoarraysVersion MATCHES ""[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?""))
  message( WARNING ""Could not extract version from git, falling back on .VERSION, line 3."")
  file(STRINGS "".VERSION"" OpenCoarraysVersion
  REGEX ""[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?""
  )
endif()

if(NOT full_git_describe)
  set(full_git_describe ${OpenCoarraysVersion})
endif()

string(REGEX REPLACE ""-rc[0-9]+$""
       "".0"" OPENCOARRAYS_CMAKE_PROJECT_VERSION
       ""${OpenCoarraysVersion}"")

file(READ ""${CMAKE_CURRENT_LIST_DIR}/cmake/Banner.txt.in"" OC_BANNER)
string(CONFIGURE ""${OC_BANNER}"" OC_BANNER @ONLY)
string(STRIP ""${OC_BANNER}"" OC_BANNER)
message(STATUS ""${OC_BANNER}"")

if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/.git"")
  message( STATUS ""Build from git repository detected"")
endif()

message( STATUS ""Running with CMake from: ${CMAKE_COMMAND}"" )
message( STATUS ""Current source dir (for OpenCoarrays): ${CMAKE_CURRENT_SOURCE_DIR}"")

project(opencoarrays VERSION ""${OPENCOARRAYS_CMAKE_PROJECT_VERSION}"" LANGUAGES C Fortran)

if(DEFINED CMAKE_BUILD_TYPE AND ""${CMAKE_BUILD_TYPE}"" MATCHES ""[Rr][Ee][Ll]"")
  if(CMAKE_Fortran_COMPILER_ID MATCHES ""GNU"")
    set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -fno-working-directory"")
  endif()
  set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -fdebug-prefix-map=${CMAKE_SOURCE_DIR}=."")
  if(CMAKE_C_COMPILER_ID MATCHES ""GNU"")
    set(CMAKE_C_FLAGS       ""${CMAKE_C_FLAGS} -fno-working-directory"")
  endif()
  set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fdebug-prefix-map=${CMAKE_SOURCE_DIR}=."")
endif()

message( STATUS ""Building OpenCoarrays version: ${full_git_describe}"" )
set(OpenCoarrays_dist_string ""OpenCoarrays-${full_git_describe}"")
message( STATUS ""Building for target architecture: ${CMAKE_SYSTEM_PROCESSOR}"" )

#Print an error message on an attempt to build inside the source directory tree:
if (""${CMAKE_CURRENT_SOURCE_DIR}"" STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}"")
  message(FATAL_ERROR ""ERROR! ""
    ""CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}""
    "" == CMAKE_CURRENT_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}""
    ""\nThis archive does not support in-source builds:\n""
    ""You must now delete the CMakeCache.txt file and the CMakeFiles/ directory under ""
    ""the 'src' source directory or you will not be able to configure correctly!""
    ""\nYou must now run something like:\n""
    ""  $ rm -r CMakeCache.txt CMakeFiles/""
    ""\n""
    ""Please create a directory outside the opencoarrays source tree and build under that outside directory ""
    ""in a manner such as\n""
    ""  $ mkdir build-opencarrays\n""
    ""  $ cd build-opencoarrays\n""
    ""  $ CC=gcc FC=gfortran cmake -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/path/to/install/dir /path/to/opencoarrays/src/dir \n""
    ""\nsubstituting the appropriate syntax for your shell (the above line assumes the bash shell).""
    )
endif()

# Silence warnings about dereferencing unset variables
if(NOT CMAKE_REQUIRED_FLAGS)
  set(CMAKE_REQUIRED_FLAGS """")
endif()
if(NOT CMAKE_REQUIRED_LIBRARIES)
  set(CMAKE_REQUIRED_LIBRARIES """")
endif()
if(NOT CMAKE_REQUIRED_INCLUDES)
  set(CMAKE_REQUIRED_INCLUDES """")
endif()

#Report untested Fortran compiler unless explicitly directed to build all examples.
if (""${CMAKE_Fortran_COMPILER_ID}"" MATCHES ""GNU"" )
  set(gfortran_compiler true)
  set ( CMAKE_C_FLAGS_CODECOVERAGE ""-fprofile-arcs -ftest-coverage -O0""
    CACHE STRING ""Code coverage C compiler flags"")
  set ( CMAKE_Fortran_FLAGS_CODECOVERAGE ""-fprofile-arcs -ftest-coverage -O0""
    CACHE STRING ""Code coverage Fortran compiler flags"")
else()
  message(WARNING
    ""\n""
    ""Attempting to build with untested Fortran compiler: ${CMAKE_Fortran_COMPILER_ID}. ""
    ""Please report any failures to opencoarrays@googlegroups.com\n\n""
  )
endif()

#-----------------------------------------------------------------
# Set CMAKE_Fortran_COMPILER_VERSION if CMake doesn't do it for us
#-----------------------------------------------------------------
if (  NOT CMAKE_Fortran_COMPILER_VERSION )
  if ( NOT (CMAKE_VERSION VERSION_LESS 3.3.1) )
    message( AUTHOR_WARNING
     ""CMake ${CMAKE_VERSION} should know about Fortran compiler versions but is missing CMAKE_Fortran_COMPILER_VERSION variable.""
    )
  endif()
  # No CMAKE_Fortran_COMPILER_VERSION set, build our own
  # Try extracting it directly from ISO_FORTRAN_ENV's compiler_version
  # Write program for introspection
  file( WRITE ""${CMAKE_BINARY_DIR}/get_compiler_ver.f90""
    ""program main
     use iso_fortran_env, only: compiler_version, output_unit
     write(output_unit,'(a)') compiler_version()
end program""
  )
  try_run( PROG_RAN COMPILE_SUCCESS
    ""${CMAKE_BINARY_DIR}"" ""${CMAKE_BINARY_DIR}/get_compiler_ver.f90""
    RUN_OUTPUT_VARIABLE VER_STRING
  )
  if ( COMPILE_SUCCESS )
    string( REGEX MATCH ""[0-9]+\\.[0-9]+(\\.[0-9]+)?""
      DETECTED_VER ""${VER_STRING}""
    )
    message( STATUS ""Detected Fortran compiler as ${VER_STRING}"" )
    message( STATUS ""Extracted version number: ${DETECTED_VER}"" )
  endif()
  if( ( NOT COMPILE_SUCCESS ) OR ( NOT DETECTED_VER ) )
    message( WARNING ""Could not reliably detect Fortran compiler version. We'll infer it from
the C compiler if it matches the Fortran compiler ID."" )
  endif()
  if( ""${CMAKE_C_COMPILER_ID}"" MATCHES ""${CMAKE_Fortran_COMPILER_ID}"" )
    set( DETECTED_VER ""${CMAKE_C_COMPILER_VERSION}"" )
  else()
    message( FATAL_ERROR ""Exhausted all possible means of detecting the Fortran compiler version, cannot proceed!"" )
  endif()
  set( CMAKE_Fortran_COMPILER_VERSION ""${DETECTED_VER}"" )
endif()

if(CMAKE_BUILD_TYPE MATCHES ""Debug|DEBUG|debug"")
  add_definitions(-DEXTRA_DEBUG_OUTPUT)
endif()

  # We have populated CMAKE_Fortran_COMPILER_VERSION if it was missing
  if(gfortran_compiler AND (CMAKE_Fortran_COMPILER_VERSION VERSION_GREATER 5.0.0))
    set(opencoarrays_aware_compiler true)
    add_definitions(-DPREFIX_NAME=_gfortran_caf_)
  else()
    set(opencoarrays_aware_compiler false)
    add_definitions(-DPREFIX_NAME=_caf_extensions_)
  endif()
  if(gfortran_compiler AND (CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 5.4.0))
    # GCC patch to fix issue accepted for 5.4 release
    # See https://github.com/sourceryinstitute/opencoarrays/issues/28 and
    # https://groups.google.com/forum/#!msg/opencoarrays/RZOwwYTqG80/46S9eL696dgJ
    message( STATUS ""Disabling optimization flags due to GCC < 5.4 bug"")
    set(CMAKE_Fortran_FLAGS_RELEASE -O0
      CACHE STRING ""Flags used by the compiler during release builds."" FORCE)
    set(CMAKE_Fortran_FLAGS_RELWITHDEBINFO ""-g -DNDEBUG -O0""
      CACHE STRING ""Flags used by the compiler during release builds with debug info"" FORCE)
    set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -O0"")
  endif()
  if ( gfortran_compiler AND ( NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0 ) )
    add_definitions(-DGCC_GE_7) # Tell library to build against GFortran 7.x bindings b/c we might be using clang for C
  endif()
  if ( gfortran_compiler AND ( NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 8.0.0 ) )
    add_definitions(-DGCC_GE_8) # Tell library to build against GFortran 8.x bindings w/ descriptor change
  endif()

if(gfortran_compiler)
  set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
  set(CMAKE_REQUIRED_FLAGS $<$<COMPILE_LANGUAGE:Fortran>:-fcoarray=single -ffree-form>)
endif()
include(CheckFortranSourceCompiles)
CHECK_Fortran_SOURCE_COMPILES(""
  program main
    implicit none
    integer :: i
    i = this_image()
  end program
"" Check_Simple_Coarray_Fortran_Source_Compiles)
if(gfortran_compiler)
  set (CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})
  unset(OLD_REQUIRED_FLAGS)
endif()


#----------------------------------------------------------------------------
# Find MPI and set some flags so that FC and CC can point to gfortran and gcc
#----------------------------------------------------------------------------

# If the user passes FC=mpifort etc. check and prefer that location
get_filename_component( FTN_COMPILER_NAME ""${CMAKE_Fortran_COMPILER}""
  NAME )
get_filename_component( C_COMPILER_NAME ""${CMAKE_C_COMPILER}""
  NAME )
get_filename_component( FTN_COMPILER_DIR ""${CMAKE_Fortran_COMPILER}""
  REALPATH )
get_filename_component( C_COMPILER_DIR ""${CMAKE_C_COMPILER}""
  REALPATH )

if (FTN_COMPILER_NAME MATCHES ""^[mM][pP][iI]"")
  message( DEPRECATION ""Setting the Fortran compiler to an MPI wrapper script is deprecated!"")
  set (MPI_Fortran_COMPILER ""${CMAKE_Fortran_COMPILER}"")
endif()
if (C_COMPILER_NAME MATCHES ""^[mM][pP][iI]"")
  message( DEPRECATION ""Setting the Fortran compiler to an MPI wrapper script is deprecated!"")
  set (MPI_C_COMPILER ""${CMAKE_C_COMPILER}"")
endif()

find_package( MPI )

if ( (NOT MPI_C_FOUND) OR (NOT MPI_Fortran_FOUND) OR (NOT MPIEXEC))
  # Get default install location of MPICH from install.sh
  message(WARNING ""Could not find all MPI components!"")
  message(WARNING ""
MPI_C_FOUND        = ${MPI_C_FOUND}
MPI_Fortran_FOUND  = ${MPI_Fortran_FOUND}
MPIEXEC = ${MPIEXEC}
"")
  execute_process( COMMAND ""./install.sh"" -P mpich
    WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}""
    OUTPUT_VARIABLE DEFAULT_MPICH_INSTALL_LOC
    OUTPUT_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  find_program (MY_MPI_EXEC NAMES mpirun mpiexec lamexec srun
    PATHS ""${DEFAULT_MPICH_INSTALL_LOC}"" ENV PATH
    HINTS ""${FTN_COMPILER_DIR}"" ""${C_COMPILER_DIR}""
    PATH_SUFFIXES bin)
  set ( MPI_HOME ""${MPI_HOME}"" ""${MY_MPI_EXEC}"" ""${MY_MPI_EXEC}/.."" )
  find_package( MPI REQUIRED )
endif()
list(REMOVE_DUPLICATES MPI_Fortran_INCLUDE_PATH)

# Test for consistent MPI environment
if (NOT MPIEXEC)
  message ( ERROR ""CMake failed to find `mpiexec` or similar. If building with `./install.sh` please
report this bug to the OpenCoarrays developers at
https://github.com/sourceryinstitute/opencoarrays/issues, otherwise point CMake
to the desired MPI runtime."")
else()
  add_definitions(-DHAVE_MPI)
endif()

get_filename_component(MPIEXEC_RELATIVE_LOC ""${MPIEXEC}""
  PROGRAM)
get_filename_component(MPIEXEC_ABS_LOC ""${MPIEXEC_RELATIVE_LOC}""
  REALPATH)
get_filename_component(MPIEXEC_DIR ""${MPIEXEC_ABS_LOC}""
  DIRECTORY)

get_filename_component(MPICC_RELATIVE_LOC ""${MPI_C_COMPILER}""
  PROGRAM)
get_filename_component(MPICC_ABS_LOC ""${MPICC_RELATIVE_LOC}""
  REALPATH)
get_filename_component(MPICC_DIR ""${MPICC_ABS_LOC}""
  DIRECTORY)

get_filename_component(MPIFC_RELATIVE_LOC ""${MPI_Fortran_COMPILER}""
  PROGRAM)
get_filename_component(MPIFC_ABS_LOC ""${MPIFC_RELATIVE_LOC}""
  REALPATH)
get_filename_component(MPIFC_DIR ""${MPIFC_ABS_LOC}""
  DIRECTORY)

if ((MPIEXEC_DIR STREQUAL MPICC_DIR) AND (MPIEXEC_DIR STREQUAL MPIFC_DIR))
  message ( STATUS ""MPI runtime and compile time environments appear to be consistent"")
else()
  message ( WARNING ""MPIEXEC is in \""${MPIEXEC_DIR},\""
which differs from the location of MPICC and/or MPIFC which are in
\""${MPICC_DIR}\"" and \""${MPIFC_DIR},\"" respectively.
This is likely indicative of a problem. If building with `./install.sh` please report
this to the OpenCoarrays developers by filing a new issue at:
https://github.com/sourceryinstitute/OpenCoarrays/issues/new"")
endif()

#-----------------------------------------------
# Work around bug #317 present on fedora systems
#-----------------------------------------------
if( (MPI_C_LINK_FLAGS MATCHES ""noexecstack"") OR (MPI_Fortran_LINK_FLAGS MATCHES ""noexecstack"") )
  message ( WARNING
""The `noexecstack` linker flag was found in the MPI_<lang>_LINK_FLAGS variable. This is
known to cause segmentation faults for some Fortran codes. See, e.g.,
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71729 or
https://github.com/sourceryinstitute/OpenCoarrays/issues/317.

`noexecstack` is being replaced with `execstack`""
    )
  string(REPLACE ""noexecstack""
    ""execstack"" MPI_C_LINK_FLAGS_FIXED ${MPI_C_LINK_FLAGS})
  string(REPLACE ""noexecstack""
    ""execstack"" MPI_Fortran_LINK_FLAGS_FIXED ${MPI_Fortran_LINK_FLAGS})
  set(MPI_C_LINK_FLAGS ""${MPI_C_LINK_FLAGS_FIXED}"" CACHE STRING
    ""MPI C linking flags"" FORCE)
  set(MPI_Fortran_LINK_FLAGS ""${MPI_Fortran_LINK_FLAGS_FIXED}"" CACHE STRING
    ""MPI Fortran linking flags"" FORCE)
endif()

#--------------------------------------------------------
# Make sure a simple ""hello world"" C mpi program compiles
#--------------------------------------------------------
set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_FLAGS ${MPI_C_COMPILE_FLAGS} ${MPI_C_LINK_FLAGS})
set(OLD_INCLUDES ${CMAKE_REQUIRED_INCLUDES})
set(CMAKE_REQUIRED_INCLUDES ${MPI_C_INCLUDE_PATH})
set(OLD_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
set(CMAKE_REQUIRED_LIBRARIES ${MPI_C_LIBRARIES})
include (CheckCSourceCompiles)
CHECK_C_SOURCE_COMPILES(""
#include <mpi.h>
#include <stdio.h>
int main(int argc, char** argv) {
  MPI_Init(NULL, NULL);
  int world_size;
  MPI_Comm_size(MPI_COMM_WORLD, &world_size);
  int world_rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
  char processor_name[MPI_MAX_PROCESSOR_NAME];
  int name_len;
  MPI_Get_processor_name(processor_name, &name_len);
  printf('Hello world from processor %s, rank %d out of %d processors',
         processor_name, world_rank, world_size);
  MPI_Finalize();
}""
MPI_C_COMPILES)
set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_INCLUDES ${OLD_INCLUDES})
set(CMAKE_REQUIRED_LIBRARIES ${OLD_LIBRARIES})
unset(OLD_REQUIRED_FLAGS)
unset(OLD_INCLUDES)
unset(OLD_LIBRARIES)

if (NOT MPI_C_COMPILES)
  message(FATAL_ERROR ""MPI_C is missing! ""
    ""Try setting MPI_C_COMPILER to the appropriate C compiler wrapper script and reconfigure. ""
    ""i.e., `cmake -DMPI_C_COMPILER=/path/to/mpicc ..` or set it by editing the cache using ""
    ""cmake-gui or ccmake.""
    )
endif()

#--------------------------------------------------------------
# Make sure a simple ""hello world"" Fortran mpi program compiles
# Try using mpi.mod first then fall back on includ 'mpif.h'
#--------------------------------------------------------------
set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_FLAGS ""-ffree-form"" ${MPI_Fortran_COMPILE_FLAGS} ${MPI_Fortran_LINK_FLAGS})
set(OLD_INCLUDES ${CMAKE_REQUIRED_INCLUDES})
set(CMAKE_REQUIRED_INCLUDES ${MPI_Fortran_INCLUDE_PATH})
set(OLD_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
set(CMAKE_REQUIRED_LIBRARIES ${MPI_Fortran_LIBRARIES})
include (CheckFortranSourceCompiles)
CHECK_Fortran_SOURCE_COMPILES(""
program mpi_hello
use mpi
implicit none
integer :: ierr, mpi_world_size, mpi_world_rank, res_len
character*(MPI_MAX_PROCESSOR_NAME) :: proc
call mpi_init(ierr)
call mpi_comm_size(MPI_COMM_WORLD,mpi_world_size,ierr)
call mpi_comm_rank(MPI_COMM_WORLD,mpi_world_rank,ierr)
call mpi_get_processor_name(proc,res_len,ierr)
write(*,*) 'Hello from processor ', trim(proc), ' rank ', mpi_world_rank, ' out of ', mpi_world_size, '.'
call mpi_finalize(ierr)
end program
""
MPI_Fortran_MODULE_COMPILES)
set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_INCLUDES ${OLD_INCLUDES})
set(CMAKE_REQUIRED_LIBRARIES ${OLD_LIBRARIES})
unset(OLD_REQUIRED_FLAGS)
unset(OLD_INCLUDES)
unset(OLD_LIBRARIES)

#--------------------------------
# If that failed try using mpif.h
#--------------------------------
set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_FLAGS ""-ffree-form"" ${MPI_Fortran_COMPILE_FLAGS} ${MPI_Fortran_LINK_FLAGS})
set(OLD_INCLUDES ${CMAKE_REQUIRED_INCLUDES})
set(CMAKE_REQUIRED_INCLUDES ${MPI_Fortran_INCLUDE_PATH})
set(OLD_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
set(CMAKE_REQUIRED_LIBRARIES ${MPI_Fortran_LIBRARIES})
include (CheckFortranSourceCompiles)
CHECK_Fortran_SOURCE_COMPILES(""
program mpi_hello
implicit none
include 'mpif.h'
integer :: ierr, mpi_world_size, mpi_world_rank, res_len
character*(MPI_MAX_PROCESSOR_NAME) :: proc
call mpi_init(ierr)
call mpi_comm_size(MPI_COMM_WORLD,mpi_world_size,ierr)
call mpi_comm_rank(MPI_COMM_WORLD,mpi_world_rank,ierr)
call mpi_get_processor_name(proc,res_len,ierr)
write(*,*) 'Hello from processor ', trim(proc), ' rank ', mpi_world_rank, ' out of ', mpi_world_size, '.'
call mpi_finalize(ierr)
end program
""
  MPI_Fortran_INCLUDE_COMPILES)
set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})
set(CMAKE_REQUIRED_INCLUDES ${OLD_INCLUDES})
set(CMAKE_REQUIRED_LIBRARIES ${OLD_LIBRARIES})
unset(OLD_REQUIRED_FLAGS)
unset(OLD_INCLUDES)
unset(OLD_LIBRARIES)

if ( (NOT MPI_Fortran_MODULE_COMPILES) AND (NOT MPI_Fortran_INCLUDE_COMPILES) )
  message ( WARNING ""It appears that the Fortran MPI compiler is not working. ""
    ""For OpenCoarrays Aware compilers, this may be irrelavent: ""
    ""  The src/extensions/opencoarrays.F90 module will be disabled, but it is ""
    ""  possible that the build will succeed, despite this fishy circumstance.""
    )
endif()

if ( MPI_Fortran_MODULE_COMPILES )
  add_definitions(-DMPI_WORKING_MODULE)
else()
  message ( WARNING ""It appears that MPI was built with a different Fortran compiler. ""
    ""It is possible that this may cause unpredictable behavior. The build will continue ""
    ""using `mpif.h` BUT please report any suspicious behavior to the OpenCoarrays ""
    ""developers.""
    )
endif()

#----------------
# Setup MPI flags
#----------------
if(NOT CMAKE_C_COMPILE_FLAGS)
  set(CMAKE_C_COMPILE_FLAGS """")
endif()
if(NOT CMAKE_C_LINK_FLAGS)
  set(CMAKE_C_LINK_FLAGS """")
endif()
if(NOT CMAKE_Fortran_COMPILE_FLAGS)
  set(CMAKE_Fortran_COMPILE_FLAGS """")
endif()
if(NOT CMAKE_Fortran_LINK_FLAGS)
  set(CMAKE_Fortran_LINK_FLAGS """")
endif()
set(CMAKE_C_COMPILE_FLAGS ""${CMAKE_C_COMPILE_FLAGS} ${MPI_C_COMPILE_FLAGS}"")
set(CMAKE_C_LINK_FLAGS ""${CMAKE_C_LINK_FLAGS} ${MPI_C_LINK_FLAGS}"")
set(CMAKE_Fortran_COMPILE_FLAGS ""${CMAKE_Fortran_COMPILE_FLAGS} ${MPI_Fortran_COMPILE_FLAGS}"")
set(CMAKE_Fortran_LINK_FLAGS ""${CMAKE_Fortran_LINK_FLAGS} ${MPI_Fortran_LINK_FLAGS}"")

#---------------------------------------------------
# Use standardized GNU install directory conventions
#---------------------------------------------------
include(GNUInstallDirs)
set(mod_dir_tail ""${OpenCoarrays_dist_string}_${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}"")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${OpenCoarrays_dist_string}-tests"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}"")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}"")

#-----------------
# Install manpages
#-----------------
install(FILES ""${CMAKE_SOURCE_DIR}/doc/man/man1/caf.1"" ""${CMAKE_SOURCE_DIR}/doc/man/man1/cafrun.1""
  DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  COMPONENT documentation)

#---------------------------------------------------
# Define macro for compiling with caf wrapper script
#---------------------------------------------------
if(APPLE)
  find_program(CODESIGN codesign)
endif()

function(caf_compile_executable target main_depend)
  set(includes """")
  foreach(includedir ${MPI_Fortran_INCLUDE_PATH})
    list(APPEND includes ""-I${includedir}"")
  endforeach()
  string(TOUPPER ""${CMAKE_BUILD_TYPE}"" build_type)
  separate_arguments(config_Fortran_flags UNIX_COMMAND ""${CMAKE_Fortran_FLAGS_${build_type}}"")
  get_directory_property( DirDefs DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}"" COMPILE_DEFINITIONS )
  set(localDefs """")
  foreach(d ${DirDefs})
    list(APPEND localDefs ""-D${d}"")
  endforeach()
  add_custom_command(OUTPUT ""${target}""
    COMMAND ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/caf""
            ${includes} ${localDefs} ${config_Fortran_flags}
            -o ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${target}""
            ""${CMAKE_CURRENT_SOURCE_DIR}/${main_depend}""
            $<TARGET_FILE:opencoarrays_test_utilities>
            $<TARGET_FILE:opencoarrays_mod>
            ${ARGN}
    DEPENDS ""${main_depend}"" ${ARGN} caf_mpi_static opencoarrays_test_utilities opencoarrays_mod
    VERBATIM
    )
  add_custom_target(""build_${target}"" ALL
    DEPENDS ""${target}"")
endfunction(caf_compile_executable)

enable_testing()

#--------------------------------------------------------
# Setup shellcheck if present for testing/linting scripts
#--------------------------------------------------------
find_program(SHELLCHECK_EXE shellcheck
  DOC ""Path to shellcheck executable for linting scripts""
  )
if (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER})
  if(NOT SHELLCHECK_EXE)
    message( AUTHOR_WARNING ""OpenCoarrays developers should install shellcheck to test/lint all shell scripts.
    See https://github.com/koalaman/shellcheck#installing for info on obtaining shellcheck."")
  endif()
endif()

function(lint_script script_dir script_name)
  if (SHELLCHECK_EXE)
    add_test(NAME ""shellcheck:${script_name}""
      COMMAND ${SHELLCHECK_EXE} -x ""${script_dir}/${script_name}""
      WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}"")
  elseif (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER})
    message( AUTHOR_WARNING ""test: shellcheck:${script_name} not run because shellcheck not installed."" )
  endif()
endfunction()

#-----------------------------------------------
# Setup script style testing & enforcement macro
#-----------------------------------------------

find_program(style_pl style.pl ""${CMAKE_SOURCE_DIR}/developer-scripts/"")
function(check_script_style script_full_path)
  if(style_pl)
    add_test(NAME ""style:${script_full_path}""
      COMMAND ""${style_pl}"" ""${script_full_path}"")
  endif()
endfunction()

#------------------------------------------------------------------------------
# Add custom properties on targets for controling number of images during tests
#------------------------------------------------------------------------------
define_property(TARGET
  PROPERTY MIN_IMAGES
  BRIEF_DOCS ""Minimum allowable images for the test <integer>""
  FULL_DOCS ""Property to mark executable targets run as tests that they require at least <MIN_IMAGES> images to run""
  )

define_property(TARGET
  PROPERTY POWER_2_IMGS
  BRIEF_DOCS ""True if test must be run with a power of 2 images (T/F)""
  FULL_DOCS ""Property to mark executable targets run as tests that they require 2^n images.""
  )


#-------------------------------
# Recurse into the src directory
#-------------------------------
add_subdirectory(src)

#-----------------------------------------------------
# Publicize installed location to other CMake projects
#-----------------------------------------------------
install(EXPORT OpenCoarraysTargets
  NAMESPACE
    OpenCoarrays::
  DESTINATION
    ""${CMAKE_INSTALL_LIBDIR}/cmake/opencoarrays""
)
include(CMakePackageConfigHelpers) # standard CMake module
write_basic_package_version_file(
  ""${CMAKE_CURRENT_BINARY_DIR}/OpenCoarraysConfigVersion.cmake""
  VERSION ""${opencoarrays_VERSION}""
  COMPATIBILITY AnyNewerVersion
)
configure_file(""${CMAKE_SOURCE_DIR}/cmake/pkg/OpenCoarraysConfig.cmake.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/OpenCoarraysConfig.cmake"" @ONLY)

install(
  FILES
    ""${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/OpenCoarraysConfig.cmake""
    ""${CMAKE_CURRENT_BINARY_DIR}/OpenCoarraysConfigVersion.cmake""
  DESTINATION
    ""${CMAKE_INSTALL_LIBDIR}/cmake/opencoarrays""
)

#------------------------------------------
# Add portable unistall command to makefile
#------------------------------------------
# Adapted from the CMake Wiki FAQ
configure_file ( ""${CMAKE_SOURCE_DIR}/cmake/uninstall.cmake.in"" ""${CMAKE_BINARY_DIR}/uninstall.cmake""
    @ONLY)

add_custom_target ( uninstall
  COMMAND ${CMAKE_COMMAND} -P ""${CMAKE_BINARY_DIR}/uninstall.cmake"" )

add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure)
# See JSON-Fortran's CMakeLists.txt file to find out how to get the check target to depend
# on the test executables

#------------------------------------
# Add command to hash installed files
#------------------------------------
configure_file( ""${CMAKE_SOURCE_DIR}/cmake/hash-installed.cmake.in"" ""${CMAKE_BINARY_DIR}/hash-installed.cmake""
  @ONLY)
add_custom_target( hash_installed
  COMMAND ${CMAKE_COMMAND} -P ""${CMAKE_BINARY_DIR}/hash-installed.cmake"")

#---------------------------------------------------------------------------------------
# Define macro for adding CAF tests, and ensuring proper flags are passed to MPI runtime
#---------------------------------------------------------------------------------------
# Test for OpenMPI moved to src/mpi/CMakeLists.txt and passed back up through set(... PARENT_SCOPE)
function(add_caf_test name num_caf_img test_target)
  # Function to add MPI tests.
  if(TARGET ${test_target})
    get_target_property(min_test_imgs ${test_target} MIN_IMAGES)
  elseif(TARGET build_${test_target})
    get_target_property(min_test_imgs build_${test_target} MIN_IMAGES)
  endif()
  if(min_test_imgs)
    if(num_caf_img LESS min_test_imgs)
      message( FATAL_ERROR ""Test ${name} requires ${min_test_imgs} but was only given ${num_caf_images}"" )
    endif()
  endif()
  # Add a host file for OMPI
  if ( openmpi )
    set(test_parameters --hostfile ${CMAKE_BINARY_DIR}/hostfile)
  endif()
  if ( ((N_CPU LESS num_caf_img) OR (N_CPU EQUAL 0)) )
    message(STATUS ""Test ${name} is oversubscribed: ${num_caf_img} CAF images requested with ${N_CPU} system processor available."")
    if ( openmpi )
      if (min_test_imgs)
	set( num_caf_img ${min_test_imgs} )
      elseif ( N_CPU LESS 2 )
        set( num_caf_img 2 )
      endif()
      set (test_parameters ${test_parameters} --oversubscribe)
      message( STATUS ""Open-MPI back end detected, passing --oversubscribe for oversubscribed test, ${name}, with ${num_caf_img} ranks/images."" )
    endif()
  endif()
  if( openmpi)
    if(NOT DEFINED ENV{TRAVIS})
      set (test_parameters ${test_parameters} --allow-run-as-root)
    endif()
  endif()
  set(test_parameters -np ${num_caf_img} ${test_parameters})
  if(DEFINED ARGN)
    add_test(NAME ${name} COMMAND ""bash"" ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/cafrun"" ${test_parameters} ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test_target}"" ${ARGN})
  else()
    add_test(NAME ${name} COMMAND ""bash"" ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/cafrun"" ${test_parameters} ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test_target}"")
  endif()
  set_property(TEST ${name} PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")
endfunction(add_caf_test)

#--------------
# Add OCA tests
#--------------

if(opencoarrays_aware_compiler)
  if (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER})
    message ( STATUS ""Running Developer tests is enabled. Some tests may fail for open issues."" )
  endif()
  # Unit tests targeting each libcaf_mpi function, argument, and branch of code
  add_caf_test(initialize_mpi 2 initialize_mpi)
  add_caf_test(register 2 register)
  add_caf_test(register_vector 2 register_vector)
  add_caf_test(register_alloc_vector 2 register_alloc_vector)
  add_caf_test(allocate_as_barrier 2 allocate_as_barrier)
  if(gfortran_compiler AND (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
    if( CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0 )
      message( AUTHOR_WARNING ""Developer tests requested and GFortran < 7: test allocate_as_barrier_proc may fail"" )
    endif()
    add_caf_test(allocate_as_barrier_proc 8 allocate_as_barrier_proc)
  endif()
  if (gfortran_compiler AND (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
    if (CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0)
      message( AUTHOR_WARNING ""Allocatable components of coarray derived type developer tests enabled, despite lack of support in GFortran < 7\n These tests should fail."" )
    endif()
    add_caf_test(register_alloc_comp_1 2 register_alloc_comp_1)
    add_caf_test(register_alloc_comp_2 2 register_alloc_comp_2)
    add_caf_test(register_alloc_comp_3 2 register_alloc_comp_3)
    add_caf_test(async_comp_alloc 6 async_comp_alloc)
    add_caf_test(async_comp_alloc_2 2 async_comp_alloc_2)
    add_caf_test(comp_allocated_1 2 comp_allocated_1)
    add_caf_test(comp_allocated_2 2 comp_allocated_2)
    add_caf_test(alloc_comp_get_convert_nums 2 alloc_comp_get_convert_nums)
    if(NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 8)
      add_caf_test(team_number 8 team_number)
      add_caf_test(teams_subset 3 teams_subset)
      add_caf_test(get_communicator 3  get_communicator)
      add_caf_test(teams_coarray_get 5 teams_coarray_get)
      add_caf_test(teams_coarray_get_by_ref 5 teams_coarray_get_by_ref)
      add_caf_test(teams_coarray_send 5 teams_coarray_send)
      add_caf_test(teams_coarray_send_by_ref 5 teams_coarray_send_by_ref)
      add_caf_test(teams_coarray_sendget 5 teams_coarray_sendget)
      add_caf_test(sync_team 8 sync_team)
      add_caf_test(alloc_comp_multidim_shape 2 alloc_comp_multidim_shape)
    endif()
  endif()

  if (gfortran_compiler)
    if((NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
      add_caf_test(send_convert_nums 2 send_convert_nums)
      add_caf_test(sendget_convert_nums 3 sendget_convert_nums)
      add_caf_test(sendget_convert_char_array 3 sendget_convert_char_array)
    else()
      message( AUTHOR_WARNING ""Skipping the following tests due to GFortran < 7.0.0 lack of compatibility:
        sendget_convert_nums.f90
        sendget_convert_char_array.f90
        send_convert_nums.f90"")
    endif()
    if((NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.3.0) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
      add_caf_test(send_convert_char_array 2 send_convert_char_array)
      add_caf_test(alloc_comp_send_convert_nums 2 alloc_comp_send_convert_nums)
    elseif((NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.4.0) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
      add_caf_test(send-strided-self 2 send-strided-self)
    endif()
    if((CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.3.0) AND (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
      message( AUTHOR_WARNING ""Skipping the following tests to GFortran < 7.3.0 lack of compatibility:
        send_convert_char_array.f90
        alloc_comp_send_convert_nums.f90"")
    endif()
    if((CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.4.0) AND (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
      message( AUTHOR_WARNING ""Skipping the following test to GFortran < 7.4.0 lack of compatibility:
        send-strided-self.f90"")
    endif()
  endif()

  # Pure get tests
  add_caf_test(get_array 2 get_array)
  add_caf_test(get_self 2 get_self)
  add_caf_test(get_convert_nums 2 get_convert_nums)
  add_caf_test(get_convert_char_array 2 get_convert_char_array)
  add_caf_test(get_with_offset_1d 2 get_with_offset_1d)
  add_caf_test(whole_get_array 2 whole_get_array)
  add_caf_test(strided_get 2 strided_get)

  # Pure send tests
  add_caf_test(send_array 2 send_array)
  add_caf_test(convert-before-put 3 convert-before-put)
  add_caf_test(send_with_vector_index 2 send_with_vector_index)

  # Pure sendget tests
  add_caf_test(strided_sendget 3 strided_sendget)
  add_caf_test(get_with_vector_index 4 get_with_vector_index)

  # Collective subroutine tests
  add_caf_test(co_sum 4 co_sum_test)
  add_caf_test(co_broadcast 4 co_broadcast_test)
  add_caf_test(co_broadcast_derived_type 4 co_broadcast_derived_type_test)
  if((gfortran_compiler AND (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 10.0.0)) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
    add_caf_test(co_broadcast_allocatable_components 4 co_broadcast_allocatable_components_test)
  endif()
  add_caf_test(co_min 4 co_min_test)
  add_caf_test(co_max 4 co_max_test)
  add_caf_test(co_reduce 4 co_reduce_test)
  add_caf_test(co_reduce_res_im 4 co_reduce_res_im)
  add_caf_test(co_reduce_string 4 co_reduce_string)
  add_caf_test(syncimages_status 8 syncimages_status)
  add_caf_test(sync_ring_abort_np3 3 sync_image_ring_abort_on_stopped_image)
  add_caf_test(sync_ring_abort_np7 7 sync_image_ring_abort_on_stopped_image)
  add_caf_test(simpleatomics 8 atomics)

  # Synchronization tests
  add_caf_test(syncall 8 syncall)
  add_caf_test(syncimages 8 syncimages)
  add_caf_test(syncimages2 8 syncimages2)
  add_caf_test(duplicate_syncimages 8 duplicate_syncimages)

  # possible logic error in the following test
#  add_caf_test(increment_my_neighbor 32 increment_my_neighbor)

  # Integration tests verifying the use of libcaf_mpi in applications
  add_caf_test(hello_multiverse 2 hello_multiverse)
  add_caf_test(coarray_burgers_pde 2 coarray_burgers_pde)
  add_caf_test(co_heat 2 co_heat)
  add_caf_test(asynchronous_hello_world 3 asynchronous_hello_world)

  # Regression tests based on reported issues
  if((gfortran_compiler AND (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0)) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
    if( CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0 )
      message( AUTHOR_WARNING ""Developer tests requested and GFortran < 7: test source-alloc-no-sync may fail"" )
    endif()
    # GFortran PR 78505 only fixed on trunk/gcc 7, issue #243
    add_caf_test(source-alloc-no-sync 8 source-alloc-sync)
  endif()

  # Fixed on GCC 6 > 6.4, 7 > 7.3 and 8.x
  if (FALSE) # FIXME!
    add_caf_test(non-coarray-vector-indexed-lhs issue-322-non-coarray-vector-idx-lhs)
  endif()

  # Open GCC 7 regressions
  if ((CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}) OR
      (gfortran_compiler AND (
	  (CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0) OR
	  (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.3.0)
	  )))
    add_caf_test(put-allocatable-coarray-comp 2 issue-422-send)
    add_caf_test(get-put-allocatable-comp 3 issue-422-send-get)
  else()
    message( AUTHOR_WARNING
      ""Skipping regressions in GFortran 7.0:
       put-allocatable-coarray-comp (issue-422)
       get-put-allocatable-comp     (issue-422)"")
  endif()

  add_caf_test(allocatable_p2p_event_post 4 allocatable_p2p_event_post)
  # Fixed GCC 7 regressions, should run on GCC 6 and 7
  add_caf_test(static_event_post_issue_293 3 static_event_post_issue_293)


  # These co_reduce (#172, fixed by PR #332, addl discussion in PR
  # #331) tests are for bugs not regressions. Should be fixed in all
  # version of GCC, I beleive
  add_caf_test(co_reduce-factorial 4 co_reduce-factorial)
  add_caf_test(co_reduce-factorial-int8 4 co_reduce-factorial-int8)
  add_caf_test(co_reduce-factorial-int64 4 co_reduce-factorial-int64)

  # issues reported by @neok-m4700
  add_caf_test(issue-493-coindex-slice            8 issue-493-coindex-slice)
  add_caf_test(issue-488-multi-dim-cobounds-true  8 issue-488-multi-dim-cobounds true)
  add_caf_test(issue-488-multi-dim-cobounds-false 8 issue-488-multi-dim-cobounds false)
  add_caf_test(issue-503-multidim-array-broadcast 2 issue-503-multidim-array-broadcast)
  add_caf_test(issue-503-non-contig-red-ndarray   2 issue-503-non-contig-red-ndarray)
  add_caf_test(issue-552-send_by_ref-singleton    2 issue-552-send_by_ref-singleton)
  add_caf_test(issue-511-incorrect-shape          1 issue-511-incorrect-shape)
  if((gfortran_compiler AND (NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0)) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
    add_caf_test(issue-515-mimic-mpi-gatherv 2 issue-515-mimic-mpi-gatherv)
  endif()

  # IMAGE FAIL tests
  if(NOT CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 7.0.0)
    if(CAF_ENABLE_FAILED_IMAGES)
      add_caf_test(image_status_test_1 4 image_status_test_1)
      if ((NOT DEFINED ENV{TRAVIS}) OR (CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER}))
	add_caf_test(image_fail_test_1 4 image_fail_test_1)
	set_property(TEST image_fail_test_1 PROPERTY FAIL_REGULAR_EXPRESSION ""Test failed."")
	# No other way to check that image_fail_test_1 passes.
	add_caf_test(image_fail_and_sync_test_1 4 image_fail_and_sync_test_1)
        add_caf_test(image_fail_and_sync_test_2 4 image_fail_and_sync_test_2)

	add_caf_test(image_fail_and_sync_test_3 4 image_fail_and_sync_test_3)
	add_caf_test(image_fail_and_status_test_1 4 image_fail_and_status_test_1)
	add_caf_test(image_fail_and_failed_images_test_1 4 image_fail_and_failed_images_test_1)
	add_caf_test(image_fail_and_stopped_images_test_1 4 image_fail_and_stopped_images_test_1)
	add_caf_test(image_fail_and_get_test_1 4 image_fail_and_get_test_1)
      endif()
    endif()
  endif()
else()
  add_test(co_sum_extension test-co_sum-extension.sh)
  set_property(TEST co_sum_extension PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")

  add_test(co_broadcast_extension test-co_broadcast-extension.sh)
  set_property(TEST co_broadcast_extension PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")

  add_test(co_min_extension test-co_min-extension.sh)
  set_property(TEST co_min_extension PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")

  add_test(co_max_extension test-co_max-extension.sh)
  set_property(TEST co_max_extension PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")

  add_test(co_reduce_extension test-co_reduce-extension.sh)
  set_property(TEST co_reduce_extension PROPERTY PASS_REGULAR_EXPRESSION ""Test passed."")
endif()

# Test bash installation scripts
include(cmake/AddInstallationScriptTest.cmake )
add_installation_script_test(installation-scripts.sh src/tests/installation/)

if( CAF_ENABLE_FAILED_IMAGES AND ( NOT
      (	""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"" ) AND ( ""${CMAKE_SYSTEM_PROCESSOR}"" STREQUAL ""x86_64"" ) )
    )
  message ( WARNING
    ""ISO_Fortran_BINDING has only been tested with recent GCC C compilers on x86_64 architectures!
     Some people have reported problems on other architectures or using other C compilers (Clang).
     There are likely bugs present; use at your own risk!"")
endif()

# Test ISO_Fortran_binding library
if( CAF_ENABLE_ISO_Fortran_BINDING OR ( CAF_RUN_DEVELOPER_TESTS OR $ENV{OPENCOARRAYS_DEVELOPER} ) )
  # See https://github.com/sourceryinstitute/OpenCoarrays/issues/523#issuecomment-401613209
  add_test(NAME ISO_Fortran_binding_tests COMMAND ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ISO_Fortran_binding_tests"")
endif()

# Lint the Travis-CI scripts
set(TRAVIS_SCRIPTS
  install.linux.sh
  install.osx.sh
  test-script.InstallScript.sh
  test-script.cmake.sh)
foreach(SCRIPT ${TRAVIS_SCRIPTS})
  if(EXISTS ""${CMAKE_SOURCE_DIR}/developer-scripts/travis/${SCRIPT}"")
    lint_script(""${CMAKE_SOURCE_DIR}/developer-scripts/travis"" ${SCRIPT})
  endif()
endforeach()

# Create and install a manifest of installed files, and another containing their sha256 hashes
foreach(VAR CMAKE_BINARY_DIR CMAKE_INSTALL_DATADIR PROJECT_NAME SOURCE_DATE_EPOCH)
  install(CODE ""set(${VAR} \""${${VAR}}\"")"")
endforeach()
install(SCRIPT ""${CMAKE_CURRENT_LIST_DIR}/cmake/InstallFileManifest.cmake"")
",3.10,3.1
40677,PW-Sat2,PWSat2OBC,False,False,False,False,False,17,C++,2019-08-10 19:16:11+00:00,2015-10-12 19:24:10+00:00,34,2073,"cmake_minimum_required(VERSION 3.1)

include(toolchain.cmake)
include(utils/functions.cmake)

project(PWSat C CXX ASM)

option(ENABLE_LTO ""Use link time optimization"" OFF)

set(ENABLE_COVERAGE FALSE CACHE BOOL ""Enable code coverage"")

set(MEM_MANAGMENT_TYPE 1)

set(TARGET_MCU_PLATFORM ""EngModel"" CACHE STRING ""Target mcu platform"")
set(TARGET_PLD_PLATFORM ""DM"" CACHE STRING ""Target payload platform"")
set(SEMIHOSTING false CACHE BOOL ""Enable semihosting"")
set(JLINK_SN """" CACHE STRING ""J-Link serial number"")

set(MCU_PLATFORM_PATH ${CMAKE_CURRENT_SOURCE_DIR}/platforms/mcu/${TARGET_MCU_PLATFORM})
set(PLD_PLATFORM_PATH ${CMAKE_CURRENT_SOURCE_DIR}/platforms/payload/${TARGET_PLD_PLATFORM})

set(OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/build/${TARGET_MCU_PLATFORM}/${TARGET_PLD_PLATFORM})
set(REPORTS_PATH ${OUTPUT_PATH}/reports)

file(MAKE_DIRECTORY ${OUTPUT_PATH})

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_PATH}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_PATH}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_PATH}/bin)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING """" FORCE)
else()
    set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING """" FORCE)
endif()

if(EXISTS ${MCU_PLATFORM_PATH})
else()
  message(FATAL_ERROR ""Target mcu platform '${MCU_PLATFORM_PATH}' does not exist"")
endif()

if(EXISTS ${PLD_PLATFORM_PATH})
else()
  message(FATAL_ERROR ""Target payload platform '${PLD_PLATFORM_PATH}' does not exist"")
endif()

include(${MCU_PLATFORM_PATH}/settings.cmake)
add_subdirectory(${MCU_PLATFORM_PATH})
add_subdirectory(${PLD_PLATFORM_PATH})

add_subdirectory(src)
add_subdirectory(libs)
add_subdirectory(doc)
add_subdirectory(unit_tests)
add_subdirectory(integration_tests)
add_subdirectory(utils)
add_subdirectory(test)
add_subdirectory(boot)
add_subdirectory(sample)
add_subdirectory(tools)
add_subdirectory(safe_mode)
add_subdirectory(flatsat_tools)

message(STATUS ""Using C compiler from ${CMAKE_C_COMPILER}"")
message(STATUS ""Target mcu platform ${TARGET_MCU_PLATFORM}"")
message(STATUS ""Target payload platform ${TARGET_PLD_PLATFORM}"")
message(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
message(STATUS ""Code coverage: ${ENABLE_COVERAGE}"")
if(NOT ${JLINK_SN} STREQUAL """")
    message(STATUS ""J-Link serial number: ${JLINK_SN}"")
endif()

message(STATUS ""Boot index: ${BOOT_INDEX}"")
message(STATUS ""Boot to upper: ${BOOT_USE_UPPER}"")

",3.1,3.1
40845,WebAssembly,binaryen,False,False,False,False,False,109,WebAssembly,2020-05-17 22:52:42+00:00,2015-10-29 20:26:28+00:00,4048,4333,"cmake_minimum_required(VERSION 3.1.3)
project(binaryen LANGUAGES C CXX VERSION 93)
include(GNUInstallDirs)

if(NOT CMAKE_BUILD_TYPE)
  message(STATUS ""No build type selected, default to Release"")
  set(CMAKE_BUILD_TYPE ""Release"")
endif()

# We default to assertions enabled, even in release builds so that we get
# more useful error reports from users.
option(BYN_ENABLE_ASSERTIONS ""Enable assertions"" ON)

# For git users, attempt to generate a more useful version string
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
  find_package(Git QUIET REQUIRED)
  execute_process(COMMAND
               ""${GIT_EXECUTABLE}"" --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git describe --tags --match version_*
           RESULT_VARIABLE
               GIT_VERSION_RESULT
           OUTPUT_VARIABLE
               GIT_VERSION
           OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(${GIT_VERSION_RESULT})
    message(WARNING ""Error running git describe to determine version"")
  else()
    set(PROJECT_VERSION ""${PROJECT_VERSION} (${GIT_VERSION})"")
  endif()
endif()

configure_file(config.h.in config.h)

# Support functionality.

function(ADD_COMPILE_FLAG value)
  message(STATUS ""Building with ${value}"")
  FOREACH(variable CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
    set(${variable} ""${${variable}} ${value}"" PARENT_SCOPE)
  ENDFOREACH(variable)
endfunction()

function(ADD_CXX_FLAG value)
  message(STATUS ""Building with ${value}"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${value}"" PARENT_SCOPE)
endfunction()

function(ADD_DEBUG_COMPILE_FLAG value)
  if(""${CMAKE_BUILD_TYPE}"" MATCHES ""Debug"")
    message(STATUS ""Building with ${value}"")
  endif()
  FOREACH(variable CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG)
    set(${variable} ""${${variable}} ${value}"" PARENT_SCOPE)
  ENDFOREACH(variable)
endfunction()

function(ADD_NONDEBUG_COMPILE_FLAG value)
  if(NOT ""${CMAKE_BUILD_TYPE}"" MATCHES ""Debug"")
    message(STATUS ""Building with ${value}"")
  endif()
  FOREACH(variable CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_MINSIZEREL)
    set(${variable} ""${${variable}} ${value}"" PARENT_SCOPE)
  ENDFOREACH(variable)
endfunction()

function(ADD_LINK_FLAG value)
  message(STATUS ""Linking with ${value}"")
  FOREACH(variable CMAKE_EXE_LINKER_FLAGS)
    set(${variable} ""${${variable}} ${value}"" PARENT_SCOPE)
  ENDFOREACH(variable)
endfunction()

# Options

option(BUILD_STATIC_LIB ""Build as a static library"" OFF)

# For now, don't include full DWARF support in JS builds, for size.
if (NOT EMSCRIPTEN)
  option(BUILD_LLVM_DWARF ""Enable full DWARF support"" ON)

  if(BUILD_LLVM_DWARF)
    if(MSVC)
      ADD_COMPILE_FLAG(""/DBUILD_LLVM_DWARF"")
    else()
      ADD_COMPILE_FLAG(""-DBUILD_LLVM_DWARF"")
    endif()
  endif()
endif()

# Compiler setup.

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
if(BUILD_LLVM_DWARF)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/llvm-project/include)
endif()

# Add output directory to include path so config.h can be found
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Force output to bin/ and lib/. This is to suppress CMake multigenerator output paths and avoid bin/Debug, bin/Release/ and so on, which is CMake default.
FOREACH(SUFFIX ""_DEBUG"" ""_RELEASE"" ""_RELWITHDEBINFO"" ""_MINSIZEREL"" """")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY${SUFFIX} ""${PROJECT_BINARY_DIR}/bin"")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY${SUFFIX} ""${PROJECT_BINARY_DIR}/lib"")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY${SUFFIX} ""${PROJECT_BINARY_DIR}/lib"")
ENDFOREACH()

if(MSVC)
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""19.0"") # VS2013 and older explicitly need /arch:sse2 set, VS2015 no longer has that option, but always enabled.
    add_compile_flag(""/arch:sse2"")
  endif()
  add_compile_flag(""/wd4146"") # Ignore warning ""warning C4146: unary minus operator applied to unsigned type, result still unsigned"", this pattern is used somewhat commonly in the code.
  # 4267 and 4244 are conversion/truncation warnings. We might want to fix these but they are currently pervasive.
  add_compile_flag(""/wd4267"")
  add_compile_flag(""/wd4244"")
  # 4722 warns that destructors never return, even with WASM_NORETURN.
  add_compile_flag(""/wd4722"")
  add_compile_flag(""/WX-"")
  add_debug_compile_flag(""/Od"")
  add_nondebug_compile_flag(""/O2"")
  add_compile_flag(""/D_CRT_SECURE_NO_WARNINGS"")
  add_compile_flag(""/D_SCL_SECURE_NO_WARNINGS"")
  # Visual Studio 2018 15.8 implemented conformant support for std::aligned_storage, but the conformant support is only enabled when the following flag is passed, to avoid
  # breaking backwards compatibility with code that relied on the non-conformant behavior (the old nonconformant behavior is not used with Binaryen)
  add_compile_flag(""/D_ENABLE_EXTENDED_ALIGNED_STORAGE"")
  # Don't warn about using ""strdup"" as a reserved name.
  add_compile_flag(""/D_CRT_NONSTDC_NO_DEPRECATE"")

  if(BYN_ENABLE_ASSERTIONS)
    # On non-Debug builds cmake automatically defines NDEBUG, so we
    # explicitly undefine it:
    add_nondebug_compile_flag(""/UNDEBUG"") # Keep asserts.
  endif()
  # Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.
  if( NOT CMAKE_BUILD_TYPE MATCHES ""Debug"" )
    foreach(flags_var_to_scrub
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS_MINSIZEREL
        CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_C_FLAGS_MINSIZEREL)
      string(REGEX REPLACE ""(^| )[/-]D *NDEBUG($| )"" "" ""
        ""${flags_var_to_scrub}"" ""${${flags_var_to_scrub}}"")

      # Compile with `/MT` to link against `libcmt.lib`, removing a dependency
      # on `msvcrt.dll`. May result in slightly larger binaries but they should
      # be more portable across systems.
      string(REPLACE ""/MD"" ""/MT"" ${flags_var_to_scrub} ""${${flags_var_to_scrub}}"")
    endforeach()
  endif()

  add_link_flag(""/STACK:8388608"")

  if(RUN_STATIC_ANALYZER)
    add_definitions(/analyze)
  endif()
else()

  option(ENABLE_WERROR ""Enable -Werror"" ON)

  set(THREADS_PREFER_PTHREAD_FLAG ON)
  set(CMAKE_THREAD_PREFER_PTHREAD ON)
  find_package(Threads REQUIRED)
  add_cxx_flag(""-std=c++14"")
  if(NOT EMSCRIPTEN)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES ""^i.86$"")
      # wasm doesn't allow for x87 floating point math
      add_compile_flag(""-msse2"")
      add_compile_flag(""-mfpmath=sse"")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^armv[2-6]"" AND NOT CMAKE_CXX_FLAGS MATCHES ""-mfpu="")
      add_compile_flag(""-mfpu=vfpv3"")
    endif()
  endif()
  add_compile_flag(""-Wall"")
  if(ENABLE_WERROR)
    add_compile_flag(""-Werror"")
  endif()
  add_compile_flag(""-Wextra"")
  add_compile_flag(""-Wno-unused-parameter"")
  add_compile_flag(""-fno-omit-frame-pointer"")
  # TODO(https://github.com/WebAssembly/binaryen/pull/2314): Remove these two
  # flags once we resolve the issue.
  add_compile_flag(""-Wno-implicit-int-float-conversion"")
  add_compile_flag(""-Wno-unknown-warning-option"")
  add_compile_flag(""-Wswitch"") # we explicitly expect this in the code
  if(WIN32)
    add_compile_flag(""-D_GNU_SOURCE"")
    add_link_flag(""-Wl,--stack,8388608"")
  elseif(NOT EMSCRIPTEN)
    add_compile_flag(""-fPIC"")
  endif()
  add_debug_compile_flag(""-O0"")
  add_debug_compile_flag(""-g3"")
  if(EMSCRIPTEN)
    # really focus on minimizing output size when compiling sources
    add_nondebug_compile_flag(""-Oz"")
  else()
    add_nondebug_compile_flag(""-O2"")
  endif()
  if(BYN_ENABLE_ASSERTIONS)
    # On non-Debug builds cmake automatically defines NDEBUG, so we
    # explicitly undefine it:
    add_nondebug_compile_flag(""-UNDEBUG"")
  endif()
endif()

if(EMSCRIPTEN)
  # link with -O3 for metadce and other powerful optimizations. note that we
  # must use add_link_options so that this appears after CMake's default -O2
  add_link_options(""-O3"")
  add_link_flag(""-s SINGLE_FILE"")
  add_link_flag(""-s ALLOW_MEMORY_GROWTH=1"")
  add_compile_flag(""-s DISABLE_EXCEPTION_CATCHING=0"")
  add_link_flag(""-s DISABLE_EXCEPTION_CATCHING=0"")
  # make the tools immediately usable on Node.js
  add_link_flag(""-s NODERAWFS"")
  # this can be moved into the fastcomp section once upstream ignores this flag,
  # https://github.com/emscripten-core/emscripten/pull/9897
  add_compile_flag(""-Wno-almost-asm"")
  # check for fastcomp by the clang version, which is stuck in fastcomp way
  # back in the past
  if(NOT ${CMAKE_CXX_COMPILER_VERSION} STREQUAL ""6.0.1"")
    # in opt builds, LTO helps so much (>20%) it's worth slow compile times
    add_nondebug_compile_flag(""-s WASM_OBJECT_FILES=0"")
  endif()
endif()

# clang doesn't print colored diagnostics when invoked from Ninja
if(UNIX AND CMAKE_GENERATOR STREQUAL ""Ninja"")
  if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"")
    add_compile_flag(""-fdiagnostics-color=always"")
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"")
    add_compile_flag(""-fcolor-diagnostics"")
  endif()
endif()

# Static libraries
# Current (partial) dependency structure is as follows:
# passes -> wasm -> asmjs -> support
# TODO: It's odd that wasm should depend on asmjs, maybe we should fix that.
add_subdirectory(src/ir)
add_subdirectory(src/asmjs)
add_subdirectory(src/cfg)
add_subdirectory(src/emscripten-optimizer)
add_subdirectory(src/passes)
add_subdirectory(src/support)
add_subdirectory(src/wasm)
add_subdirectory(third_party)

# Object files
set(binaryen_objs
    $<TARGET_OBJECTS:passes>
    $<TARGET_OBJECTS:wasm>
    $<TARGET_OBJECTS:asmjs>
    $<TARGET_OBJECTS:emscripten-optimizer>
    $<TARGET_OBJECTS:ir>
    $<TARGET_OBJECTS:cfg>
    $<TARGET_OBJECTS:support>)

IF(BUILD_LLVM_DWARF)
  SET(binaryen_objs ${binaryen_objs} $<TARGET_OBJECTS:llvm_dwarf>)
ENDIF()

# Sources.

set(binaryen_SOURCES
  src/binaryen-c.cpp
)
if(BUILD_STATIC_LIB)
  message(STATUS ""Building libbinaryen as statically linked library."")
  add_library(binaryen STATIC ${binaryen_SOURCES} ${binaryen_objs})
  add_definitions(-DBUILD_STATIC_LIBRARY)
else()
  message(STATUS ""Building libbinaryen as shared library."")
  add_library(binaryen SHARED ${binaryen_SOURCES} ${binaryen_objs})
endif()
install(TARGETS binaryen
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

install(FILES src/binaryen-c.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

set(wasm-shell_SOURCES
  src/tools/wasm-shell.cpp
)
add_executable(wasm-shell ${wasm-shell_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-shell ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-shell PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-shell PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-shell DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm-opt_SOURCES
  src/tools/wasm-opt.cpp
)
add_executable(wasm-opt ${wasm-opt_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-opt ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-opt PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-opt PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-opt DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm-metadce_SOURCES
  src/tools/wasm-metadce.cpp
)
add_executable(wasm-metadce ${wasm-metadce_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-metadce ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-metadce PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-metadce PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-metadce DESTINATION ${CMAKE_INSTALL_BINDIR})

set(asm2wasm_SOURCES
  src/tools/asm2wasm.cpp
)
add_executable(asm2wasm ${asm2wasm_SOURCES} ${binaryen_objs})
target_link_libraries(asm2wasm ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET asm2wasm PROPERTY CXX_STANDARD 14)
set_property(TARGET asm2wasm PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS asm2wasm DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm2js_SOURCES
  src/tools/wasm2js.cpp
)
add_executable(wasm2js ${wasm2js_SOURCES} ${binaryen_objs})
target_link_libraries(wasm2js ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm2js PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm2js PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm2js DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm-emscripten-finalize_SOURCES
  src/tools/wasm-emscripten-finalize.cpp
)
add_executable(wasm-emscripten-finalize ${wasm-emscripten-finalize_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-emscripten-finalize ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-emscripten-finalize PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-emscripten-finalize PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-emscripten-finalize DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm_as_SOURCES
  src/tools/wasm-as.cpp
)
add_executable(wasm-as ${wasm_as_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-as ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-as PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-as PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-as DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm_dis_SOURCES
  src/tools/wasm-dis.cpp
)
add_executable(wasm-dis ${wasm_dis_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-dis ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-dis PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-dis PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-dis DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm-ctor-eval_SOURCES
  src/tools/wasm-ctor-eval.cpp
)
add_executable(wasm-ctor-eval ${wasm-ctor-eval_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-ctor-eval ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-ctor-eval PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-ctor-eval PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-ctor-eval DESTINATION ${CMAKE_INSTALL_BINDIR})

set(wasm-reduce_SOURCES
  src/tools/wasm-reduce.cpp
)
add_executable(wasm-reduce ${wasm-reduce_SOURCES} ${binaryen_objs})
target_link_libraries(wasm-reduce ${CMAKE_THREAD_LIBS_INIT})
set_property(TARGET wasm-reduce PROPERTY CXX_STANDARD 14)
set_property(TARGET wasm-reduce PROPERTY CXX_STANDARD_REQUIRED ON)
install(TARGETS wasm-reduce DESTINATION ${CMAKE_INSTALL_BINDIR})

# binaryen.js
#
# Note that we can't emit binaryen.js directly, as there is libbinaryen already
# declared earlier, so we create binaryen_wasm/js.js, which must then be copied.
# Note that SHELL: is needed as otherwise cmake will coalesce -s link flags
# in an incorrect way for emscripten.
if(EMSCRIPTEN)
  set(binaryen_emscripten_SOURCES
    src/binaryen-c.cpp
  )

  # binaryen.js WebAssembly variant
  add_executable(binaryen_wasm
                 ${binaryen_emscripten_SOURCES})
  target_link_libraries(binaryen_wasm wasm asmjs emscripten-optimizer passes ir cfg support wasm)
  target_link_libraries(binaryen_wasm ""-s NO_FILESYSTEM=0"")
  target_link_libraries(binaryen_wasm ""-s NODERAWFS=0"")
  target_link_libraries(binaryen_wasm ""-s EXPORT_NAME=binaryen"")
  target_link_libraries(binaryen_wasm ""--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-post.js"")
  target_link_libraries(binaryen_wasm ""--extern-pre-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-extern-pre.js"")
  target_link_libraries(binaryen_wasm ""--extern-post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-extern-post.js"")
  target_link_libraries(binaryen_wasm optimized ""--closure 1"")
  target_link_libraries(binaryen_wasm optimized ""--llvm-lto 1"")
  target_link_libraries(binaryen_wasm debug ""--profiling"")
  set_property(TARGET binaryen_wasm PROPERTY CXX_STANDARD 14)
  set_property(TARGET binaryen_wasm PROPERTY CXX_STANDARD_REQUIRED ON)
  install(TARGETS binaryen_wasm DESTINATION ${CMAKE_INSTALL_BINDIR})

  # binaryen.js JavaScript variant
  add_executable(binaryen_js
                 ${binaryen_emscripten_SOURCES})
  target_link_libraries(binaryen_js wasm asmjs emscripten-optimizer passes ir cfg support wasm)
  target_link_libraries(binaryen_js ""-s WASM=0"")
  target_link_libraries(binaryen_js ""-s WASM_ASYNC_COMPILATION=0"")
  if(${CMAKE_CXX_COMPILER_VERSION} STREQUAL ""6.0.1"")
    # only valid with fastcomp and WASM=0
    target_link_libraries(binaryen_js ""-s ELIMINATE_DUPLICATE_FUNCTIONS=1"")	
  endif()
  target_link_libraries(binaryen_js ""-s NO_FILESYSTEM=0"")
  target_link_libraries(binaryen_js ""-s NODERAWFS=0"")
  target_link_libraries(binaryen_js ""-s EXPORT_NAME=binaryen"")
  target_link_libraries(binaryen_js ""--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-post.js"")
  target_link_libraries(binaryen_js ""--extern-pre-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-extern-pre.js"")
  target_link_libraries(binaryen_js ""--extern-post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/js/binaryen.js-extern-post.js"")
  target_link_libraries(binaryen_js optimized ""--closure 1"")
  target_link_libraries(binaryen_js optimized ""--llvm-lto 1"")
  target_link_libraries(binaryen_js debug ""--profiling"")
  target_link_libraries(binaryen_js debug ""-s ASSERTIONS"")
  set_property(TARGET binaryen_js PROPERTY CXX_STANDARD 14)
  set_property(TARGET binaryen_js PROPERTY CXX_STANDARD_REQUIRED ON)
  install(TARGETS binaryen_js DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()

# Testing
#
# Currently just some very simple smoke tests.

enable_testing()

add_test(NAME opt-unit
         COMMAND bin/wasm-opt test/unit.wat --flatten --ssa --metrics -O4 -Os --metrics)
add_test(NAME metrics-emcc
         COMMAND bin/wasm-opt test/emcc_hello_world.fromasm --metrics)
add_test(NAME exec-unit
         COMMAND bin/wasm-opt test/unit.wat --fuzz-exec)
add_test(NAME exec-hello
         COMMAND bin/wasm-opt test/hello_world.wat --fuzz-exec)
",3.1.3,3.1
41010,F4r3n,FarenMediaLibrary,False,False,False,False,False,1,C,2020-03-15 11:01:23+00:00,2016-08-10 15:02:46+00:00,4,467,"macro(SET_COMPILER_OPTIONS)
include(CheckCXXCompilerFlag)
if(MSVC)
	add_compile_options(""/W3"")
else(MSVC)
	add_compile_options(""-Wall"")
endif(MSVC)
endmacro(SET_COMPILER_OPTIONS)


cmake_minimum_required (VERSION 3.10)

project(""FML"")

SET_COMPILER_OPTIONS()



add_subdirectory(""extlib"")
add_subdirectory(""lib"")
add_subdirectory(""gui"")

",3.10,3.1
41118,Nitrokey,libnitrokey,False,False,False,False,False,14,C++,2020-04-28 13:20:06+00:00,2016-03-19 11:14:26+00:00,41,912,"# https://cmake.org/pipermail/cmake/2011-May/044166.html
IF(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)
    SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)
ENDIF()

cmake_minimum_required(VERSION 3.1)
IF (UNIX)
    OPTION(ADD_ASAN ""Use ASAN to show memory issues"" FALSE)
    OPTION(ADD_TSAN ""Use TSAN to show thread issues"" FALSE)
    IF(ADD_ASAN)
        SET(EXTRA_LIBS ${EXTRA_LIBS} asan )
        ADD_COMPILE_OPTIONS(-fsanitize=address -fno-omit-frame-pointer)
    ENDIF()
    IF(ADD_TSAN)
        SET(EXTRA_LIBS ${EXTRA_LIBS} tsan )
        SET(USE_CLANG TRUE)
        ADD_COMPILE_OPTIONS(-fsanitize=thread -fno-omit-frame-pointer -fPIC -g) #use with clang
    ENDIF()
    IF(ADD_TSAN AND ADD_ASAN)
        message(FATAL_ERROR ""TSAN and ASAN cannot be used at the same time"")
    ENDIF()
ENDIF()

project(libnitrokey LANGUAGES C CXX VERSION 3.5.0)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)


include(GNUInstallDirs)



IF (NOT CMAKE_BUILD_TYPE)
    IF(APPLE)
        # Issues occur when build with enabled optimizations
        set(CMAKE_BUILD_TYPE Debug)
    ELSE()
        set(CMAKE_BUILD_TYPE RelWithDebInfo)
    ENDIF()
ENDIF()
MESSAGE(""${PROJECT_NAME}: Build type: ${CMAKE_BUILD_TYPE}"")

include_directories(hidapi)
include_directories(libnitrokey)
set(SOURCE_FILES
    libnitrokey/command.h
    libnitrokey/command_id.h
    libnitrokey/cxx_semantics.h
    libnitrokey/device.h
    libnitrokey/device_proto.h
    libnitrokey/dissect.h
    libnitrokey/log.h
    libnitrokey/misc.h
    libnitrokey/NitrokeyManager.h
    libnitrokey/stick10_commands.h
    libnitrokey/stick20_commands.h
    libnitrokey/CommandFailedException.h
    libnitrokey/LibraryException.h
    libnitrokey/LongOperationInProgressException.h
    libnitrokey/stick10_commands_0.8.h
    command_id.cc
    device.cc
    log.cc
    misc.cc
    NitrokeyManager.cc
    NK_C_API.h
    NK_C_API.cc
    DeviceCommunicationExceptions.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/version.cc
    )

set(BUILD_SHARED_LIBS ON CACHE BOOL ""Build all libraries as shared"")
add_library(nitrokey ${SOURCE_FILES})

IF(APPLE)
    include_directories(hidapi/hidapi)
    add_library(hidapi-libusb STATIC hidapi/mac/hid.c )
    target_link_libraries(hidapi-libusb ""-framework CoreFoundation"" ""-framework IOKit"")
    target_link_libraries(nitrokey hidapi-libusb)
ELSEIF(UNIX)
#    add_library(hidapi-libusb STATIC hidapi/libusb/hid.c )
    find_package(PkgConfig)
    pkg_search_module(HIDAPI_LIBUSB REQUIRED hidapi-libusb)
    target_compile_options(nitrokey PRIVATE ${HIDAPI_LIBUSB_CFLAGS})
    target_link_libraries(nitrokey ${HIDAPI_LIBUSB_LDFLAGS})
ELSEIF(WIN32)
    include_directories(hidapi/hidapi)
    add_library(hidapi-libusb STATIC hidapi/windows/hid.c )
    target_link_libraries(hidapi-libusb setupapi)
    target_link_libraries(nitrokey hidapi-libusb)
ENDIF()

set_target_properties(nitrokey PROPERTIES
	VERSION ${libnitrokey_VERSION}
	SOVERSION ${libnitrokey_VERSION_MAJOR})

OPTION(ERROR_ON_WARNING ""Stop compilation on warning found (not supported for MSVC)"" OFF)
if (NOT MSVC)
    set(COMPILE_FLAGS ""-Wall -Wno-unused-function -Wcast-qual -Woverloaded-virtual -Wsign-compare -Wformat -Wformat-security"")
    IF(NOT APPLE)
        if (ERROR_ON_WARNING)
            set(COMPILE_FLAGS ""${COMPILE_FLAGS} -Werror"")
        endif()
    ENDIF()
    SET_TARGET_PROPERTIES(nitrokey PROPERTIES COMPILE_FLAGS ${COMPILE_FLAGS} )
endif()

OPTION(NO_LOG ""Compile without logging functionality and its strings (decreases size)"" OFF)
IF (NO_LOG)
    SET_TARGET_PROPERTIES(nitrokey PROPERTIES COMPILE_DEFINITIONS ""NO_LOG"")
ENDIF()

OPTION(LOG_VOLATILE_DATA ""Log volatile data (debug)"" OFF)
IF (LOG_VOLATILE_DATA)
    SET_TARGET_PROPERTIES(nitrokey PROPERTIES COMPILE_DEFINITIONS ""LOG_VOLATILE_DATA"")
ENDIF()


OPTION(ADD_GIT_INFO ""Add information about source code version from Git repository"" TRUE)
# generate version.h
IF(ADD_GIT_INFO)
execute_process(
	COMMAND git describe --always --abbrev=4 HEAD
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	RESULT_VARIABLE PROJECT_VERSION_GIT_RETURN_CODE
	OUTPUT_VARIABLE PROJECT_VERSION_GIT
	OUTPUT_STRIP_TRAILING_WHITESPACE
	ERROR_QUIET
)
ENDIF()
# the version.h generation logic is tricky in a number of ways:
# 1. git describe on a release tarball will always fail with
#    a non-zero return code, usually 128
# 2. If git is not installed, PROJECT_VERSION_GIT_RETURN_CODE
#    will contain the string 'No such file or directory'
# Hence fallback to PROJECT_VERSION when the return code is NOT 0.
IF((NOT ${ADD_GIT_INFO}) OR (NOT ${PROJECT_VERSION_GIT_RETURN_CODE} STREQUAL ""0""))
	MESSAGE(STATUS ""Setting fallback Git library version"")
	SET(PROJECT_VERSION_GIT ""v${PROJECT_VERSION}"")
ENDIF()
MESSAGE(STATUS ""Setting Git library version to: "" ${PROJECT_VERSION_GIT} )
configure_file(""version.cc.in"" ""version.cc"" @ONLY)


file(GLOB LIB_INCLUDES ""libnitrokey/*.h"" ""NK_C_API.h"")
install (FILES ${LIB_INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
install (TARGETS nitrokey DESTINATION ${CMAKE_INSTALL_LIBDIR})

IF(NOT WIN32)
    # Install Nitrokey udev rules
    IF(NOT DEFINED CMAKE_INSTALL_UDEVRULESDIR)
        set(PKG_GET_UDEV_DIR ${PKG_CONFIG_EXECUTABLE} --variable=udevdir udev)
        execute_process(COMMAND ${PKG_GET_UDEV_DIR} RESULT_VARIABLE ERR OUTPUT_VARIABLE CMAKE_INSTALL_UDEVRULESDIR OUTPUT_STRIP_TRAILING_WHITESPACE)
        IF(${ERR})
            set(CMAKE_INSTALL_UDEVRULESDIR ""lib/udev/rules.d"")
        ELSE()
            set(CMAKE_INSTALL_UDEVRULESDIR ""${CMAKE_INSTALL_UDEVRULESDIR}/rules.d"")
        ENDIF()
        string(REGEX REPLACE ""^/"" """" CMAKE_INSTALL_UDEVRULESDIR ""${CMAKE_INSTALL_UDEVRULESDIR}"")
        string(REGEX REPLACE ""^usr/"" """" CMAKE_INSTALL_UDEVRULESDIR ""${CMAKE_INSTALL_UDEVRULESDIR}"") # usual prefix is usr/local
        message(STATUS ""Setting udev rules dir to ${CMAKE_INSTALL_UDEVRULESDIR}"")
    ENDIF()

    install(FILES
            ${CMAKE_CURRENT_SOURCE_DIR}/data/41-nitrokey.rules
            DESTINATION ${CMAKE_INSTALL_UDEVRULESDIR}
    )
ENDIF()

# configure and install pkg-config file
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libnitrokey.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libnitrokey-1.pc @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libnitrokey-1.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

OPTION(COMPILE_TESTS ""Compile tests"" FALSE)
OPTION(COMPILE_OFFLINE_TESTS ""Compile offline tests"" FALSE)

IF(COMPILE_OFFLINE_TESTS OR COMPILE_TESTS)
    find_package(PkgConfig)
    IF(PKG_CONFIG_FOUND)
        pkg_check_modules(CATCH2 catch2)
    ENDIF()

    if (CATCH2_FOUND)
        message(STATUS ""Found system Catch2, not using bundled version"")
        add_compile_options(${CATCH2_CFLAGS})
    ELSE()
        message(STATUS ""Did NOT find system Catch2, instead using bundled version"")
        include_directories(unittest/Catch/single_include)
    ENDIF()

    add_library(catch STATIC unittest/catch_main.cpp )
ENDIF()

IF(COMPILE_OFFLINE_TESTS)
    add_executable (test_offline unittest/test_offline.cc)
    target_link_libraries (test_offline ${EXTRA_LIBS} nitrokey catch)
    SET_TARGET_PROPERTIES(test_offline PROPERTIES COMPILE_FLAGS ${COMPILE_FLAGS} )
    #run with 'make test' or 'ctest'
    include (CTest)
    add_test (runs test_offline)

    add_executable(test_minimal unittest/test_minimal.c)
    target_link_libraries(test_minimal ${EXTRA_LIBS} nitrokey)
    add_test(minimal test_minimal)
ENDIF()

IF (COMPILE_TESTS)
    #needs connected Pro/Storage devices for success
    #WARNING: it may delete data on the device

        SET(TESTS
                unittest/test_C_API.cpp
                unittest/test2.cc
                unittest/test3.cc
                unittest/test_HOTP.cc
                unittest/test1.cc
                unittest/test_issues.cc
                unittest/test_multiple_devices.cc
                unittest/test_strdup.cpp
                unittest/test_safe.cpp
        )

    foreach(testsourcefile ${TESTS} )
        get_filename_component(testname ${testsourcefile} NAME_WE )
        add_executable(${testname} ${testsourcefile} )
        target_link_libraries(${testname} ${EXTRA_LIBS} nitrokey catch )
        SET_TARGET_PROPERTIES(${testname} PROPERTIES COMPILE_FLAGS ${COMPILE_FLAGS} )
    endforeach(testsourcefile)

ENDIF()



#SET(CPACK_GENERATOR
#        ""DEB;RPM"")
# build a CPack driven installer package
include (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE
        ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
set (CPACK_PACKAGE_VERSION ""${PROJECT_VERSION}"")
include (CPack)

# Build Doxygen documentation for the C API
find_package(Doxygen)
if (DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    add_custom_target(doc ${DOXYGEN_EXECUTABLE} Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT ""Generating C API documentation with Doxygen"" VERBATIM)
endif(DOXYGEN_FOUND)
",3.1,3.1
41160,mbrazeau,MorphyLib,False,False,False,False,False,4,C,2020-02-24 13:53:44+00:00,2017-05-05 11:00:04+00:00,0,463,"cmake_minimum_required (VERSION 3.1)
add_subdirectory (src)
if (R_INCLUDE_DIR)
    add_subdirectory (R)
else()
    message(WARNING ""Skipping RMorphyex library, R development libraries not found"")
endif(R_INCLUDE_DIR)
if (NOT MSVC)
    add_subdirectory (tests)
endif()
",3.1,3.1
41177,BelledonneCommunications,linphone-desktop,False,False,False,False,False,15,C++,2020-05-17 08:43:36+00:00,2015-11-05 13:02:03+00:00,171,3443,"################################################################################
#
#  Copyright (c) 2010-2020 Belledonne Communications SARL.
# 
#  This file is part of linphone-desktop
#  (see https://www.linphone.org).
# 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

cmake_minimum_required(VERSION 3.1)

get_cmake_property(vars CACHE_VARIABLES)
foreach(var ${vars})
	get_property(currentHelpString CACHE ""${var}"" PROPERTY HELPSTRING)
	if(""${currentHelpString}"" MATCHES ""No help, variable specified on the command line."" OR ""${currentHelpString}"" STREQUAL """")
		#message(""${var} = [${${var}}]  --  ${currentHelpString}"") # uncomment to see the variables being processed
		list(APPEND USER_ARGS ""-D${var}=${${var}}"")
		if( ""${var}"" STREQUAL ""CMAKE_PREFIX_PATH"")
			set(PREFIX_PATH "";${${var}}"")
		endif()
	elseif(""${var}"" STREQUAL ""CMAKE_GENERATOR_PLATFORM"" AND NOT(""${${var}}"" STREQUAL """"))
		message(STATUS ""User-Setting Platform to ${${var}}"")
	endif()
endforeach()
if(ENABLE_BUILD_VERBOSE)
	message(""User Args : ${USER_ARGS}"")
endif()
if(NOT CMAKE_GENERATOR_PLATFORM AND WIN32)
	set(CMAKE_GENERATOR_PLATFORM ""Win32"")
	message(STATUS ""Setting Platform to ${CMAKE_GENERATOR_PLATFORM}"")
endif()

project(linphoneqt)

include(GNUInstallDirs)
include(CheckCXXCompilerFlag)

# Prepare gobal CMAKE configuration specific to the current project
set(SDK_BUILD_DIR ""${CMAKE_BINARY_DIR}/WORK"")       # SDK build in WORK. Keep all in it.
set(LINPHONE_OUTPUT_DIR ""${CMAKE_BINARY_DIR}/linphone-sdk/desktop"")

set(APPLICATION_OUTPUT_DIR ""${CMAKE_BINARY_DIR}/OUTPUT"")

set(CMAKE_PREFIX_PATH ""${LINPHONE_OUTPUT_DIR};${APPLICATION_OUTPUT_DIR}${PREFIX_PATH}"")
string(REPLACE "";"" ""|"" PREFIX_PATH ""${CMAKE_PREFIX_PATH}"")
#set(PREFIX_PATH ""${LINPHONE_OUTPUT_DIR}|${APPLICATION_OUTPUT_DIR}${PREFIX_PATH}"")

# Avoid cmake warning if CMP0071 is not set.
if (POLICY CMP0071)
    cmake_policy(SET CMP0071 NEW)
endif ()
#set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#------------------------------------------------------------------------------

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
	message(STATUS ""Setting build type to 'RelWithDebInfo' as none was specified"")
	set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""Choose the type of build, options are: Debug Release RelWithDebInfo"" FORCE)
	# Set the available build type values for cmake-gui
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ""Debug"" ""Release"" ""RelWithDebInfo"")
endif()

# ------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#				SET OPTIONS
#-------------------------------------------------------------------------------

option(ENABLE_APP_PACKAGING ""Enable packaging"" NO)
option(ENABLE_UPDATE_CHECK ""Enable update check."" NO)
option(ENABLE_UNIT_TESTS ""Enable unit test of SDK."" NO  )
option(ENABLE_TESTS ""Build with testing binaries of SDK"" NO  )
option(ENABLE_TESTS_COMPONENTS ""Build libbctoolbox-tester"" NO  )
option(ENABLE_TOOLS ""Enable tools of SDK"" NO)
option(ENABLE_STRICT ""Build with strict compilator flags e.g. -Wall -Werror"" NO)
option(ENABLE_FFMPEG ""Build mediastreamer2 with ffmpeg video support."" YES)
option(ENABLE_BUILD_VERBOSE ""Enable the build generation to be more verbose"" NO)
option(ENABLE_OPENH264 ""Enable the use of OpenH264 codec"" YES)
option(ENABLE_NON_FREE_CODECS ""Enable the use of non free codecs"" YES)

if(WIN32 OR APPLE)
else()
	option(ENABLE_V4L ""Ability to capture and display video using libv4l2 or libv4l."" YES)
endif()

option(ENABLE_RELATIVE_PREFIX ""Set Internal packages relative to the binary"" YES)

set(APP_OPTIONS ""-DENABLE_UPDATE_CHECK=${ENABLE_UPDATE_CHECK}"")
list(APPEND APP_OPTIONS ""-DENABLE_APP_PACKAGING=${ENABLE_APP_PACKAGING}"")
list(APPEND APP_OPTIONS ""-DENABLE_UNIT_TESTS=${ENABLE_UNIT_TESTS}"")
list(APPEND APP_OPTIONS ""-DENABLE_TESTS=${ENABLE_TESTS}"")
list(APPEND APP_OPTIONS ""-DENABLE_TESTS_COMPONENTS=${ENABLE_TESTS_COMPONENTS}"")
list(APPEND APP_OPTIONS ""-DENABLE_TOOLS=${ENABLE_TOOLS}"")
list(APPEND APP_OPTIONS ""-DENABLE_STRICT=${ENABLE_STRICT}"")
list(APPEND APP_OPTIONS ""-DENABLE_FFMPEG=${ENABLE_FFMPEG}"")
list(APPEND APP_OPTIONS ""-DENABLE_BUILD_VERBOSE=${ENABLE_BUILD_VERBOSE}"")
list(APPEND APP_OPTIONS ""-DENABLE_OPENH264=${ENABLE_OPENH264}"")
list(APPEND APP_OPTIONS ""-DENABLE_NON_FREE_CODECS=${ENABLE_NON_FREE_CODECS}"")
	
if(ENABLE_V4L)
    list(APPEND APP_OPTIONS ""-DENABLE_V4L=${ENABLE_V4L}"")
endif()
list(APPEND APP_OPTIONS ""-DENABLE_RELATIVE_PREFIX=${ENABLE_RELATIVE_PREFIX}"")

list(APPEND APP_OPTIONS ""-DLINPHONE_OUTPUT_DIR=${LINPHONE_OUTPUT_DIR}"")

include(ExternalProject)
set(PROJECT_BUILD_COMMAND """")
if(CMAKE_BUILD_PARALLEL_LEVEL)
	list(APPEND APP_OPTIONS ""-DCMAKE_BUILD_PARALLEL_LEVEL=${CMAKE_BUILD_PARALLEL_LEVEL}"")
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL ""3.12.0"") #CMAKE_BUILD_PARALLEL_LEVEL will not always work for External projects
		list(APPEND PROJECT_BUILD_COMMAND ""--parallel"" ""${CMAKE_BUILD_PARALLEL_LEVEL}"")
	endif()
endif()
if(CMAKE_VERBOSE_MAKEFILE)
	list(APPEND APP_OPTIONS ""-DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}"")
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL ""3.14.0"")
		list(APPEND PROJECT_BUILD_COMMAND ""--verbose"")
	endif()
endif()

ExternalProject_Add(sdk PREFIX ""${CMAKE_BINARY_DIR}/sdk""
    SOURCE_DIR ""${CMAKE_SOURCE_DIR}/linphone-sdk""
    INSTALL_DIR ""${LINPHONE_OUTPUT_DIR}""
    STAMP_DIR ""${SDK_BUILD_DIR}/stamp""
    BINARY_DIR ""${SDK_BUILD_DIR}""
    STEP_TARGETS build
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG> ${PROJECT_BUILD_COMMAND}
    INSTALL_COMMAND ${CMAKE_COMMAND} -E echo ""Install step is already done at build time.""
    LIST_SEPARATOR | # Use the alternate list separator
    CMAKE_ARGS ${APP_OPTIONS} ${USER_ARGS} -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_PREFIX_PATH=${PREFIX_PATH}
    #BUILD_ALWAYS NO #${DO_BUILD}
)
ExternalProject_Add_Step(sdk force_build
	COMMENT ""Forcing build for 'desktop'""
	DEPENDEES configure
	DEPENDERS build
	ALWAYS 1
)
include(FindPkgConfig)

set(APP_DEPENDS sdk)

find_package(LinphoneCxx CONFIG QUIET)
find_package(Linphone CONFIG QUIET)
find_package(bctoolbox CONFIG QUIET)
find_package(belcard CONFIG QUIET)
find_package(Mediastreamer2 CONFIG QUIET)
find_package(ortp CONFIG QUIET)


if(NOT (LinphoneCxx_FOUND) OR NOT (Linphone_FOUND) OR NOT (bctoolbox_FOUND) OR NOT (belcard_FOUND) OR NOT (Mediastreamer2_FOUND) OR NOT (ortp_FOUND) OR FORCE_APP_EXTERNAL_PROJECTS)
	message(""Projects are set as External projects. You can start building them by using for example : cmake --build . --target all"")
	ExternalProject_Add(linphone-qt PREFIX ""${CMAKE_BINARY_DIR}/linphoneqt""
	    SOURCE_DIR ""${CMAKE_SOURCE_DIR}/linphone-app""
	    INSTALL_DIR ""${APPLICATION_OUTPUT_DIR}""
	    DEPENDS ${APP_DEPENDS}
	    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG> ${PROJECT_BUILD_COMMAND}
#	    INSTALL_COMMAND ${CMAKE_COMMAND} -E echo ""Install step is already done at build time.""
	    LIST_SEPARATOR | # Use the alternate list separator
	    CMAKE_ARGS ${APP_OPTIONS} ${USER_ARGS} -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_PREFIX_PATH=${PREFIX_PATH}
	# ${APP_OPTIONS}
	    BUILD_ALWAYS ON
	)
	set(AUTO_REGENERATION auto_regeneration)
	add_custom_target(${AUTO_REGENERATION} ALL
		COMMAND ${CMAKE_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}
		DEPENDS linphone-qt)
else()
	message(""Adding Linphone Desktop in an IDE-friendly state"")
	set(CMAKE_INSTALL_PREFIX ""${APPLICATION_OUTPUT_DIR}"")
	add_subdirectory(${CMAKE_SOURCE_DIR}/linphone-app)
	add_dependencies(app-library ${APP_DEPENDS})
endif()
ExternalProject_Add(linphone-qt-only PREFIX ""${CMAKE_BINARY_DIR}/linphoneqt""
    SOURCE_DIR ""${CMAKE_SOURCE_DIR}/linphone-app""
    INSTALL_DIR ""${APPLICATION_OUTPUT_DIR}""
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG> ${PROJECT_BUILD_COMMAND}
#    INSTALL_COMMAND ${CMAKE_COMMAND} -E echo ""Install step is already done at build time.""
    LIST_SEPARATOR | # Use the alternate list separator
    CMAKE_ARGS ${APP_OPTIONS} ${USER_ARGS} -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_PREFIX_PATH=${PREFIX_PATH}
    EXCLUDE_FROM_ALL ON
    BUILD_ALWAYS ON
)
",3.1,3.1
41239,InsightSoftwareConsortium,ITKTextureFeatures,False,False,False,False,False,28,C++,2020-05-15 12:29:35+00:00,2017-03-21 18:05:41+00:00,11,242,"project(TextureFeatures)
cmake_minimum_required(VERSION 3.10.2)

if(NOT ITK_SOURCE_DIR)
  find_package(ITK 4.10 REQUIRED)
  list(APPEND CMAKE_MODULE_PATH ${ITK_CMAKE_DIR})

  if(SKBUILD)
    set(PY_SITE_PACKAGES_PATH ${CMAKE_INSTALL_PREFIX} CACHE PATH ""The install
    prefix for python package contents"")
    install(CODE ""
      unset(CMAKE_INSTALL_COMPONENT)
      set(COMPONENT \""PythonWheelRuntimeLibraries\"")
      set(CMAKE_INSTALL_DO_STRIP 1)
      include\(\""${PROJECT_BINARY_DIR}/cmake_install.cmake\"")
      unset(CMAKE_INSTALL_COMPONENT)
      return()
    "")
  endif()

  include(ITKModuleExternal)
  include_directories(${ITK_INCLUDE_DIRS})
else()
  itk_module_impl()
endif()
",3.10.2,3.1
41324,ddemidov,vexcl,False,False,False,False,False,25,C++,2020-04-25 09:08:45+00:00,2012-05-29 07:13:54+00:00,604,1830,"cmake_minimum_required(VERSION 3.1)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
    cmake_policy(VERSION 3.12)
endif()

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS ""No build type selected, default to RelWithDebInfo"")
    set(CMAKE_BUILD_TYPE ""RelWithDebInfo"" CACHE STRING ""Build type"")
endif()

project(VexCL)

set(VEXCL_MASTER_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    set(VEXCL_MASTER_PROJECT ON)
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

#----------------------------------------------------------------------------
# Compile-time options
#----------------------------------------------------------------------------
option(VEXCL_SHOW_KERNELS ""Show generated kernels in tests and examples"" OFF)
option(VEXCL_CACHE_KERNELS ""Cache compiled kernels offline"" ON)
option(VEXCL_SHOW_COPIES ""Log vector copies to stdout for debugging purposes"" OFF)
option(VEXCL_AMD_SI_WORKAROUND ""Implement workaround for AMD SI GPUs"" OFF)
set(VEXCL_CHECK_SIZES 0 CACHE STRING ""Check that expressions have correct sizes"")

#----------------------------------------------------------------------------
# Installation options
#----------------------------------------------------------------------------
option(VEXCL_INSTALL_CL_HPP ""Install the OpenCL C++ header provided by VexCL"" OFF)

#----------------------------------------------------------------------------
# Find Boost
#----------------------------------------------------------------------------
option(Boost_USE_STATIC_LIBS ""Use static versions of Boost libraries"" OFF)
if (WIN32)
    set(Boost_USE_STATIC_LIBS ON)
endif ()

find_package(Boost REQUIRED COMPONENTS
    chrono
    date_time
    filesystem
    program_options
    system
    thread
    unit_test_framework
    )

# Ensure all targets are available
include(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLBoostTargets.cmake"")

#----------------------------------------------------------------------------
# Generic target
#----------------------------------------------------------------------------
add_library(Common INTERFACE)
add_library(VexCL::Common ALIAS Common)

target_compile_features(Common INTERFACE
    cxx_auto_type
    cxx_nullptr
    cxx_rvalue_references
    cxx_right_angle_brackets
    cxx_static_assert
    cxx_variadic_templates
    cxx_decltype
)

if (VEXCL_AMD_SI_WORKAROUND)
    target_compile_definitions(Common INTERFACE VEXCL_AMD_SI_WORKAROUND)
endif()

target_include_directories(Common INTERFACE
    ${Boost_INCLUDE_DIRS}
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:include>
    )


target_link_libraries(Common INTERFACE
    Boost::filesystem
    Boost::system
    Boost::thread
    )

if (CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
    target_link_libraries(Common INTERFACE
        Boost::chrono
        Boost::date_time
        )
endif()

target_compile_options(Common INTERFACE
    # g++
    $<$<CXX_COMPILER_ID:GNU>:$<BUILD_INTERFACE:-Wall>>
    $<$<CXX_COMPILER_ID:GNU>:-Wno-missing-braces>
    $<$<CXX_COMPILER_ID:GNU>:-Wno-deprecated-declarations>
    $<$<CXX_COMPILER_ID:GNU>:-Wno-ignored-attributes>
    $<$<CXX_COMPILER_ID:GNU>:-Wno-unused-local-typedefs>
    $<$<CXX_COMPILER_ID:GNU>:-Wno-variadic-macros>
    # Clang
    $<$<CXX_COMPILER_ID:Clang>:$<BUILD_INTERFACE:-Wall>>
    $<$<CXX_COMPILER_ID:Clang>:-Wno-missing-braces>
    $<$<CXX_COMPILER_ID:Clang>:-Wno-deprecated-declarations>
    $<$<CXX_COMPILER_ID:Clang>:-Wno-ignored-attributes>
    # MSVC
    $<$<CXX_COMPILER_ID:MSVC>:/bigobj>
    $<$<CXX_COMPILER_ID:MSVC>:/wd4003>
    $<$<CXX_COMPILER_ID:MSVC>:/wd4996>
    )

target_compile_definitions(Common INTERFACE
    # MSVC
    $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX>
    $<$<CXX_COMPILER_ID:MSVC>:_VARIADIC_MAX=10>
    )

#----------------------------------------------------------------------------
# Find VexCL backends
#----------------------------------------------------------------------------
find_package(OpenCL)

# Ensure all targets are available
include(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLOpenCLTarget.cmake"")

if(OpenCL_FOUND)
    add_library(OpenCL INTERFACE)
    add_library(VexCL::OpenCL ALIAS OpenCL)

    target_link_libraries(OpenCL INTERFACE Common OpenCL::OpenCL)
    target_compile_definitions(OpenCL INTERFACE VEXCL_BACKEND_OPENCL)

    target_compile_options(Common INTERFACE
        $<$<CXX_COMPILER_ID:GNU>:-Wno-catch-value>
        )

    message(STATUS ""Found VexCL::OpenCL"")

    if (NOT ""${Boost_VERSION}"" STRLESS ""106100"")
        add_library(Compute INTERFACE)
        add_library(VexCL::Compute ALIAS Compute)

        target_link_libraries(Compute INTERFACE Common OpenCL::OpenCL)
        target_compile_definitions(Compute INTERFACE VEXCL_BACKEND_COMPUTE)

        message(STATUS ""Found VexCL::Compute"")
    endif()
endif()

find_package(CUDA)
if(CUDA_FOUND)
    add_library(CUDA INTERFACE)
    add_library(VexCL::CUDA ALIAS CUDA)

    target_include_directories(CUDA INTERFACE ""${CUDA_INCLUDE_DIRS}"")
    target_link_libraries(CUDA INTERFACE Common ""${CUDA_CUDA_LIBRARY}"")
    target_compile_definitions(CUDA INTERFACE VEXCL_BACKEND_CUDA)

    message(STATUS ""Found VexCL::CUDA"")
endif()

find_path(Boost_DLL NAMES boost/dll PATHS ${Boost_INCLUDE_DIRS})
if (Boost_DLL)
    if(OpenCL_INCLUDE_DIR)
        add_library(JIT INTERFACE)
        target_include_directories(JIT INTERFACE ""${OpenCL_INCLUDE_DIR}"")
    else()
        include(CheckIncludeFile)
        check_include_file(""CL/cl_platform.h"" HAVE_OpenCL_PLATFORM_H)
        if(HAVE_OpenCL_PLATFORM_H)
            add_library(JIT INTERFACE)
        endif()
    endif()

    if(NOT TARGET JIT)
        message(WARNING ""The JIT interface requires OpenCL headers to be available.""
                        ""You can download them from https://github.com/KhronosGroup/OpenCL-Headers""
                        ""Set OpenCL_INCLUDE_DIR to the location of the headers.""
                        ""For now, disabling the JIT target."")
    endif()
endif()


if(TARGET JIT)
    add_library(VexCL::JIT ALIAS JIT)

    set(VEXCL_JIT_COMPILER_FLAGS """" CACHE STRING ""VexCL JIT compiler flags"")
    target_compile_definitions(JIT INTERFACE VEXCL_JIT_COMPILER_FLAGS=${VEXCL_JIT_COMPILER_FLAGS})

    find_package(OpenMP)

    # Have to check several OPENMP_FOUND due to bug in
    # one version of CMake and the docs (fixed in patch release)
    # OpenMP is missing on macOS llvm default, for example
    if(OpenMP_FOUND OR OPENMP_FOUND OR OpenMP_CXX_FOUND)

        # CMake 3.9 FindOpenMP allows correct linking with Clang in more cases
        if(TARGET OpenMP::OpenMP_CXX)
            target_link_libraries(JIT INTERFACE OpenMP::OpenMP_CXX Common)
        else()
            # Clang may need -fopenmp=libiomp5 instead, can't be detected here without CMake 3.9
            target_link_libraries(JIT INTERFACE
                $<$<CXX_COMPILER_ID:GNU>:${OpenMP_CXX_FLAGS}>
                $<$<CXX_COMPILER_ID:Clang>:${OpenMP_CXX_FLAGS}>
                $<$<CXX_COMPILER_ID:Intel>:${OpenMP_CXX_FLAGS}>
                )
            target_compile_options(JIT INTERFACE ${OpenMP_CXX_FLAGS})
        endif()

        set(VEXCL_OMP_FLAGS ""${OpenMP_CXX_FLAGS}"")

        # We only need to add libraries to link to if this is using a preprocessor only OpenMP flag
        if(""${OpenMP_CXX_FLAGS}"" MATCHES "".*X(clang|preprocessor).*"")
            foreach(item ${OpenMP_CXX_LIBRARIES})
                set(VEXCL_OMP_FLAGS ""${VEXCL_OMP_FLAGS} ${item}"")
            endforeach()
        endif()

        # Pass the required flags to code
        target_compile_definitions(JIT INTERFACE VEXCL_OMP_FLAGS=${VEXCL_OMP_FLAGS})
    endif()

    target_link_libraries(JIT INTERFACE Common ${CMAKE_DL_LIBS})
    target_compile_definitions(JIT INTERFACE VEXCL_BACKEND_JIT)

    message(STATUS ""Found VexCL::JIT"")
endif()

include(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLTools.cmake"")

#----------------------------------------------------------------------------
if (VEXCL_MASTER_PROJECT)
    option(VEXCL_BUILD_TESTS    OFF)
    option(VEXCL_BUILD_EXAMPLES OFF)

    foreach(target OpenCL CUDA Compute JIT)
        if (TARGET ${target})
            set(VEXCL_BACKEND ""${target}"" CACHE STRING ""Select VexCL backend (OpenCL/CUDA/Compute/JIT/All)"")
            break()
        endif()
    endforeach()
    message(STATUS ""Selected backend: ${VEXCL_BACKEND}"")

    set_property(CACHE VEXCL_BACKEND PROPERTY STRINGS ""All"" ""OpenCL"" ""CUDA"" ""Compute"" ""JIT"")

    if(""${VEXCL_BACKEND}"" STREQUAL ""OpenCL"")
        add_library(VexCL::Backend ALIAS OpenCL)
    elseif(""${VEXCL_BACKEND}"" STREQUAL ""Compute"")
        add_library(VexCL::Backend ALIAS Compute)
    elseif(""${VEXCL_BACKEND}"" STREQUAL ""CUDA"")
        add_library(VexCL::Backend ALIAS CUDA)
    elseif(""${VEXCL_BACKEND}"" STREQUAL ""JIT"")
        add_library(VexCL::Backend ALIAS JIT)
    endif()

    #------------------------------------------------------------------------
    # Interoperation with Boost.compute
    #------------------------------------------------------------------------
    option(VEXCL_HAVE_BOOST_COMPUTE ""Use Boost.Compute algorithms"" OFF)
    if (VEXCL_HAVE_BOOST_COMPUTE)
        find_path(BOOST_COMPUTE_INCLUDE boost/compute.hpp)

        add_library(compute_target INTERFACE)
        target_include_directories(compute_target INTERFACE ${BOOST_COMPUTE_INCLUDE})
        target_compile_definitions(compute_target INTERFACE VEXCL_HAVE_BOOST_COMPUTE)
    endif ()

    #------------------------------------------------------------------------
    # Interoperation with clogs
    #------------------------------------------------------------------------
    option(VEXCL_CLOGS ""Use clogs algorithms"" OFF)
    if (VEXCL_CLOGS)
        find_path(CLOGS_INCLUDE clogs/clogs.h)
        find_library(CLOGS_LIBRARY clogs)

        add_library(clogs_target INTERFACE)
        target_include_directories(clogs_target INTERFACE ${CLOGS_INCLUDE})
        target_compile_definitions(clogs_target INTERFACE VEXCL_HAVE_CLOGS)
        target_link_libraries(clogs_target INTERFACE ${CLOGS_LIBRARY})
    endif ()

    if (VEXCL_BUILD_TESTS)
        enable_testing()
        add_subdirectory(tests)
    endif()

    if (VEXCL_BUILD_EXAMPLES)
        add_subdirectory(examples)
    endif()

    add_subdirectory(docs)

    install(DIRECTORY vexcl DESTINATION include)

    install(TARGETS Common EXPORT VexCLTargets)

    if (TARGET VexCL::OpenCL)
        if(VEXCL_INSTALL_CL_HPP)
            install(DIRECTORY CL DESTINATION include)
        endif()
        install(TARGETS OpenCL EXPORT VexCLTargets)
    endif()

    if (TARGET VexCL::Compute)
        install(TARGETS Compute EXPORT VexCLTargets)
    endif()

    if (TARGET VexCL::CUDA)
        install(TARGETS CUDA EXPORT VexCLTargets)
    endif()

    if (TARGET VexCL::JIT)
        install(TARGETS JIT EXPORT VexCLTargets)
    endif()

    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLConfig.cmake.in""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLConfig.cmake""
        @ONLY
        )

    # Copies needed so that VexCLConfig can find these files
    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLTools.cmake""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLTools.cmake""
        COPYONLY
        )

    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLOpenCLTarget.cmake""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLOpenCLTarget.cmake""
        COPYONLY
        )

    configure_file(
        ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLBoostTargets.cmake""
        ""${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLBoostTargets.cmake""
        COPYONLY
        )

    export(EXPORT VexCLTargets
        FILE ""${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLTargets.cmake""
        NAMESPACE VexCL::
        )

    export(PACKAGE VexCL)

    install(EXPORT VexCLTargets
        FILE VexCLTargets.cmake
        NAMESPACE VexCL::
        DESTINATION share/vexcl/cmake
        )

    install(
      FILES
        ${CMAKE_CURRENT_BINARY_DIR}/cmake/VexCLConfig.cmake
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLTools.cmake
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLOpenCLTarget.cmake
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/VexCLBoostTargets.cmake
      DESTINATION
        share/vexcl/cmake
        )
endif()
",3.1,3.1
41364,psi-im,iris,False,False,False,False,False,23,C++,2020-05-17 14:43:26+00:00,2008-08-15 08:03:46+00:00,40,980,"if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

project(iris)
cmake_minimum_required(VERSION 3.1.0)

if(POLICY CMP0071)
    cmake_policy(SET CMP0071 OLD)
endif()
if(POLICY CMP0074)
    cmake_policy(SET CMP0074 NEW)
endif()

set( IRIS_LIB_VERSION_MAJOR 1 )
set( IRIS_LIB_VERSION_MINOR 0 )
set( IRIS_LIB_VERSION_PATCH 0 )
set( IRIS_LIB_VERSION_STRING
    ${IRIS_LIB_VERSION_MAJOR}.${IRIS_LIB_VERSION_MINOR}.${IRIS_LIB_VERSION_PATCH}
    )

set( CMAKE_MODULE_PATH
    ""${CMAKE_MODULE_PATH}""
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""
    ""${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules""
    ""${PROJECT_SOURCE_DIR}/cmake/modules""
    ""${PROJECT_SOURCE_DIR}/../cmake/modules""
    )

option( USE_QJDNS ""Use qjdns/jdns library. Disabled by default for Qt5"" OFF )
option( SEPARATE_QJDNS ""Build qjdns with iris library"" OFF )

set(CMAKE_CXX_STANDARD 14)

include_directories(${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR})
include_directories(include/iris)

set(CMAKE_AUTOMOC ON)

find_package(Qt5 COMPONENTS Core Gui Xml Network REQUIRED)
if(USE_QJDNS)
    message(WARNING ""USE_QJDNS flag is enabled with Qt5. If you have problems with connection please disable this flag"")
endif()

if(USE_QJDNS)
    add_definitions(-DNEED_JDNS)
endif()

find_package(Qca REQUIRED)
set(QCA_INCLUDES ${Qca_INCLUDE_DIR})
set(qca_LIB ${Qca_LIBRARY})

include_directories(
    ${QCA_INCLUDES}
)

if(NOT USE_QJDNS AND SEPARATE_QJDNS)
    message(WARNING ""SEPARATE_QJDNS flag enabled, but USE_QJDNS flag disabled. Both flags will be disabled"")
    set(SEPARATE_QJDNS OFF)
endif()

if(USE_QJDNS AND (NOT SEPARATE_QJDNS))
    add_definitions(-DJDNS_STATIC)
    set(QJDns_LIBRARY qjdns)
    include_directories(
        src/jdns/include/jdns
        )
    set(jdns_SRCS
        src/jdns/src/jdns/jdns.c
        src/jdns/src/jdns/jdns_mdnsd.c
        src/jdns/src/jdns/jdns_packet.c
        src/jdns/src/jdns/jdns_sys.c
        src/jdns/src/jdns/jdns_util.c
        )
    set(jdns_PUBLIC_HEADERS
        src/jdns/include/jdns/jdns.h
        src/jdns/include/jdns/jdns_export.h
        )
    set(jdns_HEADERS
        src/jdns/src/jdns/jdns_packet.h
        src/jdns/src/jdns/jdns_mdnsd.h
        src/jdns/src/jdns/jdns_p.h
        )
    add_library(jdns STATIC ${jdns_SRCS} ${jdns_HEADERS} ${jdns_PUBLIC_HEADERS})
    if(WIN32)
        target_link_libraries(jdns ws2_32 advapi32)
    endif()
    set(qjdns_MOC_HDRS
        src/jdns/include/jdns/qjdns.h
        src/jdns/include/jdns/qjdnsshared.h
        src/jdns/src/qjdns/qjdns_p.h
        src/jdns/src/qjdns/qjdnsshared_p.h
        )

    qt_wrap_cpp(qjdns_MOC_SRCS ${qjdns_MOC_HDRS})

    set(qjdns_SRCS
        src/jdns/src/qjdns/qjdns.cpp
        src/jdns/src/qjdns/qjdns_sock.cpp
        src/jdns/src/qjdns/qjdnsshared.cpp
        )

    set(qjdns_PUBLIC_HEADERS
        src/jdns/include/jdns/qjdns.h
        src/jdns/include/jdns/qjdnsshared.h
        )
    set(qjdns_HEADERS
        src/jdns/src/qjdns/qjdns_sock.h
        )
    add_library(${QJDns_LIBRARY} STATIC ${qjdns_SRCS} ${qjdns_MOC_SRCS} ${qjdns_MOC_HDRS} ${qjdns_PUBLIC_HEADERS})
    target_link_libraries(${QJDns_LIBRARY} Qt5::Core Qt5::Network)
    target_link_libraries(${QJDns_LIBRARY} jdns)
elseif(USE_QJDNS)
    set(QJDns_SUFFIX -qt5)
    find_package(QJDns REQUIRED)
    set(QJDns_LIBRARY ${QJDns_LIBRARY} PARENT_SCOPE)
    include_directories( ${QJDns_INCLUDE_DIR} )
endif()

find_package(IDN REQUIRED)

add_definitions(-DIRISNET_STATIC)

add_subdirectory(src/irisnet)
add_subdirectory(src/xmpp)
",3.1.0,3.1
41473,project-gemmi,gemmi,False,False,False,False,False,5,C++,2020-05-17 09:32:46+00:00,2017-02-02 15:54:15+00:00,52,1701,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
project(gemmi C CXX)

option(USE_FORTRAN ""Build Fortran bindings"" OFF)
option(USE_PYTHON ""Build Python bindings"" OFF)
option(EXTRA_WARNINGS ""Set extra warning flags"" OFF)
option(USE_WMAIN ""(Windows only) take Unicode arguments in gemmi program"" OFF)

if (DEFINED ENV{FC} OR CMAKE_Fortran_COMPILER)
  set(USE_FORTRAN ON CACHE BOOL ""Build Fortran bindings"" FORCE)
endif()

if (USE_FORTRAN)
  enable_language(Fortran)
else()
  message(STATUS ""Skipping Fortran bindings. Add -D USE_FORTRAN=1 to build them."")
endif()

if (DEFINED ENV{EXTRA_WFLAGS})
  set(EXTRA_WARNINGS ON CACHE BOOL ""Set extra warning flags"" FORCE)
endif()

set(PYTHON_INSTALL_PATH ${PYTHON_SITE_PACKAGES})

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

include(CheckIncludeFile)

if (DEFINED ENV{CXXFLAGS})
  set(USING_ENV_CXXFLAGS ON CACHE BOOL """" FORCE)
endif()

# Set default build mode (based on CMake FAQ)
if (NOT CMAKE_BUILD_TYPE AND NOT USING_ENV_CXXFLAGS)
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
      ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.""
      FORCE)
endif()

# avoid CMake warning about unset policy
if (POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

find_package(ZLIB)
if (ZLIB_FOUND)
  include_directories(""${ZLIB_INCLUDE_DIR}"")
else()
  message(STATUS ""The build will use zlib code from third_party/zlib."")
  include_directories(""${CMAKE_SOURCE_DIR}/third_party/zlib"")
endif()
find_package(benchmark QUIET)
if (benchmark_FOUND)
  message(STATUS ""Found benchmark: ${benchmark_DIR}"")
else (NOT benchmark_FOUND)
  message(STATUS ""Benchmarks not configured."")
endif()

include_directories(""${CMAKE_SOURCE_DIR}/include""
                    ""${CMAKE_SOURCE_DIR}/third_party"")

if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang|GNU"" AND EXTRA_WARNINGS)
  set(CMAKE_CXX_FLAGS
      ""${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Wformat=2 -Wredundant-decls -Wfloat-conversion -Wdisabled-optimization -Wshadow $ENV{EXTRA_WFLAGS}"")
  message(STATUS ""C++ flags set to: ${CMAKE_CXX_FLAGS}"")
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES ""MSVC"")
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  # /wd4244 - conversion from 'type1' to 'type2', possible loss of data
  # /wd4267 - conversion from 'size_t' to 'type2'
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /wd4244 /wd4267"")
  #set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /Qvec-report:1"")
endif()

if (USE_FORTRAN)
  if (CMAKE_Fortran_COMPILER_ID MATCHES ""GNU"")
    set(CMAKE_Fortran_FLAGS ""${CMAKE_Fortran_FLAGS} -std=f2003 -fimplicit-none -Wall -Wextra -pedantic"")
    message(STATUS ""Fortran flags set to: ${CMAKE_Fortran_FLAGS}"")
    set(CMAKE_Fortran_FLAGS_DEBUG ""${CMAKE_Fortran_FLAGS_DEBUG} -fbounds-check"")
  endif()
endif()


if (ZLIB_FOUND)
  macro(support_gz exe)
    target_link_libraries(${exe} PRIVATE ZLIB::ZLIB)
  endmacro()
else()
  add_library(ungz OBJECT
      ""third_party/zlib/adler32.c""
      ""third_party/zlib/crc32.c""
      ""third_party/zlib/gzlib.c""
      ""third_party/zlib/gzread.c""
      ""third_party/zlib/inflate.c""
      ""third_party/zlib/inftrees.c""
      ""third_party/zlib/inffast.c""
      ""third_party/zlib/zutil.c"")
  check_include_file(unistd.h has_unistd_h)
  set(Z_DEF ""-DNO_GZCOMPRESS"")
  if (has_unistd_h)
    set(Z_DEF ""${Z_DEF} -DZ_HAVE_UNISTD_H"")
  endif()
  set_target_properties(ungz PROPERTIES COMPILE_FLAGS ""${Z_DEF}"")
  macro(support_gz exe)
    target_sources(${exe} PUBLIC $<TARGET_OBJECTS:ungz>)
  endmacro()
endif()

add_library(cgemmi STATIC fortran/grid.cpp fortran/symmetry.cpp)

if (USE_FORTRAN)
  add_library(fgemmi STATIC fortran/gemmi.f90)
  target_link_libraries(fgemmi PRIVATE cgemmi)
endif()


### programs from src/ ###

add_library(input OBJECT src/input.cpp)
add_library(options OBJECT src/options.cpp)
add_library(output OBJECT src/output.cpp)
add_library(mapcoef OBJECT src/mapcoef.cpp)

add_executable(gemmi-blobs EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/blobs.cpp $<TARGET_OBJECTS:mapcoef> $<TARGET_OBJECTS:input>)
support_gz(gemmi-blobs)

add_executable(gemmi-cif2json EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/cif2json.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-cif2json)

add_executable(gemmi-cif2mtz EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/cif2mtz.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-cif2mtz)

add_executable(gemmi-contact EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/contact.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-contact)

add_executable(gemmi-contents EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/contents.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-contents)

add_executable(gemmi-convert EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/convert.cpp $<TARGET_OBJECTS:output> $<TARGET_OBJECTS:input>)
support_gz(gemmi-convert)

add_executable(gemmi-crdrst EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/crdrst.cpp $<TARGET_OBJECTS:output>
               $<TARGET_OBJECTS:input>)
support_gz(gemmi-crdrst)

add_executable(gemmi-fprime EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/fprime.cpp)

add_executable(gemmi-grep EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/grep.cpp)
support_gz(gemmi-grep)

add_executable(gemmi-h EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/h.cpp $<TARGET_OBJECTS:output> $<TARGET_OBJECTS:input>)
support_gz(gemmi-h)

add_executable(gemmi-json2cif EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/json2cif.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-json2cif)

add_executable(gemmi-map EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/map.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-map)

add_executable(gemmi-map2sf EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/map2sf.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-map2sf)

add_executable(gemmi-mask EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/mask.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-mask)

add_executable(gemmi-mixmtz EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/mixmtz.cpp $<TARGET_OBJECTS:output>)

add_executable(gemmi-mondiff EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/mondiff.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-mondiff)

add_executable(gemmi-mtz EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/mtz.cpp)
support_gz(gemmi-mtz)

add_executable(gemmi-mtz2cif EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/mtz2cif.cpp)
support_gz(gemmi-mtz2cif)

add_executable(gemmi-residues EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/residues.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-residues)

add_executable(gemmi-rmsz EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/rmsz.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-rmsz)

add_executable(gemmi-align EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/align.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-align)

add_executable(gemmi-sf2map EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/sf2map.cpp $<TARGET_OBJECTS:mapcoef> $<TARGET_OBJECTS:input>)
support_gz(gemmi-sf2map)

add_executable(gemmi-sfcalc EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/sfcalc.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-sfcalc)

add_executable(gemmi-sg EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/sg.cpp)

add_executable(gemmi-tags EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/tags.cpp)
support_gz(gemmi-tags)

add_executable(gemmi-validate EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/validate.cpp src/validate_mon.cpp)
support_gz(gemmi-validate)

add_executable(gemmi-wcn EXCLUDE_FROM_ALL $<TARGET_OBJECTS:options>
               src/wcn.cpp $<TARGET_OBJECTS:input>)
support_gz(gemmi-wcn)

add_executable(gemmi-prog
               src/align.cpp src/blobs.cpp
               src/cif2mtz.cpp src/cif2json.cpp src/contact.cpp
               src/contents.cpp src/convert.cpp src/fprime.cpp
               src/grep.cpp src/h.cpp src/json2cif.cpp
               src/main.cpp src/map.cpp src/map2sf.cpp
               src/mask.cpp src/mondiff.cpp src/mtz.cpp src/mtz2cif.cpp
               src/residues.cpp src/rmsz.cpp
               src/sf2map.cpp src/sfcalc.cpp src/sg.cpp
               src/tags.cpp src/validate.cpp src/validate_mon.cpp src/wcn.cpp
               $<TARGET_OBJECTS:mapcoef>
               $<TARGET_OBJECTS:input>
               $<TARGET_OBJECTS:output>
               $<TARGET_OBJECTS:options>)
support_gz(gemmi-prog)
target_compile_definitions(gemmi-prog PRIVATE GEMMI_ALL_IN_ONE=1)
set_target_properties(gemmi-prog PROPERTIES OUTPUT_NAME gemmi)
if (USE_WMAIN)
  target_compile_definitions(gemmi-prog PRIVATE _UNICODE=1)
  if(MINGW)
    # target_link_options were added in cmake 3.13
    set_target_properties(gemmi-prog PROPERTIES LINK_FLAGS ""-municode"")
  endif()
endif()

### tests and examples ###

add_executable(ctest EXCLUDE_FROM_ALL fortran/ctest.c)
target_link_libraries(ctest PRIVATE cgemmi)

add_executable(cpptest EXCLUDE_FROM_ALL tests/main.cpp tests/cif.cpp)

add_executable(hello EXCLUDE_FROM_ALL examples/hello.cpp)
add_executable(doc_example EXCLUDE_FROM_ALL
               docs/code/sym.cpp docs/code/elem.cpp docs/code/resinfo.cpp
               docs/code/cell.cpp)
add_executable(doc_example2 EXCLUDE_FROM_ALL docs/code/cif_cc.cpp)
add_executable(doc_maybegz EXCLUDE_FROM_ALL
               docs/code/maybegz.cpp
               docs/code/mutate.cpp)
support_gz(doc_maybegz)

# always compile these tests with assertions enabled
if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang|GNU|Intel"")
  target_compile_options(doc_example PRIVATE -UNDEBUG)
endif()

add_executable(test_disulf EXCLUDE_FROM_ALL tests/disulf.cpp)
support_gz(test_disulf)

# auth_label requires <experimental/filesystem> and -lstdc++fs
add_executable(auth_label EXCLUDE_FROM_ALL examples/auth_label.cpp)
if (NOT MSVC)
  target_link_libraries(auth_label PRIVATE stdc++fs)
endif()
support_gz(auth_label)

add_executable(check_conn EXCLUDE_FROM_ALL examples/check_conn.cpp)
support_gz(check_conn)

enable_testing()

add_custom_target(print-version
  COMMAND gemmi-prog --version
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMENT ""gemmi --version""
)

add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIGURATION>)
add_test(NAME cpptest COMMAND cpptest)

add_dependencies(check
    ctest cpptest hello doc_example doc_example2 doc_maybegz
    test_disulf check_conn print-version)

if (USE_FORTRAN)
  add_executable(ftest EXCLUDE_FROM_ALL fortran/ftest.f90)
  target_link_libraries(ftest PRIVATE fgemmi)
  add_test(NAME ftest COMMAND ftest)
  add_executable(ftest_grid EXCLUDE_FROM_ALL fortran/ftest_grid.f90)
  target_link_libraries(ftest_grid PRIVATE fgemmi)
  if(""${CMAKE_Fortran_COMPILER_ID}"" STREQUAL ""Intel"")
    set_property(TARGET ftest ftest_grid PROPERTY LINKER_LANGUAGE Fortran)
  endif()
  add_test(NAME ftest_grid COMMAND ftest_grid)
  add_dependencies(check ftest ftest_grid)

endif()

### benchmarks ###

if (benchmark_FOUND)
  foreach(b stoi elem mod pdb resinfo round sym)
    add_executable(${b}-bm EXCLUDE_FROM_ALL benchmarks/${b}.cpp)
    target_link_libraries(${b}-bm PRIVATE benchmark::benchmark)
    set_target_properties(${b}-bm PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                             ""${CMAKE_BINARY_DIR}/benchmarks"")
    add_dependencies(check ${b}-bm)
  endforeach()
endif()

### Python bindings ###
# Alternatively, the Python module can be built with setup.py.

if (USE_PYTHON)
  message(STATUS ""The python module will be built."")
  find_package(pybind11 2.5 CONFIG REQUIRED)
  message(STATUS ""Found pybind11 ${pybind11_VERSION}: ${pybind11_INCLUDE_DIRS}"")
  pybind11_add_module(gemmi python/gemmi.cpp python/cif.cpp python/grid.cpp
                            python/hkl.cpp python/mol.cpp python/monlib.cpp
                            python/read.cpp python/sym.cpp
                            python/unitcell.cpp python/write.cpp)
  if(CMAKE_CXX_FLAGS MATCHES ""-Wshadow"")
    target_compile_options(gemmi PRIVATE ""-Wno-shadow"")
  endif()
  support_gz(gemmi)
  if (NOT DEFINED PYTHON_INSTALL_DIR)
    set(PYTHON_INSTALL_DIR ${PYTHON_SITE_PACKAGES})
  endif()
else()
  message(STATUS ""Skipping Python module. Add -D USE_PYTHON=1 to build it."")
endif()

install(TARGETS gemmi-prog DESTINATION bin)
install(DIRECTORY include/gemmi DESTINATION include)
if (USE_PYTHON AND DEFINED PYTHON_INSTALL_DIR)
  install(TARGETS gemmi DESTINATION ${PYTHON_INSTALL_DIR})
endif()
",3.1.0,3.1
41474,real-logic,simple-binary-encoding,False,False,False,False,False,65,Java,2020-05-16 14:23:16+00:00,2013-09-03 09:13:34+00:00,2197,2887,"#
# Copyright 2013-2020 Real Logic Limited.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)
cmake_policy(VERSION 3.1.3)

file(STRINGS version.txt SBE_VERSION_TXT LIMIT_COUNT 1 REGEX ""^[0-9]+(\\.[0-9]+)+"")
string(REGEX REPLACE ""^([0-9]+(\\.[0-9]+)+).*$"" ""\\1"" SBE_VERSION_NUMERIC ""${SBE_VERSION_TXT}"")

project(""sbe"" VERSION ""${SBE_VERSION_NUMERIC}"")

include(ExternalProject)
include(CheckLibraryExists)

if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    set(STANDALONE_BUILD TRUE)
endif ()

option(SBE_TESTS ""Enable tests"" ${STANDALONE_BUILD})
option(SBE_BUILD_SAMPLES ""Enable building the sample projects"" ${STANDALONE_BUILD})
option(SBE_BUILD_BENCHMARKS ""Enable building the benchmarks"" ${STANDALONE_BUILD})

unset(STANDALONE_BUILD)

if (SBE_TESTS)
    enable_testing()
endif ()

# default built type is Release
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build"" FORCE)
endif (NOT CMAKE_BUILD_TYPE)

if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_CXX_EXTENSIONS)
    set(CMAKE_CXX_EXTENSIONS OFF)
endif ()

if (NOT DEFINED CMAKE_C_STANDARD)
    set(CMAKE_C_STANDARD 11)
endif ()

if (NOT DEFINED CMAKE_C_EXTENSIONS)
    set(CMAKE_C_EXTENSIONS OFF)
endif ()

if (SBE_TESTS)
    set(SBE_THIRDPARTY_BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/thirdparty"")

    ExternalProject_Add(
        gtest
        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/googletest-release-1.10.0.zip
        URL_MD5 82358affdd7ab94854c8ee73a180fc53
        PREFIX ""${SBE_THIRDPARTY_BINARY_DIR}/gtest""
        CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        BUILD_BYPRODUCTS ""${SBE_THIRDPARTY_BINARY_DIR}/gtest/src/gtest-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX};${SBE_THIRDPARTY_BINARY_DIR}/gtest/src/gtest-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock_main${CMAKE_STATIC_LIBRARY_SUFFIX}""
        INSTALL_COMMAND """"
        LOG_CONFIGURE ON
        LOG_BUILD ON
    )

    ExternalProject_Get_Property(gtest source_dir)
    set(GTEST_SOURCE_DIR ${source_dir})
    ExternalProject_Get_Property(gtest binary_dir)
    set(GTEST_BINARY_DIR ${binary_dir})

    set(GTEST_LIBS
        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest_main${CMAKE_STATIC_LIBRARY_SUFFIX}
    )
endif ()

find_package(Threads)

if (UNIX)
    add_compile_options(-Wall -Wpedantic -Wextra -Wno-unused-parameter)
endif ()

if (APPLE)
    # -Wall doesn't enable everything we want to see
    add_compile_options(-Wsign-compare)
    add_definitions(-DDarwin)
elseif (MSVC)
    add_definitions(-DWIN32)

    set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd /Od /Zi"")
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
else ()
    add_definitions(-D_GNU_SOURCE)
endif ()

set(LIBPREFIX ""${CMAKE_STATIC_LIBRARY_PREFIX}"")
set(LIBSUFFIX ""${CMAKE_STATIC_LIBRARY_SUFFIX}"")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/binaries"")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}/lib"")

set(SBE_JAR ""${CMAKE_CURRENT_SOURCE_DIR}/sbe-all/build/libs/sbe-all-${SBE_VERSION_TXT}.jar"")

file(GLOB_RECURSE SBE_SOURCES
    ""${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/main/java/*.java""
)

add_custom_command(OUTPUT ${SBE_JAR}
    COMMAND ./gradlew assemble -x javadoc
    DEPENDS ${SBE_SOURCES}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT ""Generating SBE jar""
)

add_custom_target(sbe-jar
    DEPENDS ${SBE_JAR}
)

set(CODEC_TARGET_DIR ""${CMAKE_CURRENT_BINARY_DIR}/generated"")
set(C_CODEC_TARGET_DIR ""${CODEC_TARGET_DIR}/c"")
set(CXX_CODEC_TARGET_DIR ""${CODEC_TARGET_DIR}/cpp"")
set(CODEC_SCHEMA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/resources"")
set(CODEC_PERF_SCHEMA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/sbe-benchmarks/src/main/resources"")
set(CODEC_EXAMPLES_SCHEMA_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/sbe-samples/src/main/resources"")

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/main/cpp)

if (SBE_TESTS)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/c)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/cpp)
endif ()

if (SBE_BUILD_SAMPLES)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-samples/src/main/cpp)
endif ()

if (SBE_BUILD_BENCHMARKS)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-benchmarks/src/main/cpp)
endif ()
",3.1.3,3.1
41567,mojyt,cpptraj,False,False,False,False,False,21,C++,2020-05-13 18:51:26+00:00,2014-12-10 16:17:52+00:00,43,9277,"cmake_minimum_required(VERSION 3.1) #need 3.1 for ""cmake -E env"" command
project(cpptraj NONE)

#version number
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
set(cpptraj_MAJOR_VERSION 4)
set(cpptraj_MINOR_VERSION 3)
set(cpptraj_TWEAK_VERSION 4)

set(cpptraj_VERSION ""${cpptraj_MAJOR_VERSION}.${cpptraj_MINOR_VERSION}.${cpptraj_TWEAK_VERSION}"")

if(NOT INSIDE_AMBER)
	# initialization and include paths
	#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	include(cmake/AmberBuildSystemInit.cmake)

	#now enable the languages
	enable_language(C CXX)

	include(AmberBuildSystem2ndInit)
	
	include(OpenMPConfig)
	include(MPIConfig)
	include(CudaConfig)

	set(LINALG_LIBS_REQUIRED TRUE)
	set(NEEDED_3RDPARTY_TOOLS zlib fftw libbz2 readline pnetcdf blas lapack mkl arpack netcdf)
	set(REQUIRED_3RDPARTY_TOOLS netcdf)
	include(3rdPartyTools)
	
	if(fftw_DISABLED)
		enable_language(Fortran)
	endif()
	
	include(CompilerFlags)

	include(NetlibConfig)
	
	#CPack setup
	# --------------------------------------------------------------------
	set(PACKAGE_NAME ""cpptraj"")
	set(PACKAGE_FILENAME ""cpptraj"")

	#set(ICO_ICON ${CMAKE_SOURCE_DIR}/amber.ico)
	#set(ICO_UNINSTALL_ICON ${CMAKE_SOURCE_DIR}/amber-uninstall.ico)
	#set(ICNS_ICON ${CMAKE_SOURCE_DIR}/cmake-packaging/amber_logo.icns)
	#set(OSX_STARTUP_SCRIPT ${CMAKE_SOURCE_DIR}/cmake-packaging/osx-startup-script.sh)
	set(BUNDLE_IDENTIFIER org.ambermd.cpptraj)
	set(BUNDLE_SIGNATURE CPTJ)
	include(Packaging)
	
	# header installation option
	option(INSTALL_HEADERS ""Copy headers to the include/cpptraj folder of the install directory.  Useful for building with pytraj."" FALSE)
	
	option(BUILD_PARALLEL_COMBINATIONS ""If true, then combinations of all enabled parallelizations will be built, e.g. cpptraj.OMP.MPI and cpptraj.OMP.MPI.cuda"" FALSE)
else()
	set(INSTALL_HEADERS FALSE)
	set(BUILD_PARALLEL_COMBINATIONS FALSE)
endif()

# on Windows, make MSVC auto-create import libraries just like MinGW does
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

add_subdirectory(src)
add_subdirectory(test)

#--------------------------------------------------------------	
if(NOT INSIDE_AMBER)
	print_build_report()
endif()",3.1,3.1
41780,BelledonneCommunications,mediastreamer2,False,False,False,False,False,23,C,2020-05-14 16:29:40+00:00,2015-01-14 10:22:40+00:00,78,5938,"############################################################################
# CMakeLists.txt
# Copyright (C) 2010-2019  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.1)
project(mediastreamer2 VERSION 4.4.0 LANGUAGES C CXX)

# See: https://cmake.org/cmake/help/v3.12/policy/CMP0072.html
if(POLICY CMP0072)
	cmake_policy(SET CMP0072 NEW)
endif()

set(MEDIASTREAMER_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set(MEDIASTREAMER_MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(MEDIASTREAMER_MICRO_VERSION ${PROJECT_VERSION_PATCH})
set(MEDIASTREAMER_VERSION ${PROJECT_VERSION})
set(MEDIASTREAMER_SO_VERSION ""10"") # incremented after Mediastreamer 2.15.1. Do not increment before next release

string(REGEX MATCH ""^(arm*|aarch64)"" FIXED_POINT_PROCESSOR ""${CMAKE_SYSTEM_PROCESSOR}"")
if(FIXED_POINT_PROCESSOR)
	set(ENABLE_FIXED_POINT_DEFAULT_VALUE YES)
else()
	set(ENABLE_FIXED_POINT_DEFAULT_VALUE NO)
endif()
if(IOS)
	set(ENABLE_MACSND_DEFAULT_VALUE NO)
	set(ENABLE_MACAQSND_DEFAULT_VALUE YES)
else()
	set(ENABLE_MACSND_DEFAULT_VALUE YES)
	set(ENABLE_MACAQSND_DEFAULT_VALUE NO)
endif()
set(ENABLE_GLX_DEFAULT_VALUE NO)
set(ENABLE_X11_DEFAULT_VALUE NO)
if(UNIX)
	if(NOT APPLE)
		set(ENABLE_GLX_DEFAULT_VALUE YES)
		set(ENABLE_X11_DEFAULT_VALUE YES)
	endif()
endif()
if(UNIX AND NOT APPLE AND NOT ANDROID)
	set(LINUX_OR_BSD 1)
endif()

include(CMakeDependentOption)

option(ENABLE_SHARED ""Build shared library."" YES)
option(ENABLE_STATIC ""Build static library."" YES)
option(ENABLE_DEBUG_LOGS ""Enable the display of traces showing the execution of the library."" NO)
option(ENABLE_DOC ""Enable documentation generation with Doxygen."" YES)
option(ENABLE_FIXED_POINT ""Turn on fixed point computations."" ${ENABLE_FIXED_POINT_DEFAULT_VALUE})
option(ENABLE_NON_FREE_CODECS ""Allow inclusion of non-free codecs in the build."" NO)
option(ENABLE_PCAP ""Enable PCAP support."" NO)
option(ENABLE_STRICT ""Build with strict compile options."" YES)
option(ENABLE_RELATIVE_PREFIX ""Find resources relatively to the installation directory."" NO)
option(ENABLE_TOOLS ""Turn on or off compilation of tools."" YES)
option(ENABLE_UNIT_TESTS ""Enable compilation of unit tests."" YES)
option(ENABLE_PACKAGE_SOURCE ""Create 'package_source' target for source archive making (CMake >= 3.11)"" OFF)

option(ENABLE_SRTP ""Build with the SRTP transport support."" YES)
cmake_dependent_option(ENABLE_ZRTP ""Build with ZRTP support."" YES ""ENABLE_SRTP"" NO)

option(ENABLE_SOUND ""Can be used to turn off all possible sound backends."" YES)
cmake_dependent_option(ENABLE_ALSA ""Enable ALSA support."" YES ""ENABLE_SOUND;LINUX_OR_BSD"" NO)
cmake_dependent_option(ENABLE_ANDROIDSND ""Enable Android sound support."" NO ""ENABLE_SOUND;ANDROID"" NO)
cmake_dependent_option(ENABLE_ARTSC ""Enable artsc (KDE<4) sound input/output."" NO ""ENABLE_SOUND;LINUX_OR_BSD"" NO)
cmake_dependent_option(ENABLE_MACSND ""Enable MAC OS X Audio Units sound support."" ${ENABLE_MACSND_DEFAULT_VALUE} ""ENABLE_SOUND;APPLE"" NO)
cmake_dependent_option(ENABLE_MACAQSND ""Enable native MAC OS X Audio Queue sound support."" ${ENABLE_MACAQSND_DEFAULT_VALUE} ""ENABLE_SOUND;APPLE"" NO)
cmake_dependent_option(ENABLE_QSA ""Enable QSA (QNX Sound Architecture) support."" NO ""ENABLE_SOUND"" NO)
# OSS is mostly deprecated in 2016, so it should not be built by default (it won't work anyway). Let user defines it
# itself only if he REALLY needs it.
cmake_dependent_option(ENABLE_OSS ""Enable OSS support."" NO ""ENABLE_SOUND;LINUX_OR_BSD"" NO)
cmake_dependent_option(ENABLE_PORTAUDIO ""Enable portaudio native support."" NO ""ENABLE_SOUND"" NO)
cmake_dependent_option(ENABLE_PULSEAUDIO ""Enable pulseaudio support."" YES ""ENABLE_SOUND"" NO)
option(ENABLE_G726 ""Build mediastreamer2 with the G726 codec."" NO)
option(ENABLE_GSM ""Build mediastreamer2 with the GSM codec."" YES)
option(ENABLE_BV16 ""Build mediastreamer2 with the BV16 codec."" YES)
option(ENABLE_OPUS ""Build mediastreamer2 with the OPUS codec."" YES)
option(ENABLE_SPEEX_CODEC ""Build mediastreamer2 with the SPEEX codec."" YES)
option(ENABLE_SPEEX_DSP ""Build mediastreamer2 with the SPEEX DSP support."" YES)
option(ENABLE_G729 ""Build mediastreamer2 with the G729 codec."" YES)
option(ENABLE_G729B_CNG ""Build mediastreamer2 with G729 annex B cng."" NO)
cmake_dependent_option(ENABLE_RESAMPLE ""Build mediastreamer2 with the resampling capability."" YES ""ENABLE_SPEEX_DSP"" NO)

option(ENABLE_VIDEO ""Build mediastreamer2 with video support."" YES)
cmake_dependent_option(ENABLE_FFMPEG ""Build mediastreamer2 with ffmpeg video support."" YES ""ENABLE_VIDEO"" NO)
cmake_dependent_option(ENABLE_GL ""Enable generic OpenGL rendering support."" YES ""ENABLE_VIDEO"" NO)
cmake_dependent_option(ENABLE_GLX ""Enable X11+OpenGL rendering support (requires glx and glew)."" ${ENABLE_GLX_DEFAULT_VALUE} ""ENABLE_VIDEO;UNIX"" NO)
cmake_dependent_option(ENABLE_SDL ""Enable SDL support."" NO ""ENABLE_FFMPEG"" NO)
cmake_dependent_option(ENABLE_V4L ""Enable Video4Linux support."" YES ""ENABLE_VIDEO;LINUX_OR_BSD"" NO)
cmake_dependent_option(ENABLE_X11 ""Enable X11 support."" ${ENABLE_X11_DEFAULT_VALUE} ""ENABLE_VIDEO;UNIX"" NO)
cmake_dependent_option(ENABLE_XV ""Enable XV support."" ${ENABLE_X11_DEFAULT_VALUE} ""ENABLE_VIDEO;UNIX"" NO)
cmake_dependent_option(ENABLE_THEORA ""Enable theora video codec support."" YES ""ENABLE_VIDEO"" NO)
cmake_dependent_option(ENABLE_VPX ""Build mediastreamer2 with VPX codec."" YES ""ENABLE_VIDEO"" NO)
option(ENABLE_MKV ""Enable support of MKV files reading and writing."" YES)
cmake_dependent_option(ENABLE_QNX ""Build medistreamer2 with BB10 filters."" NO ""ENABLE_VIDEO"" NO)
option(ENABLE_JPEG ""Enable JPEG support"" YES)
cmake_dependent_option(ENABLE_QRCODE ""Enable QRCode support"" YES ""ENABLE_VIDEO"" NO)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_EXTENSIONS NO)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(CheckIncludeFile)
include(CheckLibraryExists)
include(CMakePushCheckState)
include(GNUInstallDirs)

if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS ""Setting install rpath to ${CMAKE_INSTALL_RPATH}"")
endif()

if(MSVC AND MSVC_VERSION LESS 1800)
	set(MSVC_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC"")
	list(APPEND CMAKE_REQUIRED_INCLUDES ""${MSVC_INCLUDE_DIR}"")
endif()

check_include_file(sys/shm.h HAVE_SYS_SHM_H)
check_include_file(alloca.h HAVE_ALLOCA_H)
if(ENABLE_OSS)
	check_include_file(soundcard.h HAVE_SOUNDCARD_H)
	check_include_file(sys/soundcard.h HAVE_SYS_SOUNDCARD_H)
	check_include_file(machine/soundcard.h HAVE_MACHINE_SOUNDCARD_H)
	check_include_file(sys/audio.h HAVE_SYS_AUDIO_H)
	if(NOT (HAVE_SOUNDCARD_H OR HAVE_SYS_SOUNDCARD_H OR HAVE_MACHINE_SOUNDCARD_H OR HAVE_SYS_AUDIO_H))
		set(ENABLE_OSS OFF CACHE BOOL ""Enable OSS support."" FORCE)
	endif()
endif()

check_library_exists(""dl"" ""dlopen"" """" HAVE_DLOPEN)

include(TestBigEndian)
test_big_endian(WORDS_BIGENDIAN)

find_package(ortp REQUIRED CONFIG)

if(ENABLE_PCAP)
	find_package(PCAP QUIET)
endif()

if(ENABLE_SRTP)
	find_package(SRTP)
	if(NOT SRTP_FOUND)
		message(WARNING ""Could not find SRTP library, Mediastreamer2 will be compiled without SRTP support."")
		set(ENABLE_SRTP OFF CACHE BOOL ""Build with the SRTP transport support."" FORCE)
	endif()
endif()
if(ENABLE_ZRTP)
	find_package(bzrtp REQUIRED CONFIG)
	if(NOT BZRTP_FOUND)
		message(WARNING ""Could not find bzrtp library, mediastreamer2 will be compiled without ZRTP support."")
		set(ENABLE_ZRTP OFF CACHE BOOL ""Build mediastreamer2 with ZRTP support."" FORCE)
	endif()
endif()
if(ENABLE_G726)
	find_package(SpanDSP REQUIRED)
endif()
if(ENABLE_GSM)
	find_package(GSM)
	if(NOT GSM_FOUND)
		message(WARNING ""Could not find GSM library, mediastreamer2 will be compiled without the GSM codec."")
		set(ENABLE_GSM OFF CACHE BOOL ""Build mediastreamer2 with the GSM codec."" FORCE)
	endif()
endif()
if(ENABLE_BV16)
	find_package(BV16)
	if(NOT BV16_FOUND)
		message(WARNING ""Could not find BV16 library, mediastreamer2 will be compiled without the BV16 codec."")
		set(ENABLE_BV16 OFF CACHE BOOL ""Build mediastreamer2 with the BV16 codec."" FORCE)
	endif()
endif()
if(ENABLE_OPUS)
	find_package(Opus)
	if(NOT OPUS_FOUND)
		message(WARNING ""Could not find opus library, mediastreamer2 will be compiled without the OPUS codec."")
		set(ENABLE_OPUS OFF CACHE BOOL ""Build mediastreamer2 with the OPUS codec."" FORCE)
	endif()
endif()
if(ENABLE_SPEEX_CODEC)
	find_package(Speex)
	if(NOT SPEEX_FOUND)
		message(WARNING ""Could not find speex library, mediastreamer2 will be compiled without the SPEEX codec."")
		set(ENABLE_SPEEX_CODEC OFF CACHE BOOL ""Build mediastreamer2 with the SPEEX codec."" FORCE)
	endif()
endif()
if(ENABLE_SPEEX_DSP)
	find_package(SpeexDsp REQUIRED)
endif()
if(ENABLE_ALSA)
	find_package(ALSA)
	if(NOT ALSA_FOUND)
		set(ENABLE_ALSA OFF CACHE BOOL ""Enable ALSA support."" FORCE)
	endif()
endif()
if(ENABLE_ARTSC)
	find_package(Arts REQUIRED)
endif()
if(ENABLE_PORTAUDIO)
	find_package(PortAudio REQUIRED)
endif()
if(ENABLE_PULSEAUDIO)
	find_package(PulseAudio)
	if(NOT PULSEAUDIO_FOUND)
		set(ENABLE_PULSEAUDIO OFF CACHE BOOL ""Enable pulseaudio support."" FORCE)
	endif()
endif()
if(ENABLE_QSA)
	find_package(QSA REQUIRED)
	find_package(QnxAudioManager REQUIRED)
endif()
if(ENABLE_VIDEO)
	add_definitions(-DVIDEO_ENABLED)
endif()
if(ENABLE_FFMPEG)
	find_package(FFMpeg REQUIRED)
else()
	add_definitions(-DNO_FFMPEG)
endif()
if(ENABLE_V4L)
	find_package(V4L)
	if(NOT V4L_FOUND)
		message(FATAL_ERROR ""Missing V4L. It is highly recommended to build with libv4l2 headers and library. Many camera will won't work or will crash your application if libv4l2 is not installed. If you know what you are doing, you can use -DENABLE_V4L=0 to disable this check."")
	endif()
endif()
if(ENABLE_X11)
	find_package(X11)
	if(NOT X11_FOUND)
		set(ENABLE_X11 OFF CACHE BOOL ""Enable X11 support."" FORCE)
	endif()
endif()
if(ENABLE_XV)
	find_package(Xv)
	if(XV_FOUND)
		set(HAVE_XV 1)
	else()
		set(ENABLE_XV OFF CACHE BOOL ""Enable XV support."" FORCE)
	endif()
endif()
if(ENABLE_GL)
	if(WIN32)
		find_package(QtAngle)
		if(QTANGLE_FOUND)
			set(HAVE_GL 1)
		else()
			set(ENABLE_GL OFF CACHE BOOL ""Enable generic OpenGL rendering support."" FORCE)
		endif()
	else()
		find_package(OpenGL)
		if(OPENGL_FOUND)
			set(HAVE_GL 1)
		else()
			set(ENABLE_GL OFF CACHE BOOL ""Enable generic OpenGL rendering support."" FORCE)
		endif()
	endif()
endif()
if(ENABLE_GLX)
	find_package(GLX)
	if(GLX_FOUND)
		set(HAVE_GLX 1)
	else()
		set(ENABLE_GLX OFF CACHE BOOL ""Enable X11+OpenGL rendering support (requires glx and glew)."" FORCE)
	endif()
endif()
if(NOT APPLE AND NOT ANDROID AND OPENGL_FOUND OR GLX_FOUND)
	find_package(Glew REQUIRED)
endif()
# TODO: Handle SDL option
if(ENABLE_THEORA)
	find_package(Theora)
	if(NOT THEORA_FOUND)
		message(WARNING ""Could not find theora library, mediastreamer2 will be compiled without theora support."")
		set(ENABLE_THEORA OFF CACHE BOOL ""Enable theora video codec support."" FORCE)
	endif()
endif()
if(ENABLE_VPX)
	find_package(VPX)
	if(VPX_FOUND)
		set(HAVE_VPX 1)
	else()
		set(ENABLE_VPX OFF CACHE BOOL ""Build mediastreamer2 with VPX codec."" FORCE)
	endif()
endif()
if(ENABLE_MKV)
	find_package(BcMatroska2 QUIET)
	if(NOT BCMATROSKA2_FOUND)
		message(WARNING ""Could not find BcMatroska2 library, mediastreamer2 will be compiled without MKV support."")
		set(ENABLE_MKV OFF CACHE BOOL ""Enable support of MKV files reading and writing."" FORCE)
	endif()
endif()

if(ENABLE_QNX)
	find_package(Screen)
	if(NOT SCREEN_FOUND)
		message(FATAL_ERROR ""SCREEN NOT FOUND"")
	endif()
	find_package(CamApi)
	if(NOT CAMAPI_FOUND)
		message(FATAL_ERROR ""CAMAPI NOT FOUND"")
	endif()
endif()

if(ENABLE_SOUND AND NOT(WIN32 OR ENABLE_ALSA OR ENABLE_ARTSC OR ENABLE_MACSND OR ENABLE_MACAQSND OR ENABLE_OSS OR ENABLE_PORTAUDIO OR ENABLE_PULSEAUDIO OR ENABLE_QSA OR ENABLE_ANDROIDSND))
	message(FATAL_ERROR ""Could not find a support sound driver API. Use -DENABLE_SOUND=NO if you don't care about having sound."")
endif()

if(ENABLE_G729 OR ENABLE_G729B_CNG)
	find_package(Bcg729 1.0.1 CONFIG)
	if(NOT BCG729_FOUND)
		message(WARNING ""Could not find bcg729, mediastreamer2 will be compiled without G729 codec and G729 AnnexB in RFC3389."")
		set(ENABLE_G729 OFF CACHE BOOL ""Build mediastreamer2 with the G729 codec."" FORCE)
		set(ENABLE_G729_CNG OFF CACHE BOOL ""Build mediastreamer2 with G729 Annex B cng."" FORCE)
	endif()
endif()

if(ENABLE_JPEG)
	find_package(TurboJpeg)
	if(NOT TURBOJPEG_FOUND)
		message(WARNING ""Could not find libturbo-jpeg, mediastreamer2 will be compiled without LibJpeg-Turbo"")
		set(ENABLE_JPEG OFF CACHE BOOL ""Enable JPEG support"" FORCE)
	endif()
endif()
if(ENABLE_QRCODE)
	find_package(Zxing)
	if(NOT ZXING_FOUND)
		message(WARNING ""Could not find Zxing, mediastreamer2 will be compiled without Zxing(QRCode)"")
		set(ENABLE_QRCODE OFF CACHE BOOL ""Enable QRCode support"" FORCE)
	else()
		add_definitions(-DQRCODE_ENABLED)
	endif()
endif()
if(ANDROID)
	find_library(ANDROID_CPU_FEATURES_LIBRARY NAMES cpufeatures)
	if (CMAKE_ANDROID_NDK_VERSION VERSION_LESS 19)
		find_library(ANDROID_SUPPORT_LIBRARY NAMES support)
	endif()
endif()


find_package(bctoolbox 0.0.3 REQUIRED OPTIONAL_COMPONENTS tester CONFIG)

include_directories(
	include
	src/audiofilters
	src/utils
	src/voip
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_BINARY_DIR}/src
)

set(MEDIASTREAMER2_INCLUDE_DIRS )
set(LINK_LIBS bctoolbox ortp)

if(WIN32)
	if(NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsPhone"" AND NOT CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
		list(APPEND LINK_LIBS ${LIBGCC} ${LIBMINGWEX} ole32 oleaut32 uuid Winmm Ws2_32)
		if(ENABLE_VIDEO)
			list(APPEND LINK_LIBS gdi32 strmiids user32 vfw32)
		endif()
	endif()
endif()
if(LIBM)
	list(APPEND LINK_LIBS m)
endif()
if(ANDROID_CPU_FEATURES_LIBRARY)
	list(APPEND LINK_LIBS ${ANDROID_CPU_FEATURES_LIBRARY})
endif()
if(ANDROID_SUPPORT_LIBRARY)
	list(APPEND LINK_LIBS ${ANDROID_SUPPORT_LIBRARY})
endif()
if(ANDROID AND ENABLE_VIDEO)
	list(APPEND LINK_LIBS EGL GLESv2 android)
endif()
if(HAVE_DLOPEN)
	list(APPEND LINK_LIBS dl)
endif()
if(ALSA_FOUND)
	list(APPEND LINK_LIBS asound)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ALSA_INCLUDE_DIRS})
	set(__ALSA_ENABLED__ 1)
endif()
if(ARTS_FOUND)
	list(APPEND LINK_LIBS arts)
  	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ARTS_INCLUDE_DIRS})
	set(__ARTS_ENABLED__ 1)
endif()
if(PORTAUDIO_FOUND)
	list(APPEND LINK_LIBS portaudio)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PORTAUDIO_INCLUDE_DIRS})
	set(__PORTAUDIO_ENABLED__ 1)
endif()
if(PULSEAUDIO_FOUND)
	list(APPEND LINK_LIBS pulse)
  	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PULSEAUDIO_INCLUDE_DIRS})
  	set(__PULSEAUDIO_ENABLED__ 1)
endif()
if(QSA_FOUND)
	list(APPEND LINK_LIBS ${QSA_LIBRARIES})
	list(APPEND LINK_LIBS ${QNXAUDIOMANAGER_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QSA_INCLUDE_DIRS})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QNXAUDIOMANAGER_INCLUDE_DIRS})
	set(__QSA_ENABLED__ 1)
	set(__QNX__ 1)
endif()
if(FFMPEG_FOUND)
	list(APPEND LINK_LIBS ${FFMPEG_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${FFMPEG_INCLUDE_DIRS})
	if(MSVC)
		add_definitions(-Dinline=__inline)
	endif()
endif()
if(V4L_FOUND)
	list(APPEND LINK_LIBS ${V4L_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${V4L_INCLUDE_DIRS})
endif()
if(X11_FOUND)
	list(APPEND LINK_LIBS X11)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${X11_INCLUDE_DIRS})
endif()
if(XV_FOUND)
	list(APPEND LINK_LIBS Xv)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${XV_INCLUDE_DIRS})
endif()
if(GLX_FOUND)
	list(APPEND LINK_LIBS GL)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${GLX_INCLUDE_DIRS})
endif()
if(GLEW_FOUND)
	list(APPEND LINK_LIBS GLEW)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${GLEW_INCLUDE_DIRS})
endif()
if(THEORA_FOUND)
	list(APPEND LINK_LIBS theora)
endif()
if(VPX_FOUND)
	list(APPEND LINK_LIBS ${VPX_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${VPX_INCLUDE_DIRS})
endif()
if (SCREEN_FOUND)
	list(APPEND LINK_LIBS screen)
 	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SCREEN_INCLUDE_DIRS})
endif()
if (CAMAPI_FOUND)
	list(APPEND LINK_LIBS camapi)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${CAMAPI_INCLUDE_DIRS})
endif()
if(TURBOJPEG_FOUND)
	list(APPEND LINK_LIBS ${TURBOJPEG_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${TURBOJPEG_INCLUDE_DIRS})
	set(HAVE_TURBO_JPEG 1)
endif()
if(ZXING_FOUND)
	list(APPEND LINK_LIBS ${ZXING_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ZXING_INCLUDE_DIRS})
endif()
if(BCG729_FOUND)
	if(ENABLE_G729_CNG)
		add_definitions(""-DHAVE_G729B=1"")
	endif()
	list(APPEND LINK_LIBS ${BCG729_LIBRARIES})
endif()
if(GSM_FOUND)
	list(APPEND LINK_LIBS ${GSM_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${GSM_INCLUDE_DIRS})
endif()
if(BZRTP_FOUND)
	list(APPEND LINK_LIBS bzrtp)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${BZRTP_INCLUDE_DIRS})
	set(HAVE_ZRTP 1)
endif()

if(SRTP_FOUND)
	list(APPEND LINK_LIBS ${SRTP_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SRTP_INCLUDE_DIRS})
	set(HAVE_SRTP 1)
endif()
if(SPANDSP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPANDSP_INCLUDE_DIRS})
	list(APPEND LINK_LIBS ${SPANDSP_LIBRARIES})
endif()
if(OPUS_FOUND)
	list(APPEND LINK_LIBS ${OPUS_LIBRARIES})
 	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${OPUS_INCLUDE_DIRS})
endif()
if(SPEEX_FOUND)
	list(APPEND LINK_LIBS ${SPEEX_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPEEX_INCLUDE_DIRS})
endif()
if(SPEEXDSP_FOUND)
	list(APPEND LINK_LIBS  ${SPEEXDSP_LIBRARIES})
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPEEXDSP_INCLUDE_DIRS})
	set(HAVE_SPEEXDSP 1)
endif()
if(BV16_FOUND)
	list(APPEND LINK_LIBS ${BV16_LIBRARIES})
endif()
if(BCMATROSKA2_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${BCMATROSKA2_INCLUDE_DIRS})
	list(APPEND LINK_LIBS ${BCMATROSKA2_LIBRARIES})
	set(HAVE_MATROSKA 1)
endif()
if(PCAP_FOUND)
  	list(APPEND LINK_LIBS pcap)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PCAP_INCLUDE_DIRS})
	set(HAVE_PCAP 1)
endif()
if(QTANGLE_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QTANGLE_INCLUDE_DIRS})
endif()
if(OPENGL_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
endif()
if(MSVC_INCLUDE_DIR)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${MSVC_INCLUDE_DIR})
endif()

if(ENABLE_ANDROIDSND)
	include_directories(
		src/android
		src/android/media
	)
endif()
if(ENABLE_DEBUG_LOGS)
	add_definitions(-DDEBUG)
endif()
if(ENABLE_FIXED_POINT)
	set(MS_FIXED_POINT 1)
endif()
if(ENABLE_NON_FREE_CODECS)
	set(HAVE_NON_FREE_CODECS 1)
else()
	set(HAVE_NON_FREE_CODECS 0)
endif()
if(ENABLE_MACSND)
	set(__MACSND_ENABLED__ 1)
endif()
if(ENABLE_MACAQSND)
	set(__MAC_AQ_ENABLED__ 1)
endif()

set(LINK_FLAGS )
if(APPLE)
	list(APPEND LINK_FLAGS ""-framework CoreFoundation"" ""-framework AudioToolbox"" ""-framework CoreAudio"")
	if(IOS) # Necessary for Mediastreamer's tools and testers
		list(APPEND LINK_FLAGS ""-framework Foundation"" ""-framework QuartzCore"" ""-framework OpenGLES"" ""-framework UIKit"" ""-framework AVFoundation"")
		if(ENABLE_VIDEO)
			list(APPEND LINK_FLAGS ""-framework CoreGraphics"" ""-framework CoreMedia"" ""-framework CoreVideo"" ""-framework VideoToolbox"")
		endif()
	else()
		list(APPEND LINK_FLAGS ""-framework AppKit"")
		if(ENABLE_MACSND)
			list(APPEND LINK_FLAGS ""-framework Carbon"" ""-framework AudioUnit"")
		endif()
		if(ENABLE_VIDEO)
			list(APPEND LINK_FLAGS ""-framework Cocoa"" ""-framework OpenGL"" ""-framework QuartzCore"" ""-framework AVFoundation"" ""-framework VideoToolbox"" ""-framework CoreMedia"")
		endif()
		add_definitions(""-DTARGET_OS_MAC=1"")
	endif()
endif()
string(REPLACE "";"" "" "" LINK_FLAGS_STR ""${LINK_FLAGS}"")

set(MEDIASTREAMER2_CPPFLAGS ${ORTP_CPPFLAGS} ${BZRTP_CPPFLAGS} ${BCTOOLBOX_CPPFLAGS} ${BCG729_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND MEDIASTREAMER2_CPPFLAGS ""-DMS2_STATIC"")
endif()
if(MEDIASTREAMER2_CPPFLAGS)
	list(REMOVE_DUPLICATES MEDIASTREAMER2_CPPFLAGS)
	add_definitions(${MEDIASTREAMER2_CPPFLAGS})
endif()

set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
set(STRICT_OPTIONS_OBJC ""-Wno-error"")
if(MSVC)
	list(APPEND STRICT_OPTIONS_CPP ""/wd4142"") # Disable ""benign redefinition of type"" warnings.
	list(APPEND STRICT_OPTIONS_CPP ""/wd4996"") # Disable POSIX functions warnings from bctbx.
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""/WX"")
	endif()
else()
	list(APPEND STRICT_OPTIONS_CPP ""-Wall"" ""-Wuninitialized"")
	list(APPEND STRICT_OPTIONS_C ""-Wstrict-prototypes"" ""-Wno-error=strict-prototypes"")
	if(CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CXX ""-x c++"")
	endif()
	if(CMAKE_C_COMPILER_ID MATCHES ""Clang"")
		list(APPEND STRICT_OPTIONS_CPP ""-Qunused-arguments"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	elseif(CMAKE_C_COMPILER_ID STREQUAL ""GNU"")
		if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER ""7"")
		    list(APPEND STRICT_OPTIONS_CPP ""-Wno-format-truncation"")
		endif()
		if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER ""8"")
			list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=stringop-truncation"" ""-Wno-cast-function-type"")
		endif()
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-error=unknown-warning-option"" ""-Qunused-arguments"" ""-Wno-tautological-compare"" ""-Wno-unused-function"" ""-Wno-array-bounds"")
	endif()
	if(APPLE OR WIN32)
		list(APPEND STRICT_OPTIONS_CPP ""-Wno-shorten-64-to-32"")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP ""-Werror"" ""-Wextra"" ""-Wno-unused-parameter"" ""-fno-strict-aliasing"" ""-Wno-missing-field-initializers"" ""-Wno-error=deprecated-declarations"")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()
if(STRICT_OPTIONS_OBJC)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_OBJC)
endif()

set(EXPORT_TARGETS_NAME ""Mediastreamer2"")

# Set log domain for the entire project.
add_definitions(
	-DBCTBX_LOG_DOMAIN=""mediastreamer""
)

#Setup framework structure and variables for ms2 plugins
set(MS2_FRAMEWORK_VERSION ""A"")

if(APPLE AND NOT IOS)
	set(MS2_PLUGINS_LOCATION ""Frameworks/mediastreamer2.framework/Versions/${MS2_FRAMEWORK_VERSION}/Libraries"")

	install(DIRECTORY DESTINATION ""${CMAKE_INSTALL_PREFIX}/${MS2_PLUGINS_LOCATION}"")

	if (NOT EXISTS ""${CMAKE_INSTALL_PREFIX}/Frameworks/mediastreamer2.framework/Libraries"")
	     install(CODE ""execute_process(COMMAND sh -c \""ln -sf Versions/Current/Libraries ${CMAKE_INSTALL_PREFIX}/Frameworks/mediastreamer2.framework/Libraries\"")"")
	endif()
else()
	set(MS2_PLUGINS_LOCATION ""${CMAKE_INSTALL_LIBDIR}/mediastreamer/plugins"")
endif()

if(ENABLE_RELATIVE_PREFIX)
	if(CMAKE_SYSTEM_NAME STREQUAL ""WindowsPhone"" OR CMAKE_SYSTEM_NAME STREQUAL ""WindowsStore"")
		set(PACKAGE_PLUGINS_DIR ""."")
		set(PACKAGE_DATA_DIR ""."")
	else()
		set(PACKAGE_PLUGINS_DIR ""./${MS2_PLUGINS_LOCATION}"")
		set(PACKAGE_DATA_DIR ""./${CMAKE_INSTALL_DATADIR}"")
	endif()
else()
	set(PACKAGE_PLUGINS_DIR ""${CMAKE_INSTALL_PREFIX}/${MS2_PLUGINS_LOCATION}"")
	set(PACKAGE_DATA_DIR ""${CMAKE_INSTALL_DATADIR}"")
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/mediastreamer-config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/mediastreamer-config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/mediastreamer-config.h PROPERTIES GENERATED ON)
add_definitions(""-DHAVE_CONFIG_H"")

if(ENABLE_DOC)
	add_subdirectory(help)
endif()
add_subdirectory(include)
add_subdirectory(src)
if(ENABLE_UNIT_TESTS)
	add_subdirectory(tester)
endif()
if(ENABLE_TOOLS AND NOT ANDROID)
	add_subdirectory(tools)
endif()

include(CMakePackageConfigHelpers)
set(CONFIG_PACKAGE_LOCATION ""${CMAKE_INSTALL_DATADIR}/Mediastreamer2/cmake"")

write_basic_package_version_file(
	""${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2ConfigVersion.cmake""
	VERSION ${MEDIASTREAMER_VERSION}
	COMPATIBILITY AnyNewerVersion
)
export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE ""${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Targets.cmake""
)
configure_package_config_file(cmake/Mediastreamer2Config.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Config.cmake""
	INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}
	NO_SET_AND_CHECK_MACRO
)

install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE Mediastreamer2Targets.cmake
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)
install(FILES
	""${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Config.cmake""
	""${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2ConfigVersion.cmake""
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

if (ENABLE_PACKAGE_SOURCE)
	add_subdirectory(build)
endif()
",3.1,3.1
41932,saleyn,utxx,False,False,False,False,False,5,C++,2020-05-17 00:15:08+00:00,2013-01-13 18:54:59+00:00,29,1347,"# vim:ts=2:sw=2:et
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
project(utxx VERSION 1.4.1)

#===============================================================================
# CMAKE options customization
#===============================================================================
option(WITH_THRIFT             ""Enable to compile UTXX with Thrift""         OFF)
option(VERBOSE                 ""Turn verbosity on|off""                      OFF)
option(WITH_ENUM_SERIALIZATION ""Turn enum serialization support on|off""     OFF)

if(VERBOSE)
  set(CMAKE_VERBOSE_MAKEFILE ON)
endif()
if(WITH_ENUM_SERIALIZATION)
  set(UTXX_ENUM_SUPPORT_SERIALIZATION ON)
endif()

string(TOLOWER ""${CMAKE_BUILD_TYPE}"" CMAKE_BUILD_TYPE)
string(TOLOWER ${TOOLCHAIN} toolchain)

# Custom extensions
include(${CMAKE_CURRENT_SOURCE_DIR}/build-aux/CMakeEx.txt)

#-------------------------------------------------------------------------------
# Toolchain
#-------------------------------------------------------------------------------
# See also build/CMakeInit.txt
if(""${toolchain}"" STREQUAL ""gcc"")
  if (NOT CMAKE_C_COMPILER)
    set(CMAKE_C_COMPILER   ""gcc"")
  endif()
  if (NOT CMAKE_CXX_COMPILER)
    set(CMAKE_CXX_COMPILER ""g++"")
  endif()

  add_definitions(-Wno-strict-aliasing -fopenmp -Wall)

  if(""${CMAKE_BUILD_TYPE}"" STREQUAL ""release"")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER ""5.0"")
      # When this option is on, compiler versions below 5.0 cause errors with
      # boost:
      #   undefined reference to
      #     `virtual thunk to boost::exception_detail::clone_impl<...'
      #   undefined reference to
      #     `boost::exception_detail::error_info_injector<...'
      add_definitions(-flto)
    endif()

    add_definitions(-funroll-loops -fomit-frame-pointer)

    # The following will omit all symbol information from the build:
    #add_definitions(-Wl,-s)
    #set(CMAKE_EXE_LINKER_FLAGS  ""${CMAKE_EXE_LINKER_FLAGS} -s"")
  endif()
elseif(""${toolchain}"" STREQUAL ""intel"")
  set(CMAKE_C_COMPILER   ""icc"")
  set(CMAKE_CXX_COMPILER ""icpc"")
  add_definitions(-openmp)

elseif(""${toolchain}"" STREQUAL ""clang"")
  set(CMAKE_C_COMPILER   ""clang"")
  set(CMAKE_CXX_COMPILER ""clang++"")
  add_definitions(-Wall)
else()
  message(FATAL_ERROR ""Invalid toolchain: ${TOOLCHAIN}"")
endif()

# Append ""_d"" to the library when doing debug build
if (CMAKE_BUILD_TYPE STREQUAL ""debug"")
  set(LIB_SUFFIX ""_d"")
endif()

# Note: explicit c++14 definitions done in CMakeInit.txt.
# Alternative is to set for each target:
# target_compile_features(${PROJECT_NAME} PRIVATE cxx_lambda_init_captures)

add_definitions(
	-D_REENTRANT
	-Wno-unused-local-typedefs
  -Wno-deprecated-declarations
	-DBOOST_SYSTEM_NO_DEPRECATED
)

message(STATUS ""Configuring for the ""
               ""${BoldMagenta}${TOOLCHAIN}${ClrReset} toolchain version ""
               ""${CMAKE_CXX_COMPILER_VERSION} ""
               ""${BoldMagenta}${CMAKE_BUILD_TYPE}${ClrReset} build"")

#-------------------------------------------------------------------------------
# Policies
#-------------------------------------------------------------------------------
# Don't curse at non-existing dependencies (since we use code generation)
#cmake_policy(SET CMP0046 OLD)

# RPATH configuration
# ===================
# Don't skip the full RPATH for the build tree
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
# When building, don't use the install RPATH already
# (but later on when installing)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH ""${CMAKE_BINARY_DIR}/src:${CMAKE_INSTALL_PREFIX}/lib"")
# Add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

#-------------------------------------------------------------------------------
# Platform-specific checks
#-------------------------------------------------------------------------------
#include(${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)
#include(${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
include(${CMAKE_ROOT}/Modules/FindZLIB.cmake)
include(${CMAKE_ROOT}/Modules/CheckStructHasMember.cmake)
include(${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)

if(ZLIB_FOUND)
	set(UTXX_HAVE_LIBZ 1)
	list(APPEND UTXX_LIBS ${ZLIB_LIBRARIES})
endif()

execute_process(COMMAND getconf LEVEL1_DCACHE_LINESIZE OUTPUT_VARIABLE UTXX_CL_SIZE)

#check_type_size(size_t SIZE_T)

# Needed for Thrift
CHECK_INCLUDE_FILE(inttypes.h   HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(netinet/in.h HAVE_NETINET_IN_H)
# Needed for pcap.hpp tests
#CHECK_STRUCT_HAS_MEMBER(""struct tcphdr"" th_flags netinet/tcp.h UTXX_HAVE_TCPHDR_TH_FLAGS_H)

message(""TCP: ${UTXX_HAVE_TCPHDR_TH_FLAGS_H}"")
#-------------------------------------------------------------------------------
# Dependent packages and their directory locations
#-------------------------------------------------------------------------------
find_package(PkgConfig)

set(PKG_ROOT_DIR ""/opt/pkg"" CACHE STRING ""Package root directory"")

# Python
find_package(PythonInterp)
if(PYTHON_VERSION_STRING VERSION_LESS 2.7)
  message(FATAL_ERROR ""Python version less than 2.y: \""${PYTHON_VERSION_STRING}\""."")
endif()

if(WITH_THRIFT)
	if (NOT Thrift_DIR)
	  set(Thrift_DIR         ""${PKG_ROOT_DIR}/thrift/current"")
	endif()
  # Determine thrift include/libs
  set(ENV{PKG_CONFIG_PATH} ""${Thrift_DIR}/gcc/lib/pkgconfig:${Thrift_DIR}/lib/pkgconfig"")
  pkg_search_module(Thrift thrift)
	if (Thrift_FOUND)
		message(STATUS ""Found thrift: ${Thrift_DIR}"")
		set(UTXX_HAVE_THRIFT_H 1)
 	endif()
else()
  message(STATUS ""Building without Thrift"")
endif()

# Boost (with local modifications):
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREAD ON)
set(Boost_NO_SYSTEM_PATHS ON)
set(CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/build"")

find_package(Boost 1.58.0 REQUIRED COMPONENTS
             system filesystem date_time program_options thread regex
             unit_test_framework timer)

if(Boost_FOUND)
  #include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
  #link_directories(${Boost_LIBRARY_DIRS})
  set(UTXX_HAVE_BOOST_TIMER_TIMER_HPP 1)
	message(STATUS ""Found boost: ${Boost_LIBRARY_DIRS}"")
endif()

set(Boost_LIBRARIES
  ${Boost_SYSTEM_LIBRARY}
  ${Boost_THREAD_LIBRARY}
  ${Boost_REGEX_LIBRARY}
  ${Boost_DATE_TIME_LIBRARY}
  ${Boost_FILESYSTEM_LIBRARY}
  ${Boost_SYSTEM_LIBRARY}
  ${Boost_PROGRAM_OPTIONS_LIBRARY}
  ${Boost_IOSTREAMS_LIBRARY}
)

set(AddCleanFiles)  # Additional clean files

#===============================================================================
# Code generation
#===============================================================================
macro(XML_CFG TargetSrcList File)
  get_filename_component(FileName ${File} NAME)
  get_filename_component(BaseName ${File} NAME_WE) # Name without extension
  get_filename_component(DirName  ${File} DIRECTORY)
  if (DirName MATCHES ""^/"")
    set(SrcFile ""${File}"")
  else()
    if (DirName STREQUAL """")
      set(DirName ""${CMAKE_CURRENT_SOURCE_DIR}"")
    endif()
    set(SrcFile ""${DirName}/${File}"")
  endif()
  string(REGEX REPLACE ""^${CMAKE_SOURCE_DIR}/?"" """" RelDirName ${DirName})
  string(REGEX REPLACE ""^([^/].+)"" ""/\\1""          RelDirName ${RelDirName})
  set(GenFileName ""${CMAKE_BINARY_DIR}${RelDirName}/generated/${BaseName}.generated.hpp"")
  get_filename_component(GenDirName ${GenFileName} DIRECTORY)
  set(Deps ${ARGN})
  PREFIX(Deps ""${CMAKE_CURRENT_SOURCE_DIR}/"" """")
  message(STATUS ""  >> ${SrcFile} -> ${GenFileName}"")
  if (Deps STREQUAL """")
    unset(DepComment)
  else()
    set(DepComment ""\n    Dependencies: ${Deps}"")
  endif()
  set(GenIncDir ${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_SOURCE_DIR}/include:${CMAKE_BINARY_DIR}/include)
  file(MAKE_DIRECTORY ""${GenDirName}"")
  add_custom_command(
    OUTPUT            ""${GenFileName}""
    COMMAND           ""${CMAKE_SOURCE_DIR}/bin/config_validator_codegen.py""
                      -f ""${SrcFile}"" -o ""${GenFileName}"" --overwrite
                      -d ${GenIncDir}
    MAIN_DEPENDENCY   ""${SrcFile}""
    # The following dependency may be extraneous due to some .hpp file
    # depending on a specific .xml file which ""includes"" the following file:
    DEPENDS           ${Deps}
    WORKING_DIRECTORY ""${CMAKE_BINARY_DIR}""
    COMMENT           "">>> ${BoldBlue}Generating: ${FileName} -> ${GenFileName}${DepComment}${ClrReset}""
  )
  # TargetSrcList contains the list name and therefore ${TargetSrcList} is
  # the list itself, and ${${TargetSrcList}} is the expanded list
  set(${TargetSrcList} ${${TargetSrcList}} ${GenFileName})
endmacro(XML_CFG)

#-------------------------------------------------------------------------------
# MAKE options
#-------------------------------------------------------------------------------

add_custom_target(build-version
    ALL
    COMMAND ${CMAKE_SOURCE_DIR}/bin/make-version.sh -d ${REBUILD_VERSION}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "">>> Verifying include/utxx/version.hpp""
)

#add_custom_target(vars
#  COMMAND ${CMAKE_COMMAND} -H${CMAKE_SOURCE_DIR} -B${CMAKE_BINARY_DIR} -LA
#)

include_directories(
  SYSTEM
  ${Boost_INCLUDE_DIRS}
  ${Thrift_INCLUDE_DIRS}
)
include_directories(
  ${CMAKE_SOURCE_DIR}/include
  ${CMAKE_BINARY_DIR}/include
)
link_directories(
  ${Boost_LIBRARY_DIRS}
  ${Thrift_LIBRARY_DIRS}
)

#-------------------------------------------------------------------------------
# Configure files
#-------------------------------------------------------------------------------
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/config.h.in""
               ""${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/config.h""
 							 @ONLY)
configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.pc.in""
               ""${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"" @ONLY)
#-------------------------------------------------------------------------------
# Srcs and Targets:
#-------------------------------------------------------------------------------
list(APPEND UTXX_LIBS ${Thrift_LIBRARIES} pthread)

add_subdirectory(src)
add_subdirectory(test)

# Copy configuration files to the build directory
#foreach(File etc/hs-replay.config etc/logger.config etc/hs-secdef.txt)
#  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${File}
#                 ${CMAKE_CURRENT_BINARY_DIR}/${File} COPYONLY)
#endforeach(File)

#===============================================================================
# Installation
#===============================================================================
install(
  DIRECTORY   ${CMAKE_SOURCE_DIR}/include/${PROJECT_NAME}
  DESTINATION ${CMAKE_INSTALL_PREFIX}/include
  FILES_MATCHING PATTERN ""*.h"" PATTERN ""*.hpp"" PATTERN ""*.hxx"" PATTERN ""*.ipp"" PATTERN ""*.x??""
)
install(
  FILES       ${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/config.h
  DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}
)
install(
	PROGRAMS    ${CMAKE_SOURCE_DIR}/bin/config_validator_codegen.py
	DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)
install(
	FILES 		  ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc
  DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig
)
install(
	FILES 		  ${CMAKE_SOURCE_DIR}/LICENSE
						  ${CMAKE_SOURCE_DIR}/README.md
	DESTINATION ${CMAKE_INSTALL_PREFIX}/share 
)

#===============================================================================
# Uninstallation
# Prereq: copy the uninstall.cmake file to the appropriate CMAKE_MODULE_PATH.
#===============================================================================
set_directory_properties(
  PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ""${AddCleanFiles}""
)

#add_custom_target(
#  uninstall ""${CMAKE_COMMAND}"" -P ""${CMAKE_MODULE_PATH}/uninstall.cmake""
#)

#===============================================================================
# CTEST options
#===============================================================================
enable_testing()

add_test(test-utxx test/test_utxx -l message)

#===============================================================================
# Documentation options
#===============================================================================
# add a target to generate API documentation with Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/build-aux/Doxyfile.in
                 ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
                 @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""${ClrBold}Generating API documentation with Doxygen${ClrReset}""
    VERBATIM
  )
endif()

# Post-install script (installation of symlinks):
install(SCRIPT ${CMAKE_SOURCE_DIR}/build-aux/install-symlinks.cmake)
",3.1.0,3.1
42139,mtezych,cpp,False,False,False,False,False,1,C,2020-04-30 00:43:25+00:00,2017-01-16 00:07:33+00:00,0,266,"
#
# BSD 3-Clause License
#
# Copyright (c) 2017, mtezych
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

cmake_minimum_required (VERSION 3.1)

project(cpp)

add_subdirectory(google-test)
add_subdirectory(google-benchmark)
add_subdirectory(gsl)
add_subdirectory(libsync)
add_subdirectory(platform-android)
add_subdirectory(adt)
add_subdirectory(metaprogramming)
add_subdirectory(polymorphism)
add_subdirectory(allocator)
add_subdirectory(threading)
add_subdirectory(libdrm-example)
add_subdirectory(khronos)
add_subdirectory(cl)
add_subdirectory(egl)
add_subdirectory(gles)
add_subdirectory(platform-xlib)
add_subdirectory(platform-xcb)
add_subdirectory(vulkan)
add_subdirectory(platform-wayland)
add_subdirectory(util)
add_subdirectory(platform)
add_subdirectory(platform-windows)
add_subdirectory(ieee754)
add_subdirectory(concepts)
add_subdirectory(coroutines)
add_subdirectory(zlang)
add_subdirectory(gameboy)
",3.1,3.1
42253,opensim-org,opensim-gui,False,False,False,False,False,32,Java,2020-05-09 07:21:51+00:00,2014-06-27 16:58:33+00:00,18,6819,"# Allow specifying VERSION for the project.
cmake_policy(SET CMP0048 NEW)

project(OpenSimApp VERSION 4.2)

cmake_minimum_required(VERSION 3.1.3)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake"")

add_subdirectory(Gui/opensim)
",3.1.3,3.1
42305,butor,blackbird,False,False,False,False,False,34,C++,2020-03-25 07:00:47+00:00,2015-03-09 00:21:13+00:00,4738,513,"cmake_minimum_required(VERSION 3.1)

project(blackbird)

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")
include(cotire)

find_package(CURL)
find_package(Jansson)
find_package(OpenSSL)
find_package(SQLite3)

file(GLOB SOURCES
    src/*.cpp
    src/exchanges/*.cpp
    src/utils/*.cpp)
add_executable(${PROJECT_NAME} ${SOURCES})

if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" OR
    ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""Clang"")
  target_compile_options(${PROJECT_NAME} PRIVATE -Wall -pedantic -Wno-missing-braces)
endif()
if (""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"")
  target_compile_definitions(${PROJECT_NAME} PRIVATE NOMINMAX _CRT_SECURE_NO_WARNINGS)
endif()
set_target_properties(${PROJECT_NAME} PROPERTIES
                                      CXX_STANDARD 11
                                      CXX_STANDARD_REQUIRED YES
                                      CXX_EXTENSIONS NO)
target_include_directories (${PROJECT_NAME} PRIVATE
                            ${PROJECT_SOURCE_DIR}/src
                            ${SQLITE3_INCLUDE_DIR}
                            ${CURL_INCLUDE_DIR}
                            ${OPENSSL_INCLUDE_DIR}
                            ${JANSSON_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} ${CURL_LIBRARIES}
                                      ${JANSSON_LIBRARIES}
                                      ${OPENSSL_LIBRARIES}
                                      ${SQLITE3_LIBRARIES})
install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${CMAKE_BINARY_DIR}/..)
cotire(${PROJECT_NAME})
",3.1,3.1
42362,stack-of-tasks,sot-core,False,False,False,False,False,36,C++,2020-05-15 10:17:02+00:00,2010-11-04 17:26:52+00:00,8,1039,"# Copyright 2010, 2019 JRL, CNRS/AIST, LAAS CNRS
# See LICENSE file.

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

# Project properties
SET(PROJECT_ORG stack-of-tasks)
SET(PROJECT_NAME sot-core)
SET(PROJECT_DESCRIPTION ""Hierarchical task solver plug-in for dynamic-graph."")
SET(PROJECT_URL ""https://github.com/${PROJECT_ORG}/${PROJECT_NAME}"")

# Project options
OPTION(BUILD_PYTHON_INTERFACE ""Build the python bindings"" ON)
OPTION(INSTALL_PYTHON_INTERFACE_ONLY ""Install *ONLY* the python bindings"" OFF)
OPTION(SUFFIX_SO_VERSION ""Suffix library name with its version"" ON)

# Project configuration
IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  SET(PROJECT_USE_CMAKE_EXPORT TRUE)
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
SET(CUSTOM_HEADER_DIR ""sot/core"")
SET(CXX_DISABLE_WERROR TRUE)
SET(DOXYGEN_USE_MATHJAX YES)

# JRL-cmakemodule setup
INCLUDE(cmake/base.cmake)
INCLUDE(cmake/boost.cmake)
INCLUDE(cmake/python.cmake)
INCLUDE(cmake/sphinx.cmake)

# Project definition
COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

# Project dependencies
ADD_PROJECT_DEPENDENCY(dynamic-graph REQUIRED PKG_CONFIG_REQUIRES dynamic-graph)
ADD_PROJECT_DEPENDENCY(pinocchio REQUIRED PKG_CONFIG_REQUIRES pinocchio)
ADD_PROJECT_DEPENDENCY(example-robot-data)
SET(BOOST_COMPONENTS filesystem system thread program_options
  unit_test_framework regex)

IF(BUILD_PYTHON_INTERFACE)
  FINDPYTHON()
  STRING(REGEX REPLACE ""-"" ""_"" PYTHON_DIR ${CUSTOM_HEADER_DIR})
  ADD_PROJECT_DEPENDENCY(dynamic-graph-python REQUIRED
    PKG_CONFIG_REQUIRES dynamic-graph-python)
  SET(BOOST_COMPONENTS ${BOOST_COMPONENTS} python)
ENDIF(BUILD_PYTHON_INTERFACE)

SEARCH_FOR_BOOST()

# Verbosity level
IF(NOT (\""${CMAKE_VERBOSITY_LEVEL}\"" STREQUAL \""\""))
  ADD_DEFINITIONS(-DVP_DEBUG_MODE=${CMAKE_VERBOSITY_LEVEL} -DVP_DEBUG)
ENDIF(NOT (\""${CMAKE_VERBOSITY_LEVEL}\"" STREQUAL \""\""))

# Main Library
SET(${PROJECT_NAME}_HEADERS
  include/${CUSTOM_HEADER_DIR}/abstract-sot-external-interface.hh
  include/${CUSTOM_HEADER_DIR}/additional-functions.hh
  include/${CUSTOM_HEADER_DIR}/api.hh
  include/${CUSTOM_HEADER_DIR}/binary-int-to-uint.hh
  include/${CUSTOM_HEADER_DIR}/binary-op.hh
  include/${CUSTOM_HEADER_DIR}/causal-filter.hh
  include/${CUSTOM_HEADER_DIR}/clamp-workspace.hh
  include/${CUSTOM_HEADER_DIR}/com-freezer.hh
  include/${CUSTOM_HEADER_DIR}/contiifstream.hh
  include/${CUSTOM_HEADER_DIR}/debug.hh
  include/${CUSTOM_HEADER_DIR}/derivator.hh
  include/${CUSTOM_HEADER_DIR}/device.hh
  include/${CUSTOM_HEADER_DIR}/double-constant.hh
  include/${CUSTOM_HEADER_DIR}/event.hh
  include/${CUSTOM_HEADER_DIR}/exception-abstract.hh
  include/${CUSTOM_HEADER_DIR}/exception-dynamic.hh
  include/${CUSTOM_HEADER_DIR}/exception-factory.hh
  include/${CUSTOM_HEADER_DIR}/exception-feature.hh
  include/${CUSTOM_HEADER_DIR}/exception-signal.hh
  include/${CUSTOM_HEADER_DIR}/exception-task.hh
  include/${CUSTOM_HEADER_DIR}/exception-tools.hh
  include/${CUSTOM_HEADER_DIR}/exp-moving-avg.hh
  include/${CUSTOM_HEADER_DIR}/factory.hh
  include/${CUSTOM_HEADER_DIR}/feature-1d.hh
  include/${CUSTOM_HEADER_DIR}/feature-abstract.hh
  include/${CUSTOM_HEADER_DIR}/feature-generic.hh
  include/${CUSTOM_HEADER_DIR}/feature-joint-limits.hh
  include/${CUSTOM_HEADER_DIR}/feature-line-distance.hh
  include/${CUSTOM_HEADER_DIR}/feature-point6d-relative.hh
  include/${CUSTOM_HEADER_DIR}/feature-point6d.hh
  include/${CUSTOM_HEADER_DIR}/feature-pose.hh
  include/${CUSTOM_HEADER_DIR}/feature-posture.hh
  include/${CUSTOM_HEADER_DIR}/feature-task.hh
  include/${CUSTOM_HEADER_DIR}/feature-vector3.hh
  include/${CUSTOM_HEADER_DIR}/feature-visual-point.hh
  include/${CUSTOM_HEADER_DIR}/filter-differentiator.hh
  include/${CUSTOM_HEADER_DIR}/fir-filter.hh
  include/${CUSTOM_HEADER_DIR}/flags.hh
  include/${CUSTOM_HEADER_DIR}/gain-adaptive.hh
  include/${CUSTOM_HEADER_DIR}/gain-hyperbolic.hh
  include/${CUSTOM_HEADER_DIR}/gripper-control.hh
  include/${CUSTOM_HEADER_DIR}/integrator-abstract.hh
  include/${CUSTOM_HEADER_DIR}/integrator-euler.hh
  include/${CUSTOM_HEADER_DIR}/joint-limitator.hh
  include/${CUSTOM_HEADER_DIR}/kalman.hh
  include/${CUSTOM_HEADER_DIR}/latch.hh
  include/${CUSTOM_HEADER_DIR}/macros-signal.hh
  include/${CUSTOM_HEADER_DIR}/mailbox-vector.hh
  include/${CUSTOM_HEADER_DIR}/mailbox.hh
  include/${CUSTOM_HEADER_DIR}/mailbox.hxx
  include/${CUSTOM_HEADER_DIR}/matrix-constant.hh
  include/${CUSTOM_HEADER_DIR}/matrix-geometry.hh
  include/${CUSTOM_HEADER_DIR}/matrix-svd.hh
  include/${CUSTOM_HEADER_DIR}/memory-task-sot.hh
  include/${CUSTOM_HEADER_DIR}/motion-period.hh
  include/${CUSTOM_HEADER_DIR}/multi-bound.hh
  include/${CUSTOM_HEADER_DIR}/neck-limitation.hh
  include/${CUSTOM_HEADER_DIR}/op-point-modifier.hh
  include/${CUSTOM_HEADER_DIR}/parameter-server.hh
  include/${CUSTOM_HEADER_DIR}/periodic-call.hh
  include/${CUSTOM_HEADER_DIR}/periodic-call-entity.hh
  include/${CUSTOM_HEADER_DIR}/pool.hh
  include/${CUSTOM_HEADER_DIR}/reader.hh
  include/${CUSTOM_HEADER_DIR}/robot-simu.hh
  include/${CUSTOM_HEADER_DIR}/robot-utils.hh
  include/${CUSTOM_HEADER_DIR}/sot.hh
  include/${CUSTOM_HEADER_DIR}/stop-watch.hh
  include/${CUSTOM_HEADER_DIR}/switch.hh
  include/${CUSTOM_HEADER_DIR}/task.hh
  include/${CUSTOM_HEADER_DIR}/task-abstract.hh
  include/${CUSTOM_HEADER_DIR}/task-conti.hh
  include/${CUSTOM_HEADER_DIR}/task-pd.hh
  include/${CUSTOM_HEADER_DIR}/task-unilateral.hh
  include/${CUSTOM_HEADER_DIR}/time-stamp.hh
  include/${CUSTOM_HEADER_DIR}/timer.hh
  include/${CUSTOM_HEADER_DIR}/trajectory.hh
  include/${CUSTOM_HEADER_DIR}/unary-op.hh
  include/${CUSTOM_HEADER_DIR}/utils-windows.hh
  include/${CUSTOM_HEADER_DIR}/variadic-op.hh
  include/${CUSTOM_HEADER_DIR}/vector-constant.hh
  include/${CUSTOM_HEADER_DIR}/vector-to-rotation.hh
  include/${CUSTOM_HEADER_DIR}/visual-point-projecter.hh
  )

SET(${PROJECT_NAME}_SOURCES
  src/debug/debug.cpp
  src/debug/contiifstream.cpp
  src/exception/exception-abstract.cpp
  src/exception/exception-dynamic.cpp
  src/exception/exception-factory.cpp
  src/exception/exception-feature.cpp
  src/exception/exception-signal.cpp
  src/exception/exception-task.cpp
  src/exception/exception-tools.cpp
  src/signal/signal-cast.cpp
  src/feature/feature-abstract.cpp
  src/task/task-abstract.cpp
  src/task/multi-bound.cpp
  src/sot/flags.cpp
  src/sot/memory-task-sot.cpp
  src/factory/pool.cpp
  src/tools/utils-windows
  src/tools/periodic-call
  src/tools/device
  src/tools/trajectory
  src/tools/robot-utils
  src/matrix/matrix-svd
  src/filters/causal-filter
  src/utils/stop-watch
  )

ADD_LIBRARY(${PROJECT_NAME} SHARED
  ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:include>)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${Boost_LIBRARIES}
  dynamic-graph::dynamic-graph pinocchio::pinocchio)

IF(SUFFIX_SO_VERSION)
  SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SOVERSION ${PROJECT_VERSION})
ENDIF(SUFFIX_SO_VERSION)

IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(tests)
ADD_SUBDIRECTORY(doc)

PKG_CONFIG_APPEND_LIBS(${PROJECT_NAME})
IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  INSTALL(FILES package.xml DESTINATION share/${PROJECT_NAME})
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
",3.1,3.1
42402,zrax,pycdc,False,False,False,False,False,11,C++,2020-02-10 15:53:57+00:00,2011-09-18 04:16:33+00:00,724,294,"project(pycdc)
cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# For generating the bytes tables
find_package(PythonInterp REQUIRED)

if(CMAKE_COMPILER_IS_GNUCXX OR ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"")
    set(CMAKE_CXX_FLAGS ""-Wall -Wextra -Wshadow -Werror ${CMAKE_CXX_FLAGS}"")
elseif(MSVC)
    set(CMAKE_CXX_FLAGS ""/WX ${CMAKE_CXX_FLAGS}"")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

set(PYTHON_VERSIONS
    10 11    13 14 15 16        # Python 1.1 and 1.2 are marshal-identical
    20 21 22 23 24 25 26 27
    30 31 32 33 34 35 36 37 38
)

foreach(ver ${PYTHON_VERSIONS})
    list(APPEND MAP_FILES ${CMAKE_CURRENT_SOURCE_DIR}/bytes/python_${ver}.map)
    list(APPEND MAP_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/bytes/python_${ver}.cpp)
endforeach()

add_custom_command(OUTPUT ${MAP_SOURCES}
                   COMMAND ${PYTHON_EXECUTABLE}
                           ${CMAKE_CURRENT_SOURCE_DIR}/bytes/comp_map.py
                           ${CMAKE_CURRENT_SOURCE_DIR}/bytes
                           ${CMAKE_CURRENT_BINARY_DIR}/bytes
                   DEPENDS ${MAP_FILES}
                           ${CMAKE_CURRENT_SOURCE_DIR}/bytes/comp_map.py
)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_library(pycxx STATIC
    bytecode.cpp
    data.cpp
    pyc_code.cpp
    pyc_module.cpp
    pyc_numeric.cpp
    pyc_object.cpp
    pyc_sequence.cpp
    pyc_string.cpp
    ${MAP_SOURCES}
)

add_executable(pycdas pycdas.cpp)
target_link_libraries(pycdas pycxx)

install(TARGETS pycdas
    RUNTIME DESTINATION bin)

add_executable(pycdc pycdc.cpp ASTree.cpp ASTNode.cpp)
target_link_libraries(pycdc pycxx)

install(TARGETS pycdc
    RUNTIME DESTINATION bin)

add_custom_target(check ""${CMAKE_CURRENT_SOURCE_DIR}/tests/all_tests.sh""
                  WORKING_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}"")
add_dependencies(check pycdc)
",3.1,3.1
42420,simsong,tcpflow,False,False,False,False,False,37,C++,2020-05-04 16:08:03+00:00,2012-04-01 00:44:11+00:00,1106,772,"cmake_minimum_required(VERSION 3.1)

project(tcpflow VERSION 1.4.6 LANGUAGES CXX C)
# Within the above line, ""C"" is required for two reasons:
# 1. find_package(Threads) fails using only CXX on cmake-3.3 and previous
# 2. CMake files use CMAKE_C_COMPILER_ID instead of CMAKE_CXX_COMPILER_ID

# The following line if for find_package(pcap) -> cmake/FindPCAP.cmake
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(cmake/options.cmake)             # Set default CMake options
include(cmake/coverage.cmake)            # Configure the build ""Coverage""
include(cmake/compilation-flags.cmake)   # Compiler & Linker flags
include(cmake/warning-flags.cmake)       # Compiler & Linker warnings

# Source code
add_subdirectory(src)

# Generate documentation
#add_subdirectory( doc EXCLUDE_FROM_ALL )

",3.1,3.1
42532,Senspark,ee-x,False,False,False,False,False,14,C++,2020-05-14 10:48:22+00:00,2016-07-05 03:28:21+00:00,11,1443,"cmake_minimum_required(VERSION 3.1)

project(ee_x)

add_subdirectory(src/ee/admob)
add_subdirectory(src/ee/ads)
add_subdirectory(src/ee/app_lovin)
add_subdirectory(src/ee/apps_flyer)
add_subdirectory(src/ee/campaign_receiver)
add_subdirectory(src/ee/cocos)
add_subdirectory(src/ee/core)
add_subdirectory(src/ee/crashlytics)
add_subdirectory(src/ee/facebook)
add_subdirectory(src/ee/facebook_ads)
add_subdirectory(src/ee/firebase/analytics)
add_subdirectory(src/ee/firebase/core)
add_subdirectory(src/ee/firebase/crashlytics)
add_subdirectory(src/ee/firebase/dynamic_link)
add_subdirectory(src/ee/firebase/messaging)
add_subdirectory(src/ee/firebase/performance)
add_subdirectory(src/ee/firebase/remote_config)
add_subdirectory(src/ee/firebase/storage)
add_subdirectory(src/ee/google)
add_subdirectory(src/ee/iron_source)
add_subdirectory(src/ee/notification)
add_subdirectory(src/ee/play)
add_subdirectory(src/ee/recorder)
add_subdirectory(src/ee/tenjin)
add_subdirectory(src/ee/twitter)
add_subdirectory(src/ee/unity_ads)
add_subdirectory(src/ee/vungle)
add_subdirectory(third_party/firebase_cpp_sdk)
add_subdirectory(third_party/jansson)
add_subdirectory(third_party/soomla/core)
add_subdirectory(third_party/soomla/store)",3.1,3.1
42597,oktal,pistache,False,False,False,False,False,78,C++,2020-05-14 18:58:02+00:00,2015-08-12 19:44:15+00:00,1970,1254,"cmake_minimum_required (VERSION 3.1.3)
project (pistache)

include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -Wall -Wconversion -pedantic -Wextra -Wno-missing-field-initializers"")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if(CMAKE_BUILD_TYPE MATCHES ""Debug"")
    set(CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage -fstack-protector-all --param=ssp-buffer-size=4"")
endif()

option(PISTACHE_BUILD_TESTS ""build tests alongside the project"" OFF)
option(PISTACHE_ENABLE_NETWORK_TESTS ""if tests are built, run ones needing network access"" ON)
option(PISTACHE_BUILD_EXAMPLES ""build examples alongside the project"" OFF)
option(PISTACHE_BUILD_DOCS ""build docs alongside the project"" OFF)
option(PISTACHE_INSTALL ""add pistache as install target (recommended)"" ON)
option(PISTACHE_USE_SSL ""add support for SSL server"" OFF)

# require fat LTO objects in static library
if(CMAKE_CXX_FLAGS MATCHES ""-flto"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ffat-lto-objects"")
endif()

if (PISTACHE_BUILD_TESTS)
    find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
    find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
    find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)

    if (CMAKE_CXX_CPPCHECK)
        message(""-- Cppcheck found "" ${CMAKE_CXX_CPPCHECK})
        list(
            APPEND CMAKE_CXX_CPPCHECK
                ""--enable=all""
                ""-DCPPCHECK""
                ""--suppress=*:${PROJECT_SOURCE_DIR}/third-party*""
                ""--suppress=*:${PROJECT_SOURCE_DIR}/tests*""
                ""--suppress=noExplicitConstructor:include/pistache/optional.h""
        )
    else()
        message(""-- Cppcheck not found"")
        set(CMAKE_CXX_CPPCHECK """")
    endif()

    INCLUDE(Dart)

    add_custom_target(test_memcheck COMMAND ${CMAKE_CTEST_COMMAND}  --force-new-ctest-process --test-action memcheck)
    add_custom_target(coverage COMMAND ${CMAKE_CTEST_COMMAND}  --force-new-ctest-process --test-action coverage)
endif()

# CMAKE Pin cxx compiler to CXX14 until update to CXX17
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(""-std=c++14"" COMPILER_SUPPORTS_CXX14)
set(CMAKE_CXX_STANDARD 14)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if (PISTACHE_USE_SSL)
    add_definitions(-DPISTACHE_USE_SSL)
    link_libraries(-lssl -lcrypto)
endif (PISTACHE_USE_SSL)

link_libraries(-latomic)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set version...

    # Retrieve from external file...
    file(READ ""version.txt"" VERSION_FILE)

    # Extract version...

        # Major...
        string(REGEX MATCH ""VERSION_MAJOR *([0-9]*)"" _ ${VERSION_FILE})
        set(VERSION_MAJOR ${CMAKE_MATCH_1})

        # Minor...
        string(REGEX MATCH ""VERSION_MINOR *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_MINOR ${CMAKE_MATCH_1})

        # Patch...
        string(REGEX MATCH ""VERSION_PATCH *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_PATCH ${CMAKE_MATCH_1})

        # Git date...
        string(REGEX MATCH ""VERSION_GIT_DATE *([0-9]+)"" _ ${VERSION_FILE})
        set(VERSION_GIT_DATE ${CMAKE_MATCH_1})

    # Make available in a header file...
    configure_file (
        ""include/pistache/version.h.in""
        ""include/pistache/version.h""
        @ONLY
    )

    # Install version header...
    if(PISTACHE_INSTALL)
        install (
            FILES
            ${CMAKE_CURRENT_BINARY_DIR}/include/pistache/version.h
            DESTINATION
            ${CMAKE_INSTALL_INCLUDEDIR}/pistache/
        )
    endif()

# Set libraries...

    # Minimum...
    set(LIBS ""-lpistache -lpthread -latomic"")

    # If building with OpenSSL support...
    if(PISTACHE_USE_SSL)
        set(LIBS ""${LIBS} -lssl -lcrypto"")
    endif(PISTACHE_USE_SSL)

# Configure the pkg-config metadata...

    # Initialize the metadata variables and to support remote builds...
    set(prefix         ${CMAKE_INSTALL_PREFIX})
    set(exec_prefix    ${CMAKE_INSTALL_PREFIX}/bin)
    set(libdir         ${CMAKE_INSTALL_FULL_LIBDIR}/)
    set(libs           ${LIBS})
    set(includedir     ${CMAKE_INSTALL_FULL_INCLUDEDIR}/)
    set(version        ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-git${VERSION_GIT_DATE})

    # Perform substitutions...
    configure_file (
        ""libpistache.pc.in""
        ""libpistache.pc""
        @ONLY
    )

    # Install pkg-config metadata into standard location within the prefix...
    if(PISTACHE_INSTALL)
        install (
            FILES
            ${CMAKE_CURRENT_BINARY_DIR}/libpistache.pc
            DESTINATION
            ${CMAKE_INSTALL_LIBDIR}/pkgconfig/
        )
    endif()

add_subdirectory (src)

if (PISTACHE_BUILD_EXAMPLES)
    add_subdirectory (examples)
endif()

if (PISTACHE_BUILD_TESTS)
    find_package(GTest)
    if (GTEST_FOUND)
        include_directories(${GTEST_INCLUDE_DIRS})
    else()
        ADD_SUBDIRECTORY (third-party/googletest)
        include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})
    endif()

    enable_testing()
    add_subdirectory(tests)
endif()

if (PISTACHE_BUILD_DOCS)

    find_package(Doxygen
            REQUIRED dot
            OPTIONAL_COMPONENTS mscgen dia)

    if (DOXYGEN_FOUND)

        set(DOXYGEN_IN ${CMAKE_SOURCE_DIR}/docs/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile)

        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)

        add_custom_target(docs
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs
            COMMENT ""Generating doxygen documentation""
            VERBATIM)

        message(""-- Adding doxygen documentation done"")

    else(DOXYGEN_FOUND)
        message(FATAL_ERROR ""Doxygen need to be installed to generate the doxygen documentation"")
    endif(DOXYGEN_FOUND)

endif()

# Generate source tarball...

    # Define version of source archive...
    set(CPACK_PACKAGE_VERSION_MAJOR     ${VERSION_MAJOR})
    set(CPACK_PACKAGE_VERSION_MINOR     ${VERSION_MINOR})
    set(CPACK_PACKAGE_VERSION_PATCH     ${VERSION_PATCH})

    # Generate a .tar.bz2
    set(CPACK_SOURCE_GENERATOR ""TBZ2"")

    # Set filename...
    set(CPACK_SOURCE_PACKAGE_FILE_NAME
        ""${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"")

    # Don't include these files in the archive...
    set(CPACK_SOURCE_IGNORE_FILES
      ""/build/;/debian/;/prefix/;/.git*;~$;${CPACK_SOURCE_IGNORE_FILES}"")

    # Include the CPack module for generating the archive and add the standard
    #  dist target to the generated makefile...
    include(CPack)
    add_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)

",3.1.3,3.1
42832,Ircam-RnD,xmm,False,False,False,False,False,17,C++,2020-01-24 21:43:47+00:00,2015-03-11 20:33:01+00:00,30,215,"cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# Project declaration
project(xmm)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(""-std=c++11"" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG(""-std=c++0x"" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
else()
        message(STATUS ""The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."")
endif()

# The version number.
set (xmm_VERSION_MAJOR 0)
set (xmm_VERSION_MINOR 1)

# Compiler Flags
set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -DNDEBUG -fPIC"")
set(CMAKE_CXX_FLAGS_DEBUG ""-O0 -DJSON_DEBUG -fPIC"")
if (NOT CMAKE_BUILD_TYPE)
    message(STATUS ""No build type selected, default to Release"")
    set(CMAKE_BUILD_TYPE ""Release"")
endif()

# Include JSON
include_directories(./dependencies/jsoncpp/include)
include_directories(./dependencies/jsoncpp/src)

# Declare library
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/core/common)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/core/distributions)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/core/model)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/core/trainingset)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/models/gmm)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/models/hmm)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/models/kmeans)

set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE})
add_definitions(-DUSE_PTHREAD)

file(
    GLOB_RECURSE
    xmm_source_files
    src/*
)

file(
    GLOB_RECURSE
    jsoncpp_source_files
    dependencies/jsoncpp/src/*
)

add_library(
    xmm
    STATIC
    ${xmm_source_files} ${jsoncpp_source_files}
)

# Declare Unit tests
set(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/catch)

# message(${LINK_DIRECTORIES})

file(
    GLOB_RECURSE
    xmm_test_files
    test/*
)

add_executable(
    tests
    EXCLUDE_FROM_ALL
    ${xmm_test_files}
)

# linking configuration
target_link_libraries(
    tests
    xmm
)

set_target_properties(tests PROPERTIES OUTPUT_NAME xmm_testing)
add_custom_command(TARGET tests POST_BUILD COMMAND ${EXECUTABLE_OUTPUT_PATH}/xmm_testing)

# add a target to generate API documentation with Doxygen
find_package(Doxygen)

find_program(DOTPATH dot)
if(${DOTPATH} STREQUAL ""DOTPATH-NOTFOUND"")
  set(HAS_DOT """")
else(${DOTPATH} STREQUAL ""DOTPATH-NOTFOUND"")
  set(HAS_DOT ""-dot"")
endif(${DOTPATH} STREQUAL ""DOTPATH-NOTFOUND"")

if(DOXYGEN_FOUND)
    add_custom_target(doc
                      COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile${HAS_DOT}
                      DEPENDS ${tracking_source_files}
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/doc/
                      COMMENT ""Generating API documentation with Doxygen"" VERBATIM)
else(DOXYGEN_FOUND)
    message(STATUS ""Doxygen not found, doc will not be included in the Makefile"")
endif(DOXYGEN_FOUND)

set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/doc/html"")
",3.1.0,3.1
42873,firebase,firebase-cpp-sdk,False,False,False,False,False,148,C++,2020-03-14 22:13:24+00:00,2019-03-12 17:23:01+00:00,70,476,"# Copyright 2018 Google
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Top level CMake file that defines the entire Firebase C++ SDK build.

cmake_minimum_required (VERSION 3.1)
set (CMAKE_CXX_STANDARD 11)

# Turn on virtual folders for visual studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Top level option that determines the default behavior of the include options
# below. Useful for turning off all at once, and then turning on a specific one.
option(FIREBASE_INCLUDE_LIBRARY_DEFAULT
       ""Should each library be included by default."" ON)
# Different options to enable/disable each library being included during
# configuration.
option(FIREBASE_INCLUDE_ADMOB ""Include the AdMob library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_ANALYTICS
       ""Include the Google Analytics for Firebase library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_AUTH ""Include the Firebase Authentication library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_DATABASE
       ""Include the Firebase Realtime Database library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_DYNAMIC_LINKS
       ""Include the Firebase Dynamic Links library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_FIRESTORE
       ""Include the Cloud Firestore library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_FUNCTIONS
       ""Include the Cloud Functions for Firebase library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_INSTANCE_ID
       ""Include the Firebase Instance ID library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_MESSAGING
       ""Include the Firebase Cloud Messaging library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_REMOTE_CONFIG
       ""Include the Firebase Remote Config library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})
option(FIREBASE_INCLUDE_STORAGE
       ""Include the Cloud Storage for Firebase library.""
       ${FIREBASE_INCLUDE_LIBRARY_DEFAULT})

option(FIREBASE_CPP_BUILD_TESTS
       ""Enable the Firebase C++ Build Tests."" OFF)
option(FIREBASE_FORCE_FAKE_SECURE_STORAGE
       ""Disable use of platform secret store and use fake impl."" OFF)
option(FIREBASE_CPP_BUILD_PACKAGE
       ""Bundle the Firebase C++ libraries into a zip file."" OFF)
option(FIREBASE_CPP_USE_PRIOR_GRADLE_BUILD
        ""When building with Gradle, use the previously built libraries."" OFF)

# Define this directory to be the root of the C++ SDK, which the libraries can
# then refer to.
set(FIREBASE_CPP_SDK_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR})

project (firebase NONE)
enable_language(C)
enable_language(CXX)

list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_LIST_DIR}/cmake)
include(external_rules)
include(cpp_pack)

if(FIREBASE_CPP_BUILD_TESTS)
  enable_testing()
  include(test_rules)
  # Copy the custom CTest file into the binary directory, so that it is used.
  configure_file(${CMAKE_CURRENT_LIST_DIR}/cmake/CTestCustom.cmake
               ${CMAKE_BINARY_DIR})
endif()

# Occasionally ANDROID is not being set correctly when invoked by gradle, so
# set it manually if ANDROID_NDK has been defined.
if(DEFINED ANDROID_NDK)
  set(ANDROID 1)
endif()

# Set directories needed by the Firebase subprojects
# Directory to store generated files.
set(FIREBASE_GEN_FILE_DIR ${CMAKE_BINARY_DIR}/generated)
# Directory for any shared scripts.
set(FIREBASE_SCRIPT_DIR ${CMAKE_CURRENT_LIST_DIR})

if (FIREBASE_CPP_BUILD_TESTS AND MSVC)
  # Googletest requires MSVC to compile with the static version of the runtime
  # library, so define the appropriate runtime flag, before adding libraries.
  set(CMAKE_C_FLAGS_DEBUG ""${CMAKE_C_FLAGS_DEBUG} /MTd"")
  set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} /MT"")
  set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} /MTd"")
  set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
endif()

# Set variables that are used by download_external_sources.
set(FIREBASE_SOURCE_DIR ${PROJECT_SOURCE_DIR})
set(FIREBASE_BINARY_DIR ${PROJECT_BINARY_DIR})
set(FIREBASE_INSTALL_DIR ${PROJECT_BINARY_DIR}/opt)
set(FIREBASE_DOWNLOAD_DIR ${PROJECT_BINARY_DIR}/downloads)

if(FIREBASE_CPP_USE_PRIOR_GRADLE_BUILD)
  # Figure out where app's binary_dir was.
  string(REGEX REPLACE
    ""${CMAKE_CURRENT_LIST_DIR}/[^/]+/(.*)""
    ""${CMAKE_CURRENT_LIST_DIR}/app/\\1""
    APP_BINARY_DIR ""${FIREBASE_BINARY_DIR}"")

  set(FIRESTORE_SOURCE_DIR ${APP_BINARY_DIR}/external/src/firestore)
else()
  # Run the CMake build logic that will download all the external dependencies.
  message(STATUS ""Downloading external project dependencies..."")
  download_external_sources()
  message(STATUS ""Download complete."")

  set(FIRESTORE_SOURCE_DIR ${FIREBASE_BINARY_DIR}/external/src/firestore)
endif()

# Include Firestore's external build early to resolve conflicts on packages.
if(NOT ANDROID AND FIREBASE_INCLUDE_FIRESTORE)
  set(FIRESTORE_BINARY_DIR ${FIRESTORE_SOURCE_DIR}-build)

  set(
    FIREBASE_IOS_BUILD_TESTS
    ${FIREBASE_CPP_BUILD_TESTS}
    CACHE BOOL ""Force Firestore build tests to match""
  )

  add_subdirectory(${FIRESTORE_SOURCE_DIR} ${FIRESTORE_BINARY_DIR})

  copy_subdirectory_definition(${FIRESTORE_SOURCE_DIR} NANOPB_SOURCE_DIR)
endif()

# Disable the Flatbuffer build tests, install and flathash
set(FLATBUFFERS_BUILD_TESTS OFF CACHE BOOL """")
set(FLATBUFFERS_INSTALL OFF CACHE BOOL """")
set(FLATBUFFERS_FLATHASH OFF CACHE BOOL """")

# Disable buliding flatc if cross compiling
if(IOS OR ANDROID)
  set(FLATBUFFERS_BUILD_FLATC OFF CACHE BOOL """")
endif()

if(FIREBASE_CPP_USE_PRIOR_GRADLE_BUILD)
  message(STATUS ""flatbuffers is added with APP_BINARY_DIR ${APP_BINARY_DIR}"")
  add_external_library(flatbuffers BINARY_DIR ""${APP_BINARY_DIR}"")
else()
  message(STATUS ""flatbuffers is added normally"")
  add_external_library(flatbuffers)
endif()

if(FIREBASE_CPP_BUILD_TESTS AND NOT FIREBASE_INCLUDE_FIRESTORE)
  # Firestore's external build pulls in googletest
  add_external_library(googletest)
endif()

# Some of the external libraries are not used for mobile.
if (NOT ANDROID AND NOT IOS)
  # Use the static versions of the OpenSSL libraries.
  set(OPENSSL_USE_STATIC_LIBS TRUE)
  if (MSVC)
    # Get the correct version of the OpenSSL libraries based on building for MT.
    if (""${CMAKE_CXX_FLAGS_DEBUG}"" MATCHES ""/MT"" OR
        ""${CMAKE_CXX_FLAGS_RELEASE}"" MATCHES ""/MT"")
      set(OPENSSL_MSVC_STATIC_RT TRUE)
    else()
      set(OPENSSL_MSVC_STATIC_RT FALSE)
    endif()
  endif()

  # Build curl as a static library
  set(CURL_STATICLIB ON CACHE BOOL """")
  if (WIN32)
    set(CMAKE_USE_WINSSL ON CACHE BOOL """")
  endif()
  add_external_library(curl)

  add_external_library(libuv)

  find_package(OpenSSL)

  add_external_library(zlib)

  add_external_library(uWebSockets)

  set(websockets_additional_defines """")

  # uWebSockets does not come with a CMakeLists file, so define the target.
  # Note that since it depends on OpenSSL, only do so if that was found.
  if (OPENSSL_FOUND)
    if (MSVC OR APPLE)
      set(uWebSockets_extra_src)
    else()
      # Epoll is only used on Linux, otherwise LibUV is used.
      set(uWebSockets_extra_src
          ${UWEBSOCKETS_SOURCE_DIR}/src/Epoll.cpp)
    endif()
    add_library(libuWS STATIC
        ${uWebSockets_extra_src}
        ${UWEBSOCKETS_SOURCE_DIR}/src/Extensions.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/Group.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/HTTPSocket.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/Hub.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/Networking.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/Node.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/Socket.cpp
        ${UWEBSOCKETS_SOURCE_DIR}/src/WebSocket.cpp)
    if(MSVC)
      set(websockets_additional_defines
        -DWIN32_LEAN_AND_MEAN # Ensure that windows doesn't include winsock.h by
                              # default, as it can cause issues when libraries try
                              # to include winsock2.h later on in the process.
        -DUSE_LIBUV=1
      )
    elseif(APPLE)
      set(websockets_additional_defines
        -DUSE_LIBUV=1
      )
    endif()

    target_compile_definitions(libuWS
      PRIVATE
        ${websockets_additional_defines}
    )
    target_include_directories(libuWS
      PUBLIC
        ${LIBUV_SOURCE_DIR}/include
        ${UWEBSOCKETS_SOURCE_DIR}
        ${ZLIB_SOURCE_DIR}
        ${ZLIB_BINARY_DIR}
      PRIVATE
        ${OPENSSL_INCLUDE_DIR}
    )
    target_link_libraries(libuWS
      PRIVATE
        ${OPENSSL_LIBRARIES}
        uv_a
        zlibstatic
    )
  endif()
endif()

if(NOT ANDROID)
  if(FIREBASE_INCLUDE_FIRESTORE)
    # The Firestore build includes protobuf and nanopb already
    list(APPEND CMAKE_MODULE_PATH ${NANOPB_SOURCE_DIR}/extra)
    find_package(Nanopb REQUIRED)

    set(PROTOBUF_FOUND ON)
  else()
    find_package(Protobuf)
    if (PROTOBUF_FOUND)
      # NanoPB requires Protobuf to be present, so only add it if it was found.
      add_external_library(nanopb)

      # NanoPB has a FindNanopb which defines the function to generate files,
      # so add it to the module path, and use that.
      list(APPEND CMAKE_MODULE_PATH ${NANOPB_SOURCE_DIR}/extra)
      find_package(Nanopb)

      target_compile_definitions(
        protobuf-nanopb-static
        PUBLIC -DPB_FIELD_32BIT -DPB_ENABLE_MALLOC
      )
    endif()
  endif()
endif()

if(ANDROID OR IOS)
  # Mobile platforms build flatc externally so that it works on the platform
  # performing the build.
  set(firebase_external_flatc_build_dir ""${FLATBUFFERS_BINARY_DIR}-flatc"")
  set(firebase_external_flatc ""${firebase_external_flatc_build_dir}/flatc"")

  if(CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"")
    # Fix path slash direction (windows paths use '\' instead of '/')
    string(REPLACE ""/"" ""\\""
                  firebase_external_flatc_build_dir_win
                  ${firebase_external_flatc_build_dir})
    set(firebase_external_flatc_build_dir
        ${firebase_external_flatc_build_dir_win})
    unset(firebase_external_flatc_build_dir_win)

    # Building on Windows places the executable in a /Debug/ folder
    set(firebase_external_flatc
        ""${firebase_external_flatc_build_dir}/Debug/flatc"")
  endif()

  set(FLATBUFFERS_FLATC_EXECUTABLE ${firebase_external_flatc} CACHE STRING """")

  # Setup the flatc custom build target.
  # These commands are executed from within the currect context, which has set
  # variables for the target platform. We use ""env -i"" to clear these
  # variables, and manually keep the PATH to regular bash path.
  # If we didn't do this, we'd end up building flatc for the target platform
  # instead of the building platform, and thus couldn't use flatc on the
  # building platform.
  set(firebase_command_line_path ""$ENV{PATH}"")

  if(CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"")
    # OS - Specific Command Joiner
    set(COMMAND_CONCAT &)

    #Windows doesn't have an 'env' command
    set(ENV_COMMAND """")
  else()
    set(COMMAND_CONCAT &&)
    set(ENV_COMMAND env -i PATH=${firebase_command_line_path})
  endif()

  # Build flatc by invoking the cmake build, with only the flatc target.
  file(MAKE_DIRECTORY ${firebase_external_flatc_build_dir})
  add_custom_command(
    OUTPUT ${firebase_external_flatc}
    COMMAND cd ${firebase_external_flatc_build_dir} ${COMMAND_CONCAT}
            ${ENV_COMMAND} cmake ${FLATBUFFERS_SOURCE_DIR} ${COMMAND_CONCAT}
            ${ENV_COMMAND} cmake --build . --target flatc
    COMMENT ""Building flatc (the FlatBuffer schema compiler)"")

  # Add a target so that we can run the custom commands before the code build.
  add_custom_target(
    firebase_flatc_prebuild
    DEPENDS ${firebase_external_flatc})

  # Set a variable that the dependencies can use, to trigger the build before
  # using flatbuffers.
  set(FIREBASE_FLATBUFFERS_DEPENDENCIES ""firebase_flatc_prebuild"")
else()
  # Other platforms do not need to declare this dependency, as they will build
  # flatc correctly when needed.
  set(FIREBASE_FLATBUFFERS_DEPENDENCIES """")
endif()

include(binary_to_array)
include(firebase_cpp_gradle)

add_subdirectory(ios_pod)

# If we're building tests, we need to include the 'testing' folder before any
# of the tests actually get built.
if(FIREBASE_CPP_BUILD_TESTS)
  add_subdirectory(testing)
endif()

if(NOT FIREBASE_CPP_USE_PRIOR_GRADLE_BUILD)
  add_subdirectory(app)
else()
  # Add firebase_app as a target on the previously built app.
  add_library(firebase_app STATIC IMPORTED GLOBAL)
  file(MAKE_DIRECTORY ""${APP_BINARY_DIR}/generated"")
  file(MAKE_DIRECTORY ""${FIREBASE_BINARY_DIR}/generated"")
  set(app_include_dirs
      ""${CMAKE_CURRENT_LIST_DIR}/app/src/include""
      ""${APP_BINARY_DIR}/generated""
      ""${FIREBASE_BINARY_DIR}/generated""
  )
  set_target_properties(firebase_app PROPERTIES
    IMPORTED_LOCATION ""${APP_BINARY_DIR}/libfirebase_app.a""
    INTERFACE_INCLUDE_DIRECTORIES ""${app_include_dirs}""
  )
endif()

if (FIREBASE_INCLUDE_ADMOB)
  add_subdirectory(admob)
endif()
if (FIREBASE_INCLUDE_ANALYTICS)
  add_subdirectory(analytics)
endif()
if (FIREBASE_INCLUDE_AUTH)
  add_subdirectory(auth)
endif()
if (FIREBASE_INCLUDE_DATABASE)
  add_subdirectory(database)
endif()
if (FIREBASE_INCLUDE_DYNAMIC_LINKS)
  add_subdirectory(dynamic_links)
endif()
if (FIREBASE_INCLUDE_FIRESTORE)
  add_subdirectory(firestore)
endif()
if (FIREBASE_INCLUDE_FUNCTIONS)
  add_subdirectory(functions)
endif()
if (FIREBASE_INCLUDE_INSTANCE_ID)
  add_subdirectory(instance_id)
endif()
if (FIREBASE_INCLUDE_MESSAGING)
  add_subdirectory(messaging)
endif()
if (FIREBASE_INCLUDE_REMOTE_CONFIG)
  add_subdirectory(remote_config)
endif()
if (FIREBASE_INCLUDE_STORAGE)
  add_subdirectory(storage)
endif()

# Place the CMake and gradle build files provided to easily link against the
# prebuilt libraries at the root of the package.
cpp_pack_dir(
  ""${CMAKE_CURRENT_LIST_DIR}/release_build_files/""
  .
)
",3.1,3.1
42919,saunaklub,etudes,False,False,False,False,False,3,C++,2020-04-26 08:03:14+00:00,2015-11-07 17:03:19+00:00,5,553,"set(LIBRARY etudes)
set(CLIENT  etudes-host)

set(PROJECT etudes)
project(${PROJECT})

cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0072 NEW) # OpenGL GLVND preference
cmake_policy(SET CMP0074 NEW) # use *_ROOT variables

set(CMAKE_CXX_STANDARD 17)
add_subdirectory(""extern/typed-geometry"")
add_subdirectory(""extern/glow"")

set(LIBRARY_SOURCES
    src/lib/EtudesConfig.hpp
    src/lib/Utility/Utility.cpp
    src/lib/Utility/Utility.hpp
    src/lib/Utility/Logging.cpp
    src/lib/Utility/Logging.hpp
    src/lib/Utility/Config.cpp
    src/lib/Utility/Config.hpp
    src/lib/Utility/ScopedProfiler.cpp
    src/lib/Utility/ScopedProfiler.hpp
    src/lib/Utility/AccumulativeProfiler.cpp
    src/lib/Utility/AccumulativeProfiler.hpp
    src/lib/Utility/ModulationFuncs.cpp
    src/lib/Utility/ModulationFuncs.hpp
    src/lib/Factories/ElementFactory.cpp
    src/lib/Factories/ElementFactory.hpp
    src/lib/Factories/SceneFactory.cpp
    src/lib/Factories/SceneFactory.hpp
    src/lib/IO/OSCInput.cpp
    src/lib/IO/OSCInput.hpp
    src/lib/IO/VideoOutput.cpp
    src/lib/IO/VideoOutput.hpp
    src/lib/Graphics/ShaderRegistry.cpp
    src/lib/Graphics/ShaderRegistry.hpp
    src/lib/Graphics/Context.cpp
    src/lib/Graphics/Context.hpp
    src/lib/Graphics/Painter.cpp
    src/lib/Graphics/Painter.hpp
    src/lib/Graphics/Texture.cpp
    src/lib/Graphics/Texture.hpp
    src/lib/Graphics/Image.cpp
    src/lib/Graphics/Image.hpp
    src/lib/Graphics/SimplexNoise.cpp
    src/lib/Graphics/SimplexNoise.hpp
    src/lib/Graphics/LookupTable.cpp
    src/lib/Graphics/LookupTable.hpp
    #    src/lib/Graphics/TextureTiled.cpp
    src/lib/Graphics/PanZoom.cpp
    src/lib/Graphics/PanZoom.hpp
    src/lib/Graphics/PanZoomParallel.cpp
    src/lib/Graphics/PanZoomParallel.hpp
    src/lib/Graphics/Geometry/Transforms.cpp
    src/lib/Graphics/Geometry/Transforms.hpp
    src/lib/Graphics/Geometry/Rect.cpp
    src/lib/Graphics/Geometry/Rect.hpp
    src/lib/Graphics/Drawable/Quad.cpp
    src/lib/Graphics/Drawable/Quad.hpp
    src/lib/Receivers/Receiver.cpp
    src/lib/Receivers/Receiver.hpp
    src/lib/Receivers/Element.cpp
    src/lib/Receivers/Element.hpp
    src/lib/Receivers/Scene.cpp
    src/lib/Receivers/Scene.hpp
    src/lib/Elements/AlgoSynth.cpp
    src/lib/Elements/AlgoSynth.hpp
    src/lib/Elements/CellularAutomaton.cpp
    src/lib/Elements/CellularAutomaton.hpp
    src/lib/Elements/Clouds.cpp
    src/lib/Elements/Clouds.hpp
    src/lib/Elements/FlowTrace.cpp
    src/lib/Elements/FlowTrace.hpp
    src/lib/Elements/ImageView.cpp
    src/lib/Elements/ImageView.hpp
    src/lib/Elements/Lines.cpp
    src/lib/Elements/Lines.hpp
    src/lib/Elements/Particles.cpp
    src/lib/Elements/Particles.hpp
    src/lib/Elements/Shader.cpp
    src/lib/Elements/Shader.hpp
    src/lib/Elements/SimplexField.cpp
    src/lib/Elements/Sinusoids.cpp
    src/lib/Elements/Sinusoids.hpp
    src/lib/Elements/Testbed.cpp
    src/lib/Elements/Testbed.hpp
    )

if(${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
    list(APPEND LIBRARY_SOURCES
        src/lib/IO/VideoOutputV4L2.cpp
		src/lib/IO/VideoOutputV4L2.hpp)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Darwin"")
    list(APPEND LIBRARY_SOURCES
        src/lib/IO/VideoOutputSyphon.mm)
    set_source_files_properties(src/lib/IO/VideoOutputSyphon.mm PROPERTIES
        COMPILE_FLAGS ""-x objective-c++"")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
    list(APPEND LIBRARY_SOURCES
        src/lib/IO/VideoOutputSpout.cpp
		src/lib/IO/VideoOutputSpout.hpp)
		
	set(SPOUT_LIBRARY_DIR """" CACHE PATH ""Spout2 library directory"")
	set(SPOUT_INCLUDE_DIR """" CACHE PATH ""Spout2 include directory"")
endif()

set(CLIENT_SOURCES
    src/host/main.cpp
    src/host/EtudesHost.cpp
	src/host/EtudesHost.hpp
    src/host/Renderer.cpp
	src/host/Renderer.hpp
    )

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall"")
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -Wall"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -Wall"")

if(""${CMAKE_BUILD_TYPE}"" STREQUAL ""Debug"")
    add_definitions(""-DDEBUG"")
endif()

set(ADDITIONAL_LIBRARIES """")
set(ADDITIONAL_DIRS """")

if(${CMAKE_SYSTEM_NAME} STREQUAL ""Linux"")
    add_definitions(""-DLINUX"")
    set(GLFW glfw)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Darwin"")
    add_definitions(""-DDARWIN"")
    find_library(SYPHON_LIBRARY Syphon)
    find_path(SYPHON_INCLUDE_DIR Syphon/Syphon.h)
    find_library(COCOA_LIBRARY Cocoa)
    find_path(COCOA_INCLUDE_DIR Cocoa/Cocoa.h)
    #find_package(glfw CONFIG NAMES glfw glfw3)

    set(GLFW glfw3)
    set(ADDITIONAL_LIBRARIES 
		${SYPHON_LIBRARY}
        ${COCOA_LIBRARY}
        )
    set(ADDITIONAL_DIRS 
		${SYPHON_INCLUDE_DIR}
        ${COCOA_INCLUDE_DIR}
        )
elseif(${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
	add_definitions(""-DWINDOWS"")
	set(GLFW glfw)

	set(ADDITIONAL_LIBRARIES 
		${SPOUT_LIBRARY_DIR}/SpoutLibrary.lib
        )
	set(ADDITIONAL_DIRS 
		${SPOUT_INCLUDE_DIR}
        )
endif()

option(Test ""Build tests"" OFF)

find_package(OpenGL REQUIRED)
find_package(glm REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(liblo REQUIRED)
find_package(glfw3 REQUIRED)

set(FREEIMAGE_LIBRARY_DIR """" CACHE PATH ""FreeImage library directory"")
set(FREEIMAGE_INCLUDE_DIR """" CACHE PATH ""FreeImage include directory"")
set(FREEIMAGEPLUS_LIBRARY_DIR """" CACHE PATH ""FreeImagePlus library directory"")
set(FREEIMAGEPLUS_INCLUDE_DIR """" CACHE PATH ""FreeImagePlus include directory"")

link_directories(${YAML_CPP_LIBRARY_DIRS})
link_directories(${FREEIMAGEPLUS_LIBRARY_DIR})

add_compile_definitions(GLOW_HAS_GLM)

add_library(${LIBRARY} SHARED ${LIBRARY_SOURCES})
add_executable(${CLIENT} ${CLIENT_SOURCES})

if(${CMAKE_SYSTEM_NAME} STREQUAL ""Windows"")
	target_compile_definitions(${LIBRARY} PRIVATE ""-DDLLEXPORT"")
	set_target_properties(${CLIENT} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ""${CMAKE_SOURCE_DIR}"")
	
	message(""setting warning level"")
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /W1"")
endif()

target_include_directories(${CLIENT}
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/lib
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/host
    PUBLIC ${LIBLO_INCLUDE_DIRS}
    )

target_include_directories(${LIBRARY}
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/lib
    PUBLIC ${GLM_INCLUDE_DIRS}
    PUBLIC ${LIBLO_INCLUDE_DIRS}
    PUBLIC ${YAML_CPP_INCLUDE_DIRS}
	PUBLIC ${FREEIMAGE_INCLUDE_DIR}
	PUBLIC ${FREEIMAGEPLUS_INCLUDE_DIR}
    PUBLIC ${ADDITIONAL_DIRS}
    )

target_link_libraries(${LIBRARY}
    PUBLIC ${LIBLO_LIBRARIES}
    PUBLIC ${OPENGL_LIBRARIES}
    PUBLIC ${YAML_CPP_LIBRARIES}
    PUBLIC ${ADDITIONAL_LIBRARIES}
    PRIVATE freeimageplus
    PUBLIC glow
    )

target_link_libraries(${CLIENT}
    PUBLIC ${LIBLO_LIBRARIES}
    PUBLIC ${LIBRARY}
    PUBLIC ${GLFW}
    )

configure_file(
    ${PROJECT}Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT}Config.cmake)

install(
    TARGETS ${LIBRARY} ${CLIENT}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin)

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/lib/ DESTINATION include/${PROJECT}
    FILES_MATCHING PATTERN ""*.hpp"")

install(
    FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT}Config.cmake
    DESTINATION lib/cmake/${PROJECT})

if(Test)
    enable_testing()
    add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/etudes-test)
endif()
",3.1,3.1
43177,bibletime,bibletime,False,False,False,False,False,10,C++,2020-05-17 21:02:34+00:00,2014-07-02 16:47:11+00:00,133,4784,"PROJECT(bibletime CXX C)
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)


######################################################
# Set CMake policies:
#
MESSAGE(STATUS ""Using CMake ${CMAKE_VERSION}: ${CMAKE_COMMAND}"")
IF(MSVC) # Automatically link Qt executables to qtmain target on Windows
    CMAKE_POLICY(SET CMP0020 NEW)
ENDIF()
CMAKE_POLICY(SET CMP0028 NEW)


######################################################
# Build-time user options:
#
SET(BUILD_BIBLETIME ""ON"" CACHE BOOL
    ""Whether to build and install the BibleTime application"")

SET(BUILD_HANDBOOK_HTML ""ON"" CACHE BOOL
    ""Whether to build and install the handbook in HTML format"")
SET(BUILD_HANDBOOK_HTML_LANGUAGES """" CACHE STRING
    ""A semicolon-separated list of language codes for which to build and
install the handbook in HTML format if BUILD_HANDBOOK_HTML is enabled. \
Leave empty use all supported languages."")

SET(BUILD_HANDBOOK_PDF ""ON"" CACHE BOOL
    ""Whether to build and install the handbook in PDF"")
SET(BUILD_HANDBOOK_PDF_LANGUAGES """" CACHE STRING
    ""A semicolon-separated list of language codes for which to build and \
install the handbook in PDF format if BUILD_HANDBOOK_PDF is enabled. \
Leave empty use all supported languages."")

SET(BUILD_HOWTO_HTML ""ON"" CACHE BOOL
    ""Whether to build and install the howto in HTML format"")
SET(BUILD_HOWTO_HTML_LANGUAGES """" CACHE STRING
    ""A semicolon-separated list of language codes for which to build and \
install the howto in HTML format if BUILD_HOWTO_HTML is enabled. \
Leave empty use all supported languages."")

SET(BUILD_HOWTO_PDF ""ON"" CACHE BOOL
    ""Whether to build and install the howto in PDF format"")
SET(BUILD_HOWTO_PDF_LANGUAGES """" CACHE STRING
    ""A semicolon-separated list of language codes for which to build and \
install the howto in PDF format if BUILD_HOWTO_PDF is enabled. \
Leave empty use all supported languages."")


######################################################
# Misc. settings:
#
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)


######################################################
# Load user configuration files:
#
# If BIBLETIME_BUILDCONFIG set, load the file and fail on error. Otherwise, try
# to include either ""config.cmake"" under either the build directory or the
# source directory, whichever file first exists, if at all.
IF(DEFINED BIBLETIME_BUILDCONFIG)
  IF(BIBLETIME_BUILDCONFIG_IS_RELATIVE)
      SET(BIBLETIME_BUILDCONFIG
          ""${CMAKE_CURRENT_BINARY_DIR}/${BIBLETIME_BUILDCONFIG}"")
  ENDIF()
  INCLUDE(""${BIBLETIME_BUILDCONFIG}"" OPTIONAL RESULT_VARIABLE r)
  IF(r)
    MESSAGE(STATUS ""Included \""${BIBLETIME_BUILDCONFIG}\"""")
    UNSET(r)
  ELSE()
    MESSAGE(FATAL_ERROR
     ""Failed to include build configuration from \""${BIBLETIME_BUILDCONFIG}\""!"")
  ENDIF()
ELSE()
  INCLUDE(""${CMAKE_CURRENT_BINARY_DIR}/config.cmake"" OPTIONAL RESULT_VARIABLE r)
  IF(r)
    MESSAGE(STATUS ""Included \""${r}\"""")
  ELSE()
    INCLUDE(""${CMAKE_CURRENT_SOURCE_DIR}/config.cmake""
            OPTIONAL RESULT_VARIABLE r)
    IF(r)
      MESSAGE(STATUS ""Included \""${r}\"""")
    ENDIF()
  ENDIF()
  UNSET(r)
ENDIF()


######################################################
# Set CMake module path:
#
LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")



######################################################
# BibleTime version:
#
# NOTICE! The version number must only be changed during the release procedures
#  A N D   N O T  during development or bug-fixing. This guarantees that all
# versions of BibleTime between OLDVERSION and NEXTVERSION have version strings
# in the form of OLDVERSION+githash where githash is the git commit hash ID.
#
# Note: for pre-#.#.0 versions, use the following suffixes:
#   _dev      if pre-beta1
#   _beta1    if post-beta1
#   _beta2    if post-beta2
#   _rc1    if post-rc1
#   _rc2    if post-rc2
# For post-full-release versions, no suffix is used.

SET(BT_VERSION_MAJOR ""3"")
SET(BT_VERSION_MINOR ""0"")
SET(BT_VERSION_PATCH ""0_rc1"")
#SET(BT_VERSION_BUILD """") # Temporarily uncomment this line for release procedures

# Determine build, if needed:
IF(NOT (DEFINED BT_VERSION_BUILD))
  FIND_PACKAGE(Git)
  IF(NOT GIT_FOUND)
    FIND_PROGRAM(GIT_EXECUTABLE NAMES git)
    IF(GIT_EXECUTABLE)
      SET(GIT_FOUND TRUE)
    ENDIF()
  ENDIF()
  IF(GIT_FOUND)
    FUNCTION(BtGitRevision out)
      EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                      ERROR_QUIET
                      RESULT_VARIABLE resVar
                      OUTPUT_VARIABLE outVar
                      OUTPUT_STRIP_TRAILING_WHITESPACE)
      IF(${resVar} EQUAL 0)
        STRING(TOLOWER ""${outVar}"" hashCandidate)
        STRING(REGEX MATCH ""^[0123456789abcdef]+$"" hasHash ""${hashCandidate}"")
        IF(hasHash)
          STRING(LENGTH ""${hashCandidate}"" hashLength)
          IF(hashLength EQUAL 40)
            SET(${out} ""${hashCandidate}"" PARENT_SCOPE)
          ENDIF()
        ENDIF()
      ENDIF()
    ENDFUNCTION()
    BtGitRevision(BibleTimeGitRevision)
    IF(DEFINED BibleTimeGitRevision)
      SET(BT_VERSION_BUILD ""+${BibleTimeGitRevision}"")
    ENDIF()
  ENDIF()
ENDIF()
SET(BT_VERSION_FULL ""${BT_VERSION_MAJOR}.${BT_VERSION_MINOR}.${BT_VERSION_PATCH}${BT_VERSION_BUILD}"")
MESSAGE(STATUS ""Setting up build environment for BibleTime version ${BT_VERSION_FULL}"")


######################################################
# Paths for installation:
#
INCLUDE(GNUInstallDirs)
IF(NOT DEFINED BT_BINDIR)
    IF(APPLE)
        SET(BT_BINDIR ""."")
    ELSE()
        SET(BT_BINDIR ""${CMAKE_INSTALL_BINDIR}"")
    ENDIF()
ENDIF()
IF(NOT DEFINED BT_DATAROOTDIR)
    IF(APPLE)
        SET(BT_DATAROOTDIR ""./BibleTime.app/Contents/share"")
    ELSE()
        SET(BT_DATAROOTDIR ""${CMAKE_INSTALL_DATAROOTDIR}"")
    ENDIF()
ENDIF()
IF(NOT DEFINED BT_DATADIR)
    IF(APPLE)
        SET(BT_DATADIR ""./BibleTime.app/Contents/share"")
    ELSE()
        SET(BT_DATADIR ""${CMAKE_INSTALL_DATADIR}"")
    ENDIF()
ENDIF()
IF(APPLE AND NOT DEFINED BT_RESOURCEDIR)
    SET(BT_RESOURCEDIR ""./BibleTime.app/Contents/Resources"")
ENDIF()
IF(NOT DEFINED SWORD_DATADIR)
    SET(SWORD_DATADIR ""${BT_DATAROOTDIR}"")
ENDIF()
IF(NOT DEFINED BT_DOCDIR)
    SET(BT_DOCDIR ""${CMAKE_INSTALL_DOCDIR}"")
ENDIF()
IF(IS_ABSOLUTE ""${BT_DOCDIR}"")
    SET(BT_DOCDIR_ABSOLUTE ""${BT_DOCDIR}"")
ELSE()
    SET(BT_DOCDIR_ABSOLUTE ""${CMAKE_INSTALL_PREFIX}/${BT_DOCDIR}"")
ENDIF()
IF(NOT DEFINED BT_LOCALEDIR)
    # The default for the BT_LOCALEDIR variable differs from the default of
    # localedir in the GNU Coding Standards.
    SET(BT_LOCALEDIR ""${BT_DATADIR}/bibletime/locale"")
ENDIF()


######################################################
# The BibleTime application:
#
IF(BUILD_BIBLETIME)
    INCLUDE(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/BTApplication.cmake"")
ENDIF()

######################################################
# Documentation:
#
INCLUDE(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/BTDocumentation.cmake"")


######################################################
# ""fix_cpp_headers"" target to fix those copyright headers of files.
#
STRING(TIMESTAMP CURRENT_YEAR ""%Y"")
CONFIGURE_FILE(""${CMAKE_CURRENT_SOURCE_DIR}/FILE_HEADER.cpp.in""
               ""${CMAKE_CURRENT_BINARY_DIR}/FILE_HEADER.cpp"" @ONLY)
ADD_CUSTOM_TARGET(fix_cpp_headers
    find ""${CMAKE_CURRENT_SOURCE_DIR}""
        -path ""${CMAKE_CURRENT_SOURCE_DIR}/.git"" -prune -o
        -path ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/platforms/windows"" -prune -o
        -path ""${CMAKE_CURRENT_BINARY_DIR}"" -prune -o
        -type f ""\\("" -name ""'*.h'"" -o -name ""'*.cpp'"" -o -name ""'*.qml'"" ""\\)""
        -exec ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/fix_cpp_header.sh"" ""{}""
              ""${CMAKE_CURRENT_BINARY_DIR}/FILE_HEADER.cpp"" ""\\;"")
",3.10,3.1
43298,openconnect,openconnect-gui,False,False,False,False,False,16,C++,2019-09-19 02:06:27+00:00,2014-08-14 15:05:27+00:00,851,759,"cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

if(APPLE)
    if(NOT CMAKE_OSX_SYSROOT)
        set(CMAKE_OSX_SYSROOT ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk"" CACHE STRING """" FORCE)
    endif()

     if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)
        set(CMAKE_OSX_DEPLOYMENT_TARGET ""10.11"" CACHE STRING """" FORCE)
    endif()
endif()

project(openconnect-gui
    VERSION 1.5.3
    LANGUAGES CXX
)

message(STATUS ""Building ${PROJECT_NAME} v${PROJECT_VERSION} [cmake]"")

set(PRODUCT_NAME_SHORT ""OpenConnect-GUI"")
set(PRODUCT_NAME_LONG ""OpenConnect-GUI VPN client"")
set(PRODUCT_NAME_COMPANY ""OpenConnect-GUI Team"")
set(PRODUCT_NAME_COMPANY_DOMAIN ""openconnect.github.io"")
set(PRODUCT_NAME_COPYRIGHT_SHORT ""Copyright (C) 2016-2018 OpenConnect-GUI Team"")
set(PRODUCT_NAME_COPYRIGHT_FULL ""Copyright (C) 2014-2015 Red Hat Inc.<br>${PRODUCT_NAME_COPYRIGHT_SHORT}"")

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/CMake/Modules/"")
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_SOURCE_DIR}/CMake/Includes/"")

include(ProjectSettings)
include(ProjectDependencies)

if(MINGW)
    add_subdirectory(nsis)
endif()
add_subdirectory(src)

install(FILES LICENSE.txt
    DESTINATION .
    COMPONENT App
)

include(clang-format)
include(git_revision_main)
include(build_timestamp_main)

include(ProjectPackage)

",3.10,3.1
43354,isazi,Dedispersion,False,False,False,False,False,2,C++,2019-04-25 12:48:34+00:00,2013-09-20 14:09:03+00:00,4,658,"cmake_minimum_required(VERSION 3.10)
project(Dedispersion VERSION 4.1)
include(GNUInstallDirs)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wall -std=c++14"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native"")
set(TARGET_LINK_LIBRARIES dedispersion isa_utils isa_opencl astrodata OpenCL)
if($ENV{LOFAR})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_HDF5"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} hdf5 hdf5_cpp z)
endif()
if($ENV{PSRDADA})
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DHAVE_PSRDADA"")
  set(TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARIES} psrdada cudart)
endif()

# libdedispersion
add_library(dedispersion SHARED
  src/Dedispersion.cpp
  src/Shifts.cpp
)
set_target_properties(dedispersion PROPERTIES
  VERSION ${PROJECT_VERSION}
  SOVERSION 1
  PUBLIC_HEADER ""include/Dedispersion.hpp;include/Shifts.hpp""
)
target_include_directories(dedispersion PRIVATE include)

# DedispersionTesting
add_executable(DedispersionTesting
  src/DedispersionTest.cpp
)
target_include_directories(DedispersionTesting PRIVATE include)
target_link_libraries(DedispersionTesting PRIVATE ${TARGET_LINK_LIBRARIES})

# DedispersionTuning
add_executable(DedispersionTuning
  src/DedispersionTuning.cpp
)
target_include_directories(DedispersionTuning PRIVATE include)
target_link_libraries(DedispersionTuning PRIVATE ${TARGET_LINK_LIBRARIES})

install(TARGETS dedispersion DedispersionTesting DedispersionTuning
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
",3.10,3.1
43388,thibault-martinez,iota.lib.cpp,False,False,False,False,False,5,C++,2019-07-20 15:37:48+00:00,2017-07-21 19:49:08+00:00,86,417,"#
# MIT License
#
# Copyright (c) 2017-2018 Thibault Martinez and Simon Ninon
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#

########## GLOBAL CONFIGURATION ##########

cmake_minimum_required(VERSION 3.1.0)
include(${CMAKE_ROOT}/Modules/ExternalProject.cmake)

project(iota VERSION ""1.2.1"")
enable_language(C CXX)

option(BUILD_TESTING """" OFF)
include(CTest)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_MACOSX_RPATH 1)

########## MISC CONFIG ##########
include(misc)

########## DEFAULT FOLDERS ##########

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

########## PROJECT DIRECTORIES ##########

set(PROJECT_SOURCE_DIR  ${CMAKE_SOURCE_DIR}/source/)
set(PROJECT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include/)
set(PROJECT_CMAKE_DIR   ${CMAKE_SOURCE_DIR}/cmake)

######### VERSION INCLUDE ##########

string(TOUPPER ${CMAKE_PROJECT_NAME} PROJECT_NAME)

configure_file(cmake/version.hpp.in
               ${PROJECT_INCLUDE_DIR}/${CMAKE_PROJECT_NAME}/version.hpp)

########## PROJECT FILES ##########

file(GLOB_RECURSE PROJECT_SOURCE_FILES ${PROJECT_SOURCE_DIR}/*.cpp)

include_directories(""${PROJECT_INCLUDE_DIR}"")
include_directories(""external/json/include"")
include_directories(""external/json/include/nlohmann"")

########## DEPENDENCIES ##########

include_directories(${CMAKE_SOURCE_DIR}/deps/include)
link_directories(${CMAKE_SOURCE_DIR}/deps/lib)
include(keccak_settings.as_source)

########## LIBRARY ##########

add_library(${CMAKE_PROJECT_NAME} STATIC ${PROJECT_SOURCE_FILES})

########## COMPILATION SETTINGS ##########

include(compilation_settings)

########## EXTERNAL LIBRARIES SETTINGS ##########

include(curl_settings)
include(cpr_settings)
include(keccak_settings.as_dep)

########## install ##########

# ensure lib and bin directories exist
install(CODE ""FILE(MAKE_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})"")
install(CODE ""FILE(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})"")

# install iota.lib.cpp
install(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/ DESTINATION lib USE_SOURCE_PERMISSIONS)
install(DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ DESTINATION bin USE_SOURCE_PERMISSIONS)
install(DIRECTORY ${PROJECT_INCLUDE_DIR}/ DESTINATION include USE_SOURCE_PERMISSIONS)

########## TEST SETTINGS ##########

if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -g -O0"")
  set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} --coverage"")
ENDIF()

if (BUILD_TESTS)
  enable_testing()

  # silence gtest compilation warnings..
  add_definitions(-D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)

  include(gtest_settings)
  add_subdirectory(test)
ENDIF()
",3.1.0,3.1
43392,emlai,zenith,False,False,False,False,False,1,C++,2019-11-14 15:54:58+00:00,2016-08-28 13:42:15+00:00,6,257,"cmake_minimum_required(VERSION 3.1)
project(zenith VERSION 0.0.0)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
add_definitions(-DPROJECT_NAME=""${PROJECT_NAME}"" -DPROJECT_VERSION=""${PROJECT_VERSION}"" -D_USE_MATH_DEFINES)

file(GLOB_RECURSE SOURCES ${PROJECT_SOURCE_DIR}/src/*.h ${PROJECT_SOURCE_DIR}/src/*.cpp)

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(-Weverything HAS_WEVERYTHING)
if(HAS_WEVERYTHING)
    set(CMAKE_CXX_FLAGS ""-Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic \
        -Wno-padded -Wno-global-constructors -Wno-exit-time-destructors -Wno-weak-vtables \
        -Wno-shadow -Wno-sign-conversion -Wno-shorten-64-to-32 -Wno-conversion ${CMAKE_CXX_FLAGS}"")
elseif(NOT MSVC)
    set(CMAKE_CXX_FLAGS ""-Wall -Wextra -pedantic -Wold-style-cast ${CMAKE_CXX_FLAGS}"")
endif()

foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${CONFIG} CONFIG)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG} ${CMAKE_BINARY_DIR})
endforeach()

add_executable(zenith WIN32 ${SOURCES})
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG"")
target_include_directories(zenith PUBLIC ""${PROJECT_SOURCE_DIR}/src"")
set_target_properties(zenith PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ""${PROJECT_SOURCE_DIR}"")

set(CMAKE_MODULE_PATH ""${CMAKE_BINARY_DIR}/cmake-modules"")

if(NOT EXISTS ""${CMAKE_BINARY_DIR}/cmake-modules/FindSDL2.cmake"")
    file(DOWNLOAD ""https://github.com/tcbrindle/sdl2-cmake-scripts/raw/master/FindSDL2.cmake"" ""${CMAKE_BINARY_DIR}/cmake-modules/FindSDL2.cmake"")
endif()

if(NOT EXISTS ""${CMAKE_BINARY_DIR}/cmake-modules/cotire.cmake"")
    file(DOWNLOAD ""https://github.com/sakra/cotire/raw/master/CMake/cotire.cmake"" ""${CMAKE_BINARY_DIR}/cmake-modules/cotire.cmake"")
endif()

find_package(SDL2 REQUIRED)
target_include_directories(zenith SYSTEM PUBLIC ${SDL2_INCLUDE_DIR})
target_link_libraries(zenith ${SDL2_LIBRARY})

include(cotire)
cotire(zenith)
",3.1,3.1
43437,InsightSoftwareConsortium,ITKBridgeJavaScript,False,False,False,False,False,29,JavaScript,2020-05-14 15:58:18+00:00,2015-11-09 03:20:17+00:00,64,869,"cmake_minimum_required(VERSION 3.10.2)
project(BridgeJavaScript)

set(BridgeJavaScript_LIBRARIES BridgeJavaScript)

option(BUILD_ITK_JS_IO_MODULES ""Build the itk.js ImageIO's and MeshIO's"" OFF)
if(BUILD_ITK_JS_IO_MODULES)
  # This list should be ordered from approximately most commonly to least
  # commonly used modules.
  set(BridgeJavaScript_ImageIOModules
    ""ITKIOPNG""
    ""ITKIOMeta""
    ""ITKIODCMTK""
    ""ITKIOTIFF""
    ""ITKIONIFTI""
    ""ITKIOJPEG""
    ""ITKIONRRD""
    ""ITKIOVTK""
    ""ITKIOBMP""
    ""ITKIOHDF5""
    ""ITKIOMINC""
    ""ITKIOMRC""
    ""ITKIOLSM""
    ""MGHIO""
    ""ITKIOBioRad""
    ""ITKIOGIPL""
    ""ITKIOGE""
    ""ITKIOGDCM""
    CACHE STRING
    ""String delimited list of ITK image IO modules to support."")
  set(imageios_ITKIOBioRad itkBioRadImageIO)
  set(imageios_ITKIOBMP itkBMPImageIO)
  set(imageios_ITKIOHDF5 itkHDF5ImageIO)
  set(imageios_ITKIOGE itkGEAdwImageIO itkGE4ImageIO itkGE5ImageIO)
  set(imageios_ITKIOGIPL itkGiplImageIO)
  set(imageios_ITKIOPNG itkPNGImageIO)
  set(imageios_ITKIOLSM itkLSMImageIO)
  set(imageios_ITKIOMeta itkMetaImageIO)
  set(imageios_ITKIOMINC itkMINCImageIO)
  set(imageios_MGHIO itkMGHImageIO)
  set(imageios_ITKIOMRC itkMRCImageIO)
  set(imageios_ITKIONIFTI itkNiftiImageIO)
  set(imageios_ITKIONRRD itkNrrdImageIO)
  set(imageios_ITKIOGDCM itkGDCMImageIO)
  set(imageios_ITKIODCMTK itkDCMTKImageIO)
  set(imageios_ITKIOJPEG itkJPEGImageIO)
  set(imageios_ITKIOTIFF itkTIFFImageIO)
  set(imageios_ITKIOVTK itkVTKImageIO)
  set(imageios_BridgeJavaScript itkJSONImageIO)

  set(BridgeJavaScript_MeshIOModules
    ""ITKIOMeshBYU""
    ""ITKIOMeshFreeSurfer""
    ""ITKIOMeshOBJ""
    ""ITKIOMeshOFF""
    ""IOMeshSTL""
    ""ITKIOMeshVTK""
    CACHE STRING
    ""String delimited list of ITK mesh IO modules to support."")
  set(meshios_ITKIOMeshBYU itkBYUMeshIO)
  set(meshios_ITKIOMeshFreeSurfer itkFreeSurferAsciiMeshIO itkFreeSurferBinaryMeshIO)
  set(meshios_ITKIOMeshVTK itkVTKPolyDataMeshIO)
  set(meshios_ITKIOMeshOBJ itkOBJMeshIO)
  set(meshios_ITKIOMeshOFF itkOFFMeshIO)
  set(meshios_IOMeshSTL itkSTLMeshIO)

  set(PolyDataIOPipelines
    ""VTKLegacyFileReader""
    ""VTKXMLFileReader""
    ""VTKExodusFileReader""
    CACHE STRING
    ""String delimited list of VTK PolyData IO pipelines to support."")
  set(polydataios_VTKExodusFileReader IOExodus CommonDataModel FiltersCore FiltersGeometry)
  set(polydataios_VTKLegacyFileReader IOLegacy FiltersGeometry)
  set(polydataios_VTKXMLFileReader IOXML FiltersGeometry IOLegacy)
endif()


if(NOT ITK_SOURCE_DIR)
  find_package(ITK 5.0 REQUIRED)
  list(APPEND CMAKE_MODULE_PATH ${ITK_CMAKE_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  include(ITKModuleExternal)
else()
  itk_module_impl()
endif()
",3.10.2,3.1
43573,lirios,text,False,False,False,False,False,8,C++,2020-05-18 00:08:10+00:00,2016-02-03 20:12:22+00:00,60,391,"cmake_minimum_required(VERSION 3.10.0)

project(""Text""
    VERSION ""0.5.0""
    DESCRIPTION ""Text editor""
    LANGUAGES CXX C
)

## Shared macros and functions:
if(TEXT_WITH_FLUID AND EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/fluid/CMakeLists.txt"")
    set(LIRI_LOCAL_ECM TRUE)
    set(FLUID_WITH_DOCUMENTATION FALSE)
    set(FLUID_WITH_DEMO FALSE)
endif()
if(LIRI_LOCAL_ECM)
    list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/fluid/cmake/shared/modules"")
else()
    find_package(LiriCMakeShared ""1.0.0"" REQUIRED NO_MODULE)
    list(APPEND CMAKE_MODULE_PATH ""${LCS_MODULE_PATH}"")
endif()

## Set minimum versions required.
set(QT_MIN_VERSION ""5.10.0"")

## Liri specific setup common for all modules:
include(LiriSetup)

## Features:
option(TEXT_WITH_FLUID ""Build together with Fluid"" OFF)
add_feature_info(""Text::WithFluid"" TEXT_WITH_FLUID ""Build together with Fluid"")

## Find Qt 5.
find_package(Qt5 ""${QT_MIN_VERSION}""
    CONFIG REQUIRED
    COMPONENTS
        Core
        Gui
        Widgets
        Svg
        Qml
        Quick
        QuickControls2
        Sql
        LinguistTools
)

## Add subdirectories:
if(TEXT_WITH_FLUID)
    add_subdirectory(fluid)
endif()
add_subdirectory(data)
add_subdirectory(src)
",3.10.0,3.1
43677,pBlueG,SA-MP-MySQL,False,False,False,False,False,9,C++,2020-03-27 21:28:19+00:00,2013-11-29 19:25:32+00:00,135,623,"cmake_minimum_required(VERSION 3.1)
project(mysql)

set(MYSQL_PLUGIN_VERSION ""R41-4"")

option (BUILD_TESTS ""Build tests"" OFF)

list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/cmake"")
list(APPEND CMAKE_MODULE_PATH ""${PROJECT_SOURCE_DIR}/libs/cmake"")

if(UNIX)
	#force 32bit compilation and hide non-exported symbols
	set(CMAKE_CXX_FLAGS ""-m32 -fvisibility=hidden"")
	set(CMAKE_C_FLAGS ""-m32 -fvisibility=hidden"")
	set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS OFF)
endif()


find_package(MySQLCAPI REQUIRED)

set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.57 QUIET)
if(NOT Boost_FOUND)
	set(BOOST_ROOT ""${BOOST_ROOT}"" CACHE PATH ""Set the Boost root folder."")
	mark_as_advanced(CLEAR BOOST_ROOT)
	message(FATAL_ERROR ""Could NOT find Boost; specify additional path."")
endif()
mark_as_advanced(BOOST_ROOT Boost_DIR)

add_subdirectory(libs/fmt)
mark_as_advanced(FMT_DOC FMT_INSTALL FMT_PEDANTIC FMT_TEST FMT_USE_CPP11)

find_package(log-core REQUIRED CONFIG)


add_subdirectory(src)
",3.1,3.1
43760,stack-of-tasks,sot-dynamic-pinocchio,False,False,False,False,False,32,C++,2020-05-11 18:04:32+00:00,2015-04-13 08:36:15+00:00,2,489,"# Copyright 2010, François Bleibel, Olivier Stasse, JRL, CNRS/AIST

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

# Project properties
SET(PROJECT_ORG stack-of-tasks)
SET(PROJECT_NAME sot-dynamic-pinocchio)
SET(PROJECT_DESCRIPTION ""pinocchio bindings for dynamic-graph."")
SET(PROJECT_URL ""https://github.com/${PROJECT_ORG}/${PROJECT_NAME}"")
SET(PROJECT_SUFFIX ""-v3"")

# Project options
OPTION(BUILD_PYTHON_INTERFACE ""Build the python bindings"" ON)
OPTION(INSTALL_PYTHON_INTERFACE_ONLY ""Install *ONLY* the python bindings"" OFF)
OPTION(SUFFIX_SO_VERSION ""Suffix library name with its version"" ON)

# Project configuration
IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  SET(PROJECT_USE_CMAKE_EXPORT TRUE)
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
SET(CUSTOM_HEADER_DIR ""sot/dynamic-pinocchio"")
SET(CXX_DISABLE_WERROR TRUE)
SET(DOXYGEN_USE_MATHJAX YES)

# JRL-cmakemodule setup
INCLUDE(cmake/base.cmake)
INCLUDE(cmake/boost.cmake)
INCLUDE(cmake/python.cmake)
INCLUDE(cmake/sphinx.cmake)

# Project definition
COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})

# Project dependencies
ADD_PROJECT_DEPENDENCY(sot-tools REQUIRED PKG_CONFIG_REQUIRES sot-tools)

SET(BOOST_COMPONENTS filesystem system unit_test_framework)

IF(BUILD_PYTHON_INTERFACE)
  FINDPYTHON()
  STRING(REGEX REPLACE ""-"" ""_"" PYTHON_DIR ${CUSTOM_HEADER_DIR})
  ADD_PROJECT_DEPENDENCY(dynamic-graph-python REQUIRED
    PKG_CONFIG_REQUIRES dynamic-graph-python)
  SET(BOOST_COMPONENTS ${BOOST_COMPONENTS} python)
ENDIF(BUILD_PYTHON_INTERFACE)

SEARCH_FOR_BOOST()

# Main Library
SET(${PROJECT_NAME}_HEADERS
  include/${CUSTOM_HEADER_DIR}/dynamic-pinocchio.h
  include/${CUSTOM_HEADER_DIR}/integrator-force-exact.h
  include/${CUSTOM_HEADER_DIR}/zmpreffromcom.h
  include/${CUSTOM_HEADER_DIR}/integrator-force.h
  include/${CUSTOM_HEADER_DIR}/force-compensation.h
  include/${CUSTOM_HEADER_DIR}/mass-apparent.h
  include/${CUSTOM_HEADER_DIR}/waist-attitude-from-sensor.h
  include/${CUSTOM_HEADER_DIR}/matrix-inertia.h
  include/${CUSTOM_HEADER_DIR}/integrator-force-rk4.h
  include/${CUSTOM_HEADER_DIR}/angle-estimator.h
  )

SET(${PROJECT_NAME}_SOURCES
  src/sot-dynamic-pinocchio
  )

ADD_LIBRARY(${PROJECT_NAME} SHARED
  ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:include>)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${Boost_LIBRARIES}
  sot-core::sot-core)

IF(SUFFIX_SO_VERSION)
  SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SOVERSION ${PROJECT_VERSION})
ENDIF(SUFFIX_SO_VERSION)

IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
  INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)
ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(python)
ADD_SUBDIRECTORY(tests)

PKG_CONFIG_APPEND_LIBS(${PROJECT_NAME})
",3.1,3.1
43915,Tessil,hopscotch-map,False,False,False,False,False,4,C++,2020-05-17 12:34:50+00:00,2016-08-15 00:05:57+00:00,393,264,"cmake_minimum_required(VERSION 3.1)
include(GNUInstallDirs)


project(tsl-hopscotch-map VERSION 2.2.1)

add_library(hopscotch_map INTERFACE)
# Use tsl::hopscotch_map as target, more consistent with other libraries conventions (Boost, Qt, ...)
add_library(tsl::hopscotch_map ALIAS hopscotch_map)

target_include_directories(hopscotch_map INTERFACE
                           ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>""
                           ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"")

list(APPEND headers ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/bhopscotch_map.h""
                    ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/bhopscotch_set.h""
                    ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/hopscotch_growth_policy.h""
                    ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/hopscotch_hash.h""
                    ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/hopscotch_map.h""
                    ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl/hopscotch_set.h"")
target_sources(hopscotch_map INTERFACE ""$<BUILD_INTERFACE:${headers}>"")

if(MSVC)
    target_sources(hopscotch_map INTERFACE
                   ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/tsl-hopscotch-map.natvis>""
                   ""$<INSTALL_INTERFACE:${CMAKE_INSTALL_DATAROOTDIR}/tsl-hopscotch-map.natvis>"")
endif()




# Installation (only compatible with CMake version >= 3.3)
if(${CMAKE_VERSION} VERSION_GREATER ""3.2"")
    include(CMakePackageConfigHelpers)

    ## Install include directory and potential natvis file
    install(DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/include/tsl""
            DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}"")

    if(MSVC)
        install(FILES ""${CMAKE_CURRENT_SOURCE_DIR}/tsl-hopscotch-map.natvis""
                DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}"")
    endif()



    ## Create and install tsl-hopscotch-mapConfig.cmake
    configure_package_config_file(""${CMAKE_CURRENT_SOURCE_DIR}/cmake/tsl-hopscotch-mapConfig.cmake.in""
                                  ""${CMAKE_CURRENT_BINARY_DIR}/tsl-hopscotch-mapConfig.cmake""
                                  INSTALL_DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/cmake/tsl-hopscotch-map"")

    install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/tsl-hopscotch-mapConfig.cmake""
            DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/cmake/tsl-hopscotch-map"")



    ## Create and install tsl-hopscotch-mapTargets.cmake
    install(TARGETS hopscotch_map
            EXPORT tsl-hopscotch-mapTargets)

    install(EXPORT tsl-hopscotch-mapTargets
            NAMESPACE tsl::
            DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/cmake/tsl-hopscotch-map"")



    ## Create and install tsl-hopscotch-mapConfigVersion.cmake
    # tsl-hopscotch-map is header-only and does not depend on the architecture.
    # Remove CMAKE_SIZEOF_VOID_P from tsl-hopscotch-mapConfigVersion.cmake so that a
    # tsl-hopscotch-mapConfig.cmake generated for a 64 bit target can be used for 32 bit
    # targets and vice versa.
    set(CMAKE_SIZEOF_VOID_P_BACKUP ${CMAKE_SIZEOF_VOID_P})
    unset(CMAKE_SIZEOF_VOID_P)
    write_basic_package_version_file(""${CMAKE_CURRENT_BINARY_DIR}/tsl-hopscotch-mapConfigVersion.cmake""
                                     COMPATIBILITY SameMajorVersion)
    set(CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P_BACKUP})

    install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/tsl-hopscotch-mapConfigVersion.cmake""
            DESTINATION ""${CMAKE_INSTALL_DATAROOTDIR}/cmake/tsl-hopscotch-map"")
endif()
",3.1,3.1
44070,RetroView,hecl,False,False,False,False,False,7,C++,2020-04-22 22:03:05+00:00,2015-05-15 22:42:59+00:00,7,1284,"if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
cmake_minimum_required(VERSION 3.10 FATAL_ERROR) # because of c++17
project(hecl)

if(MSVC)
  add_compile_options(
    # Disable exceptions
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
    /wd4267 /wd4244
  )
  add_compile_definitions(UNICODE=1 _UNICODE=1 _CRT_SECURE_NO_WARNINGS=1)
else()
  set(CMAKE_CXX_STANDARD 20)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  add_compile_options(
    # Disable exceptions
    $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>
    -Wno-multichar
  )
endif()
endif()

include(ApplicationTools.cmake)

configure_file(DataSpecRegistry.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/DataSpecRegistry.hpp @ONLY)

unset(HECL_APPLICATION_REPS_INCLUDES_LOCAL)
foreach(theHeader ${HECL_APPLICATION_REPS_INCLUDES_LIST})
  set(HECL_APPLICATION_REPS_INCLUDES_LOCAL ""${HECL_APPLICATION_REPS_INCLUDES_LOCAL}#include \""${theHeader}\""\n"")
endforeach()
unset(HECL_APPLICATION_PIPELINE_REPS_UNIVERSAL_LOCAL)
foreach(name ${HECL_APPLICATION_PIPELINE_REPS_UNIVERSAL})
  set(HECL_APPLICATION_PIPELINE_REPS_UNIVERSAL_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_UNIVERSAL_LOCAL}UNIVERSAL_PIPELINES_${name} \\\n"")
endforeach()
unset(HECL_APPLICATION_PIPELINE_REPS_OPENGL_LOCAL)
unset(HECL_APPLICATION_PIPELINE_REPS_VULKAN_LOCAL)
unset(HECL_APPLICATION_PIPELINE_REPS_D3D11_LOCAL)
unset(HECL_APPLICATION_PIPELINE_REPS_METAL_LOCAL)
unset(HECL_APPLICATION_PIPELINE_REPS_NX_LOCAL)
foreach(name ${HECL_APPLICATION_PIPELINE_REPS})
  set(HECL_APPLICATION_PIPELINE_REPS_OPENGL_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_OPENGL_LOCAL}OPENGL_PIPELINES_${name} \\\n"")
  set(HECL_APPLICATION_PIPELINE_REPS_VULKAN_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_VULKAN_LOCAL}VULKAN_PIPELINES_${name} \\\n"")
  set(HECL_APPLICATION_PIPELINE_REPS_D3D11_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_D3D11_LOCAL}D3D11_PIPELINES_${name} \\\n"")
  set(HECL_APPLICATION_PIPELINE_REPS_METAL_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_METAL_LOCAL}METAL_PIPELINES_${name} \\\n"")
  set(HECL_APPLICATION_PIPELINE_REPS_NX_LOCAL ""${HECL_APPLICATION_PIPELINE_REPS_NX_LOCAL}NX_PIPELINES_${name} \\\n"")
endforeach()

unset(HECL_APPLICATION_STAGE_REPS_LOCAL)
foreach(name ${HECL_APPLICATION_STAGE_REPS})
  set(HECL_APPLICATION_STAGE_REPS_LOCAL ""${HECL_APPLICATION_STAGE_REPS_LOCAL}STAGES_${name}(P, S) \\\n"")
endforeach()

configure_file(include/hecl/ApplicationReps.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/ApplicationReps.hpp @ONLY)

add_subdirectory(extern)
add_subdirectory(bintoc)

if(NOT TARGET bintoc)
  # Use native if cross compiling
  find_package(hecl-bintoc REQUIRED)
endif()

if(NOT TARGET atdna)
  # Import native atdna if cross-compiling
  find_package(atdna REQUIRED)
  if(NOT TARGET atdna)
    message(FATAL_ERROR ""atdna required for building hecl; please verify LLVM installation"")
  endif()
endif()

add_subdirectory(lib)
add_subdirectory(blender)
add_subdirectory(driver)
install(DIRECTORY include/hecl DESTINATION include/hecl)
",3.10,3.1
44082,KDE,print-manager,False,False,False,False,False,38,C++,2020-05-15 12:58:39+00:00,2015-09-18 16:26:03+00:00,3,949,"cmake_minimum_required(VERSION 3.1)

# KDE Application Version, managed by release script
set (RELEASE_SERVICE_VERSION_MAJOR ""20"")
set (RELEASE_SERVICE_VERSION_MINOR ""07"")
set (RELEASE_SERVICE_VERSION_MICRO ""70"")
set (RELEASE_SERVICE_VERSION ""${RELEASE_SERVICE_VERSION_MAJOR}.${RELEASE_SERVICE_VERSION_MINOR}.${RELEASE_SERVICE_VERSION_MICRO}"")

project(print-manager VERSION ${RELEASE_SERVICE_VERSION})

set(QT_MIN_VERSION ""5.9.0"")
set(KF5_MIN_VERSION ""5.70.0"")



################# set KDE specific information #################

find_package(ECM ${KF5_MIN_VERSION} REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH} ${ECM_KDE_MODULE_DIR})

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)

include(ECMPackageConfigHelpers)
include(ECMOptionalAddSubdirectory)
include(FeatureSummary)

find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
    Core
    DBus
    Network
    Widgets
    Qml
    Quick
)

find_package(CUPS ""1.5"" REQUIRED)

find_package(KF5 ${KF5_MIN_VERSION} REQUIRED Config ConfigWidgets CoreAddons DBusAddons IconThemes I18n KCMUtils KIO
             Notifications Plasma WidgetsAddons WindowSystem)

find_package(KF5Kirigami2 ${KF5_MIN_VERSION} CONFIG)
set_package_properties(KF5Kirigami2 PROPERTIES
    DESCRIPTION ""A QtQuick based components set""
    TYPE RUNTIME
)

find_package(CupsSmb)
set_package_properties(CupsSmb PROPERTIES
    TYPE RUNTIME
    DESCRIPTION ""SMB backend for CUPS (aka smbspool)""
    PURPOSE ""Required for CUPS to be able to print to printers shared over SMB""
    URL ""https://samba.org""
)

add_definitions(
    -DQT_DISABLE_DEPRECATED_BEFORE=0x050900
    -DQT_USE_FAST_OPERATOR_PLUS
    -DQT_NO_URL_CAST_FROM_STRING
    -DQT_NO_CAST_FROM_BYTEARRAY
    -DQT_NO_CAST_FROM_ASCII
)

remove_definitions(-DQT_NO_KEYWORDS)

# Generate config.h
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake
               ${CMAKE_CURRENT_BINARY_DIR}/config.h)


include_directories(${CMAKE_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/libkcups
    ${CUPS_INCLUDE_DIR}
)

install(FILES org.kde.print-manager.metainfo.xml DESTINATION ""${KDE_INSTALL_METAINFODIR}"")

add_definitions(-DTRANSLATION_DOMAIN=""print-manager"")

add_subdirectory(libkcups)
add_subdirectory(configure-printer)
add_subdirectory(add-printer)
add_subdirectory(printer-manager-kcm)
add_subdirectory(printqueue)
add_subdirectory(print-manager-kded)
add_subdirectory(plasmoid)
add_subdirectory(declarative-plugins)

feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1,3.1
44091,fixstars,libSGM,False,False,False,False,False,10,Cuda,2019-10-16 09:15:30+00:00,2016-02-12 07:43:44+00:00,269,457,"cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CUDA_ARCH ""-arch=sm_50"" CACHE STRING ""Value of the NVCC -arch option."")
if(${CMAKE_VERSION} VERSION_EQUAL 3.7 OR ${CMAKE_VERSION} VERSION_GREATER 3.7)
  option(AUTO_DETECT_ARCH ""Detect local GPU compute arch automatically"" ON)
endif()

option(ENABLE_ZED_DEMO      ""Build a Demo using ZED Camera"" OFF)
option(ENABLE_SAMPLES       ""Build samples"" OFF)
option(ENABLE_TESTS         ""Test library"" OFF)
option(LIBSGM_SHARED        ""Build a shared library"" OFF)
option(BUILD_OPENCV_WRAPPER ""Make library compatible with cv::Mat and cv::cuda::GpuMat of OpenCV"" OFF)

if(WIN32)
  set(ZED_SDK_LIB ""C:\\Program Files (x86)\\ZED SDK\\lib\\sl_zed64.lib"" CACHE STRING ""ZED SDK library(sl_zed**.llb) path."")
  set(ZED_SDK_INCLUDE_DIR ""C:\\Program Files (x86)\\ZED SDK\\include"" CACHE STRING ""ZED SDK include path."")
else()
  set(ZED_SDK_LIB ""/usr/local/zed/lib/libsl_zed.so"" CACHE STRING ""ZED SDK library(sl_zed**.llb) path."")
  set(ZED_SDK_INCLUDE_DIR ""/usr/local/zed/include"" CACHE STRING ""ZED SDK include path."")
endif()

project(libSGM VERSION 2.7.0)

if(BUILD_OPENCV_WRAPPER)
	find_package(OpenCV REQUIRED core)
	include_directories(${OpenCV_INCLUDE_DIRS})
endif()

configure_file(${PROJECT_SOURCE_DIR}/include/libsgm_config.h.in
               ${PROJECT_SOURCE_DIR}/include/libsgm_config.h
)

add_subdirectory(src)

if(ENABLE_SAMPLES)
    add_subdirectory(sample/image)
    add_subdirectory(sample/movie)
    add_subdirectory(sample/reprojection)
    add_subdirectory(sample/benchmark)
    if(BUILD_OPENCV_WRAPPER)
        add_subdirectory(sample/image_cv_gpumat)
    endif()
endif()

if(ENABLE_TESTS)
	add_subdirectory(test)
endif()

if(ENABLE_ZED_DEMO)
	add_subdirectory(sample/zed)
endif()
",3.1,3.1
44209,craflin,umdoc,False,False,False,False,False,1,C++,2020-03-28 21:26:13+00:00,2016-09-29 19:56:15+00:00,7,251,"cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0048 NEW)

project(umdoc VERSION 0.2.1)

set(CDEPLOY_NO_DEBUG_BUILD True)
set(CDEPLOY_NO_COMPILER True)

include(CDeploy)

enable_testing()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "".cmake"")

if(MSVC)
    set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} /MT"")
endif()

add_subdirectory(Ext)
add_subdirectory(Src)
add_subdirectory(Doc)
add_subdirectory(Examples)

install(FILES NOTICE LICENSE DESTINATION .)

if(NOT WIN32)
    list(APPEND CPACK_GENERATOR ""DEB"")
    set(CPACK_PROJECT_CONFIG_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/CPackConfig.txt"")
    set(CPACK_STRIP_FILES True)
    install(SCRIPT CPackInstall.txt)
endif()

include(CPack)

if(WIN32)
    deploy_export(umdoc EXECUTABLE
        IMPORTED_LOCATION umdoc.exe
    )
else()
    deploy_export(umdoc EXECUTABLE
        IMPORTED_LOCATION umdoc
    )
endif()

install_deploy_export()
",3.1,3.1
44292,rncbc,samplv1,False,False,False,False,False,4,C++,2020-05-05 08:10:02+00:00,2015-09-22 14:47:12+00:00,20,1149,"project(SAMPLV1)

cmake_minimum_required(VERSION 3.1)

set (VERSION ""0.9.14"")

set (CONFIG_VERSION ${VERSION})
execute_process (
  COMMAND git describe --tags --dirty --abbrev=6
  OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
  RESULT_VARIABLE GIT_DESCRIBE_RESULT
  OUTPUT_STRIP_TRAILING_WHITESPACE)
if (GIT_DESCRIBE_RESULT EQUAL 0)
  set (VERSION ""${GIT_DESCRIBE_OUTPUT}"")
  string (REGEX REPLACE ""^[^_]+""   """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""^[_vV]+""  """" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""-g""   ""git."" VERSION ""${VERSION}"")
  string (REGEX REPLACE ""[_|-]+""  ""."" VERSION ""${VERSION}"")
  execute_process (
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_REVPARSE_OUTPUT
    RESULT_VARIABLE GIT_REVPARSE_RESULT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (GIT_REVPARSE_RESULT EQUAL 0 AND NOT GIT_REVPARSE_OUTPUT STREQUAL ""master"")
    set (VERSION ""${VERSION} [${GIT_REVPARSE_OUTPUT}]"")
  endif ()
else ()
  set (VERSION ""${VERSION}"")
endif ()

set (PACKAGE_NAME ""samplv1"")
set (PACKAGE_VERSION ""${VERSION}"")
set (PACKAGE_BUGREPORT ""rncbc@rncbc.org"")
set (PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}"")
set (PACKAGE_TARNAME ""samplv1"")

set (CONFIG_BUILD_VERSION ""${PACKAGE_VERSION}"")

if (CMAKE_BUILD_TYPE)
  set (CONFIG_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else ()
  set (CONFIG_BUILD_TYPE ""release"")
endif ()

set (CONFIG_DEBUG 0)
if (CONFIG_BUILD_TYPE MATCHES ""debug"")
  set (CONFIG_DEBUG 1)
endif ()

set (CONFIG_PREFIX ""${CMAKE_INSTALL_PREFIX}"")

include (GNUInstallDirs)
set (CONFIG_BINDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"")
set (CONFIG_LIBDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"")
set (CONFIG_DATADIR ""${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"")
set (CONFIG_MANDIR  ""${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}"")


# Enable JACK standalone build.
option (CONFIG_JACK ""Enable JACK stand-alone build (default=yes)"" 1)

# Enable JACK session support.
option (CONFIG_JACK_SESSION ""Enable JACK session support (default=yes)"" 1)

# Enable JACK MIDI support option.
option (CONFIG_JACK_MIDI ""Enable JACK MIDI support (default=yes)"" 1)

# Enable ALSA MIDI support option.
option (CONFIG_ALSA_MIDI ""Enable ALSA MIDI support (default=yes)"" 1)

# Enable LV2 plugin build.
option (CONFIG_LV2 ""Enable LV2 plug-in build (default=yes)"" 1)

option (CONFIG_LV2_UI_X11 ""Enable LV2 plug-in X11 UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_EXTERNAL ""Enable LV2 plug-in External UI support (default=yes)"" 1)

option (CONFIG_LV2_UI_IDLE ""Enable LV2 UI Idle interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_SHOW ""Enable LV2 UI Show interface support (default=yes)"" 1)

option (CONFIG_LV2_UI_RESIZE ""Enable LV2 UI Resize interface support (default=yes)"" 1)

option (CONFIG_LV2_PROGRAMS ""Enable LV2 plug-in Programs support (default=yes)"" 1)

option (CONFIG_LV2_PATCH ""Enable LV2 plug-in Patch support (default=yes)"" 1)

option (CONFIG_LV2_PORT_EVENT ""Enable LV2 plug-in Port-event support (EXPERIMENTAL) (default=no)"" 0)


# Enable liblo availability.
option (CONFIG_LIBLO ""Enable liblo interface (default=yes)"" 1)

# Enable NSM support.
option (CONFIG_NSM ""Enable NSM support (default=yes)"" 1)


# Fix for new CMAKE_REQUIRED_LIBRARIES policy.
if (POLICY CMP0075)
  cmake_policy (SET CMP0075 NEW)
endif ()

# Check for Qt
find_package (Qt5 REQUIRED COMPONENTS Core Gui Widgets Xml)

#find_package (Qt5LinguistTools)

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckIncludeFileCXX)
include (CheckFunctionExists)
include (CheckLibraryExists)

# Make sure we get some subtle optimizations out there...
add_compile_options (-ffast-math)

# Checks for header files.
if (UNIX AND NOT APPLE)
  check_include_files (""fcntl.h;unistd.h;signal.h"" HAVE_SIGNAL_H)
endif ()


# Find package modules
find_package (PkgConfig REQUIRED)

# Check for SNDFILE libraries.
pkg_check_modules (SNDFILE REQUIRED sndfile)
if (SNDFILE_FOUND)
  set (CONFIG_SNDFILE 1)
  include_directories (${SNDFILE_INCLUDE_DIRS})
  link_directories (${SNDFILE_LIBRARY_DIRS})
  link_libraries (${SNDFILE_LIBRARIES})
# set (CMAKE_REQUIRED_LIBRARIES ""${SNDFILE_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
else ()
  message (FATAL_ERROR ""*** SNDFILE library not found."")
  set (CONFIG_SNDFILE 0)
endif ()

# Check for JACK libraries.
if (CONFIG_JACK)
  pkg_check_modules (JACK jack>=0.100.0)
  if (JACK_FOUND)
    include_directories (${JACK_INCLUDE_DIRS})
    link_directories (${JACK_LIBRARY_DIRS})
  # link_libraries (${JACK_LIBRARIES})
    set (CMAKE_REQUIRED_LIBRARIES ""${JACK_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for JACK MIDI headers availability.
    if (CONFIG_JACK_MIDI)
      check_include_file (jack/midiport.h HAVE_JACK_MIDIPORT_H)
      if (NOT HAVE_JACK_MIDIPORT_H)
        set (CONFIG_JACK_MIDI 0)
      endif ()
    endif ()
    # Check for JACK session headers availability.
    if (CONFIG_JACK_SESSION)
      check_include_file (jack/session.h HAVE_JACK_SESSION_H)
      if (NOT HAVE_JACK_SESSION_H)
        set (CONFIG_JACK_SESSION 0)
      endif ()
    endif ()
    # Check for JACK session event callback availability.
    if (CONFIG_JACK_SESSION)
      check_function_exists (jack_set_session_callback CONFIG_JACK_SESSION)
    endif ()
    # Check for ALSA libraries.
    if (CONFIG_ALSA_MIDI)
      pkg_check_modules (ALSA alsa)
      set (CONFIG_ALSA_MIDI ${ALSA_FOUND})
      if (CONFIG_ALSA_MIDI)
        include_directories (${ALSA_INCLUDE_DIRS})
        link_directories (${ALSA_LIBRARY_DIRS})
        link_libraries (${ALSA_LIBRARIES})
      # set (CMAKE_REQUIRED_LIBRARIES ""${ALSA_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
      else ()
        message (WARNING ""*** ALSA library not found."")
      endif ()
    endif ()
  else ()
    message (WARNING ""*** JACK library not found."")
    set (CONFIG_JACK 0)
  endif ()
endif ()

if (NOT CONFIG_JACK)
  set (CONFIG_JACK_SESSION 0)
  set (CONFIG_JACK_MIDI 0)
  set (CONFIG_ALSA_MIDI 0)
  set (CONFIG_LIBLO 0)
  set (CONFIG_NSM 0)
endif ()

# Check for LIBLO libraries.
if (CONFIG_LIBLO)
  pkg_check_modules (LIBLO liblo)
  if (LIBLO_FOUND)
    include_directories (${LIBLO_INCLUDE_DIRS})
    link_directories (${LIBLO_LIBRARY_DIRS})
    link_libraries (${LIBLO_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LIBLO_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
  else ()
    message (WARNING ""*** LIBLO library not found."")
    set (CONFIG_LIBLO 0)
  endif ()
endif ()

# Check for LV2 support.
if (CONFIG_LV2)
  pkg_check_modules (LV2 lv2)
  if (LV2_FOUND)
    include_directories (${LV2_INCLUDE_DIRS})
    link_directories (${LV2_LIBRARY_DIRS})
    link_libraries (${LV2_LIBRARIES})
  # set (CMAKE_REQUIRED_LIBRARIES ""${LV2_LIBRARIES};${CMAKE_REQUIRED_LIBRARIES}"")
    # Check for LV2 Atom support.
    check_include_file (lv2/lv2plug.in/ns/ext/atom/atom.h HAVE_LV2_ATOM_H)
    if (NOT HAVE_LV2_ATOM_H)
      set (CONFIG_LV2_ATOM 0)
    else ()
      set (CONFIG_LV2_ATOM 1)
    endif ()
    set (CONFIG_LV2_ATOM_FORGE_OBJECT ${CONFIG_LV2_ATOM})
    set (CONFIG_LV2_ATOM_FORGE_KEY ${CONFIG_LV2_ATOM})
    # Check for LV2 UI support.
    check_include_file (lv2/lv2plug.in/ns/extensions/ui/ui.h HAVE_LV2_UI_H)
    if (NOT HAVE_LV2_UI_H)
      set (CONFIG_LV2_UI 0)
    else ()
      set (CONFIG_LV2_UI 1)
    endif ()
    if (NOT CONFIG_LV2_UI)
      set (CONFIG_LV2_UI_X11 0)
      set (CONFIG_LV2_UI_EXTERNAL 0)
      set (CONFIG_LV2_UI_IDLE 0)
      set (CONFIG_LV2_UI_SHOW 0)
      set (CONFIG_LV2_UI_RESIZE 0)
    endif ()
  else ()
    message (WARNING ""*** LV2 SDK not found."")
    set (CONFIG_LV2 0)
  endif ()
endif ()

# Check for LV2 headers.
if (CONFIG_LV2)
  set (LV2_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/src/lv2)
  set (CMAKE_REQUIRED_INCLUDES ""${LV2_INCLUDES};${CMAKE_REQUIRED_INCLUDES}"")
  include_directories (${LV2_INCLUDES})
else ()
  set (CONFIG_LV2_UI_X11 0)
  set (CONFIG_LV2_UI_EXTERNAL 0)
  set (CONFIG_LV2_UI_IDLE 0)
  set (CONFIG_LV2_UI_SHOW 0)
  set (CONFIG_LV2_UI_RESIZE 0)
  set (CONFIG_LV2_PROGRAMS 0)
  set (CONFIG_LV2_PATCH 0)
endif ()

if (CONFIG_LV2_UI_EXTERNAL)
  check_include_file (lv2_external_ui.h HAVE_LV2_EXTERNAL_UI_H)
  if (NOT HAVE_LV2_EXTERNAL_UI_H)
    set (CONFIG_LV2_UI_EXTERNAL 0)
  endif ()
endif ()

if (CONFIG_LV2_PROGRAMS)
  check_include_file (lv2_programs.h HAVE_LV2_PROGRAMS_H)
  if (NOT HAVE_LV2_PROGRAMS_H)
    set (CONFIG_LV2_PROGRAMS 0)
  endif ()
endif ()

if (CONFIG_LV2_PATCH)
  check_include_file (lv2/lv2plug.in/ns/ext/patch/patch.h HAVE_LV2_PATCH_H)
  if (NOT HAVE_LV2_PATCH_H)
    set (CONFIG_LV2_PATCH 0)
  endif ()
endif ()


add_subdirectory (src)


configure_file (samplv1.spec.in samplv1.spec IMMEDIATE @ONLY)

install (FILES samplv1.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
install (FILES samplv1.fr.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/fr/man1 RENAME samplv1.1)

# Configuration status
macro (SHOW_OPTION text value)
  if (${value})
    message (""${text}: yes"")
  else ()
    message (""${text}: no"")
  endif ()
endmacro ()


message   (""\n  ${PACKAGE_NAME} ${PACKAGE_VERSION}"")
message   (""\n  Build target . . . . . . . . . . . . . . . . . . .: ${CONFIG_BUILD_TYPE}\n"")
show_option (""  JACK stand-alone build . . . . . . . . . . . . . ."" CONFIG_JACK)
show_option (""  JACK session support . . . . . . . . . . . . . . ."" CONFIG_JACK_SESSION)
show_option (""  JACK MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_JACK_MIDI)
show_option (""  ALSA MIDI support  . . . . . . . . . . . . . . . ."" CONFIG_ALSA_MIDI)
show_option (""  LV2 plug-in build  . . . . . . . . . . . . . . . ."" CONFIG_LV2)
show_option (""  LV2 plug-in X11 UI support   . . . . . . . . . . ."" CONFIG_LV2_UI_X11)
show_option (""  LV2 plug-in External UI support  . . . . . . . . ."" CONFIG_LV2_UI_EXTERNAL)
show_option (""  LV2 plug-in UI Idle interface support  . . . . . ."" CONFIG_LV2_UI_IDLE)
show_option (""  LV2 plug-in UI Show interface support  . . . . . ."" CONFIG_LV2_UI_SHOW)
show_option (""  LV2 plug-in UI Resize interface support  . . . . ."" CONFIG_LV2_UI_RESIZE)
show_option (""  LV2 plug-in Programs support . . . . . . . . . . ."" CONFIG_LV2_PROGRAMS)
show_option (""  LV2 plug-in Patch support  . . . . . . . . . . . ."" CONFIG_LV2_PATCH)
show_option (""  LV2 plug-in Port-event support (EXPERIMENTAL)  . ."" CONFIG_LV2_PORT_EVENT)
show_option (""  OSC service support (liblo)  . . . . . . . . . . ."" CONFIG_LIBLO)
show_option (""  NSM (Non Session Management) support . . . . . . ."" CONFIG_NSM)
message   (""\n  Install prefix . . . . . . . . . . . . . . . . . .: ${CMAKE_INSTALL_PREFIX}"")
message   (""\nNow type 'make', followed by 'make install' as root.\n"")
",3.1,3.1
44420,ALaDyn,piccante,False,False,False,False,False,20,C++,2019-02-28 17:01:45+00:00,2014-01-30 14:28:15+00:00,36,628,"cmake_minimum_required (VERSION 3.1)
project(piccante)
enable_language(CXX)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

## use C++11 if you can, otherwise boost 1.47+ is required for RNG)
set (CXX11_DISABLED OFF CACHE BOOL ""C++11 DISABLED"")




if (CXX11_DISABLED)
add_definitions(-DNO_CXX11)
else()
set(CMAKE_CXX_STANDARD 11)
endif()


# make sure that the default is a RELEASE
set(default_build_type ""Release"")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS ""Setting build type to '${default_build_type}' as none was specified."")
  set(CMAKE_BUILD_TYPE ""${default_build_type}"" CACHE
      STRING ""Choose the type of build."" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    ""Debug"" ""Release"" ""MinSizeRel"" ""RelWithDebInfo"")
endif()


if (NOT BUILD_EXAMPLES)
  set(BUILD_EXAMPLES OFF)
endif()

if(MSVC)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  add_definitions(-D_USE_MATH_DEFINES)
endif()

include(ExternalProject)

## use Boost if you can (mandatory if C++11 is not available); if found, a USE_BOOST flag is declared - remove definition manually if you enable C++11!
find_package(Boost 1.47.0 COMPONENTS system filesystem)
if(Boost_FOUND)
  add_definitions(-DUSE_BOOST)
  include_directories(${Boost_INCLUDE_DIR})
endif()
if(NOT Boost_FOUND AND CXX11_DISABLED)
  message(FATAL_ERROR ""Without C++11 available, the system must provide Boost Libraries 1.47+"")
endif()

find_package(MKL)
if(NOT MKL_FOUND)
  find_package(FFTW)
  if(FFTW_FOUND)
    include_directories(${FFTW_INCLUDES})
  endif()
else()
  include_directories(${MKL_INCLUDE_DIRS})
endif()
if(FFTW_MPI_FOUND OR MKL_FOUND)
  add_definitions(-D_USE_FFTW_FILTER)
endif()

#DO NOT ENABLE, since it is broken
#find_package(HDF5)
#if(HDF5_FOUND)
#  add_definitions(-DUSE_HDF5)
#  include_directories(${HDF5_INCLUDE_DIRS})
#endif()

find_package(JsonCpp)
if(NOT JsonCpp_FOUND)
  if(CXX11_DISABLED)
    message(FATAL_ERROR ""Without C++11 available, the system must provide an already built jsoncpp library"")
  endif()
  message(STATUS ""  --> JsonCpp will be built as an external project"")
  ExternalProject_Add(json-cpp
    URL https://github.com/open-source-parsers/jsoncpp/archive/1.8.1.zip
    CMAKE_ARGS
      -DCMAKE_CXX_STANDARD=11
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DJSONCPP_WITH_TESTS:BOOL=OFF
      -DCMAKE_LINKER=${CMAKE_LINKER}
      -DBoost_NO_BOOST_CMAKE=ON
      -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    # Disable the install step.
    INSTALL_COMMAND """"
    # Wrap the download, configure and build steps in a script to log the output.
    LOG_DOWNLOAD ON
    LOG_CONFIGURE ON
    LOG_BUILD ON
  )
  ExternalProject_Get_Property(json-cpp source_dir)
  ExternalProject_Get_Property(json-cpp binary_dir)
  set(JsonCpp_INCLUDE_DIR ""${source_dir}/include"")
  set(JsonCpp_LIBRARY_DIR ""${binary_dir}/src/lib_json"")
  set(JsonCpp_LIBRARY ""jsoncpp"")
endif()

find_package(MPI REQUIRED)

file(DOWNLOAD ""https://raw.githubusercontent.com/cenit/jburkardt/master/sobol/sobol.cpp""
  ${CMAKE_SOURCE_DIR}/src/sobol.cpp
  TIMEOUT 3
  STATUS download_status
)
file(DOWNLOAD ""https://raw.githubusercontent.com/cenit/jburkardt/master/sobol/sobol.hpp""
  ${CMAKE_SOURCE_DIR}/src/sobol.hpp
  TIMEOUT 3
  STATUS download_status
)
execute_process(
  COMMAND git --work-tree=. --git-dir=.git apply ${CMAKE_SOURCE_DIR}/cmake/sobol.patch --ignore-whitespace --whitespace=nowarn --verbose
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/src
  RESULT_VARIABLE error_code
)
add_definitions(-DUSE_SOBOL)

set(CMAKE_CXX_COMPILE_FLAGS ""${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS}"")
set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS}"")

include_directories(${JsonCpp_INCLUDE_DIR} ${jsoncpp_DIR} ${MPI_INCLUDE_PATH} ${CMAKE_SOURCE_DIR}/src/)
link_directories(${JsonCpp_LIBRARY_DIR})

set (COMMON_PICCANTE_FILES 	
	${CMAKE_SOURCE_DIR}/src/current.cpp
	${CMAKE_SOURCE_DIR}/src/em_field.cpp
	${CMAKE_SOURCE_DIR}/src/grid.cpp
	${CMAKE_SOURCE_DIR}/src/jsonparser.cpp
	${CMAKE_SOURCE_DIR}/src/output_manager.cpp
	${CMAKE_SOURCE_DIR}/src/particle_species.cpp
	${CMAKE_SOURCE_DIR}/src/sobol.cpp
	${CMAKE_SOURCE_DIR}/src/structures.cpp
	${CMAKE_SOURCE_DIR}/src/utilities.cpp
)

add_executable (piccante                                 ${CMAKE_SOURCE_DIR}/src/main-piccante.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_dev                             ${CMAKE_SOURCE_DIR}/src/main-devel.cpp ${COMMON_PICCANTE_FILES})

if (BUILD_EXAMPLES)
add_executable (piccante_clusters                        ${CMAKE_SOURCE_DIR}/examples/MAINS/clusters.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_landau_damping                  ${CMAKE_SOURCE_DIR}/examples/MAINS/landau_damping.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_1d_TNSA                         ${CMAKE_SOURCE_DIR}/examples/MAINS/1d_TNSA.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_1d_solitons                     ${CMAKE_SOURCE_DIR}/examples/MAINS/1d_solitons.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_1d_wakefield                    ${CMAKE_SOURCE_DIR}/examples/MAINS/1d_wakefield.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_grating                      ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_grating.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_twostream                    ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_twostream.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_twostream_no_output          ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_twostream_no_output.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_twostream_scaling            ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_twostream_scaling.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_twostream_scaling_no_noutput ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_twostream_scaling_no_noutput.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_wakefield                    ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_wakefield.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_2d_wakefield_no_output          ${CMAKE_SOURCE_DIR}/examples/MAINS/2d_wakefield_no_output.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_twostream                    ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_twostream.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_twostream_no_output          ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_twostream_no_output.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_twostream_outputParamScan    ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_twostream_outputParamScan.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_twostream_scaling            ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_twostream_scaling.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_twostream_scaling_no_output  ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_twostream_scaling_no_output.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_wakefield                    ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_wakefield.cpp ${COMMON_PICCANTE_FILES})
add_executable (piccante_3d_wakefield_no_output          ${CMAKE_SOURCE_DIR}/examples/MAINS/3d_wakefield_no_output.cpp ${COMMON_PICCANTE_FILES})
endif()

if(NOT JsonCpp_FOUND)
  add_dependencies(piccante                                  json-cpp)
  add_dependencies(piccante_dev                              json-cpp)
  if (BUILD_EXAMPLES)
  add_dependencies(piccante_clusters                         json-cpp)
  add_dependencies(piccante_landau_damping                   json-cpp)
  add_dependencies(piccante_1d_TNSA                          json-cpp)
  add_dependencies(piccante_1d_solitons                      json-cpp)
  add_dependencies(piccante_1d_wakefield                     json-cpp)
  add_dependencies(piccante_2d_grating                       json-cpp)
  add_dependencies(piccante_2d_twostream                     json-cpp)
  add_dependencies(piccante_2d_twostream_no_output           json-cpp)
  add_dependencies(piccante_2d_twostream_scaling             json-cpp)
  add_dependencies(piccante_2d_twostream_scaling_no_noutput  json-cpp)
  add_dependencies(piccante_2d_wakefield                     json-cpp)
  add_dependencies(piccante_2d_wakefield_no_output           json-cpp)
  add_dependencies(piccante_3d_twostream                     json-cpp)
  add_dependencies(piccante_3d_twostream_no_output           json-cpp)
  add_dependencies(piccante_3d_twostream_outputParamScan     json-cpp)
  add_dependencies(piccante_3d_twostream_scaling             json-cpp)
  add_dependencies(piccante_3d_twostream_scaling_no_output   json-cpp)
  add_dependencies(piccante_3d_wakefield                     json-cpp)
  add_dependencies(piccante_3d_wakefield_no_output           json-cpp)
  endif()
endif()

target_link_libraries(piccante                                 ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_dev                             ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
if (BUILD_EXAMPLES)
target_link_libraries(piccante_clusters                        ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_landau_damping                  ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_1d_TNSA                         ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_1d_solitons                     ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_1d_wakefield                    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_grating                      ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_twostream                    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_twostream_no_output          ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_twostream_scaling            ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_twostream_scaling_no_noutput ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_wakefield                    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_2d_wakefield_no_output          ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_twostream                    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_twostream_no_output          ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_twostream_outputParamScan    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_twostream_scaling            ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_twostream_scaling_no_output  ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_wakefield                    ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
target_link_libraries(piccante_3d_wakefield_no_output          ${MPI_LIBRARIES} ${JsonCpp_LIBRARY}) 
endif()

if(Boost_FOUND)
  target_link_libraries(piccante                                 ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_dev                             ${Boost_LIBRARIES}) 
  if (BUILD_EXAMPLES)
  target_link_libraries(piccante_clusters                        ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_landau_damping                  ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_1d_TNSA                         ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_1d_solitons                     ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_1d_wakefield                    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_grating                      ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream                    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_no_output          ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling            ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling_no_noutput ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield                    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield_no_output          ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream                    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_no_output          ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_outputParamScan    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling            ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling_no_output  ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield                    ${Boost_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield_no_output          ${Boost_LIBRARIES}) 
  endif()
endif()

if(HDF5_FOUND)
  target_link_libraries(piccante                                 ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_dev                             ${HDF5_CXX_LIBRARIES}) 
  if (BUILD_EXAMPLES)
  target_link_libraries(piccante_clusters                        ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_landau_damping                  ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_1d_TNSA                         ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_1d_solitons                     ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_1d_wakefield                    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_grating                      ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream                    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_no_output          ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling            ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling_no_noutput ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield                    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield_no_output          ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream                    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_no_output          ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_outputParamScan    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling            ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling_no_output  ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield                    ${HDF5_CXX_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield_no_output          ${HDF5_CXX_LIBRARIES}) 
  endif()
endif()

if (FFTW_FOUND AND FFTW_MPI_FOUND AND NOT MKL_FOUND)
  target_link_libraries(piccante                                 ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_dev                             ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  if (BUILD_EXAMPLES)
  target_link_libraries(piccante_clusters                        ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_landau_damping                  ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_1d_TNSA                         ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_1d_solitons                     ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_1d_wakefield                    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_grating                      ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream                    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_no_output          ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling            ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling_no_noutput ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield                    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield_no_output          ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream                    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_no_output          ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_outputParamScan    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling            ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling_no_output  ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield                    ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield_no_output          ${FFTW_LIBRARIES} ${FFTW_MPI_LIBRARIES}) 
  endif()
endif()

if (MKL_FOUND AND NOT FFTW_FOUND AND NOT FFTW_MPI_FOUND)
  target_link_libraries(piccante                                 ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_dev                             ${MKL_LIBRARIES}) 
  if (BUILD_EXAMPLES)
  target_link_libraries(piccante_clusters                        ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_landau_damping                  ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_1d_TNSA                         ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_1d_solitons                     ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_1d_wakefield                    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_grating                      ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream                    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_no_output          ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling            ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_twostream_scaling_no_noutput ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield                    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_2d_wakefield_no_output          ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream                    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_no_output          ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_outputParamScan    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling            ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_twostream_scaling_no_output  ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield                    ${MKL_LIBRARIES}) 
  target_link_libraries(piccante_3d_wakefield_no_output          ${MKL_LIBRARIES}) 
  endif()
endif()

install (TARGETS 
	piccante 
	piccante_dev 
	DESTINATION ${CMAKE_SOURCE_DIR}/bin/
)

if (BUILD_EXAMPLES)
install (TARGETS 
	piccante_clusters 
	piccante_landau_damping 
	piccante_1d_TNSA 
	piccante_1d_solitons 
	piccante_1d_wakefield 
	piccante_2d_grating 
	piccante_2d_twostream 
	piccante_2d_twostream_no_output 
	piccante_2d_twostream_scaling 
	piccante_2d_twostream_scaling_no_noutput 
	piccante_2d_wakefield 
	piccante_2d_wakefield_no_output 
	piccante_3d_twostream 
	piccante_3d_twostream_no_output 
	piccante_3d_twostream_outputParamScan 
	piccante_3d_twostream_scaling 
	piccante_3d_twostream_scaling_no_output 
	piccante_3d_wakefield 
	piccante_3d_wakefield_no_output 
	DESTINATION ${CMAKE_SOURCE_DIR}/bin/examples/
)
endif()
",3.1,3.1
44447,maowerner,sLapH-contractions,False,False,False,False,False,8,C++,2020-05-04 07:21:40+00:00,2016-03-14 14:01:32+00:00,1,1157,"# Copyright © 2017-2018 Martin Ueding <dev@martin-ueding.de>

# Enforce a version that is actually available on QBiG.
cmake_minimum_required(VERSION 3.1)

project(sLapH-contractions CXX C)

set(CMAKE_CXX_STANDARD 11)

add_library(lcontract

  src/ComplexProduct.cpp
  src/Correlators.cpp
  src/Diagram.cpp
  src/DiagramSpec.cpp
  src/DilutedFactor.cpp
  src/DilutedFactorFactory.cpp
  #src/DilutedProductFactory.cpp
  src/DilutedTrace.cpp
  src/DilutedTraceFactory.cpp
  src/dilution-iterator.cpp
  src/EigenVector.cpp
  src/Gamma.cpp
  src/GaugeField.cpp
  src/global_data.cpp
  src/global_data_build_IO_names.cpp
  src/global_data_input_handling.cpp
  src/global_data_input_handling_utils.cpp
  src/h5-wrapper.cpp
  src/init_lookup_tables.cpp
  src/io_utils.cpp
  src/OperatorFactory.cpp
  src/Perambulator.cpp
  src/RandomVector.cpp
  src/ranlxs.cpp
  src/StopWatch.cpp
  src/timings.cpp

  )

target_include_directories(lcontract PUBLIC ""include"")

###############################################################################
#                          Git Revision Information                           #
###############################################################################

list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")
include(GetGitRevisionDescription)

get_git_head_revision(git_refspec git_sha1)
git_local_changes(git_changes)

message(STATUS ""git sha1: ${git_sha1}"")
message(STATUS ""git refspec: ${git_refspec}"")
message(STATUS ""git state: ${git_changes}"")

execute_process(COMMAND
  hostname -f
  OUTPUT_VARIABLE hostname
  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

set(git_user $ENV{USER})
set(git_host ${hostname})

message(STATUS ""user: ${git_user}"")
message(STATUS ""host: ${git_host}"")

configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/include/git.hpp.in""
  ""${CMAKE_CURRENT_BINARY_DIR}/include/git.hpp""
  @ONLY)
list(APPEND SOURCES ""${CMAKE_CURRENT_BINARY_DIR}/include/git.hpp"")
target_include_directories(lcontract PUBLIC ""${CMAKE_CURRENT_BINARY_DIR}/include"")

###############################################################################
#                             External Libraries                              #
###############################################################################

# HDF5
if(NOT DEFINED HDF5_INCLUDE_DIRS OR NOT DEFINED HDF5_LIBRARIES)
  find_package(HDF5 REQUIRED COMPONENTS C CXX)
endif()
target_include_directories(lcontract PUBLIC ${HDF5_INCLUDE_DIRS})
target_link_libraries(lcontract PUBLIC ${HDF5_LIBRARIES})

# Boost
if(NOT DEFINED Boost_INCLUDE_DIRS OR NOT DEFINED Boost_LIBRARIES)
  find_package(Boost REQUIRED COMPONENTS filesystem system program_options)
endif()
target_include_directories(lcontract PUBLIC ${Boost_INCLUDE_DIRS})
target_link_libraries(lcontract PUBLIC ${Boost_LIBRARIES})

# Eigen
if(NOT DEFINED EIGEN3_INCLUDE_DIR)
  find_package(Eigen3 REQUIRED)
endif()
target_include_directories(lcontract SYSTEM PUBLIC ${EIGEN3_INCLUDE_DIR})

# Lime
if(NOT DEFINED LIME_INCLUDE_DIRS)
  message(FATAL_ERROR ""Must specify -DLIME_INCLUDE_DIRS on the command line to CMake."")
endif()
target_include_directories(lcontract SYSTEM PUBLIC ${LIME_INCLUDE_DIRS})
target_link_libraries(lcontract PUBLIC ${LIME_LIBRARIES})

# Lime
if(NOT DEFINED LIME_LIBRARIES)
  message(FATAL_ERROR ""Must specify -DLIME_LIBRARIES on the command line to CMake."")
endif()

# OpenMP
find_package(OpenMP REQUIRED)
target_compile_options(lcontract PUBLIC ${OpenMP_CXX_FLAGS})
target_link_libraries(lcontract PUBLIC ${OpenMP_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})

###############################################################################
#                                 Build Flags                                 #
###############################################################################

# We want warnings, but not all of them.
add_definitions(-Wall -pedantic)

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(-fdiagnostics-color has_diagnostics_color)
if(has_diagnostics_color)
  if (CMAKE_GENERATOR STREQUAL ""Ninja"")
    add_definitions(""-fdiagnostics-color=always"")
  else()
    add_definitions(""-fdiagnostics-color=auto"")
  endif()
endif()

set(SLAPH_TIMING_LEVEL 0 CACHE INT ""Granularity of time measurements"")
add_definitions(""-DSLAPH_TIMING_LEVEL=${SLAPH_TIMING_LEVEL}"")

# Default to “Release” build type.
message(STATUS ""Build Type: '${CMAKE_BUILD_TYPE}'"")
if(CMAKE_BUILD_TYPE STREQUAL """")
  message(STATUS ""No CMAKE_BUILD_TYPE, assuming release and enabling all optimizations."")
  set(CMAKE_BUILD_TYPE Release)
endif()

# Tune for the local architecture because this code will be used where it is
# compiled, in most cases.
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}"")

set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -g -O0 -fsanitize=address"")

option(SLAPH_KAHAN ""Use Kahan summation in the accumulation steps"" OFF)

if(SLAPH_KAHAN)
  add_definitions(""-DSLAPH_KAHAN"")
  message(STATUS ""Using Kahan accumulation with double precision internally"")
else()
  message(STATUS ""Using native double precision accumulation"")
endif()

###############################################################################
#                                 Executables                                 #
###############################################################################

### contract

add_executable(contract main/contract.cpp)
target_link_libraries(contract lcontract)

add_executable(vdaggerv main/VdaggerV.cpp)
target_link_libraries(vdaggerv lcontract)


install(TARGETS contract DESTINATION bin)

### test-iterator
add_executable(test-dilution-iterator main/test-iterator.cpp)
target_link_libraries(test-dilution-iterator lcontract)

### test-derivative
add_executable(test-derivative main/test-derivative.cpp)
target_link_libraries(test-derivative lcontract)

### test-derivative
add_executable(timings main/timings.cpp)
target_link_libraries(timings lcontract)

###############################################################################
#                               Subdirectories                                #
###############################################################################

add_subdirectory(benchmarks)
add_subdirectory(tests/gtest)

###############################################################################
#                                    Tests                                    #
###############################################################################

enable_testing()

add_test(NAME ""integration_L4_all_diagrams""
  COMMAND ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4/run-integration-test"" ""${CMAKE_CURRENT_BINARY_DIR}""
  WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4"")

add_test(NAME ""integration_L4_charged_diagrams""
  COMMAND ""${CMAKE_CURRENT_BINARY_DIR}/contract"" -i test_conjugated.ini --start_config 1000 --end_config 1000
  WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4"")

add_test(NAME ""integration_L4_neutral_diagrams""
  COMMAND ""${CMAKE_CURRENT_BINARY_DIR}/contract"" -i test_neutral.ini --start_config 1000 --end_config 1000
  WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4"")

add_test(NAME ""integration_L4_new_all_diagrams""
  COMMAND ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4-new/run-integration-test"" ""${CMAKE_CURRENT_BINARY_DIR}""
  WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-L4-new"")

add_test(NAME unit-dilution-iterator
  COMMAND ""${CMAKE_CURRENT_SOURCE_DIR}/tests/dilution-iterator/run-test"" ""${CMAKE_CURRENT_SOURCE_DIR}"")
",3.1,3.1
44601,MaartenBaert,ssr,False,False,False,False,False,36,C++,2020-05-15 18:49:00+00:00,2012-12-18 19:16:16+00:00,1483,842,"cmake_minimum_required(VERSION 3.1)
cmake_policy(VERSION 3.1)

set(CMAKE_CXX_STANDARD 11)

project(simplescreenrecorder VERSION 0.4.1)

if(CMAKE_SYSTEM_PROCESSOR MATCHES ""x86_64|amd64|i386|i686"")
	set(PROCESSOR_IS_X86 TRUE)
else()
	set(PROCESSOR_IS_X86 FALSE)
endif()

option(ENABLE_32BIT_GLINJECT ""Build the 32-bit version of 'libssr-glinject' on 64-bit systems (in addition to the 64-bit version). Required for OpenGL recording of 32-bit applications on 64-bit systems."" FALSE)
option(ENABLE_X86_ASM ""Allow x86/x64 assembly or intrinsics."" ${PROCESSOR_IS_X86})
option(ENABLE_FFMPEG_VERSIONS ""Use FFmpeg version numbers for feature support tests. Enable when using FFmpeg, disable when using Libav."" TRUE)
option(WITH_OPENGL_RECORDING ""Build with OpenGL recording support."" TRUE)
option(WITH_ALSA ""Build with ALSA support."" TRUE)
option(WITH_PULSEAUDIO ""Build with PulseAudio support."" TRUE)
option(WITH_JACK ""Build with JACK support."" TRUE)
option(WITH_QT5 ""Build with Qt5 (instead of Qt4)."" FALSE)
option(WITH_SIMPLESCREENRECORDER ""Build the 'simplescreenrecorder' executable."" TRUE)
option(WITH_GLINJECT ""Build the 'libssr-glinject' library. Required for OpenGL recording."" TRUE)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

include(FeatureSummary)
include(GNUInstallDirs)

# try to guess the correct 32-bit library path on 64-bit systems
if(ENABLE_32BIT_GLINJECT)

	if(NOT DEFINED CMAKE_INSTALL_LIB32DIR)
		set(_LIB32DIR_DEFAULT ""lib32"")
		if(EXISTS ""/etc/debian_version"")
			if(EXISTS ""/usr/lib/i386-linux-gnu"")
				set(_LIB32DIR_DEFAULT ""lib/i386-linux-gnu"")
			elseif(EXISTS ""/usr/lib/i686-linux-gnu"")
				set(_LIB32DIR_DEFAULT ""lib/i686-linux-gnu"")
			else()
				message(WARNING ""Could not find correct multiarch 32-bit library path, falling back to 'lib32'."")
			endif()
		endif()
		set(CMAKE_INSTALL_LIB32DIR ""${_LIB32DIR_DEFAULT}"" CACHE PATH ""object code libraries, 32-bit (${_LIB32DIR_DEFAULT})"")
	endif()
	
	mark_as_advanced(CMAKE_INSTALL_LIB32DIR)

	if(NOT IS_ABSOLUTE ${CMAKE_INSTALL_LIB32DIR})
		set(CMAKE_INSTALL_FULL_LIB32DIR ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIB32DIR}"")
	else()
		set(CMAKE_INSTALL_FULL_LIB32DIR ""${CMAKE_INSTALL_LIB32DIR}"")
	endif()

endif()

if(WITH_GLINJECT)

	add_subdirectory(glinject)

endif()

if(WITH_SIMPLESCREENRECORDER)

	add_subdirectory(src)
	add_subdirectory(src/translations)

	if(WITH_OPENGL_RECORDING)
		# the 'ssr-glinject' script is installed together with the main SSR executable to avoid problems with multiarch packages
		install(
			FILES scripts/ssr-glinject
			DESTINATION ${CMAKE_INSTALL_FULL_BINDIR}
			PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
		)
	endif()
	install(
		DIRECTORY data/output-profiles
		DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/simplescreenrecorder
	)
	install(
		DIRECTORY data/man/
		DESTINATION ${CMAKE_INSTALL_FULL_MANDIR}/man1
	)
	install(
		FILES data/simplescreenrecorder.desktop
		DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/applications
	)
	install(
		FILES data/simplescreenrecorder.metainfo.xml
		DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/metainfo
	)

	# icons
	set(icons_res 16 22 24 32 48 64 96 128 192 256)

	foreach(res IN LISTS icons_res)
		install(
			DIRECTORY data/icons/${res}/
			DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/icons/hicolor/${res}x${res}/apps
		)
	endforeach()

	install(
		DIRECTORY data/icons/scalable/
		DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/icons/hicolor/scalable/apps
	)

endif()

feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
",3.1,3.1
44672,konserw,koferta,False,False,False,False,False,3,C++,2019-02-04 18:52:09+00:00,2013-12-23 10:31:48+00:00,1,412,"cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

project(kOferta)

set(KOFERTA_SQL_USER CACHE STRING ""SQL Database user"" )
set(KOFERTA_SQL_PWD  CACHE STRING ""SQL Database Password"" )
set(CMAKE_BUILD_TYPE Debug CACHE STRING ""Type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" )
set(KOFERTA_VERSION         ""4.x-mannual"" CACHE STRING ""Please provide build version string"" )
option(BUILD_CUKE 	        ""Build E2E test using cucumber"" OFF)
option(DISABLE_UNIT_TESTS   ""Disable unit tests"" OFF)
option(VALGRIND_TESTS       ""Run tests within Valgrind"" OFF)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)

find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Sql REQUIRED)
find_package(Qt5PrintSupport REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5LinguistTools REQUIRED)
find_package(Qt5Test REQUIRED)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOUIC_SEARCH_PATHS ${PROJECT_SOURCE_DIR}/forms) 
SET(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(TS_FILES
    ${PROJECT_SOURCE_DIR}/translations/kOferta_pl.ts
    ${PROJECT_SOURCE_DIR}/translations/kOferta_en.ts
    ${PROJECT_SOURCE_DIR}/translations/kOferta_de.ts
)
qt5_add_translation(QM_FILES ${TS_FILES})
ADD_CUSTOM_TARGET (translations ALL DEPENDS ${QM_FILES})

set(KOFERTA_RESOURCES 
    ${PROJECT_SOURCE_DIR}/resources/mainwindow.qrc
    ${PROJECT_SOURCE_DIR}/resources/icon.rc
)

set(KOFERTA_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/include)
add_subdirectory(src)

#
# Colored Terminal Output
#

if(UNIX AND (
       (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
    OR (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))
    AND CMAKE_GENERATOR STREQUAL ""Ninja"")
  # These compilers generate coloured output, but by default only when their output channel is a
  # terminal (TTY/PTY). Ninja however captures all output in a pipe (per-subprocess), disabling
  # coloured compiler diagnostics. We forcefully enable it because Ninja, since 1.0.0
  # (ninja-build/ninja#198) takes care to strip VT100 CSI control sequences from the output if Ninja
  # itself is writing to a pipe instead of a terminal. As a result this should give us the best of
  # both worlds: coloured output when we're running in a terminal, plain output for editors, IDEs,
  # etc.
  set(CMAKE_CXX_FLAGS ""-fdiagnostics-color=always ${CMAKE_CXX_FLAGS}"" CACHE STRING """" FORCE)
endif()

#
# Valgrind
#

if(VALGRIND_TESTS)
    find_package(Valgrind REQUIRED)
    set(VALGRIND_ARGS --error-exitcode=2 --leak-check=full --undef-value-errors=no)
    if(NOT VALGRIND_VERSION_STRING VERSION_LESS 3.9)
        # Valgrind 3.9 no longer shows all leaks unless asked to
        list(APPEND VALGRIND_ARGS --show-leak-kinds=all)
    endif()
    function(add_test name)
        if(NOT name STREQUAL ""NAME"")
            _add_test(${VALGRIND_EXECUTABLE} ${VALGRIND_ARGS} ${ARGV})
            return()
        endif()

        set(TEST_ARGS ${ARGV})
        list(FIND TEST_ARGS COMMAND COMMAND_IDX)
        if(COMMAND_IDX EQUAL -1)
            message(AUTHOR_WARNING ""Weird command-line given to add_test(), not injecting valgrind"")
            _add_test(${ARGV})
            return()
        endif()

        # We want to operate on the COMMAND, not the 'COMMAND' keyword preceding it
        math(EXPR COMMAND_IDX ""${COMMAND_IDX} + 1"")

        # Keep add_test() behaviour of replacing COMMANDs, when executable targets, with their output files
        list(GET TEST_ARGS ${COMMAND_IDX} COMMAND)
        if(TARGET ${COMMAND})
            get_target_property(COMMAND_TYPE ${COMMAND} TYPE)
            if(COMMAND_TYPE STREQUAL ""EXECUTABLE"")
                # Inserting first, removing the original only after that, because inserting to the end of the list doesn't work
                math(EXPR ORIG_COMMAND_IDX ""${COMMAND_IDX} + 1"")
                list(INSERT TEST_ARGS ${COMMAND_IDX} ""$<TARGET_FILE:${COMMAND}>"")
                list(REMOVE_AT TEST_ARGS ${ORIG_COMMAND_IDX})
            endif()
        endif()

        # Insert the valgrind command line, before the command to execute
        list(INSERT TEST_ARGS ${COMMAND_IDX} ${VALGRIND_EXECUTABLE} ${VALGRIND_ARGS})

        _add_test(${TEST_ARGS})
    endfunction()
endif()

#
# Tests
#

if(NOT DISABLE_UNIT_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

#
# Cucumber
#

if(BUILD_CUKE)
    set(CUKE_BOOST_LIBS thread system regex date_time program_options)
    find_package(Boost COMPONENTS ${CUKE_BOOST_LIBS})
    
    if(Boost_FOUND)
        include(ExternalProject)
        set(CUCUMBER_ROOT ""${CMAKE_CURRENT_BINARY_DIR}/cucumber"")
        set(CUCUMBER_LIBRARY ""${CUCUMBER_ROOT}/src/cucumber-cpp-build/src/libcucumber-cpp.a"")
        ExternalProject_Add(
            cucumber-cpp 
            GIT_REPOSITORY https://github.com/konserw/cucumber-cpp.git
            GIT_TAG ultimatekoferta
            PREFIX ${CUCUMBER_ROOT}
            CMAKE_ARGS -DCUKE_DISABLE_BOOST_TEST:bool=on -DCUKE_DISABLE_GTEST:bool=on -DCUKE_DISABLE_E2E_TESTS:bool=on -DCUKE_DISABLE_UNIT_TESTS:bool=on -DCUKE_ENABLE_EXAMPLES:bool=off -DGMOCK_VER:string=1.7.0
            INSTALL_COMMAND """"
            LOG_DOWNLOAD ON
            LOG_CONFIGURE ON
            LOG_BUILD ON
            BUILD_BYPRODUCTS ""${CUCUMBER_LIBRARY}""
       #     BUILD_BYPRODUCTS ""${CUCUMBER_MAIN_LIBRARY}""
        )
    
        add_library(libcucumber-cpp IMPORTED STATIC GLOBAL)
        add_dependencies(libcucumber-cpp cucumber-cpp)
        ExternalProject_Get_Property(cucumber-cpp source_dir binary_dir)
    
        set(CUCUMBER_INCLUDE_DIR ${source_dir}/include)
        include_directories(${CUCUMBER_INCLUDE_DIR})
        include_directories(MainWindow)
    
        set(CUKE_FEATURES features/e2e.feature features/initialization.feature)
        set(CUKE_LIBRARIES ${CUCUMBER_LIBRARY} ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY})
        add_executable(kofertaSteps features/step_definitions/kofertaSteps ${CUKE_FEATURES})
        set_property(TARGET kofertaSteps PROPERTY CXX_STANDARD 11)
        add_dependencies(kofertaSteps cucumber-cpp)
        target_link_libraries(kofertaSteps mainwindow Qt5::Core Qt5::Widgets Qt5::Test ${CUKE_LIBRARIES})
    endif()
endif()
",3.1,3.1
44885,Extrawurst,cimgui,False,False,False,False,False,28,Lua,2020-05-16 14:50:46+00:00,2015-04-07 14:06:21+00:00,522,425,"cmake_minimum_required(VERSION 3.1)

project(cimgui)

#general settings
file(GLOB IMGUI_SOURCES
    cimgui.cpp
    imgui/imgui.cpp
    imgui/imgui_draw.cpp
    imgui/imgui_demo.cpp
    imgui/imgui_widgets.cpp
)

set(IMGUI_STATIC ""no"" CACHE STRING ""Build as a static library"")

#add library and link
if (IMGUI_STATIC)
    add_library(cimgui STATIC ${IMGUI_SOURCES})
else (IMGUI_STATIC)
    add_library(cimgui SHARED ${IMGUI_SOURCES})
endif (IMGUI_STATIC)

target_compile_definitions(cimgui PUBLIC IMGUI_DISABLE_OBSOLETE_FUNCTIONS=1)
if (WIN32)
    target_compile_definitions(cimgui PUBLIC IMGUI_IMPL_API=""extern \""C\"" __declspec\(dllexport\)"")
else (WIN32)
    target_compile_definitions(cimgui PUBLIC IMGUI_IMPL_API=""extern \""C\"" "")
endif (WIN32)

target_include_directories(cimgui PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(cimgui PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/imgui)
set_target_properties(cimgui PROPERTIES PREFIX """")

#install
install(TARGETS cimgui
    RUNTIME DESTINATION  .
    LIBRARY DESTINATION  .
    ARCHIVE DESTINATION  .
)

#test
set(CIMGUI_TEST ""no"" CACHE STRING ""Enable compilation of a test unit based on imgui null"")

if (CIMGUI_TEST)
  add_subdirectory(test)
endif ()
",3.1,3.1
44927,mgba-emu,mgba,False,False,False,False,False,69,C,2020-05-17 00:14:00+00:00,2014-12-09 21:37:23+00:00,2021,6171,"cmake_minimum_required(VERSION 3.1)
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_LIST_DIR}/src/platform/cmake/"")

if(POLICY CMP0025)
	cmake_policy(SET CMP0025 NEW)
endif()
if(POLICY CMP0072)
	cmake_policy(SET CMP0072 NEW)
endif()
project(mGBA)
set(BINARY_NAME mgba CACHE INTERNAL ""Name of output binaries"")
if(NOT MSVC)
	set(GCC_STD ""c99"")
	if(SWITCH)
		set(GCC_STD ""gnu11"")
	elseif(CMAKE_C_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_COMPILER_VERSION VERSION_LESS ""4.3"")
		set(GCC_STD ""gnu99"")
	endif()
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wall -Wextra -Wno-missing-field-initializers -std=${GCC_STD}"")
else()
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS /wd4003 /wd4244 /wd4146"")
endif()

if(NOT DEFINED LIBMGBA_ONLY)
	get_directory_property(LIBMGBA_ONLY EXCLUDE_FROM_ALL)
endif()

if(NOT LIBMGBA_ONLY)
	set(USE_DEBUGGERS ON CACHE BOOL ""Whether or not to enable the debugging infrastructure"")
	if (NOT WIN32)
		set(USE_EDITLINE ON CACHE BOOL ""Whether or not to enable the CLI-mode debugger"")
	endif()
	set(USE_GDB_STUB ON CACHE BOOL ""Whether or not to enable the GDB stub ARM debugger"")
	set(USE_FFMPEG ON CACHE BOOL ""Whether or not to enable FFmpeg support"")
	set(USE_ZLIB ON CACHE BOOL ""Whether or not to enable zlib support"")
	set(USE_MINIZIP ON CACHE BOOL ""Whether or not to enable external minizip support"")
	set(USE_PNG ON CACHE BOOL ""Whether or not to enable PNG support"")
	set(USE_LIBZIP ON CACHE BOOL ""Whether or not to enable LIBZIP support"")
	set(USE_SQLITE3 ON CACHE BOOL ""Whether or not to enable SQLite3 support"")
	set(USE_ELF ON CACHE BOOL ""Whether or not to enable ELF support"")
	set(M_CORE_GBA ON CACHE BOOL ""Build Game Boy Advance core"")
	set(M_CORE_GB ON CACHE BOOL ""Build Game Boy core"")
	set(USE_LZMA ON CACHE BOOL ""Whether or not to enable 7-Zip support"")
	set(USE_DISCORD_RPC ON CACHE BOOL ""Whether or not to enable Discord RPC support"")
	set(ENABLE_SCRIPTING ON CACHE BOOL ""Whether or not to enable scripting support"")
	set(BUILD_QT ON CACHE BOOL ""Build Qt frontend"")
	set(BUILD_SDL ON CACHE BOOL ""Build SDL frontend"")
	set(BUILD_LIBRETRO OFF CACHE BOOL ""Build libretro core"")
	if(APPLE)
		set(BUILD_OPENEMU OFF CACHE BOOL ""Build OpenEmu core"")
	endif()
	set(BUILD_PERF OFF CACHE BOOL ""Build performance profiling tool"")
	set(BUILD_TEST OFF CACHE BOOL ""Build testing harness"")
	set(BUILD_SUITE OFF CACHE BOOL ""Build test suite"")
	set(BUILD_EXAMPLE OFF CACHE BOOL ""Build example frontends"")
	set(BUILD_PYTHON OFF CACHE BOOL ""Build Python bindings"")
	set(BUILD_STATIC OFF CACHE BOOL ""Build a static library"")
	set(BUILD_SHARED ON CACHE BOOL ""Build a shared library"")
	set(SKIP_LIBRARY OFF CACHE BOOL ""Skip building the library (useful for only building libretro or OpenEmu cores)"")
	set(BUILD_GL ON CACHE BOOL ""Build with OpenGL"")
	set(BUILD_GLES2 ON CACHE BOOL ""Build with OpenGL|ES 2"")
	set(BUILD_GLES3 OFF CACHE BOOL ""Build with OpenGL|ES 3"")
	set(USE_EPOXY ON CACHE STRING ""Build with libepoxy"")
	set(DISABLE_DEPS OFF CACHE BOOL ""Build without dependencies"")
	set(DISTBUILD OFF CACHE BOOL ""Build distribution packages"")
	if(WIN32)
		set(WIN32_UNIX_PATHS OFF CACHE BOOL ""Use Unix-like paths"")
		mark_as_advanced(WIN32_UNIX_PATHS)
	endif()
else()
	set(DISABLE_FRONTENDS ON)
	set(DISABLE_DEPS ON)
	set(BUILD_STATIC ON)
	set(BUILD_SHARED OFF)
	if(NOT DEFINED M_CORE_GBA)
		set(M_CORE_GBA ON)
	endif()
	if(NOT DEFINED M_CORE_GB)
		set(M_CORE_GB ON)
	endif()
endif()

file(GLOB THIRD_PARTY_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/inih/*.c)
set(CORE_VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-mem.c ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fifo.c)
set(VFS_SRC)
include_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/include)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release CACHE STRING ""Build type (e.g. Release, RelWithDebInfo, or Debug)"" FORCE)
endif()

if(UNIX OR WIN32_UNIX_PATHS)
	include(GNUInstallDirs)
else()
	set(CMAKE_INSTALL_LIBDIR ""."")
	set(CMAKE_INSTALL_BINDIR ""."")
	set(CMAKE_INSTALL_DATADIR ""."")
	set(CMAKE_INSTALL_DOCDIR ""."")
	set(CMAKE_INSTALL_INCLUDEDIR ""include"")
endif()

set(LIBDIR ""${CMAKE_INSTALL_LIBDIR}"" CACHE PATH ""Installed library directory"")
mark_as_advanced(LIBDIR)

if (BUILD_LIBRETRO)
	set(LIBRETRO_LIBDIR ""${LIBDIR}"" CACHE PATH ""Installed library directory (Libretro)"")
	mark_as_advanced(LIBRETRO_LIBDIR)
endif()

if (BUILD_OPENEMU)
	set(OE_LIBDIR ""${LIBDIR}"" CACHE PATH ""Installed library directory (OpenEmu)"")
	mark_as_advanced(OE_LIBDIR)
endif()

if (DISTBUILD)
       set(EXTRA_LICENSES """" CACHE FILEPATH ""Extra licenses to include in distribution packaages"")
       mark_as_advanced(EXTRA_LICENSES)
endif()
mark_as_advanced(DISTBUILD)

set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIBDIR}"")

if (NOT DEFINED MANDIR)
	set(MANDIR ${CMAKE_INSTALL_MANDIR})
endif()

include(FindFeature)

# Version information
add_custom_target(version-info ALL
	COMMAND ${CMAKE_COMMAND}
	-DBINARY_NAME=${BINARY_NAME}
	-DCONFIG_FILE=${CMAKE_CURRENT_SOURCE_DIR}/src/core/version.c.in
	-DOUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/version.c
	-P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

include(${CMAKE_CURRENT_SOURCE_DIR}/version.cmake)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/core/version.c.in ${CMAKE_CURRENT_BINARY_DIR}/version.c)

source_group(""Generated sources"" FILES ${CMAKE_CURRENT_BINARY_DIR}/version.c)

# Advanced settings
if(NOT (CMAKE_C_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_COMPILER_VERSION VERSION_LESS ""4.5""))
	set(DEFAULT_LTO ON)
else()
	set(DEFAULT_LTO OFF)
endif()

set(BUILD_LTO ${DEFAULT_LTO} CACHE BOOL ""Build with link-time optimization"")
set(BUILD_PGO OFF CACHE BOOL ""Build with profiling-guided optimization"")
set(PGO_STAGE_2 CACHE BOOL ""Rebuild for profiling-guided optimization after profiles have been generated"")
set(PGO_DIR ""/tmp/gba-pgo/"" CACHE PATH ""Profiling-guided optimization profiles path"")
mark_as_advanced(BUILD_LTO BUILD_PGO PGO_STAGE_2 PGO_DIR)
set(PGO_PRE_FLAGS ""-fprofile-generate=${PGO_DIR} -fprofile-arcs"")
set(PGO_POST_FLAGS ""-fprofile-use=${PGO_DIR} -fbranch-probabilities"")

if(BUILD_PGO AND NOT PGO_STAGE_2)
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} ${PGO_PRE_FLAGS}"")
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${PGO_PRE_FLAGS}"")
	set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${PGO_PRE_FLAGS}"")
elseif(BUILD_PGO AND PGO_STAGE_2)
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} ${PGO_POST_FLAGS}"")
	set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${PGO_POST_FLAGS}"")
	set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${PGO_POST_FLAGS}"")
endif()

# Platform support
if(WIN32)
	set(WIN32_VERSION ""${LIB_VERSION_MAJOR},${LIB_VERSION_MINOR},${LIB_VERSION_PATCH}"")
	add_definitions(-D_WIN32_WINNT=0x0600)
	if(MSVC)
		add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN)
		set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
		add_definitions(-D_UNICODE -DUNICODE)
	else()
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -municode"")
		set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -municode"")
	endif()
	list(APPEND OS_LIB ws2_32 shlwapi)
	list(APPEND CORE_VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fd.c ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/vfs-w32.c)
	file(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/*.c)
	source_group(""Windows-specific code"" FILES ${OS_SRC})
elseif(UNIX)
	set(USE_PTHREADS ON)

	if(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
		add_definitions(-D_GNU_SOURCE)
	endif()

	list(APPEND CORE_VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fd.c ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-dirent.c)
	file(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/posix/*.c)
	source_group(""POSIX-specific code"" FILES ${OS_SRC})
endif()

if(APPLE)
	add_definitions(-D_DARWIN_C_SOURCE)
	if(CMAKE_SYSTEM_VERSION VERSION_GREATER ""10.5.8"")
		set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -mmacosx-version-min=10.6"")
	endif()
endif()

if(NOT HAIKU AND NOT MSVC AND NOT PSP2)
	set(M_LIBRARY m)
endif()
list(APPEND OS_LIB ${M_LIBRARY})

if(APPLE OR CMAKE_C_COMPILER_ID STREQUAL ""GNU"" AND BUILD_LTO)
	set(CMAKE_C_FLAGS_RELEASE ""${CMAKE_C_FLAGS_RELEASE} -flto"")
	set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -flto"")
endif()

if(CMAKE_C_COMPILER_ID STREQUAL ""GNU"" OR CMAKE_C_COMPILER_ID STREQUAL ""Clang"" OR CMAKE_C_COMPILER_ID STREQUAL ""AppleClang"")
	find_program(OBJCOPY ${cross_prefix}objcopy)
	find_program(STRIP ${cross_prefix}strip)

	set(CMAKE_C_FLAGS_RELWITHDEBINFO ""${CMAKE_C_FLAGS_RELEASE} -gdwarf"")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELEASE} -gdwarf"")
endif()

if(BUILD_BBB OR BUILD_RASPI OR BUILD_PANDORA)
	if(NOT BUILD_EGL)
		add_definitions(-DCOLOR_16_BIT -DCOLOR_5_6_5)
	endif()
endif()

if(BUILD_RASPI)
	set(BUILD_GL OFF CACHE BOOL ""OpenGL not supported"" FORCE)
endif()

if(BUILD_PANDORA)
	add_definitions(-DBUILD_PANDORA)
endif()

if(CMAKE_SYSTEM_PROCESSOR MATCHES ""arm.*"")
	enable_language(ASM)
endif()

if(PSP2 OR WII)
	set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -Wno-format"")
endif()

if(DEFINED 3DS OR DEFINED PSP2 OR DEFINED WII OR DEFINED SWITCH)
	set(IS_EMBEDDED ON)
	set(USE_DEBUGGERS OFF)
	set(USE_SQLITE3 OFF)
	set(USE_DISCORD_RPC OFF)
	set(USE_LIBZIP OFF CACHE BOOL """")
endif()

if(DEFINED 3DS)
	add_definitions(-DFIXED_ROM_BUFFER)
endif()

if(DEFINED SWITCH)
	set(BUILD_GLES3 ON CACHE BOOL ""Build with OpenGL|ES 3"" FORCE)
endif()

if(NOT M_CORE_GBA)
	set(USE_GDB_STUB OFF)
endif()

if(NOT USE_DEBUGGERS)
	set(USE_EDITLINE OFF)
	set(USE_GDB_STUB OFF)
endif()

if(WII)
	add_definitions(-U__STRICT_ANSI__)
endif()

if(3DS OR WII)
	add_definitions(-D_GNU_SOURCE)
endif()

include(CheckCCompilerFlag)
include(CheckFunctionExists)
include(CheckIncludeFiles)
check_function_exists(strdup HAVE_STRDUP)
check_function_exists(strndup HAVE_STRNDUP)
if(NOT DEFINED PSP2)
	check_function_exists(localtime_r HAVE_LOCALTIME_R)
endif()
check_include_files(""xlocale.h"" HAVE_XLOCALE)
if(NOT CMAKE_SYSTEM_NAME STREQUAL ""Generic"")
	check_function_exists(snprintf_l HAVE_SNPRINTF_L)
	if(ANDROID AND ANDROID_NDK_MAJOR GREATER 13)
		set(HAVE_STRTOF_L ON)
	elseif(CMAKE_SYSTEM_NAME STREQUAL ""Linux"")
		# The strtof_l on Linux not actually exposed nor actually strtof_l
		set(HAVE_STRTOF_L OFF)
	else()
		check_function_exists(strtof_l HAVE_STRTOF_L)
	endif()
	check_function_exists(newlocale HAVE_NEWLOCALE)
	check_function_exists(freelocale HAVE_FREELOCALE)
	check_function_exists(uselocale HAVE_USELOCALE)
	check_function_exists(setlocale HAVE_SETLOCALE)
else()
	if(DEFINED 3DS OR DEFINED WII OR DEFINED SWITCH)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,snprintf_l)
		check_function_exists(snprintf_l HAVE_SNPRINTF_L)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,strtof_l)
		check_function_exists(strtof_l HAVE_STRTOF_L)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,newlocale)
		check_function_exists(newlocale HAVE_NEWLOCALE)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,freelocale)
		check_function_exists(freelocale HAVE_FREELOCALE)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,uselocale)
		check_function_exists(uselocale HAVE_USELOCALE)
		set(CMAKE_REQUIRED_FLAGS -Wl,--require-defined,setlocale)
		check_function_exists(setlocale HAVE_SETLOCALE)
		unset(CMAKE_REQUIRED_FLAGS)
	endif()
	if(NOT IS_EMBEDDED)
		set(DISABLE_DEPS ON CACHE BOOL ""This platform cannot build with dependencies"" FORCE)
	endif()
	set(BUILD_STATIC ON CACHE BOOL """" FORCE)
	set(BUILD_SHARED OFF CACHE BOOL """" FORCE)
	set(DISABLE_FRONTENDS ON)
	set(MINIMAL_CORE ON)
	set(ENABLE_EXTRA ON)
endif()

check_function_exists(chmod HAVE_CHMOD)
check_function_exists(umask HAVE_UMASK)

if(USE_PTHREADS)
	check_include_files(""pthread.h"" HAVE_PTHREAD_H)
	if(HAVE_PTHREAD_H)
		check_c_compiler_flag(-pthread HAVE_PTHREAD)
		if(HAVE_PTHREAD AND NOT APPLE AND NOT HAIKU)
			set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -pthread"")
			set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"")
		endif()

		check_function_exists(pthread_create HAVE_PTHREAD_CREATE)
		if(HAVE_PTHREAD_CREATE)
			add_definitions(-DUSE_PTHREADS)

			check_include_files(""pthread_np.h"" HAVE_PTHREAD_NP_H)

			check_function_exists(pthread_setname_np HAVE_PTHREAD_SETNAME_NP)
			check_function_exists(pthread_set_name_np HAVE_PTHREAD_SET_NAME_NP)
		endif()
	endif()
endif()

set(FUNCTION_DEFINES)

if(HAVE_STRDUP)
	list(APPEND FUNCTION_DEFINES HAVE_STRDUP)
endif()

if(HAVE_STRNDUP)
	list(APPEND FUNCTION_DEFINES HAVE_STRNDUP)
endif()

if(HAVE_LOCALTIME_R)
	list(APPEND FUNCTION_DEFINES HAVE_LOCALTIME_R)
endif()

if(HAVE_NEWLOCALE AND HAVE_FREELOCALE AND HAVE_USELOCALE OR APPLE)
	list(APPEND FUNCTION_DEFINES HAVE_LOCALE)
	if (HAVE_SNPRINTF_L)
		list(APPEND FUNCTION_DEFINES HAVE_SNPRINTF_L)
	endif()
endif()

if(HAVE_SETLOCALE)
	list(APPEND FUNCTION_DEFINES HAVE_SETLOCALE)
endif()

if (HAVE_STRTOF_L)
	list(APPEND FUNCTION_DEFINES HAVE_STRTOF_L)
endif()

if(HAVE_XLOCALE)
	list(APPEND FUNCTION_DEFINES HAVE_XLOCALE)
endif()

if(HAVE_CHMOD)
	list(APPEND FUNCTION_DEFINES HAVE_CHMOD)
endif()

if(HAVE_UMASK)
	list(APPEND FUNCTION_DEFINES HAVE_UMASK)
endif()

if(HAVE_PTHREAD_NP_H)
	list(APPEND FUNCTION_DEFINES HAVE_PTHREAD_NP_H)
endif()

if(HAVE_PTHREAD_SETNAME_NP)
	list(APPEND FUNCTION_DEFINES HAVE_PTHREAD_SETNAME_NP)
endif()

if(HAVE_PTHREAD_SET_NAME_NP)
	list(APPEND FUNCTION_DEFINES HAVE_PTHREAD_SET_NAME_NP)
endif()

# Feature dependencies
set(FEATURE_DEFINES)
set(FEATURE_FLAGS)
set(FEATURES)
set(ENABLES)
if(CMAKE_SYSTEM_NAME MATCHES "".*BSD|DragonFly"")
	set(LIBEDIT_LIBRARIES -ledit)
	if (CMAKE_SYSTEM_NAME STREQUAL OpenBSD)
		list(APPEND LIBEDIT_LIBRARIES -ltermcap)
	endif()
else()
	find_feature(USE_EDITLINE ""libedit"")
endif()
if(BUILD_GL)
	find_package(OpenGL QUIET)
	if(NOT OPENGL_FOUND)
		set(BUILD_GL OFF CACHE BOOL ""OpenGL not found"" FORCE)
	endif()
endif()
if(NOT BUILD_GL)
	set(OPENGL_LIBRARY """" CACHE PATH """" FORCE)
endif()
if(BUILD_GLES2 AND NOT BUILD_RASPI AND NOT CMAKE_SYSTEM_NAME MATCHES ""^(Windows|Darwin|Linux|.*BSD|DragonFly|Haiku)$"")
	find_path(OPENGLES2_INCLUDE_DIR NAMES GLES2/gl2.h)
	find_library(OPENGLES2_LIBRARY NAMES GLESv2 GLESv2_CM)
	if(NOT OPENGLES2_INCLUDE_DIR OR NOT OPENGLES2_LIBRARY)
		set(BUILD_GLES2 OFF CACHE BOOL ""OpenGL|ES 2 not found"" FORCE)
	endif()
endif()
if(NOT BUILD_GLES2)
	set(OPENGLES2_LIBRARY """" CACHE PATH """" FORCE)
endif()
if(BUILD_GL)
	list(APPEND OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c)
	list(APPEND DEPENDENCY_LIB ${OPENGL_LIBRARY})
	include_directories(${OPENGL_INCLUDE_DIR})
endif()
if(BUILD_GLES2)
	list(APPEND OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)
	list(APPEND DEPENDENCY_LIB ${OPENGLES2_LIBRARY})
	include_directories(${OPENGLES2_INCLUDE_DIR})
endif()
if(BUILD_GLES3)
	find_path(OPENGLES3_INCLUDE_DIR NAMES GLES3/gl3.h)
	find_library(OPENGLES3_LIBRARY NAMES GLESv3 GLESv2)
	if(NOT OPENGLES3_INCLUDE_DIR OR NOT OPENGLES3_LIBRARY)
		set(BUILD_GLES3 OFF CACHE BOOL ""OpenGL|ES 3 not found"" FORCE)
	endif()
endif()

if(DISABLE_DEPS)
	set(USE_GDB_STUB OFF)
	set(USE_DISCORD_RPC OFF)
	set(USE_SQLITE3 OFF)
	set(USE_PNG OFF)
	set(USE_ZLIB OFF)
endif()

set(WANT_ZLIB ${USE_ZLIB})
set(WANT_PNG ${USE_PNG})
set(WANT_SQLITE3 ${USE_SQLITE3})
set(USE_CMOCKA ${BUILD_SUITE})

find_feature(USE_FFMPEG ""libavcodec;libavfilter;libavformat;libavutil;libswscale"")
find_feature(USE_ZLIB ""ZLIB"")
find_feature(USE_MINIZIP ""minizip"")
find_feature(USE_PNG ""PNG"")
find_feature(USE_LIBZIP ""libzip"")
find_feature(USE_EPOXY ""epoxy"")
find_feature(USE_CMOCKA ""cmocka"")
find_feature(USE_SQLITE3 ""sqlite3"")
find_feature(USE_ELF ""libelf"")
find_feature(ENABLE_PYTHON ""PythonLibs"")

if(USE_FFMPEG)
	set(USE_LIBAVRESAMPLE ON)
	set(USE_LIBSWRESAMPLE ON)
	find_feature(USE_LIBAVRESAMPLE ""libavresample"")
	find_feature(USE_LIBSWRESAMPLE ""libswresample"")
endif()

# Features
add_subdirectory(src/debugger)
add_subdirectory(src/feature)

set(FEATURE_SRC)
set(CPACK_DEBIAN_PACKAGE_DEPENDS ""libc6"")

if(USE_EDITLINE)
	list(APPEND FEATURES EDITLINE)
	include_directories(AFTER ${LIBEDIT_INCLUDE_DIRS})
	link_directories(${LIBEDIT_LIBRARY_DIRS})
	set(DEBUGGER_LIB ${LIBEDIT_LIBRARIES})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libedit2"")
	list(APPEND FEATURE_SRC ""${CMAKE_CURRENT_SOURCE_DIR}/src/feature/editline/cli-el-backend.c"")
else()
	set(DEBUGGER_LIB """")
endif()

if(USE_GDB_STUB)
	list(APPEND FEATURES GDB_STUB)
	list(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/debugger/gdb-stub.c)
endif()
source_group(""Debugger"" FILES ${DEBUGGER_SRC})

if(USE_FFMPEG)
	list(APPEND FEATURES FFMPEG)
	if(USE_LIBSWRESAMPLE)
		list(APPEND FEATURES LIBSWRESAMPLE)
	else()
		list(APPEND FEATURES LIBAVRESAMPLE)
		list(APPEND FEATURES LIBAV)
	endif()
	include_directories(AFTER ${LIBAVCODEC_INCLUDE_DIRS} ${LIBAVFILTER_INCLUDE_DIRS} ${LIBAVFORMAT_INCLUDE_DIRS} ${LIBAVRESAMPLE_INCLUDE_DIRS} ${LIBAVUTIL_INCLUDE_DIRS} ${LIBSWRESAMPLE_INCLUDE_DIRS} ${LIBSWSCALE_INCLUDE_DIRS})
	link_directories(${LIBAVCODEC_LIBRARY_DIRS} ${LIBAVFILTER_LIBRARY_DIRS} ${LIBAVFORMAT_LIBRARY_DIRS} ${LIBAVRESAMPLE_LIBRARY_DIRS} ${LIBAVUTIL_LIBRARY_DIRS} ${LIBSWRESAMPLE_LIBRARY_DIRS} ${LIBSWSCALE_LIBRARY_DIRS})
	list(APPEND FEATURE_SRC ""${CMAKE_CURRENT_SOURCE_DIR}/src/feature/ffmpeg/ffmpeg-encoder.c"")
	string(REGEX MATCH ""^[0-9]+"" LIBAVCODEC_VERSION_MAJOR ${libavcodec_VERSION})
	string(REGEX MATCH ""^[0-9]+"" LIBAVFILTER_VERSION_MAJOR ${libavfilter_VERSION})
	string(REGEX MATCH ""^[0-9]+"" LIBAVFORMAT_VERSION_MAJOR ${libavformat_VERSION})
	string(REGEX MATCH ""^[0-9]+"" LIBAVUTIL_VERSION_MAJOR ${libavutil_VERSION})
	string(REGEX MATCH ""^[0-9]+"" LIBSWSCALE_VERSION_MAJOR ${libswscale_VERSION})
	list(APPEND DEPENDENCY_LIB ${LIBAVCODEC_LIBRARIES} ${LIBAVFILTER_LIBRARIES} ${LIBAVFORMAT_LIBRARIES} ${LIBAVRESAMPLE_LIBRARIES} ${LIBAVUTIL_LIBRARIES} ${LIBSWSCALE_LIBRARIES} ${LIBSWRESAMPLE_LIBRARIES})
	if(WIN32)
		list(APPEND DEPENDENCY_LIB bcrypt)
	endif()
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libavcodec${LIBAVCODEC_VERSION_MAJOR}|libavcodec-extra-${LIBAVCODEC_VERSION_MAJOR}|libavcodec-ffmpeg${LIBAVCODEC_VERSION_MAJOR}|libavcodec-ffmpeg-extra${LIBAVCODEC_VERSION_MAJOR}"")
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libavfilter${LIBAVFILTER_VERSION_MAJOR}|libavfilter-ffmpeg${LIBAVFILTER_VERSION_MAJOR}"")
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libavformat${LIBAVFORMAT_VERSION_MAJOR}|libavformat-ffmpeg${LIBAVFORMAT_VERSION_MAJOR}"")
	if(USE_LIBSWRESAMPLE)
		string(REGEX MATCH ""^[0-9]+"" LIBSWRESAMPLE_VERSION_MAJOR ${libswresample_VERSION})
		set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libswresample${LIBSWRESAMPLE_VERSION_MAJOR}|libswresample-ffmpeg${LIBSWRESAMPLE_VERSION_MAJOR}"")
	else()
		string(REGEX MATCH ""^[0-9]+"" LIBAVRESAMPLE_VERSION_MAJOR ${libavresample_VERSION})
		set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libavresample${LIBAVRESAMPLE_VERSION_MAJOR}|libavresample-ffmpeg${LIBAVRESAMPLE_VERSION_MAJOR}"")
	endif()
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libavutil${LIBAVUTIL_VERSION_MAJOR}|libavutil-ffmpeg${LIBAVUTIL_VERSION_MAJOR}"")
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libswscale${LIBSWSCALE_VERSION_MAJOR}|libswscale-ffmpeg${LIBSWSCALE_VERSION_MAJOR}"")
	set(CPACK_DEBIAN_PACKAGE_RECOMMENDS ""libavcodec-extra|libavcodec-ffmpeg-extra${LIBAVCODEC_VERSION_MAJOR}"")
	if(APPLE)
		set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -framework VideoDecodeAcceleration -framework CoreVideo"")
		set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -framework VideoDecodeAcceleration -framework CoreVideo"")
	endif()
endif()

list(APPEND THIRD_PARTY_SRC ""${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/blip_buf/blip_buf.c"")

if(WANT_ZLIB AND NOT USE_ZLIB)
	set(SKIP_INSTALL_ALL ON)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib zlib EXCLUDE_FROM_ALL)
	set_target_properties(zlibstatic PROPERTIES INCLUDE_DIRECTORIES ""${CMAKE_CURRENT_BINARY_DIR}/zlib;${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib"" POSITION_INDEPENDENT_CODE ON)
	set(ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib ${CMAKE_CURRENT_BINARY_DIR}/zlib)
	set(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib ${CMAKE_CURRENT_BINARY_DIR}/zlib)
	set(ZLIB_LIBRARY zlibstatic)
	list(APPEND DEPENDENCY_LIB zlibstatic)
	set(USE_ZLIB ON)
endif()

if(USE_ZLIB)
	list(APPEND FEATURES ZLIB)
	include_directories(AFTER ${ZLIB_INCLUDE_DIRS})
	list(APPEND DEPENDENCY_LIB ${ZLIB_LIBRARIES})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},zlib1g"")
	set(HAVE_CRC32 ON)
	list(APPEND OS_LIB ${ZLIB_LIBRARIES})
else()
	# zlib pulls in crc32
	check_function_exists(crc32 HAVE_CRC32)
endif()

if(HAVE_CRC32)
	list(APPEND FUNCTION_DEFINES HAVE_CRC32)
endif()

if(WANT_PNG AND USE_ZLIB AND NOT USE_PNG)
	set(PNG_STATIC ON CACHE BOOL """" FORCE)
	set(PNG_SHARED OFF CACHE BOOL """" FORCE)
	set(PNG_TESTS OFF CACHE BOOL """" FORCE)
	set(SKIP_INSTALL_ALL ON)
	if (SWITCH)
		set(PNG_ARM_NEON ""off"" CACHE STRING """" FORCE)
	endif()
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng libpng EXCLUDE_FROM_ALL)
	set_target_properties(png_static PROPERTIES INCLUDE_DIRECTORIES ""${CMAKE_CURRENT_BINARY_DIR}/libpng;${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng;${ZLIB_INCLUDE_DIRS}"" POSITION_INDEPENDENT_CODE ON)
	set(PNG_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng ${CMAKE_CURRENT_BINARY_DIR}/libpng)
	list(APPEND DEPENDENCY_LIB png_static)
	set(USE_PNG ON)
endif()

if(USE_PNG)
	list(APPEND FEATURES PNG)
	include_directories(AFTER ${PNG_INCLUDE_DIRS})
	list(APPEND DEPENDENCY_LIB ${PNG_LIBRARIES} ${ZLIB_LIBRARIES})
	if(PNG_VERSION_STRING)
		string(REGEX MATCH ""^[0-9]+\\.[0-9]+"" PNG_VERSION_PARTIAL ${PNG_VERSION_STRING})
		if(${PNG_VERSION_PARTIAL} STREQUAL ""1.6"")
			set(PNG_DEB_VERSION ""16-16"")
		else()
			set(PNG_DEB_VERSION ""12-0"")
		endif()
		set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libpng${PNG_DEB_VERSION}"")
	endif()
endif()

if(WANT_SQLITE3 AND NOT USE_SQLITE3)
	list(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/sqlite3/sqlite3.c)
	include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/sqlite3/)
	set(USE_SQLITE3 ON)
endif()

if(USE_LIBZIP)
	include_directories(AFTER ${LIBZIP_INCLUDE_DIRS})
	link_directories(${LIBZIP_LIBRARY_DIRS})
	list(APPEND DEPENDENCY_LIB ${LIBZIP_LIBRARIES})
	list(APPEND FEATURES LIBZIP)
	list(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c)
	string(REGEX MATCH ""^[0-9]+"" LIBZIP_VERSION_MAJOR ${libzip_VERSION})
	if (LIBZIP_VERSION_MAJOR LESS 1)
		set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libzip2"")
	elseif(LIBZIP_VERSION_MAJOR EQUAL 1)
		set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libzip4|libzip5"")
	else()
		message(AUTHOR_WARNING Unknown version of libzip detected: ${libzip_VERSION})
	endif()
elseif(USE_MINIZIP)
	include_directories(AFTER ${MINIZIP_INCLUDE_DIRS})
	link_directories(${MINIZIP_LIBRARY_DIRS})
	list(APPEND DEPENDENCY_LIB ${MINIZIP_LIBRARIES})
	list(APPEND FEATURES MINIZIP)
	list(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libminizip1"")
elseif(USE_ZLIB)
	list(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/ioapi.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/unzip.c)
	if(NOT MSVC)
		set_source_files_properties(
			${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/ioapi.c
			${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/unzip.c
			PROPERTIES COMPILE_FLAGS ""-Wno-unused-parameter -Wno-implicit-function-declaration"")
	endif()
endif()

if (USE_LZMA)
	include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma)
	add_definitions(-D_7ZIP_PPMD_SUPPPORT)
	list(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-lzma.c)
	set(LZMA_SRC
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zAlloc.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zArcIn.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zBuf.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zBuf2.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zCrc.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zCrcOpt.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zDec.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/CpuArch.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Delta.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/LzmaDec.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Lzma2Dec.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bra.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bra86.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/BraIA64.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bcj2.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Ppmd7.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Ppmd7Dec.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zFile.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zStream.c)
	list(APPEND VFS_SRC ${LZMA_SRC})
	list(APPEND FEATURES LZMA)
endif()

if(USE_EPOXY)
	list(APPEND OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)
	add_definitions(-DBUILD_GL -DBUILD_GLES2)
	list(APPEND FEATURES EPOXY)
	include_directories(AFTER ${EPOXY_INCLUDE_DIRS})
	link_directories(${EPOXY_LIBRARY_DIRS})
	set(OPENGLES2_LIBRARY ${EPOXY_LIBRARIES})
	list(APPEND DEPENDENCY_LIB ${EPOXY_LIBRARIES})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libepoxy0"")
elseif(BUILD_GL)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libgl1|libgles2"")
elseif(BUILD_GLES2)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libgles2"")
endif()

if(WIN32 AND NOT SKIP_LIBRARY AND NOT USE_EPOXY)
    message(FATAL_ERROR ""Windows requires epoxy module!"")
endif()

if(USE_SQLITE3)
	list(APPEND FEATURES SQLITE3)
	include_directories(AFTER ${SQLITE3_INCLUDE_DIRS})
	link_directories(${SQLITE3_LIBRARY_DIRS})
	list(APPEND DEPENDENCY_LIB ${SQLITE3_LIBRARIES})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libsqlite3-0"")
	list(APPEND FEATURE_SRC ""${CMAKE_CURRENT_SOURCE_DIR}/src/feature/sqlite3/no-intro.c"")
endif()

if(USE_ELF)
	list(APPEND FEATURES ELF)
	include_directories(AFTER ${LIBELF_INCLUDE_DIRS})
	link_directories(${LIBELF_LIBRARY_DIRS})
	list(APPEND DEPENDENCY_LIB ${LIBELF_LIBRARIES})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${CPACK_DEBIAN_PACKAGE_DEPENDS},libelf1"")
endif()

if (USE_DISCORD_RPC)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/discord-rpc discord-rpc EXCLUDE_FROM_ALL)
	list(APPEND FEATURES DISCORD_RPC)
	include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/discord-rpc/include)
endif()

if(ENABLE_SCRIPTING)
	list(APPEND ENABLES SCRIPTING)

	if(BUILD_PYTHON)
		find_package(PythonLibs ${USE_PYTHON_VERSION})
		list(APPEND DEPENDENCY_LIB ${PYTHON_LIBRARIES})
		include_directories(AFTER ${PYTHON_INCLUDE_DIRS})
		list(APPEND ENABLES PYTHON)
	endif()
endif()

add_subdirectory(src/arm)
add_subdirectory(src/core)
add_subdirectory(src/gb)
add_subdirectory(src/gba)
add_subdirectory(src/sm83)
add_subdirectory(src/util)

list(APPEND GUI_SRC ${EXTRA_GUI_SRC})
list(APPEND UTIL_SRC ${CMAKE_CURRENT_BINARY_DIR}/version.c)

set(TEST_SRC ${CORE_TEST_SRC})
if(M_CORE_GB)
	add_definitions(-DM_CORE_GB)
	list(APPEND CORE_SRC ${SM83_SRC} ${GB_SRC})
	list(APPEND DEBUGGER_SRC ${SM83_DEBUGGER_SRC} ${GB_DEBUGGER_SRC})
	list(APPEND TEST_SRC ${SM83_TEST_SRC} ${GB_TEST_SRC})
endif()

if(M_CORE_GBA)
	add_definitions(-DM_CORE_GBA)
	list(APPEND CORE_SRC ${ARM_SRC} ${GBA_SRC})
	list(APPEND DEBUGGER_SRC ${ARM_DEBUGGER_SRC} ${GBA_DEBUGGER_SRC})
	list(APPEND TEST_SRC ${ARM_TEST_SRC} ${GBA_TEST_SRC})
endif()

if(USE_DEBUGGERS)
	list(APPEND FEATURE_SRC ${DEBUGGER_SRC})
	list(APPEND TEST_SRC ${DEBUGGER_TEST_SRC})
	list(APPEND FEATURES DEBUGGERS)
endif()

foreach(FEATURE IN LISTS FEATURES)
	list(APPEND FEATURE_DEFINES ""USE_${FEATURE}"")
endforeach()

foreach(ENABLE IN LISTS ENABLES)
	list(APPEND FEATURE_DEFINES ""ENABLE_${ENABLE}"")
endforeach()

source_group(""Virtual files"" FILES ${CORE_VFS_SRC} ${VFS_SRC})
source_group(""Extra features"" FILES ${FEATURE_SRC})
source_group(""Third-party code"" FILES ${THIRD_PARTY_SRC})

# Platform binaries
set(OS_DEFINES)
if(DEFINED 3DS)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/3ds ${CMAKE_CURRENT_BINARY_DIR}/3ds)
endif()

if(DEFINED WII)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/wii ${CMAKE_CURRENT_BINARY_DIR}/wii)
endif()

if(DEFINED PSP2)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/psp2 ${CMAKE_CURRENT_BINARY_DIR}/psp2)
endif()

if(DEFINED SWITCH)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/switch ${CMAKE_CURRENT_BINARY_DIR}/switch)
endif()

# Binaries
list(APPEND CORE_SRC
	${UTIL_SRC}
	${CORE_VFS_SRC}
	${OS_SRC}
	${THIRD_PARTY_SRC})
list(APPEND TEST_SRC ${UTIL_TEST_SRC})

set(SRC ${CORE_SRC} ${VFS_SRC})
if(NOT MINIMAL_CORE)
	set(ENABLE_EXTRA ON)
	if(M_CORE_GBA)
		list(APPEND SRC ${GBA_SIO_SRC})
	endif()
	if(M_CORE_GB)
		list(APPEND SRC ${GB_SIO_SRC})
	endif()
	list(APPEND SRC ${FEATURE_SRC})
endif()

if(ENABLE_EXTRA)
	if(M_CORE_GBA)
		list(APPEND SRC ${GBA_EXTRA_SRC})
	endif()
	if(M_CORE_GB)
		list(APPEND SRC ${GB_EXTRA_SRC})
	endif()
	list(APPEND SRC ${EXTRA_SRC})
endif()

if(NOT SKIP_LIBRARY)
	if(NOT BUILD_STATIC AND NOT BUILD_SHARED)
		set(BUILD_SHARED ON)
	endif()

	if(BUILD_SHARED)
		add_library(${BINARY_NAME} SHARED ${SRC} ${VFS_SRC})
		if(BUILD_STATIC)
			add_library(${BINARY_NAME}-static STATIC ${SRC})
			target_include_directories(${BINARY_NAME}-static BEFORE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include)
			set_target_properties(${BINARY_NAME}-static PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES};BUILD_STATIC"" COMPILE_OPTIONS ""${FEATURE_FLAGS}"")
			install(TARGETS ${BINARY_NAME}-static DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME})
			add_dependencies(${BINARY_NAME}-static version-info)
		endif()
	else()
		add_library(${BINARY_NAME} STATIC ${SRC})
		list(APPEND OS_DEFINES BUILD_STATIC)
	endif()

	target_include_directories(${BINARY_NAME} BEFORE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include)
	set_target_properties(${BINARY_NAME} PROPERTIES VERSION ${LIB_VERSION_STRING} SOVERSION ${LIB_VERSION_ABI} COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"" COMPILE_OPTIONS ""${FEATURE_FLAGS}"")
	add_dependencies(${BINARY_NAME} version-info)

	include(GenerateExportHeader)
	file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/mgba-util)
	generate_export_header(${BINARY_NAME} BASE_NAME ${BINARY_NAME} STATIC_DEFINE BUILD_STATIC EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/include/mgba-util/dllexports.h)

	target_link_libraries(${BINARY_NAME} ${DEBUGGER_LIB} ${DEPENDENCY_LIB} ${OS_LIB})
	install(TARGETS ${BINARY_NAME} LIBRARY DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME} NAMELINK_SKIP ARCHIVE DESTINATION ${LIBDIR} RUNTIME DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME})
	if(BUILD_SHARED)
		install(TARGETS ${BINARY_NAME} LIBRARY DESTINATION ${LIBDIR} COMPONENT ${BINARY_NAME}-dev NAMELINK_ONLY)
	endif()
	if(UNIX AND NOT APPLE AND NOT HAIKU)
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-16.png DESTINATION share/icons/hicolor/16x16/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-24.png DESTINATION share/icons/hicolor/24x24/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-32.png DESTINATION share/icons/hicolor/32x32/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-48.png DESTINATION share/icons/hicolor/48x48/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-64.png DESTINATION share/icons/hicolor/64x64/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-96.png DESTINATION share/icons/hicolor/96x96/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-128.png DESTINATION share/icons/hicolor/128x128/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-256.png DESTINATION share/icons/hicolor/256x256/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-512.png DESTINATION share/icons/hicolor/512x512/apps RENAME mgba.png COMPONENT ${BINARY_NAME})
	endif()
else()
	set(BUILD_SHARED OFF)
	set(BUILD_STATIC OFF)
	find_library(${BINARY_NAME} ${BINARY_NAME})
	if(NOT ${BINARY_NAME}_FOUND)
		set(DISABLE_FRONTENDS ON)
		set(BUILD_PERF OFF)
		set(BUILD_TEST OFF)
		set(BUILD_SUITE OFF)
	endif()
endif()

if(BUILD_GL)
	add_definitions(-DBUILD_GL)
endif()

if(BUILD_GLES2)
	add_definitions(-DBUILD_GLES2)
endif()

if(BUILD_GLES3)
	add_definitions(-DBUILD_GLES3)
endif()

if(DISABLE_FRONTENDS)
	set(BUILD_SDL OFF)
	set(BUILD_QT OFF)
endif()

if(BUILD_PYTHON)
	enable_testing()
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/python ${CMAKE_CURRENT_BINARY_DIR}/python)
endif()

if(BUILD_LIBRETRO)
	file(GLOB RETRO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/libretro/*.c)
	add_library(${BINARY_NAME}_libretro SHARED ${CORE_SRC} ${RETRO_SRC})
	add_dependencies(${BINARY_NAME}_libretro version-info)
	set_target_properties(${BINARY_NAME}_libretro PROPERTIES PREFIX """" COMPILE_DEFINITIONS ""__LIBRETRO__;COLOR_16_BIT;COLOR_5_6_5;DISABLE_THREADING;MGBA_STANDALONE;${OS_DEFINES};${FUNCTION_DEFINES};MINIMAL_CORE=2"")
	target_link_libraries(${BINARY_NAME}_libretro ${OS_LIB})
	if(MSVC)
		install(TARGETS ${BINARY_NAME}_libretro RUNTIME DESTINATION ${LIBRETRO_LIBDIR} COMPONENT ${BINARY_NAME}_libretro)
	else()
		install(TARGETS ${BINARY_NAME}_libretro LIBRARY DESTINATION ${LIBRETRO_LIBDIR} COMPONENT ${BINARY_NAME}_libretro NAMELINK_SKIP)
	endif()
endif()

if(BUILD_OPENEMU)
	find_library(FOUNDATION Foundation)
	find_library(OPENEMUBASE OpenEmuBase)
	file(GLOB OE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/openemu/*.m)
	add_library(${BINARY_NAME}-openemu MODULE ${CORE_SRC} ${OS_SRC})
	set_target_properties(${BINARY_NAME}-openemu PROPERTIES
		MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/openemu/Info.plist.in
		BUNDLE TRUE
		BUNDLE_EXTENSION oecoreplugin
		OUTPUT_NAME ${PROJECT_NAME}
		COMPILE_DEFINITIONS ""DISABLE_THREADING;MGBA_STANDALONE;${OS_DEFINES};${FUNCTION_DEFINES};MINIMAL_CORE=1"")
	target_link_libraries(${BINARY_NAME}-openemu ${OS_LIB} ${FOUNDATION} ${OPENEMUBASE})
	install(TARGETS ${BINARY_NAME}-openemu LIBRARY DESTINATION ${OE_LIBDIR} COMPONENT ${BINARY_NAME}.oecoreplugin NAMELINK_SKIP)
endif()

if(BUILD_SDL)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/sdl ${CMAKE_CURRENT_BINARY_DIR}/sdl)
endif()

if(BUILD_QT)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/qt ${CMAKE_CURRENT_BINARY_DIR}/qt)
endif()

if(BUILD_PERF)
	set(PERF_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/test/perf-main.c)
	if(UNIX AND NOT APPLE)
		list(APPEND PERF_LIB rt)
	endif()

	add_executable(${BINARY_NAME}-perf ${PERF_SRC})
	target_link_libraries(${BINARY_NAME}-perf ${BINARY_NAME} ${PERF_LIB} ${OS_LIB})
	set_target_properties(${BINARY_NAME}-perf PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"")
	install(TARGETS ${BINARY_NAME}-perf DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${BINARY_NAME}-perf)
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/tools/perf.py DESTINATION ""${LIBDIR}/${BINARY_NAME}"" COMPONENT ${BINARY_NAME}-perf)
endif()

if(BUILD_TEST)
	add_executable(${BINARY_NAME}-fuzz ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/test/fuzz-main.c)
	target_link_libraries(${BINARY_NAME}-fuzz ${BINARY_NAME})
	set_target_properties(${BINARY_NAME}-fuzz PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"")
	add_executable(tbl-fuzz ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/test/tbl-fuzz-main.c)
	target_link_libraries(tbl-fuzz ${BINARY_NAME})
	set_target_properties(tbl-fuzz PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"")
	install(TARGETS ${BINARY_NAME}-fuzz tbl-fuzz DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${BINARY_NAME}-test)
endif()

if(NOT USE_CMOCKA)
	set(BUILD_SUITE OFF)
endif()
if(BUILD_SUITE)
	enable_testing()
	include_directories(AFTER ${CMOCKA_INCLUDE_DIRS})
	link_directories(${CMOCKA_LIBRARY_DIRS})

	foreach(TEST IN LISTS TEST_SRC)
		string(REPLACE ""${CMAKE_SOURCE_DIR}/src/"" """" TEST_NAME ""${TEST}"")
		string(REPLACE ""/"" ""-"" TEST_NAME ""${TEST_NAME}"")
		string(REPLACE ""-test"" """" TEST_NAME ""${TEST_NAME}"")
		string(REPLACE "".c"" """" TEST_NAME ""${TEST_NAME}"")
		add_executable(test-${TEST_NAME} ${TEST})
		target_link_libraries(test-${TEST_NAME} ${BINARY_NAME} ${PLATFORM_LIBRARY} cmocka)
		set_target_properties(test-${TEST_NAME} PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"")
		add_test(${TEST_NAME} test-${TEST_NAME})
	endforeach()
endif()

if(BUILD_EXAMPLE)
	add_executable(${BINARY_NAME}-example-server ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/example/client-server/server.c)
	target_link_libraries(${BINARY_NAME}-example-server ${BINARY_NAME})
	set_target_properties(${BINARY_NAME}-example-server PROPERTIES COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}"")

	if(SDL_FOUND)
		add_executable(${BINARY_NAME}-example-client ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/example/client-server/client.c)
		target_link_libraries(${BINARY_NAME}-example-client ${BINARY_NAME} ${SDL_LIBRARY} ${SDLMAIN_LIBRARY} ${OPENGL_LIBRARY} ${OPENGLES2_LIBRARY})
		set_target_properties(${BINARY_NAME}-example-client PROPERTIES
		                      COMPILE_DEFINITIONS ""${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}""
		                      INCLUDE_DIRECTORIES ""${SDL_INCLUDE_DIR};${CMAKE_CURRENT_SOURCE_DIR}/src;${CMAKE_CURRENT_SOURCE_DIR}/include"")
	endif()
endif()

file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/mgba)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/core/flags.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/mgba/flags.h)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mgba DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT ${BINARY_NAME}-dev FILES_MATCHING PATTERN ""*.h"")
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mgba-util DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT ${BINARY_NAME}-dev FILES_MATCHING PATTERN ""*.h"")
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/mgba/flags.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mgba COMPONENT ${BINARY_NAME}-dev)

if(WIN32)
	set(BIN_DIR "".\\"")
	string(REGEX REPLACE ""[^-A-Za-z0-9_.]"" ""-"" CLEAN_VERSION_STRING ""${VERSION_STRING}"")
	file(RELATIVE_PATH SETUP_DIR_SLASH ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/setup"")
	file(RELATIVE_PATH RES_DIR_SLASH ""${CMAKE_CURRENT_BINARY_DIR}"" ""${CMAKE_CURRENT_SOURCE_DIR}/res"")
	string(REPLACE ""/"" ""\\"" SETUP_DIR ""${SETUP_DIR_SLASH}"")
	string(REPLACE ""/"" ""\\"" RES_DIR ""${RES_DIR_SLASH}"")
	if(CMAKE_SYSTEM_PROCESSOR MATCHES "".*64$"")
		set(WIN_BITS 64)
	else()
		set(WIN_BITS 32)
	endif()
	if(GIT_TAG)
		set(IS_RELEASE 1)
	else()
		set(IS_RELEASE 0)
	endif()
	configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/setup/setup.iss.in"" ${CMAKE_CURRENT_BINARY_DIR}/setup.iss)
endif()

# Packaging
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/blip_buf.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/inih.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
if(USE_DISCORD_RPC)
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/discord-rpc.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/rapidjson.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
	if(WIN32)
		install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/mingw-std-threads.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
	endif()
endif()
if(EXTRA_LICENSES)
	install(FILES ${EXTRA_LICENSES} DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})
endif()

file(GLOB READMES ${CMAKE_CURRENT_SOURCE_DIR}/README*.md)

find_program(UNIX2DOS NAMES unix2dos)
find_program(MARKDOWN NAMES markdown kramdown pandoc)

if(UNIX OR NOT UNIX2DOS)
	if(UNIX OR NOT MARKDOWN)
		install(FILES ${READMES} DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})
	endif()
	install(FILES ""${CMAKE_CURRENT_SOURCE_DIR}/CHANGES"" ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"" DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})
else()
	add_custom_command(OUTPUT CHANGES.txt COMMAND ${UNIX2DOS} -n ""${CMAKE_CURRENT_SOURCE_DIR}/CHANGES"" ""${CMAKE_CURRENT_BINARY_DIR}/CHANGES.txt"" MAIN_DEPENDENCY ""${CMAKE_CURRENT_SOURCE_DIR}/CHANGES"")
	add_custom_command(OUTPUT LICENSE.txt COMMAND ${UNIX2DOS} -n ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"" ""${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt"" MAIN_DEPENDENCY ""${CMAKE_CURRENT_SOURCE_DIR}/LICENSE"")
	add_custom_target(CHANGES ALL DEPENDS CHANGES.txt)
	add_custom_target(LICENSE ALL DEPENDS LICENSE.txt)
	install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CHANGES.txt ${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})
	if(DISTBUILD AND WIN32)
		if(INSTALLER_NAME)
			set(INSTALLER_TARGET ""${INSTALLER_NAME}.exe"")
			set(ISCC_FLAGS ""/F${INSTALLER_NAME}"")
		else()
			set(INSTALLER_TARGET ""${PROJECT_NAME}-setup-${CLEAN_VERSION_STRING}-win${WIN_BITS}.exe"")
		endif()
		if(CMAKE_CROSSCOMPILING)
			find_program(WINE NAMES wine wine-stable wine-development)
			find_file(ISCC ISCC.exe HINTS ""$ENV{HOME}/.wine/drive_c/Program Files/"" PATH_SUFFIXES ""Inno Setup 5"")
			message(STATUS ""${WINE}"" ""${ISCC}"" setup.iss /Q ${ISCC_FLAGS})
			add_custom_command(OUTPUT ${INSTALLER_TARGET}
			                   COMMAND ""${WINE}"" ""${ISCC}"" setup.iss /Q ${ISCC_FLAGS}
			                   DEPENDS ${BINARY_NAME}-qt ${BINARY_NAME}-sdl CHANGES LICENSE)
		else()
			find_program(ISCC NAMES ISCC ISCC.exe PATH_SUFFIXES ""Inno Setup 5"")
			add_custom_command(OUTPUT ${INSTALLER_TARGET}
			                   COMMAND ""${ISCC}"" setup.iss /Q ${ISCC_FLAGS}
			                   DEPENDS ${BINARY_NAME}-qt ${BINARY_NAME}-sdl CHANGES LICENSE)
		endif()
		if(ISCC)
			add_custom_target(installer ALL DEPENDS ${INSTALLER_TARGET})
			install(FILES ""${CMAKE_CURRENT_BINARY_DIR}/${INSTALLER_TARGET}"" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT installer)
		endif()
	endif()
endif()

if(MARKDOWN)
	foreach(README ${READMES})
		get_filename_component(README_BASE ""${README}"" NAME_WE)
		add_custom_command(OUTPUT ${README_BASE}.html COMMAND ${MARKDOWN} ""${README}"" > ${README_BASE}.html MAIN_DEPENDENCY ""${README}"")
		add_custom_target(${README_BASE} ALL DEPENDS ${README_BASE}.html)
		install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${README_BASE}.html DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})
	endforeach()
endif()

set(CPACK_PACKAGE_VERSION ${VERSION_STRING})
set(CPACK_PACKAGE_VERSION_MAJOR ${LIB_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${LIB_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${LIB_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE)
set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/README.md)

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""mGBA Game Boy Advance Emulator"")
set(CPACK_PACKAGE_VENDOR ""Jeffrey Pfau"")
set(CPACK_PACKAGE_CONTACT ""Jeffrey Pfau <jeffrey@endrift.com>"")
set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_CURRENT_SOURCE_DIR}/README.md"")
set(CPACK_DEBIAN_PACKAGE_SECTION ""games"")

set(CPACK_DEB_COMPONENT_INSTALL ON)

if(CMAKE_BUILD_TYPE STREQUAL ""Release"")
	set(CPACK_STRIP_FILES ON)
endif()

if(DISTBUILD)
	set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
	if(CMAKE_BUILD_TYPE STREQUAL ""RelWithDebInfo"" AND BUILD_SHARED)
		if(NOT APPLE)
			add_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND ""${OBJCOPY}"" --only-keep-debug ""$<TARGET_FILE:${BINARY_NAME}>"" ""$<TARGET_FILE:${BINARY_NAME}>.debug"")
			add_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND ""${STRIP}"" ""$<TARGET_FILE:${BINARY_NAME}>"")
			add_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND ""${OBJCOPY}"" --add-gnu-debuglink ""$<TARGET_FILE:${BINARY_NAME}>.debug"" ""$<TARGET_FILE:${BINARY_NAME}>"")
			install(FILES ""$<TARGET_FILE:${BINARY_NAME}>.debug"" DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME}-dbg)
		endif()
	endif()
	if(APPLE)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-qt ${BINARY_NAME}-sdl ${BINARY_NAME}-qt-dbg ${BINARY_NAME}-sdl-dbg ${BINARY_NAME}-perf)
		set(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)
	elseif(WIN32)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-qt ${BINARY_NAME}-sdl ${BINARY_NAME}-qt-dbg ${BINARY_NAME}-sdl-dbg ${BINARY_NAME}-perf installer)
	elseif(3DS)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-3ds ${BINARY_NAME}-perf)
	elseif(WII)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-wii)
	elseif(PSP2)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-psp2)
	elseif(SWITCH)
		set(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-switch)
	endif()
endif()

include(CPack)

cpack_add_component_group(base)
cpack_add_component(${BINARY_NAME} GROUP base)

cpack_add_component_group(dev PARENT_GROUP base)
if(BUILD_SHARED)
	cpack_add_component(lib${BINARY_NAME} GROUP base)
	if(BUILD_STATIC)
		cpack_add_component(lib${BINARY_NAME}-static GROUP dev)
	endif()
elseif(BUILD_STATIC)
	cpack_add_component(lib${BINARY_NAME} GROUP dev)
endif()
cpack_add_component(${BINARY_NAME}-dev GROUP dev)

if(3DS)
	cpack_add_component(${BINARY_NAME}-3ds GROUP base)
elseif(PSP2)
	cpack_add_component(${BINARY_NAME}-psp2 GROUP base)
elseif(WII)
	cpack_add_component(${BINARY_NAME}-wii GROUP base)
elseif(SWITCH)
	cpack_add_component(${BINARY_NAME}-switch GROUP base)
endif()

if(BUILD_QT)
	cpack_add_component_group(qt PARENT_GROUP base)
	cpack_add_component(${BINARY_NAME}-qt GROUP qt)
endif()

if(SDL_FOUND)
	cpack_add_component_group(sdl PARENT_GROUP base)
	cpack_add_component(${BINARY_NAME}-sdl GROUP sdl)
endif()

if(DISTBUILD)
	cpack_add_component_group(debug PARENT_GROUP dev)
	if(BUILD_SHARED AND NOT IS_EMBEDDED)
		cpack_add_component(lib${BINARY_NAME}-dbg GROUP debug)
	endif()
	if(IS_EMBEDDED)
		cpack_add_component(${BINARY_NAME}-dbg GROUP debug)
	endif()
	if(BUILD_QT)
		cpack_add_component(${BINARY_NAME}-qt-dbg GROUP debug)
	endif()
	if(SDL_FOUND)
		cpack_add_component(${BINARY_NAME}-sdl-dbg GROUP debug)
	endif()
	if(WIN32)
		cpack_add_component_group(installer PARENT_GROUP base)
	endif()
endif()

cpack_add_component_group(test PARENT_GROUP dev)
cpack_add_component(${BINARY_NAME}-perf GROUP test)
cpack_add_component(${BINARY_NAME}-fuzz GROUP test)
cpack_add_component(tbl-fuzz GROUP test)

# Summaries
set(SUMMARY_GL_LIST)
if(USE_EPOXY)
	set(SUMMARY_GL_LIST ""libepoxy"")
else()
	if(BUILD_GL)
		list(APPEND SUMMARY_GL_LIST ""OpenGL"")
	endif()
	if(BUILD_GLES2)
		list(APPEND SUMMARY_GL_LIST ""OpenGL|ES 2"")
	endif()
	if(BUILD_GLES3)
		list(APPEND SUMMARY_GL_LIST ""OpenGL|ES 3"")
	endif()
endif()
if(NOT SUMMARY_GL_LIST)
	set(SUMMARY_GL OFF)
else()
	string(REPLACE "";"" "", "" SUMMARY_GL ""${SUMMARY_GL_LIST}"")
endif()
if(USE_LIBZIP)
	set(SUMMARY_ZIP libzip)
elseif(USE_MINIZIP)
	set(SUMMARY_ZIP ""minizip (external)"")
elseif(USE_ZLIB)
	set(SUMMARY_ZIP ""minizip (included)"")
else()
	set(SUMMARY_ZIP OFF)
endif()

if(NOT QUIET AND NOT LIBMGBA_ONLY)
	message(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")
	message(STATUS ""Platforms:"")
	message(STATUS ""	Game Boy Advance: ${M_CORE_GBA}"")
	message(STATUS ""	Game Boy: ${M_CORE_GB}"")
	message(STATUS ""Features:"")
	message(STATUS ""	Debuggers: ${USE_DEBUGGERS}"")
	if(NOT WIN32)
		message(STATUS ""	CLI debugger: ${USE_EDITLINE}"")
	endif()
	message(STATUS ""	GDB stub: ${USE_GDB_STUB}"")
	message(STATUS ""	GIF/Video recording: ${USE_FFMPEG}"")
	message(STATUS ""	Screenshot/advanced savestate support: ${USE_PNG}"")
	message(STATUS ""	ZIP support: ${SUMMARY_ZIP}"")
	message(STATUS ""	7-Zip support: ${USE_LZMA}"")
	message(STATUS ""	SQLite3 game database: ${USE_SQLITE3}"")
	message(STATUS ""	ELF loading support: ${USE_ELF}"")
	message(STATUS ""	Discord Rich Presence support: ${USE_DISCORD_RPC}"")
	message(STATUS ""	OpenGL support: ${SUMMARY_GL}"")
	message(STATUS ""Frontends:"")
	message(STATUS ""	Qt: ${BUILD_QT}"")
	message(STATUS ""	SDL (${SDL_VERSION}): ${BUILD_SDL}"")
	message(STATUS ""	Profiling: ${BUILD_PERF}"")
	message(STATUS ""	Test harness: ${BUILD_TEST}"")
	message(STATUS ""	Test suite: ${BUILD_SUITE}"")
	message(STATUS ""	Python bindings: ${BUILD_PYTHON}"")
	message(STATUS ""	Examples: ${BUILD_EXAMPLE}"")
	message(STATUS ""Cores:"")
	message(STATUS ""	Libretro core: ${BUILD_LIBRETRO}"")
	if(APPLE)
		message(STATUS ""	OpenEmu core: ${BUILD_OPENEMU}"")
	endif()
	message(STATUS ""Libraries:"")
	message(STATUS ""	Static: ${BUILD_STATIC}"")
	message(STATUS ""	Shared: ${BUILD_SHARED}"")
endif()
",3.1,3.1
45072,planeworld,planeworld,False,False,False,False,False,2,C++,2019-07-15 18:34:47+00:00,2016-03-05 16:53:43+00:00,3,725,"cmake_minimum_required(VERSION 3.1)

SET(OpenGL_GL_PREFERENCE ""GLVND"")
SET(CMAKE_CXX_FLAGS ""-std=c++14 -mtune=native -Wall -Wextra -pedantic"" CACHE STRING """")

SET(DEFAULTDATADIR ${CMAKE_INSTALL_PREFIX}/share/planeworld)
ADD_DEFINITIONS(-DDEFAULTDATADIR=""${DEFAULTDATADIR}"")

PROJECT (planeworld)

OPTION(COMPILE_UNIT_TESTS ""Compile unit tests. "" OFF)

IF(COMPILE_UNIT_TESTS)
    ADD_SUBDIRECTORY(pw_unit)
ENDIF(COMPILE_UNIT_TESTS)

ADD_SUBDIRECTORY(pw_util)
ADD_SUBDIRECTORY(pw_system)
ADD_SUBDIRECTORY(testing)
ADD_SUBDIRECTORY(data)

#INSTALL (FILES SETENV DESTINATION .)
",3.1,3.1
45097,7ofNine,piranha,False,False,False,False,False,2,C++,2019-03-25 01:08:19+00:00,2017-08-28 19:03:12+00:00,0,3029,"# Modified to only support MSVC >=2017 any longer and nothing else.
# The CMAKE is kept to keep some of the generations/installations easier
#
CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0 FATAL_ERROR)

PROJECT(Piranha CXX)

# This syntax was introduced by CMake 2.6 to handle backwards compatibility.
IF(COMMAND cmake_policy)
    CMAKE_POLICY(VERSION 2.6)
ENDIF(COMMAND cmake_policy)

# we only support MSVC >=2017 and 64 Bit
IF(MSVC)
        IF(MSVC_VERSION LESS 1910)
             MESSAGE(STATUS ""This version ${MSVC_VERSION} of MSVC is not tested. It may work or not"")
        ENDIF()

        # Check for 64 bit support via pointer size.
        IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            MESSAGE(STATUS ""64 bit support detected"")
        ELSE()
            MESSAGE(FATAL_ERROR ""No 64 bit support detected"")
        ENDIF()

#        SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D__GMP_LIBGMP_DLL)                # i.e. it has to be the dll of MPIR, do we really need that?

#        SET(LIB_INSTALL_PATH .)
#        SET(PIRANHA_INSTALL_PREFIX ""${PIRANHA_INSTALL_PREFIX} ${PIRANHA_VERSION}"")
ELSE(MSVC)
        MESSAGE(FATAL_ERROR ""Only Microsoft Visual Studio >= 15 (2017) is supported"")
ENDIF(MSVC)


ENABLE_TESTING()

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules) # Our own CMAKE scripts
INCLUDE(CMakeDependentOption)
INCLUDE(PiranhaCompilerLinkerSettings)
INCLUDE(PiranhaVersionSetup)

# Place this after having determined the version number.
INCLUDE(PiranhaCPackSetup)


# Main build options
OPTION(BUILD_ENABLE_ASSERTS ""Enable asserts in code, for debugging."" ON)

OPTION(BUILD_PYRANHA ""Build Python bindings."" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_DFS ""Build double coefficient Fourier series manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_DPOLY ""Build double coefficient multivariate polynomial manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_ZPOLY ""Build arbitrary-size integer coefficient multivariate polynomial manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_QPOLY ""Build arbitrary-size rational coefficient multivariate polynomial manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_QQPOLY ""Build arbitrary-size rational coefficient multivariate polynomial manipulator with rational exponents in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_DPS ""Build double precision Poisson series manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_QPS ""Build rational coeffcient Poisson series manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_DQPS ""Build double coefficient - rational exponents Poisson series manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_QQPS ""Build rational coefficient - rational exponents Poisson series manipulator in Pyranha."" ON ""BUILD_PYRANHA"" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_GUI ""Build PyQt4 gui for pyranha."" OFF ""BUILD_PYRANHA"" OFF) # TODO:?? upgrade to qt5??

OPTION(BUILD_TESTS ""Build performance and correctness tests."" OFF)


# control build of load library (dll)
IF(BUILD_PYRANHA)
        INCLUDE(PiranhaPythonSetup)  # we need the python includes for piranha.dll
        PIRANHA_PYTHON_SETUP()
ENDIF()

# Set default build type to ""Release"", change it in the GUI if you need to build with debug.
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release CACHE STRING ""Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(MANDATORY_LIBRARIES """")
SET(PIRANHA_DEFINITIONS """")


#Cache size.
SET(CACHE_SIZE 512 CACHE STRING ""Cache size in kilobytes."")
SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_CACHE_SIZE=${CACHE_SIZE})
MARK_AS_ADVANCED(CACHE_SIZE)

MESSAGE(STATUS ""Source directory: ${CMAKE_SOURCE_DIR}"")

# Platform switches.
#SET(PIRANHA_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})


# Find MPIR, the Windows incarnation of GMP/MPFR. The C and CXX are combined into the same dll and use the same header
FIND_PACKAGE(MPIR MODULE REQUIRED) # we have findMPIR in our local cmake script folder


# Note: the order seems important here, at least in MinGW.
SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} ${MPIR_LIBRARIES})
INCLUDE_DIRECTORIES(${MPIR_INCLUDE_DIR}) # MPIR is probably needed evwerywhere

# Common stuff
SET(THEORIES_INSTALL_PATH ""theories"")
SET(EXAMPLES_INSTALL_PATH ""examples"")

IF(BUILD_ENABLE_ASSERTS)
        SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_ENABLE_ASSERTS)
ENDIF()

ADD_DEFINITIONS(${PIRANHA_DEFINITIONS})

# Add libraries (static and DLL)
ADD_SUBDIRECTORY(src)

# Add the tests
IF(BUILD_TESTS)
        ADD_SUBDIRECTORY(tests)
ENDIF(BUILD_TESTS)

# should be set form outside
SET(MY_PIRANHA_INSTALL ""D:\\temp for tests\\${CMAKE_PROJECT_NAME}"")
# Installation directory
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
        SET(CMAKE_INSTALL_PREFIX ${MY_PIRANHA_INSTALL} CACHE PATH ""Path to the PYRANHA installation"" FORCE)
endif()

# Pyranha: piranha's python bindings
IF(BUILD_PYRANHA)
    SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} piranha) # the piranha.dll is needed
    ADD_SUBDIRECTORY(pyranha)
	
	# installation of PYRANHA
	SET(WIN_PKG_ROOT ${CMAKE_SOURCE_DIR}/WinPackage)
	#CONFIGURE_FILE(${WIN_PKG_ROOT}/template.console.xml ${WIN_PKG_ROOT}/generated.console.xml)  #TODO: one day
	
    SET(WIN_PKG_FILES
						${WIN_PKG_ROOT}/Console.exe
						${WIN_PKG_ROOT}/ConsoleHook.dll
						${WIN_PKG_ROOT}/FreeImagePlus.dll
            #$$         ${WIN_PKG_ROOT}/console.chm   # TODO: get it from somewhere or build it
						${WIN_PKG_ROOT}/console.xml
            #            ${CMAKE_SOURCE_DIR}/extras/ipy_profile_pyranha.py
                        ${CMAKE_SOURCE_DIR}/extras/matplotlibrc
		)
		
	SET(WIN_PKG_FILES ${WIN_PKG_FILES} ${MPIR_INCLUDE_DIR}/mpir.dll) # header in library for mpir are in the same folder
		
    INSTALL(FILES ${WIN_PKG_FILES} DESTINATION .)
	
	INSTALL(FILES  ${CMAKE_SOURCE_DIR}/extras/ipy_profile_pyranha.py  DESTINATION .ipython/profile_pyranha/startup) # install pyranha startup for ipython

	
	## TODO: npp. we have it installed. should find it and not reinstall whatever outdated version of it
            #$$     # Now let's setup npp. TODO: do we need that?
            #$$     INSTALL(FILES
            #$$         ${WIN_PKG_ROOT}/npp/config.model.xml
            #$$         ${WIN_PKG_ROOT}/npp/notepad++.exe
            #$$         ${WIN_PKG_ROOT}/npp/doLocalConf.xml
            #$$         ${WIN_PKG_ROOT}/npp/shortcuts.xml
            #$$         ${WIN_PKG_ROOT}/npp/stylers.model.xml
            #$$         ${WIN_PKG_ROOT}/npp/langs.model.xml
            #$$         ${WIN_PKG_ROOT}/npp/readme.txt
            #$$         ${WIN_PKG_ROOT}/npp/change.log
            #$$         ${WIN_PKG_ROOT}/npp/license.txt
            #$$         ${WIN_PKG_ROOT}/npp/SciLexer.dll
            #$$         ${WIN_PKG_ROOT}/npp/contextMenu.xml
            #$$         ${WIN_PKG_ROOT}/npp/LINEDRAW.TTF
            #$$         DESTINATION npp
            #$$     )
            #$$     INSTALL(FILES
            #$$         ${WIN_PKG_ROOT}/npp/plugins/FTP_synchronize.dll
            #$$         ${WIN_PKG_ROOT}/npp/plugins/NppAutoIndent.dll
            #$$         ${WIN_PKG_ROOT}/npp/plugins/NppDocShare.dll
            #$$         ${WIN_PKG_ROOT}/npp/plugins/NppExport.dll
            #$$         ${WIN_PKG_ROOT}/npp/plugins/docMonitor.dll
            #$$         ${WIN_PKG_ROOT}/npp/plugins/mimeTools.unicode.dll
            #$$         DESTINATION npp/plugins
            #$$     )
            #$$     INSTALL(FILES
            #$$         ${WIN_PKG_ROOT}/npp/plugins/doc/FTP_synchonize.ReadMe.txt
            #$$         DESTINATION npp/plugins/doc
            #$$     )
            #$$     INSTALL(FILES
            #$$         ${WIN_PKG_ROOT}/npp/plugins/Config/NppAutoIndent.ini
            #$$         DESTINATION npp/plugins/Config
            #$$     )
            #$$     INSTALL(FILES
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/actionscript.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/cpp.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/css.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/html.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/javascript.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/nsis.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/perl.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/python.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/sql.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/vb.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/xml.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/c.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/cs.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/fortran.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/java.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/lisp.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/pascal.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/php.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/rc.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/tex.xml
            #$$         ${WIN_PKG_ROOT}/npp/plugins/APIs/vhdl.xml
            #$$         DESTINATION npp/plugins/APIs
            #$$     )
            #$$
            #$$     INSTALL(FILES
            #$$         ${CMAKE_SOURCE_DIR}/extras/ipy_profile_pyranha.py
            #$$#            ${CMAKE_SOURCE_DIR}/extras/matplotlibrc
            #$$         DESTINATION .ipython/profile_pyranha/startup
            #$$     )
            #$$
            #$$     INSTALL(FILES
            #$$         ${CMAKE_SOURCE_DIR}/extras/matplotlibrc
            #$$         DESTINATION .
            #$$     )
            #$$
            #$$
            #$$ ENDIF(WIN32)
ENDIF(BUILD_PYRANHA)

            #$$# Install theories of motion and examples.
            #$$SET(THEORIES_FILES
            #$$ theories_of_motion/elp1.dps
            #$$ theories_of_motion/elp2.dfs
            #$$ theories_of_motion/elp3.dfs
            #$$)
            #$$
            #$$SET(EXAMPLES_FILES
            #$$ pyranha/examples/alt_besselJ.py
            #$$)
            #$$
            #$$INSTALL(FILES ${THEORIES_FILES} DESTINATION ""${THEORIES_INSTALL_PATH}"")
            #$$INSTALL(FILES ${EXAMPLES_FILES} DESTINATION ""${EXAMPLES_INSTALL_PATH}"")
            #$$IF(WIN32)
            #$$ CONFIGURE_FILE(""${CMAKE_SOURCE_DIR}/COPYING"" ""${CMAKE_SOURCE_DIR}/windows_package/license.txt"")
            #$$ CONFIGURE_FILE(""${CMAKE_SOURCE_DIR}/Changelog"" ""${CMAKE_SOURCE_DIR}/windows_package/changelog.txt"")
            #$$ INSTALL(FILES ""${CMAKE_SOURCE_DIR}/windows_package/license.txt"" ""${CMAKE_SOURCE_DIR}/windows_package/changelog.txt"" DESTINATION .)
            #$$ENDIF(WIN32)
            #$$
            #$$INCLUDE(CPack)
            #$$
            #$$
",3.10.0,3.1
45171,AxioDL,NODLib,False,False,False,False,False,9,C++,2020-04-11 22:45:23+00:00,2015-06-26 05:01:26+00:00,3,230,"if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  cmake_minimum_required(VERSION 3.10 FATAL_ERROR) # because of c++17
  project(nod VERSION 0.1)
  if (NOT MSVC)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
  endif()
endif()

include (CMakePackageConfigHelpers)

if (MSVC)
  # Shaddup MSVC
  add_definitions(-DUNICODE=1 -D_UNICODE=1 -D__SSE__=1 -D_CRT_SECURE_NO_WARNINGS=1 -DD_SCL_SECURE_NO_WARNINGS=1
      /IGNORE:4221 /wd4018 /wd4800 /wd4005 /wd4311 /wd4267 /wd4244 /wd4200 /wd4305 /wd4067 /wd4146 ${VS_DEFINES})
endif()

if (NOT TARGET logvisor)
  add_subdirectory(logvisor)
endif()

add_subdirectory(lib)
add_subdirectory(driver)

set(version_config_file ""${PROJECT_BINARY_DIR}/nodConfigVersion.cmake"")
set(config_file ""${PROJECT_BINARY_DIR}/nodConfig.cmake"")
set(config_install_dir ""lib/cmake/nod"")

# Install the target config files
install(
    EXPORT nodTargets
    NAMESPACE ""nod::""
    DESTINATION ""${config_install_dir}""
)

# Generate version config file
write_basic_package_version_file(
    ""${version_config_file}""
    COMPATIBILITY SameMajorVersion
)

# Generate config file
configure_package_config_file(
    ""Config.cmake.in""
    ""${config_file}""
    INSTALL_DESTINATION ""lib/cmake/nod""
)

# Install the config files
install(
    FILES ""${config_file}"" ""${version_config_file}""
    DESTINATION ${config_install_dir}
)
",3.10,3.1
45177,myriadrf,LimeSuite,False,False,False,False,False,34,C,2020-05-06 13:45:47+00:00,2015-07-07 09:25:08+00:00,265,1972,"########################################################################
## Create lime-suite project
########################################################################
cmake_minimum_required(VERSION 3.1.3)
set(CMAKE_CONFIGURATION_TYPES ""Debug;Release;RelWithDebInfo"" CACHE TYPE INTERNAL FORCE)
project(""LimeSuite"")

option(BUILD_SHARED_LIBS ""Build the shared library"" ON)

#include modules for finding CyAPI
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_SOURCE_DIR}/cmake/Modules/"")

cmake_policy(SET CMP0015 OLD)
if(${CMAKE_MAJOR_VERSION} GREATER 2)
    cmake_policy(SET CMP0043 NEW)
endif()

list(FIND CMAKE_CONFIGURATION_TYPES ""${CMAKE_BUILD_TYPE}"" index)
if (${index} EQUAL -1)
   set(CMAKE_BUILD_TYPE ""Release"")
endif()

########################################################################
# Gather version information from the changelog
# LIME_SUITE_API_VERSION in VersionInfo.h reflects the major/minor
########################################################################
file(READ ""${PROJECT_SOURCE_DIR}/Changelog.txt"" changelog_txt)
string(REGEX MATCH ""Release ([0-9]+)\\.([0-9]+)\\.([0-9]+) \\("" CHANGELOG_MATCH ""${changelog_txt}"")
if(NOT CHANGELOG_MATCH)
    message(FATAL_ERROR ""Failed to extract version number from Changelog.txt"")
endif(NOT CHANGELOG_MATCH)
set(VERSION_MAJOR ""${CMAKE_MATCH_1}"")
set(VERSION_MINOR ""${CMAKE_MATCH_2}"")
set(VERSION_PATCH ""${CMAKE_MATCH_3}"")

# the ABI compatibility number should be incremented when the ABI changes
# the format is to use the same major and minor, but to have an incrementing
# number if there are changes within the major.minor release series
set(LIME_SUITE_SOVER ""${VERSION_MAJOR}.${VERSION_MINOR}-1"")

# packagers may specify -DLIME_SUITE_EXTVER=""foo"" to replace the git hash
if (NOT LIME_SUITE_EXTVER)
    include(${PROJECT_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake)
    get_git_head_revision(GITREFSPEC GITHASH)
    if (GITHASH)
        string(SUBSTRING ""${GITHASH}"" 0 8 GITHASH)
        set(LIME_SUITE_EXTVER ""g${GITHASH}"")
    else (GITHASH)
        set(LIME_SUITE_EXTVER ""unknown"")
    endif (GITHASH)
endif()

set(LIME_SUITE_LIBVER ""${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"")
set(LIME_SUITE_VERSION ""${LIME_SUITE_LIBVER}-${LIME_SUITE_EXTVER}"")
string(TIMESTAMP BUILD_TIMESTAMP ""%Y-%m-%d"")

#LIME_SUITE_ROOT is compiled into the library to locate the install base.
#By default, the LIME_SUITE_ROOT is set to the CMAKE_INSTALL_PREFIX.
#However users may overload this by specifying -DLIME_SUITE_ROOT=<path>.
set(LIME_SUITE_ROOT ""${CMAKE_INSTALL_PREFIX}"" CACHE PATH
    ""Installation root for lime::getLimeSuiteRoot()"")
file(TO_CMAKE_PATH ""${LIME_SUITE_ROOT}"" LIME_SUITE_ROOT)

########################################################################
## compiler flags
########################################################################

#C++11 is a required language feature for this project
set(CMAKE_CXX_STANDARD 11)

#is this processor x86? set variable X86
if(CMAKE_SYSTEM_PROCESSOR MATCHES ""i686.*|i386.*|x86.*|amd64.*|AMD64.*"")
    set(X86 TRUE)
else()
    set(X86 FALSE)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)

    #enable C++11 on older versions of cmake
    if (CMAKE_VERSION VERSION_LESS ""3.1"")
        set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++0x"")
    endif()

    #enable warnings in Debug configurations
    if (NOT CMAKE_BUILD_TYPE STREQUAL ""Release"")
    	add_compile_options(-Wall -Wpedantic)
    endif()

    #symbols are only exported from libraries/modules explicitly
    add_compile_options(-fvisibility=hidden)
    set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden"")

    #default SIMD configuration uses native build flags
    #when packaging and x86, use sse3 so the binaries work across multiple x86 variants
    if(NOT DEFAULT_SIMD_FLAGS)
        set(DEFAULT_SIMD_FLAGS ""native"")
    endif()
    if (""${CMAKE_INSTALL_PREFIX}"" STREQUAL ""/usr"" AND X86)
        set(DEFAULT_SIMD_FLAGS ""SSE3"")
    endif()

    SET(ENABLE_SIMD_FLAGS ""${DEFAULT_SIMD_FLAGS}"" CACHE STRING ""Set compiler SIMD flags"")
    SET_PROPERTY(CACHE ENABLE_SIMD_FLAGS PROPERTY STRINGS none native SSE3 SSE4.2 AVX AVX2) 

    if(${ENABLE_SIMD_FLAGS} MATCHES ""native"")
        add_definitions(-march=native)
        if(X86)
            add_definitions(-mfpmath=both)
        endif()
        message(STATUS ""Enabling native optimizations"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX2"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mavx -mfma -mavx2 -mfpmath=both)
        message(STATUS ""Enabling AVX2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mavx -mfpmath=both)
        message(STATUS ""Enabling AVX instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE4.2"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mfpmath=both)
        message(STATUS ""Enabling SSE4.2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE3"")
        add_definitions(-mmmx -msse -msse2 -msse3 -mfpmath=both)
        message(STATUS ""Enabling SSE3 instructions"")
    endif()

endif()

if (MSVC)
    include_directories(${PROJECT_SOURCE_DIR}/external/msvc)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    set( MSVC_MULTITHREAD_COMPILE_FLAGS ""/MP"")
    set( CMAKE_CXX_FLAGS  ""${CMAKE_CXX_FLAGS} ${MSVC_MULTITHREAD_COMPILE_FLAGS}"" )

    SET(ENABLE_SIMD_FLAGS ""SSE2"" CACHE STRING ""Set compiler SIMD flags"")
    SET_PROPERTY(CACHE ENABLE_SIMD_FLAGS PROPERTY STRINGS none SSE2 AVX AVX2) 

    if(${ENABLE_SIMD_FLAGS} MATCHES ""AVX2"")
        add_definitions(/arch:AVX2)
        message(STATUS ""Enabling AVX2 instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""AVX"")
        add_definitions(/arch:AVX)
        message(STATUS ""Enabling AVX instructions"")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES ""SSE2"")
        add_definitions(/arch:SSE2)
        message(STATUS ""Enabling SSE2 instructions"")
    endif()
endif(MSVC)

if (APPLE)
   add_definitions(-D__unix__=1) #we use this for unix detection, but clang does not define it
endif(APPLE)

########################################################################
# rpath setup - http://www.cmake.org/Wiki/CMake_RPATH_handling
########################################################################
# use, i.e. don't skip the full RPATH for the build tree
option(CMAKE_SKIP_BUILD_RPATH ""skip rpath build"" FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
option(CMAKE_BUILD_WITH_INSTALL_RPATH ""build with install rpath"" FALSE)

# the RPATH to be used when installing, but only if it's not a system directory
option(CMAKE_AUTOSET_INSTALL_RPATH TRUE)
if(CMAKE_AUTOSET_INSTALL_RPATH)
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}"" isSystemDir)
IF(""${isSystemDir}"" STREQUAL ""-1"")
    SET(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}"")
ENDIF(""${isSystemDir}"" STREQUAL ""-1"")
endif(CMAKE_AUTOSET_INSTALL_RPATH)

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
option(CMAKE_INSTALL_RPATH_USE_LINK_PATH ""build with automatic rpath"" TRUE)

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
endif()

########################################################################
## lime suite build
########################################################################
add_subdirectory(src)
add_subdirectory(mcu_program)
add_subdirectory(LimeUtil)
add_subdirectory(QuickTest)

########################################################################
## SoapySDR bindings for LMS7 RFIC driver
########################################################################
add_subdirectory(SoapyLMS7)

########################################################################
## udev rules for linux usb
########################################################################
if (DEFINED UDEV_RULES_PATH)
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/udev-rules/64-limesuite.rules
        DESTINATION ${UDEV_RULES_PATH})
endif()

########################################################################
## Doxygen
########################################################################
find_package(Doxygen QUIET)
include(FeatureSummary)
include(CMakeDependentOption)
cmake_dependent_option(ENABLE_API_DOXYGEN ""Enable LMS API Doxygen documentation"" OFF ""DOXYGEN_FOUND"" OFF)
add_feature_info(LimeSuiteDocAPI ENABLE_API_DOXYGEN ""LMS API Doxygen documentation"")
if (ENABLE_API_DOXYGEN)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/DoxyfileAPI.in ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile @ONLY)
  add_custom_target(docAPI ALL
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile 
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating LMS API documentation with Doxygen"" VERBATIM
    )
endif()

if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile 
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT ""Generating documentation with Doxygen"" VERBATIM
    )
endif()

########################################################################
# CMake Project config files
########################################################################
if (ENABLE_HEADERS AND ENABLE_LIBRARY)
    configure_file(
        ${PROJECT_SOURCE_DIR}/cmake/Modules/LimeSuiteConfigVersion.in.cmake
        ${PROJECT_BINARY_DIR}/LimeSuiteConfigVersion.cmake
    @ONLY)

    install(FILES
        ${PROJECT_SOURCE_DIR}/cmake/Modules/LimeSuiteConfig.cmake
        ${PROJECT_BINARY_DIR}/LimeSuiteConfigVersion.cmake
        DESTINATION lib${LIB_SUFFIX}/cmake/${PROJECT_NAME})
endif (ENABLE_HEADERS AND ENABLE_LIBRARY)

########################################################################
## freedesktop environment integration
########################################################################
add_subdirectory(Desktop)

########################################################################
## Octave plugin integration
########################################################################
add_subdirectory(octave)

#########################################################################
# summary
#########################################################################
include(FeatureSummary)
message(STATUS """")
message(STATUS ""######################################################"")
message(STATUS ""## ${PROJECT_NAME} enabled features"")
message(STATUS ""######################################################"")
feature_summary(WHAT ENABLED_FEATURES)
message(STATUS ""######################################################"")
message(STATUS ""## ${PROJECT_NAME} disabled features"")
message(STATUS ""######################################################"")
feature_summary(WHAT DISABLED_FEATURES)
message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}"")
message(STATUS ""Build timestamp: ${BUILD_TIMESTAMP}"")
message(STATUS ""Lime Suite version: ${LIME_SUITE_VERSION}"")
message(STATUS ""ABI/so version: ${LIME_SUITE_SOVER}"")
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/DownloadImages.cmake)

########################################################################
# uninstall target
########################################################################
configure_file(
    ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""
    ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
    IMMEDIATE @ONLY)

#only add uninstall target if this is the top project
if(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})
add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif()


",3.1.3,3.1
45195,cppformat,cppformat,False,False,False,False,False,200,C++,2020-05-17 17:32:57+00:00,2012-12-07 16:26:46+00:00,8311,4205,"cmake_minimum_required(VERSION 3.1.0)

# Use newer policies if available, up to most recent tested version of CMake.
if(${CMAKE_VERSION} VERSION_LESS 3.11)
  cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
  cmake_policy(VERSION 3.11)
endif()

# Determine if fmt is built as a subproject (using add_subdirectory)
# or if it is the master project.
set(MASTER_PROJECT OFF)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set(MASTER_PROJECT ON)
  message(STATUS ""CMake version: ${CMAKE_VERSION}"")
endif ()

# Joins arguments and places the results in ${result_var}.
function(join result_var)
  set(result )
  foreach (arg ${ARGN})
    set(result ""${result}${arg}"")
  endforeach ()
  set(${result_var} ""${result}"" PARENT_SCOPE)
endfunction()

# Sets a cache variable with a docstring joined from multiple arguments:
#   set(<variable> <value>... CACHE <type> <docstring>...)
# This allows splitting a long docstring for readability.
function(set_verbose)
  cmake_parse_arguments(SET_VERBOSE """" """" ""CACHE"" ${ARGN})
  list(GET SET_VERBOSE_CACHE 0 type)
  list(REMOVE_AT SET_VERBOSE_CACHE 0)
  join(doc ${SET_VERBOSE_CACHE})
  set(${SET_VERBOSE_UNPARSED_ARGUMENTS} CACHE ${type} ${doc})
endfunction()

# Set the default CMAKE_BUILD_TYPE to Release.
# This should be done before the project command since the latter can set
# CMAKE_BUILD_TYPE itself (it does so for nmake).
if (MASTER_PROJECT AND NOT CMAKE_BUILD_TYPE)
  set_verbose(CMAKE_BUILD_TYPE Release CACHE STRING
              ""Choose the type of build, options are: None(CMAKE_CXX_FLAGS or ""
              ""CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."")
endif ()

option(FMT_PEDANTIC ""Enable extra warnings and expensive tests."" OFF)
option(FMT_WERROR ""Halt the compilation with an error on compiler warnings.""
       OFF)

# Options that control generation of various targets.
option(FMT_DOC ""Generate the doc target."" ${MASTER_PROJECT})
option(FMT_INSTALL ""Generate the install target."" ${MASTER_PROJECT})
option(FMT_TEST ""Generate the test target."" ${MASTER_PROJECT})
option(FMT_FUZZ ""Generate the fuzz target."" OFF)
option(FMT_CUDA_TEST ""Generate the cuda-test target."" OFF)
option(FMT_OS ""Include core requiring OS (Windows/Posix) "" ON)
project(FMT CXX)

# Get version from core.h
file(READ include/fmt/core.h core_h)
if (NOT core_h MATCHES ""FMT_VERSION ([0-9]+)([0-9][0-9])([0-9][0-9])"")
  message(FATAL_ERROR ""Cannot get FMT_VERSION from core.h."")
endif ()
# Use math to skip leading zeros if any.
math(EXPR CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})
math(EXPR CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})
math(EXPR CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})
join(FMT_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.
                 ${CPACK_PACKAGE_VERSION_PATCH})
message(STATUS ""Version: ${FMT_VERSION}"")

message(STATUS ""Build type: ${CMAKE_BUILD_TYPE}"")

if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif ()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
  ""${CMAKE_CURRENT_SOURCE_DIR}/support/cmake"")

include(cxx14)
include(CheckCXXCompilerFlag)
include(JoinPaths)

list(FIND CMAKE_CXX_COMPILE_FEATURES ""cxx_variadic_templates"" index)
if (${index} GREATER -1)
  # Use cxx_variadic_templates instead of more appropriate cxx_std_11 for
  # compatibility with older CMake versions.
  set(FMT_REQUIRED_FEATURES cxx_variadic_templates)
endif ()
message(STATUS ""Required features: ${FMT_REQUIRED_FEATURES}"")

if (CMAKE_CXX_COMPILER_ID MATCHES ""GNU"")
  set(PEDANTIC_COMPILE_FLAGS -pedantic-errors -Wall -Wextra -pedantic
      -Wold-style-cast -Wundef
      -Wredundant-decls -Wwrite-strings -Wpointer-arith
      -Wcast-qual -Wformat=2 -Wmissing-include-dirs
      -Wcast-align -Wnon-virtual-dtor
      -Wctor-dtor-privacy -Wdisabled-optimization
      -Winvalid-pch -Woverloaded-virtual
      -Wconversion -Wswitch-enum
      -Wno-ctor-dtor-privacy -Wno-format-nonliteral -Wno-shadow)
  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)
      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wnoexcept
         -Wno-dangling-else -Wno-unused-local-typedefs)
  endif ()
  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wdouble-promotion
          -Wtrampolines -Wzero-as-null-pointer-constant -Wuseless-cast
          -Wvector-operation-performance -Wsized-deallocation)
  endif ()
  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wshift-overflow=2
          -Wnull-dereference -Wduplicated-cond)
  endif ()
  set(WERROR_FLAG -Werror)
endif ()

if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")
  set(PEDANTIC_COMPILE_FLAGS -Wall -Wextra -pedantic -Wconversion
      -Wno-sign-conversion -Wdeprecated -Wweak-vtables)
  check_cxx_compiler_flag(-Wzero-as-null-pointer-constant HAS_NULLPTR_WARNING)
  if (HAS_NULLPTR_WARNING)
    set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS}
        -Wzero-as-null-pointer-constant)
  endif ()
  set(WERROR_FLAG -Werror)
endif ()

if (MSVC)
  set(PEDANTIC_COMPILE_FLAGS /W3)
  set(WERROR_FLAG /WX)
endif ()

if (MASTER_PROJECT AND CMAKE_GENERATOR MATCHES ""Visual Studio"")
  # If Microsoft SDK is installed create script run-msbuild.bat that
  # calls SetEnv.cmd to set up build environment and runs msbuild.
  # It is useful when building Visual Studio projects with the SDK
  # toolchain rather than Visual Studio.
  include(FindSetEnv)
  if (WINSDK_SETENV)
    set(MSBUILD_SETUP ""call \""${WINSDK_SETENV}\"""")
  endif ()
  # Set FrameworkPathOverride to get rid of MSB3644 warnings.
  join(netfxpath
       ""C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\""
       "".NETFramework\\v4.0"")
  file(WRITE run-msbuild.bat ""
    ${MSBUILD_SETUP}
    ${CMAKE_MAKE_PROGRAM} -p:FrameworkPathOverride=\""${netfxpath}\"" %*"")
endif ()

set(strtod_l_headers stdlib.h)
if (APPLE)
  set(strtod_l_headers ${strtod_l_headers} xlocale.h)
endif ()

include(CheckSymbolExists)
if (WIN32)
  check_symbol_exists(_strtod_l ""${strtod_l_headers}"" HAVE_STRTOD_L)
else ()
  check_symbol_exists(strtod_l ""${strtod_l_headers}"" HAVE_STRTOD_L)
endif ()

function(add_headers VAR)
  set(headers ${${VAR}})
  foreach (header ${ARGN})
    set(headers ${headers} include/fmt/${header})
  endforeach()
  set(${VAR} ${headers} PARENT_SCOPE)
endfunction()

# Define the fmt library, its includes and the needed defines.
add_headers(FMT_HEADERS chrono.h color.h compile.h core.h format.h format-inl.h
                        locale.h os.h ostream.h posix.h printf.h ranges.h)
if (FMT_OS)
  set(FMT_SOURCES src/format.cc src/os.cc)
else()
  set(FMT_SOURCES src/format.cc)
endif ()

add_library(fmt ${FMT_SOURCES} ${FMT_HEADERS} README.rst ChangeLog.rst)
add_library(fmt::fmt ALIAS fmt)

if (HAVE_STRTOD_L)
  target_compile_definitions(fmt PUBLIC FMT_LOCALE)
endif ()

if (FMT_WERROR)
  target_compile_options(fmt PRIVATE ${WERROR_FLAG})
endif ()
if (FMT_PEDANTIC)
  target_compile_options(fmt PRIVATE ${PEDANTIC_COMPILE_FLAGS})
endif ()

target_compile_features(fmt INTERFACE ${FMT_REQUIRED_FEATURES})

target_include_directories(fmt PUBLIC
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

set(FMT_DEBUG_POSTFIX d CACHE STRING ""Debug library postfix."")

set_target_properties(fmt PROPERTIES
  VERSION ${FMT_VERSION} SOVERSION ${CPACK_PACKAGE_VERSION_MAJOR}
  DEBUG_POSTFIX ""${FMT_DEBUG_POSTFIX}"")

# Set FMT_LIB_NAME for pkg-config fmt.pc. We cannot use the OUTPUT_NAME target
# property because it's not set by default.
set(FMT_LIB_NAME fmt)
if (CMAKE_BUILD_TYPE STREQUAL ""Debug"")
  set(FMT_LIB_NAME ${FMT_LIB_NAME}${FMT_DEBUG_POSTFIX})
endif ()

if (BUILD_SHARED_LIBS)
  if (UNIX AND NOT APPLE AND NOT ${CMAKE_SYSTEM_NAME} MATCHES ""SunOS"")
    # Fix rpmlint warning:
    # unused-direct-shlib-dependency /usr/lib/libformat.so.1.1.0 /lib/libm.so.6.
    target_link_libraries(fmt -Wl,--as-needed)
  endif ()
  target_compile_definitions(fmt PRIVATE FMT_EXPORT INTERFACE FMT_SHARED)
endif ()
if (FMT_SAFE_DURATION_CAST)
  target_compile_definitions(fmt PUBLIC FMT_SAFE_DURATION_CAST)
endif()

add_library(fmt-header-only INTERFACE)
add_library(fmt::fmt-header-only ALIAS fmt-header-only)

target_compile_definitions(fmt-header-only INTERFACE FMT_HEADER_ONLY=1)
target_compile_features(fmt-header-only INTERFACE ${FMT_REQUIRED_FEATURES})

target_include_directories(fmt-header-only INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

# Install targets.
if (FMT_INSTALL)
  include(GNUInstallDirs)
  include(CMakePackageConfigHelpers)
  set_verbose(FMT_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/fmt CACHE STRING
              ""Installation directory for cmake files, a relative path ""
              ""that will be joined to ${CMAKE_INSTALL_PREFIX}, or an arbitrary absolute path."")
  set(version_config ${PROJECT_BINARY_DIR}/fmt-config-version.cmake)
  set(project_config ${PROJECT_BINARY_DIR}/fmt-config.cmake)
  set(pkgconfig ${PROJECT_BINARY_DIR}/fmt.pc)
  set(targets_export_name fmt-targets)

  set (INSTALL_TARGETS fmt)
  if (TARGET fmt-header-only)
    set(INSTALL_TARGETS ${INSTALL_TARGETS} fmt-header-only)
  endif ()

  set_verbose(FMT_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING
              ""Installation directory for libraries, a relative path ""
              ""that will be joined to ${CMAKE_INSTALL_PREFIX}, or an arbitrary absolute path."")

  set_verbose(FMT_INC_DIR ${CMAKE_INSTALL_INCLUDEDIR}/fmt CACHE STRING
              ""Installation directory for include files, a relative path ""
              ""that will be joined to ${CMAKE_INSTALL_PREFIX}, or an arbitrary absolute path."")

  set_verbose(FMT_PKGCONFIG_DIR ${CMAKE_INSTALL_LIBDIR}/pkgconfig CACHE PATH
              ""Installation directory for pkgconfig (.pc) files, a relative path ""
              ""that will be joined to ${CMAKE_INSTALL_PREFIX}, or an arbitrary absolute path."")

  # Generate the version, config and target files into the build directory.
  write_basic_package_version_file(
    ${version_config}
    VERSION ${FMT_VERSION}
    COMPATIBILITY AnyNewerVersion)

  join_paths(libdir_for_pc_file ""\${exec_prefix}"" ""${CMAKE_INSTALL_LIBDIR}"")
  join_paths(includedir_for_pc_file ""\${prefix}"" ""${CMAKE_INSTALL_INCLUDEDIR}"")

  configure_file(
    ""${PROJECT_SOURCE_DIR}/support/cmake/fmt.pc.in""
    ""${pkgconfig}""
    @ONLY)
  configure_package_config_file(
    ${PROJECT_SOURCE_DIR}/support/cmake/fmt-config.cmake.in
    ${project_config}
    INSTALL_DESTINATION ${FMT_CMAKE_DIR})
  # Use a namespace because CMake provides better diagnostics for namespaced
  # imported targets.
  export(TARGETS ${INSTALL_TARGETS} NAMESPACE fmt::
         FILE ${PROJECT_BINARY_DIR}/${targets_export_name}.cmake)

  # Install version, config and target files.
  install(
    FILES ${project_config} ${version_config}
    DESTINATION ${FMT_CMAKE_DIR})
  install(EXPORT ${targets_export_name} DESTINATION ${FMT_CMAKE_DIR}
          NAMESPACE fmt::)

  # Install the library and headers.
  install(TARGETS ${INSTALL_TARGETS} EXPORT ${targets_export_name}
          LIBRARY DESTINATION ${FMT_LIB_DIR}
          ARCHIVE DESTINATION ${FMT_LIB_DIR}
          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

  install(FILES $<TARGET_PDB_FILE:${INSTALL_TARGETS}>
          DESTINATION ${FMT_LIB_DIR} OPTIONAL)
  install(FILES ${FMT_HEADERS} DESTINATION ${FMT_INC_DIR})
  install(FILES ""${pkgconfig}"" DESTINATION ""${FMT_PKGCONFIG_DIR}"")
endif ()

if (FMT_DOC)
  add_subdirectory(doc)
endif ()

if (FMT_TEST)
  enable_testing()
  add_subdirectory(test)
endif ()

# Control fuzzing independent of the unit tests.
if (FMT_FUZZ)
  add_subdirectory(test/fuzzing)
  target_compile_definitions(fmt PUBLIC FMT_FUZZ)
endif ()

set(gitignore ${PROJECT_SOURCE_DIR}/.gitignore)
if (MASTER_PROJECT AND EXISTS ${gitignore})
  # Get the list of ignored files from .gitignore.
  file (STRINGS ${gitignore} lines)
  list(REMOVE_ITEM lines /doc/html)
  foreach (line ${lines})
    string(REPLACE ""."" ""[.]"" line ""${line}"")
    string(REPLACE ""*"" "".*"" line ""${line}"")
    set(ignored_files ${ignored_files} ""${line}$"" ""${line}/"")
  endforeach ()
  set(ignored_files ${ignored_files}
    /.git /breathe /format-benchmark sphinx/ .buildinfo .doctrees)

  set(CPACK_SOURCE_GENERATOR ZIP)
  set(CPACK_SOURCE_IGNORE_FILES ${ignored_files})
  set(CPACK_SOURCE_PACKAGE_FILE_NAME fmt-${FMT_VERSION})
  set(CPACK_PACKAGE_NAME fmt)
  set(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README.rst)
  include(CPack)
endif ()
",3.1.0,3.1
45210,potassco,clasp,False,False,False,False,False,6,C++,2020-04-28 18:21:50+00:00,2016-05-10 12:44:35+00:00,55,380,"cmake_minimum_required(VERSION 3.1)
project(CLASP VERSION 3.3.5 LANGUAGES CXX)
# Enable folders in IDEs like Visual Studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if (POLICY CMP0063)
	cmake_policy(SET CMP0063 NEW)
endif()
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
	message(STATUS ""No build type selected - using 'Release'"")
	set(CMAKE_BUILD_TYPE ""Release"")
endif()
list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake"")

include(GNUInstallDirs)

# Configuration options
option(CLASP_BUILD_APP          ""whether or not to build the clasp application"" ON)
option(CLASP_BUILD_STATIC       ""whether or not to link statically (if supported)"" OFF)
option(CLASP_BUILD_TESTS        ""whether or not to build clasp unit tests"" OFF)
option(CLASP_BUILD_EXAMPLES     ""whether or not to build examples"" OFF)
option(CLASP_BUILD_WITH_THREADS ""whether or not to build clasp with threading support (requires C++11)"" ON)
option(CLASP_INSTALL_LIB        ""whether or not to install libclasp"" OFF)

if (NOT MSVC)
	if (NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
		set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
	endif()
	if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
	endif()
	if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
		set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
	endif()
else()
	set(VC_RELEASE_LINK_OPTIONS /LTCG)
	SET(CMAKE_EXE_LINKER_FLAGS_RELEASE    ""${CMAKE_EXE_LINKER_FLAGS_RELEASE}    ${VC_RELEASE_LINK_OPTIONS}"")
	SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE ""${CMAKE_MODULE_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}"")
	SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE ""${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}"")
	SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE ""${CMAKE_STATIC_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}"")
	if (CLASP_BUILD_STATIC)
		# force static runtime
		string(REGEX REPLACE ""/MD"" ""/MT"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}"")
	endif()
endif()
set(clasp_include_dest ""clasp-${CLASP_VERSION}"")
set(clasp_library_dest ""clasp-${CLASP_VERSION}"")
set(cmake_dest         ""clasp-${CLASP_VERSION}/cmake"")

if (CLASP_INSTALL_LIB AND NOT CMAKE_INSTALL_LIBDIR)
	message(STATUS ""LIBDIR no set - using lib"")
	set(CMAKE_INSTALL_LIBDIR lib)
endif()


# C++11 is required for building with threads
if (CLASP_BUILD_WITH_THREADS)
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS ON)
	# some versions of findThreads will fail if C is not enabled
	enable_language(C)
	find_package(Threads REQUIRED)

	# Add libatomic if necessary
	if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" AND CMAKE_USE_PTHREADS_INIT)
		include (CheckCXXSourceCompiles)
		set (OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
		set (OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
		list(APPEND CMAKE_REQUIRED_FLAGS ""-std=c++11"")
		list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)
		check_cxx_source_compiles(""
#include <atomic>
#include <cstdint>
std::atomic<uint64_t> x (0);
int main() {
	uint64_t i = x.load(std::memory_order_relaxed);
	return 0;
}
"" CLASP_HAS_WORKING_LIBATOMIC)
		set (CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})
		set (CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES})
		if (NOT CLASP_HAS_WORKING_LIBATOMIC)
			check_library_exists(atomic __atomic_fetch_add_4 """" CLASP_HAS_LIBATOMIC)
			if (CLASP_HAS_LIBATOMIC)
				set_property(TARGET Threads::Threads APPEND PROPERTY INTERFACE_LINK_LIBRARIES ""atomic"")
			endif()
		endif()
	endif()
endif()

# Check for and optionally build external dependency
find_package(potassco 1.0 QUIET CONFIG)
if (NOT potassco_FOUND)
	if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/libpotassco/CMakeLists.txt)
		message(STATUS ""Potassco is not installed - fetching submodule"")
		execute_process(COMMAND git submodule update --init WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_QUIET)
	else()
		message(STATUS ""Potassco is not installed - using local copy"")
	endif()
	set(LIB_POTASSCO_BUILD_APP   ${CLASP_BUILD_APP}   CACHE BOOL """")
	set(LIB_POTASSCO_INSTALL_LIB ${CLASP_INSTALL_LIB} CACHE BOOL """")
	add_subdirectory(libpotassco)
endif()

# Build clasp library
add_subdirectory(src)

# Build optional targets
if(CLASP_BUILD_TESTS)
	enable_testing()
	add_subdirectory(tests)
endif()
# optional doc target
find_package(Doxygen)
if(DOXYGEN_FOUND)
	set(doxyfile ""${CMAKE_CURRENT_SOURCE_DIR}/doc/api/clasp.doxy"")
	add_custom_target(doc_clasp
		COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile}
		WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/doc/api""
		COMMENT ""Generating documentation...""
		VERBATIM)
	set_target_properties(doc_clasp PROPERTIES FOLDER doc)
endif()

if(CLASP_BUILD_APP)
	add_subdirectory(app)
endif()

if(CLASP_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

# Export
configure_file(cmake/clasp-config-version.cmake.in
	${CMAKE_CURRENT_BINARY_DIR}/clasp-config-version.cmake
	@ONLY)

configure_file(cmake/clasp-config.cmake.in
	${CMAKE_CURRENT_BINARY_DIR}/clasp-config.cmake
	@ONLY)

if (CLASP_INSTALL_LIB)
	install(FILES ${CMAKE_CURRENT_BINARY_DIR}/clasp-config.cmake ${CMAKE_CURRENT_BINARY_DIR}/clasp-config-version.cmake
	  DESTINATION ""${CMAKE_INSTALL_LIBDIR}/${cmake_dest}"")
	install(EXPORT clasp DESTINATION ""${CMAKE_INSTALL_LIBDIR}/${cmake_dest}"")
endif()

",3.1,3.1
45356,MitchellHansen,voxel-raycaster,False,False,False,False,False,1,C++,2019-01-18 01:37:06+00:00,2016-08-03 05:45:51+00:00,28,281,"# Check versions
message(STATUS ""CMake version: ${CMAKE_VERSION}"")
cmake_minimum_required(VERSION 3.1)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Set the project name
set(PNAME VoxelRaycaster)
project(${PNAME})

# Set up variables, and find SFML
if (WIN32)
    set(SFML_ROOT root CACHE STRING ""User specified path"")
    set(SFML_INCLUDE_DIR ${SFML_ROOT}/include)
endif()

# You're probably going to need to change these paths
if (UNIX)
	set(OpenCL_INCLUDE_DIR /usr/include/CL)
	set(OpenCL_LIBRARY /usr/lib/x86_64-linux-gnu/libOpenCL.so.1)
endif (UNIX)

set(SFML_COMPONENTS graphics window system network audio)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
find_package(SFML 2.1 COMPONENTS ${SFML_COMPONENTS} REQUIRED)
message(STATUS ""SFML found: ${SFML_FOUND}"")

# Find OpenCL
find_package( OpenCL REQUIRED )
message(STATUS ""OpenCL found: ${OPENCL_FOUND}"")

# Find OpenGL
find_package( OpenGL REQUIRED)
message(STATUS ""OpenGL found: ${OPENGL_FOUND}"")

# Windows requires us to use GLEW to link the GL shit
if (WIN32)
	# Find GLEW
	find_package(GLEW REQUIRED)
	message(STATUS ""GLEW found: ${GLEW_FOUND}"")
endif()

# beignet only supports EGL and not GLX for the cl_khr_gl_sharing extension
if (UNIX)
	# Find X11
	find_package(X11 REQUIRED)
	message(STATUS ""XSS found: ${X11_FOUND}"")
#    find_package(EGL REQUIRED)
#message(STATUS ""EGL found: ${EGL_FOUND}"")
endif (UNIX)

# Include the directories for the main program, GL, CL and SFML's headers
include_directories(${SFML_INCLUDE_DIR})
include_directories(${OpenCL_INCLUDE_DIRS})
include_directories(${OpenGL_INCLUDE_DIRS})
if (UNIX)
	include_directories(${X11_INCLUDE_DIR})
    #    include_directories(${EGL_INCLUDE_DIRS})
endif()
include_directories(include)

# Glob all thr sources into their values
file(GLOB_RECURSE SOURCES ""src/*.cpp"")
file(GLOB_RECURSE HEADERS ""include/*.h"" ""include/*.hpp"")
file(GLOB_RECURSE KERNELS ""kernels/*.cl"")
file(GLOB_RECURSE SHADERS ""shaders/*.vert"" ""shaders/*.tesc"" ""shaders/*.tese"" ""shaders/*.geom"" ""shaders/*.frag"" ""shaders/*.comp"")


add_executable(${PNAME} ${SOURCES} ${HEADERS} ${KERNELS} ${SHADERS})

# Follow the sub directory structure to add sub-filters in VS
# Gotta do it one by one unfortunately

foreach (source IN ITEMS ${SOURCES})
	if (IS_ABSOLUTE ""${source}"")

		get_filename_component(filename ${source} DIRECTORY)

		STRING(REGEX REPLACE ""/"" ""\\\\"" filename ${filename})
		
		string(REGEX MATCHALL ""src(.*)"" substrings ${filename})
		list(GET substrings 0 substring)
		
		SOURCE_GROUP(${substring} FILES ${source}) 
		
	endif()
endforeach()

foreach (source IN ITEMS ${HEADERS})
	if (IS_ABSOLUTE ""${source}"")

		get_filename_component(filename ${source} DIRECTORY)

		STRING(REGEX REPLACE ""/"" ""\\\\"" filename ${filename})
		
		string(REGEX MATCHALL ""include(.*)"" substrings ${filename})
		list(GET substrings 0 substring)
		
		SOURCE_GROUP(${substring} FILES ${source}) 
		
	endif()
endforeach()

foreach (source IN ITEMS ${KERNELS})
	if (IS_ABSOLUTE ""${source}"")

		get_filename_component(filename ${source} DIRECTORY)

		STRING(REGEX REPLACE ""/"" ""\\\\"" filename ${filename})
		
		string(REGEX MATCHALL ""kernels(.*)"" substrings ${filename})
		list(GET substrings 0 substring)
		
		SOURCE_GROUP(${substring} FILES ${source}) 
		
	endif()
endforeach()

foreach (source IN ITEMS ${SHADERS})
	if (IS_ABSOLUTE ""${source}"")

		get_filename_component(filename ${source} DIRECTORY)

		STRING(REGEX REPLACE ""/"" ""\\\\"" filename ${filename})
		
		string(REGEX MATCHALL ""shaders(.*)"" substrings ${filename})
		list(GET substrings 0 substring)
		
		SOURCE_GROUP(${substring} FILES ${source}) 
		
	endif()
endforeach()

# Link CL, GL, and SFML
target_link_libraries (${PNAME} ${SFML_LIBRARIES} ${SFML_DEPENDENCIES})
target_link_libraries (${PNAME} ${OpenCL_LIBRARY})
target_link_libraries (${PNAME} ${OPENGL_LIBRARIES})

if (UNIX)
	target_link_libraries (${PNAME} ${X11_LIBRARIES})
    #    target_link_libraries (${PNAME} ${EGL_LIBRARIES})
endif()

if (WIN32)
	target_link_libraries (${PNAME} ${GLEW_LIBRARIES})
endif()


if (NOT WIN32)
	target_link_libraries (${PNAME} -lpthread)
endif()

# Setup to use C++14
set_property(TARGET ${PNAME} PROPERTY CXX_STANDARD 14)

",3.1,3.1
